// This file has been automatically generated by capnp-es.
import * as $ from "capnp-es";
export const _capnpFileId = BigInt("0x9a7b8c6d5e4f3456");
export class ZoneChange extends $.Struct {
  static readonly _capnp = {
    displayName: "ZoneChange",
    id: "add206cd099784fe",
    size: new $.ObjectSize(32, 1)
  };
  get charName(): string {
    return $.utils.getText(0, this);
  }
  set charName(value: string) {
    $.utils.setText(0, value, this);
  }
  get zoneId(): number {
    return $.utils.getInt32(0, this);
  }
  set zoneId(value: number) {
    $.utils.setInt32(0, value, this);
  }
  get instanceId(): number {
    return $.utils.getInt32(4, this);
  }
  set instanceId(value: number) {
    $.utils.setInt32(4, value, this);
  }
  get y(): number {
    return $.utils.getFloat32(8, this);
  }
  set y(value: number) {
    $.utils.setFloat32(8, value, this);
  }
  get x(): number {
    return $.utils.getFloat32(12, this);
  }
  set x(value: number) {
    $.utils.setFloat32(12, value, this);
  }
  get z(): number {
    return $.utils.getFloat32(16, this);
  }
  set z(value: number) {
    $.utils.setFloat32(16, value, this);
  }
  get zoneReason(): number {
    return $.utils.getInt32(20, this);
  }
  set zoneReason(value: number) {
    $.utils.setInt32(20, value, this);
  }
  get success(): number {
    return $.utils.getInt32(24, this);
  }
  set success(value: number) {
    $.utils.setInt32(24, value, this);
  }
  toString(): string {
    return "ZoneChange_" + super.toString();
  }
}
export class NewZone extends $.Struct {
  static readonly _capnp = {
    displayName: "NewZone",
    id: "86020f1b6279dc1e",
    size: new $.ObjectSize(56, 14)
  };
  static _ZonePoints: $.ListCtor<ZonePoint>;
  get charName(): string {
    return $.utils.getText(0, this);
  }
  set charName(value: string) {
    $.utils.setText(0, value, this);
  }
  get shortName(): string {
    return $.utils.getText(1, this);
  }
  set shortName(value: string) {
    $.utils.setText(1, value, this);
  }
  get longName(): string {
    return $.utils.getText(2, this);
  }
  set longName(value: string) {
    $.utils.setText(2, value, this);
  }
  get ztype(): number {
    return $.utils.getInt32(0, this);
  }
  set ztype(value: number) {
    $.utils.setInt32(0, value, this);
  }
  _adoptFogRed(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(3, this));
  }
  _disownFogRed(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.fogRed);
  }
  get fogRed(): $.List<number> {
    return $.utils.getList(3, $.Int32List, this);
  }
  _hasFogRed(): boolean {
    return !$.utils.isNull($.utils.getPointer(3, this));
  }
  _initFogRed(length: number): $.List<number> {
    return $.utils.initList(3, $.Int32List, length, this);
  }
  set fogRed(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(3, this));
  }
  _adoptFogGreen(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(4, this));
  }
  _disownFogGreen(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.fogGreen);
  }
  get fogGreen(): $.List<number> {
    return $.utils.getList(4, $.Int32List, this);
  }
  _hasFogGreen(): boolean {
    return !$.utils.isNull($.utils.getPointer(4, this));
  }
  _initFogGreen(length: number): $.List<number> {
    return $.utils.initList(4, $.Int32List, length, this);
  }
  set fogGreen(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(4, this));
  }
  _adoptFogBlue(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(5, this));
  }
  _disownFogBlue(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.fogBlue);
  }
  get fogBlue(): $.List<number> {
    return $.utils.getList(5, $.Int32List, this);
  }
  _hasFogBlue(): boolean {
    return !$.utils.isNull($.utils.getPointer(5, this));
  }
  _initFogBlue(length: number): $.List<number> {
    return $.utils.initList(5, $.Int32List, length, this);
  }
  set fogBlue(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(5, this));
  }
  _adoptFogMinclip(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(6, this));
  }
  _disownFogMinclip(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.fogMinclip);
  }
  get fogMinclip(): $.List<number> {
    return $.utils.getList(6, $.Float32List, this);
  }
  _hasFogMinclip(): boolean {
    return !$.utils.isNull($.utils.getPointer(6, this));
  }
  _initFogMinclip(length: number): $.List<number> {
    return $.utils.initList(6, $.Float32List, length, this);
  }
  set fogMinclip(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(6, this));
  }
  _adoptFogMaxclip(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(7, this));
  }
  _disownFogMaxclip(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.fogMaxclip);
  }
  get fogMaxclip(): $.List<number> {
    return $.utils.getList(7, $.Float32List, this);
  }
  _hasFogMaxclip(): boolean {
    return !$.utils.isNull($.utils.getPointer(7, this));
  }
  _initFogMaxclip(length: number): $.List<number> {
    return $.utils.initList(7, $.Float32List, length, this);
  }
  set fogMaxclip(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(7, this));
  }
  get gravity(): number {
    return $.utils.getFloat32(4, this);
  }
  set gravity(value: number) {
    $.utils.setFloat32(4, value, this);
  }
  get timeType(): number {
    return $.utils.getInt32(8, this);
  }
  set timeType(value: number) {
    $.utils.setInt32(8, value, this);
  }
  _adoptRainChance(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(8, this));
  }
  _disownRainChance(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.rainChance);
  }
  get rainChance(): $.List<number> {
    return $.utils.getList(8, $.Int32List, this);
  }
  _hasRainChance(): boolean {
    return !$.utils.isNull($.utils.getPointer(8, this));
  }
  _initRainChance(length: number): $.List<number> {
    return $.utils.initList(8, $.Int32List, length, this);
  }
  set rainChance(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(8, this));
  }
  _adoptRainDuration(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(9, this));
  }
  _disownRainDuration(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.rainDuration);
  }
  get rainDuration(): $.List<number> {
    return $.utils.getList(9, $.Int32List, this);
  }
  _hasRainDuration(): boolean {
    return !$.utils.isNull($.utils.getPointer(9, this));
  }
  _initRainDuration(length: number): $.List<number> {
    return $.utils.initList(9, $.Int32List, length, this);
  }
  set rainDuration(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(9, this));
  }
  _adoptSnowChance(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(10, this));
  }
  _disownSnowChance(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.snowChance);
  }
  get snowChance(): $.List<number> {
    return $.utils.getList(10, $.Int32List, this);
  }
  _hasSnowChance(): boolean {
    return !$.utils.isNull($.utils.getPointer(10, this));
  }
  _initSnowChance(length: number): $.List<number> {
    return $.utils.initList(10, $.Int32List, length, this);
  }
  set snowChance(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(10, this));
  }
  _adoptSnowDuration(value: $.Orphan<$.List<number>>): void {
    $.utils.adopt(value, $.utils.getPointer(11, this));
  }
  _disownSnowDuration(): $.Orphan<$.List<number>> {
    return $.utils.disown(this.snowDuration);
  }
  get snowDuration(): $.List<number> {
    return $.utils.getList(11, $.Int32List, this);
  }
  _hasSnowDuration(): boolean {
    return !$.utils.isNull($.utils.getPointer(11, this));
  }
  _initSnowDuration(length: number): $.List<number> {
    return $.utils.initList(11, $.Int32List, length, this);
  }
  set snowDuration(value: $.List<number>) {
    $.utils.copyFrom(value, $.utils.getPointer(11, this));
  }
  get sky(): number {
    return $.utils.getInt32(12, this);
  }
  set sky(value: number) {
    $.utils.setInt32(12, value, this);
  }
  get zoneExpMultiplier(): number {
    return $.utils.getFloat32(16, this);
  }
  set zoneExpMultiplier(value: number) {
    $.utils.setFloat32(16, value, this);
  }
  get safeY(): number {
    return $.utils.getFloat32(20, this);
  }
  set safeY(value: number) {
    $.utils.setFloat32(20, value, this);
  }
  get safeX(): number {
    return $.utils.getFloat32(24, this);
  }
  set safeX(value: number) {
    $.utils.setFloat32(24, value, this);
  }
  get safeZ(): number {
    return $.utils.getFloat32(28, this);
  }
  set safeZ(value: number) {
    $.utils.setFloat32(28, value, this);
  }
  get maxZ(): number {
    return $.utils.getFloat32(32, this);
  }
  set maxZ(value: number) {
    $.utils.setFloat32(32, value, this);
  }
  get underworld(): number {
    return $.utils.getFloat32(36, this);
  }
  set underworld(value: number) {
    $.utils.setFloat32(36, value, this);
  }
  get minclip(): number {
    return $.utils.getFloat32(40, this);
  }
  set minclip(value: number) {
    $.utils.setFloat32(40, value, this);
  }
  get maxclip(): number {
    return $.utils.getFloat32(44, this);
  }
  set maxclip(value: number) {
    $.utils.setFloat32(44, value, this);
  }
  get zoneShortName2(): string {
    return $.utils.getText(12, this);
  }
  set zoneShortName2(value: string) {
    $.utils.setText(12, value, this);
  }
  get zoneIdNumber(): number {
    return $.utils.getInt32(48, this);
  }
  set zoneIdNumber(value: number) {
    $.utils.setInt32(48, value, this);
  }
  get zoneInstance(): number {
    return $.utils.getInt32(52, this);
  }
  set zoneInstance(value: number) {
    $.utils.setInt32(52, value, this);
  }
  _adoptZonePoints(value: $.Orphan<$.List<ZonePoint>>): void {
    $.utils.adopt(value, $.utils.getPointer(13, this));
  }
  _disownZonePoints(): $.Orphan<$.List<ZonePoint>> {
    return $.utils.disown(this.zonePoints);
  }
  get zonePoints(): $.List<ZonePoint> {
    return $.utils.getList(13, NewZone._ZonePoints, this);
  }
  _hasZonePoints(): boolean {
    return !$.utils.isNull($.utils.getPointer(13, this));
  }
  _initZonePoints(length: number): $.List<ZonePoint> {
    return $.utils.initList(13, NewZone._ZonePoints, length, this);
  }
  set zonePoints(value: $.List<ZonePoint>) {
    $.utils.copyFrom(value, $.utils.getPointer(13, this));
  }
  toString(): string {
    return "NewZone_" + super.toString();
  }
}
export const ZoneChangeType = {
  FROM_WORLD: 0,
  FROM_ZONE: 1
} as const;
export type ZoneChangeType = (typeof ZoneChangeType)[keyof typeof ZoneChangeType];
export class RequestClientZoneChange extends $.Struct {
  static readonly _capnp = {
    displayName: "RequestClientZoneChange",
    id: "9e2bb9505c9a267d",
    size: new $.ObjectSize(32, 0)
  };
  get zoneId(): number {
    return $.utils.getInt32(0, this);
  }
  set zoneId(value: number) {
    $.utils.setInt32(0, value, this);
  }
  get instanceId(): number {
    return $.utils.getInt32(4, this);
  }
  set instanceId(value: number) {
    $.utils.setInt32(4, value, this);
  }
  get y(): number {
    return $.utils.getFloat32(8, this);
  }
  set y(value: number) {
    $.utils.setFloat32(8, value, this);
  }
  get x(): number {
    return $.utils.getFloat32(12, this);
  }
  set x(value: number) {
    $.utils.setFloat32(12, value, this);
  }
  get z(): number {
    return $.utils.getFloat32(16, this);
  }
  set z(value: number) {
    $.utils.setFloat32(16, value, this);
  }
  get heading(): number {
    return $.utils.getFloat32(20, this);
  }
  set heading(value: number) {
    $.utils.setFloat32(20, value, this);
  }
  get type(): ZoneChangeType {
    return $.utils.getUint16(24, this) as ZoneChangeType;
  }
  set type(value: ZoneChangeType) {
    $.utils.setUint16(24, value, this);
  }
  toString(): string {
    return "RequestClientZoneChange_" + super.toString();
  }
}
export class ZonePoint extends $.Struct {
  static readonly _capnp = {
    displayName: "ZonePoint",
    id: "c644c15adcdd09cb",
    size: new $.ObjectSize(32, 0)
  };
  get iterator(): number {
    return $.utils.getInt32(0, this);
  }
  set iterator(value: number) {
    $.utils.setInt32(0, value, this);
  }
  get y(): number {
    return $.utils.getFloat32(4, this);
  }
  set y(value: number) {
    $.utils.setFloat32(4, value, this);
  }
  get x(): number {
    return $.utils.getFloat32(8, this);
  }
  set x(value: number) {
    $.utils.setFloat32(8, value, this);
  }
  get z(): number {
    return $.utils.getFloat32(12, this);
  }
  set z(value: number) {
    $.utils.setFloat32(12, value, this);
  }
  get heading(): number {
    return $.utils.getFloat32(16, this);
  }
  set heading(value: number) {
    $.utils.setFloat32(16, value, this);
  }
  get zoneId(): number {
    return $.utils.getInt32(20, this);
  }
  set zoneId(value: number) {
    $.utils.setInt32(20, value, this);
  }
  get zoneInstance(): number {
    return $.utils.getInt32(24, this);
  }
  set zoneInstance(value: number) {
    $.utils.setInt32(24, value, this);
  }
  get number(): number {
    return $.utils.getInt32(28, this);
  }
  set number(value: number) {
    $.utils.setInt32(28, value, this);
  }
  toString(): string {
    return "ZonePoint_" + super.toString();
  }
}
export class ZoneSession extends $.Struct {
  static readonly _capnp = {
    displayName: "ZoneSession",
    id: "8a3669cb193af4dc",
    size: new $.ObjectSize(8, 0)
  };
  get zoneId(): number {
    return $.utils.getInt32(0, this);
  }
  set zoneId(value: number) {
    $.utils.setInt32(0, value, this);
  }
  get instanceId(): number {
    return $.utils.getInt32(4, this);
  }
  set instanceId(value: number) {
    $.utils.setInt32(4, value, this);
  }
  toString(): string {
    return "ZoneSession_" + super.toString();
  }
}
NewZone._ZonePoints = $.CompositeList(ZonePoint);
