// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "zone/zone.proto" (package "eq.zone", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message eq.zone.ZoneChange
 */
export interface ZoneChange {
    /**
     * @generated from protobuf field: string char_name = 1;
     */
    charName: string;
    /**
     * @generated from protobuf field: int32 zone_id = 2;
     */
    zoneId: number;
    /**
     * @generated from protobuf field: int32 instance_id = 3;
     */
    instanceId: number;
    /**
     * @generated from protobuf field: float y = 4;
     */
    y: number;
    /**
     * @generated from protobuf field: float x = 5;
     */
    x: number;
    /**
     * @generated from protobuf field: float z = 6;
     */
    z: number;
    /**
     * @generated from protobuf field: int32 zone_reason = 7;
     */
    zoneReason: number;
    /**
     * @generated from protobuf field: int32 success = 8;
     */
    success: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ZoneChange$Type extends MessageType<ZoneChange> {
    constructor() {
        super("eq.zone.ZoneChange", [
            { no: 1, name: "char_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "zone_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "instance_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "zone_reason", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "success", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ZoneChange>): ZoneChange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.charName = "";
        message.zoneId = 0;
        message.instanceId = 0;
        message.y = 0;
        message.x = 0;
        message.z = 0;
        message.zoneReason = 0;
        message.success = 0;
        if (value !== undefined)
            reflectionMergePartial<ZoneChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ZoneChange): ZoneChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string char_name */ 1:
                    message.charName = reader.string();
                    break;
                case /* int32 zone_id */ 2:
                    message.zoneId = reader.int32();
                    break;
                case /* int32 instance_id */ 3:
                    message.instanceId = reader.int32();
                    break;
                case /* float y */ 4:
                    message.y = reader.float();
                    break;
                case /* float x */ 5:
                    message.x = reader.float();
                    break;
                case /* float z */ 6:
                    message.z = reader.float();
                    break;
                case /* int32 zone_reason */ 7:
                    message.zoneReason = reader.int32();
                    break;
                case /* int32 success */ 8:
                    message.success = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ZoneChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string char_name = 1; */
        if (message.charName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.charName);
        /* int32 zone_id = 2; */
        if (message.zoneId !== 0)
            writer.tag(2, WireType.Varint).int32(message.zoneId);
        /* int32 instance_id = 3; */
        if (message.instanceId !== 0)
            writer.tag(3, WireType.Varint).int32(message.instanceId);
        /* float y = 4; */
        if (message.y !== 0)
            writer.tag(4, WireType.Bit32).float(message.y);
        /* float x = 5; */
        if (message.x !== 0)
            writer.tag(5, WireType.Bit32).float(message.x);
        /* float z = 6; */
        if (message.z !== 0)
            writer.tag(6, WireType.Bit32).float(message.z);
        /* int32 zone_reason = 7; */
        if (message.zoneReason !== 0)
            writer.tag(7, WireType.Varint).int32(message.zoneReason);
        /* int32 success = 8; */
        if (message.success !== 0)
            writer.tag(8, WireType.Varint).int32(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.zone.ZoneChange
 */
export const ZoneChange = new ZoneChange$Type();
