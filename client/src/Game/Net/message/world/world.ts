// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "world/world.proto" (package "eq.world", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message eq.world.JWTLogin
 */
export interface JWTLogin {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message eq.world.JWTResponse
 */
export interface JWTResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
/**
 * @generated from protobuf message eq.world.WebInitiateConnection
 */
export interface WebInitiateConnection {
    /**
     * @generated from protobuf field: bool login = 1;
     */
    login: boolean;
}
/**
 * @generated from protobuf message eq.world.EnterWorld
 */
export interface EnterWorld {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 tutorial = 2;
     */
    tutorial: number;
    /**
     * @generated from protobuf field: int32 return_home = 3;
     */
    returnHome: number;
}
/**
 * @generated from protobuf message eq.world.NameApproval
 */
export interface NameApproval {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 race = 2;
     */
    race: number;
    /**
     * @generated from protobuf field: int32 char_class = 3;
     */
    charClass: number;
    /**
     * @generated from protobuf field: int32 deity = 4;
     */
    deity: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class JWTLogin$Type extends MessageType<JWTLogin> {
    constructor() {
        super("eq.world.JWTLogin", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<JWTLogin>): JWTLogin {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<JWTLogin>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JWTLogin): JWTLogin {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JWTLogin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.world.JWTLogin
 */
export const JWTLogin = new JWTLogin$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JWTResponse$Type extends MessageType<JWTResponse> {
    constructor() {
        super("eq.world.JWTResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<JWTResponse>): JWTResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<JWTResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JWTResponse): JWTResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JWTResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.world.JWTResponse
 */
export const JWTResponse = new JWTResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebInitiateConnection$Type extends MessageType<WebInitiateConnection> {
    constructor() {
        super("eq.world.WebInitiateConnection", [
            { no: 1, name: "login", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WebInitiateConnection>): WebInitiateConnection {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.login = false;
        if (value !== undefined)
            reflectionMergePartial<WebInitiateConnection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebInitiateConnection): WebInitiateConnection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool login */ 1:
                    message.login = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebInitiateConnection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool login = 1; */
        if (message.login !== false)
            writer.tag(1, WireType.Varint).bool(message.login);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.world.WebInitiateConnection
 */
export const WebInitiateConnection = new WebInitiateConnection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterWorld$Type extends MessageType<EnterWorld> {
    constructor() {
        super("eq.world.EnterWorld", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tutorial", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "return_home", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterWorld>): EnterWorld {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.tutorial = 0;
        message.returnHome = 0;
        if (value !== undefined)
            reflectionMergePartial<EnterWorld>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterWorld): EnterWorld {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 tutorial */ 2:
                    message.tutorial = reader.int32();
                    break;
                case /* int32 return_home */ 3:
                    message.returnHome = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterWorld, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 tutorial = 2; */
        if (message.tutorial !== 0)
            writer.tag(2, WireType.Varint).int32(message.tutorial);
        /* int32 return_home = 3; */
        if (message.returnHome !== 0)
            writer.tag(3, WireType.Varint).int32(message.returnHome);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.world.EnterWorld
 */
export const EnterWorld = new EnterWorld$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NameApproval$Type extends MessageType<NameApproval> {
    constructor() {
        super("eq.world.NameApproval", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "race", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "char_class", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "deity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NameApproval>): NameApproval {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.race = 0;
        message.charClass = 0;
        message.deity = 0;
        if (value !== undefined)
            reflectionMergePartial<NameApproval>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NameApproval): NameApproval {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 race */ 2:
                    message.race = reader.int32();
                    break;
                case /* int32 char_class */ 3:
                    message.charClass = reader.int32();
                    break;
                case /* int32 deity */ 4:
                    message.deity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NameApproval, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 race = 2; */
        if (message.race !== 0)
            writer.tag(2, WireType.Varint).int32(message.race);
        /* int32 char_class = 3; */
        if (message.charClass !== 0)
            writer.tag(3, WireType.Varint).int32(message.charClass);
        /* int32 deity = 4; */
        if (message.deity !== 0)
            writer.tag(4, WireType.Varint).int32(message.deity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.world.NameApproval
 */
export const NameApproval = new NameApproval$Type();
