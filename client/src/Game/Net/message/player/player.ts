// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "player/player.proto" (package "eq.player", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PVPStatsEntry } from "../common/common";
import { LeadershipAA } from "../common/common";
import { Tribute } from "../common/common";
import { StringList } from "../common/common";
import { PotionBelt } from "../common/common";
import { Bandolier } from "../common/common";
import { Disciplines } from "../common/common";
import { SpellBuff } from "../common/common";
import { AA_Array } from "../common/common";
import { TextureProfile } from "../common/common";
import { Bind } from "../common/common";
import { ItemInstance } from "../item/item";
/**
 * @generated from protobuf message eq.player.Tint
 */
export interface Tint {
    /**
     * @generated from protobuf field: int32 blue = 1;
     */
    blue: number;
    /**
     * @generated from protobuf field: int32 green = 2;
     */
    green: number;
    /**
     * @generated from protobuf field: int32 red = 3;
     */
    red: number;
    /**
     * @generated from protobuf field: int32 use_tint = 4;
     */
    useTint: number;
}
/**
 * @generated from protobuf message eq.player.CharSelectEquip
 */
export interface CharSelectEquip {
    /**
     * @generated from protobuf field: int32 material = 1;
     */
    material: number;
    /**
     * @generated from protobuf field: eq.player.Tint color = 2;
     */
    color?: Tint;
}
/**
 * @generated from protobuf message eq.player.CharacterSelectEntry
 */
export interface CharacterSelectEntry {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 char_class = 2;
     */
    charClass: number;
    /**
     * @generated from protobuf field: int32 race = 3;
     */
    race: number;
    /**
     * @generated from protobuf field: int32 level = 4;
     */
    level: number;
    /**
     * @generated from protobuf field: int32 zone = 5;
     */
    zone: number;
    /**
     * @generated from protobuf field: int32 instance = 6;
     */
    instance: number;
    /**
     * @generated from protobuf field: int32 gender = 7;
     */
    gender: number;
    /**
     * @generated from protobuf field: int32 face = 8;
     */
    face: number;
    /**
     * @generated from protobuf field: repeated eq.item.ItemInstance items = 9;
     */
    items: ItemInstance[];
    /**
     * @generated from protobuf field: int32 deity = 10;
     */
    deity: number;
    /**
     * @generated from protobuf field: int32 primary_id_file = 11;
     */
    primaryIdFile: number;
    /**
     * @generated from protobuf field: int32 secondary_id_file = 12;
     */
    secondaryIdFile: number;
    /**
     * @generated from protobuf field: int32 go_home = 13;
     */
    goHome: number;
    /**
     * @generated from protobuf field: int32 enabled = 14;
     */
    enabled: number;
    /**
     * @generated from protobuf field: int32 last_login = 15;
     */
    lastLogin: number;
}
/**
 * @generated from protobuf message eq.player.CharacterSelect
 */
export interface CharacterSelect {
    /**
     * @generated from protobuf field: int32 character_count = 1;
     */
    characterCount: number;
    /**
     * @generated from protobuf field: repeated eq.player.CharacterSelectEntry characters = 2;
     */
    characters: CharacterSelectEntry[];
}
/**
 * @generated from protobuf message eq.player.PlayerProfile
 */
export interface PlayerProfile {
    /**
     * @generated from protobuf field: int32 checksum = 1;
     */
    checksum: number;
    /**
     * @generated from protobuf field: int32 gender = 2;
     */
    gender: number;
    /**
     * @generated from protobuf field: int32 race = 3;
     */
    race: number;
    /**
     * @generated from protobuf field: int32 char_class = 4;
     */
    charClass: number;
    /**
     * @generated from protobuf field: int32 level = 5;
     */
    level: number;
    /**
     * @generated from protobuf field: int32 level1 = 6;
     */
    level1: number;
    /**
     * @generated from protobuf field: repeated eq.common.Bind binds = 7;
     */
    binds: Bind[];
    /**
     * @generated from protobuf field: int32 deity = 8;
     */
    deity: number;
    /**
     * @generated from protobuf field: int32 intoxication = 9;
     */
    intoxication: number;
    /**
     * @generated from protobuf field: repeated int32 spell_slot_refresh = 10;
     */
    spellSlotRefresh: number[];
    /**
     * @generated from protobuf field: int32 ability_slot_refresh = 11;
     */
    abilitySlotRefresh: number;
    /**
     * @generated from protobuf field: int32 haircolor = 12;
     */
    haircolor: number;
    /**
     * @generated from protobuf field: int32 beardcolor = 13;
     */
    beardcolor: number;
    /**
     * @generated from protobuf field: int32 eyecolor1 = 14;
     */
    eyecolor1: number;
    /**
     * @generated from protobuf field: int32 eyecolor2 = 15;
     */
    eyecolor2: number;
    /**
     * @generated from protobuf field: int32 hairstyle = 16;
     */
    hairstyle: number;
    /**
     * @generated from protobuf field: int32 beard = 17;
     */
    beard: number;
    /**
     * @generated from protobuf field: eq.common.TextureProfile item_material = 18;
     */
    itemMaterial?: TextureProfile;
    /**
     * @generated from protobuf field: int32 item_tint = 19;
     */
    itemTint: number;
    /**
     * @generated from protobuf field: repeated eq.common.AA_Array aa_array = 20;
     */
    aaArray: AA_Array[];
    /**
     * @generated from protobuf field: int32 points = 21;
     */
    points: number;
    /**
     * @generated from protobuf field: int32 mana = 22;
     */
    mana: number;
    /**
     * @generated from protobuf field: int32 cur_hp = 23;
     */
    curHp: number;
    /**
     * @generated from protobuf field: int32 str = 24;
     */
    str: number;
    /**
     * @generated from protobuf field: int32 sta = 25;
     */
    sta: number;
    /**
     * @generated from protobuf field: int32 cha = 26;
     */
    cha: number;
    /**
     * @generated from protobuf field: int32 dex = 27;
     */
    dex: number;
    /**
     * @generated from protobuf field: int32 intel = 28;
     */
    intel: number;
    /**
     * @generated from protobuf field: int32 agi = 29;
     */
    agi: number;
    /**
     * @generated from protobuf field: int32 wis = 30;
     */
    wis: number;
    /**
     * @generated from protobuf field: int32 face = 31;
     */
    face: number;
    /**
     * @generated from protobuf field: repeated int32 spell_book = 32;
     */
    spellBook: number[];
    /**
     * @generated from protobuf field: repeated int32 mem_spells = 33;
     */
    memSpells: number[];
    /**
     * @generated from protobuf field: int32 platinum = 34;
     */
    platinum: number;
    /**
     * @generated from protobuf field: int32 gold = 35;
     */
    gold: number;
    /**
     * @generated from protobuf field: int32 silver = 36;
     */
    silver: number;
    /**
     * @generated from protobuf field: int32 copper = 37;
     */
    copper: number;
    /**
     * @generated from protobuf field: int32 platinum_cursor = 38;
     */
    platinumCursor: number;
    /**
     * @generated from protobuf field: int32 gold_cursor = 39;
     */
    goldCursor: number;
    /**
     * @generated from protobuf field: int32 silver_cursor = 40;
     */
    silverCursor: number;
    /**
     * @generated from protobuf field: int32 copper_cursor = 41;
     */
    copperCursor: number;
    /**
     * @generated from protobuf field: repeated int32 skills = 42;
     */
    skills: number[];
    /**
     * @generated from protobuf field: repeated int32 innate_skills = 43;
     */
    innateSkills: number[];
    /**
     * @generated from protobuf field: int32 toxicity = 44;
     */
    toxicity: number;
    /**
     * @generated from protobuf field: int32 thirst_level = 45;
     */
    thirstLevel: number;
    /**
     * @generated from protobuf field: int32 hunger_level = 46;
     */
    hungerLevel: number;
    /**
     * @generated from protobuf field: repeated eq.common.SpellBuff buffs = 47;
     */
    buffs: SpellBuff[];
    /**
     * @generated from protobuf field: eq.common.Disciplines disciplines = 48;
     */
    disciplines?: Disciplines;
    /**
     * @generated from protobuf field: repeated int32 recast_timers = 49;
     */
    recastTimers: number[];
    /**
     * @generated from protobuf field: int32 endurance = 50;
     */
    endurance: number;
    /**
     * @generated from protobuf field: int32 aapoints_spent = 51;
     */
    aapointsSpent: number;
    /**
     * @generated from protobuf field: int32 aapoints = 52;
     */
    aapoints: number;
    /**
     * @generated from protobuf field: repeated eq.common.Bandolier bandoliers = 53;
     */
    bandoliers: Bandolier[];
    /**
     * @generated from protobuf field: eq.common.PotionBelt potionbelt = 54;
     */
    potionbelt?: PotionBelt;
    /**
     * @generated from protobuf field: int32 available_slots = 55;
     */
    availableSlots: number;
    /**
     * @generated from protobuf field: string name = 56;
     */
    name: string;
    /**
     * @generated from protobuf field: string last_name = 57;
     */
    lastName: string;
    /**
     * @generated from protobuf field: int32 guild_id = 58;
     */
    guildId: number;
    /**
     * @generated from protobuf field: int32 birthday = 59;
     */
    birthday: number;
    /**
     * @generated from protobuf field: int32 lastlogin = 60;
     */
    lastlogin: number;
    /**
     * @generated from protobuf field: int32 time_played_min = 61;
     */
    timePlayedMin: number;
    /**
     * @generated from protobuf field: int32 pvp = 62;
     */
    pvp: number;
    /**
     * @generated from protobuf field: int32 anon = 63;
     */
    anon: number;
    /**
     * @generated from protobuf field: int32 gm = 64;
     */
    gm: number;
    /**
     * @generated from protobuf field: int32 guildrank = 65;
     */
    guildrank: number;
    /**
     * @generated from protobuf field: int32 guildbanker = 66;
     */
    guildbanker: number;
    /**
     * @generated from protobuf field: int32 exp = 67;
     */
    exp: number;
    /**
     * @generated from protobuf field: int32 timeentitledonaccount = 68;
     */
    timeentitledonaccount: number;
    /**
     * @generated from protobuf field: repeated int32 languages = 69;
     */
    languages: number[];
    /**
     * @generated from protobuf field: float x = 70;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 71;
     */
    y: number;
    /**
     * @generated from protobuf field: float z = 72;
     */
    z: number;
    /**
     * @generated from protobuf field: float heading = 73;
     */
    heading: number;
    /**
     * @generated from protobuf field: int32 platinum_bank = 74;
     */
    platinumBank: number;
    /**
     * @generated from protobuf field: int32 gold_bank = 75;
     */
    goldBank: number;
    /**
     * @generated from protobuf field: int32 silver_bank = 76;
     */
    silverBank: number;
    /**
     * @generated from protobuf field: int32 copper_bank = 77;
     */
    copperBank: number;
    /**
     * @generated from protobuf field: int32 platinum_shared = 78;
     */
    platinumShared: number;
    /**
     * @generated from protobuf field: int32 expansions = 79;
     */
    expansions: number;
    /**
     * @generated from protobuf field: int32 autosplit = 80;
     */
    autosplit: number;
    /**
     * @generated from protobuf field: int32 zone_id = 81;
     */
    zoneId: number;
    /**
     * @generated from protobuf field: int32 zone_instance = 82;
     */
    zoneInstance: number;
    /**
     * @generated from protobuf field: repeated eq.common.StringList group_members = 83;
     */
    groupMembers: StringList[];
    /**
     * @generated from protobuf field: string group_leader = 84;
     */
    groupLeader: string;
    /**
     * @generated from protobuf field: int32 entityid = 85;
     */
    entityid: number;
    /**
     * @generated from protobuf field: int32 lead_aa_active = 86;
     */
    leadAaActive: number;
    /**
     * @generated from protobuf field: int32 ldon_points_guk = 87;
     */
    ldonPointsGuk: number;
    /**
     * @generated from protobuf field: int32 ldon_points_mir = 88;
     */
    ldonPointsMir: number;
    /**
     * @generated from protobuf field: int32 ldon_points_mmc = 89;
     */
    ldonPointsMmc: number;
    /**
     * @generated from protobuf field: int32 ldon_points_ruj = 90;
     */
    ldonPointsRuj: number;
    /**
     * @generated from protobuf field: int32 ldon_points_tak = 91;
     */
    ldonPointsTak: number;
    /**
     * @generated from protobuf field: int32 ldon_points_available = 92;
     */
    ldonPointsAvailable: number;
    /**
     * @generated from protobuf field: int32 tribute_time_remaining = 93;
     */
    tributeTimeRemaining: number;
    /**
     * @generated from protobuf field: int32 career_tribute_points = 94;
     */
    careerTributePoints: number;
    /**
     * @generated from protobuf field: int32 tribute_points = 95;
     */
    tributePoints: number;
    /**
     * @generated from protobuf field: int32 tribute_active = 96;
     */
    tributeActive: number;
    /**
     * @generated from protobuf field: repeated eq.common.Tribute tributes = 97;
     */
    tributes: Tribute[];
    /**
     * @generated from protobuf field: double group_leadership_exp = 98;
     */
    groupLeadershipExp: number;
    /**
     * @generated from protobuf field: double raid_leadership_exp = 99;
     */
    raidLeadershipExp: number;
    /**
     * @generated from protobuf field: int32 group_leadership_points = 100;
     */
    groupLeadershipPoints: number;
    /**
     * @generated from protobuf field: int32 raid_leadership_points = 101;
     */
    raidLeadershipPoints: number;
    /**
     * @generated from protobuf field: eq.common.LeadershipAA leader_abilities = 102;
     */
    leaderAbilities?: LeadershipAA;
    /**
     * @generated from protobuf field: int32 air_remaining = 103;
     */
    airRemaining: number;
    /**
     * @generated from protobuf field: int32 pvp_kills = 104;
     */
    pvpKills: number;
    /**
     * @generated from protobuf field: int32 pvp_deaths = 105;
     */
    pvpDeaths: number;
    /**
     * @generated from protobuf field: int32 pvp_current_points = 106;
     */
    pvpCurrentPoints: number;
    /**
     * @generated from protobuf field: int32 pvp_career_points = 107;
     */
    pvpCareerPoints: number;
    /**
     * @generated from protobuf field: int32 pvp_best_kill_streak = 108;
     */
    pvpBestKillStreak: number;
    /**
     * @generated from protobuf field: int32 pvp_worst_death_streak = 109;
     */
    pvpWorstDeathStreak: number;
    /**
     * @generated from protobuf field: int32 pvp_current_kill_streak = 110;
     */
    pvpCurrentKillStreak: number;
    /**
     * @generated from protobuf field: eq.common.PVPStatsEntry pvp_last_kill = 111;
     */
    pvpLastKill?: PVPStatsEntry;
    /**
     * @generated from protobuf field: eq.common.PVPStatsEntry pvp_last_death = 112;
     */
    pvpLastDeath?: PVPStatsEntry;
    /**
     * @generated from protobuf field: int32 pvp_number_of_kills_in_last__hours = 113;
     */
    pvpNumberOfKillsInLastHours: number;
    /**
     * @generated from protobuf field: repeated eq.common.PVPStatsEntry pvp_recent_kills = 114;
     */
    pvpRecentKills: PVPStatsEntry[];
    /**
     * @generated from protobuf field: int32 exp_aa = 115;
     */
    expAa: number;
    /**
     * @generated from protobuf field: int32 current_rad_crystals = 116;
     */
    currentRadCrystals: number;
    /**
     * @generated from protobuf field: int32 career_rad_crystals = 117;
     */
    careerRadCrystals: number;
    /**
     * @generated from protobuf field: int32 current_ebon_crystals = 118;
     */
    currentEbonCrystals: number;
    /**
     * @generated from protobuf field: int32 career_ebon_crystals = 119;
     */
    careerEbonCrystals: number;
    /**
     * @generated from protobuf field: int32 group_autoconsent = 120;
     */
    groupAutoconsent: number;
    /**
     * @generated from protobuf field: int32 raid_autoconsent = 121;
     */
    raidAutoconsent: number;
    /**
     * @generated from protobuf field: int32 guild_autoconsent = 122;
     */
    guildAutoconsent: number;
    /**
     * @generated from protobuf field: int32 level3 = 123;
     */
    level3: number;
    /**
     * @generated from protobuf field: int32 showhelm = 124;
     */
    showhelm: number;
    /**
     * @generated from protobuf field: repeated eq.item.ItemInstance inventory_items = 126;
     */
    inventoryItems: ItemInstance[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Tint$Type extends MessageType<Tint> {
    constructor() {
        super("eq.player.Tint", [
            { no: 1, name: "blue", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "green", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "red", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "use_tint", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Tint>): Tint {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.blue = 0;
        message.green = 0;
        message.red = 0;
        message.useTint = 0;
        if (value !== undefined)
            reflectionMergePartial<Tint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tint): Tint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 blue */ 1:
                    message.blue = reader.int32();
                    break;
                case /* int32 green */ 2:
                    message.green = reader.int32();
                    break;
                case /* int32 red */ 3:
                    message.red = reader.int32();
                    break;
                case /* int32 use_tint */ 4:
                    message.useTint = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 blue = 1; */
        if (message.blue !== 0)
            writer.tag(1, WireType.Varint).int32(message.blue);
        /* int32 green = 2; */
        if (message.green !== 0)
            writer.tag(2, WireType.Varint).int32(message.green);
        /* int32 red = 3; */
        if (message.red !== 0)
            writer.tag(3, WireType.Varint).int32(message.red);
        /* int32 use_tint = 4; */
        if (message.useTint !== 0)
            writer.tag(4, WireType.Varint).int32(message.useTint);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.player.Tint
 */
export const Tint = new Tint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharSelectEquip$Type extends MessageType<CharSelectEquip> {
    constructor() {
        super("eq.player.CharSelectEquip", [
            { no: 1, name: "material", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "color", kind: "message", T: () => Tint }
        ]);
    }
    create(value?: PartialMessage<CharSelectEquip>): CharSelectEquip {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.material = 0;
        if (value !== undefined)
            reflectionMergePartial<CharSelectEquip>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CharSelectEquip): CharSelectEquip {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 material */ 1:
                    message.material = reader.int32();
                    break;
                case /* eq.player.Tint color */ 2:
                    message.color = Tint.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CharSelectEquip, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 material = 1; */
        if (message.material !== 0)
            writer.tag(1, WireType.Varint).int32(message.material);
        /* eq.player.Tint color = 2; */
        if (message.color)
            Tint.internalBinaryWrite(message.color, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.player.CharSelectEquip
 */
export const CharSelectEquip = new CharSelectEquip$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharacterSelectEntry$Type extends MessageType<CharacterSelectEntry> {
    constructor() {
        super("eq.player.CharacterSelectEntry", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "char_class", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "race", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "zone", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "instance", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "gender", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "face", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemInstance },
            { no: 10, name: "deity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "primary_id_file", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "secondary_id_file", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "go_home", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "enabled", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "last_login", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CharacterSelectEntry>): CharacterSelectEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.charClass = 0;
        message.race = 0;
        message.level = 0;
        message.zone = 0;
        message.instance = 0;
        message.gender = 0;
        message.face = 0;
        message.items = [];
        message.deity = 0;
        message.primaryIdFile = 0;
        message.secondaryIdFile = 0;
        message.goHome = 0;
        message.enabled = 0;
        message.lastLogin = 0;
        if (value !== undefined)
            reflectionMergePartial<CharacterSelectEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CharacterSelectEntry): CharacterSelectEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 char_class */ 2:
                    message.charClass = reader.int32();
                    break;
                case /* int32 race */ 3:
                    message.race = reader.int32();
                    break;
                case /* int32 level */ 4:
                    message.level = reader.int32();
                    break;
                case /* int32 zone */ 5:
                    message.zone = reader.int32();
                    break;
                case /* int32 instance */ 6:
                    message.instance = reader.int32();
                    break;
                case /* int32 gender */ 7:
                    message.gender = reader.int32();
                    break;
                case /* int32 face */ 8:
                    message.face = reader.int32();
                    break;
                case /* repeated eq.item.ItemInstance items */ 9:
                    message.items.push(ItemInstance.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 deity */ 10:
                    message.deity = reader.int32();
                    break;
                case /* int32 primary_id_file */ 11:
                    message.primaryIdFile = reader.int32();
                    break;
                case /* int32 secondary_id_file */ 12:
                    message.secondaryIdFile = reader.int32();
                    break;
                case /* int32 go_home */ 13:
                    message.goHome = reader.int32();
                    break;
                case /* int32 enabled */ 14:
                    message.enabled = reader.int32();
                    break;
                case /* int32 last_login */ 15:
                    message.lastLogin = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CharacterSelectEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 char_class = 2; */
        if (message.charClass !== 0)
            writer.tag(2, WireType.Varint).int32(message.charClass);
        /* int32 race = 3; */
        if (message.race !== 0)
            writer.tag(3, WireType.Varint).int32(message.race);
        /* int32 level = 4; */
        if (message.level !== 0)
            writer.tag(4, WireType.Varint).int32(message.level);
        /* int32 zone = 5; */
        if (message.zone !== 0)
            writer.tag(5, WireType.Varint).int32(message.zone);
        /* int32 instance = 6; */
        if (message.instance !== 0)
            writer.tag(6, WireType.Varint).int32(message.instance);
        /* int32 gender = 7; */
        if (message.gender !== 0)
            writer.tag(7, WireType.Varint).int32(message.gender);
        /* int32 face = 8; */
        if (message.face !== 0)
            writer.tag(8, WireType.Varint).int32(message.face);
        /* repeated eq.item.ItemInstance items = 9; */
        for (let i = 0; i < message.items.length; i++)
            ItemInstance.internalBinaryWrite(message.items[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int32 deity = 10; */
        if (message.deity !== 0)
            writer.tag(10, WireType.Varint).int32(message.deity);
        /* int32 primary_id_file = 11; */
        if (message.primaryIdFile !== 0)
            writer.tag(11, WireType.Varint).int32(message.primaryIdFile);
        /* int32 secondary_id_file = 12; */
        if (message.secondaryIdFile !== 0)
            writer.tag(12, WireType.Varint).int32(message.secondaryIdFile);
        /* int32 go_home = 13; */
        if (message.goHome !== 0)
            writer.tag(13, WireType.Varint).int32(message.goHome);
        /* int32 enabled = 14; */
        if (message.enabled !== 0)
            writer.tag(14, WireType.Varint).int32(message.enabled);
        /* int32 last_login = 15; */
        if (message.lastLogin !== 0)
            writer.tag(15, WireType.Varint).int32(message.lastLogin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.player.CharacterSelectEntry
 */
export const CharacterSelectEntry = new CharacterSelectEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharacterSelect$Type extends MessageType<CharacterSelect> {
    constructor() {
        super("eq.player.CharacterSelect", [
            { no: 1, name: "character_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "characters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CharacterSelectEntry }
        ]);
    }
    create(value?: PartialMessage<CharacterSelect>): CharacterSelect {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.characterCount = 0;
        message.characters = [];
        if (value !== undefined)
            reflectionMergePartial<CharacterSelect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CharacterSelect): CharacterSelect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 character_count */ 1:
                    message.characterCount = reader.int32();
                    break;
                case /* repeated eq.player.CharacterSelectEntry characters */ 2:
                    message.characters.push(CharacterSelectEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CharacterSelect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 character_count = 1; */
        if (message.characterCount !== 0)
            writer.tag(1, WireType.Varint).int32(message.characterCount);
        /* repeated eq.player.CharacterSelectEntry characters = 2; */
        for (let i = 0; i < message.characters.length; i++)
            CharacterSelectEntry.internalBinaryWrite(message.characters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.player.CharacterSelect
 */
export const CharacterSelect = new CharacterSelect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerProfile$Type extends MessageType<PlayerProfile> {
    constructor() {
        super("eq.player.PlayerProfile", [
            { no: 1, name: "checksum", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "gender", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "race", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "char_class", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "level1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "binds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Bind },
            { no: 8, name: "deity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "intoxication", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "spell_slot_refresh", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "ability_slot_refresh", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "haircolor", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "beardcolor", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "eyecolor1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "eyecolor2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "hairstyle", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 17, name: "beard", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 18, name: "item_material", kind: "message", T: () => TextureProfile },
            { no: 19, name: "item_tint", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "aa_array", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AA_Array },
            { no: 21, name: "points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "mana", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 23, name: "cur_hp", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 24, name: "str", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 25, name: "sta", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 26, name: "cha", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 27, name: "dex", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 28, name: "intel", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 29, name: "agi", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 30, name: "wis", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 31, name: "face", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 32, name: "spell_book", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 33, name: "mem_spells", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 34, name: "platinum", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 35, name: "gold", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 36, name: "silver", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 37, name: "copper", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 38, name: "platinum_cursor", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 39, name: "gold_cursor", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 40, name: "silver_cursor", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 41, name: "copper_cursor", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 42, name: "skills", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 43, name: "innate_skills", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 44, name: "toxicity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 45, name: "thirst_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 46, name: "hunger_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 47, name: "buffs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SpellBuff },
            { no: 48, name: "disciplines", kind: "message", T: () => Disciplines },
            { no: 49, name: "recast_timers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 50, name: "endurance", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 51, name: "aapoints_spent", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 52, name: "aapoints", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 53, name: "bandoliers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Bandolier },
            { no: 54, name: "potionbelt", kind: "message", T: () => PotionBelt },
            { no: 55, name: "available_slots", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 56, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 57, name: "last_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 58, name: "guild_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 59, name: "birthday", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 60, name: "lastlogin", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 61, name: "time_played_min", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 62, name: "pvp", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 63, name: "anon", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 64, name: "gm", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 65, name: "guildrank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 66, name: "guildbanker", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 67, name: "exp", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 68, name: "timeentitledonaccount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 69, name: "languages", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 70, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 71, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 72, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 73, name: "heading", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 74, name: "platinum_bank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 75, name: "gold_bank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 76, name: "silver_bank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 77, name: "copper_bank", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 78, name: "platinum_shared", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 79, name: "expansions", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 80, name: "autosplit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 81, name: "zone_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 82, name: "zone_instance", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 83, name: "group_members", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StringList },
            { no: 84, name: "group_leader", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 85, name: "entityid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 86, name: "lead_aa_active", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 87, name: "ldon_points_guk", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 88, name: "ldon_points_mir", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 89, name: "ldon_points_mmc", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 90, name: "ldon_points_ruj", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 91, name: "ldon_points_tak", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 92, name: "ldon_points_available", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 93, name: "tribute_time_remaining", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 94, name: "career_tribute_points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 95, name: "tribute_points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 96, name: "tribute_active", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 97, name: "tributes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Tribute },
            { no: 98, name: "group_leadership_exp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 99, name: "raid_leadership_exp", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 100, name: "group_leadership_points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 101, name: "raid_leadership_points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 102, name: "leader_abilities", kind: "message", T: () => LeadershipAA },
            { no: 103, name: "air_remaining", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 104, name: "pvp_kills", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 105, name: "pvp_deaths", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 106, name: "pvp_current_points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 107, name: "pvp_career_points", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 108, name: "pvp_best_kill_streak", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 109, name: "pvp_worst_death_streak", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 110, name: "pvp_current_kill_streak", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 111, name: "pvp_last_kill", kind: "message", T: () => PVPStatsEntry },
            { no: 112, name: "pvp_last_death", kind: "message", T: () => PVPStatsEntry },
            { no: 113, name: "pvp_number_of_kills_in_last__hours", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 114, name: "pvp_recent_kills", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PVPStatsEntry },
            { no: 115, name: "exp_aa", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 116, name: "current_rad_crystals", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 117, name: "career_rad_crystals", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 118, name: "current_ebon_crystals", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 119, name: "career_ebon_crystals", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 120, name: "group_autoconsent", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 121, name: "raid_autoconsent", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 122, name: "guild_autoconsent", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 123, name: "level3", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 124, name: "showhelm", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 126, name: "inventory_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemInstance }
        ]);
    }
    create(value?: PartialMessage<PlayerProfile>): PlayerProfile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.checksum = 0;
        message.gender = 0;
        message.race = 0;
        message.charClass = 0;
        message.level = 0;
        message.level1 = 0;
        message.binds = [];
        message.deity = 0;
        message.intoxication = 0;
        message.spellSlotRefresh = [];
        message.abilitySlotRefresh = 0;
        message.haircolor = 0;
        message.beardcolor = 0;
        message.eyecolor1 = 0;
        message.eyecolor2 = 0;
        message.hairstyle = 0;
        message.beard = 0;
        message.itemTint = 0;
        message.aaArray = [];
        message.points = 0;
        message.mana = 0;
        message.curHp = 0;
        message.str = 0;
        message.sta = 0;
        message.cha = 0;
        message.dex = 0;
        message.intel = 0;
        message.agi = 0;
        message.wis = 0;
        message.face = 0;
        message.spellBook = [];
        message.memSpells = [];
        message.platinum = 0;
        message.gold = 0;
        message.silver = 0;
        message.copper = 0;
        message.platinumCursor = 0;
        message.goldCursor = 0;
        message.silverCursor = 0;
        message.copperCursor = 0;
        message.skills = [];
        message.innateSkills = [];
        message.toxicity = 0;
        message.thirstLevel = 0;
        message.hungerLevel = 0;
        message.buffs = [];
        message.recastTimers = [];
        message.endurance = 0;
        message.aapointsSpent = 0;
        message.aapoints = 0;
        message.bandoliers = [];
        message.availableSlots = 0;
        message.name = "";
        message.lastName = "";
        message.guildId = 0;
        message.birthday = 0;
        message.lastlogin = 0;
        message.timePlayedMin = 0;
        message.pvp = 0;
        message.anon = 0;
        message.gm = 0;
        message.guildrank = 0;
        message.guildbanker = 0;
        message.exp = 0;
        message.timeentitledonaccount = 0;
        message.languages = [];
        message.x = 0;
        message.y = 0;
        message.z = 0;
        message.heading = 0;
        message.platinumBank = 0;
        message.goldBank = 0;
        message.silverBank = 0;
        message.copperBank = 0;
        message.platinumShared = 0;
        message.expansions = 0;
        message.autosplit = 0;
        message.zoneId = 0;
        message.zoneInstance = 0;
        message.groupMembers = [];
        message.groupLeader = "";
        message.entityid = 0;
        message.leadAaActive = 0;
        message.ldonPointsGuk = 0;
        message.ldonPointsMir = 0;
        message.ldonPointsMmc = 0;
        message.ldonPointsRuj = 0;
        message.ldonPointsTak = 0;
        message.ldonPointsAvailable = 0;
        message.tributeTimeRemaining = 0;
        message.careerTributePoints = 0;
        message.tributePoints = 0;
        message.tributeActive = 0;
        message.tributes = [];
        message.groupLeadershipExp = 0;
        message.raidLeadershipExp = 0;
        message.groupLeadershipPoints = 0;
        message.raidLeadershipPoints = 0;
        message.airRemaining = 0;
        message.pvpKills = 0;
        message.pvpDeaths = 0;
        message.pvpCurrentPoints = 0;
        message.pvpCareerPoints = 0;
        message.pvpBestKillStreak = 0;
        message.pvpWorstDeathStreak = 0;
        message.pvpCurrentKillStreak = 0;
        message.pvpNumberOfKillsInLastHours = 0;
        message.pvpRecentKills = [];
        message.expAa = 0;
        message.currentRadCrystals = 0;
        message.careerRadCrystals = 0;
        message.currentEbonCrystals = 0;
        message.careerEbonCrystals = 0;
        message.groupAutoconsent = 0;
        message.raidAutoconsent = 0;
        message.guildAutoconsent = 0;
        message.level3 = 0;
        message.showhelm = 0;
        message.inventoryItems = [];
        if (value !== undefined)
            reflectionMergePartial<PlayerProfile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerProfile): PlayerProfile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 checksum */ 1:
                    message.checksum = reader.int32();
                    break;
                case /* int32 gender */ 2:
                    message.gender = reader.int32();
                    break;
                case /* int32 race */ 3:
                    message.race = reader.int32();
                    break;
                case /* int32 char_class */ 4:
                    message.charClass = reader.int32();
                    break;
                case /* int32 level */ 5:
                    message.level = reader.int32();
                    break;
                case /* int32 level1 */ 6:
                    message.level1 = reader.int32();
                    break;
                case /* repeated eq.common.Bind binds */ 7:
                    message.binds.push(Bind.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 deity */ 8:
                    message.deity = reader.int32();
                    break;
                case /* int32 intoxication */ 9:
                    message.intoxication = reader.int32();
                    break;
                case /* repeated int32 spell_slot_refresh */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.spellSlotRefresh.push(reader.int32());
                    else
                        message.spellSlotRefresh.push(reader.int32());
                    break;
                case /* int32 ability_slot_refresh */ 11:
                    message.abilitySlotRefresh = reader.int32();
                    break;
                case /* int32 haircolor */ 12:
                    message.haircolor = reader.int32();
                    break;
                case /* int32 beardcolor */ 13:
                    message.beardcolor = reader.int32();
                    break;
                case /* int32 eyecolor1 */ 14:
                    message.eyecolor1 = reader.int32();
                    break;
                case /* int32 eyecolor2 */ 15:
                    message.eyecolor2 = reader.int32();
                    break;
                case /* int32 hairstyle */ 16:
                    message.hairstyle = reader.int32();
                    break;
                case /* int32 beard */ 17:
                    message.beard = reader.int32();
                    break;
                case /* eq.common.TextureProfile item_material */ 18:
                    message.itemMaterial = TextureProfile.internalBinaryRead(reader, reader.uint32(), options, message.itemMaterial);
                    break;
                case /* int32 item_tint */ 19:
                    message.itemTint = reader.int32();
                    break;
                case /* repeated eq.common.AA_Array aa_array */ 20:
                    message.aaArray.push(AA_Array.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 points */ 21:
                    message.points = reader.int32();
                    break;
                case /* int32 mana */ 22:
                    message.mana = reader.int32();
                    break;
                case /* int32 cur_hp */ 23:
                    message.curHp = reader.int32();
                    break;
                case /* int32 str */ 24:
                    message.str = reader.int32();
                    break;
                case /* int32 sta */ 25:
                    message.sta = reader.int32();
                    break;
                case /* int32 cha */ 26:
                    message.cha = reader.int32();
                    break;
                case /* int32 dex */ 27:
                    message.dex = reader.int32();
                    break;
                case /* int32 intel */ 28:
                    message.intel = reader.int32();
                    break;
                case /* int32 agi */ 29:
                    message.agi = reader.int32();
                    break;
                case /* int32 wis */ 30:
                    message.wis = reader.int32();
                    break;
                case /* int32 face */ 31:
                    message.face = reader.int32();
                    break;
                case /* repeated int32 spell_book */ 32:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.spellBook.push(reader.int32());
                    else
                        message.spellBook.push(reader.int32());
                    break;
                case /* repeated int32 mem_spells */ 33:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.memSpells.push(reader.int32());
                    else
                        message.memSpells.push(reader.int32());
                    break;
                case /* int32 platinum */ 34:
                    message.platinum = reader.int32();
                    break;
                case /* int32 gold */ 35:
                    message.gold = reader.int32();
                    break;
                case /* int32 silver */ 36:
                    message.silver = reader.int32();
                    break;
                case /* int32 copper */ 37:
                    message.copper = reader.int32();
                    break;
                case /* int32 platinum_cursor */ 38:
                    message.platinumCursor = reader.int32();
                    break;
                case /* int32 gold_cursor */ 39:
                    message.goldCursor = reader.int32();
                    break;
                case /* int32 silver_cursor */ 40:
                    message.silverCursor = reader.int32();
                    break;
                case /* int32 copper_cursor */ 41:
                    message.copperCursor = reader.int32();
                    break;
                case /* repeated int32 skills */ 42:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.skills.push(reader.int32());
                    else
                        message.skills.push(reader.int32());
                    break;
                case /* repeated int32 innate_skills */ 43:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.innateSkills.push(reader.int32());
                    else
                        message.innateSkills.push(reader.int32());
                    break;
                case /* int32 toxicity */ 44:
                    message.toxicity = reader.int32();
                    break;
                case /* int32 thirst_level */ 45:
                    message.thirstLevel = reader.int32();
                    break;
                case /* int32 hunger_level */ 46:
                    message.hungerLevel = reader.int32();
                    break;
                case /* repeated eq.common.SpellBuff buffs */ 47:
                    message.buffs.push(SpellBuff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* eq.common.Disciplines disciplines */ 48:
                    message.disciplines = Disciplines.internalBinaryRead(reader, reader.uint32(), options, message.disciplines);
                    break;
                case /* repeated int32 recast_timers */ 49:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.recastTimers.push(reader.int32());
                    else
                        message.recastTimers.push(reader.int32());
                    break;
                case /* int32 endurance */ 50:
                    message.endurance = reader.int32();
                    break;
                case /* int32 aapoints_spent */ 51:
                    message.aapointsSpent = reader.int32();
                    break;
                case /* int32 aapoints */ 52:
                    message.aapoints = reader.int32();
                    break;
                case /* repeated eq.common.Bandolier bandoliers */ 53:
                    message.bandoliers.push(Bandolier.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* eq.common.PotionBelt potionbelt */ 54:
                    message.potionbelt = PotionBelt.internalBinaryRead(reader, reader.uint32(), options, message.potionbelt);
                    break;
                case /* int32 available_slots */ 55:
                    message.availableSlots = reader.int32();
                    break;
                case /* string name */ 56:
                    message.name = reader.string();
                    break;
                case /* string last_name */ 57:
                    message.lastName = reader.string();
                    break;
                case /* int32 guild_id */ 58:
                    message.guildId = reader.int32();
                    break;
                case /* int32 birthday */ 59:
                    message.birthday = reader.int32();
                    break;
                case /* int32 lastlogin */ 60:
                    message.lastlogin = reader.int32();
                    break;
                case /* int32 time_played_min */ 61:
                    message.timePlayedMin = reader.int32();
                    break;
                case /* int32 pvp */ 62:
                    message.pvp = reader.int32();
                    break;
                case /* int32 anon */ 63:
                    message.anon = reader.int32();
                    break;
                case /* int32 gm */ 64:
                    message.gm = reader.int32();
                    break;
                case /* int32 guildrank */ 65:
                    message.guildrank = reader.int32();
                    break;
                case /* int32 guildbanker */ 66:
                    message.guildbanker = reader.int32();
                    break;
                case /* int32 exp */ 67:
                    message.exp = reader.int32();
                    break;
                case /* int32 timeentitledonaccount */ 68:
                    message.timeentitledonaccount = reader.int32();
                    break;
                case /* repeated int32 languages */ 69:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.languages.push(reader.int32());
                    else
                        message.languages.push(reader.int32());
                    break;
                case /* float x */ 70:
                    message.x = reader.float();
                    break;
                case /* float y */ 71:
                    message.y = reader.float();
                    break;
                case /* float z */ 72:
                    message.z = reader.float();
                    break;
                case /* float heading */ 73:
                    message.heading = reader.float();
                    break;
                case /* int32 platinum_bank */ 74:
                    message.platinumBank = reader.int32();
                    break;
                case /* int32 gold_bank */ 75:
                    message.goldBank = reader.int32();
                    break;
                case /* int32 silver_bank */ 76:
                    message.silverBank = reader.int32();
                    break;
                case /* int32 copper_bank */ 77:
                    message.copperBank = reader.int32();
                    break;
                case /* int32 platinum_shared */ 78:
                    message.platinumShared = reader.int32();
                    break;
                case /* int32 expansions */ 79:
                    message.expansions = reader.int32();
                    break;
                case /* int32 autosplit */ 80:
                    message.autosplit = reader.int32();
                    break;
                case /* int32 zone_id */ 81:
                    message.zoneId = reader.int32();
                    break;
                case /* int32 zone_instance */ 82:
                    message.zoneInstance = reader.int32();
                    break;
                case /* repeated eq.common.StringList group_members */ 83:
                    message.groupMembers.push(StringList.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string group_leader */ 84:
                    message.groupLeader = reader.string();
                    break;
                case /* int32 entityid */ 85:
                    message.entityid = reader.int32();
                    break;
                case /* int32 lead_aa_active */ 86:
                    message.leadAaActive = reader.int32();
                    break;
                case /* int32 ldon_points_guk */ 87:
                    message.ldonPointsGuk = reader.int32();
                    break;
                case /* int32 ldon_points_mir */ 88:
                    message.ldonPointsMir = reader.int32();
                    break;
                case /* int32 ldon_points_mmc */ 89:
                    message.ldonPointsMmc = reader.int32();
                    break;
                case /* int32 ldon_points_ruj */ 90:
                    message.ldonPointsRuj = reader.int32();
                    break;
                case /* int32 ldon_points_tak */ 91:
                    message.ldonPointsTak = reader.int32();
                    break;
                case /* int32 ldon_points_available */ 92:
                    message.ldonPointsAvailable = reader.int32();
                    break;
                case /* int32 tribute_time_remaining */ 93:
                    message.tributeTimeRemaining = reader.int32();
                    break;
                case /* int32 career_tribute_points */ 94:
                    message.careerTributePoints = reader.int32();
                    break;
                case /* int32 tribute_points */ 95:
                    message.tributePoints = reader.int32();
                    break;
                case /* int32 tribute_active */ 96:
                    message.tributeActive = reader.int32();
                    break;
                case /* repeated eq.common.Tribute tributes */ 97:
                    message.tributes.push(Tribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double group_leadership_exp */ 98:
                    message.groupLeadershipExp = reader.double();
                    break;
                case /* double raid_leadership_exp */ 99:
                    message.raidLeadershipExp = reader.double();
                    break;
                case /* int32 group_leadership_points */ 100:
                    message.groupLeadershipPoints = reader.int32();
                    break;
                case /* int32 raid_leadership_points */ 101:
                    message.raidLeadershipPoints = reader.int32();
                    break;
                case /* eq.common.LeadershipAA leader_abilities */ 102:
                    message.leaderAbilities = LeadershipAA.internalBinaryRead(reader, reader.uint32(), options, message.leaderAbilities);
                    break;
                case /* int32 air_remaining */ 103:
                    message.airRemaining = reader.int32();
                    break;
                case /* int32 pvp_kills */ 104:
                    message.pvpKills = reader.int32();
                    break;
                case /* int32 pvp_deaths */ 105:
                    message.pvpDeaths = reader.int32();
                    break;
                case /* int32 pvp_current_points */ 106:
                    message.pvpCurrentPoints = reader.int32();
                    break;
                case /* int32 pvp_career_points */ 107:
                    message.pvpCareerPoints = reader.int32();
                    break;
                case /* int32 pvp_best_kill_streak */ 108:
                    message.pvpBestKillStreak = reader.int32();
                    break;
                case /* int32 pvp_worst_death_streak */ 109:
                    message.pvpWorstDeathStreak = reader.int32();
                    break;
                case /* int32 pvp_current_kill_streak */ 110:
                    message.pvpCurrentKillStreak = reader.int32();
                    break;
                case /* eq.common.PVPStatsEntry pvp_last_kill */ 111:
                    message.pvpLastKill = PVPStatsEntry.internalBinaryRead(reader, reader.uint32(), options, message.pvpLastKill);
                    break;
                case /* eq.common.PVPStatsEntry pvp_last_death */ 112:
                    message.pvpLastDeath = PVPStatsEntry.internalBinaryRead(reader, reader.uint32(), options, message.pvpLastDeath);
                    break;
                case /* int32 pvp_number_of_kills_in_last__hours */ 113:
                    message.pvpNumberOfKillsInLastHours = reader.int32();
                    break;
                case /* repeated eq.common.PVPStatsEntry pvp_recent_kills */ 114:
                    message.pvpRecentKills.push(PVPStatsEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 exp_aa */ 115:
                    message.expAa = reader.int32();
                    break;
                case /* int32 current_rad_crystals */ 116:
                    message.currentRadCrystals = reader.int32();
                    break;
                case /* int32 career_rad_crystals */ 117:
                    message.careerRadCrystals = reader.int32();
                    break;
                case /* int32 current_ebon_crystals */ 118:
                    message.currentEbonCrystals = reader.int32();
                    break;
                case /* int32 career_ebon_crystals */ 119:
                    message.careerEbonCrystals = reader.int32();
                    break;
                case /* int32 group_autoconsent */ 120:
                    message.groupAutoconsent = reader.int32();
                    break;
                case /* int32 raid_autoconsent */ 121:
                    message.raidAutoconsent = reader.int32();
                    break;
                case /* int32 guild_autoconsent */ 122:
                    message.guildAutoconsent = reader.int32();
                    break;
                case /* int32 level3 */ 123:
                    message.level3 = reader.int32();
                    break;
                case /* int32 showhelm */ 124:
                    message.showhelm = reader.int32();
                    break;
                case /* repeated eq.item.ItemInstance inventory_items */ 126:
                    message.inventoryItems.push(ItemInstance.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerProfile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 checksum = 1; */
        if (message.checksum !== 0)
            writer.tag(1, WireType.Varint).int32(message.checksum);
        /* int32 gender = 2; */
        if (message.gender !== 0)
            writer.tag(2, WireType.Varint).int32(message.gender);
        /* int32 race = 3; */
        if (message.race !== 0)
            writer.tag(3, WireType.Varint).int32(message.race);
        /* int32 char_class = 4; */
        if (message.charClass !== 0)
            writer.tag(4, WireType.Varint).int32(message.charClass);
        /* int32 level = 5; */
        if (message.level !== 0)
            writer.tag(5, WireType.Varint).int32(message.level);
        /* int32 level1 = 6; */
        if (message.level1 !== 0)
            writer.tag(6, WireType.Varint).int32(message.level1);
        /* repeated eq.common.Bind binds = 7; */
        for (let i = 0; i < message.binds.length; i++)
            Bind.internalBinaryWrite(message.binds[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 deity = 8; */
        if (message.deity !== 0)
            writer.tag(8, WireType.Varint).int32(message.deity);
        /* int32 intoxication = 9; */
        if (message.intoxication !== 0)
            writer.tag(9, WireType.Varint).int32(message.intoxication);
        /* repeated int32 spell_slot_refresh = 10; */
        if (message.spellSlotRefresh.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.spellSlotRefresh.length; i++)
                writer.int32(message.spellSlotRefresh[i]);
            writer.join();
        }
        /* int32 ability_slot_refresh = 11; */
        if (message.abilitySlotRefresh !== 0)
            writer.tag(11, WireType.Varint).int32(message.abilitySlotRefresh);
        /* int32 haircolor = 12; */
        if (message.haircolor !== 0)
            writer.tag(12, WireType.Varint).int32(message.haircolor);
        /* int32 beardcolor = 13; */
        if (message.beardcolor !== 0)
            writer.tag(13, WireType.Varint).int32(message.beardcolor);
        /* int32 eyecolor1 = 14; */
        if (message.eyecolor1 !== 0)
            writer.tag(14, WireType.Varint).int32(message.eyecolor1);
        /* int32 eyecolor2 = 15; */
        if (message.eyecolor2 !== 0)
            writer.tag(15, WireType.Varint).int32(message.eyecolor2);
        /* int32 hairstyle = 16; */
        if (message.hairstyle !== 0)
            writer.tag(16, WireType.Varint).int32(message.hairstyle);
        /* int32 beard = 17; */
        if (message.beard !== 0)
            writer.tag(17, WireType.Varint).int32(message.beard);
        /* eq.common.TextureProfile item_material = 18; */
        if (message.itemMaterial)
            TextureProfile.internalBinaryWrite(message.itemMaterial, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* int32 item_tint = 19; */
        if (message.itemTint !== 0)
            writer.tag(19, WireType.Varint).int32(message.itemTint);
        /* repeated eq.common.AA_Array aa_array = 20; */
        for (let i = 0; i < message.aaArray.length; i++)
            AA_Array.internalBinaryWrite(message.aaArray[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* int32 points = 21; */
        if (message.points !== 0)
            writer.tag(21, WireType.Varint).int32(message.points);
        /* int32 mana = 22; */
        if (message.mana !== 0)
            writer.tag(22, WireType.Varint).int32(message.mana);
        /* int32 cur_hp = 23; */
        if (message.curHp !== 0)
            writer.tag(23, WireType.Varint).int32(message.curHp);
        /* int32 str = 24; */
        if (message.str !== 0)
            writer.tag(24, WireType.Varint).int32(message.str);
        /* int32 sta = 25; */
        if (message.sta !== 0)
            writer.tag(25, WireType.Varint).int32(message.sta);
        /* int32 cha = 26; */
        if (message.cha !== 0)
            writer.tag(26, WireType.Varint).int32(message.cha);
        /* int32 dex = 27; */
        if (message.dex !== 0)
            writer.tag(27, WireType.Varint).int32(message.dex);
        /* int32 intel = 28; */
        if (message.intel !== 0)
            writer.tag(28, WireType.Varint).int32(message.intel);
        /* int32 agi = 29; */
        if (message.agi !== 0)
            writer.tag(29, WireType.Varint).int32(message.agi);
        /* int32 wis = 30; */
        if (message.wis !== 0)
            writer.tag(30, WireType.Varint).int32(message.wis);
        /* int32 face = 31; */
        if (message.face !== 0)
            writer.tag(31, WireType.Varint).int32(message.face);
        /* repeated int32 spell_book = 32; */
        if (message.spellBook.length) {
            writer.tag(32, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.spellBook.length; i++)
                writer.int32(message.spellBook[i]);
            writer.join();
        }
        /* repeated int32 mem_spells = 33; */
        if (message.memSpells.length) {
            writer.tag(33, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.memSpells.length; i++)
                writer.int32(message.memSpells[i]);
            writer.join();
        }
        /* int32 platinum = 34; */
        if (message.platinum !== 0)
            writer.tag(34, WireType.Varint).int32(message.platinum);
        /* int32 gold = 35; */
        if (message.gold !== 0)
            writer.tag(35, WireType.Varint).int32(message.gold);
        /* int32 silver = 36; */
        if (message.silver !== 0)
            writer.tag(36, WireType.Varint).int32(message.silver);
        /* int32 copper = 37; */
        if (message.copper !== 0)
            writer.tag(37, WireType.Varint).int32(message.copper);
        /* int32 platinum_cursor = 38; */
        if (message.platinumCursor !== 0)
            writer.tag(38, WireType.Varint).int32(message.platinumCursor);
        /* int32 gold_cursor = 39; */
        if (message.goldCursor !== 0)
            writer.tag(39, WireType.Varint).int32(message.goldCursor);
        /* int32 silver_cursor = 40; */
        if (message.silverCursor !== 0)
            writer.tag(40, WireType.Varint).int32(message.silverCursor);
        /* int32 copper_cursor = 41; */
        if (message.copperCursor !== 0)
            writer.tag(41, WireType.Varint).int32(message.copperCursor);
        /* repeated int32 skills = 42; */
        if (message.skills.length) {
            writer.tag(42, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.skills.length; i++)
                writer.int32(message.skills[i]);
            writer.join();
        }
        /* repeated int32 innate_skills = 43; */
        if (message.innateSkills.length) {
            writer.tag(43, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.innateSkills.length; i++)
                writer.int32(message.innateSkills[i]);
            writer.join();
        }
        /* int32 toxicity = 44; */
        if (message.toxicity !== 0)
            writer.tag(44, WireType.Varint).int32(message.toxicity);
        /* int32 thirst_level = 45; */
        if (message.thirstLevel !== 0)
            writer.tag(45, WireType.Varint).int32(message.thirstLevel);
        /* int32 hunger_level = 46; */
        if (message.hungerLevel !== 0)
            writer.tag(46, WireType.Varint).int32(message.hungerLevel);
        /* repeated eq.common.SpellBuff buffs = 47; */
        for (let i = 0; i < message.buffs.length; i++)
            SpellBuff.internalBinaryWrite(message.buffs[i], writer.tag(47, WireType.LengthDelimited).fork(), options).join();
        /* eq.common.Disciplines disciplines = 48; */
        if (message.disciplines)
            Disciplines.internalBinaryWrite(message.disciplines, writer.tag(48, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 recast_timers = 49; */
        if (message.recastTimers.length) {
            writer.tag(49, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.recastTimers.length; i++)
                writer.int32(message.recastTimers[i]);
            writer.join();
        }
        /* int32 endurance = 50; */
        if (message.endurance !== 0)
            writer.tag(50, WireType.Varint).int32(message.endurance);
        /* int32 aapoints_spent = 51; */
        if (message.aapointsSpent !== 0)
            writer.tag(51, WireType.Varint).int32(message.aapointsSpent);
        /* int32 aapoints = 52; */
        if (message.aapoints !== 0)
            writer.tag(52, WireType.Varint).int32(message.aapoints);
        /* repeated eq.common.Bandolier bandoliers = 53; */
        for (let i = 0; i < message.bandoliers.length; i++)
            Bandolier.internalBinaryWrite(message.bandoliers[i], writer.tag(53, WireType.LengthDelimited).fork(), options).join();
        /* eq.common.PotionBelt potionbelt = 54; */
        if (message.potionbelt)
            PotionBelt.internalBinaryWrite(message.potionbelt, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        /* int32 available_slots = 55; */
        if (message.availableSlots !== 0)
            writer.tag(55, WireType.Varint).int32(message.availableSlots);
        /* string name = 56; */
        if (message.name !== "")
            writer.tag(56, WireType.LengthDelimited).string(message.name);
        /* string last_name = 57; */
        if (message.lastName !== "")
            writer.tag(57, WireType.LengthDelimited).string(message.lastName);
        /* int32 guild_id = 58; */
        if (message.guildId !== 0)
            writer.tag(58, WireType.Varint).int32(message.guildId);
        /* int32 birthday = 59; */
        if (message.birthday !== 0)
            writer.tag(59, WireType.Varint).int32(message.birthday);
        /* int32 lastlogin = 60; */
        if (message.lastlogin !== 0)
            writer.tag(60, WireType.Varint).int32(message.lastlogin);
        /* int32 time_played_min = 61; */
        if (message.timePlayedMin !== 0)
            writer.tag(61, WireType.Varint).int32(message.timePlayedMin);
        /* int32 pvp = 62; */
        if (message.pvp !== 0)
            writer.tag(62, WireType.Varint).int32(message.pvp);
        /* int32 anon = 63; */
        if (message.anon !== 0)
            writer.tag(63, WireType.Varint).int32(message.anon);
        /* int32 gm = 64; */
        if (message.gm !== 0)
            writer.tag(64, WireType.Varint).int32(message.gm);
        /* int32 guildrank = 65; */
        if (message.guildrank !== 0)
            writer.tag(65, WireType.Varint).int32(message.guildrank);
        /* int32 guildbanker = 66; */
        if (message.guildbanker !== 0)
            writer.tag(66, WireType.Varint).int32(message.guildbanker);
        /* int32 exp = 67; */
        if (message.exp !== 0)
            writer.tag(67, WireType.Varint).int32(message.exp);
        /* int32 timeentitledonaccount = 68; */
        if (message.timeentitledonaccount !== 0)
            writer.tag(68, WireType.Varint).int32(message.timeentitledonaccount);
        /* repeated int32 languages = 69; */
        if (message.languages.length) {
            writer.tag(69, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.languages.length; i++)
                writer.int32(message.languages[i]);
            writer.join();
        }
        /* float x = 70; */
        if (message.x !== 0)
            writer.tag(70, WireType.Bit32).float(message.x);
        /* float y = 71; */
        if (message.y !== 0)
            writer.tag(71, WireType.Bit32).float(message.y);
        /* float z = 72; */
        if (message.z !== 0)
            writer.tag(72, WireType.Bit32).float(message.z);
        /* float heading = 73; */
        if (message.heading !== 0)
            writer.tag(73, WireType.Bit32).float(message.heading);
        /* int32 platinum_bank = 74; */
        if (message.platinumBank !== 0)
            writer.tag(74, WireType.Varint).int32(message.platinumBank);
        /* int32 gold_bank = 75; */
        if (message.goldBank !== 0)
            writer.tag(75, WireType.Varint).int32(message.goldBank);
        /* int32 silver_bank = 76; */
        if (message.silverBank !== 0)
            writer.tag(76, WireType.Varint).int32(message.silverBank);
        /* int32 copper_bank = 77; */
        if (message.copperBank !== 0)
            writer.tag(77, WireType.Varint).int32(message.copperBank);
        /* int32 platinum_shared = 78; */
        if (message.platinumShared !== 0)
            writer.tag(78, WireType.Varint).int32(message.platinumShared);
        /* int32 expansions = 79; */
        if (message.expansions !== 0)
            writer.tag(79, WireType.Varint).int32(message.expansions);
        /* int32 autosplit = 80; */
        if (message.autosplit !== 0)
            writer.tag(80, WireType.Varint).int32(message.autosplit);
        /* int32 zone_id = 81; */
        if (message.zoneId !== 0)
            writer.tag(81, WireType.Varint).int32(message.zoneId);
        /* int32 zone_instance = 82; */
        if (message.zoneInstance !== 0)
            writer.tag(82, WireType.Varint).int32(message.zoneInstance);
        /* repeated eq.common.StringList group_members = 83; */
        for (let i = 0; i < message.groupMembers.length; i++)
            StringList.internalBinaryWrite(message.groupMembers[i], writer.tag(83, WireType.LengthDelimited).fork(), options).join();
        /* string group_leader = 84; */
        if (message.groupLeader !== "")
            writer.tag(84, WireType.LengthDelimited).string(message.groupLeader);
        /* int32 entityid = 85; */
        if (message.entityid !== 0)
            writer.tag(85, WireType.Varint).int32(message.entityid);
        /* int32 lead_aa_active = 86; */
        if (message.leadAaActive !== 0)
            writer.tag(86, WireType.Varint).int32(message.leadAaActive);
        /* int32 ldon_points_guk = 87; */
        if (message.ldonPointsGuk !== 0)
            writer.tag(87, WireType.Varint).int32(message.ldonPointsGuk);
        /* int32 ldon_points_mir = 88; */
        if (message.ldonPointsMir !== 0)
            writer.tag(88, WireType.Varint).int32(message.ldonPointsMir);
        /* int32 ldon_points_mmc = 89; */
        if (message.ldonPointsMmc !== 0)
            writer.tag(89, WireType.Varint).int32(message.ldonPointsMmc);
        /* int32 ldon_points_ruj = 90; */
        if (message.ldonPointsRuj !== 0)
            writer.tag(90, WireType.Varint).int32(message.ldonPointsRuj);
        /* int32 ldon_points_tak = 91; */
        if (message.ldonPointsTak !== 0)
            writer.tag(91, WireType.Varint).int32(message.ldonPointsTak);
        /* int32 ldon_points_available = 92; */
        if (message.ldonPointsAvailable !== 0)
            writer.tag(92, WireType.Varint).int32(message.ldonPointsAvailable);
        /* int32 tribute_time_remaining = 93; */
        if (message.tributeTimeRemaining !== 0)
            writer.tag(93, WireType.Varint).int32(message.tributeTimeRemaining);
        /* int32 career_tribute_points = 94; */
        if (message.careerTributePoints !== 0)
            writer.tag(94, WireType.Varint).int32(message.careerTributePoints);
        /* int32 tribute_points = 95; */
        if (message.tributePoints !== 0)
            writer.tag(95, WireType.Varint).int32(message.tributePoints);
        /* int32 tribute_active = 96; */
        if (message.tributeActive !== 0)
            writer.tag(96, WireType.Varint).int32(message.tributeActive);
        /* repeated eq.common.Tribute tributes = 97; */
        for (let i = 0; i < message.tributes.length; i++)
            Tribute.internalBinaryWrite(message.tributes[i], writer.tag(97, WireType.LengthDelimited).fork(), options).join();
        /* double group_leadership_exp = 98; */
        if (message.groupLeadershipExp !== 0)
            writer.tag(98, WireType.Bit64).double(message.groupLeadershipExp);
        /* double raid_leadership_exp = 99; */
        if (message.raidLeadershipExp !== 0)
            writer.tag(99, WireType.Bit64).double(message.raidLeadershipExp);
        /* int32 group_leadership_points = 100; */
        if (message.groupLeadershipPoints !== 0)
            writer.tag(100, WireType.Varint).int32(message.groupLeadershipPoints);
        /* int32 raid_leadership_points = 101; */
        if (message.raidLeadershipPoints !== 0)
            writer.tag(101, WireType.Varint).int32(message.raidLeadershipPoints);
        /* eq.common.LeadershipAA leader_abilities = 102; */
        if (message.leaderAbilities)
            LeadershipAA.internalBinaryWrite(message.leaderAbilities, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* int32 air_remaining = 103; */
        if (message.airRemaining !== 0)
            writer.tag(103, WireType.Varint).int32(message.airRemaining);
        /* int32 pvp_kills = 104; */
        if (message.pvpKills !== 0)
            writer.tag(104, WireType.Varint).int32(message.pvpKills);
        /* int32 pvp_deaths = 105; */
        if (message.pvpDeaths !== 0)
            writer.tag(105, WireType.Varint).int32(message.pvpDeaths);
        /* int32 pvp_current_points = 106; */
        if (message.pvpCurrentPoints !== 0)
            writer.tag(106, WireType.Varint).int32(message.pvpCurrentPoints);
        /* int32 pvp_career_points = 107; */
        if (message.pvpCareerPoints !== 0)
            writer.tag(107, WireType.Varint).int32(message.pvpCareerPoints);
        /* int32 pvp_best_kill_streak = 108; */
        if (message.pvpBestKillStreak !== 0)
            writer.tag(108, WireType.Varint).int32(message.pvpBestKillStreak);
        /* int32 pvp_worst_death_streak = 109; */
        if (message.pvpWorstDeathStreak !== 0)
            writer.tag(109, WireType.Varint).int32(message.pvpWorstDeathStreak);
        /* int32 pvp_current_kill_streak = 110; */
        if (message.pvpCurrentKillStreak !== 0)
            writer.tag(110, WireType.Varint).int32(message.pvpCurrentKillStreak);
        /* eq.common.PVPStatsEntry pvp_last_kill = 111; */
        if (message.pvpLastKill)
            PVPStatsEntry.internalBinaryWrite(message.pvpLastKill, writer.tag(111, WireType.LengthDelimited).fork(), options).join();
        /* eq.common.PVPStatsEntry pvp_last_death = 112; */
        if (message.pvpLastDeath)
            PVPStatsEntry.internalBinaryWrite(message.pvpLastDeath, writer.tag(112, WireType.LengthDelimited).fork(), options).join();
        /* int32 pvp_number_of_kills_in_last__hours = 113; */
        if (message.pvpNumberOfKillsInLastHours !== 0)
            writer.tag(113, WireType.Varint).int32(message.pvpNumberOfKillsInLastHours);
        /* repeated eq.common.PVPStatsEntry pvp_recent_kills = 114; */
        for (let i = 0; i < message.pvpRecentKills.length; i++)
            PVPStatsEntry.internalBinaryWrite(message.pvpRecentKills[i], writer.tag(114, WireType.LengthDelimited).fork(), options).join();
        /* int32 exp_aa = 115; */
        if (message.expAa !== 0)
            writer.tag(115, WireType.Varint).int32(message.expAa);
        /* int32 current_rad_crystals = 116; */
        if (message.currentRadCrystals !== 0)
            writer.tag(116, WireType.Varint).int32(message.currentRadCrystals);
        /* int32 career_rad_crystals = 117; */
        if (message.careerRadCrystals !== 0)
            writer.tag(117, WireType.Varint).int32(message.careerRadCrystals);
        /* int32 current_ebon_crystals = 118; */
        if (message.currentEbonCrystals !== 0)
            writer.tag(118, WireType.Varint).int32(message.currentEbonCrystals);
        /* int32 career_ebon_crystals = 119; */
        if (message.careerEbonCrystals !== 0)
            writer.tag(119, WireType.Varint).int32(message.careerEbonCrystals);
        /* int32 group_autoconsent = 120; */
        if (message.groupAutoconsent !== 0)
            writer.tag(120, WireType.Varint).int32(message.groupAutoconsent);
        /* int32 raid_autoconsent = 121; */
        if (message.raidAutoconsent !== 0)
            writer.tag(121, WireType.Varint).int32(message.raidAutoconsent);
        /* int32 guild_autoconsent = 122; */
        if (message.guildAutoconsent !== 0)
            writer.tag(122, WireType.Varint).int32(message.guildAutoconsent);
        /* int32 level3 = 123; */
        if (message.level3 !== 0)
            writer.tag(123, WireType.Varint).int32(message.level3);
        /* int32 showhelm = 124; */
        if (message.showhelm !== 0)
            writer.tag(124, WireType.Varint).int32(message.showhelm);
        /* repeated eq.item.ItemInstance inventory_items = 126; */
        for (let i = 0; i < message.inventoryItems.length; i++)
            ItemInstance.internalBinaryWrite(message.inventoryItems[i], writer.tag(126, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message eq.player.PlayerProfile
 */
export const PlayerProfile = new PlayerProfile$Type();
