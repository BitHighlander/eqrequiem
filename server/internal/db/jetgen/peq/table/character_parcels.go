//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterParcels = newCharacterParcelsTable("peq", "character_parcels", "")

type characterParcelsTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnInteger
	CharID   mysql.ColumnInteger
	ItemID   mysql.ColumnInteger
	AugSlot1 mysql.ColumnInteger
	AugSlot2 mysql.ColumnInteger
	AugSlot3 mysql.ColumnInteger
	AugSlot4 mysql.ColumnInteger
	AugSlot5 mysql.ColumnInteger
	AugSlot6 mysql.ColumnInteger
	SlotID   mysql.ColumnInteger
	Quantity mysql.ColumnInteger
	FromName mysql.ColumnString
	Note     mysql.ColumnString
	SentDate mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterParcelsTable struct {
	characterParcelsTable

	NEW characterParcelsTable
}

// AS creates new CharacterParcelsTable with assigned alias
func (a CharacterParcelsTable) AS(alias string) *CharacterParcelsTable {
	return newCharacterParcelsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterParcelsTable with assigned schema name
func (a CharacterParcelsTable) FromSchema(schemaName string) *CharacterParcelsTable {
	return newCharacterParcelsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterParcelsTable with assigned table prefix
func (a CharacterParcelsTable) WithPrefix(prefix string) *CharacterParcelsTable {
	return newCharacterParcelsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterParcelsTable with assigned table suffix
func (a CharacterParcelsTable) WithSuffix(suffix string) *CharacterParcelsTable {
	return newCharacterParcelsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterParcelsTable(schemaName, tableName, alias string) *CharacterParcelsTable {
	return &CharacterParcelsTable{
		characterParcelsTable: newCharacterParcelsTableImpl(schemaName, tableName, alias),
		NEW:                   newCharacterParcelsTableImpl("", "new", ""),
	}
}

func newCharacterParcelsTableImpl(schemaName, tableName, alias string) characterParcelsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		CharIDColumn   = mysql.IntegerColumn("char_id")
		ItemIDColumn   = mysql.IntegerColumn("item_id")
		AugSlot1Column = mysql.IntegerColumn("aug_slot_1")
		AugSlot2Column = mysql.IntegerColumn("aug_slot_2")
		AugSlot3Column = mysql.IntegerColumn("aug_slot_3")
		AugSlot4Column = mysql.IntegerColumn("aug_slot_4")
		AugSlot5Column = mysql.IntegerColumn("aug_slot_5")
		AugSlot6Column = mysql.IntegerColumn("aug_slot_6")
		SlotIDColumn   = mysql.IntegerColumn("slot_id")
		QuantityColumn = mysql.IntegerColumn("quantity")
		FromNameColumn = mysql.StringColumn("from_name")
		NoteColumn     = mysql.StringColumn("note")
		SentDateColumn = mysql.TimestampColumn("sent_date")
		allColumns     = mysql.ColumnList{IDColumn, CharIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, SlotIDColumn, QuantityColumn, FromNameColumn, NoteColumn, SentDateColumn}
		mutableColumns = mysql.ColumnList{CharIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, SlotIDColumn, QuantityColumn, FromNameColumn, NoteColumn, SentDateColumn}
		defaultColumns = mysql.ColumnList{CharIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, SlotIDColumn, QuantityColumn}
	)

	return characterParcelsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		CharID:   CharIDColumn,
		ItemID:   ItemIDColumn,
		AugSlot1: AugSlot1Column,
		AugSlot2: AugSlot2Column,
		AugSlot3: AugSlot3Column,
		AugSlot4: AugSlot4Column,
		AugSlot5: AugSlot5Column,
		AugSlot6: AugSlot6Column,
		SlotID:   SlotIDColumn,
		Quantity: QuantityColumn,
		FromName: FromNameColumn,
		Note:     NoteColumn,
		SentDate: SentDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
