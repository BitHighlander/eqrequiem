//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterMaterial = newCharacterMaterialTable("peq", "character_material", "")

type characterMaterialTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnInteger
	Slot    mysql.ColumnInteger
	Blue    mysql.ColumnInteger
	Green   mysql.ColumnInteger
	Red     mysql.ColumnInteger
	UseTint mysql.ColumnInteger
	Color   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterMaterialTable struct {
	characterMaterialTable

	NEW characterMaterialTable
}

// AS creates new CharacterMaterialTable with assigned alias
func (a CharacterMaterialTable) AS(alias string) *CharacterMaterialTable {
	return newCharacterMaterialTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterMaterialTable with assigned schema name
func (a CharacterMaterialTable) FromSchema(schemaName string) *CharacterMaterialTable {
	return newCharacterMaterialTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterMaterialTable with assigned table prefix
func (a CharacterMaterialTable) WithPrefix(prefix string) *CharacterMaterialTable {
	return newCharacterMaterialTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterMaterialTable with assigned table suffix
func (a CharacterMaterialTable) WithSuffix(suffix string) *CharacterMaterialTable {
	return newCharacterMaterialTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterMaterialTable(schemaName, tableName, alias string) *CharacterMaterialTable {
	return &CharacterMaterialTable{
		characterMaterialTable: newCharacterMaterialTableImpl(schemaName, tableName, alias),
		NEW:                    newCharacterMaterialTableImpl("", "new", ""),
	}
}

func newCharacterMaterialTableImpl(schemaName, tableName, alias string) characterMaterialTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		SlotColumn     = mysql.IntegerColumn("slot")
		BlueColumn     = mysql.IntegerColumn("blue")
		GreenColumn    = mysql.IntegerColumn("green")
		RedColumn      = mysql.IntegerColumn("red")
		UseTintColumn  = mysql.IntegerColumn("use_tint")
		ColorColumn    = mysql.IntegerColumn("color")
		allColumns     = mysql.ColumnList{IDColumn, SlotColumn, BlueColumn, GreenColumn, RedColumn, UseTintColumn, ColorColumn}
		mutableColumns = mysql.ColumnList{BlueColumn, GreenColumn, RedColumn, UseTintColumn, ColorColumn}
		defaultColumns = mysql.ColumnList{SlotColumn, BlueColumn, GreenColumn, RedColumn, UseTintColumn, ColorColumn}
	)

	return characterMaterialTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Slot:    SlotColumn,
		Blue:    BlueColumn,
		Green:   GreenColumn,
		Red:     RedColumn,
		UseTint: UseTintColumn,
		Color:   ColorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
