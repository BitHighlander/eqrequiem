//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var QsMerchantTransactionRecordEntries = newQsMerchantTransactionRecordEntriesTable("peq", "qs_merchant_transaction_record_entries", "")

type qsMerchantTransactionRecordEntriesTable struct {
	mysql.Table

	// Columns
	EventID  mysql.ColumnInteger
	CharSlot mysql.ColumnInteger
	ItemID   mysql.ColumnInteger
	Charges  mysql.ColumnInteger
	Aug1     mysql.ColumnInteger
	Aug2     mysql.ColumnInteger
	Aug3     mysql.ColumnInteger
	Aug4     mysql.ColumnInteger
	Aug5     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type QsMerchantTransactionRecordEntriesTable struct {
	qsMerchantTransactionRecordEntriesTable

	NEW qsMerchantTransactionRecordEntriesTable
}

// AS creates new QsMerchantTransactionRecordEntriesTable with assigned alias
func (a QsMerchantTransactionRecordEntriesTable) AS(alias string) *QsMerchantTransactionRecordEntriesTable {
	return newQsMerchantTransactionRecordEntriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QsMerchantTransactionRecordEntriesTable with assigned schema name
func (a QsMerchantTransactionRecordEntriesTable) FromSchema(schemaName string) *QsMerchantTransactionRecordEntriesTable {
	return newQsMerchantTransactionRecordEntriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QsMerchantTransactionRecordEntriesTable with assigned table prefix
func (a QsMerchantTransactionRecordEntriesTable) WithPrefix(prefix string) *QsMerchantTransactionRecordEntriesTable {
	return newQsMerchantTransactionRecordEntriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QsMerchantTransactionRecordEntriesTable with assigned table suffix
func (a QsMerchantTransactionRecordEntriesTable) WithSuffix(suffix string) *QsMerchantTransactionRecordEntriesTable {
	return newQsMerchantTransactionRecordEntriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQsMerchantTransactionRecordEntriesTable(schemaName, tableName, alias string) *QsMerchantTransactionRecordEntriesTable {
	return &QsMerchantTransactionRecordEntriesTable{
		qsMerchantTransactionRecordEntriesTable: newQsMerchantTransactionRecordEntriesTableImpl(schemaName, tableName, alias),
		NEW:                                     newQsMerchantTransactionRecordEntriesTableImpl("", "new", ""),
	}
}

func newQsMerchantTransactionRecordEntriesTableImpl(schemaName, tableName, alias string) qsMerchantTransactionRecordEntriesTable {
	var (
		EventIDColumn  = mysql.IntegerColumn("event_id")
		CharSlotColumn = mysql.IntegerColumn("char_slot")
		ItemIDColumn   = mysql.IntegerColumn("item_id")
		ChargesColumn  = mysql.IntegerColumn("charges")
		Aug1Column     = mysql.IntegerColumn("aug_1")
		Aug2Column     = mysql.IntegerColumn("aug_2")
		Aug3Column     = mysql.IntegerColumn("aug_3")
		Aug4Column     = mysql.IntegerColumn("aug_4")
		Aug5Column     = mysql.IntegerColumn("aug_5")
		allColumns     = mysql.ColumnList{EventIDColumn, CharSlotColumn, ItemIDColumn, ChargesColumn, Aug1Column, Aug2Column, Aug3Column, Aug4Column, Aug5Column}
		mutableColumns = mysql.ColumnList{EventIDColumn, CharSlotColumn, ItemIDColumn, ChargesColumn, Aug1Column, Aug2Column, Aug3Column, Aug4Column, Aug5Column}
		defaultColumns = mysql.ColumnList{EventIDColumn, CharSlotColumn, ItemIDColumn, ChargesColumn, Aug1Column, Aug2Column, Aug3Column, Aug4Column, Aug5Column}
	)

	return qsMerchantTransactionRecordEntriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EventID:  EventIDColumn,
		CharSlot: CharSlotColumn,
		ItemID:   ItemIDColumn,
		Charges:  ChargesColumn,
		Aug1:     Aug1Column,
		Aug2:     Aug2Column,
		Aug3:     Aug3Column,
		Aug4:     Aug4Column,
		Aug5:     Aug5Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
