//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Damageshieldtypes = newDamageshieldtypesTable("peq", "damageshieldtypes", "")

type damageshieldtypesTable struct {
	mysql.Table

	// Columns
	Spellid mysql.ColumnInteger
	Type    mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type DamageshieldtypesTable struct {
	damageshieldtypesTable

	NEW damageshieldtypesTable
}

// AS creates new DamageshieldtypesTable with assigned alias
func (a DamageshieldtypesTable) AS(alias string) *DamageshieldtypesTable {
	return newDamageshieldtypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DamageshieldtypesTable with assigned schema name
func (a DamageshieldtypesTable) FromSchema(schemaName string) *DamageshieldtypesTable {
	return newDamageshieldtypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DamageshieldtypesTable with assigned table prefix
func (a DamageshieldtypesTable) WithPrefix(prefix string) *DamageshieldtypesTable {
	return newDamageshieldtypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DamageshieldtypesTable with assigned table suffix
func (a DamageshieldtypesTable) WithSuffix(suffix string) *DamageshieldtypesTable {
	return newDamageshieldtypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDamageshieldtypesTable(schemaName, tableName, alias string) *DamageshieldtypesTable {
	return &DamageshieldtypesTable{
		damageshieldtypesTable: newDamageshieldtypesTableImpl(schemaName, tableName, alias),
		NEW:                    newDamageshieldtypesTableImpl("", "new", ""),
	}
}

func newDamageshieldtypesTableImpl(schemaName, tableName, alias string) damageshieldtypesTable {
	var (
		SpellidColumn  = mysql.IntegerColumn("spellid")
		TypeColumn     = mysql.IntegerColumn("type")
		allColumns     = mysql.ColumnList{SpellidColumn, TypeColumn}
		mutableColumns = mysql.ColumnList{TypeColumn}
		defaultColumns = mysql.ColumnList{SpellidColumn, TypeColumn}
	)

	return damageshieldtypesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Spellid: SpellidColumn,
		Type:    TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
