//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FactionBaseData = newFactionBaseDataTable("peq", "faction_base_data", "")

type factionBaseDataTable struct {
	mysql.Table

	// Columns
	ClientFactionID mysql.ColumnInteger
	Min             mysql.ColumnInteger
	Max             mysql.ColumnInteger
	UnkHero1        mysql.ColumnInteger
	UnkHero2        mysql.ColumnInteger
	UnkHero3        mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FactionBaseDataTable struct {
	factionBaseDataTable

	NEW factionBaseDataTable
}

// AS creates new FactionBaseDataTable with assigned alias
func (a FactionBaseDataTable) AS(alias string) *FactionBaseDataTable {
	return newFactionBaseDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FactionBaseDataTable with assigned schema name
func (a FactionBaseDataTable) FromSchema(schemaName string) *FactionBaseDataTable {
	return newFactionBaseDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FactionBaseDataTable with assigned table prefix
func (a FactionBaseDataTable) WithPrefix(prefix string) *FactionBaseDataTable {
	return newFactionBaseDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FactionBaseDataTable with assigned table suffix
func (a FactionBaseDataTable) WithSuffix(suffix string) *FactionBaseDataTable {
	return newFactionBaseDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFactionBaseDataTable(schemaName, tableName, alias string) *FactionBaseDataTable {
	return &FactionBaseDataTable{
		factionBaseDataTable: newFactionBaseDataTableImpl(schemaName, tableName, alias),
		NEW:                  newFactionBaseDataTableImpl("", "new", ""),
	}
}

func newFactionBaseDataTableImpl(schemaName, tableName, alias string) factionBaseDataTable {
	var (
		ClientFactionIDColumn = mysql.IntegerColumn("client_faction_id")
		MinColumn             = mysql.IntegerColumn("min")
		MaxColumn             = mysql.IntegerColumn("max")
		UnkHero1Column        = mysql.IntegerColumn("unk_hero1")
		UnkHero2Column        = mysql.IntegerColumn("unk_hero2")
		UnkHero3Column        = mysql.IntegerColumn("unk_hero3")
		allColumns            = mysql.ColumnList{ClientFactionIDColumn, MinColumn, MaxColumn, UnkHero1Column, UnkHero2Column, UnkHero3Column}
		mutableColumns        = mysql.ColumnList{MinColumn, MaxColumn, UnkHero1Column, UnkHero2Column, UnkHero3Column}
		defaultColumns        = mysql.ColumnList{MinColumn, MaxColumn}
	)

	return factionBaseDataTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ClientFactionID: ClientFactionIDColumn,
		Min:             MinColumn,
		Max:             MaxColumn,
		UnkHero1:        UnkHero1Column,
		UnkHero2:        UnkHero2Column,
		UnkHero3:        UnkHero3Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
