//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DynamicZoneLockouts = newDynamicZoneLockoutsTable("peq", "dynamic_zone_lockouts", "")

type dynamicZoneLockoutsTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnInteger
	DynamicZoneID      mysql.ColumnInteger
	EventName          mysql.ColumnString
	ExpireTime         mysql.ColumnTimestamp
	Duration           mysql.ColumnInteger
	FromExpeditionUUID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type DynamicZoneLockoutsTable struct {
	dynamicZoneLockoutsTable

	NEW dynamicZoneLockoutsTable
}

// AS creates new DynamicZoneLockoutsTable with assigned alias
func (a DynamicZoneLockoutsTable) AS(alias string) *DynamicZoneLockoutsTable {
	return newDynamicZoneLockoutsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DynamicZoneLockoutsTable with assigned schema name
func (a DynamicZoneLockoutsTable) FromSchema(schemaName string) *DynamicZoneLockoutsTable {
	return newDynamicZoneLockoutsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DynamicZoneLockoutsTable with assigned table prefix
func (a DynamicZoneLockoutsTable) WithPrefix(prefix string) *DynamicZoneLockoutsTable {
	return newDynamicZoneLockoutsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DynamicZoneLockoutsTable with assigned table suffix
func (a DynamicZoneLockoutsTable) WithSuffix(suffix string) *DynamicZoneLockoutsTable {
	return newDynamicZoneLockoutsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDynamicZoneLockoutsTable(schemaName, tableName, alias string) *DynamicZoneLockoutsTable {
	return &DynamicZoneLockoutsTable{
		dynamicZoneLockoutsTable: newDynamicZoneLockoutsTableImpl(schemaName, tableName, alias),
		NEW:                      newDynamicZoneLockoutsTableImpl("", "new", ""),
	}
}

func newDynamicZoneLockoutsTableImpl(schemaName, tableName, alias string) dynamicZoneLockoutsTable {
	var (
		IDColumn                 = mysql.IntegerColumn("id")
		DynamicZoneIDColumn      = mysql.IntegerColumn("dynamic_zone_id")
		EventNameColumn          = mysql.StringColumn("event_name")
		ExpireTimeColumn         = mysql.TimestampColumn("expire_time")
		DurationColumn           = mysql.IntegerColumn("duration")
		FromExpeditionUUIDColumn = mysql.StringColumn("from_expedition_uuid")
		allColumns               = mysql.ColumnList{IDColumn, DynamicZoneIDColumn, EventNameColumn, ExpireTimeColumn, DurationColumn, FromExpeditionUUIDColumn}
		mutableColumns           = mysql.ColumnList{DynamicZoneIDColumn, EventNameColumn, ExpireTimeColumn, DurationColumn, FromExpeditionUUIDColumn}
		defaultColumns           = mysql.ColumnList{ExpireTimeColumn, DurationColumn}
	)

	return dynamicZoneLockoutsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		DynamicZoneID:      DynamicZoneIDColumn,
		EventName:          EventNameColumn,
		ExpireTime:         ExpireTimeColumn,
		Duration:           DurationColumn,
		FromExpeditionUUID: FromExpeditionUUIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
