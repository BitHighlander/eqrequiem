//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LogsysCategories = newLogsysCategoriesTable("peq", "logsys_categories", "")

type logsysCategoriesTable struct {
	mysql.Table

	// Columns
	LogCategoryID          mysql.ColumnInteger
	LogCategoryDescription mysql.ColumnString
	LogToConsole           mysql.ColumnInteger
	LogToFile              mysql.ColumnInteger
	LogToGmsay             mysql.ColumnInteger
	LogToDiscord           mysql.ColumnInteger
	DiscordWebhookID       mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type LogsysCategoriesTable struct {
	logsysCategoriesTable

	NEW logsysCategoriesTable
}

// AS creates new LogsysCategoriesTable with assigned alias
func (a LogsysCategoriesTable) AS(alias string) *LogsysCategoriesTable {
	return newLogsysCategoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LogsysCategoriesTable with assigned schema name
func (a LogsysCategoriesTable) FromSchema(schemaName string) *LogsysCategoriesTable {
	return newLogsysCategoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LogsysCategoriesTable with assigned table prefix
func (a LogsysCategoriesTable) WithPrefix(prefix string) *LogsysCategoriesTable {
	return newLogsysCategoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LogsysCategoriesTable with assigned table suffix
func (a LogsysCategoriesTable) WithSuffix(suffix string) *LogsysCategoriesTable {
	return newLogsysCategoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLogsysCategoriesTable(schemaName, tableName, alias string) *LogsysCategoriesTable {
	return &LogsysCategoriesTable{
		logsysCategoriesTable: newLogsysCategoriesTableImpl(schemaName, tableName, alias),
		NEW:                   newLogsysCategoriesTableImpl("", "new", ""),
	}
}

func newLogsysCategoriesTableImpl(schemaName, tableName, alias string) logsysCategoriesTable {
	var (
		LogCategoryIDColumn          = mysql.IntegerColumn("log_category_id")
		LogCategoryDescriptionColumn = mysql.StringColumn("log_category_description")
		LogToConsoleColumn           = mysql.IntegerColumn("log_to_console")
		LogToFileColumn              = mysql.IntegerColumn("log_to_file")
		LogToGmsayColumn             = mysql.IntegerColumn("log_to_gmsay")
		LogToDiscordColumn           = mysql.IntegerColumn("log_to_discord")
		DiscordWebhookIDColumn       = mysql.IntegerColumn("discord_webhook_id")
		allColumns                   = mysql.ColumnList{LogCategoryIDColumn, LogCategoryDescriptionColumn, LogToConsoleColumn, LogToFileColumn, LogToGmsayColumn, LogToDiscordColumn, DiscordWebhookIDColumn}
		mutableColumns               = mysql.ColumnList{LogCategoryDescriptionColumn, LogToConsoleColumn, LogToFileColumn, LogToGmsayColumn, LogToDiscordColumn, DiscordWebhookIDColumn}
		defaultColumns               = mysql.ColumnList{LogToConsoleColumn, LogToFileColumn, LogToGmsayColumn, LogToDiscordColumn, DiscordWebhookIDColumn}
	)

	return logsysCategoriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		LogCategoryID:          LogCategoryIDColumn,
		LogCategoryDescription: LogCategoryDescriptionColumn,
		LogToConsole:           LogToConsoleColumn,
		LogToFile:              LogToFileColumn,
		LogToGmsay:             LogToGmsayColumn,
		LogToDiscord:           LogToDiscordColumn,
		DiscordWebhookID:       DiscordWebhookIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
