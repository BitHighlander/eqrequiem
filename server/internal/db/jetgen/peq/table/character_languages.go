//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterLanguages = newCharacterLanguagesTable("peq", "character_languages", "")

type characterLanguagesTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnInteger
	LangID mysql.ColumnInteger
	Value  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterLanguagesTable struct {
	characterLanguagesTable

	NEW characterLanguagesTable
}

// AS creates new CharacterLanguagesTable with assigned alias
func (a CharacterLanguagesTable) AS(alias string) *CharacterLanguagesTable {
	return newCharacterLanguagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterLanguagesTable with assigned schema name
func (a CharacterLanguagesTable) FromSchema(schemaName string) *CharacterLanguagesTable {
	return newCharacterLanguagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterLanguagesTable with assigned table prefix
func (a CharacterLanguagesTable) WithPrefix(prefix string) *CharacterLanguagesTable {
	return newCharacterLanguagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterLanguagesTable with assigned table suffix
func (a CharacterLanguagesTable) WithSuffix(suffix string) *CharacterLanguagesTable {
	return newCharacterLanguagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterLanguagesTable(schemaName, tableName, alias string) *CharacterLanguagesTable {
	return &CharacterLanguagesTable{
		characterLanguagesTable: newCharacterLanguagesTableImpl(schemaName, tableName, alias),
		NEW:                     newCharacterLanguagesTableImpl("", "new", ""),
	}
}

func newCharacterLanguagesTableImpl(schemaName, tableName, alias string) characterLanguagesTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		LangIDColumn   = mysql.IntegerColumn("lang_id")
		ValueColumn    = mysql.IntegerColumn("value")
		allColumns     = mysql.ColumnList{IDColumn, LangIDColumn, ValueColumn}
		mutableColumns = mysql.ColumnList{ValueColumn}
		defaultColumns = mysql.ColumnList{LangIDColumn, ValueColumn}
	)

	return characterLanguagesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		LangID: LangIDColumn,
		Value:  ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
