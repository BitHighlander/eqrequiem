//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DataBuckets = newDataBucketsTable("peq", "data_buckets", "")

type dataBucketsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	Key         mysql.ColumnString
	Value       mysql.ColumnString
	Expires     mysql.ColumnInteger
	AccountID   mysql.ColumnInteger
	CharacterID mysql.ColumnInteger
	NpcID       mysql.ColumnInteger
	BotID       mysql.ColumnInteger
	ZoneID      mysql.ColumnInteger
	InstanceID  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type DataBucketsTable struct {
	dataBucketsTable

	NEW dataBucketsTable
}

// AS creates new DataBucketsTable with assigned alias
func (a DataBucketsTable) AS(alias string) *DataBucketsTable {
	return newDataBucketsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DataBucketsTable with assigned schema name
func (a DataBucketsTable) FromSchema(schemaName string) *DataBucketsTable {
	return newDataBucketsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DataBucketsTable with assigned table prefix
func (a DataBucketsTable) WithPrefix(prefix string) *DataBucketsTable {
	return newDataBucketsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DataBucketsTable with assigned table suffix
func (a DataBucketsTable) WithSuffix(suffix string) *DataBucketsTable {
	return newDataBucketsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDataBucketsTable(schemaName, tableName, alias string) *DataBucketsTable {
	return &DataBucketsTable{
		dataBucketsTable: newDataBucketsTableImpl(schemaName, tableName, alias),
		NEW:              newDataBucketsTableImpl("", "new", ""),
	}
}

func newDataBucketsTableImpl(schemaName, tableName, alias string) dataBucketsTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		KeyColumn         = mysql.StringColumn("key")
		ValueColumn       = mysql.StringColumn("value")
		ExpiresColumn     = mysql.IntegerColumn("expires")
		AccountIDColumn   = mysql.IntegerColumn("account_id")
		CharacterIDColumn = mysql.IntegerColumn("character_id")
		NpcIDColumn       = mysql.IntegerColumn("npc_id")
		BotIDColumn       = mysql.IntegerColumn("bot_id")
		ZoneIDColumn      = mysql.IntegerColumn("zone_id")
		InstanceIDColumn  = mysql.IntegerColumn("instance_id")
		allColumns        = mysql.ColumnList{IDColumn, KeyColumn, ValueColumn, ExpiresColumn, AccountIDColumn, CharacterIDColumn, NpcIDColumn, BotIDColumn, ZoneIDColumn, InstanceIDColumn}
		mutableColumns    = mysql.ColumnList{KeyColumn, ValueColumn, ExpiresColumn, AccountIDColumn, CharacterIDColumn, NpcIDColumn, BotIDColumn, ZoneIDColumn, InstanceIDColumn}
		defaultColumns    = mysql.ColumnList{ExpiresColumn, AccountIDColumn, CharacterIDColumn, NpcIDColumn, BotIDColumn, ZoneIDColumn, InstanceIDColumn}
	)

	return dataBucketsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Key:         KeyColumn,
		Value:       ValueColumn,
		Expires:     ExpiresColumn,
		AccountID:   AccountIDColumn,
		CharacterID: CharacterIDColumn,
		NpcID:       NpcIDColumn,
		BotID:       BotIDColumn,
		ZoneID:      ZoneIDColumn,
		InstanceID:  InstanceIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
