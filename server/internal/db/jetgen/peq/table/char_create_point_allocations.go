//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharCreatePointAllocations = newCharCreatePointAllocationsTable("peq", "char_create_point_allocations", "")

type charCreatePointAllocationsTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnInteger
	BaseStr  mysql.ColumnInteger
	BaseSta  mysql.ColumnInteger
	BaseDex  mysql.ColumnInteger
	BaseAgi  mysql.ColumnInteger
	BaseInt  mysql.ColumnInteger
	BaseWis  mysql.ColumnInteger
	BaseCha  mysql.ColumnInteger
	AllocStr mysql.ColumnInteger
	AllocSta mysql.ColumnInteger
	AllocDex mysql.ColumnInteger
	AllocAgi mysql.ColumnInteger
	AllocInt mysql.ColumnInteger
	AllocWis mysql.ColumnInteger
	AllocCha mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharCreatePointAllocationsTable struct {
	charCreatePointAllocationsTable

	NEW charCreatePointAllocationsTable
}

// AS creates new CharCreatePointAllocationsTable with assigned alias
func (a CharCreatePointAllocationsTable) AS(alias string) *CharCreatePointAllocationsTable {
	return newCharCreatePointAllocationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharCreatePointAllocationsTable with assigned schema name
func (a CharCreatePointAllocationsTable) FromSchema(schemaName string) *CharCreatePointAllocationsTable {
	return newCharCreatePointAllocationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharCreatePointAllocationsTable with assigned table prefix
func (a CharCreatePointAllocationsTable) WithPrefix(prefix string) *CharCreatePointAllocationsTable {
	return newCharCreatePointAllocationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharCreatePointAllocationsTable with assigned table suffix
func (a CharCreatePointAllocationsTable) WithSuffix(suffix string) *CharCreatePointAllocationsTable {
	return newCharCreatePointAllocationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharCreatePointAllocationsTable(schemaName, tableName, alias string) *CharCreatePointAllocationsTable {
	return &CharCreatePointAllocationsTable{
		charCreatePointAllocationsTable: newCharCreatePointAllocationsTableImpl(schemaName, tableName, alias),
		NEW:                             newCharCreatePointAllocationsTableImpl("", "new", ""),
	}
}

func newCharCreatePointAllocationsTableImpl(schemaName, tableName, alias string) charCreatePointAllocationsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		BaseStrColumn  = mysql.IntegerColumn("base_str")
		BaseStaColumn  = mysql.IntegerColumn("base_sta")
		BaseDexColumn  = mysql.IntegerColumn("base_dex")
		BaseAgiColumn  = mysql.IntegerColumn("base_agi")
		BaseIntColumn  = mysql.IntegerColumn("base_int")
		BaseWisColumn  = mysql.IntegerColumn("base_wis")
		BaseChaColumn  = mysql.IntegerColumn("base_cha")
		AllocStrColumn = mysql.IntegerColumn("alloc_str")
		AllocStaColumn = mysql.IntegerColumn("alloc_sta")
		AllocDexColumn = mysql.IntegerColumn("alloc_dex")
		AllocAgiColumn = mysql.IntegerColumn("alloc_agi")
		AllocIntColumn = mysql.IntegerColumn("alloc_int")
		AllocWisColumn = mysql.IntegerColumn("alloc_wis")
		AllocChaColumn = mysql.IntegerColumn("alloc_cha")
		allColumns     = mysql.ColumnList{IDColumn, BaseStrColumn, BaseStaColumn, BaseDexColumn, BaseAgiColumn, BaseIntColumn, BaseWisColumn, BaseChaColumn, AllocStrColumn, AllocStaColumn, AllocDexColumn, AllocAgiColumn, AllocIntColumn, AllocWisColumn, AllocChaColumn}
		mutableColumns = mysql.ColumnList{BaseStrColumn, BaseStaColumn, BaseDexColumn, BaseAgiColumn, BaseIntColumn, BaseWisColumn, BaseChaColumn, AllocStrColumn, AllocStaColumn, AllocDexColumn, AllocAgiColumn, AllocIntColumn, AllocWisColumn, AllocChaColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return charCreatePointAllocationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		BaseStr:  BaseStrColumn,
		BaseSta:  BaseStaColumn,
		BaseDex:  BaseDexColumn,
		BaseAgi:  BaseAgiColumn,
		BaseInt:  BaseIntColumn,
		BaseWis:  BaseWisColumn,
		BaseCha:  BaseChaColumn,
		AllocStr: AllocStrColumn,
		AllocSta: AllocStaColumn,
		AllocDex: AllocDexColumn,
		AllocAgi: AllocAgiColumn,
		AllocInt: AllocIntColumn,
		AllocWis: AllocWisColumn,
		AllocCha: AllocChaColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
