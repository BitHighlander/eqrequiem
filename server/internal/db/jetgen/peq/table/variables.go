//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Variables = newVariablesTable("peq", "variables", "")

type variablesTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	Varname     mysql.ColumnString
	Value       mysql.ColumnString
	Information mysql.ColumnString
	Ts          mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type VariablesTable struct {
	variablesTable

	NEW variablesTable
}

// AS creates new VariablesTable with assigned alias
func (a VariablesTable) AS(alias string) *VariablesTable {
	return newVariablesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VariablesTable with assigned schema name
func (a VariablesTable) FromSchema(schemaName string) *VariablesTable {
	return newVariablesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VariablesTable with assigned table prefix
func (a VariablesTable) WithPrefix(prefix string) *VariablesTable {
	return newVariablesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VariablesTable with assigned table suffix
func (a VariablesTable) WithSuffix(suffix string) *VariablesTable {
	return newVariablesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVariablesTable(schemaName, tableName, alias string) *VariablesTable {
	return &VariablesTable{
		variablesTable: newVariablesTableImpl(schemaName, tableName, alias),
		NEW:            newVariablesTableImpl("", "new", ""),
	}
}

func newVariablesTableImpl(schemaName, tableName, alias string) variablesTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		VarnameColumn     = mysql.StringColumn("varname")
		ValueColumn       = mysql.StringColumn("value")
		InformationColumn = mysql.StringColumn("information")
		TsColumn          = mysql.TimestampColumn("ts")
		allColumns        = mysql.ColumnList{IDColumn, VarnameColumn, ValueColumn, InformationColumn, TsColumn}
		mutableColumns    = mysql.ColumnList{VarnameColumn, ValueColumn, InformationColumn, TsColumn}
		defaultColumns    = mysql.ColumnList{VarnameColumn, TsColumn}
	)

	return variablesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Varname:     VarnameColumn,
		Value:       ValueColumn,
		Information: InformationColumn,
		Ts:          TsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
