//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterInstanceSafereturns = newCharacterInstanceSafereturnsTable("peq", "character_instance_safereturns", "")

type characterInstanceSafereturnsTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	CharacterID    mysql.ColumnInteger
	InstanceZoneID mysql.ColumnInteger
	InstanceID     mysql.ColumnInteger
	SafeZoneID     mysql.ColumnInteger
	SafeX          mysql.ColumnFloat
	SafeY          mysql.ColumnFloat
	SafeZ          mysql.ColumnFloat
	SafeHeading    mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterInstanceSafereturnsTable struct {
	characterInstanceSafereturnsTable

	NEW characterInstanceSafereturnsTable
}

// AS creates new CharacterInstanceSafereturnsTable with assigned alias
func (a CharacterInstanceSafereturnsTable) AS(alias string) *CharacterInstanceSafereturnsTable {
	return newCharacterInstanceSafereturnsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterInstanceSafereturnsTable with assigned schema name
func (a CharacterInstanceSafereturnsTable) FromSchema(schemaName string) *CharacterInstanceSafereturnsTable {
	return newCharacterInstanceSafereturnsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterInstanceSafereturnsTable with assigned table prefix
func (a CharacterInstanceSafereturnsTable) WithPrefix(prefix string) *CharacterInstanceSafereturnsTable {
	return newCharacterInstanceSafereturnsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterInstanceSafereturnsTable with assigned table suffix
func (a CharacterInstanceSafereturnsTable) WithSuffix(suffix string) *CharacterInstanceSafereturnsTable {
	return newCharacterInstanceSafereturnsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterInstanceSafereturnsTable(schemaName, tableName, alias string) *CharacterInstanceSafereturnsTable {
	return &CharacterInstanceSafereturnsTable{
		characterInstanceSafereturnsTable: newCharacterInstanceSafereturnsTableImpl(schemaName, tableName, alias),
		NEW:                               newCharacterInstanceSafereturnsTableImpl("", "new", ""),
	}
}

func newCharacterInstanceSafereturnsTableImpl(schemaName, tableName, alias string) characterInstanceSafereturnsTable {
	var (
		IDColumn             = mysql.IntegerColumn("id")
		CharacterIDColumn    = mysql.IntegerColumn("character_id")
		InstanceZoneIDColumn = mysql.IntegerColumn("instance_zone_id")
		InstanceIDColumn     = mysql.IntegerColumn("instance_id")
		SafeZoneIDColumn     = mysql.IntegerColumn("safe_zone_id")
		SafeXColumn          = mysql.FloatColumn("safe_x")
		SafeYColumn          = mysql.FloatColumn("safe_y")
		SafeZColumn          = mysql.FloatColumn("safe_z")
		SafeHeadingColumn    = mysql.FloatColumn("safe_heading")
		allColumns           = mysql.ColumnList{IDColumn, CharacterIDColumn, InstanceZoneIDColumn, InstanceIDColumn, SafeZoneIDColumn, SafeXColumn, SafeYColumn, SafeZColumn, SafeHeadingColumn}
		mutableColumns       = mysql.ColumnList{CharacterIDColumn, InstanceZoneIDColumn, InstanceIDColumn, SafeZoneIDColumn, SafeXColumn, SafeYColumn, SafeZColumn, SafeHeadingColumn}
		defaultColumns       = mysql.ColumnList{InstanceZoneIDColumn, InstanceIDColumn, SafeZoneIDColumn, SafeXColumn, SafeYColumn, SafeZColumn, SafeHeadingColumn}
	)

	return characterInstanceSafereturnsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CharacterID:    CharacterIDColumn,
		InstanceZoneID: InstanceZoneIDColumn,
		InstanceID:     InstanceIDColumn,
		SafeZoneID:     SafeZoneIDColumn,
		SafeX:          SafeXColumn,
		SafeY:          SafeYColumn,
		SafeZ:          SafeZColumn,
		SafeHeading:    SafeHeadingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
