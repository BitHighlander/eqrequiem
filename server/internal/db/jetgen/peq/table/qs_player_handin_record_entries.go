//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var QsPlayerHandinRecordEntries = newQsPlayerHandinRecordEntriesTable("peq", "qs_player_handin_record_entries", "")

type qsPlayerHandinRecordEntriesTable struct {
	mysql.Table

	// Columns
	EventID    mysql.ColumnInteger
	ActionType mysql.ColumnString
	CharSlot   mysql.ColumnInteger
	ItemID     mysql.ColumnInteger
	Charges    mysql.ColumnInteger
	Aug1       mysql.ColumnInteger
	Aug2       mysql.ColumnInteger
	Aug3       mysql.ColumnInteger
	Aug4       mysql.ColumnInteger
	Aug5       mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type QsPlayerHandinRecordEntriesTable struct {
	qsPlayerHandinRecordEntriesTable

	NEW qsPlayerHandinRecordEntriesTable
}

// AS creates new QsPlayerHandinRecordEntriesTable with assigned alias
func (a QsPlayerHandinRecordEntriesTable) AS(alias string) *QsPlayerHandinRecordEntriesTable {
	return newQsPlayerHandinRecordEntriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QsPlayerHandinRecordEntriesTable with assigned schema name
func (a QsPlayerHandinRecordEntriesTable) FromSchema(schemaName string) *QsPlayerHandinRecordEntriesTable {
	return newQsPlayerHandinRecordEntriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QsPlayerHandinRecordEntriesTable with assigned table prefix
func (a QsPlayerHandinRecordEntriesTable) WithPrefix(prefix string) *QsPlayerHandinRecordEntriesTable {
	return newQsPlayerHandinRecordEntriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QsPlayerHandinRecordEntriesTable with assigned table suffix
func (a QsPlayerHandinRecordEntriesTable) WithSuffix(suffix string) *QsPlayerHandinRecordEntriesTable {
	return newQsPlayerHandinRecordEntriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQsPlayerHandinRecordEntriesTable(schemaName, tableName, alias string) *QsPlayerHandinRecordEntriesTable {
	return &QsPlayerHandinRecordEntriesTable{
		qsPlayerHandinRecordEntriesTable: newQsPlayerHandinRecordEntriesTableImpl(schemaName, tableName, alias),
		NEW:                              newQsPlayerHandinRecordEntriesTableImpl("", "new", ""),
	}
}

func newQsPlayerHandinRecordEntriesTableImpl(schemaName, tableName, alias string) qsPlayerHandinRecordEntriesTable {
	var (
		EventIDColumn    = mysql.IntegerColumn("event_id")
		ActionTypeColumn = mysql.StringColumn("action_type")
		CharSlotColumn   = mysql.IntegerColumn("char_slot")
		ItemIDColumn     = mysql.IntegerColumn("item_id")
		ChargesColumn    = mysql.IntegerColumn("charges")
		Aug1Column       = mysql.IntegerColumn("aug_1")
		Aug2Column       = mysql.IntegerColumn("aug_2")
		Aug3Column       = mysql.IntegerColumn("aug_3")
		Aug4Column       = mysql.IntegerColumn("aug_4")
		Aug5Column       = mysql.IntegerColumn("aug_5")
		allColumns       = mysql.ColumnList{EventIDColumn, ActionTypeColumn, CharSlotColumn, ItemIDColumn, ChargesColumn, Aug1Column, Aug2Column, Aug3Column, Aug4Column, Aug5Column}
		mutableColumns   = mysql.ColumnList{EventIDColumn, ActionTypeColumn, CharSlotColumn, ItemIDColumn, ChargesColumn, Aug1Column, Aug2Column, Aug3Column, Aug4Column, Aug5Column}
		defaultColumns   = mysql.ColumnList{EventIDColumn, ActionTypeColumn, CharSlotColumn, ItemIDColumn, ChargesColumn, Aug1Column, Aug2Column, Aug3Column, Aug4Column, Aug5Column}
	)

	return qsPlayerHandinRecordEntriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EventID:    EventIDColumn,
		ActionType: ActionTypeColumn,
		CharSlot:   CharSlotColumn,
		ItemID:     ItemIDColumn,
		Charges:    ChargesColumn,
		Aug1:       Aug1Column,
		Aug2:       Aug2Column,
		Aug3:       Aug3Column,
		Aug4:       Aug4Column,
		Aug5:       Aug5Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
