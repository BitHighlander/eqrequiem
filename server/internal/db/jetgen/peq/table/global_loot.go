//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var GlobalLoot = newGlobalLootTable("peq", "global_loot", "")

type globalLootTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	Description          mysql.ColumnString
	LoottableID          mysql.ColumnInteger
	Enabled              mysql.ColumnInteger
	MinLevel             mysql.ColumnInteger
	MaxLevel             mysql.ColumnInteger
	Rare                 mysql.ColumnInteger
	Raid                 mysql.ColumnInteger
	Race                 mysql.ColumnString
	Class                mysql.ColumnString
	Bodytype             mysql.ColumnString
	Zone                 mysql.ColumnString
	HotZone              mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type GlobalLootTable struct {
	globalLootTable

	NEW globalLootTable
}

// AS creates new GlobalLootTable with assigned alias
func (a GlobalLootTable) AS(alias string) *GlobalLootTable {
	return newGlobalLootTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GlobalLootTable with assigned schema name
func (a GlobalLootTable) FromSchema(schemaName string) *GlobalLootTable {
	return newGlobalLootTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GlobalLootTable with assigned table prefix
func (a GlobalLootTable) WithPrefix(prefix string) *GlobalLootTable {
	return newGlobalLootTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GlobalLootTable with assigned table suffix
func (a GlobalLootTable) WithSuffix(suffix string) *GlobalLootTable {
	return newGlobalLootTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGlobalLootTable(schemaName, tableName, alias string) *GlobalLootTable {
	return &GlobalLootTable{
		globalLootTable: newGlobalLootTableImpl(schemaName, tableName, alias),
		NEW:             newGlobalLootTableImpl("", "new", ""),
	}
}

func newGlobalLootTableImpl(schemaName, tableName, alias string) globalLootTable {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		DescriptionColumn          = mysql.StringColumn("description")
		LoottableIDColumn          = mysql.IntegerColumn("loottable_id")
		EnabledColumn              = mysql.IntegerColumn("enabled")
		MinLevelColumn             = mysql.IntegerColumn("min_level")
		MaxLevelColumn             = mysql.IntegerColumn("max_level")
		RareColumn                 = mysql.IntegerColumn("rare")
		RaidColumn                 = mysql.IntegerColumn("raid")
		RaceColumn                 = mysql.StringColumn("race")
		ClassColumn                = mysql.StringColumn("class")
		BodytypeColumn             = mysql.StringColumn("bodytype")
		ZoneColumn                 = mysql.StringColumn("zone")
		HotZoneColumn              = mysql.IntegerColumn("hot_zone")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{IDColumn, DescriptionColumn, LoottableIDColumn, EnabledColumn, MinLevelColumn, MaxLevelColumn, RareColumn, RaidColumn, RaceColumn, ClassColumn, BodytypeColumn, ZoneColumn, HotZoneColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{DescriptionColumn, LoottableIDColumn, EnabledColumn, MinLevelColumn, MaxLevelColumn, RareColumn, RaidColumn, RaceColumn, ClassColumn, BodytypeColumn, ZoneColumn, HotZoneColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{EnabledColumn, MinLevelColumn, MaxLevelColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return globalLootTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Description:          DescriptionColumn,
		LoottableID:          LoottableIDColumn,
		Enabled:              EnabledColumn,
		MinLevel:             MinLevelColumn,
		MaxLevel:             MaxLevelColumn,
		Rare:                 RareColumn,
		Raid:                 RaidColumn,
		Race:                 RaceColumn,
		Class:                ClassColumn,
		Bodytype:             BodytypeColumn,
		Zone:                 ZoneColumn,
		HotZone:              HotZoneColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
