//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LauncherZones = newLauncherZonesTable("peq", "launcher_zones", "")

type launcherZonesTable struct {
	mysql.Table

	// Columns
	Launcher mysql.ColumnString
	Zone     mysql.ColumnString
	Port     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type LauncherZonesTable struct {
	launcherZonesTable

	NEW launcherZonesTable
}

// AS creates new LauncherZonesTable with assigned alias
func (a LauncherZonesTable) AS(alias string) *LauncherZonesTable {
	return newLauncherZonesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LauncherZonesTable with assigned schema name
func (a LauncherZonesTable) FromSchema(schemaName string) *LauncherZonesTable {
	return newLauncherZonesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LauncherZonesTable with assigned table prefix
func (a LauncherZonesTable) WithPrefix(prefix string) *LauncherZonesTable {
	return newLauncherZonesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LauncherZonesTable with assigned table suffix
func (a LauncherZonesTable) WithSuffix(suffix string) *LauncherZonesTable {
	return newLauncherZonesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLauncherZonesTable(schemaName, tableName, alias string) *LauncherZonesTable {
	return &LauncherZonesTable{
		launcherZonesTable: newLauncherZonesTableImpl(schemaName, tableName, alias),
		NEW:                newLauncherZonesTableImpl("", "new", ""),
	}
}

func newLauncherZonesTableImpl(schemaName, tableName, alias string) launcherZonesTable {
	var (
		LauncherColumn = mysql.StringColumn("launcher")
		ZoneColumn     = mysql.StringColumn("zone")
		PortColumn     = mysql.IntegerColumn("port")
		allColumns     = mysql.ColumnList{LauncherColumn, ZoneColumn, PortColumn}
		mutableColumns = mysql.ColumnList{PortColumn}
		defaultColumns = mysql.ColumnList{LauncherColumn, ZoneColumn, PortColumn}
	)

	return launcherZonesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Launcher: LauncherColumn,
		Zone:     ZoneColumn,
		Port:     PortColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
