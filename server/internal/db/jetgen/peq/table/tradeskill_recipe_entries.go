//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TradeskillRecipeEntries = newTradeskillRecipeEntriesTable("peq", "tradeskill_recipe_entries", "")

type tradeskillRecipeEntriesTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	RecipeID       mysql.ColumnInteger
	ItemID         mysql.ColumnInteger
	Successcount   mysql.ColumnInteger
	Failcount      mysql.ColumnInteger
	Componentcount mysql.ColumnInteger
	Salvagecount   mysql.ColumnInteger
	Iscontainer    mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type TradeskillRecipeEntriesTable struct {
	tradeskillRecipeEntriesTable

	NEW tradeskillRecipeEntriesTable
}

// AS creates new TradeskillRecipeEntriesTable with assigned alias
func (a TradeskillRecipeEntriesTable) AS(alias string) *TradeskillRecipeEntriesTable {
	return newTradeskillRecipeEntriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TradeskillRecipeEntriesTable with assigned schema name
func (a TradeskillRecipeEntriesTable) FromSchema(schemaName string) *TradeskillRecipeEntriesTable {
	return newTradeskillRecipeEntriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TradeskillRecipeEntriesTable with assigned table prefix
func (a TradeskillRecipeEntriesTable) WithPrefix(prefix string) *TradeskillRecipeEntriesTable {
	return newTradeskillRecipeEntriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TradeskillRecipeEntriesTable with assigned table suffix
func (a TradeskillRecipeEntriesTable) WithSuffix(suffix string) *TradeskillRecipeEntriesTable {
	return newTradeskillRecipeEntriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTradeskillRecipeEntriesTable(schemaName, tableName, alias string) *TradeskillRecipeEntriesTable {
	return &TradeskillRecipeEntriesTable{
		tradeskillRecipeEntriesTable: newTradeskillRecipeEntriesTableImpl(schemaName, tableName, alias),
		NEW:                          newTradeskillRecipeEntriesTableImpl("", "new", ""),
	}
}

func newTradeskillRecipeEntriesTableImpl(schemaName, tableName, alias string) tradeskillRecipeEntriesTable {
	var (
		IDColumn             = mysql.IntegerColumn("id")
		RecipeIDColumn       = mysql.IntegerColumn("recipe_id")
		ItemIDColumn         = mysql.IntegerColumn("item_id")
		SuccesscountColumn   = mysql.IntegerColumn("successcount")
		FailcountColumn      = mysql.IntegerColumn("failcount")
		ComponentcountColumn = mysql.IntegerColumn("componentcount")
		SalvagecountColumn   = mysql.IntegerColumn("salvagecount")
		IscontainerColumn    = mysql.BoolColumn("iscontainer")
		allColumns           = mysql.ColumnList{IDColumn, RecipeIDColumn, ItemIDColumn, SuccesscountColumn, FailcountColumn, ComponentcountColumn, SalvagecountColumn, IscontainerColumn}
		mutableColumns       = mysql.ColumnList{RecipeIDColumn, ItemIDColumn, SuccesscountColumn, FailcountColumn, ComponentcountColumn, SalvagecountColumn, IscontainerColumn}
		defaultColumns       = mysql.ColumnList{RecipeIDColumn, ItemIDColumn, SuccesscountColumn, FailcountColumn, ComponentcountColumn, SalvagecountColumn, IscontainerColumn}
	)

	return tradeskillRecipeEntriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		RecipeID:       RecipeIDColumn,
		ItemID:         ItemIDColumn,
		Successcount:   SuccesscountColumn,
		Failcount:      FailcountColumn,
		Componentcount: ComponentcountColumn,
		Salvagecount:   SalvagecountColumn,
		Iscontainer:    IscontainerColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
