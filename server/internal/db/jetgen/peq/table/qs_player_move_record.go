//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var QsPlayerMoveRecord = newQsPlayerMoveRecordTable("peq", "qs_player_move_record", "")

type qsPlayerMoveRecordTable struct {
	mysql.Table

	// Columns
	MoveID     mysql.ColumnInteger
	Time       mysql.ColumnTimestamp
	CharID     mysql.ColumnInteger
	FromSlot   mysql.ColumnInteger
	ToSlot     mysql.ColumnInteger
	StackSize  mysql.ColumnInteger
	CharItems  mysql.ColumnInteger
	Postaction mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type QsPlayerMoveRecordTable struct {
	qsPlayerMoveRecordTable

	NEW qsPlayerMoveRecordTable
}

// AS creates new QsPlayerMoveRecordTable with assigned alias
func (a QsPlayerMoveRecordTable) AS(alias string) *QsPlayerMoveRecordTable {
	return newQsPlayerMoveRecordTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QsPlayerMoveRecordTable with assigned schema name
func (a QsPlayerMoveRecordTable) FromSchema(schemaName string) *QsPlayerMoveRecordTable {
	return newQsPlayerMoveRecordTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QsPlayerMoveRecordTable with assigned table prefix
func (a QsPlayerMoveRecordTable) WithPrefix(prefix string) *QsPlayerMoveRecordTable {
	return newQsPlayerMoveRecordTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QsPlayerMoveRecordTable with assigned table suffix
func (a QsPlayerMoveRecordTable) WithSuffix(suffix string) *QsPlayerMoveRecordTable {
	return newQsPlayerMoveRecordTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQsPlayerMoveRecordTable(schemaName, tableName, alias string) *QsPlayerMoveRecordTable {
	return &QsPlayerMoveRecordTable{
		qsPlayerMoveRecordTable: newQsPlayerMoveRecordTableImpl(schemaName, tableName, alias),
		NEW:                     newQsPlayerMoveRecordTableImpl("", "new", ""),
	}
}

func newQsPlayerMoveRecordTableImpl(schemaName, tableName, alias string) qsPlayerMoveRecordTable {
	var (
		MoveIDColumn     = mysql.IntegerColumn("move_id")
		TimeColumn       = mysql.TimestampColumn("time")
		CharIDColumn     = mysql.IntegerColumn("char_id")
		FromSlotColumn   = mysql.IntegerColumn("from_slot")
		ToSlotColumn     = mysql.IntegerColumn("to_slot")
		StackSizeColumn  = mysql.IntegerColumn("stack_size")
		CharItemsColumn  = mysql.IntegerColumn("char_items")
		PostactionColumn = mysql.BoolColumn("postaction")
		allColumns       = mysql.ColumnList{MoveIDColumn, TimeColumn, CharIDColumn, FromSlotColumn, ToSlotColumn, StackSizeColumn, CharItemsColumn, PostactionColumn}
		mutableColumns   = mysql.ColumnList{TimeColumn, CharIDColumn, FromSlotColumn, ToSlotColumn, StackSizeColumn, CharItemsColumn, PostactionColumn}
		defaultColumns   = mysql.ColumnList{CharIDColumn, FromSlotColumn, ToSlotColumn, StackSizeColumn, CharItemsColumn, PostactionColumn}
	)

	return qsPlayerMoveRecordTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		MoveID:     MoveIDColumn,
		Time:       TimeColumn,
		CharID:     CharIDColumn,
		FromSlot:   FromSlotColumn,
		ToSlot:     ToSlotColumn,
		StackSize:  StackSizeColumn,
		CharItems:  CharItemsColumn,
		Postaction: PostactionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
