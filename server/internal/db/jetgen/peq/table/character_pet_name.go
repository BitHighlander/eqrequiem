//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterPetName = newCharacterPetNameTable("peq", "character_pet_name", "")

type characterPetNameTable struct {
	mysql.Table

	// Columns
	CharacterID mysql.ColumnInteger
	Name        mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterPetNameTable struct {
	characterPetNameTable

	NEW characterPetNameTable
}

// AS creates new CharacterPetNameTable with assigned alias
func (a CharacterPetNameTable) AS(alias string) *CharacterPetNameTable {
	return newCharacterPetNameTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterPetNameTable with assigned schema name
func (a CharacterPetNameTable) FromSchema(schemaName string) *CharacterPetNameTable {
	return newCharacterPetNameTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterPetNameTable with assigned table prefix
func (a CharacterPetNameTable) WithPrefix(prefix string) *CharacterPetNameTable {
	return newCharacterPetNameTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterPetNameTable with assigned table suffix
func (a CharacterPetNameTable) WithSuffix(suffix string) *CharacterPetNameTable {
	return newCharacterPetNameTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterPetNameTable(schemaName, tableName, alias string) *CharacterPetNameTable {
	return &CharacterPetNameTable{
		characterPetNameTable: newCharacterPetNameTableImpl(schemaName, tableName, alias),
		NEW:                   newCharacterPetNameTableImpl("", "new", ""),
	}
}

func newCharacterPetNameTableImpl(schemaName, tableName, alias string) characterPetNameTable {
	var (
		CharacterIDColumn = mysql.IntegerColumn("character_id")
		NameColumn        = mysql.StringColumn("name")
		allColumns        = mysql.ColumnList{CharacterIDColumn, NameColumn}
		mutableColumns    = mysql.ColumnList{NameColumn}
		defaultColumns    = mysql.ColumnList{}
	)

	return characterPetNameTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CharacterID: CharacterIDColumn,
		Name:        NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
