//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LoginServerAdmins = newLoginServerAdminsTable("peq", "login_server_admins", "")

type loginServerAdminsTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnInteger
	AccountName           mysql.ColumnString
	AccountPassword       mysql.ColumnString
	FirstName             mysql.ColumnString
	LastName              mysql.ColumnString
	Email                 mysql.ColumnString
	RegistrationDate      mysql.ColumnTimestamp
	RegistrationIPAddress mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type LoginServerAdminsTable struct {
	loginServerAdminsTable

	NEW loginServerAdminsTable
}

// AS creates new LoginServerAdminsTable with assigned alias
func (a LoginServerAdminsTable) AS(alias string) *LoginServerAdminsTable {
	return newLoginServerAdminsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoginServerAdminsTable with assigned schema name
func (a LoginServerAdminsTable) FromSchema(schemaName string) *LoginServerAdminsTable {
	return newLoginServerAdminsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoginServerAdminsTable with assigned table prefix
func (a LoginServerAdminsTable) WithPrefix(prefix string) *LoginServerAdminsTable {
	return newLoginServerAdminsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoginServerAdminsTable with assigned table suffix
func (a LoginServerAdminsTable) WithSuffix(suffix string) *LoginServerAdminsTable {
	return newLoginServerAdminsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoginServerAdminsTable(schemaName, tableName, alias string) *LoginServerAdminsTable {
	return &LoginServerAdminsTable{
		loginServerAdminsTable: newLoginServerAdminsTableImpl(schemaName, tableName, alias),
		NEW:                    newLoginServerAdminsTableImpl("", "new", ""),
	}
}

func newLoginServerAdminsTableImpl(schemaName, tableName, alias string) loginServerAdminsTable {
	var (
		IDColumn                    = mysql.IntegerColumn("id")
		AccountNameColumn           = mysql.StringColumn("account_name")
		AccountPasswordColumn       = mysql.StringColumn("account_password")
		FirstNameColumn             = mysql.StringColumn("first_name")
		LastNameColumn              = mysql.StringColumn("last_name")
		EmailColumn                 = mysql.StringColumn("email")
		RegistrationDateColumn      = mysql.TimestampColumn("registration_date")
		RegistrationIPAddressColumn = mysql.StringColumn("registration_ip_address")
		allColumns                  = mysql.ColumnList{IDColumn, AccountNameColumn, AccountPasswordColumn, FirstNameColumn, LastNameColumn, EmailColumn, RegistrationDateColumn, RegistrationIPAddressColumn}
		mutableColumns              = mysql.ColumnList{AccountNameColumn, AccountPasswordColumn, FirstNameColumn, LastNameColumn, EmailColumn, RegistrationDateColumn, RegistrationIPAddressColumn}
		defaultColumns              = mysql.ColumnList{}
	)

	return loginServerAdminsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		AccountName:           AccountNameColumn,
		AccountPassword:       AccountPasswordColumn,
		FirstName:             FirstNameColumn,
		LastName:              LastNameColumn,
		Email:                 EmailColumn,
		RegistrationDate:      RegistrationDateColumn,
		RegistrationIPAddress: RegistrationIPAddressColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
