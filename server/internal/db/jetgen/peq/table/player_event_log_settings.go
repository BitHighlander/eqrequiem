//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PlayerEventLogSettings = newPlayerEventLogSettingsTable("peq", "player_event_log_settings", "")

type playerEventLogSettingsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnInteger
	EventName        mysql.ColumnString
	EventEnabled     mysql.ColumnBool
	RetentionDays    mysql.ColumnInteger
	DiscordWebhookID mysql.ColumnInteger
	EtlEnabled       mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PlayerEventLogSettingsTable struct {
	playerEventLogSettingsTable

	NEW playerEventLogSettingsTable
}

// AS creates new PlayerEventLogSettingsTable with assigned alias
func (a PlayerEventLogSettingsTable) AS(alias string) *PlayerEventLogSettingsTable {
	return newPlayerEventLogSettingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlayerEventLogSettingsTable with assigned schema name
func (a PlayerEventLogSettingsTable) FromSchema(schemaName string) *PlayerEventLogSettingsTable {
	return newPlayerEventLogSettingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlayerEventLogSettingsTable with assigned table prefix
func (a PlayerEventLogSettingsTable) WithPrefix(prefix string) *PlayerEventLogSettingsTable {
	return newPlayerEventLogSettingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlayerEventLogSettingsTable with assigned table suffix
func (a PlayerEventLogSettingsTable) WithSuffix(suffix string) *PlayerEventLogSettingsTable {
	return newPlayerEventLogSettingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlayerEventLogSettingsTable(schemaName, tableName, alias string) *PlayerEventLogSettingsTable {
	return &PlayerEventLogSettingsTable{
		playerEventLogSettingsTable: newPlayerEventLogSettingsTableImpl(schemaName, tableName, alias),
		NEW:                         newPlayerEventLogSettingsTableImpl("", "new", ""),
	}
}

func newPlayerEventLogSettingsTableImpl(schemaName, tableName, alias string) playerEventLogSettingsTable {
	var (
		IDColumn               = mysql.IntegerColumn("id")
		EventNameColumn        = mysql.StringColumn("event_name")
		EventEnabledColumn     = mysql.BoolColumn("event_enabled")
		RetentionDaysColumn    = mysql.IntegerColumn("retention_days")
		DiscordWebhookIDColumn = mysql.IntegerColumn("discord_webhook_id")
		EtlEnabledColumn       = mysql.IntegerColumn("etl_enabled")
		allColumns             = mysql.ColumnList{IDColumn, EventNameColumn, EventEnabledColumn, RetentionDaysColumn, DiscordWebhookIDColumn, EtlEnabledColumn}
		mutableColumns         = mysql.ColumnList{EventNameColumn, EventEnabledColumn, RetentionDaysColumn, DiscordWebhookIDColumn, EtlEnabledColumn}
		defaultColumns         = mysql.ColumnList{RetentionDaysColumn, DiscordWebhookIDColumn, EtlEnabledColumn}
	)

	return playerEventLogSettingsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		EventName:        EventNameColumn,
		EventEnabled:     EventEnabledColumn,
		RetentionDays:    RetentionDaysColumn,
		DiscordWebhookID: DiscordWebhookIDColumn,
		EtlEnabled:       EtlEnabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
