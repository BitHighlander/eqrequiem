//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterBind = newCharacterBindTable("peq", "character_bind", "")

type characterBindTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	Slot       mysql.ColumnInteger
	ZoneID     mysql.ColumnInteger
	InstanceID mysql.ColumnInteger
	X          mysql.ColumnFloat
	Y          mysql.ColumnFloat
	Z          mysql.ColumnFloat
	Heading    mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterBindTable struct {
	characterBindTable

	NEW characterBindTable
}

// AS creates new CharacterBindTable with assigned alias
func (a CharacterBindTable) AS(alias string) *CharacterBindTable {
	return newCharacterBindTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterBindTable with assigned schema name
func (a CharacterBindTable) FromSchema(schemaName string) *CharacterBindTable {
	return newCharacterBindTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterBindTable with assigned table prefix
func (a CharacterBindTable) WithPrefix(prefix string) *CharacterBindTable {
	return newCharacterBindTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterBindTable with assigned table suffix
func (a CharacterBindTable) WithSuffix(suffix string) *CharacterBindTable {
	return newCharacterBindTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterBindTable(schemaName, tableName, alias string) *CharacterBindTable {
	return &CharacterBindTable{
		characterBindTable: newCharacterBindTableImpl(schemaName, tableName, alias),
		NEW:                newCharacterBindTableImpl("", "new", ""),
	}
}

func newCharacterBindTableImpl(schemaName, tableName, alias string) characterBindTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		SlotColumn       = mysql.IntegerColumn("slot")
		ZoneIDColumn     = mysql.IntegerColumn("zone_id")
		InstanceIDColumn = mysql.IntegerColumn("instance_id")
		XColumn          = mysql.FloatColumn("x")
		YColumn          = mysql.FloatColumn("y")
		ZColumn          = mysql.FloatColumn("z")
		HeadingColumn    = mysql.FloatColumn("heading")
		allColumns       = mysql.ColumnList{IDColumn, SlotColumn, ZoneIDColumn, InstanceIDColumn, XColumn, YColumn, ZColumn, HeadingColumn}
		mutableColumns   = mysql.ColumnList{ZoneIDColumn, InstanceIDColumn, XColumn, YColumn, ZColumn, HeadingColumn}
		defaultColumns   = mysql.ColumnList{SlotColumn, ZoneIDColumn, InstanceIDColumn, XColumn, YColumn, ZColumn, HeadingColumn}
	)

	return characterBindTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Slot:       SlotColumn,
		ZoneID:     ZoneIDColumn,
		InstanceID: InstanceIDColumn,
		X:          XColumn,
		Y:          YColumn,
		Z:          ZColumn,
		Heading:    HeadingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
