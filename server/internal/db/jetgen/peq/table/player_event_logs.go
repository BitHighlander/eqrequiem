//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PlayerEventLogs = newPlayerEventLogsTable("peq", "player_event_logs", "")

type playerEventLogsTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	AccountID     mysql.ColumnInteger
	CharacterID   mysql.ColumnInteger
	ZoneID        mysql.ColumnInteger
	InstanceID    mysql.ColumnInteger
	X             mysql.ColumnFloat
	Y             mysql.ColumnFloat
	Z             mysql.ColumnFloat
	Heading       mysql.ColumnFloat
	EventTypeID   mysql.ColumnInteger
	EventTypeName mysql.ColumnString
	EventData     mysql.ColumnString
	EtlTableID    mysql.ColumnInteger
	CreatedAt     mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PlayerEventLogsTable struct {
	playerEventLogsTable

	NEW playerEventLogsTable
}

// AS creates new PlayerEventLogsTable with assigned alias
func (a PlayerEventLogsTable) AS(alias string) *PlayerEventLogsTable {
	return newPlayerEventLogsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlayerEventLogsTable with assigned schema name
func (a PlayerEventLogsTable) FromSchema(schemaName string) *PlayerEventLogsTable {
	return newPlayerEventLogsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlayerEventLogsTable with assigned table prefix
func (a PlayerEventLogsTable) WithPrefix(prefix string) *PlayerEventLogsTable {
	return newPlayerEventLogsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlayerEventLogsTable with assigned table suffix
func (a PlayerEventLogsTable) WithSuffix(suffix string) *PlayerEventLogsTable {
	return newPlayerEventLogsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlayerEventLogsTable(schemaName, tableName, alias string) *PlayerEventLogsTable {
	return &PlayerEventLogsTable{
		playerEventLogsTable: newPlayerEventLogsTableImpl(schemaName, tableName, alias),
		NEW:                  newPlayerEventLogsTableImpl("", "new", ""),
	}
}

func newPlayerEventLogsTableImpl(schemaName, tableName, alias string) playerEventLogsTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		AccountIDColumn     = mysql.IntegerColumn("account_id")
		CharacterIDColumn   = mysql.IntegerColumn("character_id")
		ZoneIDColumn        = mysql.IntegerColumn("zone_id")
		InstanceIDColumn    = mysql.IntegerColumn("instance_id")
		XColumn             = mysql.FloatColumn("x")
		YColumn             = mysql.FloatColumn("y")
		ZColumn             = mysql.FloatColumn("z")
		HeadingColumn       = mysql.FloatColumn("heading")
		EventTypeIDColumn   = mysql.IntegerColumn("event_type_id")
		EventTypeNameColumn = mysql.StringColumn("event_type_name")
		EventDataColumn     = mysql.StringColumn("event_data")
		EtlTableIDColumn    = mysql.IntegerColumn("etl_table_id")
		CreatedAtColumn     = mysql.TimestampColumn("created_at")
		allColumns          = mysql.ColumnList{IDColumn, AccountIDColumn, CharacterIDColumn, ZoneIDColumn, InstanceIDColumn, XColumn, YColumn, ZColumn, HeadingColumn, EventTypeIDColumn, EventTypeNameColumn, EventDataColumn, EtlTableIDColumn, CreatedAtColumn}
		mutableColumns      = mysql.ColumnList{AccountIDColumn, CharacterIDColumn, ZoneIDColumn, InstanceIDColumn, XColumn, YColumn, ZColumn, HeadingColumn, EventTypeIDColumn, EventTypeNameColumn, EventDataColumn, EtlTableIDColumn, CreatedAtColumn}
		defaultColumns      = mysql.ColumnList{EtlTableIDColumn}
	)

	return playerEventLogsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		AccountID:     AccountIDColumn,
		CharacterID:   CharacterIDColumn,
		ZoneID:        ZoneIDColumn,
		InstanceID:    InstanceIDColumn,
		X:             XColumn,
		Y:             YColumn,
		Z:             ZColumn,
		Heading:       HeadingColumn,
		EventTypeID:   EventTypeIDColumn,
		EventTypeName: EventTypeNameColumn,
		EventData:     EventDataColumn,
		EtlTableID:    EtlTableIDColumn,
		CreatedAt:     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
