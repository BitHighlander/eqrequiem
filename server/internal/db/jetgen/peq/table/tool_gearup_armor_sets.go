//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ToolGearupArmorSets = newToolGearupArmorSetsTable("peq", "tool_gearup_armor_sets", "")

type toolGearupArmorSetsTable struct {
	mysql.Table

	// Columns
	Class     mysql.ColumnInteger
	Level     mysql.ColumnInteger
	Slot      mysql.ColumnInteger
	ItemID    mysql.ColumnInteger
	Score     mysql.ColumnInteger
	Expansion mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ToolGearupArmorSetsTable struct {
	toolGearupArmorSetsTable

	NEW toolGearupArmorSetsTable
}

// AS creates new ToolGearupArmorSetsTable with assigned alias
func (a ToolGearupArmorSetsTable) AS(alias string) *ToolGearupArmorSetsTable {
	return newToolGearupArmorSetsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ToolGearupArmorSetsTable with assigned schema name
func (a ToolGearupArmorSetsTable) FromSchema(schemaName string) *ToolGearupArmorSetsTable {
	return newToolGearupArmorSetsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ToolGearupArmorSetsTable with assigned table prefix
func (a ToolGearupArmorSetsTable) WithPrefix(prefix string) *ToolGearupArmorSetsTable {
	return newToolGearupArmorSetsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ToolGearupArmorSetsTable with assigned table suffix
func (a ToolGearupArmorSetsTable) WithSuffix(suffix string) *ToolGearupArmorSetsTable {
	return newToolGearupArmorSetsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newToolGearupArmorSetsTable(schemaName, tableName, alias string) *ToolGearupArmorSetsTable {
	return &ToolGearupArmorSetsTable{
		toolGearupArmorSetsTable: newToolGearupArmorSetsTableImpl(schemaName, tableName, alias),
		NEW:                      newToolGearupArmorSetsTableImpl("", "new", ""),
	}
}

func newToolGearupArmorSetsTableImpl(schemaName, tableName, alias string) toolGearupArmorSetsTable {
	var (
		ClassColumn     = mysql.IntegerColumn("class")
		LevelColumn     = mysql.IntegerColumn("level")
		SlotColumn      = mysql.IntegerColumn("slot")
		ItemIDColumn    = mysql.IntegerColumn("item_id")
		ScoreColumn     = mysql.IntegerColumn("score")
		ExpansionColumn = mysql.IntegerColumn("expansion")
		allColumns      = mysql.ColumnList{ClassColumn, LevelColumn, SlotColumn, ItemIDColumn, ScoreColumn, ExpansionColumn}
		mutableColumns  = mysql.ColumnList{ClassColumn, LevelColumn, SlotColumn, ItemIDColumn, ScoreColumn, ExpansionColumn}
		defaultColumns  = mysql.ColumnList{}
	)

	return toolGearupArmorSetsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Class:     ClassColumn,
		Level:     LevelColumn,
		Slot:      SlotColumn,
		ItemID:    ItemIDColumn,
		Score:     ScoreColumn,
		Expansion: ExpansionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
