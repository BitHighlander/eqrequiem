//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Reports = newReportsTable("peq", "reports", "")

type reportsTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	Name         mysql.ColumnString
	Reported     mysql.ColumnString
	ReportedText mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ReportsTable struct {
	reportsTable

	NEW reportsTable
}

// AS creates new ReportsTable with assigned alias
func (a ReportsTable) AS(alias string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReportsTable with assigned schema name
func (a ReportsTable) FromSchema(schemaName string) *ReportsTable {
	return newReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReportsTable with assigned table prefix
func (a ReportsTable) WithPrefix(prefix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReportsTable with assigned table suffix
func (a ReportsTable) WithSuffix(suffix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReportsTable(schemaName, tableName, alias string) *ReportsTable {
	return &ReportsTable{
		reportsTable: newReportsTableImpl(schemaName, tableName, alias),
		NEW:          newReportsTableImpl("", "new", ""),
	}
}

func newReportsTableImpl(schemaName, tableName, alias string) reportsTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		NameColumn         = mysql.StringColumn("name")
		ReportedColumn     = mysql.StringColumn("reported")
		ReportedTextColumn = mysql.StringColumn("reported_text")
		allColumns         = mysql.ColumnList{IDColumn, NameColumn, ReportedColumn, ReportedTextColumn}
		mutableColumns     = mysql.ColumnList{NameColumn, ReportedColumn, ReportedTextColumn}
		defaultColumns     = mysql.ColumnList{}
	)

	return reportsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Reported:     ReportedColumn,
		ReportedText: ReportedTextColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
