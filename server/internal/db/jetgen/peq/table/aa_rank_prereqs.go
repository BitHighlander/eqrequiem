//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AaRankPrereqs = newAaRankPrereqsTable("peq", "aa_rank_prereqs", "")

type aaRankPrereqsTable struct {
	mysql.Table

	// Columns
	RankID mysql.ColumnInteger
	AaID   mysql.ColumnInteger
	Points mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AaRankPrereqsTable struct {
	aaRankPrereqsTable

	NEW aaRankPrereqsTable
}

// AS creates new AaRankPrereqsTable with assigned alias
func (a AaRankPrereqsTable) AS(alias string) *AaRankPrereqsTable {
	return newAaRankPrereqsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AaRankPrereqsTable with assigned schema name
func (a AaRankPrereqsTable) FromSchema(schemaName string) *AaRankPrereqsTable {
	return newAaRankPrereqsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AaRankPrereqsTable with assigned table prefix
func (a AaRankPrereqsTable) WithPrefix(prefix string) *AaRankPrereqsTable {
	return newAaRankPrereqsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AaRankPrereqsTable with assigned table suffix
func (a AaRankPrereqsTable) WithSuffix(suffix string) *AaRankPrereqsTable {
	return newAaRankPrereqsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAaRankPrereqsTable(schemaName, tableName, alias string) *AaRankPrereqsTable {
	return &AaRankPrereqsTable{
		aaRankPrereqsTable: newAaRankPrereqsTableImpl(schemaName, tableName, alias),
		NEW:                newAaRankPrereqsTableImpl("", "new", ""),
	}
}

func newAaRankPrereqsTableImpl(schemaName, tableName, alias string) aaRankPrereqsTable {
	var (
		RankIDColumn   = mysql.IntegerColumn("rank_id")
		AaIDColumn     = mysql.IntegerColumn("aa_id")
		PointsColumn   = mysql.IntegerColumn("points")
		allColumns     = mysql.ColumnList{RankIDColumn, AaIDColumn, PointsColumn}
		mutableColumns = mysql.ColumnList{PointsColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return aaRankPrereqsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		RankID: RankIDColumn,
		AaID:   AaIDColumn,
		Points: PointsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
