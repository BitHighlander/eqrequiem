//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PetsEquipmentset = newPetsEquipmentsetTable("peq", "pets_equipmentset", "")

type petsEquipmentsetTable struct {
	mysql.Table

	// Columns
	SetID     mysql.ColumnInteger
	Setname   mysql.ColumnString
	NestedSet mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PetsEquipmentsetTable struct {
	petsEquipmentsetTable

	NEW petsEquipmentsetTable
}

// AS creates new PetsEquipmentsetTable with assigned alias
func (a PetsEquipmentsetTable) AS(alias string) *PetsEquipmentsetTable {
	return newPetsEquipmentsetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PetsEquipmentsetTable with assigned schema name
func (a PetsEquipmentsetTable) FromSchema(schemaName string) *PetsEquipmentsetTable {
	return newPetsEquipmentsetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PetsEquipmentsetTable with assigned table prefix
func (a PetsEquipmentsetTable) WithPrefix(prefix string) *PetsEquipmentsetTable {
	return newPetsEquipmentsetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PetsEquipmentsetTable with assigned table suffix
func (a PetsEquipmentsetTable) WithSuffix(suffix string) *PetsEquipmentsetTable {
	return newPetsEquipmentsetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPetsEquipmentsetTable(schemaName, tableName, alias string) *PetsEquipmentsetTable {
	return &PetsEquipmentsetTable{
		petsEquipmentsetTable: newPetsEquipmentsetTableImpl(schemaName, tableName, alias),
		NEW:                   newPetsEquipmentsetTableImpl("", "new", ""),
	}
}

func newPetsEquipmentsetTableImpl(schemaName, tableName, alias string) petsEquipmentsetTable {
	var (
		SetIDColumn     = mysql.IntegerColumn("set_id")
		SetnameColumn   = mysql.StringColumn("setname")
		NestedSetColumn = mysql.IntegerColumn("nested_set")
		allColumns      = mysql.ColumnList{SetIDColumn, SetnameColumn, NestedSetColumn}
		mutableColumns  = mysql.ColumnList{SetnameColumn, NestedSetColumn}
		defaultColumns  = mysql.ColumnList{SetnameColumn, NestedSetColumn}
	)

	return petsEquipmentsetTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SetID:     SetIDColumn,
		Setname:   SetnameColumn,
		NestedSet: NestedSetColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
