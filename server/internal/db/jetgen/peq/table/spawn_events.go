//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpawnEvents = newSpawnEventsTable("peq", "spawn_events", "")

type spawnEventsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	Zone       mysql.ColumnString
	CondID     mysql.ColumnInteger
	Name       mysql.ColumnString
	Period     mysql.ColumnInteger
	NextMinute mysql.ColumnInteger
	NextHour   mysql.ColumnInteger
	NextDay    mysql.ColumnInteger
	NextMonth  mysql.ColumnInteger
	NextYear   mysql.ColumnInteger
	Enabled    mysql.ColumnInteger
	Action     mysql.ColumnInteger
	Argument   mysql.ColumnInteger
	Strict     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpawnEventsTable struct {
	spawnEventsTable

	NEW spawnEventsTable
}

// AS creates new SpawnEventsTable with assigned alias
func (a SpawnEventsTable) AS(alias string) *SpawnEventsTable {
	return newSpawnEventsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpawnEventsTable with assigned schema name
func (a SpawnEventsTable) FromSchema(schemaName string) *SpawnEventsTable {
	return newSpawnEventsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpawnEventsTable with assigned table prefix
func (a SpawnEventsTable) WithPrefix(prefix string) *SpawnEventsTable {
	return newSpawnEventsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpawnEventsTable with assigned table suffix
func (a SpawnEventsTable) WithSuffix(suffix string) *SpawnEventsTable {
	return newSpawnEventsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpawnEventsTable(schemaName, tableName, alias string) *SpawnEventsTable {
	return &SpawnEventsTable{
		spawnEventsTable: newSpawnEventsTableImpl(schemaName, tableName, alias),
		NEW:              newSpawnEventsTableImpl("", "new", ""),
	}
}

func newSpawnEventsTableImpl(schemaName, tableName, alias string) spawnEventsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		ZoneColumn       = mysql.StringColumn("zone")
		CondIDColumn     = mysql.IntegerColumn("cond_id")
		NameColumn       = mysql.StringColumn("name")
		PeriodColumn     = mysql.IntegerColumn("period")
		NextMinuteColumn = mysql.IntegerColumn("next_minute")
		NextHourColumn   = mysql.IntegerColumn("next_hour")
		NextDayColumn    = mysql.IntegerColumn("next_day")
		NextMonthColumn  = mysql.IntegerColumn("next_month")
		NextYearColumn   = mysql.IntegerColumn("next_year")
		EnabledColumn    = mysql.IntegerColumn("enabled")
		ActionColumn     = mysql.IntegerColumn("action")
		ArgumentColumn   = mysql.IntegerColumn("argument")
		StrictColumn     = mysql.IntegerColumn("strict")
		allColumns       = mysql.ColumnList{IDColumn, ZoneColumn, CondIDColumn, NameColumn, PeriodColumn, NextMinuteColumn, NextHourColumn, NextDayColumn, NextMonthColumn, NextYearColumn, EnabledColumn, ActionColumn, ArgumentColumn, StrictColumn}
		mutableColumns   = mysql.ColumnList{ZoneColumn, CondIDColumn, NameColumn, PeriodColumn, NextMinuteColumn, NextHourColumn, NextDayColumn, NextMonthColumn, NextYearColumn, EnabledColumn, ActionColumn, ArgumentColumn, StrictColumn}
		defaultColumns   = mysql.ColumnList{CondIDColumn, NameColumn, PeriodColumn, NextMinuteColumn, NextHourColumn, NextDayColumn, NextMonthColumn, NextYearColumn, EnabledColumn, ActionColumn, ArgumentColumn, StrictColumn}
	)

	return spawnEventsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Zone:       ZoneColumn,
		CondID:     CondIDColumn,
		Name:       NameColumn,
		Period:     PeriodColumn,
		NextMinute: NextMinuteColumn,
		NextHour:   NextHourColumn,
		NextDay:    NextDayColumn,
		NextMonth:  NextMonthColumn,
		NextYear:   NextYearColumn,
		Enabled:    EnabledColumn,
		Action:     ActionColumn,
		Argument:   ArgumentColumn,
		Strict:     StrictColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
