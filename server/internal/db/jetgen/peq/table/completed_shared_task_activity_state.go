//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CompletedSharedTaskActivityState = newCompletedSharedTaskActivityStateTable("peq", "completed_shared_task_activity_state", "")

type completedSharedTaskActivityStateTable struct {
	mysql.Table

	// Columns
	SharedTaskID  mysql.ColumnInteger
	ActivityID    mysql.ColumnInteger
	DoneCount     mysql.ColumnInteger
	UpdatedTime   mysql.ColumnTimestamp
	CompletedTime mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CompletedSharedTaskActivityStateTable struct {
	completedSharedTaskActivityStateTable

	NEW completedSharedTaskActivityStateTable
}

// AS creates new CompletedSharedTaskActivityStateTable with assigned alias
func (a CompletedSharedTaskActivityStateTable) AS(alias string) *CompletedSharedTaskActivityStateTable {
	return newCompletedSharedTaskActivityStateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CompletedSharedTaskActivityStateTable with assigned schema name
func (a CompletedSharedTaskActivityStateTable) FromSchema(schemaName string) *CompletedSharedTaskActivityStateTable {
	return newCompletedSharedTaskActivityStateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CompletedSharedTaskActivityStateTable with assigned table prefix
func (a CompletedSharedTaskActivityStateTable) WithPrefix(prefix string) *CompletedSharedTaskActivityStateTable {
	return newCompletedSharedTaskActivityStateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CompletedSharedTaskActivityStateTable with assigned table suffix
func (a CompletedSharedTaskActivityStateTable) WithSuffix(suffix string) *CompletedSharedTaskActivityStateTable {
	return newCompletedSharedTaskActivityStateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCompletedSharedTaskActivityStateTable(schemaName, tableName, alias string) *CompletedSharedTaskActivityStateTable {
	return &CompletedSharedTaskActivityStateTable{
		completedSharedTaskActivityStateTable: newCompletedSharedTaskActivityStateTableImpl(schemaName, tableName, alias),
		NEW:                                   newCompletedSharedTaskActivityStateTableImpl("", "new", ""),
	}
}

func newCompletedSharedTaskActivityStateTableImpl(schemaName, tableName, alias string) completedSharedTaskActivityStateTable {
	var (
		SharedTaskIDColumn  = mysql.IntegerColumn("shared_task_id")
		ActivityIDColumn    = mysql.IntegerColumn("activity_id")
		DoneCountColumn     = mysql.IntegerColumn("done_count")
		UpdatedTimeColumn   = mysql.TimestampColumn("updated_time")
		CompletedTimeColumn = mysql.TimestampColumn("completed_time")
		allColumns          = mysql.ColumnList{SharedTaskIDColumn, ActivityIDColumn, DoneCountColumn, UpdatedTimeColumn, CompletedTimeColumn}
		mutableColumns      = mysql.ColumnList{DoneCountColumn, UpdatedTimeColumn, CompletedTimeColumn}
		defaultColumns      = mysql.ColumnList{}
	)

	return completedSharedTaskActivityStateTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SharedTaskID:  SharedTaskIDColumn,
		ActivityID:    ActivityIDColumn,
		DoneCount:     DoneCountColumn,
		UpdatedTime:   UpdatedTimeColumn,
		CompletedTime: CompletedTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
