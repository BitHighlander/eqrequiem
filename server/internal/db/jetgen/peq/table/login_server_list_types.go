//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LoginServerListTypes = newLoginServerListTypesTable("peq", "login_server_list_types", "")

type loginServerListTypesTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	Description mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type LoginServerListTypesTable struct {
	loginServerListTypesTable

	NEW loginServerListTypesTable
}

// AS creates new LoginServerListTypesTable with assigned alias
func (a LoginServerListTypesTable) AS(alias string) *LoginServerListTypesTable {
	return newLoginServerListTypesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoginServerListTypesTable with assigned schema name
func (a LoginServerListTypesTable) FromSchema(schemaName string) *LoginServerListTypesTable {
	return newLoginServerListTypesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoginServerListTypesTable with assigned table prefix
func (a LoginServerListTypesTable) WithPrefix(prefix string) *LoginServerListTypesTable {
	return newLoginServerListTypesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoginServerListTypesTable with assigned table suffix
func (a LoginServerListTypesTable) WithSuffix(suffix string) *LoginServerListTypesTable {
	return newLoginServerListTypesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoginServerListTypesTable(schemaName, tableName, alias string) *LoginServerListTypesTable {
	return &LoginServerListTypesTable{
		loginServerListTypesTable: newLoginServerListTypesTableImpl(schemaName, tableName, alias),
		NEW:                       newLoginServerListTypesTableImpl("", "new", ""),
	}
}

func newLoginServerListTypesTableImpl(schemaName, tableName, alias string) loginServerListTypesTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		DescriptionColumn = mysql.StringColumn("description")
		allColumns        = mysql.ColumnList{IDColumn, DescriptionColumn}
		mutableColumns    = mysql.ColumnList{DescriptionColumn}
		defaultColumns    = mysql.ColumnList{}
	)

	return loginServerListTypesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Description: DescriptionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
