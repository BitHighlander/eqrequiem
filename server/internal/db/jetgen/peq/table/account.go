//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Account = newAccountTable("peq", "account", "")

type accountTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnInteger
	Name              mysql.ColumnString
	Charname          mysql.ColumnString
	AutoLoginCharname mysql.ColumnString
	Sharedplat        mysql.ColumnInteger
	Password          mysql.ColumnString
	Status            mysql.ColumnInteger
	LsID              mysql.ColumnString
	LsaccountID       mysql.ColumnInteger
	Gmspeed           mysql.ColumnInteger
	Invulnerable      mysql.ColumnInteger
	Flymode           mysql.ColumnInteger
	IgnoreTells       mysql.ColumnInteger
	Revoked           mysql.ColumnInteger
	Karma             mysql.ColumnInteger
	MiniloginIP       mysql.ColumnString
	Hideme            mysql.ColumnInteger
	Rulesflag         mysql.ColumnInteger
	Suspendeduntil    mysql.ColumnTimestamp
	TimeCreation      mysql.ColumnInteger
	BanReason         mysql.ColumnString
	SuspendReason     mysql.ColumnString
	CrcEqgame         mysql.ColumnString
	CrcSkillcaps      mysql.ColumnString
	CrcBasedata       mysql.ColumnString
	PrimaryAuth       mysql.ColumnInteger
	DiscordID         mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AccountTable struct {
	accountTable

	NEW accountTable
}

// AS creates new AccountTable with assigned alias
func (a AccountTable) AS(alias string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountTable with assigned schema name
func (a AccountTable) FromSchema(schemaName string) *AccountTable {
	return newAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountTable with assigned table prefix
func (a AccountTable) WithPrefix(prefix string) *AccountTable {
	return newAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountTable with assigned table suffix
func (a AccountTable) WithSuffix(suffix string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountTable(schemaName, tableName, alias string) *AccountTable {
	return &AccountTable{
		accountTable: newAccountTableImpl(schemaName, tableName, alias),
		NEW:          newAccountTableImpl("", "new", ""),
	}
}

func newAccountTableImpl(schemaName, tableName, alias string) accountTable {
	var (
		IDColumn                = mysql.IntegerColumn("id")
		NameColumn              = mysql.StringColumn("name")
		CharnameColumn          = mysql.StringColumn("charname")
		AutoLoginCharnameColumn = mysql.StringColumn("auto_login_charname")
		SharedplatColumn        = mysql.IntegerColumn("sharedplat")
		PasswordColumn          = mysql.StringColumn("password")
		StatusColumn            = mysql.IntegerColumn("status")
		LsIDColumn              = mysql.StringColumn("ls_id")
		LsaccountIDColumn       = mysql.IntegerColumn("lsaccount_id")
		GmspeedColumn           = mysql.IntegerColumn("gmspeed")
		InvulnerableColumn      = mysql.IntegerColumn("invulnerable")
		FlymodeColumn           = mysql.IntegerColumn("flymode")
		IgnoreTellsColumn       = mysql.IntegerColumn("ignore_tells")
		RevokedColumn           = mysql.IntegerColumn("revoked")
		KarmaColumn             = mysql.IntegerColumn("karma")
		MiniloginIPColumn       = mysql.StringColumn("minilogin_ip")
		HidemeColumn            = mysql.IntegerColumn("hideme")
		RulesflagColumn         = mysql.IntegerColumn("rulesflag")
		SuspendeduntilColumn    = mysql.TimestampColumn("suspendeduntil")
		TimeCreationColumn      = mysql.IntegerColumn("time_creation")
		BanReasonColumn         = mysql.StringColumn("ban_reason")
		SuspendReasonColumn     = mysql.StringColumn("suspend_reason")
		CrcEqgameColumn         = mysql.StringColumn("crc_eqgame")
		CrcSkillcapsColumn      = mysql.StringColumn("crc_skillcaps")
		CrcBasedataColumn       = mysql.StringColumn("crc_basedata")
		PrimaryAuthColumn       = mysql.IntegerColumn("primary_auth")
		DiscordIDColumn         = mysql.StringColumn("discord_id")
		allColumns              = mysql.ColumnList{IDColumn, NameColumn, CharnameColumn, AutoLoginCharnameColumn, SharedplatColumn, PasswordColumn, StatusColumn, LsIDColumn, LsaccountIDColumn, GmspeedColumn, InvulnerableColumn, FlymodeColumn, IgnoreTellsColumn, RevokedColumn, KarmaColumn, MiniloginIPColumn, HidemeColumn, RulesflagColumn, SuspendeduntilColumn, TimeCreationColumn, BanReasonColumn, SuspendReasonColumn, CrcEqgameColumn, CrcSkillcapsColumn, CrcBasedataColumn, PrimaryAuthColumn, DiscordIDColumn}
		mutableColumns          = mysql.ColumnList{NameColumn, CharnameColumn, AutoLoginCharnameColumn, SharedplatColumn, PasswordColumn, StatusColumn, LsIDColumn, LsaccountIDColumn, GmspeedColumn, InvulnerableColumn, FlymodeColumn, IgnoreTellsColumn, RevokedColumn, KarmaColumn, MiniloginIPColumn, HidemeColumn, RulesflagColumn, SuspendeduntilColumn, TimeCreationColumn, BanReasonColumn, SuspendReasonColumn, CrcEqgameColumn, CrcSkillcapsColumn, CrcBasedataColumn, PrimaryAuthColumn, DiscordIDColumn}
		defaultColumns          = mysql.ColumnList{NameColumn, CharnameColumn, AutoLoginCharnameColumn, SharedplatColumn, PasswordColumn, StatusColumn, LsIDColumn, GmspeedColumn, InvulnerableColumn, FlymodeColumn, IgnoreTellsColumn, RevokedColumn, KarmaColumn, MiniloginIPColumn, HidemeColumn, RulesflagColumn, TimeCreationColumn, PrimaryAuthColumn, DiscordIDColumn}
	)

	return accountTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Name:              NameColumn,
		Charname:          CharnameColumn,
		AutoLoginCharname: AutoLoginCharnameColumn,
		Sharedplat:        SharedplatColumn,
		Password:          PasswordColumn,
		Status:            StatusColumn,
		LsID:              LsIDColumn,
		LsaccountID:       LsaccountIDColumn,
		Gmspeed:           GmspeedColumn,
		Invulnerable:      InvulnerableColumn,
		Flymode:           FlymodeColumn,
		IgnoreTells:       IgnoreTellsColumn,
		Revoked:           RevokedColumn,
		Karma:             KarmaColumn,
		MiniloginIP:       MiniloginIPColumn,
		Hideme:            HidemeColumn,
		Rulesflag:         RulesflagColumn,
		Suspendeduntil:    SuspendeduntilColumn,
		TimeCreation:      TimeCreationColumn,
		BanReason:         BanReasonColumn,
		SuspendReason:     SuspendReasonColumn,
		CrcEqgame:         CrcEqgameColumn,
		CrcSkillcaps:      CrcSkillcapsColumn,
		CrcBasedata:       CrcBasedataColumn,
		PrimaryAuth:       PrimaryAuthColumn,
		DiscordID:         DiscordIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
