//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharCreateCombinations = newCharCreateCombinationsTable("peq", "char_create_combinations", "")

type charCreateCombinationsTable struct {
	mysql.Table

	// Columns
	AllocationID  mysql.ColumnInteger
	Race          mysql.ColumnInteger
	Class         mysql.ColumnInteger
	Deity         mysql.ColumnInteger
	StartZone     mysql.ColumnInteger
	ExpansionsReq mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharCreateCombinationsTable struct {
	charCreateCombinationsTable

	NEW charCreateCombinationsTable
}

// AS creates new CharCreateCombinationsTable with assigned alias
func (a CharCreateCombinationsTable) AS(alias string) *CharCreateCombinationsTable {
	return newCharCreateCombinationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharCreateCombinationsTable with assigned schema name
func (a CharCreateCombinationsTable) FromSchema(schemaName string) *CharCreateCombinationsTable {
	return newCharCreateCombinationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharCreateCombinationsTable with assigned table prefix
func (a CharCreateCombinationsTable) WithPrefix(prefix string) *CharCreateCombinationsTable {
	return newCharCreateCombinationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharCreateCombinationsTable with assigned table suffix
func (a CharCreateCombinationsTable) WithSuffix(suffix string) *CharCreateCombinationsTable {
	return newCharCreateCombinationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharCreateCombinationsTable(schemaName, tableName, alias string) *CharCreateCombinationsTable {
	return &CharCreateCombinationsTable{
		charCreateCombinationsTable: newCharCreateCombinationsTableImpl(schemaName, tableName, alias),
		NEW:                         newCharCreateCombinationsTableImpl("", "new", ""),
	}
}

func newCharCreateCombinationsTableImpl(schemaName, tableName, alias string) charCreateCombinationsTable {
	var (
		AllocationIDColumn  = mysql.IntegerColumn("allocation_id")
		RaceColumn          = mysql.IntegerColumn("race")
		ClassColumn         = mysql.IntegerColumn("class")
		DeityColumn         = mysql.IntegerColumn("deity")
		StartZoneColumn     = mysql.IntegerColumn("start_zone")
		ExpansionsReqColumn = mysql.IntegerColumn("expansions_req")
		allColumns          = mysql.ColumnList{AllocationIDColumn, RaceColumn, ClassColumn, DeityColumn, StartZoneColumn, ExpansionsReqColumn}
		mutableColumns      = mysql.ColumnList{AllocationIDColumn, ExpansionsReqColumn}
		defaultColumns      = mysql.ColumnList{ExpansionsReqColumn}
	)

	return charCreateCombinationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AllocationID:  AllocationIDColumn,
		Race:          RaceColumn,
		Class:         ClassColumn,
		Deity:         DeityColumn,
		StartZone:     StartZoneColumn,
		ExpansionsReq: ExpansionsReqColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
