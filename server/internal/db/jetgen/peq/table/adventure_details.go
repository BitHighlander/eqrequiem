//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AdventureDetails = newAdventureDetailsTable("peq", "adventure_details", "")

type adventureDetailsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnInteger
	AdventureID      mysql.ColumnInteger
	InstanceID       mysql.ColumnInteger
	Count            mysql.ColumnInteger
	AssassinateCount mysql.ColumnInteger
	Status           mysql.ColumnInteger
	TimeCreated      mysql.ColumnInteger
	TimeZoned        mysql.ColumnInteger
	TimeCompleted    mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AdventureDetailsTable struct {
	adventureDetailsTable

	NEW adventureDetailsTable
}

// AS creates new AdventureDetailsTable with assigned alias
func (a AdventureDetailsTable) AS(alias string) *AdventureDetailsTable {
	return newAdventureDetailsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AdventureDetailsTable with assigned schema name
func (a AdventureDetailsTable) FromSchema(schemaName string) *AdventureDetailsTable {
	return newAdventureDetailsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AdventureDetailsTable with assigned table prefix
func (a AdventureDetailsTable) WithPrefix(prefix string) *AdventureDetailsTable {
	return newAdventureDetailsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AdventureDetailsTable with assigned table suffix
func (a AdventureDetailsTable) WithSuffix(suffix string) *AdventureDetailsTable {
	return newAdventureDetailsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAdventureDetailsTable(schemaName, tableName, alias string) *AdventureDetailsTable {
	return &AdventureDetailsTable{
		adventureDetailsTable: newAdventureDetailsTableImpl(schemaName, tableName, alias),
		NEW:                   newAdventureDetailsTableImpl("", "new", ""),
	}
}

func newAdventureDetailsTableImpl(schemaName, tableName, alias string) adventureDetailsTable {
	var (
		IDColumn               = mysql.IntegerColumn("id")
		AdventureIDColumn      = mysql.IntegerColumn("adventure_id")
		InstanceIDColumn       = mysql.IntegerColumn("instance_id")
		CountColumn            = mysql.IntegerColumn("count")
		AssassinateCountColumn = mysql.IntegerColumn("assassinate_count")
		StatusColumn           = mysql.IntegerColumn("status")
		TimeCreatedColumn      = mysql.IntegerColumn("time_created")
		TimeZonedColumn        = mysql.IntegerColumn("time_zoned")
		TimeCompletedColumn    = mysql.IntegerColumn("time_completed")
		allColumns             = mysql.ColumnList{IDColumn, AdventureIDColumn, InstanceIDColumn, CountColumn, AssassinateCountColumn, StatusColumn, TimeCreatedColumn, TimeZonedColumn, TimeCompletedColumn}
		mutableColumns         = mysql.ColumnList{AdventureIDColumn, InstanceIDColumn, CountColumn, AssassinateCountColumn, StatusColumn, TimeCreatedColumn, TimeZonedColumn, TimeCompletedColumn}
		defaultColumns         = mysql.ColumnList{InstanceIDColumn, CountColumn, AssassinateCountColumn, StatusColumn, TimeCreatedColumn, TimeZonedColumn, TimeCompletedColumn}
	)

	return adventureDetailsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		AdventureID:      AdventureIDColumn,
		InstanceID:       InstanceIDColumn,
		Count:            CountColumn,
		AssassinateCount: AssassinateCountColumn,
		Status:           StatusColumn,
		TimeCreated:      TimeCreatedColumn,
		TimeZoned:        TimeZonedColumn,
		TimeCompleted:    TimeCompletedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
