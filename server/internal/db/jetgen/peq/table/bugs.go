//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Bugs = newBugsTable("peq", "bugs", "")

type bugsTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnInteger
	Zone   mysql.ColumnString
	Name   mysql.ColumnString
	UI     mysql.ColumnString
	X      mysql.ColumnFloat
	Y      mysql.ColumnFloat
	Z      mysql.ColumnFloat
	Type   mysql.ColumnString
	Flag   mysql.ColumnInteger
	Target mysql.ColumnString
	Bug    mysql.ColumnString
	Date   mysql.ColumnDate
	Status mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type BugsTable struct {
	bugsTable

	NEW bugsTable
}

// AS creates new BugsTable with assigned alias
func (a BugsTable) AS(alias string) *BugsTable {
	return newBugsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BugsTable with assigned schema name
func (a BugsTable) FromSchema(schemaName string) *BugsTable {
	return newBugsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BugsTable with assigned table prefix
func (a BugsTable) WithPrefix(prefix string) *BugsTable {
	return newBugsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BugsTable with assigned table suffix
func (a BugsTable) WithSuffix(suffix string) *BugsTable {
	return newBugsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBugsTable(schemaName, tableName, alias string) *BugsTable {
	return &BugsTable{
		bugsTable: newBugsTableImpl(schemaName, tableName, alias),
		NEW:       newBugsTableImpl("", "new", ""),
	}
}

func newBugsTableImpl(schemaName, tableName, alias string) bugsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		ZoneColumn     = mysql.StringColumn("zone")
		NameColumn     = mysql.StringColumn("name")
		UIColumn       = mysql.StringColumn("ui")
		XColumn        = mysql.FloatColumn("x")
		YColumn        = mysql.FloatColumn("y")
		ZColumn        = mysql.FloatColumn("z")
		TypeColumn     = mysql.StringColumn("type")
		FlagColumn     = mysql.IntegerColumn("flag")
		TargetColumn   = mysql.StringColumn("target")
		BugColumn      = mysql.StringColumn("bug")
		DateColumn     = mysql.DateColumn("date")
		StatusColumn   = mysql.IntegerColumn("status")
		allColumns     = mysql.ColumnList{IDColumn, ZoneColumn, NameColumn, UIColumn, XColumn, YColumn, ZColumn, TypeColumn, FlagColumn, TargetColumn, BugColumn, DateColumn, StatusColumn}
		mutableColumns = mysql.ColumnList{ZoneColumn, NameColumn, UIColumn, XColumn, YColumn, ZColumn, TypeColumn, FlagColumn, TargetColumn, BugColumn, DateColumn, StatusColumn}
		defaultColumns = mysql.ColumnList{XColumn, YColumn, ZColumn, StatusColumn}
	)

	return bugsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Zone:   ZoneColumn,
		Name:   NameColumn,
		UI:     UIColumn,
		X:      XColumn,
		Y:      YColumn,
		Z:      ZColumn,
		Type:   TypeColumn,
		Flag:   FlagColumn,
		Target: TargetColumn,
		Bug:    BugColumn,
		Date:   DateColumn,
		Status: StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
