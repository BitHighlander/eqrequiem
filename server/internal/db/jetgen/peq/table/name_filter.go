//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var NameFilter = newNameFilterTable("peq", "name_filter", "")

type nameFilterTable struct {
	mysql.Table

	// Columns
	ID   mysql.ColumnInteger
	Name mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type NameFilterTable struct {
	nameFilterTable

	NEW nameFilterTable
}

// AS creates new NameFilterTable with assigned alias
func (a NameFilterTable) AS(alias string) *NameFilterTable {
	return newNameFilterTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NameFilterTable with assigned schema name
func (a NameFilterTable) FromSchema(schemaName string) *NameFilterTable {
	return newNameFilterTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NameFilterTable with assigned table prefix
func (a NameFilterTable) WithPrefix(prefix string) *NameFilterTable {
	return newNameFilterTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NameFilterTable with assigned table suffix
func (a NameFilterTable) WithSuffix(suffix string) *NameFilterTable {
	return newNameFilterTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNameFilterTable(schemaName, tableName, alias string) *NameFilterTable {
	return &NameFilterTable{
		nameFilterTable: newNameFilterTableImpl(schemaName, tableName, alias),
		NEW:             newNameFilterTableImpl("", "new", ""),
	}
}

func newNameFilterTableImpl(schemaName, tableName, alias string) nameFilterTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		NameColumn     = mysql.StringColumn("name")
		allColumns     = mysql.ColumnList{IDColumn, NameColumn}
		mutableColumns = mysql.ColumnList{NameColumn}
		defaultColumns = mysql.ColumnList{NameColumn}
	)

	return nameFilterTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
