//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var TributeLevels = newTributeLevelsTable("peq", "tribute_levels", "")

type tributeLevelsTable struct {
	mysql.Table

	// Columns
	TributeID mysql.ColumnInteger
	Level     mysql.ColumnInteger
	Cost      mysql.ColumnInteger
	ItemID    mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type TributeLevelsTable struct {
	tributeLevelsTable

	NEW tributeLevelsTable
}

// AS creates new TributeLevelsTable with assigned alias
func (a TributeLevelsTable) AS(alias string) *TributeLevelsTable {
	return newTributeLevelsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TributeLevelsTable with assigned schema name
func (a TributeLevelsTable) FromSchema(schemaName string) *TributeLevelsTable {
	return newTributeLevelsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TributeLevelsTable with assigned table prefix
func (a TributeLevelsTable) WithPrefix(prefix string) *TributeLevelsTable {
	return newTributeLevelsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TributeLevelsTable with assigned table suffix
func (a TributeLevelsTable) WithSuffix(suffix string) *TributeLevelsTable {
	return newTributeLevelsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTributeLevelsTable(schemaName, tableName, alias string) *TributeLevelsTable {
	return &TributeLevelsTable{
		tributeLevelsTable: newTributeLevelsTableImpl(schemaName, tableName, alias),
		NEW:                newTributeLevelsTableImpl("", "new", ""),
	}
}

func newTributeLevelsTableImpl(schemaName, tableName, alias string) tributeLevelsTable {
	var (
		TributeIDColumn = mysql.IntegerColumn("tribute_id")
		LevelColumn     = mysql.IntegerColumn("level")
		CostColumn      = mysql.IntegerColumn("cost")
		ItemIDColumn    = mysql.IntegerColumn("item_id")
		allColumns      = mysql.ColumnList{TributeIDColumn, LevelColumn, CostColumn, ItemIDColumn}
		mutableColumns  = mysql.ColumnList{CostColumn, ItemIDColumn}
		defaultColumns  = mysql.ColumnList{TributeIDColumn, LevelColumn, CostColumn, ItemIDColumn}
	)

	return tributeLevelsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TributeID: TributeIDColumn,
		Level:     LevelColumn,
		Cost:      CostColumn,
		ItemID:    ItemIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
