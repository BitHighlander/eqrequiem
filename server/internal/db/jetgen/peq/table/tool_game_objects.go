//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ToolGameObjects = newToolGameObjectsTable("peq", "tool_game_objects", "")

type toolGameObjectsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	Zoneid     mysql.ColumnInteger
	Zonesn     mysql.ColumnString
	ObjectName mysql.ColumnString
	FileFrom   mysql.ColumnString
	IsGlobal   mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ToolGameObjectsTable struct {
	toolGameObjectsTable

	NEW toolGameObjectsTable
}

// AS creates new ToolGameObjectsTable with assigned alias
func (a ToolGameObjectsTable) AS(alias string) *ToolGameObjectsTable {
	return newToolGameObjectsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ToolGameObjectsTable with assigned schema name
func (a ToolGameObjectsTable) FromSchema(schemaName string) *ToolGameObjectsTable {
	return newToolGameObjectsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ToolGameObjectsTable with assigned table prefix
func (a ToolGameObjectsTable) WithPrefix(prefix string) *ToolGameObjectsTable {
	return newToolGameObjectsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ToolGameObjectsTable with assigned table suffix
func (a ToolGameObjectsTable) WithSuffix(suffix string) *ToolGameObjectsTable {
	return newToolGameObjectsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newToolGameObjectsTable(schemaName, tableName, alias string) *ToolGameObjectsTable {
	return &ToolGameObjectsTable{
		toolGameObjectsTable: newToolGameObjectsTableImpl(schemaName, tableName, alias),
		NEW:                  newToolGameObjectsTableImpl("", "new", ""),
	}
}

func newToolGameObjectsTableImpl(schemaName, tableName, alias string) toolGameObjectsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		ZoneidColumn     = mysql.IntegerColumn("zoneid")
		ZonesnColumn     = mysql.StringColumn("zonesn")
		ObjectNameColumn = mysql.StringColumn("object_name")
		FileFromColumn   = mysql.StringColumn("file_from")
		IsGlobalColumn   = mysql.BoolColumn("is_global")
		allColumns       = mysql.ColumnList{IDColumn, ZoneidColumn, ZonesnColumn, ObjectNameColumn, FileFromColumn, IsGlobalColumn}
		mutableColumns   = mysql.ColumnList{ZoneidColumn, ZonesnColumn, ObjectNameColumn, FileFromColumn, IsGlobalColumn}
		defaultColumns   = mysql.ColumnList{ZoneidColumn, ZonesnColumn, ObjectNameColumn, IsGlobalColumn}
	)

	return toolGameObjectsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Zoneid:     ZoneidColumn,
		Zonesn:     ZonesnColumn,
		ObjectName: ObjectNameColumn,
		FileFrom:   FileFromColumn,
		IsGlobal:   IsGlobalColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
