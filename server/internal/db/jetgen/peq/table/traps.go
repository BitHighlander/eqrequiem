//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Traps = newTrapsTable("peq", "traps", "")

type trapsTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	Zone                 mysql.ColumnString
	Version              mysql.ColumnInteger
	X                    mysql.ColumnInteger
	Y                    mysql.ColumnInteger
	Z                    mysql.ColumnInteger
	Chance               mysql.ColumnInteger
	Maxzdiff             mysql.ColumnFloat
	Radius               mysql.ColumnFloat
	Effect               mysql.ColumnInteger
	Effectvalue          mysql.ColumnInteger
	Effectvalue2         mysql.ColumnInteger
	Message              mysql.ColumnString
	Skill                mysql.ColumnInteger
	Level                mysql.ColumnInteger
	RespawnTime          mysql.ColumnInteger
	RespawnVar           mysql.ColumnInteger
	TriggeredNumber      mysql.ColumnInteger
	Group                mysql.ColumnInteger
	DespawnWhenTriggered mysql.ColumnInteger
	Undetectable         mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type TrapsTable struct {
	trapsTable

	NEW trapsTable
}

// AS creates new TrapsTable with assigned alias
func (a TrapsTable) AS(alias string) *TrapsTable {
	return newTrapsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TrapsTable with assigned schema name
func (a TrapsTable) FromSchema(schemaName string) *TrapsTable {
	return newTrapsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TrapsTable with assigned table prefix
func (a TrapsTable) WithPrefix(prefix string) *TrapsTable {
	return newTrapsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TrapsTable with assigned table suffix
func (a TrapsTable) WithSuffix(suffix string) *TrapsTable {
	return newTrapsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTrapsTable(schemaName, tableName, alias string) *TrapsTable {
	return &TrapsTable{
		trapsTable: newTrapsTableImpl(schemaName, tableName, alias),
		NEW:        newTrapsTableImpl("", "new", ""),
	}
}

func newTrapsTableImpl(schemaName, tableName, alias string) trapsTable {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		ZoneColumn                 = mysql.StringColumn("zone")
		VersionColumn              = mysql.IntegerColumn("version")
		XColumn                    = mysql.IntegerColumn("x")
		YColumn                    = mysql.IntegerColumn("y")
		ZColumn                    = mysql.IntegerColumn("z")
		ChanceColumn               = mysql.IntegerColumn("chance")
		MaxzdiffColumn             = mysql.FloatColumn("maxzdiff")
		RadiusColumn               = mysql.FloatColumn("radius")
		EffectColumn               = mysql.IntegerColumn("effect")
		EffectvalueColumn          = mysql.IntegerColumn("effectvalue")
		Effectvalue2Column         = mysql.IntegerColumn("effectvalue2")
		MessageColumn              = mysql.StringColumn("message")
		SkillColumn                = mysql.IntegerColumn("skill")
		LevelColumn                = mysql.IntegerColumn("level")
		RespawnTimeColumn          = mysql.IntegerColumn("respawn_time")
		RespawnVarColumn           = mysql.IntegerColumn("respawn_var")
		TriggeredNumberColumn      = mysql.IntegerColumn("triggered_number")
		GroupColumn                = mysql.IntegerColumn("group")
		DespawnWhenTriggeredColumn = mysql.IntegerColumn("despawn_when_triggered")
		UndetectableColumn         = mysql.IntegerColumn("undetectable")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{IDColumn, ZoneColumn, VersionColumn, XColumn, YColumn, ZColumn, ChanceColumn, MaxzdiffColumn, RadiusColumn, EffectColumn, EffectvalueColumn, Effectvalue2Column, MessageColumn, SkillColumn, LevelColumn, RespawnTimeColumn, RespawnVarColumn, TriggeredNumberColumn, GroupColumn, DespawnWhenTriggeredColumn, UndetectableColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{ZoneColumn, VersionColumn, XColumn, YColumn, ZColumn, ChanceColumn, MaxzdiffColumn, RadiusColumn, EffectColumn, EffectvalueColumn, Effectvalue2Column, MessageColumn, SkillColumn, LevelColumn, RespawnTimeColumn, RespawnVarColumn, TriggeredNumberColumn, GroupColumn, DespawnWhenTriggeredColumn, UndetectableColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{ZoneColumn, VersionColumn, XColumn, YColumn, ZColumn, ChanceColumn, MaxzdiffColumn, RadiusColumn, EffectColumn, EffectvalueColumn, Effectvalue2Column, MessageColumn, SkillColumn, LevelColumn, RespawnTimeColumn, RespawnVarColumn, TriggeredNumberColumn, GroupColumn, DespawnWhenTriggeredColumn, UndetectableColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return trapsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Zone:                 ZoneColumn,
		Version:              VersionColumn,
		X:                    XColumn,
		Y:                    YColumn,
		Z:                    ZColumn,
		Chance:               ChanceColumn,
		Maxzdiff:             MaxzdiffColumn,
		Radius:               RadiusColumn,
		Effect:               EffectColumn,
		Effectvalue:          EffectvalueColumn,
		Effectvalue2:         Effectvalue2Column,
		Message:              MessageColumn,
		Skill:                SkillColumn,
		Level:                LevelColumn,
		RespawnTime:          RespawnTimeColumn,
		RespawnVar:           RespawnVarColumn,
		TriggeredNumber:      TriggeredNumberColumn,
		Group:                GroupColumn,
		DespawnWhenTriggered: DespawnWhenTriggeredColumn,
		Undetectable:         UndetectableColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
