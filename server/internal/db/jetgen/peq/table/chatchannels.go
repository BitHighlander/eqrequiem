//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Chatchannels = newChatchannelsTable("peq", "chatchannels", "")

type chatchannelsTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	Name      mysql.ColumnString
	Owner     mysql.ColumnString
	Password  mysql.ColumnString
	Minstatus mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ChatchannelsTable struct {
	chatchannelsTable

	NEW chatchannelsTable
}

// AS creates new ChatchannelsTable with assigned alias
func (a ChatchannelsTable) AS(alias string) *ChatchannelsTable {
	return newChatchannelsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ChatchannelsTable with assigned schema name
func (a ChatchannelsTable) FromSchema(schemaName string) *ChatchannelsTable {
	return newChatchannelsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ChatchannelsTable with assigned table prefix
func (a ChatchannelsTable) WithPrefix(prefix string) *ChatchannelsTable {
	return newChatchannelsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ChatchannelsTable with assigned table suffix
func (a ChatchannelsTable) WithSuffix(suffix string) *ChatchannelsTable {
	return newChatchannelsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newChatchannelsTable(schemaName, tableName, alias string) *ChatchannelsTable {
	return &ChatchannelsTable{
		chatchannelsTable: newChatchannelsTableImpl(schemaName, tableName, alias),
		NEW:               newChatchannelsTableImpl("", "new", ""),
	}
}

func newChatchannelsTableImpl(schemaName, tableName, alias string) chatchannelsTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		NameColumn      = mysql.StringColumn("name")
		OwnerColumn     = mysql.StringColumn("owner")
		PasswordColumn  = mysql.StringColumn("password")
		MinstatusColumn = mysql.IntegerColumn("minstatus")
		allColumns      = mysql.ColumnList{IDColumn, NameColumn, OwnerColumn, PasswordColumn, MinstatusColumn}
		mutableColumns  = mysql.ColumnList{NameColumn, OwnerColumn, PasswordColumn, MinstatusColumn}
		defaultColumns  = mysql.ColumnList{NameColumn, OwnerColumn, PasswordColumn, MinstatusColumn}
	)

	return chatchannelsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		Owner:     OwnerColumn,
		Password:  PasswordColumn,
		Minstatus: MinstatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
