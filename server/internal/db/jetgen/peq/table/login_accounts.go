//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LoginAccounts = newLoginAccountsTable("peq", "login_accounts", "")

type loginAccountsTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnInteger
	AccountName       mysql.ColumnString
	AccountPassword   mysql.ColumnString
	AccountEmail      mysql.ColumnString
	SourceLoginserver mysql.ColumnString
	LastIPAddress     mysql.ColumnString
	LastLoginDate     mysql.ColumnTimestamp
	CreatedAt         mysql.ColumnTimestamp
	UpdatedAt         mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type LoginAccountsTable struct {
	loginAccountsTable

	NEW loginAccountsTable
}

// AS creates new LoginAccountsTable with assigned alias
func (a LoginAccountsTable) AS(alias string) *LoginAccountsTable {
	return newLoginAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoginAccountsTable with assigned schema name
func (a LoginAccountsTable) FromSchema(schemaName string) *LoginAccountsTable {
	return newLoginAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoginAccountsTable with assigned table prefix
func (a LoginAccountsTable) WithPrefix(prefix string) *LoginAccountsTable {
	return newLoginAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoginAccountsTable with assigned table suffix
func (a LoginAccountsTable) WithSuffix(suffix string) *LoginAccountsTable {
	return newLoginAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoginAccountsTable(schemaName, tableName, alias string) *LoginAccountsTable {
	return &LoginAccountsTable{
		loginAccountsTable: newLoginAccountsTableImpl(schemaName, tableName, alias),
		NEW:                newLoginAccountsTableImpl("", "new", ""),
	}
}

func newLoginAccountsTableImpl(schemaName, tableName, alias string) loginAccountsTable {
	var (
		IDColumn                = mysql.IntegerColumn("id")
		AccountNameColumn       = mysql.StringColumn("account_name")
		AccountPasswordColumn   = mysql.StringColumn("account_password")
		AccountEmailColumn      = mysql.StringColumn("account_email")
		SourceLoginserverColumn = mysql.StringColumn("source_loginserver")
		LastIPAddressColumn     = mysql.StringColumn("last_ip_address")
		LastLoginDateColumn     = mysql.TimestampColumn("last_login_date")
		CreatedAtColumn         = mysql.TimestampColumn("created_at")
		UpdatedAtColumn         = mysql.TimestampColumn("updated_at")
		allColumns              = mysql.ColumnList{IDColumn, AccountNameColumn, AccountPasswordColumn, AccountEmailColumn, SourceLoginserverColumn, LastIPAddressColumn, LastLoginDateColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns          = mysql.ColumnList{AccountNameColumn, AccountPasswordColumn, AccountEmailColumn, SourceLoginserverColumn, LastIPAddressColumn, LastLoginDateColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns          = mysql.ColumnList{UpdatedAtColumn}
	)

	return loginAccountsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		AccountName:       AccountNameColumn,
		AccountPassword:   AccountPasswordColumn,
		AccountEmail:      AccountEmailColumn,
		SourceLoginserver: SourceLoginserverColumn,
		LastIPAddress:     LastIPAddressColumn,
		LastLoginDate:     LastLoginDateColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
