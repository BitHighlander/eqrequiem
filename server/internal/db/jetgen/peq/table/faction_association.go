//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FactionAssociation = newFactionAssociationTable("peq", "faction_association", "")

type factionAssociationTable struct {
	mysql.Table

	// Columns
	ID    mysql.ColumnInteger
	ID1   mysql.ColumnInteger
	Mod1  mysql.ColumnFloat
	ID2   mysql.ColumnInteger
	Mod2  mysql.ColumnFloat
	ID3   mysql.ColumnInteger
	Mod3  mysql.ColumnFloat
	ID4   mysql.ColumnInteger
	Mod4  mysql.ColumnFloat
	ID5   mysql.ColumnInteger
	Mod5  mysql.ColumnFloat
	ID6   mysql.ColumnInteger
	Mod6  mysql.ColumnFloat
	ID7   mysql.ColumnInteger
	Mod7  mysql.ColumnFloat
	ID8   mysql.ColumnInteger
	Mod8  mysql.ColumnFloat
	ID9   mysql.ColumnInteger
	Mod9  mysql.ColumnFloat
	ID10  mysql.ColumnInteger
	Mod10 mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FactionAssociationTable struct {
	factionAssociationTable

	NEW factionAssociationTable
}

// AS creates new FactionAssociationTable with assigned alias
func (a FactionAssociationTable) AS(alias string) *FactionAssociationTable {
	return newFactionAssociationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FactionAssociationTable with assigned schema name
func (a FactionAssociationTable) FromSchema(schemaName string) *FactionAssociationTable {
	return newFactionAssociationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FactionAssociationTable with assigned table prefix
func (a FactionAssociationTable) WithPrefix(prefix string) *FactionAssociationTable {
	return newFactionAssociationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FactionAssociationTable with assigned table suffix
func (a FactionAssociationTable) WithSuffix(suffix string) *FactionAssociationTable {
	return newFactionAssociationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFactionAssociationTable(schemaName, tableName, alias string) *FactionAssociationTable {
	return &FactionAssociationTable{
		factionAssociationTable: newFactionAssociationTableImpl(schemaName, tableName, alias),
		NEW:                     newFactionAssociationTableImpl("", "new", ""),
	}
}

func newFactionAssociationTableImpl(schemaName, tableName, alias string) factionAssociationTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		ID1Column      = mysql.IntegerColumn("id_1")
		Mod1Column     = mysql.FloatColumn("mod_1")
		ID2Column      = mysql.IntegerColumn("id_2")
		Mod2Column     = mysql.FloatColumn("mod_2")
		ID3Column      = mysql.IntegerColumn("id_3")
		Mod3Column     = mysql.FloatColumn("mod_3")
		ID4Column      = mysql.IntegerColumn("id_4")
		Mod4Column     = mysql.FloatColumn("mod_4")
		ID5Column      = mysql.IntegerColumn("id_5")
		Mod5Column     = mysql.FloatColumn("mod_5")
		ID6Column      = mysql.IntegerColumn("id_6")
		Mod6Column     = mysql.FloatColumn("mod_6")
		ID7Column      = mysql.IntegerColumn("id_7")
		Mod7Column     = mysql.FloatColumn("mod_7")
		ID8Column      = mysql.IntegerColumn("id_8")
		Mod8Column     = mysql.FloatColumn("mod_8")
		ID9Column      = mysql.IntegerColumn("id_9")
		Mod9Column     = mysql.FloatColumn("mod_9")
		ID10Column     = mysql.IntegerColumn("id_10")
		Mod10Column    = mysql.FloatColumn("mod_10")
		allColumns     = mysql.ColumnList{IDColumn, ID1Column, Mod1Column, ID2Column, Mod2Column, ID3Column, Mod3Column, ID4Column, Mod4Column, ID5Column, Mod5Column, ID6Column, Mod6Column, ID7Column, Mod7Column, ID8Column, Mod8Column, ID9Column, Mod9Column, ID10Column, Mod10Column}
		mutableColumns = mysql.ColumnList{ID1Column, Mod1Column, ID2Column, Mod2Column, ID3Column, Mod3Column, ID4Column, Mod4Column, ID5Column, Mod5Column, ID6Column, Mod6Column, ID7Column, Mod7Column, ID8Column, Mod8Column, ID9Column, Mod9Column, ID10Column, Mod10Column}
		defaultColumns = mysql.ColumnList{ID1Column, Mod1Column, ID2Column, Mod2Column, ID3Column, Mod3Column, ID4Column, Mod4Column, ID5Column, Mod5Column, ID6Column, Mod6Column, ID7Column, Mod7Column, ID8Column, Mod8Column, ID9Column, Mod9Column, ID10Column, Mod10Column}
	)

	return factionAssociationTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:    IDColumn,
		ID1:   ID1Column,
		Mod1:  Mod1Column,
		ID2:   ID2Column,
		Mod2:  Mod2Column,
		ID3:   ID3Column,
		Mod3:  Mod3Column,
		ID4:   ID4Column,
		Mod4:  Mod4Column,
		ID5:   ID5Column,
		Mod5:  Mod5Column,
		ID6:   ID6Column,
		Mod6:  Mod6Column,
		ID7:   ID7Column,
		Mod7:  Mod7Column,
		ID8:   ID8Column,
		Mod8:  Mod8Column,
		ID9:   ID9Column,
		Mod9:  Mod9Column,
		ID10:  ID10Column,
		Mod10: Mod10Column,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
