//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterTasks = newCharacterTasksTable("peq", "character_tasks", "")

type characterTasksTable struct {
	mysql.Table

	// Columns
	Charid       mysql.ColumnInteger
	Taskid       mysql.ColumnInteger
	Slot         mysql.ColumnInteger
	Type         mysql.ColumnInteger
	Acceptedtime mysql.ColumnInteger
	WasRewarded  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterTasksTable struct {
	characterTasksTable

	NEW characterTasksTable
}

// AS creates new CharacterTasksTable with assigned alias
func (a CharacterTasksTable) AS(alias string) *CharacterTasksTable {
	return newCharacterTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterTasksTable with assigned schema name
func (a CharacterTasksTable) FromSchema(schemaName string) *CharacterTasksTable {
	return newCharacterTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterTasksTable with assigned table prefix
func (a CharacterTasksTable) WithPrefix(prefix string) *CharacterTasksTable {
	return newCharacterTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterTasksTable with assigned table suffix
func (a CharacterTasksTable) WithSuffix(suffix string) *CharacterTasksTable {
	return newCharacterTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterTasksTable(schemaName, tableName, alias string) *CharacterTasksTable {
	return &CharacterTasksTable{
		characterTasksTable: newCharacterTasksTableImpl(schemaName, tableName, alias),
		NEW:                 newCharacterTasksTableImpl("", "new", ""),
	}
}

func newCharacterTasksTableImpl(schemaName, tableName, alias string) characterTasksTable {
	var (
		CharidColumn       = mysql.IntegerColumn("charid")
		TaskidColumn       = mysql.IntegerColumn("taskid")
		SlotColumn         = mysql.IntegerColumn("slot")
		TypeColumn         = mysql.IntegerColumn("type")
		AcceptedtimeColumn = mysql.IntegerColumn("acceptedtime")
		WasRewardedColumn  = mysql.IntegerColumn("was_rewarded")
		allColumns         = mysql.ColumnList{CharidColumn, TaskidColumn, SlotColumn, TypeColumn, AcceptedtimeColumn, WasRewardedColumn}
		mutableColumns     = mysql.ColumnList{SlotColumn, TypeColumn, AcceptedtimeColumn, WasRewardedColumn}
		defaultColumns     = mysql.ColumnList{CharidColumn, TaskidColumn, SlotColumn, TypeColumn, WasRewardedColumn}
	)

	return characterTasksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Charid:       CharidColumn,
		Taskid:       TaskidColumn,
		Slot:         SlotColumn,
		Type:         TypeColumn,
		Acceptedtime: AcceptedtimeColumn,
		WasRewarded:  WasRewardedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
