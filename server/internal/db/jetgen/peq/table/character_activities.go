//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterActivities = newCharacterActivitiesTable("peq", "character_activities", "")

type characterActivitiesTable struct {
	mysql.Table

	// Columns
	Charid     mysql.ColumnInteger
	Taskid     mysql.ColumnInteger
	Activityid mysql.ColumnInteger
	Donecount  mysql.ColumnInteger
	Completed  mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterActivitiesTable struct {
	characterActivitiesTable

	NEW characterActivitiesTable
}

// AS creates new CharacterActivitiesTable with assigned alias
func (a CharacterActivitiesTable) AS(alias string) *CharacterActivitiesTable {
	return newCharacterActivitiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterActivitiesTable with assigned schema name
func (a CharacterActivitiesTable) FromSchema(schemaName string) *CharacterActivitiesTable {
	return newCharacterActivitiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterActivitiesTable with assigned table prefix
func (a CharacterActivitiesTable) WithPrefix(prefix string) *CharacterActivitiesTable {
	return newCharacterActivitiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterActivitiesTable with assigned table suffix
func (a CharacterActivitiesTable) WithSuffix(suffix string) *CharacterActivitiesTable {
	return newCharacterActivitiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterActivitiesTable(schemaName, tableName, alias string) *CharacterActivitiesTable {
	return &CharacterActivitiesTable{
		characterActivitiesTable: newCharacterActivitiesTableImpl(schemaName, tableName, alias),
		NEW:                      newCharacterActivitiesTableImpl("", "new", ""),
	}
}

func newCharacterActivitiesTableImpl(schemaName, tableName, alias string) characterActivitiesTable {
	var (
		CharidColumn     = mysql.IntegerColumn("charid")
		TaskidColumn     = mysql.IntegerColumn("taskid")
		ActivityidColumn = mysql.IntegerColumn("activityid")
		DonecountColumn  = mysql.IntegerColumn("donecount")
		CompletedColumn  = mysql.BoolColumn("completed")
		allColumns       = mysql.ColumnList{CharidColumn, TaskidColumn, ActivityidColumn, DonecountColumn, CompletedColumn}
		mutableColumns   = mysql.ColumnList{DonecountColumn, CompletedColumn}
		defaultColumns   = mysql.ColumnList{CharidColumn, TaskidColumn, ActivityidColumn, DonecountColumn, CompletedColumn}
	)

	return characterActivitiesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Charid:     CharidColumn,
		Taskid:     TaskidColumn,
		Activityid: ActivityidColumn,
		Donecount:  DonecountColumn,
		Completed:  CompletedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
