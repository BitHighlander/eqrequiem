//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var RaidMembers = newRaidMembersTable("peq", "raid_members", "")

type raidMembersTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	Raidid        mysql.ColumnInteger
	Charid        mysql.ColumnInteger
	BotID         mysql.ColumnInteger
	Groupid       mysql.ColumnInteger
	Class         mysql.ColumnInteger
	Level         mysql.ColumnInteger
	Name          mysql.ColumnString
	Isgroupleader mysql.ColumnBool
	Israidleader  mysql.ColumnBool
	Islooter      mysql.ColumnBool
	IsMarker      mysql.ColumnInteger
	IsAssister    mysql.ColumnInteger
	Note          mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type RaidMembersTable struct {
	raidMembersTable

	NEW raidMembersTable
}

// AS creates new RaidMembersTable with assigned alias
func (a RaidMembersTable) AS(alias string) *RaidMembersTable {
	return newRaidMembersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RaidMembersTable with assigned schema name
func (a RaidMembersTable) FromSchema(schemaName string) *RaidMembersTable {
	return newRaidMembersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RaidMembersTable with assigned table prefix
func (a RaidMembersTable) WithPrefix(prefix string) *RaidMembersTable {
	return newRaidMembersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RaidMembersTable with assigned table suffix
func (a RaidMembersTable) WithSuffix(suffix string) *RaidMembersTable {
	return newRaidMembersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRaidMembersTable(schemaName, tableName, alias string) *RaidMembersTable {
	return &RaidMembersTable{
		raidMembersTable: newRaidMembersTableImpl(schemaName, tableName, alias),
		NEW:              newRaidMembersTableImpl("", "new", ""),
	}
}

func newRaidMembersTableImpl(schemaName, tableName, alias string) raidMembersTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		RaididColumn        = mysql.IntegerColumn("raidid")
		CharidColumn        = mysql.IntegerColumn("charid")
		BotIDColumn         = mysql.IntegerColumn("bot_id")
		GroupidColumn       = mysql.IntegerColumn("groupid")
		ClassColumn         = mysql.IntegerColumn("_class")
		LevelColumn         = mysql.IntegerColumn("level")
		NameColumn          = mysql.StringColumn("name")
		IsgroupleaderColumn = mysql.BoolColumn("isgroupleader")
		IsraidleaderColumn  = mysql.BoolColumn("israidleader")
		IslooterColumn      = mysql.BoolColumn("islooter")
		IsMarkerColumn      = mysql.IntegerColumn("is_marker")
		IsAssisterColumn    = mysql.IntegerColumn("is_assister")
		NoteColumn          = mysql.StringColumn("note")
		allColumns          = mysql.ColumnList{IDColumn, RaididColumn, CharidColumn, BotIDColumn, GroupidColumn, ClassColumn, LevelColumn, NameColumn, IsgroupleaderColumn, IsraidleaderColumn, IslooterColumn, IsMarkerColumn, IsAssisterColumn, NoteColumn}
		mutableColumns      = mysql.ColumnList{RaididColumn, CharidColumn, BotIDColumn, GroupidColumn, ClassColumn, LevelColumn, NameColumn, IsgroupleaderColumn, IsraidleaderColumn, IslooterColumn, IsMarkerColumn, IsAssisterColumn, NoteColumn}
		defaultColumns      = mysql.ColumnList{RaididColumn, CharidColumn, BotIDColumn, GroupidColumn, ClassColumn, LevelColumn, NameColumn, IsgroupleaderColumn, IsraidleaderColumn, IslooterColumn, IsMarkerColumn, IsAssisterColumn, NoteColumn}
	)

	return raidMembersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Raidid:        RaididColumn,
		Charid:        CharidColumn,
		BotID:         BotIDColumn,
		Groupid:       GroupidColumn,
		Class:         ClassColumn,
		Level:         LevelColumn,
		Name:          NameColumn,
		Isgroupleader: IsgroupleaderColumn,
		Israidleader:  IsraidleaderColumn,
		Islooter:      IslooterColumn,
		IsMarker:      IsMarkerColumn,
		IsAssister:    IsAssisterColumn,
		Note:          NoteColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
