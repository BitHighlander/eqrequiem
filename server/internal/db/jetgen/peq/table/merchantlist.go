//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Merchantlist = newMerchantlistTable("peq", "merchantlist", "")

type merchantlistTable struct {
	mysql.Table

	// Columns
	Merchantid           mysql.ColumnInteger
	Slot                 mysql.ColumnInteger
	Item                 mysql.ColumnInteger
	CustomData           mysql.ColumnString
	FactionRequired      mysql.ColumnInteger
	LevelRequired        mysql.ColumnInteger
	MinStatus            mysql.ColumnInteger
	MaxStatus            mysql.ColumnInteger
	AltCurrencyCost      mysql.ColumnInteger
	ClassesRequired      mysql.ColumnInteger
	Probability          mysql.ColumnInteger
	BucketName           mysql.ColumnString
	BucketValue          mysql.ColumnString
	BucketComparison     mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type MerchantlistTable struct {
	merchantlistTable

	NEW merchantlistTable
}

// AS creates new MerchantlistTable with assigned alias
func (a MerchantlistTable) AS(alias string) *MerchantlistTable {
	return newMerchantlistTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MerchantlistTable with assigned schema name
func (a MerchantlistTable) FromSchema(schemaName string) *MerchantlistTable {
	return newMerchantlistTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MerchantlistTable with assigned table prefix
func (a MerchantlistTable) WithPrefix(prefix string) *MerchantlistTable {
	return newMerchantlistTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MerchantlistTable with assigned table suffix
func (a MerchantlistTable) WithSuffix(suffix string) *MerchantlistTable {
	return newMerchantlistTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMerchantlistTable(schemaName, tableName, alias string) *MerchantlistTable {
	return &MerchantlistTable{
		merchantlistTable: newMerchantlistTableImpl(schemaName, tableName, alias),
		NEW:               newMerchantlistTableImpl("", "new", ""),
	}
}

func newMerchantlistTableImpl(schemaName, tableName, alias string) merchantlistTable {
	var (
		MerchantidColumn           = mysql.IntegerColumn("merchantid")
		SlotColumn                 = mysql.IntegerColumn("slot")
		ItemColumn                 = mysql.IntegerColumn("item")
		CustomDataColumn           = mysql.StringColumn("custom_data")
		FactionRequiredColumn      = mysql.IntegerColumn("faction_required")
		LevelRequiredColumn        = mysql.IntegerColumn("level_required")
		MinStatusColumn            = mysql.IntegerColumn("min_status")
		MaxStatusColumn            = mysql.IntegerColumn("max_status")
		AltCurrencyCostColumn      = mysql.IntegerColumn("alt_currency_cost")
		ClassesRequiredColumn      = mysql.IntegerColumn("classes_required")
		ProbabilityColumn          = mysql.IntegerColumn("probability")
		BucketNameColumn           = mysql.StringColumn("bucket_name")
		BucketValueColumn          = mysql.StringColumn("bucket_value")
		BucketComparisonColumn     = mysql.IntegerColumn("bucket_comparison")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{MerchantidColumn, SlotColumn, ItemColumn, CustomDataColumn, FactionRequiredColumn, LevelRequiredColumn, MinStatusColumn, MaxStatusColumn, AltCurrencyCostColumn, ClassesRequiredColumn, ProbabilityColumn, BucketNameColumn, BucketValueColumn, BucketComparisonColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{ItemColumn, CustomDataColumn, FactionRequiredColumn, LevelRequiredColumn, MinStatusColumn, MaxStatusColumn, AltCurrencyCostColumn, ClassesRequiredColumn, ProbabilityColumn, BucketNameColumn, BucketValueColumn, BucketComparisonColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{MerchantidColumn, SlotColumn, ItemColumn, FactionRequiredColumn, LevelRequiredColumn, MinStatusColumn, MaxStatusColumn, AltCurrencyCostColumn, ClassesRequiredColumn, ProbabilityColumn, BucketNameColumn, BucketValueColumn, BucketComparisonColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return merchantlistTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Merchantid:           MerchantidColumn,
		Slot:                 SlotColumn,
		Item:                 ItemColumn,
		CustomData:           CustomDataColumn,
		FactionRequired:      FactionRequiredColumn,
		LevelRequired:        LevelRequiredColumn,
		MinStatus:            MinStatusColumn,
		MaxStatus:            MaxStatusColumn,
		AltCurrencyCost:      AltCurrencyCostColumn,
		ClassesRequired:      ClassesRequiredColumn,
		Probability:          ProbabilityColumn,
		BucketName:           BucketNameColumn,
		BucketValue:          BucketValueColumn,
		BucketComparison:     BucketComparisonColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
