//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterCurrency = newCharacterCurrencyTable("peq", "character_currency", "")

type characterCurrencyTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnInteger
	Platinum              mysql.ColumnInteger
	Gold                  mysql.ColumnInteger
	Silver                mysql.ColumnInteger
	Copper                mysql.ColumnInteger
	PlatinumBank          mysql.ColumnInteger
	GoldBank              mysql.ColumnInteger
	SilverBank            mysql.ColumnInteger
	CopperBank            mysql.ColumnInteger
	PlatinumCursor        mysql.ColumnInteger
	GoldCursor            mysql.ColumnInteger
	SilverCursor          mysql.ColumnInteger
	CopperCursor          mysql.ColumnInteger
	RadiantCrystals       mysql.ColumnInteger
	CareerRadiantCrystals mysql.ColumnInteger
	EbonCrystals          mysql.ColumnInteger
	CareerEbonCrystals    mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterCurrencyTable struct {
	characterCurrencyTable

	NEW characterCurrencyTable
}

// AS creates new CharacterCurrencyTable with assigned alias
func (a CharacterCurrencyTable) AS(alias string) *CharacterCurrencyTable {
	return newCharacterCurrencyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterCurrencyTable with assigned schema name
func (a CharacterCurrencyTable) FromSchema(schemaName string) *CharacterCurrencyTable {
	return newCharacterCurrencyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterCurrencyTable with assigned table prefix
func (a CharacterCurrencyTable) WithPrefix(prefix string) *CharacterCurrencyTable {
	return newCharacterCurrencyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterCurrencyTable with assigned table suffix
func (a CharacterCurrencyTable) WithSuffix(suffix string) *CharacterCurrencyTable {
	return newCharacterCurrencyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterCurrencyTable(schemaName, tableName, alias string) *CharacterCurrencyTable {
	return &CharacterCurrencyTable{
		characterCurrencyTable: newCharacterCurrencyTableImpl(schemaName, tableName, alias),
		NEW:                    newCharacterCurrencyTableImpl("", "new", ""),
	}
}

func newCharacterCurrencyTableImpl(schemaName, tableName, alias string) characterCurrencyTable {
	var (
		IDColumn                    = mysql.IntegerColumn("id")
		PlatinumColumn              = mysql.IntegerColumn("platinum")
		GoldColumn                  = mysql.IntegerColumn("gold")
		SilverColumn                = mysql.IntegerColumn("silver")
		CopperColumn                = mysql.IntegerColumn("copper")
		PlatinumBankColumn          = mysql.IntegerColumn("platinum_bank")
		GoldBankColumn              = mysql.IntegerColumn("gold_bank")
		SilverBankColumn            = mysql.IntegerColumn("silver_bank")
		CopperBankColumn            = mysql.IntegerColumn("copper_bank")
		PlatinumCursorColumn        = mysql.IntegerColumn("platinum_cursor")
		GoldCursorColumn            = mysql.IntegerColumn("gold_cursor")
		SilverCursorColumn          = mysql.IntegerColumn("silver_cursor")
		CopperCursorColumn          = mysql.IntegerColumn("copper_cursor")
		RadiantCrystalsColumn       = mysql.IntegerColumn("radiant_crystals")
		CareerRadiantCrystalsColumn = mysql.IntegerColumn("career_radiant_crystals")
		EbonCrystalsColumn          = mysql.IntegerColumn("ebon_crystals")
		CareerEbonCrystalsColumn    = mysql.IntegerColumn("career_ebon_crystals")
		allColumns                  = mysql.ColumnList{IDColumn, PlatinumColumn, GoldColumn, SilverColumn, CopperColumn, PlatinumBankColumn, GoldBankColumn, SilverBankColumn, CopperBankColumn, PlatinumCursorColumn, GoldCursorColumn, SilverCursorColumn, CopperCursorColumn, RadiantCrystalsColumn, CareerRadiantCrystalsColumn, EbonCrystalsColumn, CareerEbonCrystalsColumn}
		mutableColumns              = mysql.ColumnList{PlatinumColumn, GoldColumn, SilverColumn, CopperColumn, PlatinumBankColumn, GoldBankColumn, SilverBankColumn, CopperBankColumn, PlatinumCursorColumn, GoldCursorColumn, SilverCursorColumn, CopperCursorColumn, RadiantCrystalsColumn, CareerRadiantCrystalsColumn, EbonCrystalsColumn, CareerEbonCrystalsColumn}
		defaultColumns              = mysql.ColumnList{IDColumn, PlatinumColumn, GoldColumn, SilverColumn, CopperColumn, PlatinumBankColumn, GoldBankColumn, SilverBankColumn, CopperBankColumn, PlatinumCursorColumn, GoldCursorColumn, SilverCursorColumn, CopperCursorColumn, RadiantCrystalsColumn, CareerRadiantCrystalsColumn, EbonCrystalsColumn, CareerEbonCrystalsColumn}
	)

	return characterCurrencyTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		Platinum:              PlatinumColumn,
		Gold:                  GoldColumn,
		Silver:                SilverColumn,
		Copper:                CopperColumn,
		PlatinumBank:          PlatinumBankColumn,
		GoldBank:              GoldBankColumn,
		SilverBank:            SilverBankColumn,
		CopperBank:            CopperBankColumn,
		PlatinumCursor:        PlatinumCursorColumn,
		GoldCursor:            GoldCursorColumn,
		SilverCursor:          SilverCursorColumn,
		CopperCursor:          CopperCursorColumn,
		RadiantCrystals:       RadiantCrystalsColumn,
		CareerRadiantCrystals: CareerRadiantCrystalsColumn,
		EbonCrystals:          EbonCrystalsColumn,
		CareerEbonCrystals:    CareerEbonCrystalsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
