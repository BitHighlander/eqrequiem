//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PetsBeastlordData = newPetsBeastlordDataTable("peq", "pets_beastlord_data", "")

type petsBeastlordDataTable struct {
	mysql.Table

	// Columns
	PlayerRace   mysql.ColumnInteger
	PetRace      mysql.ColumnInteger
	Texture      mysql.ColumnInteger
	HelmTexture  mysql.ColumnInteger
	Gender       mysql.ColumnInteger
	SizeModifier mysql.ColumnFloat
	Face         mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PetsBeastlordDataTable struct {
	petsBeastlordDataTable

	NEW petsBeastlordDataTable
}

// AS creates new PetsBeastlordDataTable with assigned alias
func (a PetsBeastlordDataTable) AS(alias string) *PetsBeastlordDataTable {
	return newPetsBeastlordDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PetsBeastlordDataTable with assigned schema name
func (a PetsBeastlordDataTable) FromSchema(schemaName string) *PetsBeastlordDataTable {
	return newPetsBeastlordDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PetsBeastlordDataTable with assigned table prefix
func (a PetsBeastlordDataTable) WithPrefix(prefix string) *PetsBeastlordDataTable {
	return newPetsBeastlordDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PetsBeastlordDataTable with assigned table suffix
func (a PetsBeastlordDataTable) WithSuffix(suffix string) *PetsBeastlordDataTable {
	return newPetsBeastlordDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPetsBeastlordDataTable(schemaName, tableName, alias string) *PetsBeastlordDataTable {
	return &PetsBeastlordDataTable{
		petsBeastlordDataTable: newPetsBeastlordDataTableImpl(schemaName, tableName, alias),
		NEW:                    newPetsBeastlordDataTableImpl("", "new", ""),
	}
}

func newPetsBeastlordDataTableImpl(schemaName, tableName, alias string) petsBeastlordDataTable {
	var (
		PlayerRaceColumn   = mysql.IntegerColumn("player_race")
		PetRaceColumn      = mysql.IntegerColumn("pet_race")
		TextureColumn      = mysql.IntegerColumn("texture")
		HelmTextureColumn  = mysql.IntegerColumn("helm_texture")
		GenderColumn       = mysql.IntegerColumn("gender")
		SizeModifierColumn = mysql.FloatColumn("size_modifier")
		FaceColumn         = mysql.IntegerColumn("face")
		allColumns         = mysql.ColumnList{PlayerRaceColumn, PetRaceColumn, TextureColumn, HelmTextureColumn, GenderColumn, SizeModifierColumn, FaceColumn}
		mutableColumns     = mysql.ColumnList{PetRaceColumn, TextureColumn, HelmTextureColumn, GenderColumn, SizeModifierColumn, FaceColumn}
		defaultColumns     = mysql.ColumnList{PlayerRaceColumn, PetRaceColumn, TextureColumn, HelmTextureColumn, GenderColumn, SizeModifierColumn, FaceColumn}
	)

	return petsBeastlordDataTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PlayerRace:   PlayerRaceColumn,
		PetRace:      PetRaceColumn,
		Texture:      TextureColumn,
		HelmTexture:  HelmTextureColumn,
		Gender:       GenderColumn,
		SizeModifier: SizeModifierColumn,
		Face:         FaceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
