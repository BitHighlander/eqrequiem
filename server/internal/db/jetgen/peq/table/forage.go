//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Forage = newForageTable("peq", "forage", "")

type forageTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	Zoneid               mysql.ColumnInteger
	Itemid               mysql.ColumnInteger
	Level                mysql.ColumnInteger
	Chance               mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ForageTable struct {
	forageTable

	NEW forageTable
}

// AS creates new ForageTable with assigned alias
func (a ForageTable) AS(alias string) *ForageTable {
	return newForageTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ForageTable with assigned schema name
func (a ForageTable) FromSchema(schemaName string) *ForageTable {
	return newForageTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ForageTable with assigned table prefix
func (a ForageTable) WithPrefix(prefix string) *ForageTable {
	return newForageTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ForageTable with assigned table suffix
func (a ForageTable) WithSuffix(suffix string) *ForageTable {
	return newForageTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newForageTable(schemaName, tableName, alias string) *ForageTable {
	return &ForageTable{
		forageTable: newForageTableImpl(schemaName, tableName, alias),
		NEW:         newForageTableImpl("", "new", ""),
	}
}

func newForageTableImpl(schemaName, tableName, alias string) forageTable {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		ZoneidColumn               = mysql.IntegerColumn("zoneid")
		ItemidColumn               = mysql.IntegerColumn("Itemid")
		LevelColumn                = mysql.IntegerColumn("level")
		ChanceColumn               = mysql.IntegerColumn("chance")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{IDColumn, ZoneidColumn, ItemidColumn, LevelColumn, ChanceColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{ZoneidColumn, ItemidColumn, LevelColumn, ChanceColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{ZoneidColumn, ItemidColumn, LevelColumn, ChanceColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return forageTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Zoneid:               ZoneidColumn,
		Itemid:               ItemidColumn,
		Level:                LevelColumn,
		Chance:               ChanceColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
