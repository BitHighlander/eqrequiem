//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpawnConditionValues = newSpawnConditionValuesTable("peq", "spawn_condition_values", "")

type spawnConditionValuesTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	Value      mysql.ColumnInteger
	Zone       mysql.ColumnString
	InstanceID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpawnConditionValuesTable struct {
	spawnConditionValuesTable

	NEW spawnConditionValuesTable
}

// AS creates new SpawnConditionValuesTable with assigned alias
func (a SpawnConditionValuesTable) AS(alias string) *SpawnConditionValuesTable {
	return newSpawnConditionValuesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpawnConditionValuesTable with assigned schema name
func (a SpawnConditionValuesTable) FromSchema(schemaName string) *SpawnConditionValuesTable {
	return newSpawnConditionValuesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpawnConditionValuesTable with assigned table prefix
func (a SpawnConditionValuesTable) WithPrefix(prefix string) *SpawnConditionValuesTable {
	return newSpawnConditionValuesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpawnConditionValuesTable with assigned table suffix
func (a SpawnConditionValuesTable) WithSuffix(suffix string) *SpawnConditionValuesTable {
	return newSpawnConditionValuesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpawnConditionValuesTable(schemaName, tableName, alias string) *SpawnConditionValuesTable {
	return &SpawnConditionValuesTable{
		spawnConditionValuesTable: newSpawnConditionValuesTableImpl(schemaName, tableName, alias),
		NEW:                       newSpawnConditionValuesTableImpl("", "new", ""),
	}
}

func newSpawnConditionValuesTableImpl(schemaName, tableName, alias string) spawnConditionValuesTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		ValueColumn      = mysql.IntegerColumn("value")
		ZoneColumn       = mysql.StringColumn("zone")
		InstanceIDColumn = mysql.IntegerColumn("instance_id")
		allColumns       = mysql.ColumnList{IDColumn, ValueColumn, ZoneColumn, InstanceIDColumn}
		mutableColumns   = mysql.ColumnList{IDColumn, ValueColumn, ZoneColumn, InstanceIDColumn}
		defaultColumns   = mysql.ColumnList{}
	)

	return spawnConditionValuesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Value:      ValueColumn,
		Zone:       ZoneColumn,
		InstanceID: InstanceIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
