//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Graveyard = newGraveyardTable("peq", "graveyard", "")

type graveyardTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnInteger
	ZoneID  mysql.ColumnInteger
	X       mysql.ColumnFloat
	Y       mysql.ColumnFloat
	Z       mysql.ColumnFloat
	Heading mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type GraveyardTable struct {
	graveyardTable

	NEW graveyardTable
}

// AS creates new GraveyardTable with assigned alias
func (a GraveyardTable) AS(alias string) *GraveyardTable {
	return newGraveyardTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GraveyardTable with assigned schema name
func (a GraveyardTable) FromSchema(schemaName string) *GraveyardTable {
	return newGraveyardTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GraveyardTable with assigned table prefix
func (a GraveyardTable) WithPrefix(prefix string) *GraveyardTable {
	return newGraveyardTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GraveyardTable with assigned table suffix
func (a GraveyardTable) WithSuffix(suffix string) *GraveyardTable {
	return newGraveyardTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGraveyardTable(schemaName, tableName, alias string) *GraveyardTable {
	return &GraveyardTable{
		graveyardTable: newGraveyardTableImpl(schemaName, tableName, alias),
		NEW:            newGraveyardTableImpl("", "new", ""),
	}
}

func newGraveyardTableImpl(schemaName, tableName, alias string) graveyardTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		ZoneIDColumn   = mysql.IntegerColumn("zone_id")
		XColumn        = mysql.FloatColumn("x")
		YColumn        = mysql.FloatColumn("y")
		ZColumn        = mysql.FloatColumn("z")
		HeadingColumn  = mysql.FloatColumn("heading")
		allColumns     = mysql.ColumnList{IDColumn, ZoneIDColumn, XColumn, YColumn, ZColumn, HeadingColumn}
		mutableColumns = mysql.ColumnList{ZoneIDColumn, XColumn, YColumn, ZColumn, HeadingColumn}
		defaultColumns = mysql.ColumnList{ZoneIDColumn, XColumn, YColumn, ZColumn, HeadingColumn}
	)

	return graveyardTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		ZoneID:  ZoneIDColumn,
		X:       XColumn,
		Y:       YColumn,
		Z:       ZColumn,
		Heading: HeadingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
