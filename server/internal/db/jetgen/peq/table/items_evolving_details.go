//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItemsEvolvingDetails = newItemsEvolvingDetailsTable("peq", "items_evolving_details", "")

type itemsEvolvingDetailsTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnInteger
	ItemEvoID       mysql.ColumnInteger // items.evoid
	ItemEvolveLevel mysql.ColumnInteger // items.evolvinglevel
	ItemID          mysql.ColumnInteger // items.id
	Type            mysql.ColumnInteger
	SubType         mysql.ColumnString
	RequiredAmount  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ItemsEvolvingDetailsTable struct {
	itemsEvolvingDetailsTable

	NEW itemsEvolvingDetailsTable
}

// AS creates new ItemsEvolvingDetailsTable with assigned alias
func (a ItemsEvolvingDetailsTable) AS(alias string) *ItemsEvolvingDetailsTable {
	return newItemsEvolvingDetailsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemsEvolvingDetailsTable with assigned schema name
func (a ItemsEvolvingDetailsTable) FromSchema(schemaName string) *ItemsEvolvingDetailsTable {
	return newItemsEvolvingDetailsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemsEvolvingDetailsTable with assigned table prefix
func (a ItemsEvolvingDetailsTable) WithPrefix(prefix string) *ItemsEvolvingDetailsTable {
	return newItemsEvolvingDetailsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemsEvolvingDetailsTable with assigned table suffix
func (a ItemsEvolvingDetailsTable) WithSuffix(suffix string) *ItemsEvolvingDetailsTable {
	return newItemsEvolvingDetailsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemsEvolvingDetailsTable(schemaName, tableName, alias string) *ItemsEvolvingDetailsTable {
	return &ItemsEvolvingDetailsTable{
		itemsEvolvingDetailsTable: newItemsEvolvingDetailsTableImpl(schemaName, tableName, alias),
		NEW:                       newItemsEvolvingDetailsTableImpl("", "new", ""),
	}
}

func newItemsEvolvingDetailsTableImpl(schemaName, tableName, alias string) itemsEvolvingDetailsTable {
	var (
		IDColumn              = mysql.IntegerColumn("id")
		ItemEvoIDColumn       = mysql.IntegerColumn("item_evo_id")
		ItemEvolveLevelColumn = mysql.IntegerColumn("item_evolve_level")
		ItemIDColumn          = mysql.IntegerColumn("item_id")
		TypeColumn            = mysql.IntegerColumn("type")
		SubTypeColumn         = mysql.StringColumn("sub_type")
		RequiredAmountColumn  = mysql.IntegerColumn("required_amount")
		allColumns            = mysql.ColumnList{IDColumn, ItemEvoIDColumn, ItemEvolveLevelColumn, ItemIDColumn, TypeColumn, SubTypeColumn, RequiredAmountColumn}
		mutableColumns        = mysql.ColumnList{ItemEvoIDColumn, ItemEvolveLevelColumn, ItemIDColumn, TypeColumn, SubTypeColumn, RequiredAmountColumn}
		defaultColumns        = mysql.ColumnList{ItemEvoIDColumn, ItemEvolveLevelColumn, ItemIDColumn, TypeColumn, SubTypeColumn}
	)

	return itemsEvolvingDetailsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ItemEvoID:       ItemEvoIDColumn,
		ItemEvolveLevel: ItemEvolveLevelColumn,
		ItemID:          ItemIDColumn,
		Type:            TypeColumn,
		SubType:         SubTypeColumn,
		RequiredAmount:  RequiredAmountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
