//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PetsEquipmentsetEntries = newPetsEquipmentsetEntriesTable("peq", "pets_equipmentset_entries", "")

type petsEquipmentsetEntriesTable struct {
	mysql.Table

	// Columns
	SetID  mysql.ColumnInteger
	Slot   mysql.ColumnInteger
	ItemID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PetsEquipmentsetEntriesTable struct {
	petsEquipmentsetEntriesTable

	NEW petsEquipmentsetEntriesTable
}

// AS creates new PetsEquipmentsetEntriesTable with assigned alias
func (a PetsEquipmentsetEntriesTable) AS(alias string) *PetsEquipmentsetEntriesTable {
	return newPetsEquipmentsetEntriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PetsEquipmentsetEntriesTable with assigned schema name
func (a PetsEquipmentsetEntriesTable) FromSchema(schemaName string) *PetsEquipmentsetEntriesTable {
	return newPetsEquipmentsetEntriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PetsEquipmentsetEntriesTable with assigned table prefix
func (a PetsEquipmentsetEntriesTable) WithPrefix(prefix string) *PetsEquipmentsetEntriesTable {
	return newPetsEquipmentsetEntriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PetsEquipmentsetEntriesTable with assigned table suffix
func (a PetsEquipmentsetEntriesTable) WithSuffix(suffix string) *PetsEquipmentsetEntriesTable {
	return newPetsEquipmentsetEntriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPetsEquipmentsetEntriesTable(schemaName, tableName, alias string) *PetsEquipmentsetEntriesTable {
	return &PetsEquipmentsetEntriesTable{
		petsEquipmentsetEntriesTable: newPetsEquipmentsetEntriesTableImpl(schemaName, tableName, alias),
		NEW:                          newPetsEquipmentsetEntriesTableImpl("", "new", ""),
	}
}

func newPetsEquipmentsetEntriesTableImpl(schemaName, tableName, alias string) petsEquipmentsetEntriesTable {
	var (
		SetIDColumn    = mysql.IntegerColumn("set_id")
		SlotColumn     = mysql.IntegerColumn("slot")
		ItemIDColumn   = mysql.IntegerColumn("item_id")
		allColumns     = mysql.ColumnList{SetIDColumn, SlotColumn, ItemIDColumn}
		mutableColumns = mysql.ColumnList{ItemIDColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return petsEquipmentsetEntriesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SetID:  SetIDColumn,
		Slot:   SlotColumn,
		ItemID: ItemIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
