//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var GroupLeaders = newGroupLeadersTable("peq", "group_leaders", "")

type groupLeadersTable struct {
	mysql.Table

	// Columns
	Gid           mysql.ColumnInteger
	Leadername    mysql.ColumnString
	Marknpc       mysql.ColumnString
	Leadershipaa  mysql.ColumnBlob
	Maintank      mysql.ColumnString
	Assist        mysql.ColumnString
	Puller        mysql.ColumnString
	Mentoree      mysql.ColumnString
	MentorPercent mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type GroupLeadersTable struct {
	groupLeadersTable

	NEW groupLeadersTable
}

// AS creates new GroupLeadersTable with assigned alias
func (a GroupLeadersTable) AS(alias string) *GroupLeadersTable {
	return newGroupLeadersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GroupLeadersTable with assigned schema name
func (a GroupLeadersTable) FromSchema(schemaName string) *GroupLeadersTable {
	return newGroupLeadersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GroupLeadersTable with assigned table prefix
func (a GroupLeadersTable) WithPrefix(prefix string) *GroupLeadersTable {
	return newGroupLeadersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GroupLeadersTable with assigned table suffix
func (a GroupLeadersTable) WithSuffix(suffix string) *GroupLeadersTable {
	return newGroupLeadersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGroupLeadersTable(schemaName, tableName, alias string) *GroupLeadersTable {
	return &GroupLeadersTable{
		groupLeadersTable: newGroupLeadersTableImpl(schemaName, tableName, alias),
		NEW:               newGroupLeadersTableImpl("", "new", ""),
	}
}

func newGroupLeadersTableImpl(schemaName, tableName, alias string) groupLeadersTable {
	var (
		GidColumn           = mysql.IntegerColumn("gid")
		LeadernameColumn    = mysql.StringColumn("leadername")
		MarknpcColumn       = mysql.StringColumn("marknpc")
		LeadershipaaColumn  = mysql.BlobColumn("leadershipaa")
		MaintankColumn      = mysql.StringColumn("maintank")
		AssistColumn        = mysql.StringColumn("assist")
		PullerColumn        = mysql.StringColumn("puller")
		MentoreeColumn      = mysql.StringColumn("mentoree")
		MentorPercentColumn = mysql.IntegerColumn("mentor_percent")
		allColumns          = mysql.ColumnList{GidColumn, LeadernameColumn, MarknpcColumn, LeadershipaaColumn, MaintankColumn, AssistColumn, PullerColumn, MentoreeColumn, MentorPercentColumn}
		mutableColumns      = mysql.ColumnList{LeadernameColumn, MarknpcColumn, LeadershipaaColumn, MaintankColumn, AssistColumn, PullerColumn, MentoreeColumn, MentorPercentColumn}
		defaultColumns      = mysql.ColumnList{GidColumn, LeadernameColumn, MarknpcColumn, MaintankColumn, AssistColumn, PullerColumn, MentorPercentColumn}
	)

	return groupLeadersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Gid:           GidColumn,
		Leadername:    LeadernameColumn,
		Marknpc:       MarknpcColumn,
		Leadershipaa:  LeadershipaaColumn,
		Maintank:      MaintankColumn,
		Assist:        AssistColumn,
		Puller:        PullerColumn,
		Mentoree:      MentoreeColumn,
		MentorPercent: MentorPercentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
