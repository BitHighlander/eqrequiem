//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ContentFlags = newContentFlagsTable("peq", "content_flags", "")

type contentFlagsTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnInteger
	FlagName mysql.ColumnString
	Enabled  mysql.ColumnInteger
	Notes    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ContentFlagsTable struct {
	contentFlagsTable

	NEW contentFlagsTable
}

// AS creates new ContentFlagsTable with assigned alias
func (a ContentFlagsTable) AS(alias string) *ContentFlagsTable {
	return newContentFlagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContentFlagsTable with assigned schema name
func (a ContentFlagsTable) FromSchema(schemaName string) *ContentFlagsTable {
	return newContentFlagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContentFlagsTable with assigned table prefix
func (a ContentFlagsTable) WithPrefix(prefix string) *ContentFlagsTable {
	return newContentFlagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContentFlagsTable with assigned table suffix
func (a ContentFlagsTable) WithSuffix(suffix string) *ContentFlagsTable {
	return newContentFlagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContentFlagsTable(schemaName, tableName, alias string) *ContentFlagsTable {
	return &ContentFlagsTable{
		contentFlagsTable: newContentFlagsTableImpl(schemaName, tableName, alias),
		NEW:               newContentFlagsTableImpl("", "new", ""),
	}
}

func newContentFlagsTableImpl(schemaName, tableName, alias string) contentFlagsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		FlagNameColumn = mysql.StringColumn("flag_name")
		EnabledColumn  = mysql.IntegerColumn("enabled")
		NotesColumn    = mysql.StringColumn("notes")
		allColumns     = mysql.ColumnList{IDColumn, FlagNameColumn, EnabledColumn, NotesColumn}
		mutableColumns = mysql.ColumnList{FlagNameColumn, EnabledColumn, NotesColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return contentFlagsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		FlagName: FlagNameColumn,
		Enabled:  EnabledColumn,
		Notes:    NotesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
