//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Spawn2Disabled = newSpawn2DisabledTable("peq", "spawn2_disabled", "")

type spawn2DisabledTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	Spawn2ID   mysql.ColumnInteger
	InstanceID mysql.ColumnInteger
	Disabled   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type Spawn2DisabledTable struct {
	spawn2DisabledTable

	NEW spawn2DisabledTable
}

// AS creates new Spawn2DisabledTable with assigned alias
func (a Spawn2DisabledTable) AS(alias string) *Spawn2DisabledTable {
	return newSpawn2DisabledTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new Spawn2DisabledTable with assigned schema name
func (a Spawn2DisabledTable) FromSchema(schemaName string) *Spawn2DisabledTable {
	return newSpawn2DisabledTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new Spawn2DisabledTable with assigned table prefix
func (a Spawn2DisabledTable) WithPrefix(prefix string) *Spawn2DisabledTable {
	return newSpawn2DisabledTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new Spawn2DisabledTable with assigned table suffix
func (a Spawn2DisabledTable) WithSuffix(suffix string) *Spawn2DisabledTable {
	return newSpawn2DisabledTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpawn2DisabledTable(schemaName, tableName, alias string) *Spawn2DisabledTable {
	return &Spawn2DisabledTable{
		spawn2DisabledTable: newSpawn2DisabledTableImpl(schemaName, tableName, alias),
		NEW:                 newSpawn2DisabledTableImpl("", "new", ""),
	}
}

func newSpawn2DisabledTableImpl(schemaName, tableName, alias string) spawn2DisabledTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		Spawn2IDColumn   = mysql.IntegerColumn("spawn2_id")
		InstanceIDColumn = mysql.IntegerColumn("instance_id")
		DisabledColumn   = mysql.IntegerColumn("disabled")
		allColumns       = mysql.ColumnList{IDColumn, Spawn2IDColumn, InstanceIDColumn, DisabledColumn}
		mutableColumns   = mysql.ColumnList{Spawn2IDColumn, InstanceIDColumn, DisabledColumn}
		defaultColumns   = mysql.ColumnList{InstanceIDColumn, DisabledColumn}
	)

	return spawn2DisabledTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Spawn2ID:   Spawn2IDColumn,
		InstanceID: InstanceIDColumn,
		Disabled:   DisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
