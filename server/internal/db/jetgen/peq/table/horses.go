//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Horses = newHorsesTable("peq", "horses", "")

type horsesTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	Filename    mysql.ColumnString
	Race        mysql.ColumnInteger
	Gender      mysql.ColumnBool
	Texture     mysql.ColumnInteger
	Helmtexture mysql.ColumnInteger
	Mountspeed  mysql.ColumnFloat
	Notes       mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type HorsesTable struct {
	horsesTable

	NEW horsesTable
}

// AS creates new HorsesTable with assigned alias
func (a HorsesTable) AS(alias string) *HorsesTable {
	return newHorsesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new HorsesTable with assigned schema name
func (a HorsesTable) FromSchema(schemaName string) *HorsesTable {
	return newHorsesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new HorsesTable with assigned table prefix
func (a HorsesTable) WithPrefix(prefix string) *HorsesTable {
	return newHorsesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new HorsesTable with assigned table suffix
func (a HorsesTable) WithSuffix(suffix string) *HorsesTable {
	return newHorsesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newHorsesTable(schemaName, tableName, alias string) *HorsesTable {
	return &HorsesTable{
		horsesTable: newHorsesTableImpl(schemaName, tableName, alias),
		NEW:         newHorsesTableImpl("", "new", ""),
	}
}

func newHorsesTableImpl(schemaName, tableName, alias string) horsesTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		FilenameColumn    = mysql.StringColumn("filename")
		RaceColumn        = mysql.IntegerColumn("race")
		GenderColumn      = mysql.BoolColumn("gender")
		TextureColumn     = mysql.IntegerColumn("texture")
		HelmtextureColumn = mysql.IntegerColumn("helmtexture")
		MountspeedColumn  = mysql.FloatColumn("mountspeed")
		NotesColumn       = mysql.StringColumn("notes")
		allColumns        = mysql.ColumnList{IDColumn, FilenameColumn, RaceColumn, GenderColumn, TextureColumn, HelmtextureColumn, MountspeedColumn, NotesColumn}
		mutableColumns    = mysql.ColumnList{FilenameColumn, RaceColumn, GenderColumn, TextureColumn, HelmtextureColumn, MountspeedColumn, NotesColumn}
		defaultColumns    = mysql.ColumnList{FilenameColumn, RaceColumn, GenderColumn, TextureColumn, HelmtextureColumn, MountspeedColumn, NotesColumn}
	)

	return horsesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Filename:    FilenameColumn,
		Race:        RaceColumn,
		Gender:      GenderColumn,
		Texture:     TextureColumn,
		Helmtexture: HelmtextureColumn,
		Mountspeed:  MountspeedColumn,
		Notes:       NotesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
