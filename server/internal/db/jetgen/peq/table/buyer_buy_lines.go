//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var BuyerBuyLines = newBuyerBuyLinesTable("peq", "buyer_buy_lines", "")

type buyerBuyLinesTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	BuyerID   mysql.ColumnInteger
	CharID    mysql.ColumnInteger
	BuySlotID mysql.ColumnInteger
	ItemID    mysql.ColumnInteger
	ItemQty   mysql.ColumnInteger
	ItemPrice mysql.ColumnInteger
	ItemIcon  mysql.ColumnInteger
	ItemName  mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type BuyerBuyLinesTable struct {
	buyerBuyLinesTable

	NEW buyerBuyLinesTable
}

// AS creates new BuyerBuyLinesTable with assigned alias
func (a BuyerBuyLinesTable) AS(alias string) *BuyerBuyLinesTable {
	return newBuyerBuyLinesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BuyerBuyLinesTable with assigned schema name
func (a BuyerBuyLinesTable) FromSchema(schemaName string) *BuyerBuyLinesTable {
	return newBuyerBuyLinesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BuyerBuyLinesTable with assigned table prefix
func (a BuyerBuyLinesTable) WithPrefix(prefix string) *BuyerBuyLinesTable {
	return newBuyerBuyLinesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BuyerBuyLinesTable with assigned table suffix
func (a BuyerBuyLinesTable) WithSuffix(suffix string) *BuyerBuyLinesTable {
	return newBuyerBuyLinesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBuyerBuyLinesTable(schemaName, tableName, alias string) *BuyerBuyLinesTable {
	return &BuyerBuyLinesTable{
		buyerBuyLinesTable: newBuyerBuyLinesTableImpl(schemaName, tableName, alias),
		NEW:                newBuyerBuyLinesTableImpl("", "new", ""),
	}
}

func newBuyerBuyLinesTableImpl(schemaName, tableName, alias string) buyerBuyLinesTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		BuyerIDColumn   = mysql.IntegerColumn("buyer_id")
		CharIDColumn    = mysql.IntegerColumn("char_id")
		BuySlotIDColumn = mysql.IntegerColumn("buy_slot_id")
		ItemIDColumn    = mysql.IntegerColumn("item_id")
		ItemQtyColumn   = mysql.IntegerColumn("item_qty")
		ItemPriceColumn = mysql.IntegerColumn("item_price")
		ItemIconColumn  = mysql.IntegerColumn("item_icon")
		ItemNameColumn  = mysql.StringColumn("item_name")
		allColumns      = mysql.ColumnList{IDColumn, BuyerIDColumn, CharIDColumn, BuySlotIDColumn, ItemIDColumn, ItemQtyColumn, ItemPriceColumn, ItemIconColumn, ItemNameColumn}
		mutableColumns  = mysql.ColumnList{BuyerIDColumn, CharIDColumn, BuySlotIDColumn, ItemIDColumn, ItemQtyColumn, ItemPriceColumn, ItemIconColumn, ItemNameColumn}
		defaultColumns  = mysql.ColumnList{BuyerIDColumn, CharIDColumn, BuySlotIDColumn, ItemIDColumn, ItemQtyColumn, ItemPriceColumn, ItemIconColumn, ItemNameColumn}
	)

	return buyerBuyLinesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		BuyerID:   BuyerIDColumn,
		CharID:    CharIDColumn,
		BuySlotID: BuySlotIDColumn,
		ItemID:    ItemIDColumn,
		ItemQty:   ItemQtyColumn,
		ItemPrice: ItemPriceColumn,
		ItemIcon:  ItemIconColumn,
		ItemName:  ItemNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
