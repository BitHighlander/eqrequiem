//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CommandSubsettings = newCommandSubsettingsTable("peq", "command_subsettings", "")

type commandSubsettingsTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnInteger
	ParentCommand   mysql.ColumnString
	SubCommand      mysql.ColumnString
	AccessLevel     mysql.ColumnInteger
	TopLevelAliases mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CommandSubsettingsTable struct {
	commandSubsettingsTable

	NEW commandSubsettingsTable
}

// AS creates new CommandSubsettingsTable with assigned alias
func (a CommandSubsettingsTable) AS(alias string) *CommandSubsettingsTable {
	return newCommandSubsettingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommandSubsettingsTable with assigned schema name
func (a CommandSubsettingsTable) FromSchema(schemaName string) *CommandSubsettingsTable {
	return newCommandSubsettingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommandSubsettingsTable with assigned table prefix
func (a CommandSubsettingsTable) WithPrefix(prefix string) *CommandSubsettingsTable {
	return newCommandSubsettingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommandSubsettingsTable with assigned table suffix
func (a CommandSubsettingsTable) WithSuffix(suffix string) *CommandSubsettingsTable {
	return newCommandSubsettingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommandSubsettingsTable(schemaName, tableName, alias string) *CommandSubsettingsTable {
	return &CommandSubsettingsTable{
		commandSubsettingsTable: newCommandSubsettingsTableImpl(schemaName, tableName, alias),
		NEW:                     newCommandSubsettingsTableImpl("", "new", ""),
	}
}

func newCommandSubsettingsTableImpl(schemaName, tableName, alias string) commandSubsettingsTable {
	var (
		IDColumn              = mysql.IntegerColumn("id")
		ParentCommandColumn   = mysql.StringColumn("parent_command")
		SubCommandColumn      = mysql.StringColumn("sub_command")
		AccessLevelColumn     = mysql.IntegerColumn("access_level")
		TopLevelAliasesColumn = mysql.StringColumn("top_level_aliases")
		allColumns            = mysql.ColumnList{IDColumn, ParentCommandColumn, SubCommandColumn, AccessLevelColumn, TopLevelAliasesColumn}
		mutableColumns        = mysql.ColumnList{ParentCommandColumn, SubCommandColumn, AccessLevelColumn, TopLevelAliasesColumn}
		defaultColumns        = mysql.ColumnList{AccessLevelColumn}
	)

	return commandSubsettingsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ParentCommand:   ParentCommandColumn,
		SubCommand:      SubCommandColumn,
		AccessLevel:     AccessLevelColumn,
		TopLevelAliases: TopLevelAliasesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
