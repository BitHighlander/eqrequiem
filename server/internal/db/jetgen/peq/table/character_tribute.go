//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterTribute = newCharacterTributeTable("peq", "character_tribute", "")

type characterTributeTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	CharacterID mysql.ColumnInteger
	Tier        mysql.ColumnInteger
	Tribute     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterTributeTable struct {
	characterTributeTable

	NEW characterTributeTable
}

// AS creates new CharacterTributeTable with assigned alias
func (a CharacterTributeTable) AS(alias string) *CharacterTributeTable {
	return newCharacterTributeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterTributeTable with assigned schema name
func (a CharacterTributeTable) FromSchema(schemaName string) *CharacterTributeTable {
	return newCharacterTributeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterTributeTable with assigned table prefix
func (a CharacterTributeTable) WithPrefix(prefix string) *CharacterTributeTable {
	return newCharacterTributeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterTributeTable with assigned table suffix
func (a CharacterTributeTable) WithSuffix(suffix string) *CharacterTributeTable {
	return newCharacterTributeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterTributeTable(schemaName, tableName, alias string) *CharacterTributeTable {
	return &CharacterTributeTable{
		characterTributeTable: newCharacterTributeTableImpl(schemaName, tableName, alias),
		NEW:                   newCharacterTributeTableImpl("", "new", ""),
	}
}

func newCharacterTributeTableImpl(schemaName, tableName, alias string) characterTributeTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		CharacterIDColumn = mysql.IntegerColumn("character_id")
		TierColumn        = mysql.IntegerColumn("tier")
		TributeColumn     = mysql.IntegerColumn("tribute")
		allColumns        = mysql.ColumnList{IDColumn, CharacterIDColumn, TierColumn, TributeColumn}
		mutableColumns    = mysql.ColumnList{CharacterIDColumn, TierColumn, TributeColumn}
		defaultColumns    = mysql.ColumnList{CharacterIDColumn, TierColumn, TributeColumn}
	)

	return characterTributeTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CharacterID: CharacterIDColumn,
		Tier:        TierColumn,
		Tribute:     TributeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
