//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpellBuckets = newSpellBucketsTable("peq", "spell_buckets", "")

type spellBucketsTable struct {
	mysql.Table

	// Columns
	SpellID          mysql.ColumnInteger
	BucketName       mysql.ColumnString
	BucketValue      mysql.ColumnString
	BucketComparison mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpellBucketsTable struct {
	spellBucketsTable

	NEW spellBucketsTable
}

// AS creates new SpellBucketsTable with assigned alias
func (a SpellBucketsTable) AS(alias string) *SpellBucketsTable {
	return newSpellBucketsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpellBucketsTable with assigned schema name
func (a SpellBucketsTable) FromSchema(schemaName string) *SpellBucketsTable {
	return newSpellBucketsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpellBucketsTable with assigned table prefix
func (a SpellBucketsTable) WithPrefix(prefix string) *SpellBucketsTable {
	return newSpellBucketsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpellBucketsTable with assigned table suffix
func (a SpellBucketsTable) WithSuffix(suffix string) *SpellBucketsTable {
	return newSpellBucketsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpellBucketsTable(schemaName, tableName, alias string) *SpellBucketsTable {
	return &SpellBucketsTable{
		spellBucketsTable: newSpellBucketsTableImpl(schemaName, tableName, alias),
		NEW:               newSpellBucketsTableImpl("", "new", ""),
	}
}

func newSpellBucketsTableImpl(schemaName, tableName, alias string) spellBucketsTable {
	var (
		SpellIDColumn          = mysql.IntegerColumn("spell_id")
		BucketNameColumn       = mysql.StringColumn("bucket_name")
		BucketValueColumn      = mysql.StringColumn("bucket_value")
		BucketComparisonColumn = mysql.IntegerColumn("bucket_comparison")
		allColumns             = mysql.ColumnList{SpellIDColumn, BucketNameColumn, BucketValueColumn, BucketComparisonColumn}
		mutableColumns         = mysql.ColumnList{BucketNameColumn, BucketValueColumn, BucketComparisonColumn}
		defaultColumns         = mysql.ColumnList{BucketNameColumn, BucketValueColumn, BucketComparisonColumn}
	)

	return spellBucketsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SpellID:          SpellIDColumn,
		BucketName:       BucketNameColumn,
		BucketValue:      BucketValueColumn,
		BucketComparison: BucketComparisonColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
