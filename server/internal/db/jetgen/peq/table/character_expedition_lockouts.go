//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterExpeditionLockouts = newCharacterExpeditionLockoutsTable("peq", "character_expedition_lockouts", "")

type characterExpeditionLockoutsTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnInteger
	CharacterID        mysql.ColumnInteger
	ExpeditionName     mysql.ColumnString
	EventName          mysql.ColumnString
	ExpireTime         mysql.ColumnTimestamp
	Duration           mysql.ColumnInteger
	FromExpeditionUUID mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterExpeditionLockoutsTable struct {
	characterExpeditionLockoutsTable

	NEW characterExpeditionLockoutsTable
}

// AS creates new CharacterExpeditionLockoutsTable with assigned alias
func (a CharacterExpeditionLockoutsTable) AS(alias string) *CharacterExpeditionLockoutsTable {
	return newCharacterExpeditionLockoutsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterExpeditionLockoutsTable with assigned schema name
func (a CharacterExpeditionLockoutsTable) FromSchema(schemaName string) *CharacterExpeditionLockoutsTable {
	return newCharacterExpeditionLockoutsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterExpeditionLockoutsTable with assigned table prefix
func (a CharacterExpeditionLockoutsTable) WithPrefix(prefix string) *CharacterExpeditionLockoutsTable {
	return newCharacterExpeditionLockoutsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterExpeditionLockoutsTable with assigned table suffix
func (a CharacterExpeditionLockoutsTable) WithSuffix(suffix string) *CharacterExpeditionLockoutsTable {
	return newCharacterExpeditionLockoutsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterExpeditionLockoutsTable(schemaName, tableName, alias string) *CharacterExpeditionLockoutsTable {
	return &CharacterExpeditionLockoutsTable{
		characterExpeditionLockoutsTable: newCharacterExpeditionLockoutsTableImpl(schemaName, tableName, alias),
		NEW:                              newCharacterExpeditionLockoutsTableImpl("", "new", ""),
	}
}

func newCharacterExpeditionLockoutsTableImpl(schemaName, tableName, alias string) characterExpeditionLockoutsTable {
	var (
		IDColumn                 = mysql.IntegerColumn("id")
		CharacterIDColumn        = mysql.IntegerColumn("character_id")
		ExpeditionNameColumn     = mysql.StringColumn("expedition_name")
		EventNameColumn          = mysql.StringColumn("event_name")
		ExpireTimeColumn         = mysql.TimestampColumn("expire_time")
		DurationColumn           = mysql.IntegerColumn("duration")
		FromExpeditionUUIDColumn = mysql.StringColumn("from_expedition_uuid")
		allColumns               = mysql.ColumnList{IDColumn, CharacterIDColumn, ExpeditionNameColumn, EventNameColumn, ExpireTimeColumn, DurationColumn, FromExpeditionUUIDColumn}
		mutableColumns           = mysql.ColumnList{CharacterIDColumn, ExpeditionNameColumn, EventNameColumn, ExpireTimeColumn, DurationColumn, FromExpeditionUUIDColumn}
		defaultColumns           = mysql.ColumnList{ExpireTimeColumn, DurationColumn}
	)

	return characterExpeditionLockoutsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		CharacterID:        CharacterIDColumn,
		ExpeditionName:     ExpeditionNameColumn,
		EventName:          EventNameColumn,
		ExpireTime:         ExpireTimeColumn,
		Duration:           DurationColumn,
		FromExpeditionUUID: FromExpeditionUUIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
