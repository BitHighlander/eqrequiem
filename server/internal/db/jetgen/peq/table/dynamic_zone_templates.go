//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DynamicZoneTemplates = newDynamicZoneTemplatesTable("peq", "dynamic_zone_templates", "")

type dynamicZoneTemplatesTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnInteger
	ZoneID          mysql.ColumnInteger
	ZoneVersion     mysql.ColumnInteger
	Name            mysql.ColumnString
	MinPlayers      mysql.ColumnInteger
	MaxPlayers      mysql.ColumnInteger
	DurationSeconds mysql.ColumnInteger
	DzSwitchID      mysql.ColumnInteger
	CompassZoneID   mysql.ColumnInteger
	CompassX        mysql.ColumnFloat
	CompassY        mysql.ColumnFloat
	CompassZ        mysql.ColumnFloat
	ReturnZoneID    mysql.ColumnInteger
	ReturnX         mysql.ColumnFloat
	ReturnY         mysql.ColumnFloat
	ReturnZ         mysql.ColumnFloat
	ReturnH         mysql.ColumnFloat
	OverrideZoneIn  mysql.ColumnInteger
	ZoneInX         mysql.ColumnFloat
	ZoneInY         mysql.ColumnFloat
	ZoneInZ         mysql.ColumnFloat
	ZoneInH         mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type DynamicZoneTemplatesTable struct {
	dynamicZoneTemplatesTable

	NEW dynamicZoneTemplatesTable
}

// AS creates new DynamicZoneTemplatesTable with assigned alias
func (a DynamicZoneTemplatesTable) AS(alias string) *DynamicZoneTemplatesTable {
	return newDynamicZoneTemplatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DynamicZoneTemplatesTable with assigned schema name
func (a DynamicZoneTemplatesTable) FromSchema(schemaName string) *DynamicZoneTemplatesTable {
	return newDynamicZoneTemplatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DynamicZoneTemplatesTable with assigned table prefix
func (a DynamicZoneTemplatesTable) WithPrefix(prefix string) *DynamicZoneTemplatesTable {
	return newDynamicZoneTemplatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DynamicZoneTemplatesTable with assigned table suffix
func (a DynamicZoneTemplatesTable) WithSuffix(suffix string) *DynamicZoneTemplatesTable {
	return newDynamicZoneTemplatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDynamicZoneTemplatesTable(schemaName, tableName, alias string) *DynamicZoneTemplatesTable {
	return &DynamicZoneTemplatesTable{
		dynamicZoneTemplatesTable: newDynamicZoneTemplatesTableImpl(schemaName, tableName, alias),
		NEW:                       newDynamicZoneTemplatesTableImpl("", "new", ""),
	}
}

func newDynamicZoneTemplatesTableImpl(schemaName, tableName, alias string) dynamicZoneTemplatesTable {
	var (
		IDColumn              = mysql.IntegerColumn("id")
		ZoneIDColumn          = mysql.IntegerColumn("zone_id")
		ZoneVersionColumn     = mysql.IntegerColumn("zone_version")
		NameColumn            = mysql.StringColumn("name")
		MinPlayersColumn      = mysql.IntegerColumn("min_players")
		MaxPlayersColumn      = mysql.IntegerColumn("max_players")
		DurationSecondsColumn = mysql.IntegerColumn("duration_seconds")
		DzSwitchIDColumn      = mysql.IntegerColumn("dz_switch_id")
		CompassZoneIDColumn   = mysql.IntegerColumn("compass_zone_id")
		CompassXColumn        = mysql.FloatColumn("compass_x")
		CompassYColumn        = mysql.FloatColumn("compass_y")
		CompassZColumn        = mysql.FloatColumn("compass_z")
		ReturnZoneIDColumn    = mysql.IntegerColumn("return_zone_id")
		ReturnXColumn         = mysql.FloatColumn("return_x")
		ReturnYColumn         = mysql.FloatColumn("return_y")
		ReturnZColumn         = mysql.FloatColumn("return_z")
		ReturnHColumn         = mysql.FloatColumn("return_h")
		OverrideZoneInColumn  = mysql.IntegerColumn("override_zone_in")
		ZoneInXColumn         = mysql.FloatColumn("zone_in_x")
		ZoneInYColumn         = mysql.FloatColumn("zone_in_y")
		ZoneInZColumn         = mysql.FloatColumn("zone_in_z")
		ZoneInHColumn         = mysql.FloatColumn("zone_in_h")
		allColumns            = mysql.ColumnList{IDColumn, ZoneIDColumn, ZoneVersionColumn, NameColumn, MinPlayersColumn, MaxPlayersColumn, DurationSecondsColumn, DzSwitchIDColumn, CompassZoneIDColumn, CompassXColumn, CompassYColumn, CompassZColumn, ReturnZoneIDColumn, ReturnXColumn, ReturnYColumn, ReturnZColumn, ReturnHColumn, OverrideZoneInColumn, ZoneInXColumn, ZoneInYColumn, ZoneInZColumn, ZoneInHColumn}
		mutableColumns        = mysql.ColumnList{ZoneIDColumn, ZoneVersionColumn, NameColumn, MinPlayersColumn, MaxPlayersColumn, DurationSecondsColumn, DzSwitchIDColumn, CompassZoneIDColumn, CompassXColumn, CompassYColumn, CompassZColumn, ReturnZoneIDColumn, ReturnXColumn, ReturnYColumn, ReturnZColumn, ReturnHColumn, OverrideZoneInColumn, ZoneInXColumn, ZoneInYColumn, ZoneInZColumn, ZoneInHColumn}
		defaultColumns        = mysql.ColumnList{ZoneIDColumn, ZoneVersionColumn, NameColumn, MinPlayersColumn, MaxPlayersColumn, DurationSecondsColumn, DzSwitchIDColumn, CompassZoneIDColumn, CompassXColumn, CompassYColumn, CompassZColumn, ReturnZoneIDColumn, ReturnXColumn, ReturnYColumn, ReturnZColumn, ReturnHColumn, OverrideZoneInColumn, ZoneInXColumn, ZoneInYColumn, ZoneInZColumn, ZoneInHColumn}
	)

	return dynamicZoneTemplatesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		ZoneID:          ZoneIDColumn,
		ZoneVersion:     ZoneVersionColumn,
		Name:            NameColumn,
		MinPlayers:      MinPlayersColumn,
		MaxPlayers:      MaxPlayersColumn,
		DurationSeconds: DurationSecondsColumn,
		DzSwitchID:      DzSwitchIDColumn,
		CompassZoneID:   CompassZoneIDColumn,
		CompassX:        CompassXColumn,
		CompassY:        CompassYColumn,
		CompassZ:        CompassZColumn,
		ReturnZoneID:    ReturnZoneIDColumn,
		ReturnX:         ReturnXColumn,
		ReturnY:         ReturnYColumn,
		ReturnZ:         ReturnZColumn,
		ReturnH:         ReturnHColumn,
		OverrideZoneIn:  OverrideZoneInColumn,
		ZoneInX:         ZoneInXColumn,
		ZoneInY:         ZoneInYColumn,
		ZoneInZ:         ZoneInZColumn,
		ZoneInH:         ZoneInHColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
