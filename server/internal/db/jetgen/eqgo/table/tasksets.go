//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Tasksets = newTasksetsTable("eqgo", "tasksets", "")

type tasksetsTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnInteger
	Taskid mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type TasksetsTable struct {
	tasksetsTable

	NEW tasksetsTable
}

// AS creates new TasksetsTable with assigned alias
func (a TasksetsTable) AS(alias string) *TasksetsTable {
	return newTasksetsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TasksetsTable with assigned schema name
func (a TasksetsTable) FromSchema(schemaName string) *TasksetsTable {
	return newTasksetsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TasksetsTable with assigned table prefix
func (a TasksetsTable) WithPrefix(prefix string) *TasksetsTable {
	return newTasksetsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TasksetsTable with assigned table suffix
func (a TasksetsTable) WithSuffix(suffix string) *TasksetsTable {
	return newTasksetsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTasksetsTable(schemaName, tableName, alias string) *TasksetsTable {
	return &TasksetsTable{
		tasksetsTable: newTasksetsTableImpl(schemaName, tableName, alias),
		NEW:           newTasksetsTableImpl("", "new", ""),
	}
}

func newTasksetsTableImpl(schemaName, tableName, alias string) tasksetsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		TaskidColumn   = mysql.IntegerColumn("taskid")
		allColumns     = mysql.ColumnList{IDColumn, TaskidColumn}
		mutableColumns = mysql.ColumnList{}
		defaultColumns = mysql.ColumnList{IDColumn, TaskidColumn}
	)

	return tasksetsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Taskid: TaskidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
