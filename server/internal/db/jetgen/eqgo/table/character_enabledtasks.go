//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterEnabledtasks = newCharacterEnabledtasksTable("eqgo", "character_enabledtasks", "")

type characterEnabledtasksTable struct {
	mysql.Table

	// Columns
	Charid mysql.ColumnInteger
	Taskid mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterEnabledtasksTable struct {
	characterEnabledtasksTable

	NEW characterEnabledtasksTable
}

// AS creates new CharacterEnabledtasksTable with assigned alias
func (a CharacterEnabledtasksTable) AS(alias string) *CharacterEnabledtasksTable {
	return newCharacterEnabledtasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterEnabledtasksTable with assigned schema name
func (a CharacterEnabledtasksTable) FromSchema(schemaName string) *CharacterEnabledtasksTable {
	return newCharacterEnabledtasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterEnabledtasksTable with assigned table prefix
func (a CharacterEnabledtasksTable) WithPrefix(prefix string) *CharacterEnabledtasksTable {
	return newCharacterEnabledtasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterEnabledtasksTable with assigned table suffix
func (a CharacterEnabledtasksTable) WithSuffix(suffix string) *CharacterEnabledtasksTable {
	return newCharacterEnabledtasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterEnabledtasksTable(schemaName, tableName, alias string) *CharacterEnabledtasksTable {
	return &CharacterEnabledtasksTable{
		characterEnabledtasksTable: newCharacterEnabledtasksTableImpl(schemaName, tableName, alias),
		NEW:                        newCharacterEnabledtasksTableImpl("", "new", ""),
	}
}

func newCharacterEnabledtasksTableImpl(schemaName, tableName, alias string) characterEnabledtasksTable {
	var (
		CharidColumn   = mysql.IntegerColumn("charid")
		TaskidColumn   = mysql.IntegerColumn("taskid")
		allColumns     = mysql.ColumnList{CharidColumn, TaskidColumn}
		mutableColumns = mysql.ColumnList{}
		defaultColumns = mysql.ColumnList{CharidColumn, TaskidColumn}
	)

	return characterEnabledtasksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Charid: CharidColumn,
		Taskid: TaskidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
