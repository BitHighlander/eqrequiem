//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpireUsers = newSpireUsersTable("eqgo", "spire_users", "")

type spireUsersTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnInteger
	UserName          mysql.ColumnString
	FullName          mysql.ColumnString
	FirstName         mysql.ColumnString
	LastName          mysql.ColumnString
	Email             mysql.ColumnString
	Avatar            mysql.ColumnString
	Provider          mysql.ColumnString
	Password          mysql.ColumnString
	IsAdmin           mysql.ColumnBool
	IsServerDeveloper mysql.ColumnBool
	CreatedAt         mysql.ColumnTimestamp
	UpdatedAt         mysql.ColumnTimestamp
	Deleted           mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpireUsersTable struct {
	spireUsersTable

	NEW spireUsersTable
}

// AS creates new SpireUsersTable with assigned alias
func (a SpireUsersTable) AS(alias string) *SpireUsersTable {
	return newSpireUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpireUsersTable with assigned schema name
func (a SpireUsersTable) FromSchema(schemaName string) *SpireUsersTable {
	return newSpireUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpireUsersTable with assigned table prefix
func (a SpireUsersTable) WithPrefix(prefix string) *SpireUsersTable {
	return newSpireUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpireUsersTable with assigned table suffix
func (a SpireUsersTable) WithSuffix(suffix string) *SpireUsersTable {
	return newSpireUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpireUsersTable(schemaName, tableName, alias string) *SpireUsersTable {
	return &SpireUsersTable{
		spireUsersTable: newSpireUsersTableImpl(schemaName, tableName, alias),
		NEW:             newSpireUsersTableImpl("", "new", ""),
	}
}

func newSpireUsersTableImpl(schemaName, tableName, alias string) spireUsersTable {
	var (
		IDColumn                = mysql.IntegerColumn("id")
		UserNameColumn          = mysql.StringColumn("user_name")
		FullNameColumn          = mysql.StringColumn("full_name")
		FirstNameColumn         = mysql.StringColumn("first_name")
		LastNameColumn          = mysql.StringColumn("last_name")
		EmailColumn             = mysql.StringColumn("email")
		AvatarColumn            = mysql.StringColumn("avatar")
		ProviderColumn          = mysql.StringColumn("provider")
		PasswordColumn          = mysql.StringColumn("password")
		IsAdminColumn           = mysql.BoolColumn("is_admin")
		IsServerDeveloperColumn = mysql.BoolColumn("is_server_developer")
		CreatedAtColumn         = mysql.TimestampColumn("created_at")
		UpdatedAtColumn         = mysql.TimestampColumn("updated_at")
		DeletedColumn           = mysql.TimestampColumn("deleted")
		allColumns              = mysql.ColumnList{IDColumn, UserNameColumn, FullNameColumn, FirstNameColumn, LastNameColumn, EmailColumn, AvatarColumn, ProviderColumn, PasswordColumn, IsAdminColumn, IsServerDeveloperColumn, CreatedAtColumn, UpdatedAtColumn, DeletedColumn}
		mutableColumns          = mysql.ColumnList{UserNameColumn, FullNameColumn, FirstNameColumn, LastNameColumn, EmailColumn, AvatarColumn, ProviderColumn, PasswordColumn, IsAdminColumn, IsServerDeveloperColumn, CreatedAtColumn, UpdatedAtColumn, DeletedColumn}
		defaultColumns          = mysql.ColumnList{IsAdminColumn, IsServerDeveloperColumn}
	)

	return spireUsersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		UserName:          UserNameColumn,
		FullName:          FullNameColumn,
		FirstName:         FirstNameColumn,
		LastName:          LastNameColumn,
		Email:             EmailColumn,
		Avatar:            AvatarColumn,
		Provider:          ProviderColumn,
		Password:          PasswordColumn,
		IsAdmin:           IsAdminColumn,
		IsServerDeveloper: IsServerDeveloperColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		Deleted:           DeletedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
