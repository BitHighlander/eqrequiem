//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AdventureTemplate = newAdventureTemplateTable("eqgo", "adventure_template", "")

type adventureTemplateTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnInteger
	Zone            mysql.ColumnString
	ZoneVersion     mysql.ColumnInteger
	IsHard          mysql.ColumnInteger
	IsRaid          mysql.ColumnInteger
	MinLevel        mysql.ColumnInteger
	MaxLevel        mysql.ColumnInteger
	Type            mysql.ColumnInteger
	TypeData        mysql.ColumnInteger
	TypeCount       mysql.ColumnInteger
	AssaX           mysql.ColumnFloat
	AssaY           mysql.ColumnFloat
	AssaZ           mysql.ColumnFloat
	AssaH           mysql.ColumnFloat
	Text            mysql.ColumnString
	Duration        mysql.ColumnInteger
	ZoneInTime      mysql.ColumnInteger
	WinPoints       mysql.ColumnInteger
	LosePoints      mysql.ColumnInteger
	Theme           mysql.ColumnInteger
	ZoneInZoneID    mysql.ColumnInteger
	ZoneInX         mysql.ColumnFloat
	ZoneInY         mysql.ColumnFloat
	ZoneInObjectID  mysql.ColumnInteger
	DestX           mysql.ColumnFloat
	DestY           mysql.ColumnFloat
	DestZ           mysql.ColumnFloat
	DestH           mysql.ColumnFloat
	GraveyardZoneID mysql.ColumnInteger
	GraveyardX      mysql.ColumnFloat
	GraveyardY      mysql.ColumnFloat
	GraveyardZ      mysql.ColumnFloat
	GraveyardRadius mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AdventureTemplateTable struct {
	adventureTemplateTable

	NEW adventureTemplateTable
}

// AS creates new AdventureTemplateTable with assigned alias
func (a AdventureTemplateTable) AS(alias string) *AdventureTemplateTable {
	return newAdventureTemplateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AdventureTemplateTable with assigned schema name
func (a AdventureTemplateTable) FromSchema(schemaName string) *AdventureTemplateTable {
	return newAdventureTemplateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AdventureTemplateTable with assigned table prefix
func (a AdventureTemplateTable) WithPrefix(prefix string) *AdventureTemplateTable {
	return newAdventureTemplateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AdventureTemplateTable with assigned table suffix
func (a AdventureTemplateTable) WithSuffix(suffix string) *AdventureTemplateTable {
	return newAdventureTemplateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAdventureTemplateTable(schemaName, tableName, alias string) *AdventureTemplateTable {
	return &AdventureTemplateTable{
		adventureTemplateTable: newAdventureTemplateTableImpl(schemaName, tableName, alias),
		NEW:                    newAdventureTemplateTableImpl("", "new", ""),
	}
}

func newAdventureTemplateTableImpl(schemaName, tableName, alias string) adventureTemplateTable {
	var (
		IDColumn              = mysql.IntegerColumn("id")
		ZoneColumn            = mysql.StringColumn("zone")
		ZoneVersionColumn     = mysql.IntegerColumn("zone_version")
		IsHardColumn          = mysql.IntegerColumn("is_hard")
		IsRaidColumn          = mysql.IntegerColumn("is_raid")
		MinLevelColumn        = mysql.IntegerColumn("min_level")
		MaxLevelColumn        = mysql.IntegerColumn("max_level")
		TypeColumn            = mysql.IntegerColumn("type")
		TypeDataColumn        = mysql.IntegerColumn("type_data")
		TypeCountColumn       = mysql.IntegerColumn("type_count")
		AssaXColumn           = mysql.FloatColumn("assa_x")
		AssaYColumn           = mysql.FloatColumn("assa_y")
		AssaZColumn           = mysql.FloatColumn("assa_z")
		AssaHColumn           = mysql.FloatColumn("assa_h")
		TextColumn            = mysql.StringColumn("text")
		DurationColumn        = mysql.IntegerColumn("duration")
		ZoneInTimeColumn      = mysql.IntegerColumn("zone_in_time")
		WinPointsColumn       = mysql.IntegerColumn("win_points")
		LosePointsColumn      = mysql.IntegerColumn("lose_points")
		ThemeColumn           = mysql.IntegerColumn("theme")
		ZoneInZoneIDColumn    = mysql.IntegerColumn("zone_in_zone_id")
		ZoneInXColumn         = mysql.FloatColumn("zone_in_x")
		ZoneInYColumn         = mysql.FloatColumn("zone_in_y")
		ZoneInObjectIDColumn  = mysql.IntegerColumn("zone_in_object_id")
		DestXColumn           = mysql.FloatColumn("dest_x")
		DestYColumn           = mysql.FloatColumn("dest_y")
		DestZColumn           = mysql.FloatColumn("dest_z")
		DestHColumn           = mysql.FloatColumn("dest_h")
		GraveyardZoneIDColumn = mysql.IntegerColumn("graveyard_zone_id")
		GraveyardXColumn      = mysql.FloatColumn("graveyard_x")
		GraveyardYColumn      = mysql.FloatColumn("graveyard_y")
		GraveyardZColumn      = mysql.FloatColumn("graveyard_z")
		GraveyardRadiusColumn = mysql.FloatColumn("graveyard_radius")
		allColumns            = mysql.ColumnList{IDColumn, ZoneColumn, ZoneVersionColumn, IsHardColumn, IsRaidColumn, MinLevelColumn, MaxLevelColumn, TypeColumn, TypeDataColumn, TypeCountColumn, AssaXColumn, AssaYColumn, AssaZColumn, AssaHColumn, TextColumn, DurationColumn, ZoneInTimeColumn, WinPointsColumn, LosePointsColumn, ThemeColumn, ZoneInZoneIDColumn, ZoneInXColumn, ZoneInYColumn, ZoneInObjectIDColumn, DestXColumn, DestYColumn, DestZColumn, DestHColumn, GraveyardZoneIDColumn, GraveyardXColumn, GraveyardYColumn, GraveyardZColumn, GraveyardRadiusColumn}
		mutableColumns        = mysql.ColumnList{ZoneColumn, ZoneVersionColumn, IsHardColumn, IsRaidColumn, MinLevelColumn, MaxLevelColumn, TypeColumn, TypeDataColumn, TypeCountColumn, AssaXColumn, AssaYColumn, AssaZColumn, AssaHColumn, TextColumn, DurationColumn, ZoneInTimeColumn, WinPointsColumn, LosePointsColumn, ThemeColumn, ZoneInZoneIDColumn, ZoneInXColumn, ZoneInYColumn, ZoneInObjectIDColumn, DestXColumn, DestYColumn, DestZColumn, DestHColumn, GraveyardZoneIDColumn, GraveyardXColumn, GraveyardYColumn, GraveyardZColumn, GraveyardRadiusColumn}
		defaultColumns        = mysql.ColumnList{ZoneVersionColumn, IsHardColumn, IsRaidColumn, MinLevelColumn, MaxLevelColumn, TypeColumn, TypeDataColumn, TypeCountColumn, AssaXColumn, AssaYColumn, AssaZColumn, AssaHColumn, DurationColumn, ZoneInTimeColumn, WinPointsColumn, LosePointsColumn, ThemeColumn, ZoneInZoneIDColumn, ZoneInXColumn, ZoneInYColumn, ZoneInObjectIDColumn, DestXColumn, DestYColumn, DestZColumn, DestHColumn, GraveyardZoneIDColumn, GraveyardXColumn, GraveyardYColumn, GraveyardZColumn, GraveyardRadiusColumn}
	)

	return adventureTemplateTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Zone:            ZoneColumn,
		ZoneVersion:     ZoneVersionColumn,
		IsHard:          IsHardColumn,
		IsRaid:          IsRaidColumn,
		MinLevel:        MinLevelColumn,
		MaxLevel:        MaxLevelColumn,
		Type:            TypeColumn,
		TypeData:        TypeDataColumn,
		TypeCount:       TypeCountColumn,
		AssaX:           AssaXColumn,
		AssaY:           AssaYColumn,
		AssaZ:           AssaZColumn,
		AssaH:           AssaHColumn,
		Text:            TextColumn,
		Duration:        DurationColumn,
		ZoneInTime:      ZoneInTimeColumn,
		WinPoints:       WinPointsColumn,
		LosePoints:      LosePointsColumn,
		Theme:           ThemeColumn,
		ZoneInZoneID:    ZoneInZoneIDColumn,
		ZoneInX:         ZoneInXColumn,
		ZoneInY:         ZoneInYColumn,
		ZoneInObjectID:  ZoneInObjectIDColumn,
		DestX:           DestXColumn,
		DestY:           DestYColumn,
		DestZ:           DestZColumn,
		DestH:           DestHColumn,
		GraveyardZoneID: GraveyardZoneIDColumn,
		GraveyardX:      GraveyardXColumn,
		GraveyardY:      GraveyardYColumn,
		GraveyardZ:      GraveyardZColumn,
		GraveyardRadius: GraveyardRadiusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
