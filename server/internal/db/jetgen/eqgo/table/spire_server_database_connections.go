//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpireServerDatabaseConnections = newSpireServerDatabaseConnectionsTable("eqgo", "spire_server_database_connections", "")

type spireServerDatabaseConnectionsTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnInteger
	Name              mysql.ColumnString
	DbHost            mysql.ColumnString
	DbPort            mysql.ColumnString
	DbName            mysql.ColumnString
	DbUsername        mysql.ColumnString
	DbPassword        mysql.ColumnString
	ContentDbHost     mysql.ColumnString
	ContentDbPort     mysql.ColumnString
	ContentDbName     mysql.ColumnString
	ContentDbUsername mysql.ColumnString
	ContentDbPassword mysql.ColumnString
	LogsDbHost        mysql.ColumnString
	LogsDbPort        mysql.ColumnString
	LogsDbName        mysql.ColumnString
	LogsDbUsername    mysql.ColumnString
	LogsDbPassword    mysql.ColumnString
	DiscordWebhookURL mysql.ColumnString
	CreatedFromIP     mysql.ColumnString
	CreatedBy         mysql.ColumnInteger
	CreatedAt         mysql.ColumnTimestamp
	UpdatedAt         mysql.ColumnTimestamp
	DeletedAt         mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpireServerDatabaseConnectionsTable struct {
	spireServerDatabaseConnectionsTable

	NEW spireServerDatabaseConnectionsTable
}

// AS creates new SpireServerDatabaseConnectionsTable with assigned alias
func (a SpireServerDatabaseConnectionsTable) AS(alias string) *SpireServerDatabaseConnectionsTable {
	return newSpireServerDatabaseConnectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpireServerDatabaseConnectionsTable with assigned schema name
func (a SpireServerDatabaseConnectionsTable) FromSchema(schemaName string) *SpireServerDatabaseConnectionsTable {
	return newSpireServerDatabaseConnectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpireServerDatabaseConnectionsTable with assigned table prefix
func (a SpireServerDatabaseConnectionsTable) WithPrefix(prefix string) *SpireServerDatabaseConnectionsTable {
	return newSpireServerDatabaseConnectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpireServerDatabaseConnectionsTable with assigned table suffix
func (a SpireServerDatabaseConnectionsTable) WithSuffix(suffix string) *SpireServerDatabaseConnectionsTable {
	return newSpireServerDatabaseConnectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpireServerDatabaseConnectionsTable(schemaName, tableName, alias string) *SpireServerDatabaseConnectionsTable {
	return &SpireServerDatabaseConnectionsTable{
		spireServerDatabaseConnectionsTable: newSpireServerDatabaseConnectionsTableImpl(schemaName, tableName, alias),
		NEW:                                 newSpireServerDatabaseConnectionsTableImpl("", "new", ""),
	}
}

func newSpireServerDatabaseConnectionsTableImpl(schemaName, tableName, alias string) spireServerDatabaseConnectionsTable {
	var (
		IDColumn                = mysql.IntegerColumn("id")
		NameColumn              = mysql.StringColumn("name")
		DbHostColumn            = mysql.StringColumn("db_host")
		DbPortColumn            = mysql.StringColumn("db_port")
		DbNameColumn            = mysql.StringColumn("db_name")
		DbUsernameColumn        = mysql.StringColumn("db_username")
		DbPasswordColumn        = mysql.StringColumn("db_password")
		ContentDbHostColumn     = mysql.StringColumn("content_db_host")
		ContentDbPortColumn     = mysql.StringColumn("content_db_port")
		ContentDbNameColumn     = mysql.StringColumn("content_db_name")
		ContentDbUsernameColumn = mysql.StringColumn("content_db_username")
		ContentDbPasswordColumn = mysql.StringColumn("content_db_password")
		LogsDbHostColumn        = mysql.StringColumn("logs_db_host")
		LogsDbPortColumn        = mysql.StringColumn("logs_db_port")
		LogsDbNameColumn        = mysql.StringColumn("logs_db_name")
		LogsDbUsernameColumn    = mysql.StringColumn("logs_db_username")
		LogsDbPasswordColumn    = mysql.StringColumn("logs_db_password")
		DiscordWebhookURLColumn = mysql.StringColumn("discord_webhook_url")
		CreatedFromIPColumn     = mysql.StringColumn("created_from_ip")
		CreatedByColumn         = mysql.IntegerColumn("created_by")
		CreatedAtColumn         = mysql.TimestampColumn("created_at")
		UpdatedAtColumn         = mysql.TimestampColumn("updated_at")
		DeletedAtColumn         = mysql.TimestampColumn("deleted_at")
		allColumns              = mysql.ColumnList{IDColumn, NameColumn, DbHostColumn, DbPortColumn, DbNameColumn, DbUsernameColumn, DbPasswordColumn, ContentDbHostColumn, ContentDbPortColumn, ContentDbNameColumn, ContentDbUsernameColumn, ContentDbPasswordColumn, LogsDbHostColumn, LogsDbPortColumn, LogsDbNameColumn, LogsDbUsernameColumn, LogsDbPasswordColumn, DiscordWebhookURLColumn, CreatedFromIPColumn, CreatedByColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns          = mysql.ColumnList{NameColumn, DbHostColumn, DbPortColumn, DbNameColumn, DbUsernameColumn, DbPasswordColumn, ContentDbHostColumn, ContentDbPortColumn, ContentDbNameColumn, ContentDbUsernameColumn, ContentDbPasswordColumn, LogsDbHostColumn, LogsDbPortColumn, LogsDbNameColumn, LogsDbUsernameColumn, LogsDbPasswordColumn, DiscordWebhookURLColumn, CreatedFromIPColumn, CreatedByColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		defaultColumns          = mysql.ColumnList{CreatedByColumn}
	)

	return spireServerDatabaseConnectionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Name:              NameColumn,
		DbHost:            DbHostColumn,
		DbPort:            DbPortColumn,
		DbName:            DbNameColumn,
		DbUsername:        DbUsernameColumn,
		DbPassword:        DbPasswordColumn,
		ContentDbHost:     ContentDbHostColumn,
		ContentDbPort:     ContentDbPortColumn,
		ContentDbName:     ContentDbNameColumn,
		ContentDbUsername: ContentDbUsernameColumn,
		ContentDbPassword: ContentDbPasswordColumn,
		LogsDbHost:        LogsDbHostColumn,
		LogsDbPort:        LogsDbPortColumn,
		LogsDbName:        LogsDbNameColumn,
		LogsDbUsername:    LogsDbUsernameColumn,
		LogsDbPassword:    LogsDbPasswordColumn,
		DiscordWebhookURL: DiscordWebhookURLColumn,
		CreatedFromIP:     CreatedFromIPColumn,
		CreatedBy:         CreatedByColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		DeletedAt:         DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
