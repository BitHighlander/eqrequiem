//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PlayerEventMerchantSell = newPlayerEventMerchantSellTable("eqgo", "player_event_merchant_sell", "")

type playerEventMerchantSellTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnInteger
	NpcID                 mysql.ColumnInteger
	MerchantName          mysql.ColumnString
	MerchantType          mysql.ColumnInteger
	ItemID                mysql.ColumnInteger
	ItemName              mysql.ColumnString
	Charges               mysql.ColumnInteger
	Cost                  mysql.ColumnInteger
	AlternateCurrencyID   mysql.ColumnInteger
	PlayerMoneyBalance    mysql.ColumnInteger
	PlayerCurrencyBalance mysql.ColumnInteger
	CreatedAt             mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PlayerEventMerchantSellTable struct {
	playerEventMerchantSellTable

	NEW playerEventMerchantSellTable
}

// AS creates new PlayerEventMerchantSellTable with assigned alias
func (a PlayerEventMerchantSellTable) AS(alias string) *PlayerEventMerchantSellTable {
	return newPlayerEventMerchantSellTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlayerEventMerchantSellTable with assigned schema name
func (a PlayerEventMerchantSellTable) FromSchema(schemaName string) *PlayerEventMerchantSellTable {
	return newPlayerEventMerchantSellTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlayerEventMerchantSellTable with assigned table prefix
func (a PlayerEventMerchantSellTable) WithPrefix(prefix string) *PlayerEventMerchantSellTable {
	return newPlayerEventMerchantSellTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlayerEventMerchantSellTable with assigned table suffix
func (a PlayerEventMerchantSellTable) WithSuffix(suffix string) *PlayerEventMerchantSellTable {
	return newPlayerEventMerchantSellTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlayerEventMerchantSellTable(schemaName, tableName, alias string) *PlayerEventMerchantSellTable {
	return &PlayerEventMerchantSellTable{
		playerEventMerchantSellTable: newPlayerEventMerchantSellTableImpl(schemaName, tableName, alias),
		NEW:                          newPlayerEventMerchantSellTableImpl("", "new", ""),
	}
}

func newPlayerEventMerchantSellTableImpl(schemaName, tableName, alias string) playerEventMerchantSellTable {
	var (
		IDColumn                    = mysql.IntegerColumn("id")
		NpcIDColumn                 = mysql.IntegerColumn("npc_id")
		MerchantNameColumn          = mysql.StringColumn("merchant_name")
		MerchantTypeColumn          = mysql.IntegerColumn("merchant_type")
		ItemIDColumn                = mysql.IntegerColumn("item_id")
		ItemNameColumn              = mysql.StringColumn("item_name")
		ChargesColumn               = mysql.IntegerColumn("charges")
		CostColumn                  = mysql.IntegerColumn("cost")
		AlternateCurrencyIDColumn   = mysql.IntegerColumn("alternate_currency_id")
		PlayerMoneyBalanceColumn    = mysql.IntegerColumn("player_money_balance")
		PlayerCurrencyBalanceColumn = mysql.IntegerColumn("player_currency_balance")
		CreatedAtColumn             = mysql.TimestampColumn("created_at")
		allColumns                  = mysql.ColumnList{IDColumn, NpcIDColumn, MerchantNameColumn, MerchantTypeColumn, ItemIDColumn, ItemNameColumn, ChargesColumn, CostColumn, AlternateCurrencyIDColumn, PlayerMoneyBalanceColumn, PlayerCurrencyBalanceColumn, CreatedAtColumn}
		mutableColumns              = mysql.ColumnList{NpcIDColumn, MerchantNameColumn, MerchantTypeColumn, ItemIDColumn, ItemNameColumn, ChargesColumn, CostColumn, AlternateCurrencyIDColumn, PlayerMoneyBalanceColumn, PlayerCurrencyBalanceColumn, CreatedAtColumn}
		defaultColumns              = mysql.ColumnList{NpcIDColumn, MerchantTypeColumn, ItemIDColumn, ChargesColumn, CostColumn, AlternateCurrencyIDColumn, PlayerMoneyBalanceColumn, PlayerCurrencyBalanceColumn}
	)

	return playerEventMerchantSellTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		NpcID:                 NpcIDColumn,
		MerchantName:          MerchantNameColumn,
		MerchantType:          MerchantTypeColumn,
		ItemID:                ItemIDColumn,
		ItemName:              ItemNameColumn,
		Charges:               ChargesColumn,
		Cost:                  CostColumn,
		AlternateCurrencyID:   AlternateCurrencyIDColumn,
		PlayerMoneyBalance:    PlayerMoneyBalanceColumn,
		PlayerCurrencyBalance: PlayerCurrencyBalanceColumn,
		CreatedAt:             CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
