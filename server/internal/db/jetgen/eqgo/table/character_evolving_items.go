//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterEvolvingItems = newCharacterEvolvingItemsTable("eqgo", "character_evolving_items", "")

type characterEvolvingItemsTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	CharacterID   mysql.ColumnInteger
	ItemID        mysql.ColumnInteger
	Activated     mysql.ColumnInteger
	Equipped      mysql.ColumnInteger
	CurrentAmount mysql.ColumnInteger
	Progression   mysql.ColumnFloat
	FinalItemID   mysql.ColumnInteger
	DeletedAt     mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterEvolvingItemsTable struct {
	characterEvolvingItemsTable

	NEW characterEvolvingItemsTable
}

// AS creates new CharacterEvolvingItemsTable with assigned alias
func (a CharacterEvolvingItemsTable) AS(alias string) *CharacterEvolvingItemsTable {
	return newCharacterEvolvingItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterEvolvingItemsTable with assigned schema name
func (a CharacterEvolvingItemsTable) FromSchema(schemaName string) *CharacterEvolvingItemsTable {
	return newCharacterEvolvingItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterEvolvingItemsTable with assigned table prefix
func (a CharacterEvolvingItemsTable) WithPrefix(prefix string) *CharacterEvolvingItemsTable {
	return newCharacterEvolvingItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterEvolvingItemsTable with assigned table suffix
func (a CharacterEvolvingItemsTable) WithSuffix(suffix string) *CharacterEvolvingItemsTable {
	return newCharacterEvolvingItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterEvolvingItemsTable(schemaName, tableName, alias string) *CharacterEvolvingItemsTable {
	return &CharacterEvolvingItemsTable{
		characterEvolvingItemsTable: newCharacterEvolvingItemsTableImpl(schemaName, tableName, alias),
		NEW:                         newCharacterEvolvingItemsTableImpl("", "new", ""),
	}
}

func newCharacterEvolvingItemsTableImpl(schemaName, tableName, alias string) characterEvolvingItemsTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		CharacterIDColumn   = mysql.IntegerColumn("character_id")
		ItemIDColumn        = mysql.IntegerColumn("item_id")
		ActivatedColumn     = mysql.IntegerColumn("activated")
		EquippedColumn      = mysql.IntegerColumn("equipped")
		CurrentAmountColumn = mysql.IntegerColumn("current_amount")
		ProgressionColumn   = mysql.FloatColumn("progression")
		FinalItemIDColumn   = mysql.IntegerColumn("final_item_id")
		DeletedAtColumn     = mysql.TimestampColumn("deleted_at")
		allColumns          = mysql.ColumnList{IDColumn, CharacterIDColumn, ItemIDColumn, ActivatedColumn, EquippedColumn, CurrentAmountColumn, ProgressionColumn, FinalItemIDColumn, DeletedAtColumn}
		mutableColumns      = mysql.ColumnList{CharacterIDColumn, ItemIDColumn, ActivatedColumn, EquippedColumn, CurrentAmountColumn, ProgressionColumn, FinalItemIDColumn, DeletedAtColumn}
		defaultColumns      = mysql.ColumnList{CharacterIDColumn, ItemIDColumn, ActivatedColumn, EquippedColumn, CurrentAmountColumn, ProgressionColumn, FinalItemIDColumn}
	)

	return characterEvolvingItemsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CharacterID:   CharacterIDColumn,
		ItemID:        ItemIDColumn,
		Activated:     ActivatedColumn,
		Equipped:      EquippedColumn,
		CurrentAmount: CurrentAmountColumn,
		Progression:   ProgressionColumn,
		FinalItemID:   FinalItemIDColumn,
		DeletedAt:     DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
