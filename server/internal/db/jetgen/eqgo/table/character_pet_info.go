//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterPetInfo = newCharacterPetInfoTable("eqgo", "character_pet_info", "")

type characterPetInfoTable struct {
	mysql.Table

	// Columns
	CharID   mysql.ColumnInteger
	Pet      mysql.ColumnInteger
	Petname  mysql.ColumnString
	Petpower mysql.ColumnInteger
	SpellID  mysql.ColumnInteger
	Hp       mysql.ColumnInteger
	Mana     mysql.ColumnInteger
	Size     mysql.ColumnFloat
	Taunting mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterPetInfoTable struct {
	characterPetInfoTable

	NEW characterPetInfoTable
}

// AS creates new CharacterPetInfoTable with assigned alias
func (a CharacterPetInfoTable) AS(alias string) *CharacterPetInfoTable {
	return newCharacterPetInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterPetInfoTable with assigned schema name
func (a CharacterPetInfoTable) FromSchema(schemaName string) *CharacterPetInfoTable {
	return newCharacterPetInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterPetInfoTable with assigned table prefix
func (a CharacterPetInfoTable) WithPrefix(prefix string) *CharacterPetInfoTable {
	return newCharacterPetInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterPetInfoTable with assigned table suffix
func (a CharacterPetInfoTable) WithSuffix(suffix string) *CharacterPetInfoTable {
	return newCharacterPetInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterPetInfoTable(schemaName, tableName, alias string) *CharacterPetInfoTable {
	return &CharacterPetInfoTable{
		characterPetInfoTable: newCharacterPetInfoTableImpl(schemaName, tableName, alias),
		NEW:                   newCharacterPetInfoTableImpl("", "new", ""),
	}
}

func newCharacterPetInfoTableImpl(schemaName, tableName, alias string) characterPetInfoTable {
	var (
		CharIDColumn   = mysql.IntegerColumn("char_id")
		PetColumn      = mysql.IntegerColumn("pet")
		PetnameColumn  = mysql.StringColumn("petname")
		PetpowerColumn = mysql.IntegerColumn("petpower")
		SpellIDColumn  = mysql.IntegerColumn("spell_id")
		HpColumn       = mysql.IntegerColumn("hp")
		ManaColumn     = mysql.IntegerColumn("mana")
		SizeColumn     = mysql.FloatColumn("size")
		TauntingColumn = mysql.BoolColumn("taunting")
		allColumns     = mysql.ColumnList{CharIDColumn, PetColumn, PetnameColumn, PetpowerColumn, SpellIDColumn, HpColumn, ManaColumn, SizeColumn, TauntingColumn}
		mutableColumns = mysql.ColumnList{PetnameColumn, PetpowerColumn, SpellIDColumn, HpColumn, ManaColumn, SizeColumn, TauntingColumn}
		defaultColumns = mysql.ColumnList{PetnameColumn, PetpowerColumn, SpellIDColumn, HpColumn, ManaColumn, SizeColumn, TauntingColumn}
	)

	return characterPetInfoTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CharID:   CharIDColumn,
		Pet:      PetColumn,
		Petname:  PetnameColumn,
		Petpower: PetpowerColumn,
		SpellID:  SpellIDColumn,
		Hp:       HpColumn,
		Mana:     ManaColumn,
		Size:     SizeColumn,
		Taunting: TauntingColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
