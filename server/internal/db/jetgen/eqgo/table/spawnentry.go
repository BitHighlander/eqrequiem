//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Spawnentry = newSpawnentryTable("eqgo", "spawnentry", "")

type spawnentryTable struct {
	mysql.Table

	// Columns
	SpawngroupID         mysql.ColumnInteger
	NpcID                mysql.ColumnInteger
	Chance               mysql.ColumnInteger
	ConditionValueFilter mysql.ColumnInteger
	MinTime              mysql.ColumnInteger
	MaxTime              mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpawnentryTable struct {
	spawnentryTable

	NEW spawnentryTable
}

// AS creates new SpawnentryTable with assigned alias
func (a SpawnentryTable) AS(alias string) *SpawnentryTable {
	return newSpawnentryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpawnentryTable with assigned schema name
func (a SpawnentryTable) FromSchema(schemaName string) *SpawnentryTable {
	return newSpawnentryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpawnentryTable with assigned table prefix
func (a SpawnentryTable) WithPrefix(prefix string) *SpawnentryTable {
	return newSpawnentryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpawnentryTable with assigned table suffix
func (a SpawnentryTable) WithSuffix(suffix string) *SpawnentryTable {
	return newSpawnentryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpawnentryTable(schemaName, tableName, alias string) *SpawnentryTable {
	return &SpawnentryTable{
		spawnentryTable: newSpawnentryTableImpl(schemaName, tableName, alias),
		NEW:             newSpawnentryTableImpl("", "new", ""),
	}
}

func newSpawnentryTableImpl(schemaName, tableName, alias string) spawnentryTable {
	var (
		SpawngroupIDColumn         = mysql.IntegerColumn("spawngroupID")
		NpcIDColumn                = mysql.IntegerColumn("npcID")
		ChanceColumn               = mysql.IntegerColumn("chance")
		ConditionValueFilterColumn = mysql.IntegerColumn("condition_value_filter")
		MinTimeColumn              = mysql.IntegerColumn("min_time")
		MaxTimeColumn              = mysql.IntegerColumn("max_time")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{SpawngroupIDColumn, NpcIDColumn, ChanceColumn, ConditionValueFilterColumn, MinTimeColumn, MaxTimeColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{ChanceColumn, ConditionValueFilterColumn, MinTimeColumn, MaxTimeColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{SpawngroupIDColumn, NpcIDColumn, ChanceColumn, ConditionValueFilterColumn, MinTimeColumn, MaxTimeColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return spawnentryTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SpawngroupID:         SpawngroupIDColumn,
		NpcID:                NpcIDColumn,
		Chance:               ChanceColumn,
		ConditionValueFilter: ConditionValueFilterColumn,
		MinTime:              MinTimeColumn,
		MaxTime:              MaxTimeColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
