//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AccountFlags = newAccountFlagsTable("eqgo", "account_flags", "")

type accountFlagsTable struct {
	mysql.Table

	// Columns
	PAccid mysql.ColumnInteger
	PFlag  mysql.ColumnString
	PValue mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AccountFlagsTable struct {
	accountFlagsTable

	NEW accountFlagsTable
}

// AS creates new AccountFlagsTable with assigned alias
func (a AccountFlagsTable) AS(alias string) *AccountFlagsTable {
	return newAccountFlagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountFlagsTable with assigned schema name
func (a AccountFlagsTable) FromSchema(schemaName string) *AccountFlagsTable {
	return newAccountFlagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountFlagsTable with assigned table prefix
func (a AccountFlagsTable) WithPrefix(prefix string) *AccountFlagsTable {
	return newAccountFlagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountFlagsTable with assigned table suffix
func (a AccountFlagsTable) WithSuffix(suffix string) *AccountFlagsTable {
	return newAccountFlagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountFlagsTable(schemaName, tableName, alias string) *AccountFlagsTable {
	return &AccountFlagsTable{
		accountFlagsTable: newAccountFlagsTableImpl(schemaName, tableName, alias),
		NEW:               newAccountFlagsTableImpl("", "new", ""),
	}
}

func newAccountFlagsTableImpl(schemaName, tableName, alias string) accountFlagsTable {
	var (
		PAccidColumn   = mysql.IntegerColumn("p_accid")
		PFlagColumn    = mysql.StringColumn("p_flag")
		PValueColumn   = mysql.StringColumn("p_value")
		allColumns     = mysql.ColumnList{PAccidColumn, PFlagColumn, PValueColumn}
		mutableColumns = mysql.ColumnList{PValueColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return accountFlagsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PAccid: PAccidColumn,
		PFlag:  PFlagColumn,
		PValue: PValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
