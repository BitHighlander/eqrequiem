//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var GuildRelations = newGuildRelationsTable("eqgo", "guild_relations", "")

type guildRelationsTable struct {
	mysql.Table

	// Columns
	Guild1   mysql.ColumnInteger
	Guild2   mysql.ColumnInteger
	Relation mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type GuildRelationsTable struct {
	guildRelationsTable

	NEW guildRelationsTable
}

// AS creates new GuildRelationsTable with assigned alias
func (a GuildRelationsTable) AS(alias string) *GuildRelationsTable {
	return newGuildRelationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GuildRelationsTable with assigned schema name
func (a GuildRelationsTable) FromSchema(schemaName string) *GuildRelationsTable {
	return newGuildRelationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GuildRelationsTable with assigned table prefix
func (a GuildRelationsTable) WithPrefix(prefix string) *GuildRelationsTable {
	return newGuildRelationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GuildRelationsTable with assigned table suffix
func (a GuildRelationsTable) WithSuffix(suffix string) *GuildRelationsTable {
	return newGuildRelationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGuildRelationsTable(schemaName, tableName, alias string) *GuildRelationsTable {
	return &GuildRelationsTable{
		guildRelationsTable: newGuildRelationsTableImpl(schemaName, tableName, alias),
		NEW:                 newGuildRelationsTableImpl("", "new", ""),
	}
}

func newGuildRelationsTableImpl(schemaName, tableName, alias string) guildRelationsTable {
	var (
		Guild1Column   = mysql.IntegerColumn("guild1")
		Guild2Column   = mysql.IntegerColumn("guild2")
		RelationColumn = mysql.IntegerColumn("relation")
		allColumns     = mysql.ColumnList{Guild1Column, Guild2Column, RelationColumn}
		mutableColumns = mysql.ColumnList{RelationColumn}
		defaultColumns = mysql.ColumnList{Guild1Column, Guild2Column, RelationColumn}
	)

	return guildRelationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Guild1:   Guild1Column,
		Guild2:   Guild2Column,
		Relation: RelationColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
