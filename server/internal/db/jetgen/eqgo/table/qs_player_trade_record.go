//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var QsPlayerTradeRecord = newQsPlayerTradeRecordTable("eqgo", "qs_player_trade_record", "")

type qsPlayerTradeRecordTable struct {
	mysql.Table

	// Columns
	TradeID    mysql.ColumnInteger
	Time       mysql.ColumnTimestamp
	Char1ID    mysql.ColumnInteger
	Char1Pp    mysql.ColumnInteger
	Char1Gp    mysql.ColumnInteger
	Char1Sp    mysql.ColumnInteger
	Char1Cp    mysql.ColumnInteger
	Char1Items mysql.ColumnInteger
	Char2ID    mysql.ColumnInteger
	Char2Pp    mysql.ColumnInteger
	Char2Gp    mysql.ColumnInteger
	Char2Sp    mysql.ColumnInteger
	Char2Cp    mysql.ColumnInteger
	Char2Items mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type QsPlayerTradeRecordTable struct {
	qsPlayerTradeRecordTable

	NEW qsPlayerTradeRecordTable
}

// AS creates new QsPlayerTradeRecordTable with assigned alias
func (a QsPlayerTradeRecordTable) AS(alias string) *QsPlayerTradeRecordTable {
	return newQsPlayerTradeRecordTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QsPlayerTradeRecordTable with assigned schema name
func (a QsPlayerTradeRecordTable) FromSchema(schemaName string) *QsPlayerTradeRecordTable {
	return newQsPlayerTradeRecordTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QsPlayerTradeRecordTable with assigned table prefix
func (a QsPlayerTradeRecordTable) WithPrefix(prefix string) *QsPlayerTradeRecordTable {
	return newQsPlayerTradeRecordTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QsPlayerTradeRecordTable with assigned table suffix
func (a QsPlayerTradeRecordTable) WithSuffix(suffix string) *QsPlayerTradeRecordTable {
	return newQsPlayerTradeRecordTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQsPlayerTradeRecordTable(schemaName, tableName, alias string) *QsPlayerTradeRecordTable {
	return &QsPlayerTradeRecordTable{
		qsPlayerTradeRecordTable: newQsPlayerTradeRecordTableImpl(schemaName, tableName, alias),
		NEW:                      newQsPlayerTradeRecordTableImpl("", "new", ""),
	}
}

func newQsPlayerTradeRecordTableImpl(schemaName, tableName, alias string) qsPlayerTradeRecordTable {
	var (
		TradeIDColumn    = mysql.IntegerColumn("trade_id")
		TimeColumn       = mysql.TimestampColumn("time")
		Char1IDColumn    = mysql.IntegerColumn("char1_id")
		Char1PpColumn    = mysql.IntegerColumn("char1_pp")
		Char1GpColumn    = mysql.IntegerColumn("char1_gp")
		Char1SpColumn    = mysql.IntegerColumn("char1_sp")
		Char1CpColumn    = mysql.IntegerColumn("char1_cp")
		Char1ItemsColumn = mysql.IntegerColumn("char1_items")
		Char2IDColumn    = mysql.IntegerColumn("char2_id")
		Char2PpColumn    = mysql.IntegerColumn("char2_pp")
		Char2GpColumn    = mysql.IntegerColumn("char2_gp")
		Char2SpColumn    = mysql.IntegerColumn("char2_sp")
		Char2CpColumn    = mysql.IntegerColumn("char2_cp")
		Char2ItemsColumn = mysql.IntegerColumn("char2_items")
		allColumns       = mysql.ColumnList{TradeIDColumn, TimeColumn, Char1IDColumn, Char1PpColumn, Char1GpColumn, Char1SpColumn, Char1CpColumn, Char1ItemsColumn, Char2IDColumn, Char2PpColumn, Char2GpColumn, Char2SpColumn, Char2CpColumn, Char2ItemsColumn}
		mutableColumns   = mysql.ColumnList{TimeColumn, Char1IDColumn, Char1PpColumn, Char1GpColumn, Char1SpColumn, Char1CpColumn, Char1ItemsColumn, Char2IDColumn, Char2PpColumn, Char2GpColumn, Char2SpColumn, Char2CpColumn, Char2ItemsColumn}
		defaultColumns   = mysql.ColumnList{Char1IDColumn, Char1PpColumn, Char1GpColumn, Char1SpColumn, Char1CpColumn, Char1ItemsColumn, Char2IDColumn, Char2PpColumn, Char2GpColumn, Char2SpColumn, Char2CpColumn, Char2ItemsColumn}
	)

	return qsPlayerTradeRecordTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TradeID:    TradeIDColumn,
		Time:       TimeColumn,
		Char1ID:    Char1IDColumn,
		Char1Pp:    Char1PpColumn,
		Char1Gp:    Char1GpColumn,
		Char1Sp:    Char1SpColumn,
		Char1Cp:    Char1CpColumn,
		Char1Items: Char1ItemsColumn,
		Char2ID:    Char2IDColumn,
		Char2Pp:    Char2PpColumn,
		Char2Gp:    Char2GpColumn,
		Char2Sp:    Char2SpColumn,
		Char2Cp:    Char2CpColumn,
		Char2Items: Char2ItemsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
