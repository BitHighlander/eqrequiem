//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterSpells = newCharacterSpellsTable("eqgo", "character_spells", "")

type characterSpellsTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnInteger
	SlotID  mysql.ColumnInteger
	SpellID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterSpellsTable struct {
	characterSpellsTable

	NEW characterSpellsTable
}

// AS creates new CharacterSpellsTable with assigned alias
func (a CharacterSpellsTable) AS(alias string) *CharacterSpellsTable {
	return newCharacterSpellsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterSpellsTable with assigned schema name
func (a CharacterSpellsTable) FromSchema(schemaName string) *CharacterSpellsTable {
	return newCharacterSpellsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterSpellsTable with assigned table prefix
func (a CharacterSpellsTable) WithPrefix(prefix string) *CharacterSpellsTable {
	return newCharacterSpellsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterSpellsTable with assigned table suffix
func (a CharacterSpellsTable) WithSuffix(suffix string) *CharacterSpellsTable {
	return newCharacterSpellsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterSpellsTable(schemaName, tableName, alias string) *CharacterSpellsTable {
	return &CharacterSpellsTable{
		characterSpellsTable: newCharacterSpellsTableImpl(schemaName, tableName, alias),
		NEW:                  newCharacterSpellsTableImpl("", "new", ""),
	}
}

func newCharacterSpellsTableImpl(schemaName, tableName, alias string) characterSpellsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		SlotIDColumn   = mysql.IntegerColumn("slot_id")
		SpellIDColumn  = mysql.IntegerColumn("spell_id")
		allColumns     = mysql.ColumnList{IDColumn, SlotIDColumn, SpellIDColumn}
		mutableColumns = mysql.ColumnList{SpellIDColumn}
		defaultColumns = mysql.ColumnList{SlotIDColumn, SpellIDColumn}
	)

	return characterSpellsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		SlotID:  SlotIDColumn,
		SpellID: SpellIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
