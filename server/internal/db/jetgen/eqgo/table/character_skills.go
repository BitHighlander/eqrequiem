//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterSkills = newCharacterSkillsTable("eqgo", "character_skills", "")

type characterSkillsTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnInteger
	SkillID mysql.ColumnInteger
	Value   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterSkillsTable struct {
	characterSkillsTable

	NEW characterSkillsTable
}

// AS creates new CharacterSkillsTable with assigned alias
func (a CharacterSkillsTable) AS(alias string) *CharacterSkillsTable {
	return newCharacterSkillsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterSkillsTable with assigned schema name
func (a CharacterSkillsTable) FromSchema(schemaName string) *CharacterSkillsTable {
	return newCharacterSkillsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterSkillsTable with assigned table prefix
func (a CharacterSkillsTable) WithPrefix(prefix string) *CharacterSkillsTable {
	return newCharacterSkillsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterSkillsTable with assigned table suffix
func (a CharacterSkillsTable) WithSuffix(suffix string) *CharacterSkillsTable {
	return newCharacterSkillsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterSkillsTable(schemaName, tableName, alias string) *CharacterSkillsTable {
	return &CharacterSkillsTable{
		characterSkillsTable: newCharacterSkillsTableImpl(schemaName, tableName, alias),
		NEW:                  newCharacterSkillsTableImpl("", "new", ""),
	}
}

func newCharacterSkillsTableImpl(schemaName, tableName, alias string) characterSkillsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		SkillIDColumn  = mysql.IntegerColumn("skill_id")
		ValueColumn    = mysql.IntegerColumn("value")
		allColumns     = mysql.ColumnList{IDColumn, SkillIDColumn, ValueColumn}
		mutableColumns = mysql.ColumnList{ValueColumn}
		defaultColumns = mysql.ColumnList{SkillIDColumn, ValueColumn}
	)

	return characterSkillsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		SkillID: SkillIDColumn,
		Value:   ValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
