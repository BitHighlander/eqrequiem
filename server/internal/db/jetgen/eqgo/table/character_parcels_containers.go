//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterParcelsContainers = newCharacterParcelsContainersTable("eqgo", "character_parcels_containers", "")

type characterParcelsContainersTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	ParcelsID mysql.ColumnInteger
	SlotID    mysql.ColumnInteger
	ItemID    mysql.ColumnInteger
	AugSlot1  mysql.ColumnInteger
	AugSlot2  mysql.ColumnInteger
	AugSlot3  mysql.ColumnInteger
	AugSlot4  mysql.ColumnInteger
	AugSlot5  mysql.ColumnInteger
	AugSlot6  mysql.ColumnInteger
	Quantity  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterParcelsContainersTable struct {
	characterParcelsContainersTable

	NEW characterParcelsContainersTable
}

// AS creates new CharacterParcelsContainersTable with assigned alias
func (a CharacterParcelsContainersTable) AS(alias string) *CharacterParcelsContainersTable {
	return newCharacterParcelsContainersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterParcelsContainersTable with assigned schema name
func (a CharacterParcelsContainersTable) FromSchema(schemaName string) *CharacterParcelsContainersTable {
	return newCharacterParcelsContainersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterParcelsContainersTable with assigned table prefix
func (a CharacterParcelsContainersTable) WithPrefix(prefix string) *CharacterParcelsContainersTable {
	return newCharacterParcelsContainersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterParcelsContainersTable with assigned table suffix
func (a CharacterParcelsContainersTable) WithSuffix(suffix string) *CharacterParcelsContainersTable {
	return newCharacterParcelsContainersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterParcelsContainersTable(schemaName, tableName, alias string) *CharacterParcelsContainersTable {
	return &CharacterParcelsContainersTable{
		characterParcelsContainersTable: newCharacterParcelsContainersTableImpl(schemaName, tableName, alias),
		NEW:                             newCharacterParcelsContainersTableImpl("", "new", ""),
	}
}

func newCharacterParcelsContainersTableImpl(schemaName, tableName, alias string) characterParcelsContainersTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		ParcelsIDColumn = mysql.IntegerColumn("parcels_id")
		SlotIDColumn    = mysql.IntegerColumn("slot_id")
		ItemIDColumn    = mysql.IntegerColumn("item_id")
		AugSlot1Column  = mysql.IntegerColumn("aug_slot_1")
		AugSlot2Column  = mysql.IntegerColumn("aug_slot_2")
		AugSlot3Column  = mysql.IntegerColumn("aug_slot_3")
		AugSlot4Column  = mysql.IntegerColumn("aug_slot_4")
		AugSlot5Column  = mysql.IntegerColumn("aug_slot_5")
		AugSlot6Column  = mysql.IntegerColumn("aug_slot_6")
		QuantityColumn  = mysql.IntegerColumn("quantity")
		allColumns      = mysql.ColumnList{IDColumn, ParcelsIDColumn, SlotIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, QuantityColumn}
		mutableColumns  = mysql.ColumnList{ParcelsIDColumn, SlotIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, QuantityColumn}
		defaultColumns  = mysql.ColumnList{ParcelsIDColumn, SlotIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, QuantityColumn}
	)

	return characterParcelsContainersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ParcelsID: ParcelsIDColumn,
		SlotID:    SlotIDColumn,
		ItemID:    ItemIDColumn,
		AugSlot1:  AugSlot1Column,
		AugSlot2:  AugSlot2Column,
		AugSlot3:  AugSlot3Column,
		AugSlot4:  AugSlot4Column,
		AugSlot5:  AugSlot5Column,
		AugSlot6:  AugSlot6Column,
		Quantity:  QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
