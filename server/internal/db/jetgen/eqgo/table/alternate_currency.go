//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AlternateCurrency = newAlternateCurrencyTable("eqgo", "alternate_currency", "")

type alternateCurrencyTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnInteger
	ItemID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AlternateCurrencyTable struct {
	alternateCurrencyTable

	NEW alternateCurrencyTable
}

// AS creates new AlternateCurrencyTable with assigned alias
func (a AlternateCurrencyTable) AS(alias string) *AlternateCurrencyTable {
	return newAlternateCurrencyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AlternateCurrencyTable with assigned schema name
func (a AlternateCurrencyTable) FromSchema(schemaName string) *AlternateCurrencyTable {
	return newAlternateCurrencyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AlternateCurrencyTable with assigned table prefix
func (a AlternateCurrencyTable) WithPrefix(prefix string) *AlternateCurrencyTable {
	return newAlternateCurrencyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AlternateCurrencyTable with assigned table suffix
func (a AlternateCurrencyTable) WithSuffix(suffix string) *AlternateCurrencyTable {
	return newAlternateCurrencyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAlternateCurrencyTable(schemaName, tableName, alias string) *AlternateCurrencyTable {
	return &AlternateCurrencyTable{
		alternateCurrencyTable: newAlternateCurrencyTableImpl(schemaName, tableName, alias),
		NEW:                    newAlternateCurrencyTableImpl("", "new", ""),
	}
}

func newAlternateCurrencyTableImpl(schemaName, tableName, alias string) alternateCurrencyTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		ItemIDColumn   = mysql.IntegerColumn("item_id")
		allColumns     = mysql.ColumnList{IDColumn, ItemIDColumn}
		mutableColumns = mysql.ColumnList{ItemIDColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return alternateCurrencyTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		ItemID: ItemIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
