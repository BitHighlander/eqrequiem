//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpireAnalyticEvents = newSpireAnalyticEventsTable("eqgo", "spire_analytic_events", "")

type spireAnalyticEventsTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	EventName  mysql.ColumnString
	EventValue mysql.ColumnString
	RequestURI mysql.ColumnString
	IPAddress  mysql.ColumnString
	UserID     mysql.ColumnInteger
	UpdatedAt  mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpireAnalyticEventsTable struct {
	spireAnalyticEventsTable

	NEW spireAnalyticEventsTable
}

// AS creates new SpireAnalyticEventsTable with assigned alias
func (a SpireAnalyticEventsTable) AS(alias string) *SpireAnalyticEventsTable {
	return newSpireAnalyticEventsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpireAnalyticEventsTable with assigned schema name
func (a SpireAnalyticEventsTable) FromSchema(schemaName string) *SpireAnalyticEventsTable {
	return newSpireAnalyticEventsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpireAnalyticEventsTable with assigned table prefix
func (a SpireAnalyticEventsTable) WithPrefix(prefix string) *SpireAnalyticEventsTable {
	return newSpireAnalyticEventsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpireAnalyticEventsTable with assigned table suffix
func (a SpireAnalyticEventsTable) WithSuffix(suffix string) *SpireAnalyticEventsTable {
	return newSpireAnalyticEventsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpireAnalyticEventsTable(schemaName, tableName, alias string) *SpireAnalyticEventsTable {
	return &SpireAnalyticEventsTable{
		spireAnalyticEventsTable: newSpireAnalyticEventsTableImpl(schemaName, tableName, alias),
		NEW:                      newSpireAnalyticEventsTableImpl("", "new", ""),
	}
}

func newSpireAnalyticEventsTableImpl(schemaName, tableName, alias string) spireAnalyticEventsTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		EventNameColumn  = mysql.StringColumn("event_name")
		EventValueColumn = mysql.StringColumn("event_value")
		RequestURIColumn = mysql.StringColumn("request_uri")
		IPAddressColumn  = mysql.StringColumn("ip_address")
		UserIDColumn     = mysql.IntegerColumn("user_id")
		UpdatedAtColumn  = mysql.TimestampColumn("updated_at")
		allColumns       = mysql.ColumnList{IDColumn, EventNameColumn, EventValueColumn, RequestURIColumn, IPAddressColumn, UserIDColumn, UpdatedAtColumn}
		mutableColumns   = mysql.ColumnList{EventNameColumn, EventValueColumn, RequestURIColumn, IPAddressColumn, UserIDColumn, UpdatedAtColumn}
		defaultColumns   = mysql.ColumnList{UserIDColumn}
	)

	return spireAnalyticEventsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		EventName:  EventNameColumn,
		EventValue: EventValueColumn,
		RequestURI: RequestURIColumn,
		IPAddress:  IPAddressColumn,
		UserID:     UserIDColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
