//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var InventoryVersions = newInventoryVersionsTable("eqgo", "inventory_versions", "")

type inventoryVersionsTable struct {
	mysql.Table

	// Columns
	Version mysql.ColumnInteger
	Step    mysql.ColumnInteger
	BotStep mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type InventoryVersionsTable struct {
	inventoryVersionsTable

	NEW inventoryVersionsTable
}

// AS creates new InventoryVersionsTable with assigned alias
func (a InventoryVersionsTable) AS(alias string) *InventoryVersionsTable {
	return newInventoryVersionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InventoryVersionsTable with assigned schema name
func (a InventoryVersionsTable) FromSchema(schemaName string) *InventoryVersionsTable {
	return newInventoryVersionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InventoryVersionsTable with assigned table prefix
func (a InventoryVersionsTable) WithPrefix(prefix string) *InventoryVersionsTable {
	return newInventoryVersionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InventoryVersionsTable with assigned table suffix
func (a InventoryVersionsTable) WithSuffix(suffix string) *InventoryVersionsTable {
	return newInventoryVersionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInventoryVersionsTable(schemaName, tableName, alias string) *InventoryVersionsTable {
	return &InventoryVersionsTable{
		inventoryVersionsTable: newInventoryVersionsTableImpl(schemaName, tableName, alias),
		NEW:                    newInventoryVersionsTableImpl("", "new", ""),
	}
}

func newInventoryVersionsTableImpl(schemaName, tableName, alias string) inventoryVersionsTable {
	var (
		VersionColumn  = mysql.IntegerColumn("version")
		StepColumn     = mysql.IntegerColumn("step")
		BotStepColumn  = mysql.IntegerColumn("bot_step")
		allColumns     = mysql.ColumnList{VersionColumn, StepColumn, BotStepColumn}
		mutableColumns = mysql.ColumnList{VersionColumn, StepColumn, BotStepColumn}
		defaultColumns = mysql.ColumnList{VersionColumn, StepColumn, BotStepColumn}
	)

	return inventoryVersionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version: VersionColumn,
		Step:    StepColumn,
		BotStep: BotStepColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
