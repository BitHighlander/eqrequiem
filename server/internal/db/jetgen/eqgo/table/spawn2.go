//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Spawn2 = newSpawn2Table("eqgo", "spawn2", "")

type spawn2Table struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	SpawngroupID         mysql.ColumnInteger
	Zone                 mysql.ColumnString
	Version              mysql.ColumnInteger
	X                    mysql.ColumnFloat
	Y                    mysql.ColumnFloat
	Z                    mysql.ColumnFloat
	Heading              mysql.ColumnFloat
	Respawntime          mysql.ColumnInteger
	Variance             mysql.ColumnInteger
	Pathgrid             mysql.ColumnInteger
	PathWhenZoneIdle     mysql.ColumnBool
	Condition            mysql.ColumnInteger
	CondValue            mysql.ColumnInteger
	Animation            mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type Spawn2Table struct {
	spawn2Table

	NEW spawn2Table
}

// AS creates new Spawn2Table with assigned alias
func (a Spawn2Table) AS(alias string) *Spawn2Table {
	return newSpawn2Table(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new Spawn2Table with assigned schema name
func (a Spawn2Table) FromSchema(schemaName string) *Spawn2Table {
	return newSpawn2Table(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new Spawn2Table with assigned table prefix
func (a Spawn2Table) WithPrefix(prefix string) *Spawn2Table {
	return newSpawn2Table(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new Spawn2Table with assigned table suffix
func (a Spawn2Table) WithSuffix(suffix string) *Spawn2Table {
	return newSpawn2Table(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpawn2Table(schemaName, tableName, alias string) *Spawn2Table {
	return &Spawn2Table{
		spawn2Table: newSpawn2TableImpl(schemaName, tableName, alias),
		NEW:         newSpawn2TableImpl("", "new", ""),
	}
}

func newSpawn2TableImpl(schemaName, tableName, alias string) spawn2Table {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		SpawngroupIDColumn         = mysql.IntegerColumn("spawngroupID")
		ZoneColumn                 = mysql.StringColumn("zone")
		VersionColumn              = mysql.IntegerColumn("version")
		XColumn                    = mysql.FloatColumn("x")
		YColumn                    = mysql.FloatColumn("y")
		ZColumn                    = mysql.FloatColumn("z")
		HeadingColumn              = mysql.FloatColumn("heading")
		RespawntimeColumn          = mysql.IntegerColumn("respawntime")
		VarianceColumn             = mysql.IntegerColumn("variance")
		PathgridColumn             = mysql.IntegerColumn("pathgrid")
		PathWhenZoneIdleColumn     = mysql.BoolColumn("path_when_zone_idle")
		ConditionColumn            = mysql.IntegerColumn("_condition")
		CondValueColumn            = mysql.IntegerColumn("cond_value")
		AnimationColumn            = mysql.IntegerColumn("animation")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{IDColumn, SpawngroupIDColumn, ZoneColumn, VersionColumn, XColumn, YColumn, ZColumn, HeadingColumn, RespawntimeColumn, VarianceColumn, PathgridColumn, PathWhenZoneIdleColumn, ConditionColumn, CondValueColumn, AnimationColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{SpawngroupIDColumn, ZoneColumn, VersionColumn, XColumn, YColumn, ZColumn, HeadingColumn, RespawntimeColumn, VarianceColumn, PathgridColumn, PathWhenZoneIdleColumn, ConditionColumn, CondValueColumn, AnimationColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{SpawngroupIDColumn, VersionColumn, XColumn, YColumn, ZColumn, HeadingColumn, RespawntimeColumn, VarianceColumn, PathgridColumn, PathWhenZoneIdleColumn, ConditionColumn, CondValueColumn, AnimationColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return spawn2Table{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		SpawngroupID:         SpawngroupIDColumn,
		Zone:                 ZoneColumn,
		Version:              VersionColumn,
		X:                    XColumn,
		Y:                    YColumn,
		Z:                    ZColumn,
		Heading:              HeadingColumn,
		Respawntime:          RespawntimeColumn,
		Variance:             VarianceColumn,
		Pathgrid:             PathgridColumn,
		PathWhenZoneIdle:     PathWhenZoneIdleColumn,
		Condition:            ConditionColumn,
		CondValue:            CondValueColumn,
		Animation:            AnimationColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
