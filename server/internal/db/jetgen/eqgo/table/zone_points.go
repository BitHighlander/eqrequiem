//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ZonePoints = newZonePointsTable("eqgo", "zone_points", "")

type zonePointsTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	Zone                 mysql.ColumnString
	Version              mysql.ColumnInteger
	Number               mysql.ColumnInteger
	Y                    mysql.ColumnFloat
	X                    mysql.ColumnFloat
	Z                    mysql.ColumnFloat
	Heading              mysql.ColumnFloat
	TargetY              mysql.ColumnFloat
	TargetX              mysql.ColumnFloat
	TargetZ              mysql.ColumnFloat
	TargetHeading        mysql.ColumnFloat
	Zoneinst             mysql.ColumnInteger
	TargetZoneID         mysql.ColumnInteger
	TargetInstance       mysql.ColumnInteger
	Buffer               mysql.ColumnFloat
	ClientVersionMask    mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString
	IsVirtual            mysql.ColumnInteger
	Height               mysql.ColumnInteger
	Width                mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ZonePointsTable struct {
	zonePointsTable

	NEW zonePointsTable
}

// AS creates new ZonePointsTable with assigned alias
func (a ZonePointsTable) AS(alias string) *ZonePointsTable {
	return newZonePointsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ZonePointsTable with assigned schema name
func (a ZonePointsTable) FromSchema(schemaName string) *ZonePointsTable {
	return newZonePointsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ZonePointsTable with assigned table prefix
func (a ZonePointsTable) WithPrefix(prefix string) *ZonePointsTable {
	return newZonePointsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ZonePointsTable with assigned table suffix
func (a ZonePointsTable) WithSuffix(suffix string) *ZonePointsTable {
	return newZonePointsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newZonePointsTable(schemaName, tableName, alias string) *ZonePointsTable {
	return &ZonePointsTable{
		zonePointsTable: newZonePointsTableImpl(schemaName, tableName, alias),
		NEW:             newZonePointsTableImpl("", "new", ""),
	}
}

func newZonePointsTableImpl(schemaName, tableName, alias string) zonePointsTable {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		ZoneColumn                 = mysql.StringColumn("zone")
		VersionColumn              = mysql.IntegerColumn("version")
		NumberColumn               = mysql.IntegerColumn("number")
		YColumn                    = mysql.FloatColumn("y")
		XColumn                    = mysql.FloatColumn("x")
		ZColumn                    = mysql.FloatColumn("z")
		HeadingColumn              = mysql.FloatColumn("heading")
		TargetYColumn              = mysql.FloatColumn("target_y")
		TargetXColumn              = mysql.FloatColumn("target_x")
		TargetZColumn              = mysql.FloatColumn("target_z")
		TargetHeadingColumn        = mysql.FloatColumn("target_heading")
		ZoneinstColumn             = mysql.IntegerColumn("zoneinst")
		TargetZoneIDColumn         = mysql.IntegerColumn("target_zone_id")
		TargetInstanceColumn       = mysql.IntegerColumn("target_instance")
		BufferColumn               = mysql.FloatColumn("buffer")
		ClientVersionMaskColumn    = mysql.IntegerColumn("client_version_mask")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		IsVirtualColumn            = mysql.IntegerColumn("is_virtual")
		HeightColumn               = mysql.IntegerColumn("height")
		WidthColumn                = mysql.IntegerColumn("width")
		allColumns                 = mysql.ColumnList{IDColumn, ZoneColumn, VersionColumn, NumberColumn, YColumn, XColumn, ZColumn, HeadingColumn, TargetYColumn, TargetXColumn, TargetZColumn, TargetHeadingColumn, ZoneinstColumn, TargetZoneIDColumn, TargetInstanceColumn, BufferColumn, ClientVersionMaskColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn, IsVirtualColumn, HeightColumn, WidthColumn}
		mutableColumns             = mysql.ColumnList{ZoneColumn, VersionColumn, NumberColumn, YColumn, XColumn, ZColumn, HeadingColumn, TargetYColumn, TargetXColumn, TargetZColumn, TargetHeadingColumn, ZoneinstColumn, TargetZoneIDColumn, TargetInstanceColumn, BufferColumn, ClientVersionMaskColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn, IsVirtualColumn, HeightColumn, WidthColumn}
		defaultColumns             = mysql.ColumnList{VersionColumn, NumberColumn, YColumn, XColumn, ZColumn, HeadingColumn, TargetYColumn, TargetXColumn, TargetZColumn, TargetHeadingColumn, ZoneinstColumn, TargetZoneIDColumn, TargetInstanceColumn, BufferColumn, ClientVersionMaskColumn, MinExpansionColumn, MaxExpansionColumn, IsVirtualColumn, HeightColumn, WidthColumn}
	)

	return zonePointsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Zone:                 ZoneColumn,
		Version:              VersionColumn,
		Number:               NumberColumn,
		Y:                    YColumn,
		X:                    XColumn,
		Z:                    ZColumn,
		Heading:              HeadingColumn,
		TargetY:              TargetYColumn,
		TargetX:              TargetXColumn,
		TargetZ:              TargetZColumn,
		TargetHeading:        TargetHeadingColumn,
		Zoneinst:             ZoneinstColumn,
		TargetZoneID:         TargetZoneIDColumn,
		TargetInstance:       TargetInstanceColumn,
		Buffer:               BufferColumn,
		ClientVersionMask:    ClientVersionMaskColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,
		IsVirtual:            IsVirtualColumn,
		Height:               HeightColumn,
		Width:                WidthColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
