//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Auras = newAurasTable("eqgo", "auras", "")

type aurasTable struct {
	mysql.Table

	// Columns
	Type      mysql.ColumnInteger
	NpcType   mysql.ColumnInteger
	Name      mysql.ColumnString
	SpellID   mysql.ColumnInteger
	Distance  mysql.ColumnInteger
	AuraType  mysql.ColumnInteger
	SpawnType mysql.ColumnInteger
	Movement  mysql.ColumnInteger
	Duration  mysql.ColumnInteger
	Icon      mysql.ColumnInteger
	CastTime  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AurasTable struct {
	aurasTable

	NEW aurasTable
}

// AS creates new AurasTable with assigned alias
func (a AurasTable) AS(alias string) *AurasTable {
	return newAurasTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AurasTable with assigned schema name
func (a AurasTable) FromSchema(schemaName string) *AurasTable {
	return newAurasTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AurasTable with assigned table prefix
func (a AurasTable) WithPrefix(prefix string) *AurasTable {
	return newAurasTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AurasTable with assigned table suffix
func (a AurasTable) WithSuffix(suffix string) *AurasTable {
	return newAurasTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAurasTable(schemaName, tableName, alias string) *AurasTable {
	return &AurasTable{
		aurasTable: newAurasTableImpl(schemaName, tableName, alias),
		NEW:        newAurasTableImpl("", "new", ""),
	}
}

func newAurasTableImpl(schemaName, tableName, alias string) aurasTable {
	var (
		TypeColumn      = mysql.IntegerColumn("type")
		NpcTypeColumn   = mysql.IntegerColumn("npc_type")
		NameColumn      = mysql.StringColumn("name")
		SpellIDColumn   = mysql.IntegerColumn("spell_id")
		DistanceColumn  = mysql.IntegerColumn("distance")
		AuraTypeColumn  = mysql.IntegerColumn("aura_type")
		SpawnTypeColumn = mysql.IntegerColumn("spawn_type")
		MovementColumn  = mysql.IntegerColumn("movement")
		DurationColumn  = mysql.IntegerColumn("duration")
		IconColumn      = mysql.IntegerColumn("icon")
		CastTimeColumn  = mysql.IntegerColumn("cast_time")
		allColumns      = mysql.ColumnList{TypeColumn, NpcTypeColumn, NameColumn, SpellIDColumn, DistanceColumn, AuraTypeColumn, SpawnTypeColumn, MovementColumn, DurationColumn, IconColumn, CastTimeColumn}
		mutableColumns  = mysql.ColumnList{NpcTypeColumn, NameColumn, SpellIDColumn, DistanceColumn, AuraTypeColumn, SpawnTypeColumn, MovementColumn, DurationColumn, IconColumn, CastTimeColumn}
		defaultColumns  = mysql.ColumnList{DistanceColumn, AuraTypeColumn, SpawnTypeColumn, MovementColumn, DurationColumn, IconColumn, CastTimeColumn}
	)

	return aurasTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Type:      TypeColumn,
		NpcType:   NpcTypeColumn,
		Name:      NameColumn,
		SpellID:   SpellIDColumn,
		Distance:  DistanceColumn,
		AuraType:  AuraTypeColumn,
		SpawnType: SpawnTypeColumn,
		Movement:  MovementColumn,
		Duration:  DurationColumn,
		Icon:      IconColumn,
		CastTime:  CastTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
