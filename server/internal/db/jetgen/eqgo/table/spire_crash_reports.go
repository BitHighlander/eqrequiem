//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpireCrashReports = newSpireCrashReportsTable("eqgo", "spire_crash_reports", "")

type spireCrashReportsTable struct {
	mysql.Table

	// Columns
	ID              mysql.ColumnInteger
	PlatformName    mysql.ColumnString
	OriginationInfo mysql.ColumnString
	CompileDate     mysql.ColumnString
	CompileTime     mysql.ColumnString
	Cpus            mysql.ColumnInteger
	CrashReport     mysql.ColumnString
	OSMachine       mysql.ColumnString
	OSRelease       mysql.ColumnString
	OSSysname       mysql.ColumnString
	OSVersion       mysql.ColumnString
	ProcessID       mysql.ColumnInteger
	RssMemory       mysql.ColumnFloat
	ServerName      mysql.ColumnString
	ServerShortName mysql.ColumnString
	ServerVersion   mysql.ColumnString
	Fingerprint     mysql.ColumnString
	Resolved        mysql.ColumnBool
	ResolvedBy      mysql.ColumnInteger
	ResolvedAt      mysql.ColumnTimestamp
	Uptime          mysql.ColumnInteger
	CreatedAt       mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpireCrashReportsTable struct {
	spireCrashReportsTable

	NEW spireCrashReportsTable
}

// AS creates new SpireCrashReportsTable with assigned alias
func (a SpireCrashReportsTable) AS(alias string) *SpireCrashReportsTable {
	return newSpireCrashReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpireCrashReportsTable with assigned schema name
func (a SpireCrashReportsTable) FromSchema(schemaName string) *SpireCrashReportsTable {
	return newSpireCrashReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpireCrashReportsTable with assigned table prefix
func (a SpireCrashReportsTable) WithPrefix(prefix string) *SpireCrashReportsTable {
	return newSpireCrashReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpireCrashReportsTable with assigned table suffix
func (a SpireCrashReportsTable) WithSuffix(suffix string) *SpireCrashReportsTable {
	return newSpireCrashReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpireCrashReportsTable(schemaName, tableName, alias string) *SpireCrashReportsTable {
	return &SpireCrashReportsTable{
		spireCrashReportsTable: newSpireCrashReportsTableImpl(schemaName, tableName, alias),
		NEW:                    newSpireCrashReportsTableImpl("", "new", ""),
	}
}

func newSpireCrashReportsTableImpl(schemaName, tableName, alias string) spireCrashReportsTable {
	var (
		IDColumn              = mysql.IntegerColumn("id")
		PlatformNameColumn    = mysql.StringColumn("platform_name")
		OriginationInfoColumn = mysql.StringColumn("origination_info")
		CompileDateColumn     = mysql.StringColumn("compile_date")
		CompileTimeColumn     = mysql.StringColumn("compile_time")
		CpusColumn            = mysql.IntegerColumn("cpus")
		CrashReportColumn     = mysql.StringColumn("crash_report")
		OSMachineColumn       = mysql.StringColumn("os_machine")
		OSReleaseColumn       = mysql.StringColumn("os_release")
		OSSysnameColumn       = mysql.StringColumn("os_sysname")
		OSVersionColumn       = mysql.StringColumn("os_version")
		ProcessIDColumn       = mysql.IntegerColumn("process_id")
		RssMemoryColumn       = mysql.FloatColumn("rss_memory")
		ServerNameColumn      = mysql.StringColumn("server_name")
		ServerShortNameColumn = mysql.StringColumn("server_short_name")
		ServerVersionColumn   = mysql.StringColumn("server_version")
		FingerprintColumn     = mysql.StringColumn("fingerprint")
		ResolvedColumn        = mysql.BoolColumn("resolved")
		ResolvedByColumn      = mysql.IntegerColumn("resolved_by")
		ResolvedAtColumn      = mysql.TimestampColumn("resolved_at")
		UptimeColumn          = mysql.IntegerColumn("uptime")
		CreatedAtColumn       = mysql.TimestampColumn("created_at")
		allColumns            = mysql.ColumnList{IDColumn, PlatformNameColumn, OriginationInfoColumn, CompileDateColumn, CompileTimeColumn, CpusColumn, CrashReportColumn, OSMachineColumn, OSReleaseColumn, OSSysnameColumn, OSVersionColumn, ProcessIDColumn, RssMemoryColumn, ServerNameColumn, ServerShortNameColumn, ServerVersionColumn, FingerprintColumn, ResolvedColumn, ResolvedByColumn, ResolvedAtColumn, UptimeColumn, CreatedAtColumn}
		mutableColumns        = mysql.ColumnList{PlatformNameColumn, OriginationInfoColumn, CompileDateColumn, CompileTimeColumn, CpusColumn, CrashReportColumn, OSMachineColumn, OSReleaseColumn, OSSysnameColumn, OSVersionColumn, ProcessIDColumn, RssMemoryColumn, ServerNameColumn, ServerShortNameColumn, ServerVersionColumn, FingerprintColumn, ResolvedColumn, ResolvedByColumn, ResolvedAtColumn, UptimeColumn, CreatedAtColumn}
		defaultColumns        = mysql.ColumnList{ResolvedColumn, ResolvedByColumn}
	)

	return spireCrashReportsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		PlatformName:    PlatformNameColumn,
		OriginationInfo: OriginationInfoColumn,
		CompileDate:     CompileDateColumn,
		CompileTime:     CompileTimeColumn,
		Cpus:            CpusColumn,
		CrashReport:     CrashReportColumn,
		OSMachine:       OSMachineColumn,
		OSRelease:       OSReleaseColumn,
		OSSysname:       OSSysnameColumn,
		OSVersion:       OSVersionColumn,
		ProcessID:       ProcessIDColumn,
		RssMemory:       RssMemoryColumn,
		ServerName:      ServerNameColumn,
		ServerShortName: ServerShortNameColumn,
		ServerVersion:   ServerVersionColumn,
		Fingerprint:     FingerprintColumn,
		Resolved:        ResolvedColumn,
		ResolvedBy:      ResolvedByColumn,
		ResolvedAt:      ResolvedAtColumn,
		Uptime:          UptimeColumn,
		CreatedAt:       CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
