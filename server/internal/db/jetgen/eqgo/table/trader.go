//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Trader = newTraderTable("eqgo", "trader", "")

type traderTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnInteger
	CharID             mysql.ColumnInteger
	ItemID             mysql.ColumnInteger
	AugSlot1           mysql.ColumnInteger
	AugSlot2           mysql.ColumnInteger
	AugSlot3           mysql.ColumnInteger
	AugSlot4           mysql.ColumnInteger
	AugSlot5           mysql.ColumnInteger
	AugSlot6           mysql.ColumnInteger
	ItemSn             mysql.ColumnInteger
	ItemCharges        mysql.ColumnInteger
	ItemCost           mysql.ColumnInteger
	SlotID             mysql.ColumnInteger
	CharEntityID       mysql.ColumnInteger
	CharZoneID         mysql.ColumnInteger
	CharZoneInstanceID mysql.ColumnInteger
	ActiveTransaction  mysql.ColumnInteger
	ListingDate        mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type TraderTable struct {
	traderTable

	NEW traderTable
}

// AS creates new TraderTable with assigned alias
func (a TraderTable) AS(alias string) *TraderTable {
	return newTraderTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TraderTable with assigned schema name
func (a TraderTable) FromSchema(schemaName string) *TraderTable {
	return newTraderTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TraderTable with assigned table prefix
func (a TraderTable) WithPrefix(prefix string) *TraderTable {
	return newTraderTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TraderTable with assigned table suffix
func (a TraderTable) WithSuffix(suffix string) *TraderTable {
	return newTraderTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTraderTable(schemaName, tableName, alias string) *TraderTable {
	return &TraderTable{
		traderTable: newTraderTableImpl(schemaName, tableName, alias),
		NEW:         newTraderTableImpl("", "new", ""),
	}
}

func newTraderTableImpl(schemaName, tableName, alias string) traderTable {
	var (
		IDColumn                 = mysql.IntegerColumn("id")
		CharIDColumn             = mysql.IntegerColumn("char_id")
		ItemIDColumn             = mysql.IntegerColumn("item_id")
		AugSlot1Column           = mysql.IntegerColumn("aug_slot_1")
		AugSlot2Column           = mysql.IntegerColumn("aug_slot_2")
		AugSlot3Column           = mysql.IntegerColumn("aug_slot_3")
		AugSlot4Column           = mysql.IntegerColumn("aug_slot_4")
		AugSlot5Column           = mysql.IntegerColumn("aug_slot_5")
		AugSlot6Column           = mysql.IntegerColumn("aug_slot_6")
		ItemSnColumn             = mysql.IntegerColumn("item_sn")
		ItemChargesColumn        = mysql.IntegerColumn("item_charges")
		ItemCostColumn           = mysql.IntegerColumn("item_cost")
		SlotIDColumn             = mysql.IntegerColumn("slot_id")
		CharEntityIDColumn       = mysql.IntegerColumn("char_entity_id")
		CharZoneIDColumn         = mysql.IntegerColumn("char_zone_id")
		CharZoneInstanceIDColumn = mysql.IntegerColumn("char_zone_instance_id")
		ActiveTransactionColumn  = mysql.IntegerColumn("active_transaction")
		ListingDateColumn        = mysql.TimestampColumn("listing_date")
		allColumns               = mysql.ColumnList{IDColumn, CharIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, ItemSnColumn, ItemChargesColumn, ItemCostColumn, SlotIDColumn, CharEntityIDColumn, CharZoneIDColumn, CharZoneInstanceIDColumn, ActiveTransactionColumn, ListingDateColumn}
		mutableColumns           = mysql.ColumnList{CharIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, ItemSnColumn, ItemChargesColumn, ItemCostColumn, SlotIDColumn, CharEntityIDColumn, CharZoneIDColumn, CharZoneInstanceIDColumn, ActiveTransactionColumn, ListingDateColumn}
		defaultColumns           = mysql.ColumnList{CharIDColumn, ItemIDColumn, AugSlot1Column, AugSlot2Column, AugSlot3Column, AugSlot4Column, AugSlot5Column, AugSlot6Column, ItemSnColumn, ItemChargesColumn, ItemCostColumn, SlotIDColumn, CharEntityIDColumn, CharZoneIDColumn, CharZoneInstanceIDColumn, ActiveTransactionColumn}
	)

	return traderTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		CharID:             CharIDColumn,
		ItemID:             ItemIDColumn,
		AugSlot1:           AugSlot1Column,
		AugSlot2:           AugSlot2Column,
		AugSlot3:           AugSlot3Column,
		AugSlot4:           AugSlot4Column,
		AugSlot5:           AugSlot5Column,
		AugSlot6:           AugSlot6Column,
		ItemSn:             ItemSnColumn,
		ItemCharges:        ItemChargesColumn,
		ItemCost:           ItemCostColumn,
		SlotID:             SlotIDColumn,
		CharEntityID:       CharEntityIDColumn,
		CharZoneID:         CharZoneIDColumn,
		CharZoneInstanceID: CharZoneInstanceIDColumn,
		ActiveTransaction:  ActiveTransactionColumn,
		ListingDate:        ListingDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
