//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CommandSettings = newCommandSettingsTable("eqgo", "command_settings", "")

type commandSettingsTable struct {
	mysql.Table

	// Columns
	Command mysql.ColumnString
	Access  mysql.ColumnInteger
	Aliases mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CommandSettingsTable struct {
	commandSettingsTable

	NEW commandSettingsTable
}

// AS creates new CommandSettingsTable with assigned alias
func (a CommandSettingsTable) AS(alias string) *CommandSettingsTable {
	return newCommandSettingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommandSettingsTable with assigned schema name
func (a CommandSettingsTable) FromSchema(schemaName string) *CommandSettingsTable {
	return newCommandSettingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommandSettingsTable with assigned table prefix
func (a CommandSettingsTable) WithPrefix(prefix string) *CommandSettingsTable {
	return newCommandSettingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommandSettingsTable with assigned table suffix
func (a CommandSettingsTable) WithSuffix(suffix string) *CommandSettingsTable {
	return newCommandSettingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommandSettingsTable(schemaName, tableName, alias string) *CommandSettingsTable {
	return &CommandSettingsTable{
		commandSettingsTable: newCommandSettingsTableImpl(schemaName, tableName, alias),
		NEW:                  newCommandSettingsTableImpl("", "new", ""),
	}
}

func newCommandSettingsTableImpl(schemaName, tableName, alias string) commandSettingsTable {
	var (
		CommandColumn  = mysql.StringColumn("command")
		AccessColumn   = mysql.IntegerColumn("access")
		AliasesColumn  = mysql.StringColumn("aliases")
		allColumns     = mysql.ColumnList{CommandColumn, AccessColumn, AliasesColumn}
		mutableColumns = mysql.ColumnList{AccessColumn, AliasesColumn}
		defaultColumns = mysql.ColumnList{CommandColumn, AccessColumn, AliasesColumn}
	)

	return commandSettingsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Command: CommandColumn,
		Access:  AccessColumn,
		Aliases: AliasesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
