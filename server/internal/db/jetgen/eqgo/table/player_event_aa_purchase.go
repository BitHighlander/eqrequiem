//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PlayerEventAaPurchase = newPlayerEventAaPurchaseTable("eqgo", "player_event_aa_purchase", "")

type playerEventAaPurchaseTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	AaAbilityID mysql.ColumnInteger
	Cost        mysql.ColumnInteger
	PreviousID  mysql.ColumnInteger
	NextID      mysql.ColumnInteger
	CreatedAt   mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PlayerEventAaPurchaseTable struct {
	playerEventAaPurchaseTable

	NEW playerEventAaPurchaseTable
}

// AS creates new PlayerEventAaPurchaseTable with assigned alias
func (a PlayerEventAaPurchaseTable) AS(alias string) *PlayerEventAaPurchaseTable {
	return newPlayerEventAaPurchaseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlayerEventAaPurchaseTable with assigned schema name
func (a PlayerEventAaPurchaseTable) FromSchema(schemaName string) *PlayerEventAaPurchaseTable {
	return newPlayerEventAaPurchaseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlayerEventAaPurchaseTable with assigned table prefix
func (a PlayerEventAaPurchaseTable) WithPrefix(prefix string) *PlayerEventAaPurchaseTable {
	return newPlayerEventAaPurchaseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlayerEventAaPurchaseTable with assigned table suffix
func (a PlayerEventAaPurchaseTable) WithSuffix(suffix string) *PlayerEventAaPurchaseTable {
	return newPlayerEventAaPurchaseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlayerEventAaPurchaseTable(schemaName, tableName, alias string) *PlayerEventAaPurchaseTable {
	return &PlayerEventAaPurchaseTable{
		playerEventAaPurchaseTable: newPlayerEventAaPurchaseTableImpl(schemaName, tableName, alias),
		NEW:                        newPlayerEventAaPurchaseTableImpl("", "new", ""),
	}
}

func newPlayerEventAaPurchaseTableImpl(schemaName, tableName, alias string) playerEventAaPurchaseTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		AaAbilityIDColumn = mysql.IntegerColumn("aa_ability_id")
		CostColumn        = mysql.IntegerColumn("cost")
		PreviousIDColumn  = mysql.IntegerColumn("previous_id")
		NextIDColumn      = mysql.IntegerColumn("next_id")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		allColumns        = mysql.ColumnList{IDColumn, AaAbilityIDColumn, CostColumn, PreviousIDColumn, NextIDColumn, CreatedAtColumn}
		mutableColumns    = mysql.ColumnList{AaAbilityIDColumn, CostColumn, PreviousIDColumn, NextIDColumn, CreatedAtColumn}
		defaultColumns    = mysql.ColumnList{AaAbilityIDColumn, CostColumn, PreviousIDColumn, NextIDColumn}
	)

	return playerEventAaPurchaseTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		AaAbilityID: AaAbilityIDColumn,
		Cost:        CostColumn,
		PreviousID:  PreviousIDColumn,
		NextID:      NextIDColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
