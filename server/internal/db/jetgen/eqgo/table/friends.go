//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Friends = newFriendsTable("eqgo", "friends", "")

type friendsTable struct {
	mysql.Table

	// Columns
	Charid mysql.ColumnInteger
	Type   mysql.ColumnInteger // 1 = Friend, 0 = Ignore
	Name   mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FriendsTable struct {
	friendsTable

	NEW friendsTable
}

// AS creates new FriendsTable with assigned alias
func (a FriendsTable) AS(alias string) *FriendsTable {
	return newFriendsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FriendsTable with assigned schema name
func (a FriendsTable) FromSchema(schemaName string) *FriendsTable {
	return newFriendsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FriendsTable with assigned table prefix
func (a FriendsTable) WithPrefix(prefix string) *FriendsTable {
	return newFriendsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FriendsTable with assigned table suffix
func (a FriendsTable) WithSuffix(suffix string) *FriendsTable {
	return newFriendsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFriendsTable(schemaName, tableName, alias string) *FriendsTable {
	return &FriendsTable{
		friendsTable: newFriendsTableImpl(schemaName, tableName, alias),
		NEW:          newFriendsTableImpl("", "new", ""),
	}
}

func newFriendsTableImpl(schemaName, tableName, alias string) friendsTable {
	var (
		CharidColumn   = mysql.IntegerColumn("charid")
		TypeColumn     = mysql.IntegerColumn("type")
		NameColumn     = mysql.StringColumn("name")
		allColumns     = mysql.ColumnList{CharidColumn, TypeColumn, NameColumn}
		mutableColumns = mysql.ColumnList{}
		defaultColumns = mysql.ColumnList{TypeColumn}
	)

	return friendsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Charid: CharidColumn,
		Type:   TypeColumn,
		Name:   NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
