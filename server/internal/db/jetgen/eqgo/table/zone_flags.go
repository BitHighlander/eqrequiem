//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ZoneFlags = newZoneFlagsTable("eqgo", "zone_flags", "")

type zoneFlagsTable struct {
	mysql.Table

	// Columns
	CharID mysql.ColumnInteger
	ZoneID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ZoneFlagsTable struct {
	zoneFlagsTable

	NEW zoneFlagsTable
}

// AS creates new ZoneFlagsTable with assigned alias
func (a ZoneFlagsTable) AS(alias string) *ZoneFlagsTable {
	return newZoneFlagsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ZoneFlagsTable with assigned schema name
func (a ZoneFlagsTable) FromSchema(schemaName string) *ZoneFlagsTable {
	return newZoneFlagsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ZoneFlagsTable with assigned table prefix
func (a ZoneFlagsTable) WithPrefix(prefix string) *ZoneFlagsTable {
	return newZoneFlagsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ZoneFlagsTable with assigned table suffix
func (a ZoneFlagsTable) WithSuffix(suffix string) *ZoneFlagsTable {
	return newZoneFlagsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newZoneFlagsTable(schemaName, tableName, alias string) *ZoneFlagsTable {
	return &ZoneFlagsTable{
		zoneFlagsTable: newZoneFlagsTableImpl(schemaName, tableName, alias),
		NEW:            newZoneFlagsTableImpl("", "new", ""),
	}
}

func newZoneFlagsTableImpl(schemaName, tableName, alias string) zoneFlagsTable {
	var (
		CharIDColumn   = mysql.IntegerColumn("charID")
		ZoneIDColumn   = mysql.IntegerColumn("zoneID")
		allColumns     = mysql.ColumnList{CharIDColumn, ZoneIDColumn}
		mutableColumns = mysql.ColumnList{}
		defaultColumns = mysql.ColumnList{CharIDColumn, ZoneIDColumn}
	)

	return zoneFlagsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CharID: CharIDColumn,
		ZoneID: ZoneIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
