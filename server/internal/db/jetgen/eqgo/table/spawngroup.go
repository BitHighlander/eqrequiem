//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Spawngroup = newSpawngroupTable("eqgo", "spawngroup", "")

type spawngroupTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	Name         mysql.ColumnString
	SpawnLimit   mysql.ColumnInteger
	Dist         mysql.ColumnFloat
	MaxX         mysql.ColumnFloat
	MinX         mysql.ColumnFloat
	MaxY         mysql.ColumnFloat
	MinY         mysql.ColumnFloat
	Delay        mysql.ColumnInteger
	Mindelay     mysql.ColumnInteger
	Despawn      mysql.ColumnInteger
	DespawnTimer mysql.ColumnInteger
	WpSpawns     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpawngroupTable struct {
	spawngroupTable

	NEW spawngroupTable
}

// AS creates new SpawngroupTable with assigned alias
func (a SpawngroupTable) AS(alias string) *SpawngroupTable {
	return newSpawngroupTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpawngroupTable with assigned schema name
func (a SpawngroupTable) FromSchema(schemaName string) *SpawngroupTable {
	return newSpawngroupTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpawngroupTable with assigned table prefix
func (a SpawngroupTable) WithPrefix(prefix string) *SpawngroupTable {
	return newSpawngroupTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpawngroupTable with assigned table suffix
func (a SpawngroupTable) WithSuffix(suffix string) *SpawngroupTable {
	return newSpawngroupTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpawngroupTable(schemaName, tableName, alias string) *SpawngroupTable {
	return &SpawngroupTable{
		spawngroupTable: newSpawngroupTableImpl(schemaName, tableName, alias),
		NEW:             newSpawngroupTableImpl("", "new", ""),
	}
}

func newSpawngroupTableImpl(schemaName, tableName, alias string) spawngroupTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		NameColumn         = mysql.StringColumn("name")
		SpawnLimitColumn   = mysql.IntegerColumn("spawn_limit")
		DistColumn         = mysql.FloatColumn("dist")
		MaxXColumn         = mysql.FloatColumn("max_x")
		MinXColumn         = mysql.FloatColumn("min_x")
		MaxYColumn         = mysql.FloatColumn("max_y")
		MinYColumn         = mysql.FloatColumn("min_y")
		DelayColumn        = mysql.IntegerColumn("delay")
		MindelayColumn     = mysql.IntegerColumn("mindelay")
		DespawnColumn      = mysql.IntegerColumn("despawn")
		DespawnTimerColumn = mysql.IntegerColumn("despawn_timer")
		WpSpawnsColumn     = mysql.IntegerColumn("wp_spawns")
		allColumns         = mysql.ColumnList{IDColumn, NameColumn, SpawnLimitColumn, DistColumn, MaxXColumn, MinXColumn, MaxYColumn, MinYColumn, DelayColumn, MindelayColumn, DespawnColumn, DespawnTimerColumn, WpSpawnsColumn}
		mutableColumns     = mysql.ColumnList{NameColumn, SpawnLimitColumn, DistColumn, MaxXColumn, MinXColumn, MaxYColumn, MinYColumn, DelayColumn, MindelayColumn, DespawnColumn, DespawnTimerColumn, WpSpawnsColumn}
		defaultColumns     = mysql.ColumnList{NameColumn, SpawnLimitColumn, DistColumn, MaxXColumn, MinXColumn, MaxYColumn, MinYColumn, DelayColumn, MindelayColumn, DespawnColumn, DespawnTimerColumn, WpSpawnsColumn}
	)

	return spawngroupTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		SpawnLimit:   SpawnLimitColumn,
		Dist:         DistColumn,
		MaxX:         MaxXColumn,
		MinX:         MinXColumn,
		MaxY:         MaxYColumn,
		MinY:         MinYColumn,
		Delay:        DelayColumn,
		Mindelay:     MindelayColumn,
		Despawn:      DespawnColumn,
		DespawnTimer: DespawnTimerColumn,
		WpSpawns:     WpSpawnsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
