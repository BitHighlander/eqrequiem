//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var MercBuffs = newMercBuffsTable("eqgo", "merc_buffs", "")

type mercBuffsTable struct {
	mysql.Table

	// Columns
	MercBuffId         mysql.ColumnInteger
	MercId             mysql.ColumnInteger
	SpellId            mysql.ColumnInteger
	CasterLevel        mysql.ColumnInteger
	DurationFormula    mysql.ColumnInteger
	TicsRemaining      mysql.ColumnInteger
	PoisonCounters     mysql.ColumnInteger
	DiseaseCounters    mysql.ColumnInteger
	CurseCounters      mysql.ColumnInteger
	CorruptionCounters mysql.ColumnInteger
	HitCount           mysql.ColumnInteger
	MeleeRune          mysql.ColumnInteger
	MagicRune          mysql.ColumnInteger
	DotRune            mysql.ColumnInteger
	CastonX            mysql.ColumnInteger
	Persistent         mysql.ColumnBool
	CastonY            mysql.ColumnInteger
	CastonZ            mysql.ColumnInteger
	ExtraDIChance      mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type MercBuffsTable struct {
	mercBuffsTable

	NEW mercBuffsTable
}

// AS creates new MercBuffsTable with assigned alias
func (a MercBuffsTable) AS(alias string) *MercBuffsTable {
	return newMercBuffsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MercBuffsTable with assigned schema name
func (a MercBuffsTable) FromSchema(schemaName string) *MercBuffsTable {
	return newMercBuffsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MercBuffsTable with assigned table prefix
func (a MercBuffsTable) WithPrefix(prefix string) *MercBuffsTable {
	return newMercBuffsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MercBuffsTable with assigned table suffix
func (a MercBuffsTable) WithSuffix(suffix string) *MercBuffsTable {
	return newMercBuffsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMercBuffsTable(schemaName, tableName, alias string) *MercBuffsTable {
	return &MercBuffsTable{
		mercBuffsTable: newMercBuffsTableImpl(schemaName, tableName, alias),
		NEW:            newMercBuffsTableImpl("", "new", ""),
	}
}

func newMercBuffsTableImpl(schemaName, tableName, alias string) mercBuffsTable {
	var (
		MercBuffIdColumn         = mysql.IntegerColumn("MercBuffId")
		MercIdColumn             = mysql.IntegerColumn("MercId")
		SpellIdColumn            = mysql.IntegerColumn("SpellId")
		CasterLevelColumn        = mysql.IntegerColumn("CasterLevel")
		DurationFormulaColumn    = mysql.IntegerColumn("DurationFormula")
		TicsRemainingColumn      = mysql.IntegerColumn("TicsRemaining")
		PoisonCountersColumn     = mysql.IntegerColumn("PoisonCounters")
		DiseaseCountersColumn    = mysql.IntegerColumn("DiseaseCounters")
		CurseCountersColumn      = mysql.IntegerColumn("CurseCounters")
		CorruptionCountersColumn = mysql.IntegerColumn("CorruptionCounters")
		HitCountColumn           = mysql.IntegerColumn("HitCount")
		MeleeRuneColumn          = mysql.IntegerColumn("MeleeRune")
		MagicRuneColumn          = mysql.IntegerColumn("MagicRune")
		DotRuneColumn            = mysql.IntegerColumn("dot_rune")
		CastonXColumn            = mysql.IntegerColumn("caston_x")
		PersistentColumn         = mysql.BoolColumn("Persistent")
		CastonYColumn            = mysql.IntegerColumn("caston_y")
		CastonZColumn            = mysql.IntegerColumn("caston_z")
		ExtraDIChanceColumn      = mysql.IntegerColumn("ExtraDIChance")
		allColumns               = mysql.ColumnList{MercBuffIdColumn, MercIdColumn, SpellIdColumn, CasterLevelColumn, DurationFormulaColumn, TicsRemainingColumn, PoisonCountersColumn, DiseaseCountersColumn, CurseCountersColumn, CorruptionCountersColumn, HitCountColumn, MeleeRuneColumn, MagicRuneColumn, DotRuneColumn, CastonXColumn, PersistentColumn, CastonYColumn, CastonZColumn, ExtraDIChanceColumn}
		mutableColumns           = mysql.ColumnList{MercIdColumn, SpellIdColumn, CasterLevelColumn, DurationFormulaColumn, TicsRemainingColumn, PoisonCountersColumn, DiseaseCountersColumn, CurseCountersColumn, CorruptionCountersColumn, HitCountColumn, MeleeRuneColumn, MagicRuneColumn, DotRuneColumn, CastonXColumn, PersistentColumn, CastonYColumn, CastonZColumn, ExtraDIChanceColumn}
		defaultColumns           = mysql.ColumnList{MercIdColumn, SpellIdColumn, CasterLevelColumn, DurationFormulaColumn, TicsRemainingColumn, PoisonCountersColumn, DiseaseCountersColumn, CurseCountersColumn, CorruptionCountersColumn, HitCountColumn, MeleeRuneColumn, MagicRuneColumn, DotRuneColumn, CastonXColumn, PersistentColumn, CastonYColumn, CastonZColumn, ExtraDIChanceColumn}
	)

	return mercBuffsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		MercBuffId:         MercBuffIdColumn,
		MercId:             MercIdColumn,
		SpellId:            SpellIdColumn,
		CasterLevel:        CasterLevelColumn,
		DurationFormula:    DurationFormulaColumn,
		TicsRemaining:      TicsRemainingColumn,
		PoisonCounters:     PoisonCountersColumn,
		DiseaseCounters:    DiseaseCountersColumn,
		CurseCounters:      CurseCountersColumn,
		CorruptionCounters: CorruptionCountersColumn,
		HitCount:           HitCountColumn,
		MeleeRune:          MeleeRuneColumn,
		MagicRune:          MagicRuneColumn,
		DotRune:            DotRuneColumn,
		CastonX:            CastonXColumn,
		Persistent:         PersistentColumn,
		CastonY:            CastonYColumn,
		CastonZ:            CastonZColumn,
		ExtraDIChance:      ExtraDIChanceColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
