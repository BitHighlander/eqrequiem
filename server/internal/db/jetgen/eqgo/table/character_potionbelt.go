//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterPotionbelt = newCharacterPotionbeltTable("eqgo", "character_potionbelt", "")

type characterPotionbeltTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnInteger
	PotionID mysql.ColumnInteger
	ItemID   mysql.ColumnInteger
	Icon     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterPotionbeltTable struct {
	characterPotionbeltTable

	NEW characterPotionbeltTable
}

// AS creates new CharacterPotionbeltTable with assigned alias
func (a CharacterPotionbeltTable) AS(alias string) *CharacterPotionbeltTable {
	return newCharacterPotionbeltTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterPotionbeltTable with assigned schema name
func (a CharacterPotionbeltTable) FromSchema(schemaName string) *CharacterPotionbeltTable {
	return newCharacterPotionbeltTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterPotionbeltTable with assigned table prefix
func (a CharacterPotionbeltTable) WithPrefix(prefix string) *CharacterPotionbeltTable {
	return newCharacterPotionbeltTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterPotionbeltTable with assigned table suffix
func (a CharacterPotionbeltTable) WithSuffix(suffix string) *CharacterPotionbeltTable {
	return newCharacterPotionbeltTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterPotionbeltTable(schemaName, tableName, alias string) *CharacterPotionbeltTable {
	return &CharacterPotionbeltTable{
		characterPotionbeltTable: newCharacterPotionbeltTableImpl(schemaName, tableName, alias),
		NEW:                      newCharacterPotionbeltTableImpl("", "new", ""),
	}
}

func newCharacterPotionbeltTableImpl(schemaName, tableName, alias string) characterPotionbeltTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		PotionIDColumn = mysql.IntegerColumn("potion_id")
		ItemIDColumn   = mysql.IntegerColumn("item_id")
		IconColumn     = mysql.IntegerColumn("icon")
		allColumns     = mysql.ColumnList{IDColumn, PotionIDColumn, ItemIDColumn, IconColumn}
		mutableColumns = mysql.ColumnList{ItemIDColumn, IconColumn}
		defaultColumns = mysql.ColumnList{IDColumn, PotionIDColumn, ItemIDColumn, IconColumn}
	)

	return characterPotionbeltTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		PotionID: PotionIDColumn,
		ItemID:   ItemIDColumn,
		Icon:     IconColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
