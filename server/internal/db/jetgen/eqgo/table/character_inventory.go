//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterInventory = newCharacterInventoryTable("eqgo", "character_inventory", "")

type characterInventoryTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	CharacterID    mysql.ColumnInteger // character_data.id
	Bag            mysql.ColumnInteger // Container (-1 = equipment, 0 = main backpack, 1â€“n = bag slots)
	Slot           mysql.ColumnInteger // Slot index within bag/equipment
	ItemInstanceID mysql.ColumnInteger // Item instance GUID

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterInventoryTable struct {
	characterInventoryTable

	NEW characterInventoryTable
}

// AS creates new CharacterInventoryTable with assigned alias
func (a CharacterInventoryTable) AS(alias string) *CharacterInventoryTable {
	return newCharacterInventoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterInventoryTable with assigned schema name
func (a CharacterInventoryTable) FromSchema(schemaName string) *CharacterInventoryTable {
	return newCharacterInventoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterInventoryTable with assigned table prefix
func (a CharacterInventoryTable) WithPrefix(prefix string) *CharacterInventoryTable {
	return newCharacterInventoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterInventoryTable with assigned table suffix
func (a CharacterInventoryTable) WithSuffix(suffix string) *CharacterInventoryTable {
	return newCharacterInventoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterInventoryTable(schemaName, tableName, alias string) *CharacterInventoryTable {
	return &CharacterInventoryTable{
		characterInventoryTable: newCharacterInventoryTableImpl(schemaName, tableName, alias),
		NEW:                     newCharacterInventoryTableImpl("", "new", ""),
	}
}

func newCharacterInventoryTableImpl(schemaName, tableName, alias string) characterInventoryTable {
	var (
		IDColumn             = mysql.IntegerColumn("id")
		CharacterIDColumn    = mysql.IntegerColumn("character_id")
		BagColumn            = mysql.IntegerColumn("bag")
		SlotColumn           = mysql.IntegerColumn("slot")
		ItemInstanceIDColumn = mysql.IntegerColumn("item_instance_id")
		allColumns           = mysql.ColumnList{IDColumn, CharacterIDColumn, BagColumn, SlotColumn, ItemInstanceIDColumn}
		mutableColumns       = mysql.ColumnList{CharacterIDColumn, ItemInstanceIDColumn}
		defaultColumns       = mysql.ColumnList{}
	)

	return characterInventoryTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CharacterID:    CharacterIDColumn,
		Bag:            BagColumn,
		Slot:           SlotColumn,
		ItemInstanceID: ItemInstanceIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
