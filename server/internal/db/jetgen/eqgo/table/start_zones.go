//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var StartZones = newStartZonesTable("eqgo", "start_zones", "")

type startZonesTable struct {
	mysql.Table

	// Columns
	X                    mysql.ColumnFloat
	Y                    mysql.ColumnFloat
	Z                    mysql.ColumnFloat
	Heading              mysql.ColumnFloat
	ZoneID               mysql.ColumnInteger
	BindID               mysql.ColumnInteger
	PlayerChoice         mysql.ColumnInteger
	PlayerClass          mysql.ColumnInteger
	PlayerDeity          mysql.ColumnInteger
	PlayerRace           mysql.ColumnInteger
	StartZone            mysql.ColumnInteger
	BindX                mysql.ColumnFloat
	BindY                mysql.ColumnFloat
	BindZ                mysql.ColumnFloat
	SelectRank           mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type StartZonesTable struct {
	startZonesTable

	NEW startZonesTable
}

// AS creates new StartZonesTable with assigned alias
func (a StartZonesTable) AS(alias string) *StartZonesTable {
	return newStartZonesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StartZonesTable with assigned schema name
func (a StartZonesTable) FromSchema(schemaName string) *StartZonesTable {
	return newStartZonesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StartZonesTable with assigned table prefix
func (a StartZonesTable) WithPrefix(prefix string) *StartZonesTable {
	return newStartZonesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StartZonesTable with assigned table suffix
func (a StartZonesTable) WithSuffix(suffix string) *StartZonesTable {
	return newStartZonesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStartZonesTable(schemaName, tableName, alias string) *StartZonesTable {
	return &StartZonesTable{
		startZonesTable: newStartZonesTableImpl(schemaName, tableName, alias),
		NEW:             newStartZonesTableImpl("", "new", ""),
	}
}

func newStartZonesTableImpl(schemaName, tableName, alias string) startZonesTable {
	var (
		XColumn                    = mysql.FloatColumn("x")
		YColumn                    = mysql.FloatColumn("y")
		ZColumn                    = mysql.FloatColumn("z")
		HeadingColumn              = mysql.FloatColumn("heading")
		ZoneIDColumn               = mysql.IntegerColumn("zone_id")
		BindIDColumn               = mysql.IntegerColumn("bind_id")
		PlayerChoiceColumn         = mysql.IntegerColumn("player_choice")
		PlayerClassColumn          = mysql.IntegerColumn("player_class")
		PlayerDeityColumn          = mysql.IntegerColumn("player_deity")
		PlayerRaceColumn           = mysql.IntegerColumn("player_race")
		StartZoneColumn            = mysql.IntegerColumn("start_zone")
		BindXColumn                = mysql.FloatColumn("bind_x")
		BindYColumn                = mysql.FloatColumn("bind_y")
		BindZColumn                = mysql.FloatColumn("bind_z")
		SelectRankColumn           = mysql.IntegerColumn("select_rank")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{XColumn, YColumn, ZColumn, HeadingColumn, ZoneIDColumn, BindIDColumn, PlayerChoiceColumn, PlayerClassColumn, PlayerDeityColumn, PlayerRaceColumn, StartZoneColumn, BindXColumn, BindYColumn, BindZColumn, SelectRankColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{XColumn, YColumn, ZColumn, HeadingColumn, ZoneIDColumn, BindIDColumn, StartZoneColumn, BindXColumn, BindYColumn, BindZColumn, SelectRankColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{XColumn, YColumn, ZColumn, HeadingColumn, ZoneIDColumn, BindIDColumn, PlayerChoiceColumn, PlayerClassColumn, PlayerDeityColumn, PlayerRaceColumn, StartZoneColumn, BindXColumn, BindYColumn, BindZColumn, SelectRankColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return startZonesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		X:                    XColumn,
		Y:                    YColumn,
		Z:                    ZColumn,
		Heading:              HeadingColumn,
		ZoneID:               ZoneIDColumn,
		BindID:               BindIDColumn,
		PlayerChoice:         PlayerChoiceColumn,
		PlayerClass:          PlayerClassColumn,
		PlayerDeity:          PlayerDeityColumn,
		PlayerRace:           PlayerRaceColumn,
		StartZone:            StartZoneColumn,
		BindX:                BindXColumn,
		BindY:                BindYColumn,
		BindZ:                BindZColumn,
		SelectRank:           SelectRankColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
