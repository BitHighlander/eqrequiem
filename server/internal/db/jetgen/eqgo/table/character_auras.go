//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterAuras = newCharacterAurasTable("eqgo", "character_auras", "")

type characterAurasTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnInteger
	Slot    mysql.ColumnInteger
	SpellID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterAurasTable struct {
	characterAurasTable

	NEW characterAurasTable
}

// AS creates new CharacterAurasTable with assigned alias
func (a CharacterAurasTable) AS(alias string) *CharacterAurasTable {
	return newCharacterAurasTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterAurasTable with assigned schema name
func (a CharacterAurasTable) FromSchema(schemaName string) *CharacterAurasTable {
	return newCharacterAurasTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterAurasTable with assigned table prefix
func (a CharacterAurasTable) WithPrefix(prefix string) *CharacterAurasTable {
	return newCharacterAurasTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterAurasTable with assigned table suffix
func (a CharacterAurasTable) WithSuffix(suffix string) *CharacterAurasTable {
	return newCharacterAurasTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterAurasTable(schemaName, tableName, alias string) *CharacterAurasTable {
	return &CharacterAurasTable{
		characterAurasTable: newCharacterAurasTableImpl(schemaName, tableName, alias),
		NEW:                 newCharacterAurasTableImpl("", "new", ""),
	}
}

func newCharacterAurasTableImpl(schemaName, tableName, alias string) characterAurasTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		SlotColumn     = mysql.IntegerColumn("slot")
		SpellIDColumn  = mysql.IntegerColumn("spell_id")
		allColumns     = mysql.ColumnList{IDColumn, SlotColumn, SpellIDColumn}
		mutableColumns = mysql.ColumnList{SpellIDColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return characterAurasTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Slot:    SlotColumn,
		SpellID: SpellIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
