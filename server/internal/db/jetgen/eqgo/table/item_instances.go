//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ItemInstances = newItemInstancesTable("eqgo", "item_instances", "")

type itemInstancesTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	ItemID    mysql.ColumnInteger
	Mods      mysql.ColumnString
	Charges   mysql.ColumnInteger
	Quantity  mysql.ColumnInteger
	OwnerID   mysql.ColumnInteger
	OwnerType mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type ItemInstancesTable struct {
	itemInstancesTable

	NEW itemInstancesTable
}

// AS creates new ItemInstancesTable with assigned alias
func (a ItemInstancesTable) AS(alias string) *ItemInstancesTable {
	return newItemInstancesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ItemInstancesTable with assigned schema name
func (a ItemInstancesTable) FromSchema(schemaName string) *ItemInstancesTable {
	return newItemInstancesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ItemInstancesTable with assigned table prefix
func (a ItemInstancesTable) WithPrefix(prefix string) *ItemInstancesTable {
	return newItemInstancesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ItemInstancesTable with assigned table suffix
func (a ItemInstancesTable) WithSuffix(suffix string) *ItemInstancesTable {
	return newItemInstancesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newItemInstancesTable(schemaName, tableName, alias string) *ItemInstancesTable {
	return &ItemInstancesTable{
		itemInstancesTable: newItemInstancesTableImpl(schemaName, tableName, alias),
		NEW:                newItemInstancesTableImpl("", "new", ""),
	}
}

func newItemInstancesTableImpl(schemaName, tableName, alias string) itemInstancesTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		ItemIDColumn    = mysql.IntegerColumn("item_id")
		ModsColumn      = mysql.StringColumn("mods")
		ChargesColumn   = mysql.IntegerColumn("charges")
		QuantityColumn  = mysql.IntegerColumn("quantity")
		OwnerIDColumn   = mysql.IntegerColumn("owner_id")
		OwnerTypeColumn = mysql.IntegerColumn("owner_type")
		allColumns      = mysql.ColumnList{IDColumn, ItemIDColumn, ModsColumn, ChargesColumn, QuantityColumn, OwnerIDColumn, OwnerTypeColumn}
		mutableColumns  = mysql.ColumnList{ItemIDColumn, ModsColumn, ChargesColumn, QuantityColumn, OwnerIDColumn, OwnerTypeColumn}
		defaultColumns  = mysql.ColumnList{ChargesColumn, QuantityColumn}
	)

	return itemInstancesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ItemID:    ItemIDColumn,
		Mods:      ModsColumn,
		Charges:   ChargesColumn,
		Quantity:  QuantityColumn,
		OwnerID:   OwnerIDColumn,
		OwnerType: OwnerTypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
