//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Pets = newPetsTable("eqgo", "pets", "")

type petsTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	Type         mysql.ColumnString
	Petpower     mysql.ColumnInteger
	NpcID        mysql.ColumnInteger
	Temp         mysql.ColumnInteger
	Petcontrol   mysql.ColumnInteger
	Petnaming    mysql.ColumnInteger
	Monsterflag  mysql.ColumnInteger
	Equipmentset mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PetsTable struct {
	petsTable

	NEW petsTable
}

// AS creates new PetsTable with assigned alias
func (a PetsTable) AS(alias string) *PetsTable {
	return newPetsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PetsTable with assigned schema name
func (a PetsTable) FromSchema(schemaName string) *PetsTable {
	return newPetsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PetsTable with assigned table prefix
func (a PetsTable) WithPrefix(prefix string) *PetsTable {
	return newPetsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PetsTable with assigned table suffix
func (a PetsTable) WithSuffix(suffix string) *PetsTable {
	return newPetsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPetsTable(schemaName, tableName, alias string) *PetsTable {
	return &PetsTable{
		petsTable: newPetsTableImpl(schemaName, tableName, alias),
		NEW:       newPetsTableImpl("", "new", ""),
	}
}

func newPetsTableImpl(schemaName, tableName, alias string) petsTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		TypeColumn         = mysql.StringColumn("type")
		PetpowerColumn     = mysql.IntegerColumn("petpower")
		NpcIDColumn        = mysql.IntegerColumn("npcID")
		TempColumn         = mysql.IntegerColumn("temp")
		PetcontrolColumn   = mysql.IntegerColumn("petcontrol")
		PetnamingColumn    = mysql.IntegerColumn("petnaming")
		MonsterflagColumn  = mysql.IntegerColumn("monsterflag")
		EquipmentsetColumn = mysql.IntegerColumn("equipmentset")
		allColumns         = mysql.ColumnList{IDColumn, TypeColumn, PetpowerColumn, NpcIDColumn, TempColumn, PetcontrolColumn, PetnamingColumn, MonsterflagColumn, EquipmentsetColumn}
		mutableColumns     = mysql.ColumnList{TypeColumn, PetpowerColumn, NpcIDColumn, TempColumn, PetcontrolColumn, PetnamingColumn, MonsterflagColumn, EquipmentsetColumn}
		defaultColumns     = mysql.ColumnList{TypeColumn, PetpowerColumn, NpcIDColumn, TempColumn, PetcontrolColumn, PetnamingColumn, MonsterflagColumn, EquipmentsetColumn}
	)

	return petsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Type:         TypeColumn,
		Petpower:     PetpowerColumn,
		NpcID:        NpcIDColumn,
		Temp:         TempColumn,
		Petcontrol:   PetcontrolColumn,
		Petnaming:    PetnamingColumn,
		Monsterflag:  MonsterflagColumn,
		Equipmentset: EquipmentsetColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
