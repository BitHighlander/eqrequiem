//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterPetBuffs = newCharacterPetBuffsTable("eqgo", "character_pet_buffs", "")

type characterPetBuffsTable struct {
	mysql.Table

	// Columns
	CharID        mysql.ColumnInteger
	Pet           mysql.ColumnInteger
	Slot          mysql.ColumnInteger
	SpellID       mysql.ColumnInteger
	CasterLevel   mysql.ColumnInteger
	Castername    mysql.ColumnString
	Ticsremaining mysql.ColumnInteger
	Counters      mysql.ColumnInteger
	Numhits       mysql.ColumnInteger
	Rune          mysql.ColumnInteger
	InstrumentMod mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterPetBuffsTable struct {
	characterPetBuffsTable

	NEW characterPetBuffsTable
}

// AS creates new CharacterPetBuffsTable with assigned alias
func (a CharacterPetBuffsTable) AS(alias string) *CharacterPetBuffsTable {
	return newCharacterPetBuffsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterPetBuffsTable with assigned schema name
func (a CharacterPetBuffsTable) FromSchema(schemaName string) *CharacterPetBuffsTable {
	return newCharacterPetBuffsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterPetBuffsTable with assigned table prefix
func (a CharacterPetBuffsTable) WithPrefix(prefix string) *CharacterPetBuffsTable {
	return newCharacterPetBuffsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterPetBuffsTable with assigned table suffix
func (a CharacterPetBuffsTable) WithSuffix(suffix string) *CharacterPetBuffsTable {
	return newCharacterPetBuffsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterPetBuffsTable(schemaName, tableName, alias string) *CharacterPetBuffsTable {
	return &CharacterPetBuffsTable{
		characterPetBuffsTable: newCharacterPetBuffsTableImpl(schemaName, tableName, alias),
		NEW:                    newCharacterPetBuffsTableImpl("", "new", ""),
	}
}

func newCharacterPetBuffsTableImpl(schemaName, tableName, alias string) characterPetBuffsTable {
	var (
		CharIDColumn        = mysql.IntegerColumn("char_id")
		PetColumn           = mysql.IntegerColumn("pet")
		SlotColumn          = mysql.IntegerColumn("slot")
		SpellIDColumn       = mysql.IntegerColumn("spell_id")
		CasterLevelColumn   = mysql.IntegerColumn("caster_level")
		CasternameColumn    = mysql.StringColumn("castername")
		TicsremainingColumn = mysql.IntegerColumn("ticsremaining")
		CountersColumn      = mysql.IntegerColumn("counters")
		NumhitsColumn       = mysql.IntegerColumn("numhits")
		RuneColumn          = mysql.IntegerColumn("rune")
		InstrumentModColumn = mysql.IntegerColumn("instrument_mod")
		allColumns          = mysql.ColumnList{CharIDColumn, PetColumn, SlotColumn, SpellIDColumn, CasterLevelColumn, CasternameColumn, TicsremainingColumn, CountersColumn, NumhitsColumn, RuneColumn, InstrumentModColumn}
		mutableColumns      = mysql.ColumnList{SpellIDColumn, CasterLevelColumn, CasternameColumn, TicsremainingColumn, CountersColumn, NumhitsColumn, RuneColumn, InstrumentModColumn}
		defaultColumns      = mysql.ColumnList{CasterLevelColumn, CasternameColumn, TicsremainingColumn, CountersColumn, NumhitsColumn, RuneColumn, InstrumentModColumn}
	)

	return characterPetBuffsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CharID:        CharIDColumn,
		Pet:           PetColumn,
		Slot:          SlotColumn,
		SpellID:       SpellIDColumn,
		CasterLevel:   CasterLevelColumn,
		Castername:    CasternameColumn,
		Ticsremaining: TicsremainingColumn,
		Counters:      CountersColumn,
		Numhits:       NumhitsColumn,
		Rune:          RuneColumn,
		InstrumentMod: InstrumentModColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
