//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LoginAPITokens = newLoginAPITokensTable("eqgo", "login_api_tokens", "")

type loginAPITokensTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	Token     mysql.ColumnString
	CanWrite  mysql.ColumnInteger
	CanRead   mysql.ColumnInteger
	CreatedAt mysql.ColumnTimestamp
	UpdatedAt mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type LoginAPITokensTable struct {
	loginAPITokensTable

	NEW loginAPITokensTable
}

// AS creates new LoginAPITokensTable with assigned alias
func (a LoginAPITokensTable) AS(alias string) *LoginAPITokensTable {
	return newLoginAPITokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoginAPITokensTable with assigned schema name
func (a LoginAPITokensTable) FromSchema(schemaName string) *LoginAPITokensTable {
	return newLoginAPITokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoginAPITokensTable with assigned table prefix
func (a LoginAPITokensTable) WithPrefix(prefix string) *LoginAPITokensTable {
	return newLoginAPITokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoginAPITokensTable with assigned table suffix
func (a LoginAPITokensTable) WithSuffix(suffix string) *LoginAPITokensTable {
	return newLoginAPITokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoginAPITokensTable(schemaName, tableName, alias string) *LoginAPITokensTable {
	return &LoginAPITokensTable{
		loginAPITokensTable: newLoginAPITokensTableImpl(schemaName, tableName, alias),
		NEW:                 newLoginAPITokensTableImpl("", "new", ""),
	}
}

func newLoginAPITokensTableImpl(schemaName, tableName, alias string) loginAPITokensTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		TokenColumn     = mysql.StringColumn("token")
		CanWriteColumn  = mysql.IntegerColumn("can_write")
		CanReadColumn   = mysql.IntegerColumn("can_read")
		CreatedAtColumn = mysql.TimestampColumn("created_at")
		UpdatedAtColumn = mysql.TimestampColumn("updated_at")
		allColumns      = mysql.ColumnList{IDColumn, TokenColumn, CanWriteColumn, CanReadColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = mysql.ColumnList{TokenColumn, CanWriteColumn, CanReadColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns  = mysql.ColumnList{CanWriteColumn, CanReadColumn, UpdatedAtColumn}
	)

	return loginAPITokensTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Token:     TokenColumn,
		CanWrite:  CanWriteColumn,
		CanRead:   CanReadColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
