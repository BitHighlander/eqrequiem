//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AaRanks = newAaRanksTable("eqgo", "aa_ranks", "")

type aaRanksTable struct {
	mysql.Table

	// Columns
	ID             mysql.ColumnInteger
	UpperHotkeySid mysql.ColumnInteger
	LowerHotkeySid mysql.ColumnInteger
	TitleSid       mysql.ColumnInteger
	DescSid        mysql.ColumnInteger
	Cost           mysql.ColumnInteger
	LevelReq       mysql.ColumnInteger
	Spell          mysql.ColumnInteger
	SpellType      mysql.ColumnInteger
	RecastTime     mysql.ColumnInteger
	Expansion      mysql.ColumnInteger
	PrevID         mysql.ColumnInteger
	NextID         mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AaRanksTable struct {
	aaRanksTable

	NEW aaRanksTable
}

// AS creates new AaRanksTable with assigned alias
func (a AaRanksTable) AS(alias string) *AaRanksTable {
	return newAaRanksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AaRanksTable with assigned schema name
func (a AaRanksTable) FromSchema(schemaName string) *AaRanksTable {
	return newAaRanksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AaRanksTable with assigned table prefix
func (a AaRanksTable) WithPrefix(prefix string) *AaRanksTable {
	return newAaRanksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AaRanksTable with assigned table suffix
func (a AaRanksTable) WithSuffix(suffix string) *AaRanksTable {
	return newAaRanksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAaRanksTable(schemaName, tableName, alias string) *AaRanksTable {
	return &AaRanksTable{
		aaRanksTable: newAaRanksTableImpl(schemaName, tableName, alias),
		NEW:          newAaRanksTableImpl("", "new", ""),
	}
}

func newAaRanksTableImpl(schemaName, tableName, alias string) aaRanksTable {
	var (
		IDColumn             = mysql.IntegerColumn("id")
		UpperHotkeySidColumn = mysql.IntegerColumn("upper_hotkey_sid")
		LowerHotkeySidColumn = mysql.IntegerColumn("lower_hotkey_sid")
		TitleSidColumn       = mysql.IntegerColumn("title_sid")
		DescSidColumn        = mysql.IntegerColumn("desc_sid")
		CostColumn           = mysql.IntegerColumn("cost")
		LevelReqColumn       = mysql.IntegerColumn("level_req")
		SpellColumn          = mysql.IntegerColumn("spell")
		SpellTypeColumn      = mysql.IntegerColumn("spell_type")
		RecastTimeColumn     = mysql.IntegerColumn("recast_time")
		ExpansionColumn      = mysql.IntegerColumn("expansion")
		PrevIDColumn         = mysql.IntegerColumn("prev_id")
		NextIDColumn         = mysql.IntegerColumn("next_id")
		allColumns           = mysql.ColumnList{IDColumn, UpperHotkeySidColumn, LowerHotkeySidColumn, TitleSidColumn, DescSidColumn, CostColumn, LevelReqColumn, SpellColumn, SpellTypeColumn, RecastTimeColumn, ExpansionColumn, PrevIDColumn, NextIDColumn}
		mutableColumns       = mysql.ColumnList{UpperHotkeySidColumn, LowerHotkeySidColumn, TitleSidColumn, DescSidColumn, CostColumn, LevelReqColumn, SpellColumn, SpellTypeColumn, RecastTimeColumn, ExpansionColumn, PrevIDColumn, NextIDColumn}
		defaultColumns       = mysql.ColumnList{UpperHotkeySidColumn, LowerHotkeySidColumn, TitleSidColumn, DescSidColumn, CostColumn, LevelReqColumn, SpellColumn, SpellTypeColumn, RecastTimeColumn, ExpansionColumn, PrevIDColumn, NextIDColumn}
	)

	return aaRanksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		UpperHotkeySid: UpperHotkeySidColumn,
		LowerHotkeySid: LowerHotkeySidColumn,
		TitleSid:       TitleSidColumn,
		DescSid:        DescSidColumn,
		Cost:           CostColumn,
		LevelReq:       LevelReqColumn,
		Spell:          SpellColumn,
		SpellType:      SpellTypeColumn,
		RecastTime:     RecastTimeColumn,
		Expansion:      ExpansionColumn,
		PrevID:         PrevIDColumn,
		NextID:         NextIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
