//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DynamicZones = newDynamicZonesTable("eqgo", "dynamic_zones", "")

type dynamicZonesTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnInteger
	InstanceID        mysql.ColumnInteger
	Type              mysql.ColumnInteger
	UUID              mysql.ColumnString
	Name              mysql.ColumnString
	LeaderID          mysql.ColumnInteger
	MinPlayers        mysql.ColumnInteger
	MaxPlayers        mysql.ColumnInteger
	DzSwitchID        mysql.ColumnInteger
	CompassZoneID     mysql.ColumnInteger
	CompassX          mysql.ColumnFloat
	CompassY          mysql.ColumnFloat
	CompassZ          mysql.ColumnFloat
	SafeReturnZoneID  mysql.ColumnInteger
	SafeReturnX       mysql.ColumnFloat
	SafeReturnY       mysql.ColumnFloat
	SafeReturnZ       mysql.ColumnFloat
	SafeReturnHeading mysql.ColumnFloat
	ZoneInX           mysql.ColumnFloat
	ZoneInY           mysql.ColumnFloat
	ZoneInZ           mysql.ColumnFloat
	ZoneInHeading     mysql.ColumnFloat
	HasZoneIn         mysql.ColumnInteger
	IsLocked          mysql.ColumnInteger
	AddReplay         mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type DynamicZonesTable struct {
	dynamicZonesTable

	NEW dynamicZonesTable
}

// AS creates new DynamicZonesTable with assigned alias
func (a DynamicZonesTable) AS(alias string) *DynamicZonesTable {
	return newDynamicZonesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DynamicZonesTable with assigned schema name
func (a DynamicZonesTable) FromSchema(schemaName string) *DynamicZonesTable {
	return newDynamicZonesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DynamicZonesTable with assigned table prefix
func (a DynamicZonesTable) WithPrefix(prefix string) *DynamicZonesTable {
	return newDynamicZonesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DynamicZonesTable with assigned table suffix
func (a DynamicZonesTable) WithSuffix(suffix string) *DynamicZonesTable {
	return newDynamicZonesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDynamicZonesTable(schemaName, tableName, alias string) *DynamicZonesTable {
	return &DynamicZonesTable{
		dynamicZonesTable: newDynamicZonesTableImpl(schemaName, tableName, alias),
		NEW:               newDynamicZonesTableImpl("", "new", ""),
	}
}

func newDynamicZonesTableImpl(schemaName, tableName, alias string) dynamicZonesTable {
	var (
		IDColumn                = mysql.IntegerColumn("id")
		InstanceIDColumn        = mysql.IntegerColumn("instance_id")
		TypeColumn              = mysql.IntegerColumn("type")
		UUIDColumn              = mysql.StringColumn("uuid")
		NameColumn              = mysql.StringColumn("name")
		LeaderIDColumn          = mysql.IntegerColumn("leader_id")
		MinPlayersColumn        = mysql.IntegerColumn("min_players")
		MaxPlayersColumn        = mysql.IntegerColumn("max_players")
		DzSwitchIDColumn        = mysql.IntegerColumn("dz_switch_id")
		CompassZoneIDColumn     = mysql.IntegerColumn("compass_zone_id")
		CompassXColumn          = mysql.FloatColumn("compass_x")
		CompassYColumn          = mysql.FloatColumn("compass_y")
		CompassZColumn          = mysql.FloatColumn("compass_z")
		SafeReturnZoneIDColumn  = mysql.IntegerColumn("safe_return_zone_id")
		SafeReturnXColumn       = mysql.FloatColumn("safe_return_x")
		SafeReturnYColumn       = mysql.FloatColumn("safe_return_y")
		SafeReturnZColumn       = mysql.FloatColumn("safe_return_z")
		SafeReturnHeadingColumn = mysql.FloatColumn("safe_return_heading")
		ZoneInXColumn           = mysql.FloatColumn("zone_in_x")
		ZoneInYColumn           = mysql.FloatColumn("zone_in_y")
		ZoneInZColumn           = mysql.FloatColumn("zone_in_z")
		ZoneInHeadingColumn     = mysql.FloatColumn("zone_in_heading")
		HasZoneInColumn         = mysql.IntegerColumn("has_zone_in")
		IsLockedColumn          = mysql.IntegerColumn("is_locked")
		AddReplayColumn         = mysql.IntegerColumn("add_replay")
		allColumns              = mysql.ColumnList{IDColumn, InstanceIDColumn, TypeColumn, UUIDColumn, NameColumn, LeaderIDColumn, MinPlayersColumn, MaxPlayersColumn, DzSwitchIDColumn, CompassZoneIDColumn, CompassXColumn, CompassYColumn, CompassZColumn, SafeReturnZoneIDColumn, SafeReturnXColumn, SafeReturnYColumn, SafeReturnZColumn, SafeReturnHeadingColumn, ZoneInXColumn, ZoneInYColumn, ZoneInZColumn, ZoneInHeadingColumn, HasZoneInColumn, IsLockedColumn, AddReplayColumn}
		mutableColumns          = mysql.ColumnList{InstanceIDColumn, TypeColumn, UUIDColumn, NameColumn, LeaderIDColumn, MinPlayersColumn, MaxPlayersColumn, DzSwitchIDColumn, CompassZoneIDColumn, CompassXColumn, CompassYColumn, CompassZColumn, SafeReturnZoneIDColumn, SafeReturnXColumn, SafeReturnYColumn, SafeReturnZColumn, SafeReturnHeadingColumn, ZoneInXColumn, ZoneInYColumn, ZoneInZColumn, ZoneInHeadingColumn, HasZoneInColumn, IsLockedColumn, AddReplayColumn}
		defaultColumns          = mysql.ColumnList{InstanceIDColumn, TypeColumn, NameColumn, LeaderIDColumn, MinPlayersColumn, MaxPlayersColumn, DzSwitchIDColumn, CompassZoneIDColumn, CompassXColumn, CompassYColumn, CompassZColumn, SafeReturnZoneIDColumn, SafeReturnXColumn, SafeReturnYColumn, SafeReturnZColumn, SafeReturnHeadingColumn, ZoneInXColumn, ZoneInYColumn, ZoneInZColumn, ZoneInHeadingColumn, HasZoneInColumn, IsLockedColumn, AddReplayColumn}
	)

	return dynamicZonesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		InstanceID:        InstanceIDColumn,
		Type:              TypeColumn,
		UUID:              UUIDColumn,
		Name:              NameColumn,
		LeaderID:          LeaderIDColumn,
		MinPlayers:        MinPlayersColumn,
		MaxPlayers:        MaxPlayersColumn,
		DzSwitchID:        DzSwitchIDColumn,
		CompassZoneID:     CompassZoneIDColumn,
		CompassX:          CompassXColumn,
		CompassY:          CompassYColumn,
		CompassZ:          CompassZColumn,
		SafeReturnZoneID:  SafeReturnZoneIDColumn,
		SafeReturnX:       SafeReturnXColumn,
		SafeReturnY:       SafeReturnYColumn,
		SafeReturnZ:       SafeReturnZColumn,
		SafeReturnHeading: SafeReturnHeadingColumn,
		ZoneInX:           ZoneInXColumn,
		ZoneInY:           ZoneInYColumn,
		ZoneInZ:           ZoneInZColumn,
		ZoneInHeading:     ZoneInHeadingColumn,
		HasZoneIn:         HasZoneInColumn,
		IsLocked:          IsLockedColumn,
		AddReplay:         AddReplayColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
