//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var GuildTributes = newGuildTributesTable("eqgo", "guild_tributes", "")

type guildTributesTable struct {
	mysql.Table

	// Columns
	GuildID        mysql.ColumnInteger
	TributeID1     mysql.ColumnInteger
	TributeID1Tier mysql.ColumnInteger
	TributeID2     mysql.ColumnInteger
	TributeID2Tier mysql.ColumnInteger
	TimeRemaining  mysql.ColumnInteger
	Enabled        mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type GuildTributesTable struct {
	guildTributesTable

	NEW guildTributesTable
}

// AS creates new GuildTributesTable with assigned alias
func (a GuildTributesTable) AS(alias string) *GuildTributesTable {
	return newGuildTributesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GuildTributesTable with assigned schema name
func (a GuildTributesTable) FromSchema(schemaName string) *GuildTributesTable {
	return newGuildTributesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GuildTributesTable with assigned table prefix
func (a GuildTributesTable) WithPrefix(prefix string) *GuildTributesTable {
	return newGuildTributesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GuildTributesTable with assigned table suffix
func (a GuildTributesTable) WithSuffix(suffix string) *GuildTributesTable {
	return newGuildTributesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGuildTributesTable(schemaName, tableName, alias string) *GuildTributesTable {
	return &GuildTributesTable{
		guildTributesTable: newGuildTributesTableImpl(schemaName, tableName, alias),
		NEW:                newGuildTributesTableImpl("", "new", ""),
	}
}

func newGuildTributesTableImpl(schemaName, tableName, alias string) guildTributesTable {
	var (
		GuildIDColumn        = mysql.IntegerColumn("guild_id")
		TributeID1Column     = mysql.IntegerColumn("tribute_id_1")
		TributeID1TierColumn = mysql.IntegerColumn("tribute_id_1_tier")
		TributeID2Column     = mysql.IntegerColumn("tribute_id_2")
		TributeID2TierColumn = mysql.IntegerColumn("tribute_id_2_tier")
		TimeRemainingColumn  = mysql.IntegerColumn("time_remaining")
		EnabledColumn        = mysql.IntegerColumn("enabled")
		allColumns           = mysql.ColumnList{GuildIDColumn, TributeID1Column, TributeID1TierColumn, TributeID2Column, TributeID2TierColumn, TimeRemainingColumn, EnabledColumn}
		mutableColumns       = mysql.ColumnList{TributeID1Column, TributeID1TierColumn, TributeID2Column, TributeID2TierColumn, TimeRemainingColumn, EnabledColumn}
		defaultColumns       = mysql.ColumnList{GuildIDColumn, TributeID1Column, TributeID1TierColumn, TributeID2Column, TributeID2TierColumn, TimeRemainingColumn, EnabledColumn}
	)

	return guildTributesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GuildID:        GuildIDColumn,
		TributeID1:     TributeID1Column,
		TributeID1Tier: TributeID1TierColumn,
		TributeID2:     TributeID2Column,
		TributeID2Tier: TributeID2TierColumn,
		TimeRemaining:  TimeRemainingColumn,
		Enabled:        EnabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
