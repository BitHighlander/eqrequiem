//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var IPExemptions = newIPExemptionsTable("eqgo", "ip_exemptions", "")

type iPExemptionsTable struct {
	mysql.Table

	// Columns
	ExemptionID     mysql.ColumnInteger
	ExemptionIP     mysql.ColumnString
	ExemptionAmount mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type IPExemptionsTable struct {
	iPExemptionsTable

	NEW iPExemptionsTable
}

// AS creates new IPExemptionsTable with assigned alias
func (a IPExemptionsTable) AS(alias string) *IPExemptionsTable {
	return newIPExemptionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new IPExemptionsTable with assigned schema name
func (a IPExemptionsTable) FromSchema(schemaName string) *IPExemptionsTable {
	return newIPExemptionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new IPExemptionsTable with assigned table prefix
func (a IPExemptionsTable) WithPrefix(prefix string) *IPExemptionsTable {
	return newIPExemptionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new IPExemptionsTable with assigned table suffix
func (a IPExemptionsTable) WithSuffix(suffix string) *IPExemptionsTable {
	return newIPExemptionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newIPExemptionsTable(schemaName, tableName, alias string) *IPExemptionsTable {
	return &IPExemptionsTable{
		iPExemptionsTable: newIPExemptionsTableImpl(schemaName, tableName, alias),
		NEW:               newIPExemptionsTableImpl("", "new", ""),
	}
}

func newIPExemptionsTableImpl(schemaName, tableName, alias string) iPExemptionsTable {
	var (
		ExemptionIDColumn     = mysql.IntegerColumn("exemption_id")
		ExemptionIPColumn     = mysql.StringColumn("exemption_ip")
		ExemptionAmountColumn = mysql.IntegerColumn("exemption_amount")
		allColumns            = mysql.ColumnList{ExemptionIDColumn, ExemptionIPColumn, ExemptionAmountColumn}
		mutableColumns        = mysql.ColumnList{ExemptionIPColumn, ExemptionAmountColumn}
		defaultColumns        = mysql.ColumnList{}
	)

	return iPExemptionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ExemptionID:     ExemptionIDColumn,
		ExemptionIP:     ExemptionIPColumn,
		ExemptionAmount: ExemptionAmountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
