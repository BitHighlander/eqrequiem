//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var QsPlayerSpeech = newQsPlayerSpeechTable("eqgo", "qs_player_speech", "")

type qsPlayerSpeechTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	From         mysql.ColumnString
	To           mysql.ColumnString
	Message      mysql.ColumnString
	Minstatus    mysql.ColumnInteger
	Guilddbid    mysql.ColumnInteger
	Type         mysql.ColumnInteger
	Timerecorded mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type QsPlayerSpeechTable struct {
	qsPlayerSpeechTable

	NEW qsPlayerSpeechTable
}

// AS creates new QsPlayerSpeechTable with assigned alias
func (a QsPlayerSpeechTable) AS(alias string) *QsPlayerSpeechTable {
	return newQsPlayerSpeechTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new QsPlayerSpeechTable with assigned schema name
func (a QsPlayerSpeechTable) FromSchema(schemaName string) *QsPlayerSpeechTable {
	return newQsPlayerSpeechTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new QsPlayerSpeechTable with assigned table prefix
func (a QsPlayerSpeechTable) WithPrefix(prefix string) *QsPlayerSpeechTable {
	return newQsPlayerSpeechTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new QsPlayerSpeechTable with assigned table suffix
func (a QsPlayerSpeechTable) WithSuffix(suffix string) *QsPlayerSpeechTable {
	return newQsPlayerSpeechTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newQsPlayerSpeechTable(schemaName, tableName, alias string) *QsPlayerSpeechTable {
	return &QsPlayerSpeechTable{
		qsPlayerSpeechTable: newQsPlayerSpeechTableImpl(schemaName, tableName, alias),
		NEW:                 newQsPlayerSpeechTableImpl("", "new", ""),
	}
}

func newQsPlayerSpeechTableImpl(schemaName, tableName, alias string) qsPlayerSpeechTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		FromColumn         = mysql.StringColumn("from")
		ToColumn           = mysql.StringColumn("to")
		MessageColumn      = mysql.StringColumn("message")
		MinstatusColumn    = mysql.IntegerColumn("minstatus")
		GuilddbidColumn    = mysql.IntegerColumn("guilddbid")
		TypeColumn         = mysql.IntegerColumn("type")
		TimerecordedColumn = mysql.TimestampColumn("timerecorded")
		allColumns         = mysql.ColumnList{IDColumn, FromColumn, ToColumn, MessageColumn, MinstatusColumn, GuilddbidColumn, TypeColumn, TimerecordedColumn}
		mutableColumns     = mysql.ColumnList{FromColumn, ToColumn, MessageColumn, MinstatusColumn, GuilddbidColumn, TypeColumn, TimerecordedColumn}
		defaultColumns     = mysql.ColumnList{TimerecordedColumn}
	)

	return qsPlayerSpeechTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		From:         FromColumn,
		To:           ToColumn,
		Message:      MessageColumn,
		Minstatus:    MinstatusColumn,
		Guilddbid:    GuilddbidColumn,
		Type:         TypeColumn,
		Timerecorded: TimerecordedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
