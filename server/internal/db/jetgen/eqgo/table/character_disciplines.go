//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CharacterDisciplines = newCharacterDisciplinesTable("eqgo", "character_disciplines", "")

type characterDisciplinesTable struct {
	mysql.Table

	// Columns
	ID     mysql.ColumnInteger
	SlotID mysql.ColumnInteger
	DiscID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type CharacterDisciplinesTable struct {
	characterDisciplinesTable

	NEW characterDisciplinesTable
}

// AS creates new CharacterDisciplinesTable with assigned alias
func (a CharacterDisciplinesTable) AS(alias string) *CharacterDisciplinesTable {
	return newCharacterDisciplinesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CharacterDisciplinesTable with assigned schema name
func (a CharacterDisciplinesTable) FromSchema(schemaName string) *CharacterDisciplinesTable {
	return newCharacterDisciplinesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CharacterDisciplinesTable with assigned table prefix
func (a CharacterDisciplinesTable) WithPrefix(prefix string) *CharacterDisciplinesTable {
	return newCharacterDisciplinesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CharacterDisciplinesTable with assigned table suffix
func (a CharacterDisciplinesTable) WithSuffix(suffix string) *CharacterDisciplinesTable {
	return newCharacterDisciplinesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCharacterDisciplinesTable(schemaName, tableName, alias string) *CharacterDisciplinesTable {
	return &CharacterDisciplinesTable{
		characterDisciplinesTable: newCharacterDisciplinesTableImpl(schemaName, tableName, alias),
		NEW:                       newCharacterDisciplinesTableImpl("", "new", ""),
	}
}

func newCharacterDisciplinesTableImpl(schemaName, tableName, alias string) characterDisciplinesTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		SlotIDColumn   = mysql.IntegerColumn("slot_id")
		DiscIDColumn   = mysql.IntegerColumn("disc_id")
		allColumns     = mysql.ColumnList{IDColumn, SlotIDColumn, DiscIDColumn}
		mutableColumns = mysql.ColumnList{DiscIDColumn}
		defaultColumns = mysql.ColumnList{IDColumn, SlotIDColumn, DiscIDColumn}
	)

	return characterDisciplinesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		SlotID: SlotIDColumn,
		DiscID: DiscIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
