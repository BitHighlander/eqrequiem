//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var StartingItems = newStartingItemsTable("eqgo", "starting_items", "")

type startingItemsTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	ClassList            mysql.ColumnString
	RaceList             mysql.ColumnString
	DeityList            mysql.ColumnString
	ZoneIDList           mysql.ColumnString
	ItemID               mysql.ColumnInteger
	ItemCharges          mysql.ColumnInteger
	AugmentOne           mysql.ColumnInteger
	AugmentTwo           mysql.ColumnInteger
	AugmentThree         mysql.ColumnInteger
	AugmentFour          mysql.ColumnInteger
	AugmentFive          mysql.ColumnInteger
	AugmentSix           mysql.ColumnInteger
	Status               mysql.ColumnInteger
	InventorySlot        mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type StartingItemsTable struct {
	startingItemsTable

	NEW startingItemsTable
}

// AS creates new StartingItemsTable with assigned alias
func (a StartingItemsTable) AS(alias string) *StartingItemsTable {
	return newStartingItemsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StartingItemsTable with assigned schema name
func (a StartingItemsTable) FromSchema(schemaName string) *StartingItemsTable {
	return newStartingItemsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StartingItemsTable with assigned table prefix
func (a StartingItemsTable) WithPrefix(prefix string) *StartingItemsTable {
	return newStartingItemsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StartingItemsTable with assigned table suffix
func (a StartingItemsTable) WithSuffix(suffix string) *StartingItemsTable {
	return newStartingItemsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStartingItemsTable(schemaName, tableName, alias string) *StartingItemsTable {
	return &StartingItemsTable{
		startingItemsTable: newStartingItemsTableImpl(schemaName, tableName, alias),
		NEW:                newStartingItemsTableImpl("", "new", ""),
	}
}

func newStartingItemsTableImpl(schemaName, tableName, alias string) startingItemsTable {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		ClassListColumn            = mysql.StringColumn("class_list")
		RaceListColumn             = mysql.StringColumn("race_list")
		DeityListColumn            = mysql.StringColumn("deity_list")
		ZoneIDListColumn           = mysql.StringColumn("zone_id_list")
		ItemIDColumn               = mysql.IntegerColumn("item_id")
		ItemChargesColumn          = mysql.IntegerColumn("item_charges")
		AugmentOneColumn           = mysql.IntegerColumn("augment_one")
		AugmentTwoColumn           = mysql.IntegerColumn("augment_two")
		AugmentThreeColumn         = mysql.IntegerColumn("augment_three")
		AugmentFourColumn          = mysql.IntegerColumn("augment_four")
		AugmentFiveColumn          = mysql.IntegerColumn("augment_five")
		AugmentSixColumn           = mysql.IntegerColumn("augment_six")
		StatusColumn               = mysql.IntegerColumn("status")
		InventorySlotColumn        = mysql.IntegerColumn("inventory_slot")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{IDColumn, ClassListColumn, RaceListColumn, DeityListColumn, ZoneIDListColumn, ItemIDColumn, ItemChargesColumn, AugmentOneColumn, AugmentTwoColumn, AugmentThreeColumn, AugmentFourColumn, AugmentFiveColumn, AugmentSixColumn, StatusColumn, InventorySlotColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{ClassListColumn, RaceListColumn, DeityListColumn, ZoneIDListColumn, ItemIDColumn, ItemChargesColumn, AugmentOneColumn, AugmentTwoColumn, AugmentThreeColumn, AugmentFourColumn, AugmentFiveColumn, AugmentSixColumn, StatusColumn, InventorySlotColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{ItemIDColumn, ItemChargesColumn, AugmentOneColumn, AugmentTwoColumn, AugmentThreeColumn, AugmentFourColumn, AugmentFiveColumn, AugmentSixColumn, StatusColumn, InventorySlotColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return startingItemsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		ClassList:            ClassListColumn,
		RaceList:             RaceListColumn,
		DeityList:            DeityListColumn,
		ZoneIDList:           ZoneIDListColumn,
		ItemID:               ItemIDColumn,
		ItemCharges:          ItemChargesColumn,
		AugmentOne:           AugmentOneColumn,
		AugmentTwo:           AugmentTwoColumn,
		AugmentThree:         AugmentThreeColumn,
		AugmentFour:          AugmentFourColumn,
		AugmentFive:          AugmentFiveColumn,
		AugmentSix:           AugmentSixColumn,
		Status:               StatusColumn,
		InventorySlot:        InventorySlotColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
