//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PlayerEventSpeech = newPlayerEventSpeechTable("eqgo", "player_event_speech", "")

type playerEventSpeechTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	ToCharID   mysql.ColumnString
	FromCharID mysql.ColumnString
	GuildID    mysql.ColumnInteger
	Type       mysql.ColumnInteger
	MinStatus  mysql.ColumnInteger
	Message    mysql.ColumnString
	CreatedAt  mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PlayerEventSpeechTable struct {
	playerEventSpeechTable

	NEW playerEventSpeechTable
}

// AS creates new PlayerEventSpeechTable with assigned alias
func (a PlayerEventSpeechTable) AS(alias string) *PlayerEventSpeechTable {
	return newPlayerEventSpeechTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlayerEventSpeechTable with assigned schema name
func (a PlayerEventSpeechTable) FromSchema(schemaName string) *PlayerEventSpeechTable {
	return newPlayerEventSpeechTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlayerEventSpeechTable with assigned table prefix
func (a PlayerEventSpeechTable) WithPrefix(prefix string) *PlayerEventSpeechTable {
	return newPlayerEventSpeechTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlayerEventSpeechTable with assigned table suffix
func (a PlayerEventSpeechTable) WithSuffix(suffix string) *PlayerEventSpeechTable {
	return newPlayerEventSpeechTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlayerEventSpeechTable(schemaName, tableName, alias string) *PlayerEventSpeechTable {
	return &PlayerEventSpeechTable{
		playerEventSpeechTable: newPlayerEventSpeechTableImpl(schemaName, tableName, alias),
		NEW:                    newPlayerEventSpeechTableImpl("", "new", ""),
	}
}

func newPlayerEventSpeechTableImpl(schemaName, tableName, alias string) playerEventSpeechTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		ToCharIDColumn   = mysql.StringColumn("to_char_id")
		FromCharIDColumn = mysql.StringColumn("from_char_id")
		GuildIDColumn    = mysql.IntegerColumn("guild_id")
		TypeColumn       = mysql.IntegerColumn("type")
		MinStatusColumn  = mysql.IntegerColumn("min_status")
		MessageColumn    = mysql.StringColumn("message")
		CreatedAtColumn  = mysql.TimestampColumn("created_at")
		allColumns       = mysql.ColumnList{IDColumn, ToCharIDColumn, FromCharIDColumn, GuildIDColumn, TypeColumn, MinStatusColumn, MessageColumn, CreatedAtColumn}
		mutableColumns   = mysql.ColumnList{ToCharIDColumn, FromCharIDColumn, GuildIDColumn, TypeColumn, MinStatusColumn, MessageColumn, CreatedAtColumn}
		defaultColumns   = mysql.ColumnList{GuildIDColumn, TypeColumn, MinStatusColumn}
	)

	return playerEventSpeechTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		ToCharID:   ToCharIDColumn,
		FromCharID: FromCharIDColumn,
		GuildID:    GuildIDColumn,
		Type:       TypeColumn,
		MinStatus:  MinStatusColumn,
		Message:    MessageColumn,
		CreatedAt:  CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
