//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Tasks = newTasksTable("eqgo", "tasks", "")

type tasksTable struct {
	mysql.Table

	// Columns
	ID                  mysql.ColumnInteger
	Type                mysql.ColumnInteger
	Duration            mysql.ColumnInteger
	DurationCode        mysql.ColumnInteger
	Title               mysql.ColumnString
	Description         mysql.ColumnString
	RewardText          mysql.ColumnString
	RewardIDList        mysql.ColumnString
	CashReward          mysql.ColumnInteger
	ExpReward           mysql.ColumnInteger
	RewardMethod        mysql.ColumnInteger
	RewardPoints        mysql.ColumnInteger
	RewardPointType     mysql.ColumnInteger
	MinLevel            mysql.ColumnInteger
	MaxLevel            mysql.ColumnInteger
	LevelSpread         mysql.ColumnInteger
	MinPlayers          mysql.ColumnInteger
	MaxPlayers          mysql.ColumnInteger
	Repeatable          mysql.ColumnInteger
	FactionReward       mysql.ColumnInteger
	CompletionEmote     mysql.ColumnString
	ReplayTimerGroup    mysql.ColumnInteger
	ReplayTimerSeconds  mysql.ColumnInteger
	RequestTimerGroup   mysql.ColumnInteger
	RequestTimerSeconds mysql.ColumnInteger
	DzTemplateID        mysql.ColumnInteger
	LockActivityID      mysql.ColumnInteger
	FactionAmount       mysql.ColumnInteger
	Enabled             mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type TasksTable struct {
	tasksTable

	NEW tasksTable
}

// AS creates new TasksTable with assigned alias
func (a TasksTable) AS(alias string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TasksTable with assigned schema name
func (a TasksTable) FromSchema(schemaName string) *TasksTable {
	return newTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TasksTable with assigned table prefix
func (a TasksTable) WithPrefix(prefix string) *TasksTable {
	return newTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TasksTable with assigned table suffix
func (a TasksTable) WithSuffix(suffix string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTasksTable(schemaName, tableName, alias string) *TasksTable {
	return &TasksTable{
		tasksTable: newTasksTableImpl(schemaName, tableName, alias),
		NEW:        newTasksTableImpl("", "new", ""),
	}
}

func newTasksTableImpl(schemaName, tableName, alias string) tasksTable {
	var (
		IDColumn                  = mysql.IntegerColumn("id")
		TypeColumn                = mysql.IntegerColumn("type")
		DurationColumn            = mysql.IntegerColumn("duration")
		DurationCodeColumn        = mysql.IntegerColumn("duration_code")
		TitleColumn               = mysql.StringColumn("title")
		DescriptionColumn         = mysql.StringColumn("description")
		RewardTextColumn          = mysql.StringColumn("reward_text")
		RewardIDListColumn        = mysql.StringColumn("reward_id_list")
		CashRewardColumn          = mysql.IntegerColumn("cash_reward")
		ExpRewardColumn           = mysql.IntegerColumn("exp_reward")
		RewardMethodColumn        = mysql.IntegerColumn("reward_method")
		RewardPointsColumn        = mysql.IntegerColumn("reward_points")
		RewardPointTypeColumn     = mysql.IntegerColumn("reward_point_type")
		MinLevelColumn            = mysql.IntegerColumn("min_level")
		MaxLevelColumn            = mysql.IntegerColumn("max_level")
		LevelSpreadColumn         = mysql.IntegerColumn("level_spread")
		MinPlayersColumn          = mysql.IntegerColumn("min_players")
		MaxPlayersColumn          = mysql.IntegerColumn("max_players")
		RepeatableColumn          = mysql.IntegerColumn("repeatable")
		FactionRewardColumn       = mysql.IntegerColumn("faction_reward")
		CompletionEmoteColumn     = mysql.StringColumn("completion_emote")
		ReplayTimerGroupColumn    = mysql.IntegerColumn("replay_timer_group")
		ReplayTimerSecondsColumn  = mysql.IntegerColumn("replay_timer_seconds")
		RequestTimerGroupColumn   = mysql.IntegerColumn("request_timer_group")
		RequestTimerSecondsColumn = mysql.IntegerColumn("request_timer_seconds")
		DzTemplateIDColumn        = mysql.IntegerColumn("dz_template_id")
		LockActivityIDColumn      = mysql.IntegerColumn("lock_activity_id")
		FactionAmountColumn       = mysql.IntegerColumn("faction_amount")
		EnabledColumn             = mysql.IntegerColumn("enabled")
		allColumns                = mysql.ColumnList{IDColumn, TypeColumn, DurationColumn, DurationCodeColumn, TitleColumn, DescriptionColumn, RewardTextColumn, RewardIDListColumn, CashRewardColumn, ExpRewardColumn, RewardMethodColumn, RewardPointsColumn, RewardPointTypeColumn, MinLevelColumn, MaxLevelColumn, LevelSpreadColumn, MinPlayersColumn, MaxPlayersColumn, RepeatableColumn, FactionRewardColumn, CompletionEmoteColumn, ReplayTimerGroupColumn, ReplayTimerSecondsColumn, RequestTimerGroupColumn, RequestTimerSecondsColumn, DzTemplateIDColumn, LockActivityIDColumn, FactionAmountColumn, EnabledColumn}
		mutableColumns            = mysql.ColumnList{TypeColumn, DurationColumn, DurationCodeColumn, TitleColumn, DescriptionColumn, RewardTextColumn, RewardIDListColumn, CashRewardColumn, ExpRewardColumn, RewardMethodColumn, RewardPointsColumn, RewardPointTypeColumn, MinLevelColumn, MaxLevelColumn, LevelSpreadColumn, MinPlayersColumn, MaxPlayersColumn, RepeatableColumn, FactionRewardColumn, CompletionEmoteColumn, ReplayTimerGroupColumn, ReplayTimerSecondsColumn, RequestTimerGroupColumn, RequestTimerSecondsColumn, DzTemplateIDColumn, LockActivityIDColumn, FactionAmountColumn, EnabledColumn}
		defaultColumns            = mysql.ColumnList{IDColumn, TypeColumn, DurationColumn, DurationCodeColumn, TitleColumn, RewardTextColumn, CashRewardColumn, ExpRewardColumn, RewardMethodColumn, RewardPointsColumn, RewardPointTypeColumn, MinLevelColumn, MaxLevelColumn, LevelSpreadColumn, MinPlayersColumn, MaxPlayersColumn, RepeatableColumn, FactionRewardColumn, CompletionEmoteColumn, ReplayTimerGroupColumn, ReplayTimerSecondsColumn, RequestTimerGroupColumn, RequestTimerSecondsColumn, DzTemplateIDColumn, LockActivityIDColumn, FactionAmountColumn, EnabledColumn}
	)

	return tasksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		Type:                TypeColumn,
		Duration:            DurationColumn,
		DurationCode:        DurationCodeColumn,
		Title:               TitleColumn,
		Description:         DescriptionColumn,
		RewardText:          RewardTextColumn,
		RewardIDList:        RewardIDListColumn,
		CashReward:          CashRewardColumn,
		ExpReward:           ExpRewardColumn,
		RewardMethod:        RewardMethodColumn,
		RewardPoints:        RewardPointsColumn,
		RewardPointType:     RewardPointTypeColumn,
		MinLevel:            MinLevelColumn,
		MaxLevel:            MaxLevelColumn,
		LevelSpread:         LevelSpreadColumn,
		MinPlayers:          MinPlayersColumn,
		MaxPlayers:          MaxPlayersColumn,
		Repeatable:          RepeatableColumn,
		FactionReward:       FactionRewardColumn,
		CompletionEmote:     CompletionEmoteColumn,
		ReplayTimerGroup:    ReplayTimerGroupColumn,
		ReplayTimerSeconds:  ReplayTimerSecondsColumn,
		RequestTimerGroup:   RequestTimerGroupColumn,
		RequestTimerSeconds: RequestTimerSecondsColumn,
		DzTemplateID:        DzTemplateIDColumn,
		LockActivityID:      LockActivityIDColumn,
		FactionAmount:       FactionAmountColumn,
		Enabled:             EnabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
