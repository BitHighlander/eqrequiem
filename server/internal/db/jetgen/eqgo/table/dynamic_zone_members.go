//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var DynamicZoneMembers = newDynamicZoneMembersTable("eqgo", "dynamic_zone_members", "")

type dynamicZoneMembersTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	DynamicZoneID mysql.ColumnInteger
	CharacterID   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type DynamicZoneMembersTable struct {
	dynamicZoneMembersTable

	NEW dynamicZoneMembersTable
}

// AS creates new DynamicZoneMembersTable with assigned alias
func (a DynamicZoneMembersTable) AS(alias string) *DynamicZoneMembersTable {
	return newDynamicZoneMembersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DynamicZoneMembersTable with assigned schema name
func (a DynamicZoneMembersTable) FromSchema(schemaName string) *DynamicZoneMembersTable {
	return newDynamicZoneMembersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DynamicZoneMembersTable with assigned table prefix
func (a DynamicZoneMembersTable) WithPrefix(prefix string) *DynamicZoneMembersTable {
	return newDynamicZoneMembersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DynamicZoneMembersTable with assigned table suffix
func (a DynamicZoneMembersTable) WithSuffix(suffix string) *DynamicZoneMembersTable {
	return newDynamicZoneMembersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDynamicZoneMembersTable(schemaName, tableName, alias string) *DynamicZoneMembersTable {
	return &DynamicZoneMembersTable{
		dynamicZoneMembersTable: newDynamicZoneMembersTableImpl(schemaName, tableName, alias),
		NEW:                     newDynamicZoneMembersTableImpl("", "new", ""),
	}
}

func newDynamicZoneMembersTableImpl(schemaName, tableName, alias string) dynamicZoneMembersTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		DynamicZoneIDColumn = mysql.IntegerColumn("dynamic_zone_id")
		CharacterIDColumn   = mysql.IntegerColumn("character_id")
		allColumns          = mysql.ColumnList{IDColumn, DynamicZoneIDColumn, CharacterIDColumn}
		mutableColumns      = mysql.ColumnList{DynamicZoneIDColumn, CharacterIDColumn}
		defaultColumns      = mysql.ColumnList{DynamicZoneIDColumn, CharacterIDColumn}
	)

	return dynamicZoneMembersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		DynamicZoneID: DynamicZoneIDColumn,
		CharacterID:   CharacterIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
