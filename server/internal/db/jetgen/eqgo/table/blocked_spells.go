//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var BlockedSpells = newBlockedSpellsTable("eqgo", "blocked_spells", "")

type blockedSpellsTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	Spellid              mysql.ColumnInteger
	Type                 mysql.ColumnInteger
	Zoneid               mysql.ColumnInteger
	X                    mysql.ColumnFloat
	Y                    mysql.ColumnFloat
	Z                    mysql.ColumnFloat
	XDiff                mysql.ColumnFloat
	YDiff                mysql.ColumnFloat
	ZDiff                mysql.ColumnFloat
	Message              mysql.ColumnString
	Description          mysql.ColumnString
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type BlockedSpellsTable struct {
	blockedSpellsTable

	NEW blockedSpellsTable
}

// AS creates new BlockedSpellsTable with assigned alias
func (a BlockedSpellsTable) AS(alias string) *BlockedSpellsTable {
	return newBlockedSpellsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BlockedSpellsTable with assigned schema name
func (a BlockedSpellsTable) FromSchema(schemaName string) *BlockedSpellsTable {
	return newBlockedSpellsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BlockedSpellsTable with assigned table prefix
func (a BlockedSpellsTable) WithPrefix(prefix string) *BlockedSpellsTable {
	return newBlockedSpellsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BlockedSpellsTable with assigned table suffix
func (a BlockedSpellsTable) WithSuffix(suffix string) *BlockedSpellsTable {
	return newBlockedSpellsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBlockedSpellsTable(schemaName, tableName, alias string) *BlockedSpellsTable {
	return &BlockedSpellsTable{
		blockedSpellsTable: newBlockedSpellsTableImpl(schemaName, tableName, alias),
		NEW:                newBlockedSpellsTableImpl("", "new", ""),
	}
}

func newBlockedSpellsTableImpl(schemaName, tableName, alias string) blockedSpellsTable {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		SpellidColumn              = mysql.IntegerColumn("spellid")
		TypeColumn                 = mysql.IntegerColumn("type")
		ZoneidColumn               = mysql.IntegerColumn("zoneid")
		XColumn                    = mysql.FloatColumn("x")
		YColumn                    = mysql.FloatColumn("y")
		ZColumn                    = mysql.FloatColumn("z")
		XDiffColumn                = mysql.FloatColumn("x_diff")
		YDiffColumn                = mysql.FloatColumn("y_diff")
		ZDiffColumn                = mysql.FloatColumn("z_diff")
		MessageColumn              = mysql.StringColumn("message")
		DescriptionColumn          = mysql.StringColumn("description")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{IDColumn, SpellidColumn, TypeColumn, ZoneidColumn, XColumn, YColumn, ZColumn, XDiffColumn, YDiffColumn, ZDiffColumn, MessageColumn, DescriptionColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{SpellidColumn, TypeColumn, ZoneidColumn, XColumn, YColumn, ZColumn, XDiffColumn, YDiffColumn, ZDiffColumn, MessageColumn, DescriptionColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{SpellidColumn, TypeColumn, ZoneidColumn, XColumn, YColumn, ZColumn, XDiffColumn, YDiffColumn, ZDiffColumn, MessageColumn, DescriptionColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return blockedSpellsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Spellid:              SpellidColumn,
		Type:                 TypeColumn,
		Zoneid:               ZoneidColumn,
		X:                    XColumn,
		Y:                    YColumn,
		Z:                    ZColumn,
		XDiff:                XDiffColumn,
		YDiff:                YDiffColumn,
		ZDiff:                ZDiffColumn,
		Message:              MessageColumn,
		Description:          DescriptionColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
