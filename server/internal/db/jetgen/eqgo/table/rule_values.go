//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var RuleValues = newRuleValuesTable("eqgo", "rule_values", "")

type ruleValuesTable struct {
	mysql.Table

	// Columns
	RulesetID mysql.ColumnInteger
	RuleName  mysql.ColumnString
	RuleValue mysql.ColumnString
	Notes     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type RuleValuesTable struct {
	ruleValuesTable

	NEW ruleValuesTable
}

// AS creates new RuleValuesTable with assigned alias
func (a RuleValuesTable) AS(alias string) *RuleValuesTable {
	return newRuleValuesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RuleValuesTable with assigned schema name
func (a RuleValuesTable) FromSchema(schemaName string) *RuleValuesTable {
	return newRuleValuesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RuleValuesTable with assigned table prefix
func (a RuleValuesTable) WithPrefix(prefix string) *RuleValuesTable {
	return newRuleValuesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RuleValuesTable with assigned table suffix
func (a RuleValuesTable) WithSuffix(suffix string) *RuleValuesTable {
	return newRuleValuesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRuleValuesTable(schemaName, tableName, alias string) *RuleValuesTable {
	return &RuleValuesTable{
		ruleValuesTable: newRuleValuesTableImpl(schemaName, tableName, alias),
		NEW:             newRuleValuesTableImpl("", "new", ""),
	}
}

func newRuleValuesTableImpl(schemaName, tableName, alias string) ruleValuesTable {
	var (
		RulesetIDColumn = mysql.IntegerColumn("ruleset_id")
		RuleNameColumn  = mysql.StringColumn("rule_name")
		RuleValueColumn = mysql.StringColumn("rule_value")
		NotesColumn     = mysql.StringColumn("notes")
		allColumns      = mysql.ColumnList{RulesetIDColumn, RuleNameColumn, RuleValueColumn, NotesColumn}
		mutableColumns  = mysql.ColumnList{RuleValueColumn, NotesColumn}
		defaultColumns  = mysql.ColumnList{RulesetIDColumn, RuleNameColumn}
	)

	return ruleValuesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		RulesetID: RulesetIDColumn,
		RuleName:  RuleNameColumn,
		RuleValue: RuleValueColumn,
		Notes:     NotesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
