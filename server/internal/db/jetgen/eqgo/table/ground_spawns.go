//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var GroundSpawns = newGroundSpawnsTable("eqgo", "ground_spawns", "")

type groundSpawnsTable struct {
	mysql.Table

	// Columns
	ID                   mysql.ColumnInteger
	Zoneid               mysql.ColumnInteger
	Version              mysql.ColumnInteger
	MaxX                 mysql.ColumnFloat
	MaxY                 mysql.ColumnFloat
	MaxZ                 mysql.ColumnFloat
	MinX                 mysql.ColumnFloat
	MinY                 mysql.ColumnFloat
	Heading              mysql.ColumnFloat
	Name                 mysql.ColumnString
	Item                 mysql.ColumnInteger
	MaxAllowed           mysql.ColumnInteger
	Comment              mysql.ColumnString
	RespawnTimer         mysql.ColumnInteger
	FixZ                 mysql.ColumnInteger
	MinExpansion         mysql.ColumnInteger
	MaxExpansion         mysql.ColumnInteger
	ContentFlags         mysql.ColumnString
	ContentFlagsDisabled mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type GroundSpawnsTable struct {
	groundSpawnsTable

	NEW groundSpawnsTable
}

// AS creates new GroundSpawnsTable with assigned alias
func (a GroundSpawnsTable) AS(alias string) *GroundSpawnsTable {
	return newGroundSpawnsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GroundSpawnsTable with assigned schema name
func (a GroundSpawnsTable) FromSchema(schemaName string) *GroundSpawnsTable {
	return newGroundSpawnsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GroundSpawnsTable with assigned table prefix
func (a GroundSpawnsTable) WithPrefix(prefix string) *GroundSpawnsTable {
	return newGroundSpawnsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GroundSpawnsTable with assigned table suffix
func (a GroundSpawnsTable) WithSuffix(suffix string) *GroundSpawnsTable {
	return newGroundSpawnsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGroundSpawnsTable(schemaName, tableName, alias string) *GroundSpawnsTable {
	return &GroundSpawnsTable{
		groundSpawnsTable: newGroundSpawnsTableImpl(schemaName, tableName, alias),
		NEW:               newGroundSpawnsTableImpl("", "new", ""),
	}
}

func newGroundSpawnsTableImpl(schemaName, tableName, alias string) groundSpawnsTable {
	var (
		IDColumn                   = mysql.IntegerColumn("id")
		ZoneidColumn               = mysql.IntegerColumn("zoneid")
		VersionColumn              = mysql.IntegerColumn("version")
		MaxXColumn                 = mysql.FloatColumn("max_x")
		MaxYColumn                 = mysql.FloatColumn("max_y")
		MaxZColumn                 = mysql.FloatColumn("max_z")
		MinXColumn                 = mysql.FloatColumn("min_x")
		MinYColumn                 = mysql.FloatColumn("min_y")
		HeadingColumn              = mysql.FloatColumn("heading")
		NameColumn                 = mysql.StringColumn("name")
		ItemColumn                 = mysql.IntegerColumn("item")
		MaxAllowedColumn           = mysql.IntegerColumn("max_allowed")
		CommentColumn              = mysql.StringColumn("comment")
		RespawnTimerColumn         = mysql.IntegerColumn("respawn_timer")
		FixZColumn                 = mysql.IntegerColumn("fix_z")
		MinExpansionColumn         = mysql.IntegerColumn("min_expansion")
		MaxExpansionColumn         = mysql.IntegerColumn("max_expansion")
		ContentFlagsColumn         = mysql.StringColumn("content_flags")
		ContentFlagsDisabledColumn = mysql.StringColumn("content_flags_disabled")
		allColumns                 = mysql.ColumnList{IDColumn, ZoneidColumn, VersionColumn, MaxXColumn, MaxYColumn, MaxZColumn, MinXColumn, MinYColumn, HeadingColumn, NameColumn, ItemColumn, MaxAllowedColumn, CommentColumn, RespawnTimerColumn, FixZColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		mutableColumns             = mysql.ColumnList{ZoneidColumn, VersionColumn, MaxXColumn, MaxYColumn, MaxZColumn, MinXColumn, MinYColumn, HeadingColumn, NameColumn, ItemColumn, MaxAllowedColumn, CommentColumn, RespawnTimerColumn, FixZColumn, MinExpansionColumn, MaxExpansionColumn, ContentFlagsColumn, ContentFlagsDisabledColumn}
		defaultColumns             = mysql.ColumnList{ZoneidColumn, VersionColumn, MaxXColumn, MaxYColumn, MaxZColumn, MinXColumn, MinYColumn, HeadingColumn, NameColumn, ItemColumn, MaxAllowedColumn, CommentColumn, RespawnTimerColumn, FixZColumn, MinExpansionColumn, MaxExpansionColumn}
	)

	return groundSpawnsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Zoneid:               ZoneidColumn,
		Version:              VersionColumn,
		MaxX:                 MaxXColumn,
		MaxY:                 MaxYColumn,
		MaxZ:                 MaxZColumn,
		MinX:                 MinXColumn,
		MinY:                 MinYColumn,
		Heading:              HeadingColumn,
		Name:                 NameColumn,
		Item:                 ItemColumn,
		MaxAllowed:           MaxAllowedColumn,
		Comment:              CommentColumn,
		RespawnTimer:         RespawnTimerColumn,
		FixZ:                 FixZColumn,
		MinExpansion:         MinExpansionColumn,
		MaxExpansion:         MaxExpansionColumn,
		ContentFlags:         ContentFlagsColumn,
		ContentFlagsDisabled: ContentFlagsDisabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
