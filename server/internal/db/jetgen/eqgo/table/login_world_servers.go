//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var LoginWorldServers = newLoginWorldServersTable("eqgo", "login_world_servers", "")

type loginWorldServersTable struct {
	mysql.Table

	// Columns
	ID                    mysql.ColumnInteger
	LongName              mysql.ColumnString
	ShortName             mysql.ColumnString
	TagDescription        mysql.ColumnString
	LoginServerListTypeID mysql.ColumnInteger
	LastLoginDate         mysql.ColumnTimestamp
	LastIPAddress         mysql.ColumnString
	LoginServerAdminID    mysql.ColumnInteger
	IsServerTrusted       mysql.ColumnInteger
	Note                  mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type LoginWorldServersTable struct {
	loginWorldServersTable

	NEW loginWorldServersTable
}

// AS creates new LoginWorldServersTable with assigned alias
func (a LoginWorldServersTable) AS(alias string) *LoginWorldServersTable {
	return newLoginWorldServersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LoginWorldServersTable with assigned schema name
func (a LoginWorldServersTable) FromSchema(schemaName string) *LoginWorldServersTable {
	return newLoginWorldServersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LoginWorldServersTable with assigned table prefix
func (a LoginWorldServersTable) WithPrefix(prefix string) *LoginWorldServersTable {
	return newLoginWorldServersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LoginWorldServersTable with assigned table suffix
func (a LoginWorldServersTable) WithSuffix(suffix string) *LoginWorldServersTable {
	return newLoginWorldServersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLoginWorldServersTable(schemaName, tableName, alias string) *LoginWorldServersTable {
	return &LoginWorldServersTable{
		loginWorldServersTable: newLoginWorldServersTableImpl(schemaName, tableName, alias),
		NEW:                    newLoginWorldServersTableImpl("", "new", ""),
	}
}

func newLoginWorldServersTableImpl(schemaName, tableName, alias string) loginWorldServersTable {
	var (
		IDColumn                    = mysql.IntegerColumn("id")
		LongNameColumn              = mysql.StringColumn("long_name")
		ShortNameColumn             = mysql.StringColumn("short_name")
		TagDescriptionColumn        = mysql.StringColumn("tag_description")
		LoginServerListTypeIDColumn = mysql.IntegerColumn("login_server_list_type_id")
		LastLoginDateColumn         = mysql.TimestampColumn("last_login_date")
		LastIPAddressColumn         = mysql.StringColumn("last_ip_address")
		LoginServerAdminIDColumn    = mysql.IntegerColumn("login_server_admin_id")
		IsServerTrustedColumn       = mysql.IntegerColumn("is_server_trusted")
		NoteColumn                  = mysql.StringColumn("note")
		allColumns                  = mysql.ColumnList{IDColumn, LongNameColumn, ShortNameColumn, TagDescriptionColumn, LoginServerListTypeIDColumn, LastLoginDateColumn, LastIPAddressColumn, LoginServerAdminIDColumn, IsServerTrustedColumn, NoteColumn}
		mutableColumns              = mysql.ColumnList{LongNameColumn, ShortNameColumn, TagDescriptionColumn, LoginServerListTypeIDColumn, LastLoginDateColumn, LastIPAddressColumn, LoginServerAdminIDColumn, IsServerTrustedColumn, NoteColumn}
		defaultColumns              = mysql.ColumnList{TagDescriptionColumn}
	)

	return loginWorldServersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		LongName:              LongNameColumn,
		ShortName:             ShortNameColumn,
		TagDescription:        TagDescriptionColumn,
		LoginServerListTypeID: LoginServerListTypeIDColumn,
		LastLoginDate:         LastLoginDateColumn,
		LastIPAddress:         LastIPAddressColumn,
		LoginServerAdminID:    LoginServerAdminIDColumn,
		IsServerTrusted:       IsServerTrustedColumn,
		Note:                  NoteColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
