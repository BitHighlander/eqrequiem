//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var InstanceList = newInstanceListTable("eqgo", "instance_list", "")

type instanceListTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	Zone         mysql.ColumnInteger
	Version      mysql.ColumnInteger
	IsGlobal     mysql.ColumnInteger
	StartTime    mysql.ColumnInteger
	Duration     mysql.ColumnInteger
	NeverExpires mysql.ColumnInteger
	Notes        mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type InstanceListTable struct {
	instanceListTable

	NEW instanceListTable
}

// AS creates new InstanceListTable with assigned alias
func (a InstanceListTable) AS(alias string) *InstanceListTable {
	return newInstanceListTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InstanceListTable with assigned schema name
func (a InstanceListTable) FromSchema(schemaName string) *InstanceListTable {
	return newInstanceListTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InstanceListTable with assigned table prefix
func (a InstanceListTable) WithPrefix(prefix string) *InstanceListTable {
	return newInstanceListTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InstanceListTable with assigned table suffix
func (a InstanceListTable) WithSuffix(suffix string) *InstanceListTable {
	return newInstanceListTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInstanceListTable(schemaName, tableName, alias string) *InstanceListTable {
	return &InstanceListTable{
		instanceListTable: newInstanceListTableImpl(schemaName, tableName, alias),
		NEW:               newInstanceListTableImpl("", "new", ""),
	}
}

func newInstanceListTableImpl(schemaName, tableName, alias string) instanceListTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		ZoneColumn         = mysql.IntegerColumn("zone")
		VersionColumn      = mysql.IntegerColumn("version")
		IsGlobalColumn     = mysql.IntegerColumn("is_global")
		StartTimeColumn    = mysql.IntegerColumn("start_time")
		DurationColumn     = mysql.IntegerColumn("duration")
		NeverExpiresColumn = mysql.IntegerColumn("never_expires")
		NotesColumn        = mysql.StringColumn("notes")
		allColumns         = mysql.ColumnList{IDColumn, ZoneColumn, VersionColumn, IsGlobalColumn, StartTimeColumn, DurationColumn, NeverExpiresColumn, NotesColumn}
		mutableColumns     = mysql.ColumnList{ZoneColumn, VersionColumn, IsGlobalColumn, StartTimeColumn, DurationColumn, NeverExpiresColumn, NotesColumn}
		defaultColumns     = mysql.ColumnList{ZoneColumn, VersionColumn, IsGlobalColumn, StartTimeColumn, DurationColumn, NeverExpiresColumn, NotesColumn}
	)

	return instanceListTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Zone:         ZoneColumn,
		Version:      VersionColumn,
		IsGlobal:     IsGlobalColumn,
		StartTime:    StartTimeColumn,
		Duration:     DurationColumn,
		NeverExpires: NeverExpiresColumn,
		Notes:        NotesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
