//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SpawnConditions = newSpawnConditionsTable("eqgo", "spawn_conditions", "")

type spawnConditionsTable struct {
	mysql.Table

	// Columns
	Zone     mysql.ColumnString
	ID       mysql.ColumnInteger
	Value    mysql.ColumnInteger
	Onchange mysql.ColumnInteger
	Name     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type SpawnConditionsTable struct {
	spawnConditionsTable

	NEW spawnConditionsTable
}

// AS creates new SpawnConditionsTable with assigned alias
func (a SpawnConditionsTable) AS(alias string) *SpawnConditionsTable {
	return newSpawnConditionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SpawnConditionsTable with assigned schema name
func (a SpawnConditionsTable) FromSchema(schemaName string) *SpawnConditionsTable {
	return newSpawnConditionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SpawnConditionsTable with assigned table prefix
func (a SpawnConditionsTable) WithPrefix(prefix string) *SpawnConditionsTable {
	return newSpawnConditionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SpawnConditionsTable with assigned table suffix
func (a SpawnConditionsTable) WithSuffix(suffix string) *SpawnConditionsTable {
	return newSpawnConditionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSpawnConditionsTable(schemaName, tableName, alias string) *SpawnConditionsTable {
	return &SpawnConditionsTable{
		spawnConditionsTable: newSpawnConditionsTableImpl(schemaName, tableName, alias),
		NEW:                  newSpawnConditionsTableImpl("", "new", ""),
	}
}

func newSpawnConditionsTableImpl(schemaName, tableName, alias string) spawnConditionsTable {
	var (
		ZoneColumn     = mysql.StringColumn("zone")
		IDColumn       = mysql.IntegerColumn("id")
		ValueColumn    = mysql.IntegerColumn("value")
		OnchangeColumn = mysql.IntegerColumn("onchange")
		NameColumn     = mysql.StringColumn("name")
		allColumns     = mysql.ColumnList{ZoneColumn, IDColumn, ValueColumn, OnchangeColumn, NameColumn}
		mutableColumns = mysql.ColumnList{ValueColumn, OnchangeColumn, NameColumn}
		defaultColumns = mysql.ColumnList{ZoneColumn, IDColumn, ValueColumn, OnchangeColumn, NameColumn}
	)

	return spawnConditionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Zone:     ZoneColumn,
		ID:       IDColumn,
		Value:    ValueColumn,
		Onchange: OnchangeColumn,
		Name:     NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
