//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var BaseData = newBaseDataTable("eqgo", "base_data", "")

type baseDataTable struct {
	mysql.Table

	// Columns
	Level    mysql.ColumnInteger
	Class    mysql.ColumnInteger
	Hp       mysql.ColumnFloat
	Mana     mysql.ColumnFloat
	End      mysql.ColumnFloat
	HpRegen  mysql.ColumnFloat
	EndRegen mysql.ColumnFloat
	HpFac    mysql.ColumnFloat
	ManaFac  mysql.ColumnFloat
	EndFac   mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type BaseDataTable struct {
	baseDataTable

	NEW baseDataTable
}

// AS creates new BaseDataTable with assigned alias
func (a BaseDataTable) AS(alias string) *BaseDataTable {
	return newBaseDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BaseDataTable with assigned schema name
func (a BaseDataTable) FromSchema(schemaName string) *BaseDataTable {
	return newBaseDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BaseDataTable with assigned table prefix
func (a BaseDataTable) WithPrefix(prefix string) *BaseDataTable {
	return newBaseDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BaseDataTable with assigned table suffix
func (a BaseDataTable) WithSuffix(suffix string) *BaseDataTable {
	return newBaseDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBaseDataTable(schemaName, tableName, alias string) *BaseDataTable {
	return &BaseDataTable{
		baseDataTable: newBaseDataTableImpl(schemaName, tableName, alias),
		NEW:           newBaseDataTableImpl("", "new", ""),
	}
}

func newBaseDataTableImpl(schemaName, tableName, alias string) baseDataTable {
	var (
		LevelColumn    = mysql.IntegerColumn("level")
		ClassColumn    = mysql.IntegerColumn("class")
		HpColumn       = mysql.FloatColumn("hp")
		ManaColumn     = mysql.FloatColumn("mana")
		EndColumn      = mysql.FloatColumn("end")
		HpRegenColumn  = mysql.FloatColumn("hp_regen")
		EndRegenColumn = mysql.FloatColumn("end_regen")
		HpFacColumn    = mysql.FloatColumn("hp_fac")
		ManaFacColumn  = mysql.FloatColumn("mana_fac")
		EndFacColumn   = mysql.FloatColumn("end_fac")
		allColumns     = mysql.ColumnList{LevelColumn, ClassColumn, HpColumn, ManaColumn, EndColumn, HpRegenColumn, EndRegenColumn, HpFacColumn, ManaFacColumn, EndFacColumn}
		mutableColumns = mysql.ColumnList{HpColumn, ManaColumn, EndColumn, HpRegenColumn, EndRegenColumn, HpFacColumn, ManaFacColumn, EndFacColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return baseDataTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Level:    LevelColumn,
		Class:    ClassColumn,
		Hp:       HpColumn,
		Mana:     ManaColumn,
		End:      EndColumn,
		HpRegen:  HpRegenColumn,
		EndRegen: EndRegenColumn,
		HpFac:    HpFacColumn,
		ManaFac:  ManaFacColumn,
		EndFac:   EndFacColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
