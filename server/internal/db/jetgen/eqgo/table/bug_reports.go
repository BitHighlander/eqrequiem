//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var BugReports = newBugReportsTable("eqgo", "bug_reports", "")

type bugReportsTable struct {
	mysql.Table

	// Columns
	ID                mysql.ColumnInteger
	Zone              mysql.ColumnString
	ClientVersionID   mysql.ColumnInteger
	ClientVersionName mysql.ColumnString
	AccountID         mysql.ColumnInteger
	CharacterID       mysql.ColumnInteger
	CharacterName     mysql.ColumnString
	ReporterSpoof     mysql.ColumnBool
	CategoryID        mysql.ColumnInteger
	CategoryName      mysql.ColumnString
	ReporterName      mysql.ColumnString
	UIPath            mysql.ColumnString
	PosX              mysql.ColumnFloat
	PosY              mysql.ColumnFloat
	PosZ              mysql.ColumnFloat
	Heading           mysql.ColumnInteger
	TimePlayed        mysql.ColumnInteger
	TargetID          mysql.ColumnInteger
	TargetName        mysql.ColumnString
	OptionalInfoMask  mysql.ColumnInteger
	CanDuplicate      mysql.ColumnBool
	CrashBug          mysql.ColumnBool
	TargetInfo        mysql.ColumnBool
	CharacterFlags    mysql.ColumnBool
	UnknownValue      mysql.ColumnBool
	BugReport         mysql.ColumnString
	SystemInfo        mysql.ColumnString
	ReportDatetime    mysql.ColumnTimestamp
	BugStatus         mysql.ColumnInteger
	LastReview        mysql.ColumnTimestamp
	LastReviewer      mysql.ColumnString
	ReviewerNotes     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type BugReportsTable struct {
	bugReportsTable

	NEW bugReportsTable
}

// AS creates new BugReportsTable with assigned alias
func (a BugReportsTable) AS(alias string) *BugReportsTable {
	return newBugReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BugReportsTable with assigned schema name
func (a BugReportsTable) FromSchema(schemaName string) *BugReportsTable {
	return newBugReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BugReportsTable with assigned table prefix
func (a BugReportsTable) WithPrefix(prefix string) *BugReportsTable {
	return newBugReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BugReportsTable with assigned table suffix
func (a BugReportsTable) WithSuffix(suffix string) *BugReportsTable {
	return newBugReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBugReportsTable(schemaName, tableName, alias string) *BugReportsTable {
	return &BugReportsTable{
		bugReportsTable: newBugReportsTableImpl(schemaName, tableName, alias),
		NEW:             newBugReportsTableImpl("", "new", ""),
	}
}

func newBugReportsTableImpl(schemaName, tableName, alias string) bugReportsTable {
	var (
		IDColumn                = mysql.IntegerColumn("id")
		ZoneColumn              = mysql.StringColumn("zone")
		ClientVersionIDColumn   = mysql.IntegerColumn("client_version_id")
		ClientVersionNameColumn = mysql.StringColumn("client_version_name")
		AccountIDColumn         = mysql.IntegerColumn("account_id")
		CharacterIDColumn       = mysql.IntegerColumn("character_id")
		CharacterNameColumn     = mysql.StringColumn("character_name")
		ReporterSpoofColumn     = mysql.BoolColumn("reporter_spoof")
		CategoryIDColumn        = mysql.IntegerColumn("category_id")
		CategoryNameColumn      = mysql.StringColumn("category_name")
		ReporterNameColumn      = mysql.StringColumn("reporter_name")
		UIPathColumn            = mysql.StringColumn("ui_path")
		PosXColumn              = mysql.FloatColumn("pos_x")
		PosYColumn              = mysql.FloatColumn("pos_y")
		PosZColumn              = mysql.FloatColumn("pos_z")
		HeadingColumn           = mysql.IntegerColumn("heading")
		TimePlayedColumn        = mysql.IntegerColumn("time_played")
		TargetIDColumn          = mysql.IntegerColumn("target_id")
		TargetNameColumn        = mysql.StringColumn("target_name")
		OptionalInfoMaskColumn  = mysql.IntegerColumn("optional_info_mask")
		CanDuplicateColumn      = mysql.BoolColumn("_can_duplicate")
		CrashBugColumn          = mysql.BoolColumn("_crash_bug")
		TargetInfoColumn        = mysql.BoolColumn("_target_info")
		CharacterFlagsColumn    = mysql.BoolColumn("_character_flags")
		UnknownValueColumn      = mysql.BoolColumn("_unknown_value")
		BugReportColumn         = mysql.StringColumn("bug_report")
		SystemInfoColumn        = mysql.StringColumn("system_info")
		ReportDatetimeColumn    = mysql.TimestampColumn("report_datetime")
		BugStatusColumn         = mysql.IntegerColumn("bug_status")
		LastReviewColumn        = mysql.TimestampColumn("last_review")
		LastReviewerColumn      = mysql.StringColumn("last_reviewer")
		ReviewerNotesColumn     = mysql.StringColumn("reviewer_notes")
		allColumns              = mysql.ColumnList{IDColumn, ZoneColumn, ClientVersionIDColumn, ClientVersionNameColumn, AccountIDColumn, CharacterIDColumn, CharacterNameColumn, ReporterSpoofColumn, CategoryIDColumn, CategoryNameColumn, ReporterNameColumn, UIPathColumn, PosXColumn, PosYColumn, PosZColumn, HeadingColumn, TimePlayedColumn, TargetIDColumn, TargetNameColumn, OptionalInfoMaskColumn, CanDuplicateColumn, CrashBugColumn, TargetInfoColumn, CharacterFlagsColumn, UnknownValueColumn, BugReportColumn, SystemInfoColumn, ReportDatetimeColumn, BugStatusColumn, LastReviewColumn, LastReviewerColumn, ReviewerNotesColumn}
		mutableColumns          = mysql.ColumnList{ZoneColumn, ClientVersionIDColumn, ClientVersionNameColumn, AccountIDColumn, CharacterIDColumn, CharacterNameColumn, ReporterSpoofColumn, CategoryIDColumn, CategoryNameColumn, ReporterNameColumn, UIPathColumn, PosXColumn, PosYColumn, PosZColumn, HeadingColumn, TimePlayedColumn, TargetIDColumn, TargetNameColumn, OptionalInfoMaskColumn, CanDuplicateColumn, CrashBugColumn, TargetInfoColumn, CharacterFlagsColumn, UnknownValueColumn, BugReportColumn, SystemInfoColumn, ReportDatetimeColumn, BugStatusColumn, LastReviewColumn, LastReviewerColumn, ReviewerNotesColumn}
		defaultColumns          = mysql.ColumnList{ZoneColumn, ClientVersionIDColumn, ClientVersionNameColumn, AccountIDColumn, CharacterIDColumn, CharacterNameColumn, ReporterSpoofColumn, CategoryIDColumn, CategoryNameColumn, ReporterNameColumn, UIPathColumn, PosXColumn, PosYColumn, PosZColumn, HeadingColumn, TimePlayedColumn, TargetIDColumn, TargetNameColumn, OptionalInfoMaskColumn, CanDuplicateColumn, CrashBugColumn, TargetInfoColumn, CharacterFlagsColumn, UnknownValueColumn, BugReportColumn, SystemInfoColumn, ReportDatetimeColumn, BugStatusColumn, LastReviewColumn, LastReviewerColumn, ReviewerNotesColumn}
	)

	return bugReportsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Zone:              ZoneColumn,
		ClientVersionID:   ClientVersionIDColumn,
		ClientVersionName: ClientVersionNameColumn,
		AccountID:         AccountIDColumn,
		CharacterID:       CharacterIDColumn,
		CharacterName:     CharacterNameColumn,
		ReporterSpoof:     ReporterSpoofColumn,
		CategoryID:        CategoryIDColumn,
		CategoryName:      CategoryNameColumn,
		ReporterName:      ReporterNameColumn,
		UIPath:            UIPathColumn,
		PosX:              PosXColumn,
		PosY:              PosYColumn,
		PosZ:              PosZColumn,
		Heading:           HeadingColumn,
		TimePlayed:        TimePlayedColumn,
		TargetID:          TargetIDColumn,
		TargetName:        TargetNameColumn,
		OptionalInfoMask:  OptionalInfoMaskColumn,
		CanDuplicate:      CanDuplicateColumn,
		CrashBug:          CrashBugColumn,
		TargetInfo:        TargetInfoColumn,
		CharacterFlags:    CharacterFlagsColumn,
		UnknownValue:      UnknownValueColumn,
		BugReport:         BugReportColumn,
		SystemInfo:        SystemInfoColumn,
		ReportDatetime:    ReportDatetimeColumn,
		BugStatus:         BugStatusColumn,
		LastReview:        LastReviewColumn,
		LastReviewer:      LastReviewerColumn,
		ReviewerNotes:     ReviewerNotesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
