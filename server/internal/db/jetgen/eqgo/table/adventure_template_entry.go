//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AdventureTemplateEntry = newAdventureTemplateEntryTable("eqgo", "adventure_template_entry", "")

type adventureTemplateEntryTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	TemplateID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AdventureTemplateEntryTable struct {
	adventureTemplateEntryTable

	NEW adventureTemplateEntryTable
}

// AS creates new AdventureTemplateEntryTable with assigned alias
func (a AdventureTemplateEntryTable) AS(alias string) *AdventureTemplateEntryTable {
	return newAdventureTemplateEntryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AdventureTemplateEntryTable with assigned schema name
func (a AdventureTemplateEntryTable) FromSchema(schemaName string) *AdventureTemplateEntryTable {
	return newAdventureTemplateEntryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AdventureTemplateEntryTable with assigned table prefix
func (a AdventureTemplateEntryTable) WithPrefix(prefix string) *AdventureTemplateEntryTable {
	return newAdventureTemplateEntryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AdventureTemplateEntryTable with assigned table suffix
func (a AdventureTemplateEntryTable) WithSuffix(suffix string) *AdventureTemplateEntryTable {
	return newAdventureTemplateEntryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAdventureTemplateEntryTable(schemaName, tableName, alias string) *AdventureTemplateEntryTable {
	return &AdventureTemplateEntryTable{
		adventureTemplateEntryTable: newAdventureTemplateEntryTableImpl(schemaName, tableName, alias),
		NEW:                         newAdventureTemplateEntryTableImpl("", "new", ""),
	}
}

func newAdventureTemplateEntryTableImpl(schemaName, tableName, alias string) adventureTemplateEntryTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		TemplateIDColumn = mysql.IntegerColumn("template_id")
		allColumns       = mysql.ColumnList{IDColumn, TemplateIDColumn}
		mutableColumns   = mysql.ColumnList{}
		defaultColumns   = mysql.ColumnList{}
	)

	return adventureTemplateEntryTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		TemplateID: TemplateIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
