//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Buyer = newBuyerTable("eqgo", "buyer", "")

type buyerTable struct {
	mysql.Table

	// Columns
	ID                 mysql.ColumnInteger
	CharID             mysql.ColumnInteger
	CharEntityID       mysql.ColumnInteger
	CharName           mysql.ColumnString
	CharZoneID         mysql.ColumnInteger
	CharZoneInstanceID mysql.ColumnInteger
	TransactionDate    mysql.ColumnTimestamp
	WelcomeMessage     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type BuyerTable struct {
	buyerTable

	NEW buyerTable
}

// AS creates new BuyerTable with assigned alias
func (a BuyerTable) AS(alias string) *BuyerTable {
	return newBuyerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BuyerTable with assigned schema name
func (a BuyerTable) FromSchema(schemaName string) *BuyerTable {
	return newBuyerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BuyerTable with assigned table prefix
func (a BuyerTable) WithPrefix(prefix string) *BuyerTable {
	return newBuyerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BuyerTable with assigned table suffix
func (a BuyerTable) WithSuffix(suffix string) *BuyerTable {
	return newBuyerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBuyerTable(schemaName, tableName, alias string) *BuyerTable {
	return &BuyerTable{
		buyerTable: newBuyerTableImpl(schemaName, tableName, alias),
		NEW:        newBuyerTableImpl("", "new", ""),
	}
}

func newBuyerTableImpl(schemaName, tableName, alias string) buyerTable {
	var (
		IDColumn                 = mysql.IntegerColumn("id")
		CharIDColumn             = mysql.IntegerColumn("char_id")
		CharEntityIDColumn       = mysql.IntegerColumn("char_entity_id")
		CharNameColumn           = mysql.StringColumn("char_name")
		CharZoneIDColumn         = mysql.IntegerColumn("char_zone_id")
		CharZoneInstanceIDColumn = mysql.IntegerColumn("char_zone_instance_id")
		TransactionDateColumn    = mysql.TimestampColumn("transaction_date")
		WelcomeMessageColumn     = mysql.StringColumn("welcome_message")
		allColumns               = mysql.ColumnList{IDColumn, CharIDColumn, CharEntityIDColumn, CharNameColumn, CharZoneIDColumn, CharZoneInstanceIDColumn, TransactionDateColumn, WelcomeMessageColumn}
		mutableColumns           = mysql.ColumnList{CharIDColumn, CharEntityIDColumn, CharNameColumn, CharZoneIDColumn, CharZoneInstanceIDColumn, TransactionDateColumn, WelcomeMessageColumn}
		defaultColumns           = mysql.ColumnList{CharIDColumn, CharEntityIDColumn, CharZoneIDColumn, CharZoneInstanceIDColumn}
	)

	return buyerTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		CharID:             CharIDColumn,
		CharEntityID:       CharEntityIDColumn,
		CharName:           CharNameColumn,
		CharZoneID:         CharZoneIDColumn,
		CharZoneInstanceID: CharZoneInstanceIDColumn,
		TransactionDate:    TransactionDateColumn,
		WelcomeMessage:     WelcomeMessageColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
