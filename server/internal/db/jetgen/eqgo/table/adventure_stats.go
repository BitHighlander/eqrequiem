//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var AdventureStats = newAdventureStatsTable("eqgo", "adventure_stats", "")

type adventureStatsTable struct {
	mysql.Table

	// Columns
	PlayerID  mysql.ColumnInteger
	GukWins   mysql.ColumnInteger
	MirWins   mysql.ColumnInteger
	MmcWins   mysql.ColumnInteger
	RujWins   mysql.ColumnInteger
	TakWins   mysql.ColumnInteger
	GukLosses mysql.ColumnInteger
	MirLosses mysql.ColumnInteger
	MmcLosses mysql.ColumnInteger
	RujLosses mysql.ColumnInteger
	TakLosses mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type AdventureStatsTable struct {
	adventureStatsTable

	NEW adventureStatsTable
}

// AS creates new AdventureStatsTable with assigned alias
func (a AdventureStatsTable) AS(alias string) *AdventureStatsTable {
	return newAdventureStatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AdventureStatsTable with assigned schema name
func (a AdventureStatsTable) FromSchema(schemaName string) *AdventureStatsTable {
	return newAdventureStatsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AdventureStatsTable with assigned table prefix
func (a AdventureStatsTable) WithPrefix(prefix string) *AdventureStatsTable {
	return newAdventureStatsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AdventureStatsTable with assigned table suffix
func (a AdventureStatsTable) WithSuffix(suffix string) *AdventureStatsTable {
	return newAdventureStatsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAdventureStatsTable(schemaName, tableName, alias string) *AdventureStatsTable {
	return &AdventureStatsTable{
		adventureStatsTable: newAdventureStatsTableImpl(schemaName, tableName, alias),
		NEW:                 newAdventureStatsTableImpl("", "new", ""),
	}
}

func newAdventureStatsTableImpl(schemaName, tableName, alias string) adventureStatsTable {
	var (
		PlayerIDColumn  = mysql.IntegerColumn("player_id")
		GukWinsColumn   = mysql.IntegerColumn("guk_wins")
		MirWinsColumn   = mysql.IntegerColumn("mir_wins")
		MmcWinsColumn   = mysql.IntegerColumn("mmc_wins")
		RujWinsColumn   = mysql.IntegerColumn("ruj_wins")
		TakWinsColumn   = mysql.IntegerColumn("tak_wins")
		GukLossesColumn = mysql.IntegerColumn("guk_losses")
		MirLossesColumn = mysql.IntegerColumn("mir_losses")
		MmcLossesColumn = mysql.IntegerColumn("mmc_losses")
		RujLossesColumn = mysql.IntegerColumn("ruj_losses")
		TakLossesColumn = mysql.IntegerColumn("tak_losses")
		allColumns      = mysql.ColumnList{PlayerIDColumn, GukWinsColumn, MirWinsColumn, MmcWinsColumn, RujWinsColumn, TakWinsColumn, GukLossesColumn, MirLossesColumn, MmcLossesColumn, RujLossesColumn, TakLossesColumn}
		mutableColumns  = mysql.ColumnList{GukWinsColumn, MirWinsColumn, MmcWinsColumn, RujWinsColumn, TakWinsColumn, GukLossesColumn, MirLossesColumn, MmcLossesColumn, RujLossesColumn, TakLossesColumn}
		defaultColumns  = mysql.ColumnList{GukWinsColumn, MirWinsColumn, MmcWinsColumn, RujWinsColumn, TakWinsColumn, GukLossesColumn, MirLossesColumn, MmcLossesColumn, RujLossesColumn, TakLossesColumn}
	)

	return adventureStatsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PlayerID:  PlayerIDColumn,
		GukWins:   GukWinsColumn,
		MirWins:   MirWinsColumn,
		MmcWins:   MmcWinsColumn,
		RujWins:   RujWinsColumn,
		TakWins:   TakWinsColumn,
		GukLosses: GukLossesColumn,
		MirLosses: MirLossesColumn,
		MmcLosses: MmcLossesColumn,
		RujLosses: RujLossesColumn,
		TakLosses: TakLossesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
