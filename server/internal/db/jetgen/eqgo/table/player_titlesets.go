//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var PlayerTitlesets = newPlayerTitlesetsTable("eqgo", "player_titlesets", "")

type playerTitlesetsTable struct {
	mysql.Table

	// Columns
	ID       mysql.ColumnInteger
	CharID   mysql.ColumnInteger
	TitleSet mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type PlayerTitlesetsTable struct {
	playerTitlesetsTable

	NEW playerTitlesetsTable
}

// AS creates new PlayerTitlesetsTable with assigned alias
func (a PlayerTitlesetsTable) AS(alias string) *PlayerTitlesetsTable {
	return newPlayerTitlesetsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlayerTitlesetsTable with assigned schema name
func (a PlayerTitlesetsTable) FromSchema(schemaName string) *PlayerTitlesetsTable {
	return newPlayerTitlesetsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlayerTitlesetsTable with assigned table prefix
func (a PlayerTitlesetsTable) WithPrefix(prefix string) *PlayerTitlesetsTable {
	return newPlayerTitlesetsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlayerTitlesetsTable with assigned table suffix
func (a PlayerTitlesetsTable) WithSuffix(suffix string) *PlayerTitlesetsTable {
	return newPlayerTitlesetsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlayerTitlesetsTable(schemaName, tableName, alias string) *PlayerTitlesetsTable {
	return &PlayerTitlesetsTable{
		playerTitlesetsTable: newPlayerTitlesetsTableImpl(schemaName, tableName, alias),
		NEW:                  newPlayerTitlesetsTableImpl("", "new", ""),
	}
}

func newPlayerTitlesetsTableImpl(schemaName, tableName, alias string) playerTitlesetsTable {
	var (
		IDColumn       = mysql.IntegerColumn("id")
		CharIDColumn   = mysql.IntegerColumn("char_id")
		TitleSetColumn = mysql.IntegerColumn("title_set")
		allColumns     = mysql.ColumnList{IDColumn, CharIDColumn, TitleSetColumn}
		mutableColumns = mysql.ColumnList{CharIDColumn, TitleSetColumn}
		defaultColumns = mysql.ColumnList{}
	)

	return playerTitlesetsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		CharID:   CharIDColumn,
		TitleSet: TitleSetColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
