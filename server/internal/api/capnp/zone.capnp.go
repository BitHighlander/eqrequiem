// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	math "math"
)

type ZoneChange capnp.Struct

// ZoneChange_TypeID is the unique identifier for the type ZoneChange.
const ZoneChange_TypeID = 0xadd206cd099784fe

func NewZoneChange(s *capnp.Segment) (ZoneChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return ZoneChange(st), err
}

func NewRootZoneChange(s *capnp.Segment) (ZoneChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return ZoneChange(st), err
}

func ReadRootZoneChange(msg *capnp.Message) (ZoneChange, error) {
	root, err := msg.Root()
	return ZoneChange(root.Struct()), err
}

func (s ZoneChange) String() string {
	str, _ := text.Marshal(0xadd206cd099784fe, capnp.Struct(s))
	return str
}

func (s ZoneChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneChange) DecodeFromPtr(p capnp.Ptr) ZoneChange {
	return ZoneChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneChange) CharName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneChange) HasCharName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneChange) CharNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneChange) SetCharName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ZoneChange) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ZoneChange) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ZoneChange) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ZoneChange) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ZoneChange) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ZoneChange) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ZoneChange) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ZoneChange) SetX(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ZoneChange) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ZoneChange) SetZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ZoneChange) ZoneReason() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s ZoneChange) SetZoneReason(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s ZoneChange) Success() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s ZoneChange) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// ZoneChange_List is a list of ZoneChange.
type ZoneChange_List = capnp.StructList[ZoneChange]

// NewZoneChange creates a new list of ZoneChange.
func NewZoneChange_List(s *capnp.Segment, sz int32) (ZoneChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return capnp.StructList[ZoneChange](l), err
}

// ZoneChange_Future is a wrapper for a ZoneChange promised by a client call.
type ZoneChange_Future struct{ *capnp.Future }

func (f ZoneChange_Future) Struct() (ZoneChange, error) {
	p, err := f.Future.Ptr()
	return ZoneChange(p.Struct()), err
}

type NewZone capnp.Struct

// NewZone_TypeID is the unique identifier for the type NewZone.
const NewZone_TypeID = 0x86020f1b6279dc1e

func NewNewZone(s *capnp.Segment) (NewZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 14})
	return NewZone(st), err
}

func NewRootNewZone(s *capnp.Segment) (NewZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 14})
	return NewZone(st), err
}

func ReadRootNewZone(msg *capnp.Message) (NewZone, error) {
	root, err := msg.Root()
	return NewZone(root.Struct()), err
}

func (s NewZone) String() string {
	str, _ := text.Marshal(0x86020f1b6279dc1e, capnp.Struct(s))
	return str
}

func (s NewZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NewZone) DecodeFromPtr(p capnp.Ptr) NewZone {
	return NewZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NewZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NewZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NewZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NewZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NewZone) CharName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NewZone) HasCharName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NewZone) CharNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NewZone) SetCharName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NewZone) ShortName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NewZone) HasShortName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NewZone) ShortNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NewZone) SetShortName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s NewZone) LongName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s NewZone) HasLongName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NewZone) LongNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s NewZone) SetLongName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s NewZone) Ztype() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NewZone) SetZtype(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NewZone) FogRed() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Int32List(p.List()), err
}

func (s NewZone) HasFogRed() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s NewZone) SetFogRed(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewFogRed sets the fogRed field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s NewZone) NewFogRed(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s NewZone) FogGreen() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Int32List(p.List()), err
}

func (s NewZone) HasFogGreen() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s NewZone) SetFogGreen(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewFogGreen sets the fogGreen field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s NewZone) NewFogGreen(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s NewZone) FogBlue() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Int32List(p.List()), err
}

func (s NewZone) HasFogBlue() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s NewZone) SetFogBlue(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewFogBlue sets the fogBlue field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s NewZone) NewFogBlue(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s NewZone) FogMinclip() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s NewZone) HasFogMinclip() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s NewZone) SetFogMinclip(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewFogMinclip sets the fogMinclip field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s NewZone) NewFogMinclip(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s NewZone) FogMaxclip() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s NewZone) HasFogMaxclip() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s NewZone) SetFogMaxclip(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewFogMaxclip sets the fogMaxclip field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s NewZone) NewFogMaxclip(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s NewZone) Gravity() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s NewZone) SetGravity(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s NewZone) TimeType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s NewZone) SetTimeType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s NewZone) RainChance() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Int32List(p.List()), err
}

func (s NewZone) HasRainChance() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s NewZone) SetRainChance(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewRainChance sets the rainChance field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s NewZone) NewRainChance(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s NewZone) RainDuration() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Int32List(p.List()), err
}

func (s NewZone) HasRainDuration() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s NewZone) SetRainDuration(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewRainDuration sets the rainDuration field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s NewZone) NewRainDuration(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s NewZone) SnowChance() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Int32List(p.List()), err
}

func (s NewZone) HasSnowChance() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s NewZone) SetSnowChance(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewSnowChance sets the snowChance field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s NewZone) NewSnowChance(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s NewZone) SnowDuration() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Int32List(p.List()), err
}

func (s NewZone) HasSnowDuration() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s NewZone) SetSnowDuration(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewSnowDuration sets the snowDuration field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s NewZone) NewSnowDuration(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s NewZone) Sky() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s NewZone) SetSky(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s NewZone) ZoneExpMultiplier() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s NewZone) SetZoneExpMultiplier(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s NewZone) SafeY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s NewZone) SetSafeY(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s NewZone) SafeX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s NewZone) SetSafeX(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s NewZone) SafeZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s NewZone) SetSafeZ(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s NewZone) MaxZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s NewZone) SetMaxZ(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s NewZone) Underworld() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s NewZone) SetUnderworld(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s NewZone) Minclip() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s NewZone) SetMinclip(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s NewZone) Maxclip() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s NewZone) SetMaxclip(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s NewZone) ZoneShortName2() (string, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return p.Text(), err
}

func (s NewZone) HasZoneShortName2() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s NewZone) ZoneShortName2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return p.TextBytes(), err
}

func (s NewZone) SetZoneShortName2(v string) error {
	return capnp.Struct(s).SetText(12, v)
}

func (s NewZone) ZoneIdNumber() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s NewZone) SetZoneIdNumber(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s NewZone) ZoneInstance() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s NewZone) SetZoneInstance(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s NewZone) ZonePoints() (ZonePoint_List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return ZonePoint_List(p.List()), err
}

func (s NewZone) HasZonePoints() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s NewZone) SetZonePoints(v ZonePoint_List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewZonePoints sets the zonePoints field to a newly
// allocated ZonePoint_List, preferring placement in s's segment.
func (s NewZone) NewZonePoints(n int32) (ZonePoint_List, error) {
	l, err := NewZonePoint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ZonePoint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}

// NewZone_List is a list of NewZone.
type NewZone_List = capnp.StructList[NewZone]

// NewNewZone creates a new list of NewZone.
func NewNewZone_List(s *capnp.Segment, sz int32) (NewZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 56, PointerCount: 14}, sz)
	return capnp.StructList[NewZone](l), err
}

// NewZone_Future is a wrapper for a NewZone promised by a client call.
type NewZone_Future struct{ *capnp.Future }

func (f NewZone_Future) Struct() (NewZone, error) {
	p, err := f.Future.Ptr()
	return NewZone(p.Struct()), err
}

type ZoneChangeType uint16

// ZoneChangeType_TypeID is the unique identifier for the type ZoneChangeType.
const ZoneChangeType_TypeID = 0xbdf7ebd433f5fbda

// Values of ZoneChangeType.
const (
	ZoneChangeType_fromWorld ZoneChangeType = 0
	ZoneChangeType_fromZone  ZoneChangeType = 1
)

// String returns the enum's constant name.
func (c ZoneChangeType) String() string {
	switch c {
	case ZoneChangeType_fromWorld:
		return "fromWorld"
	case ZoneChangeType_fromZone:
		return "fromZone"

	default:
		return ""
	}
}

// ZoneChangeTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ZoneChangeTypeFromString(c string) ZoneChangeType {
	switch c {
	case "fromWorld":
		return ZoneChangeType_fromWorld
	case "fromZone":
		return ZoneChangeType_fromZone

	default:
		return 0
	}
}

type ZoneChangeType_List = capnp.EnumList[ZoneChangeType]

func NewZoneChangeType_List(s *capnp.Segment, sz int32) (ZoneChangeType_List, error) {
	return capnp.NewEnumList[ZoneChangeType](s, sz)
}

type RequestClientZoneChange capnp.Struct

// RequestClientZoneChange_TypeID is the unique identifier for the type RequestClientZoneChange.
const RequestClientZoneChange_TypeID = 0x9e2bb9505c9a267d

func NewRequestClientZoneChange(s *capnp.Segment) (RequestClientZoneChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RequestClientZoneChange(st), err
}

func NewRootRequestClientZoneChange(s *capnp.Segment) (RequestClientZoneChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RequestClientZoneChange(st), err
}

func ReadRootRequestClientZoneChange(msg *capnp.Message) (RequestClientZoneChange, error) {
	root, err := msg.Root()
	return RequestClientZoneChange(root.Struct()), err
}

func (s RequestClientZoneChange) String() string {
	str, _ := text.Marshal(0x9e2bb9505c9a267d, capnp.Struct(s))
	return str
}

func (s RequestClientZoneChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RequestClientZoneChange) DecodeFromPtr(p capnp.Ptr) RequestClientZoneChange {
	return RequestClientZoneChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RequestClientZoneChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RequestClientZoneChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RequestClientZoneChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RequestClientZoneChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RequestClientZoneChange) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RequestClientZoneChange) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RequestClientZoneChange) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RequestClientZoneChange) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RequestClientZoneChange) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s RequestClientZoneChange) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s RequestClientZoneChange) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s RequestClientZoneChange) SetX(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s RequestClientZoneChange) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s RequestClientZoneChange) SetZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s RequestClientZoneChange) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s RequestClientZoneChange) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s RequestClientZoneChange) Type() ZoneChangeType {
	return ZoneChangeType(capnp.Struct(s).Uint16(24))
}

func (s RequestClientZoneChange) SetType(v ZoneChangeType) {
	capnp.Struct(s).SetUint16(24, uint16(v))
}

// RequestClientZoneChange_List is a list of RequestClientZoneChange.
type RequestClientZoneChange_List = capnp.StructList[RequestClientZoneChange]

// NewRequestClientZoneChange creates a new list of RequestClientZoneChange.
func NewRequestClientZoneChange_List(s *capnp.Segment, sz int32) (RequestClientZoneChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[RequestClientZoneChange](l), err
}

// RequestClientZoneChange_Future is a wrapper for a RequestClientZoneChange promised by a client call.
type RequestClientZoneChange_Future struct{ *capnp.Future }

func (f RequestClientZoneChange_Future) Struct() (RequestClientZoneChange, error) {
	p, err := f.Future.Ptr()
	return RequestClientZoneChange(p.Struct()), err
}

type ZonePoint capnp.Struct

// ZonePoint_TypeID is the unique identifier for the type ZonePoint.
const ZonePoint_TypeID = 0xc644c15adcdd09cb

func NewZonePoint(s *capnp.Segment) (ZonePoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return ZonePoint(st), err
}

func NewRootZonePoint(s *capnp.Segment) (ZonePoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return ZonePoint(st), err
}

func ReadRootZonePoint(msg *capnp.Message) (ZonePoint, error) {
	root, err := msg.Root()
	return ZonePoint(root.Struct()), err
}

func (s ZonePoint) String() string {
	str, _ := text.Marshal(0xc644c15adcdd09cb, capnp.Struct(s))
	return str
}

func (s ZonePoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZonePoint) DecodeFromPtr(p capnp.Ptr) ZonePoint {
	return ZonePoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZonePoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZonePoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZonePoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZonePoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZonePoint) Iterator() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ZonePoint) SetIterator(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ZonePoint) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ZonePoint) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ZonePoint) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ZonePoint) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ZonePoint) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ZonePoint) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ZonePoint) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ZonePoint) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ZonePoint) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s ZonePoint) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s ZonePoint) ZoneInstance() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s ZonePoint) SetZoneInstance(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s ZonePoint) Number() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s ZonePoint) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s ZonePoint) TargetX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s ZonePoint) SetTargetX(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s ZonePoint) TargetY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s ZonePoint) SetTargetY(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s ZonePoint) TargetZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s ZonePoint) SetTargetZ(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

// ZonePoint_List is a list of ZonePoint.
type ZonePoint_List = capnp.StructList[ZonePoint]

// NewZonePoint creates a new list of ZonePoint.
func NewZonePoint_List(s *capnp.Segment, sz int32) (ZonePoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0}, sz)
	return capnp.StructList[ZonePoint](l), err
}

// ZonePoint_Future is a wrapper for a ZonePoint promised by a client call.
type ZonePoint_Future struct{ *capnp.Future }

func (f ZonePoint_Future) Struct() (ZonePoint, error) {
	p, err := f.Future.Ptr()
	return ZonePoint(p.Struct()), err
}

type ZoneSession capnp.Struct

// ZoneSession_TypeID is the unique identifier for the type ZoneSession.
const ZoneSession_TypeID = 0x8a3669cb193af4dc

func NewZoneSession(s *capnp.Segment) (ZoneSession, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZoneSession(st), err
}

func NewRootZoneSession(s *capnp.Segment) (ZoneSession, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZoneSession(st), err
}

func ReadRootZoneSession(msg *capnp.Message) (ZoneSession, error) {
	root, err := msg.Root()
	return ZoneSession(root.Struct()), err
}

func (s ZoneSession) String() string {
	str, _ := text.Marshal(0x8a3669cb193af4dc, capnp.Struct(s))
	return str
}

func (s ZoneSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneSession) DecodeFromPtr(p capnp.Ptr) ZoneSession {
	return ZoneSession(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneSession) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneSession) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneSession) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneSession) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneSession) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ZoneSession) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ZoneSession) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ZoneSession) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ZoneSession_List is a list of ZoneSession.
type ZoneSession_List = capnp.StructList[ZoneSession]

// NewZoneSession creates a new list of ZoneSession.
func NewZoneSession_List(s *capnp.Segment, sz int32) (ZoneSession_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ZoneSession](l), err
}

// ZoneSession_Future is a wrapper for a ZoneSession promised by a client call.
type ZoneSession_Future struct{ *capnp.Future }

func (f ZoneSession_Future) Struct() (ZoneSession, error) {
	p, err := f.Future.Ptr()
	return ZoneSession(p.Struct()), err
}
