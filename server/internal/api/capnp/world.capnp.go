// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type JWTLogin capnp.Struct

// JWTLogin_TypeID is the unique identifier for the type JWTLogin.
const JWTLogin_TypeID = 0x9b02ee5625ec21fb

func NewJWTLogin(s *capnp.Segment) (JWTLogin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JWTLogin(st), err
}

func NewRootJWTLogin(s *capnp.Segment) (JWTLogin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return JWTLogin(st), err
}

func ReadRootJWTLogin(msg *capnp.Message) (JWTLogin, error) {
	root, err := msg.Root()
	return JWTLogin(root.Struct()), err
}

func (s JWTLogin) String() string {
	str, _ := text.Marshal(0x9b02ee5625ec21fb, capnp.Struct(s))
	return str
}

func (s JWTLogin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JWTLogin) DecodeFromPtr(p capnp.Ptr) JWTLogin {
	return JWTLogin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JWTLogin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JWTLogin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JWTLogin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JWTLogin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JWTLogin) Token() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s JWTLogin) HasToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s JWTLogin) TokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s JWTLogin) SetToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// JWTLogin_List is a list of JWTLogin.
type JWTLogin_List = capnp.StructList[JWTLogin]

// NewJWTLogin creates a new list of JWTLogin.
func NewJWTLogin_List(s *capnp.Segment, sz int32) (JWTLogin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[JWTLogin](l), err
}

// JWTLogin_Future is a wrapper for a JWTLogin promised by a client call.
type JWTLogin_Future struct{ *capnp.Future }

func (f JWTLogin_Future) Struct() (JWTLogin, error) {
	p, err := f.Future.Ptr()
	return JWTLogin(p.Struct()), err
}

type JWTResponse capnp.Struct

// JWTResponse_TypeID is the unique identifier for the type JWTResponse.
const JWTResponse_TypeID = 0x8a5026d84a4c9312

func NewJWTResponse(s *capnp.Segment) (JWTResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return JWTResponse(st), err
}

func NewRootJWTResponse(s *capnp.Segment) (JWTResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return JWTResponse(st), err
}

func ReadRootJWTResponse(msg *capnp.Message) (JWTResponse, error) {
	root, err := msg.Root()
	return JWTResponse(root.Struct()), err
}

func (s JWTResponse) String() string {
	str, _ := text.Marshal(0x8a5026d84a4c9312, capnp.Struct(s))
	return str
}

func (s JWTResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (JWTResponse) DecodeFromPtr(p capnp.Ptr) JWTResponse {
	return JWTResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s JWTResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s JWTResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s JWTResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s JWTResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s JWTResponse) Status() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s JWTResponse) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// JWTResponse_List is a list of JWTResponse.
type JWTResponse_List = capnp.StructList[JWTResponse]

// NewJWTResponse creates a new list of JWTResponse.
func NewJWTResponse_List(s *capnp.Segment, sz int32) (JWTResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[JWTResponse](l), err
}

// JWTResponse_Future is a wrapper for a JWTResponse promised by a client call.
type JWTResponse_Future struct{ *capnp.Future }

func (f JWTResponse_Future) Struct() (JWTResponse, error) {
	p, err := f.Future.Ptr()
	return JWTResponse(p.Struct()), err
}

type WebInitiateConnection capnp.Struct

// WebInitiateConnection_TypeID is the unique identifier for the type WebInitiateConnection.
const WebInitiateConnection_TypeID = 0xe72e2063d179e57d

func NewWebInitiateConnection(s *capnp.Segment) (WebInitiateConnection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebInitiateConnection(st), err
}

func NewRootWebInitiateConnection(s *capnp.Segment) (WebInitiateConnection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebInitiateConnection(st), err
}

func ReadRootWebInitiateConnection(msg *capnp.Message) (WebInitiateConnection, error) {
	root, err := msg.Root()
	return WebInitiateConnection(root.Struct()), err
}

func (s WebInitiateConnection) String() string {
	str, _ := text.Marshal(0xe72e2063d179e57d, capnp.Struct(s))
	return str
}

func (s WebInitiateConnection) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebInitiateConnection) DecodeFromPtr(p capnp.Ptr) WebInitiateConnection {
	return WebInitiateConnection(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebInitiateConnection) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebInitiateConnection) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebInitiateConnection) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebInitiateConnection) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebInitiateConnection) Login() bool {
	return capnp.Struct(s).Bit(0)
}

func (s WebInitiateConnection) SetLogin(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// WebInitiateConnection_List is a list of WebInitiateConnection.
type WebInitiateConnection_List = capnp.StructList[WebInitiateConnection]

// NewWebInitiateConnection creates a new list of WebInitiateConnection.
func NewWebInitiateConnection_List(s *capnp.Segment, sz int32) (WebInitiateConnection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WebInitiateConnection](l), err
}

// WebInitiateConnection_Future is a wrapper for a WebInitiateConnection promised by a client call.
type WebInitiateConnection_Future struct{ *capnp.Future }

func (f WebInitiateConnection_Future) Struct() (WebInitiateConnection, error) {
	p, err := f.Future.Ptr()
	return WebInitiateConnection(p.Struct()), err
}

type EnterWorld capnp.Struct

// EnterWorld_TypeID is the unique identifier for the type EnterWorld.
const EnterWorld_TypeID = 0xdf0c1226c90e00ad

func NewEnterWorld(s *capnp.Segment) (EnterWorld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EnterWorld(st), err
}

func NewRootEnterWorld(s *capnp.Segment) (EnterWorld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EnterWorld(st), err
}

func ReadRootEnterWorld(msg *capnp.Message) (EnterWorld, error) {
	root, err := msg.Root()
	return EnterWorld(root.Struct()), err
}

func (s EnterWorld) String() string {
	str, _ := text.Marshal(0xdf0c1226c90e00ad, capnp.Struct(s))
	return str
}

func (s EnterWorld) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnterWorld) DecodeFromPtr(p capnp.Ptr) EnterWorld {
	return EnterWorld(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnterWorld) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnterWorld) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnterWorld) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnterWorld) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnterWorld) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EnterWorld) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnterWorld) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EnterWorld) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s EnterWorld) Tutorial() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EnterWorld) SetTutorial(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EnterWorld) ReturnHome() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s EnterWorld) SetReturnHome(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// EnterWorld_List is a list of EnterWorld.
type EnterWorld_List = capnp.StructList[EnterWorld]

// NewEnterWorld creates a new list of EnterWorld.
func NewEnterWorld_List(s *capnp.Segment, sz int32) (EnterWorld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[EnterWorld](l), err
}

// EnterWorld_Future is a wrapper for a EnterWorld promised by a client call.
type EnterWorld_Future struct{ *capnp.Future }

func (f EnterWorld_Future) Struct() (EnterWorld, error) {
	p, err := f.Future.Ptr()
	return EnterWorld(p.Struct()), err
}

type NameApproval capnp.Struct

// NameApproval_TypeID is the unique identifier for the type NameApproval.
const NameApproval_TypeID = 0xfe88232d771013d6

func NewNameApproval(s *capnp.Segment) (NameApproval, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return NameApproval(st), err
}

func NewRootNameApproval(s *capnp.Segment) (NameApproval, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return NameApproval(st), err
}

func ReadRootNameApproval(msg *capnp.Message) (NameApproval, error) {
	root, err := msg.Root()
	return NameApproval(root.Struct()), err
}

func (s NameApproval) String() string {
	str, _ := text.Marshal(0xfe88232d771013d6, capnp.Struct(s))
	return str
}

func (s NameApproval) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NameApproval) DecodeFromPtr(p capnp.Ptr) NameApproval {
	return NameApproval(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NameApproval) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NameApproval) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NameApproval) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NameApproval) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NameApproval) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NameApproval) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NameApproval) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NameApproval) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NameApproval) Race() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NameApproval) SetRace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NameApproval) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NameApproval) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s NameApproval) Deity() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s NameApproval) SetDeity(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// NameApproval_List is a list of NameApproval.
type NameApproval_List = capnp.StructList[NameApproval]

// NewNameApproval creates a new list of NameApproval.
func NewNameApproval_List(s *capnp.Segment, sz int32) (NameApproval_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[NameApproval](l), err
}

// NameApproval_Future is a wrapper for a NameApproval promised by a client call.
type NameApproval_Future struct{ *capnp.Future }

func (f NameApproval_Future) Struct() (NameApproval, error) {
	p, err := f.Future.Ptr()
	return NameApproval(p.Struct()), err
}
