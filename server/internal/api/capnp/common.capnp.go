// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Vector3 capnp.Struct

// Vector3_TypeID is the unique identifier for the type Vector3.
const Vector3_TypeID = 0xe708bba061e0cc77

func NewVector3(s *capnp.Segment) (Vector3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vector3(st), err
}

func NewRootVector3(s *capnp.Segment) (Vector3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vector3(st), err
}

func ReadRootVector3(msg *capnp.Message) (Vector3, error) {
	root, err := msg.Root()
	return Vector3(root.Struct()), err
}

func (s Vector3) String() string {
	str, _ := text.Marshal(0xe708bba061e0cc77, capnp.Struct(s))
	return str
}

func (s Vector3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vector3) DecodeFromPtr(p capnp.Ptr) Vector3 {
	return Vector3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vector3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vector3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vector3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vector3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vector3) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Vector3) SetX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Vector3) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Vector3) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Vector3) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Vector3) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// Vector3_List is a list of Vector3.
type Vector3_List = capnp.StructList[Vector3]

// NewVector3 creates a new list of Vector3.
func NewVector3_List(s *capnp.Segment, sz int32) (Vector3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Vector3](l), err
}

// Vector3_Future is a wrapper for a Vector3 promised by a client call.
type Vector3_Future struct{ *capnp.Future }

func (f Vector3_Future) Struct() (Vector3, error) {
	p, err := f.Future.Ptr()
	return Vector3(p.Struct()), err
}

type InventorySlot capnp.Struct

// InventorySlot_TypeID is the unique identifier for the type InventorySlot.
const InventorySlot_TypeID = 0xe9a04e0d39785218

func NewInventorySlot(s *capnp.Segment) (InventorySlot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InventorySlot(st), err
}

func NewRootInventorySlot(s *capnp.Segment) (InventorySlot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InventorySlot(st), err
}

func ReadRootInventorySlot(msg *capnp.Message) (InventorySlot, error) {
	root, err := msg.Root()
	return InventorySlot(root.Struct()), err
}

func (s InventorySlot) String() string {
	str, _ := text.Marshal(0xe9a04e0d39785218, capnp.Struct(s))
	return str
}

func (s InventorySlot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InventorySlot) DecodeFromPtr(p capnp.Ptr) InventorySlot {
	return InventorySlot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InventorySlot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InventorySlot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InventorySlot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InventorySlot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InventorySlot) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InventorySlot) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InventorySlot) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InventorySlot) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InventorySlot) SubIndex() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s InventorySlot) SetSubIndex(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// InventorySlot_List is a list of InventorySlot.
type InventorySlot_List = capnp.StructList[InventorySlot]

// NewInventorySlot creates a new list of InventorySlot.
func NewInventorySlot_List(s *capnp.Segment, sz int32) (InventorySlot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[InventorySlot](l), err
}

// InventorySlot_Future is a wrapper for a InventorySlot promised by a client call.
type InventorySlot_Future struct{ *capnp.Future }

func (f InventorySlot_Future) Struct() (InventorySlot, error) {
	p, err := f.Future.Ptr()
	return InventorySlot(p.Struct()), err
}

type TypelessInventorySlot capnp.Struct

// TypelessInventorySlot_TypeID is the unique identifier for the type TypelessInventorySlot.
const TypelessInventorySlot_TypeID = 0x899e3334be65d957

func NewTypelessInventorySlot(s *capnp.Segment) (TypelessInventorySlot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TypelessInventorySlot(st), err
}

func NewRootTypelessInventorySlot(s *capnp.Segment) (TypelessInventorySlot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TypelessInventorySlot(st), err
}

func ReadRootTypelessInventorySlot(msg *capnp.Message) (TypelessInventorySlot, error) {
	root, err := msg.Root()
	return TypelessInventorySlot(root.Struct()), err
}

func (s TypelessInventorySlot) String() string {
	str, _ := text.Marshal(0x899e3334be65d957, capnp.Struct(s))
	return str
}

func (s TypelessInventorySlot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TypelessInventorySlot) DecodeFromPtr(p capnp.Ptr) TypelessInventorySlot {
	return TypelessInventorySlot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TypelessInventorySlot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TypelessInventorySlot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TypelessInventorySlot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TypelessInventorySlot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TypelessInventorySlot) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TypelessInventorySlot) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TypelessInventorySlot) SubIndex() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TypelessInventorySlot) SetSubIndex(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TypelessInventorySlot_List is a list of TypelessInventorySlot.
type TypelessInventorySlot_List = capnp.StructList[TypelessInventorySlot]

// NewTypelessInventorySlot creates a new list of TypelessInventorySlot.
func NewTypelessInventorySlot_List(s *capnp.Segment, sz int32) (TypelessInventorySlot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TypelessInventorySlot](l), err
}

// TypelessInventorySlot_Future is a wrapper for a TypelessInventorySlot promised by a client call.
type TypelessInventorySlot_Future struct{ *capnp.Future }

func (f TypelessInventorySlot_Future) Struct() (TypelessInventorySlot, error) {
	p, err := f.Future.Ptr()
	return TypelessInventorySlot(p.Struct()), err
}

type EntityId capnp.Struct

// EntityId_TypeID is the unique identifier for the type EntityId.
const EntityId_TypeID = 0xdd9072d437eab9a1

func NewEntityId(s *capnp.Segment) (EntityId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityId(st), err
}

func NewRootEntityId(s *capnp.Segment) (EntityId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityId(st), err
}

func ReadRootEntityId(msg *capnp.Message) (EntityId, error) {
	root, err := msg.Root()
	return EntityId(root.Struct()), err
}

func (s EntityId) String() string {
	str, _ := text.Marshal(0xdd9072d437eab9a1, capnp.Struct(s))
	return str
}

func (s EntityId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityId) DecodeFromPtr(p capnp.Ptr) EntityId {
	return EntityId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityId) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EntityId) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// EntityId_List is a list of EntityId.
type EntityId_List = capnp.StructList[EntityId]

// NewEntityId creates a new list of EntityId.
func NewEntityId_List(s *capnp.Segment, sz int32) (EntityId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityId](l), err
}

// EntityId_Future is a wrapper for a EntityId promised by a client call.
type EntityId_Future struct{ *capnp.Future }

func (f EntityId_Future) Struct() (EntityId, error) {
	p, err := f.Future.Ptr()
	return EntityId(p.Struct()), err
}

type Duel capnp.Struct

// Duel_TypeID is the unique identifier for the type Duel.
const Duel_TypeID = 0xb745aa7de9c39191

func NewDuel(s *capnp.Segment) (Duel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Duel(st), err
}

func NewRootDuel(s *capnp.Segment) (Duel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Duel(st), err
}

func ReadRootDuel(msg *capnp.Message) (Duel, error) {
	root, err := msg.Root()
	return Duel(root.Struct()), err
}

func (s Duel) String() string {
	str, _ := text.Marshal(0xb745aa7de9c39191, capnp.Struct(s))
	return str
}

func (s Duel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Duel) DecodeFromPtr(p capnp.Ptr) Duel {
	return Duel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Duel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Duel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Duel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Duel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Duel) DuelInitiator() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Duel) SetDuelInitiator(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Duel) DuelTarget() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Duel) SetDuelTarget(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Duel_List is a list of Duel.
type Duel_List = capnp.StructList[Duel]

// NewDuel creates a new list of Duel.
func NewDuel_List(s *capnp.Segment, sz int32) (Duel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Duel](l), err
}

// Duel_Future is a wrapper for a Duel promised by a client call.
type Duel_Future struct{ *capnp.Future }

func (f Duel_Future) Struct() (Duel, error) {
	p, err := f.Future.Ptr()
	return Duel(p.Struct()), err
}

type DuelResponse capnp.Struct

// DuelResponse_TypeID is the unique identifier for the type DuelResponse.
const DuelResponse_TypeID = 0x8163a7ff6f92e3eb

func NewDuelResponse(s *capnp.Segment) (DuelResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DuelResponse(st), err
}

func NewRootDuelResponse(s *capnp.Segment) (DuelResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DuelResponse(st), err
}

func ReadRootDuelResponse(msg *capnp.Message) (DuelResponse, error) {
	root, err := msg.Root()
	return DuelResponse(root.Struct()), err
}

func (s DuelResponse) String() string {
	str, _ := text.Marshal(0x8163a7ff6f92e3eb, capnp.Struct(s))
	return str
}

func (s DuelResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DuelResponse) DecodeFromPtr(p capnp.Ptr) DuelResponse {
	return DuelResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DuelResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DuelResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DuelResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DuelResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DuelResponse) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DuelResponse) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DuelResponse) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DuelResponse) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// DuelResponse_List is a list of DuelResponse.
type DuelResponse_List = capnp.StructList[DuelResponse]

// NewDuelResponse creates a new list of DuelResponse.
func NewDuelResponse_List(s *capnp.Segment, sz int32) (DuelResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DuelResponse](l), err
}

// DuelResponse_Future is a wrapper for a DuelResponse promised by a client call.
type DuelResponse_Future struct{ *capnp.Future }

func (f DuelResponse_Future) Struct() (DuelResponse, error) {
	p, err := f.Future.Ptr()
	return DuelResponse(p.Struct()), err
}

type AdventureInfo capnp.Struct

// AdventureInfo_TypeID is the unique identifier for the type AdventureInfo.
const AdventureInfo_TypeID = 0xf03da18831a1c80b

func NewAdventureInfo(s *capnp.Segment) (AdventureInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3})
	return AdventureInfo(st), err
}

func NewRootAdventureInfo(s *capnp.Segment) (AdventureInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3})
	return AdventureInfo(st), err
}

func ReadRootAdventureInfo(msg *capnp.Message) (AdventureInfo, error) {
	root, err := msg.Root()
	return AdventureInfo(root.Struct()), err
}

func (s AdventureInfo) String() string {
	str, _ := text.Marshal(0xf03da18831a1c80b, capnp.Struct(s))
	return str
}

func (s AdventureInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureInfo) DecodeFromPtr(p capnp.Ptr) AdventureInfo {
	return AdventureInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureInfo) QuestId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureInfo) SetQuestId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureInfo) NpcId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureInfo) SetNpcId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureInfo) InUse() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s AdventureInfo) HasInUse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventureInfo) SetInUse(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInUse sets the inUse field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s AdventureInfo) NewInUse() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AdventureInfo) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureInfo) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureInfo) ShowCompass() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Bool(p.Struct()), err
}

func (s AdventureInfo) HasShowCompass() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AdventureInfo) SetShowCompass(v Bool) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewShowCompass sets the showCompass field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s AdventureInfo) NewShowCompass() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AdventureInfo) Objetive() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventureInfo) SetObjetive(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AdventureInfo) ObjetiveValue() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AdventureInfo) SetObjetiveValue(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AdventureInfo) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s AdventureInfo) HasText() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s AdventureInfo) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s AdventureInfo) SetText(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s AdventureInfo) Type() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AdventureInfo) SetType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s AdventureInfo) Minutes() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AdventureInfo) SetMinutes(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s AdventureInfo) Points() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s AdventureInfo) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s AdventureInfo) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s AdventureInfo) SetX(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s AdventureInfo) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s AdventureInfo) SetY(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s AdventureInfo) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s AdventureInfo) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s AdventureInfo) Zonedungeonid() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s AdventureInfo) SetZonedungeonid(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

// AdventureInfo_List is a list of AdventureInfo.
type AdventureInfo_List = capnp.StructList[AdventureInfo]

// NewAdventureInfo creates a new list of AdventureInfo.
func NewAdventureInfo_List(s *capnp.Segment, sz int32) (AdventureInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3}, sz)
	return capnp.StructList[AdventureInfo](l), err
}

// AdventureInfo_Future is a wrapper for a AdventureInfo promised by a client call.
type AdventureInfo_Future struct{ *capnp.Future }

func (f AdventureInfo_Future) Struct() (AdventureInfo, error) {
	p, err := f.Future.Ptr()
	return AdventureInfo(p.Struct()), err
}
func (p AdventureInfo_Future) InUse() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}
func (p AdventureInfo_Future) ShowCompass() Bool_Future {
	return Bool_Future{Future: p.Future.Field(1, nil)}
}

type TextureProfile capnp.Struct

// TextureProfile_TypeID is the unique identifier for the type TextureProfile.
const TextureProfile_TypeID = 0xe430fa7b7d850130

func NewTextureProfile(s *capnp.Segment) (TextureProfile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TextureProfile(st), err
}

func NewRootTextureProfile(s *capnp.Segment) (TextureProfile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TextureProfile(st), err
}

func ReadRootTextureProfile(msg *capnp.Message) (TextureProfile, error) {
	root, err := msg.Root()
	return TextureProfile(root.Struct()), err
}

func (s TextureProfile) String() string {
	str, _ := text.Marshal(0xe430fa7b7d850130, capnp.Struct(s))
	return str
}

func (s TextureProfile) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TextureProfile) DecodeFromPtr(p capnp.Ptr) TextureProfile {
	return TextureProfile(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TextureProfile) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TextureProfile) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TextureProfile) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TextureProfile) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TextureProfile) Head() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TextureProfile) SetHead(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TextureProfile) Chest() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TextureProfile) SetChest(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TextureProfile) Arms() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TextureProfile) SetArms(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TextureProfile) Wrist() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TextureProfile) SetWrist(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TextureProfile) Hands() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TextureProfile) SetHands(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TextureProfile) Legs() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TextureProfile) SetLegs(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TextureProfile) Feet() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TextureProfile) SetFeet(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s TextureProfile) Primary() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s TextureProfile) SetPrimary(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s TextureProfile) Secondary() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s TextureProfile) SetSecondary(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// TextureProfile_List is a list of TextureProfile.
type TextureProfile_List = capnp.StructList[TextureProfile]

// NewTextureProfile creates a new list of TextureProfile.
func NewTextureProfile_List(s *capnp.Segment, sz int32) (TextureProfile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[TextureProfile](l), err
}

// TextureProfile_Future is a wrapper for a TextureProfile promised by a client call.
type TextureProfile_Future struct{ *capnp.Future }

func (f TextureProfile_Future) Struct() (TextureProfile, error) {
	p, err := f.Future.Ptr()
	return TextureProfile(p.Struct()), err
}

type TintProfile capnp.Struct

// TintProfile_TypeID is the unique identifier for the type TintProfile.
const TintProfile_TypeID = 0xf5a87fa04392d0a1

func NewTintProfile(s *capnp.Segment) (TintProfile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TintProfile(st), err
}

func NewRootTintProfile(s *capnp.Segment) (TintProfile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TintProfile(st), err
}

func ReadRootTintProfile(msg *capnp.Message) (TintProfile, error) {
	root, err := msg.Root()
	return TintProfile(root.Struct()), err
}

func (s TintProfile) String() string {
	str, _ := text.Marshal(0xf5a87fa04392d0a1, capnp.Struct(s))
	return str
}

func (s TintProfile) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TintProfile) DecodeFromPtr(p capnp.Ptr) TintProfile {
	return TintProfile(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TintProfile) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TintProfile) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TintProfile) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TintProfile) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TintProfile) Head() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TintProfile) SetHead(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TintProfile) Chest() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TintProfile) SetChest(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TintProfile) Arms() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TintProfile) SetArms(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TintProfile) Wrist() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TintProfile) SetWrist(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TintProfile) Hands() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TintProfile) SetHands(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TintProfile) Legs() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TintProfile) SetLegs(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TintProfile) Feet() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TintProfile) SetFeet(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s TintProfile) Primary() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s TintProfile) SetPrimary(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s TintProfile) Secondary() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s TintProfile) SetSecondary(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// TintProfile_List is a list of TintProfile.
type TintProfile_List = capnp.StructList[TintProfile]

// NewTintProfile creates a new list of TintProfile.
func NewTintProfile_List(s *capnp.Segment, sz int32) (TintProfile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[TintProfile](l), err
}

// TintProfile_Future is a wrapper for a TintProfile promised by a client call.
type TintProfile_Future struct{ *capnp.Future }

func (f TintProfile_Future) Struct() (TintProfile, error) {
	p, err := f.Future.Ptr()
	return TintProfile(p.Struct()), err
}

type Spawns capnp.Struct

// Spawns_TypeID is the unique identifier for the type Spawns.
const Spawns_TypeID = 0x84ff32fdda835dfe

func NewSpawns(s *capnp.Segment) (Spawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Spawns(st), err
}

func NewRootSpawns(s *capnp.Segment) (Spawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Spawns(st), err
}

func ReadRootSpawns(msg *capnp.Message) (Spawns, error) {
	root, err := msg.Root()
	return Spawns(root.Struct()), err
}

func (s Spawns) String() string {
	str, _ := text.Marshal(0x84ff32fdda835dfe, capnp.Struct(s))
	return str
}

func (s Spawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Spawns) DecodeFromPtr(p capnp.Ptr) Spawns {
	return Spawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Spawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Spawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Spawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Spawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Spawns) Spawns() (Spawn_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Spawn_List(p.List()), err
}

func (s Spawns) HasSpawns() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Spawns) SetSpawns(v Spawn_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpawns sets the spawns field to a newly
// allocated Spawn_List, preferring placement in s's segment.
func (s Spawns) NewSpawns(n int32) (Spawn_List, error) {
	l, err := NewSpawn_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Spawn_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Spawns_List is a list of Spawns.
type Spawns_List = capnp.StructList[Spawns]

// NewSpawns creates a new list of Spawns.
func NewSpawns_List(s *capnp.Segment, sz int32) (Spawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Spawns](l), err
}

// Spawns_Future is a wrapper for a Spawns promised by a client call.
type Spawns_Future struct{ *capnp.Future }

func (f Spawns_Future) Struct() (Spawns, error) {
	p, err := f.Future.Ptr()
	return Spawns(p.Struct()), err
}

type Spawn capnp.Struct

// Spawn_TypeID is the unique identifier for the type Spawn.
const Spawn_TypeID = 0xd8facf5bce9546c7

func NewSpawn(s *capnp.Segment) (Spawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 216, PointerCount: 5})
	return Spawn(st), err
}

func NewRootSpawn(s *capnp.Segment) (Spawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 216, PointerCount: 5})
	return Spawn(st), err
}

func ReadRootSpawn(msg *capnp.Message) (Spawn, error) {
	root, err := msg.Root()
	return Spawn(root.Struct()), err
}

func (s Spawn) String() string {
	str, _ := text.Marshal(0xd8facf5bce9546c7, capnp.Struct(s))
	return str
}

func (s Spawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Spawn) DecodeFromPtr(p capnp.Ptr) Spawn {
	return Spawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Spawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Spawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Spawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Spawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Spawn) Gm() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Spawn) SetGm(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Spawn) Aaitle() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Spawn) SetAaitle(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Spawn) Anon() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Spawn) SetAnon(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Spawn) Face() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Spawn) SetFace(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Spawn) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Spawn) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Spawn) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Spawn) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Spawn) Deity() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Spawn) SetDeity(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Spawn) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Spawn) SetSize(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Spawn) Npc() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Spawn) SetNpc(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Spawn) Invis() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Spawn) SetInvis(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Spawn) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Spawn) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Spawn) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Spawn) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Spawn) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Spawn) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s Spawn) Findable() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s Spawn) SetFindable(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s Spawn) DeltaHeading() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s Spawn) SetDeltaHeading(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s Spawn) X() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s Spawn) SetX(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s Spawn) Y() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s Spawn) SetY(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s Spawn) Animation() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s Spawn) SetAnimation(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s Spawn) Z() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s Spawn) SetZ(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s Spawn) DeltaY() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s Spawn) SetDeltaY(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s Spawn) DeltaX() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s Spawn) SetDeltaX(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s Spawn) Heading() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s Spawn) SetHeading(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s Spawn) DeltaZ() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s Spawn) SetDeltaZ(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s Spawn) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(84))
}

func (s Spawn) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(84, uint32(v))
}

func (s Spawn) Showhelm() int32 {
	return int32(capnp.Struct(s).Uint32(88))
}

func (s Spawn) SetShowhelm(v int32) {
	capnp.Struct(s).SetUint32(88, uint32(v))
}

func (s Spawn) IsNpc() int32 {
	return int32(capnp.Struct(s).Uint32(92))
}

func (s Spawn) SetIsNpc(v int32) {
	capnp.Struct(s).SetUint32(92, uint32(v))
}

func (s Spawn) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(96))
}

func (s Spawn) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(96, uint32(v))
}

func (s Spawn) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(100))
}

func (s Spawn) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(100, uint32(v))
}

func (s Spawn) Level() int32 {
	return int32(capnp.Struct(s).Uint32(104))
}

func (s Spawn) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(104, uint32(v))
}

func (s Spawn) PlayerState() int32 {
	return int32(capnp.Struct(s).Uint32(108))
}

func (s Spawn) SetPlayerState(v int32) {
	capnp.Struct(s).SetUint32(108, uint32(v))
}

func (s Spawn) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(112))
}

func (s Spawn) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(112, uint32(v))
}

func (s Spawn) Suffix() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Spawn) HasSuffix() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Spawn) SuffixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Spawn) SetSuffix(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Spawn) PetOwnerId() int32 {
	return int32(capnp.Struct(s).Uint32(116))
}

func (s Spawn) SetPetOwnerId(v int32) {
	capnp.Struct(s).SetUint32(116, uint32(v))
}

func (s Spawn) Guildrank() int32 {
	return int32(capnp.Struct(s).Uint32(120))
}

func (s Spawn) SetGuildrank(v int32) {
	capnp.Struct(s).SetUint32(120, uint32(v))
}

func (s Spawn) Equipment() (TextureProfile, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return TextureProfile(p.Struct()), err
}

func (s Spawn) HasEquipment() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Spawn) SetEquipment(v TextureProfile) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEquipment sets the equipment field to a newly
// allocated TextureProfile struct, preferring placement in s's segment.
func (s Spawn) NewEquipment() (TextureProfile, error) {
	ss, err := NewTextureProfile(capnp.Struct(s).Segment())
	if err != nil {
		return TextureProfile{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Spawn) Runspeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(124))
}

func (s Spawn) SetRunspeed(v float32) {
	capnp.Struct(s).SetUint32(124, math.Float32bits(v))
}

func (s Spawn) Afk() int32 {
	return int32(capnp.Struct(s).Uint32(128))
}

func (s Spawn) SetAfk(v int32) {
	capnp.Struct(s).SetUint32(128, uint32(v))
}

func (s Spawn) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(132))
}

func (s Spawn) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(132, uint32(v))
}

func (s Spawn) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Spawn) HasTitle() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Spawn) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Spawn) SetTitle(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Spawn) Helm() int32 {
	return int32(capnp.Struct(s).Uint32(136))
}

func (s Spawn) SetHelm(v int32) {
	capnp.Struct(s).SetUint32(136, uint32(v))
}

func (s Spawn) Race() int32 {
	return int32(capnp.Struct(s).Uint32(140))
}

func (s Spawn) SetRace(v int32) {
	capnp.Struct(s).SetUint32(140, uint32(v))
}

func (s Spawn) LastName() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Spawn) HasLastName() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Spawn) LastNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Spawn) SetLastName(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Spawn) Walkspeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(144))
}

func (s Spawn) SetWalkspeed(v float32) {
	capnp.Struct(s).SetUint32(144, math.Float32bits(v))
}

func (s Spawn) IsPet() int32 {
	return int32(capnp.Struct(s).Uint32(148))
}

func (s Spawn) SetIsPet(v int32) {
	capnp.Struct(s).SetUint32(148, uint32(v))
}

func (s Spawn) Light() int32 {
	return int32(capnp.Struct(s).Uint32(152))
}

func (s Spawn) SetLight(v int32) {
	capnp.Struct(s).SetUint32(152, uint32(v))
}

func (s Spawn) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(156))
}

func (s Spawn) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(156, uint32(v))
}

func (s Spawn) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(160))
}

func (s Spawn) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(160, uint32(v))
}

func (s Spawn) Flymode() int32 {
	return int32(capnp.Struct(s).Uint32(164))
}

func (s Spawn) SetFlymode(v int32) {
	capnp.Struct(s).SetUint32(164, uint32(v))
}

func (s Spawn) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(168))
}

func (s Spawn) SetGender(v int32) {
	capnp.Struct(s).SetUint32(168, uint32(v))
}

func (s Spawn) Bodytype() int32 {
	return int32(capnp.Struct(s).Uint32(172))
}

func (s Spawn) SetBodytype(v int32) {
	capnp.Struct(s).SetUint32(172, uint32(v))
}

func (s Spawn) EquipChest() int32 {
	return int32(capnp.Struct(s).Uint32(176))
}

func (s Spawn) SetEquipChest(v int32) {
	capnp.Struct(s).SetUint32(176, uint32(v))
}

func (s Spawn) MountColor() int32 {
	return int32(capnp.Struct(s).Uint32(180))
}

func (s Spawn) SetMountColor(v int32) {
	capnp.Struct(s).SetUint32(180, uint32(v))
}

func (s Spawn) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(184))
}

func (s Spawn) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(184, uint32(v))
}

func (s Spawn) BoundingRadius() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(188))
}

func (s Spawn) SetBoundingRadius(v float32) {
	capnp.Struct(s).SetUint32(188, math.Float32bits(v))
}

func (s Spawn) EquipmentTint() int32 {
	return int32(capnp.Struct(s).Uint32(192))
}

func (s Spawn) SetEquipmentTint(v int32) {
	capnp.Struct(s).SetUint32(192, uint32(v))
}

func (s Spawn) Lfg() int32 {
	return int32(capnp.Struct(s).Uint32(196))
}

func (s Spawn) SetLfg(v int32) {
	capnp.Struct(s).SetUint32(196, uint32(v))
}

func (s Spawn) CellX() int32 {
	return int32(capnp.Struct(s).Uint32(200))
}

func (s Spawn) SetCellX(v int32) {
	capnp.Struct(s).SetUint32(200, uint32(v))
}

func (s Spawn) CellY() int32 {
	return int32(capnp.Struct(s).Uint32(204))
}

func (s Spawn) SetCellY(v int32) {
	capnp.Struct(s).SetUint32(204, uint32(v))
}

func (s Spawn) CellZ() int32 {
	return int32(capnp.Struct(s).Uint32(208))
}

func (s Spawn) SetCellZ(v int32) {
	capnp.Struct(s).SetUint32(208, uint32(v))
}

// Spawn_List is a list of Spawn.
type Spawn_List = capnp.StructList[Spawn]

// NewSpawn creates a new list of Spawn.
func NewSpawn_List(s *capnp.Segment, sz int32) (Spawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 216, PointerCount: 5}, sz)
	return capnp.StructList[Spawn](l), err
}

// Spawn_Future is a wrapper for a Spawn promised by a client call.
type Spawn_Future struct{ *capnp.Future }

func (f Spawn_Future) Struct() (Spawn, error) {
	p, err := f.Future.Ptr()
	return Spawn(p.Struct()), err
}
func (p Spawn_Future) Equipment() TextureProfile_Future {
	return TextureProfile_Future{Future: p.Future.Field(2, nil)}
}

type ClientZoneEntry capnp.Struct

// ClientZoneEntry_TypeID is the unique identifier for the type ClientZoneEntry.
const ClientZoneEntry_TypeID = 0xb0746148ee56b888

func NewClientZoneEntry(s *capnp.Segment) (ClientZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientZoneEntry(st), err
}

func NewRootClientZoneEntry(s *capnp.Segment) (ClientZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientZoneEntry(st), err
}

func ReadRootClientZoneEntry(msg *capnp.Message) (ClientZoneEntry, error) {
	root, err := msg.Root()
	return ClientZoneEntry(root.Struct()), err
}

func (s ClientZoneEntry) String() string {
	str, _ := text.Marshal(0xb0746148ee56b888, capnp.Struct(s))
	return str
}

func (s ClientZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientZoneEntry) DecodeFromPtr(p capnp.Ptr) ClientZoneEntry {
	return ClientZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientZoneEntry) CharName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientZoneEntry) HasCharName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientZoneEntry) CharNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientZoneEntry) SetCharName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClientZoneEntry_List is a list of ClientZoneEntry.
type ClientZoneEntry_List = capnp.StructList[ClientZoneEntry]

// NewClientZoneEntry creates a new list of ClientZoneEntry.
func NewClientZoneEntry_List(s *capnp.Segment, sz int32) (ClientZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClientZoneEntry](l), err
}

// ClientZoneEntry_Future is a wrapper for a ClientZoneEntry promised by a client call.
type ClientZoneEntry_Future struct{ *capnp.Future }

func (f ClientZoneEntry_Future) Struct() (ClientZoneEntry, error) {
	p, err := f.Future.Ptr()
	return ClientZoneEntry(p.Struct()), err
}

type ServerZoneEntry capnp.Struct

// ServerZoneEntry_TypeID is the unique identifier for the type ServerZoneEntry.
const ServerZoneEntry_TypeID = 0xe64292fa5df872fd

func NewServerZoneEntry(s *capnp.Segment) (ServerZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerZoneEntry(st), err
}

func NewRootServerZoneEntry(s *capnp.Segment) (ServerZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerZoneEntry(st), err
}

func ReadRootServerZoneEntry(msg *capnp.Message) (ServerZoneEntry, error) {
	root, err := msg.Root()
	return ServerZoneEntry(root.Struct()), err
}

func (s ServerZoneEntry) String() string {
	str, _ := text.Marshal(0xe64292fa5df872fd, capnp.Struct(s))
	return str
}

func (s ServerZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerZoneEntry) DecodeFromPtr(p capnp.Ptr) ServerZoneEntry {
	return ServerZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerZoneEntry) Player() (Spawn, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Spawn(p.Struct()), err
}

func (s ServerZoneEntry) HasPlayer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerZoneEntry) SetPlayer(v Spawn) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayer sets the player field to a newly
// allocated Spawn struct, preferring placement in s's segment.
func (s ServerZoneEntry) NewPlayer() (Spawn, error) {
	ss, err := NewSpawn(capnp.Struct(s).Segment())
	if err != nil {
		return Spawn{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerZoneEntry_List is a list of ServerZoneEntry.
type ServerZoneEntry_List = capnp.StructList[ServerZoneEntry]

// NewServerZoneEntry creates a new list of ServerZoneEntry.
func NewServerZoneEntry_List(s *capnp.Segment, sz int32) (ServerZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServerZoneEntry](l), err
}

// ServerZoneEntry_Future is a wrapper for a ServerZoneEntry promised by a client call.
type ServerZoneEntry_Future struct{ *capnp.Future }

func (f ServerZoneEntry_Future) Struct() (ServerZoneEntry, error) {
	p, err := f.Future.Ptr()
	return ServerZoneEntry(p.Struct()), err
}
func (p ServerZoneEntry_Future) Player() Spawn_Future {
	return Spawn_Future{Future: p.Future.Field(0, nil)}
}

type MemorizeSpell capnp.Struct

// MemorizeSpell_TypeID is the unique identifier for the type MemorizeSpell.
const MemorizeSpell_TypeID = 0xa7e27069226b98ad

func NewMemorizeSpell(s *capnp.Segment) (MemorizeSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MemorizeSpell(st), err
}

func NewRootMemorizeSpell(s *capnp.Segment) (MemorizeSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MemorizeSpell(st), err
}

func ReadRootMemorizeSpell(msg *capnp.Message) (MemorizeSpell, error) {
	root, err := msg.Root()
	return MemorizeSpell(root.Struct()), err
}

func (s MemorizeSpell) String() string {
	str, _ := text.Marshal(0xa7e27069226b98ad, capnp.Struct(s))
	return str
}

func (s MemorizeSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MemorizeSpell) DecodeFromPtr(p capnp.Ptr) MemorizeSpell {
	return MemorizeSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MemorizeSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MemorizeSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MemorizeSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MemorizeSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MemorizeSpell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MemorizeSpell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MemorizeSpell) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MemorizeSpell) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MemorizeSpell) Scribing() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MemorizeSpell) SetScribing(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MemorizeSpell) Reduction() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MemorizeSpell) SetReduction(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MemorizeSpell_List is a list of MemorizeSpell.
type MemorizeSpell_List = capnp.StructList[MemorizeSpell]

// NewMemorizeSpell creates a new list of MemorizeSpell.
func NewMemorizeSpell_List(s *capnp.Segment, sz int32) (MemorizeSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MemorizeSpell](l), err
}

// MemorizeSpell_Future is a wrapper for a MemorizeSpell promised by a client call.
type MemorizeSpell_Future struct{ *capnp.Future }

func (f MemorizeSpell_Future) Struct() (MemorizeSpell, error) {
	p, err := f.Future.Ptr()
	return MemorizeSpell(p.Struct()), err
}

type Charm capnp.Struct

// Charm_TypeID is the unique identifier for the type Charm.
const Charm_TypeID = 0xe62b635478feb9f1

func NewCharm(s *capnp.Segment) (Charm, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Charm(st), err
}

func NewRootCharm(s *capnp.Segment) (Charm, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Charm(st), err
}

func ReadRootCharm(msg *capnp.Message) (Charm, error) {
	root, err := msg.Root()
	return Charm(root.Struct()), err
}

func (s Charm) String() string {
	str, _ := text.Marshal(0xe62b635478feb9f1, capnp.Struct(s))
	return str
}

func (s Charm) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Charm) DecodeFromPtr(p capnp.Ptr) Charm {
	return Charm(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Charm) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Charm) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Charm) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Charm) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Charm) OwnerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Charm) SetOwnerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Charm) PetId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Charm) SetPetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Charm) Command() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Charm) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Charm_List is a list of Charm.
type Charm_List = capnp.StructList[Charm]

// NewCharm creates a new list of Charm.
func NewCharm_List(s *capnp.Segment, sz int32) (Charm_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Charm](l), err
}

// Charm_Future is a wrapper for a Charm promised by a client call.
type Charm_Future struct{ *capnp.Future }

func (f Charm_Future) Struct() (Charm, error) {
	p, err := f.Future.Ptr()
	return Charm(p.Struct()), err
}

type InterruptCast capnp.Struct

// InterruptCast_TypeID is the unique identifier for the type InterruptCast.
const InterruptCast_TypeID = 0x8f9b301fdfe3c51c

func NewInterruptCast(s *capnp.Segment) (InterruptCast, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return InterruptCast(st), err
}

func NewRootInterruptCast(s *capnp.Segment) (InterruptCast, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return InterruptCast(st), err
}

func ReadRootInterruptCast(msg *capnp.Message) (InterruptCast, error) {
	root, err := msg.Root()
	return InterruptCast(root.Struct()), err
}

func (s InterruptCast) String() string {
	str, _ := text.Marshal(0x8f9b301fdfe3c51c, capnp.Struct(s))
	return str
}

func (s InterruptCast) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InterruptCast) DecodeFromPtr(p capnp.Ptr) InterruptCast {
	return InterruptCast(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InterruptCast) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InterruptCast) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InterruptCast) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InterruptCast) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InterruptCast) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InterruptCast) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InterruptCast) Messageid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InterruptCast) SetMessageid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InterruptCast) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s InterruptCast) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InterruptCast) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s InterruptCast) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// InterruptCast_List is a list of InterruptCast.
type InterruptCast_List = capnp.StructList[InterruptCast]

// NewInterruptCast creates a new list of InterruptCast.
func NewInterruptCast_List(s *capnp.Segment, sz int32) (InterruptCast_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[InterruptCast](l), err
}

// InterruptCast_Future is a wrapper for a InterruptCast promised by a client call.
type InterruptCast_Future struct{ *capnp.Future }

func (f InterruptCast_Future) Struct() (InterruptCast, error) {
	p, err := f.Future.Ptr()
	return InterruptCast(p.Struct()), err
}

type DeleteSpell capnp.Struct

// DeleteSpell_TypeID is the unique identifier for the type DeleteSpell.
const DeleteSpell_TypeID = 0x888a7e1d97fd6855

func NewDeleteSpell(s *capnp.Segment) (DeleteSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpell(st), err
}

func NewRootDeleteSpell(s *capnp.Segment) (DeleteSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpell(st), err
}

func ReadRootDeleteSpell(msg *capnp.Message) (DeleteSpell, error) {
	root, err := msg.Root()
	return DeleteSpell(root.Struct()), err
}

func (s DeleteSpell) String() string {
	str, _ := text.Marshal(0x888a7e1d97fd6855, capnp.Struct(s))
	return str
}

func (s DeleteSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteSpell) DecodeFromPtr(p capnp.Ptr) DeleteSpell {
	return DeleteSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteSpell) SpellSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteSpell) SetSpellSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DeleteSpell) Success() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DeleteSpell) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// DeleteSpell_List is a list of DeleteSpell.
type DeleteSpell_List = capnp.StructList[DeleteSpell]

// NewDeleteSpell creates a new list of DeleteSpell.
func NewDeleteSpell_List(s *capnp.Segment, sz int32) (DeleteSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DeleteSpell](l), err
}

// DeleteSpell_Future is a wrapper for a DeleteSpell promised by a client call.
type DeleteSpell_Future struct{ *capnp.Future }

func (f DeleteSpell_Future) Struct() (DeleteSpell, error) {
	p, err := f.Future.Ptr()
	return DeleteSpell(p.Struct()), err
}

type ManaChange capnp.Struct

// ManaChange_TypeID is the unique identifier for the type ManaChange.
const ManaChange_TypeID = 0xa7ab2bbcc8342323

func NewManaChange(s *capnp.Segment) (ManaChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ManaChange(st), err
}

func NewRootManaChange(s *capnp.Segment) (ManaChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ManaChange(st), err
}

func ReadRootManaChange(msg *capnp.Message) (ManaChange, error) {
	root, err := msg.Root()
	return ManaChange(root.Struct()), err
}

func (s ManaChange) String() string {
	str, _ := text.Marshal(0xa7ab2bbcc8342323, capnp.Struct(s))
	return str
}

func (s ManaChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ManaChange) DecodeFromPtr(p capnp.Ptr) ManaChange {
	return ManaChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ManaChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ManaChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ManaChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ManaChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ManaChange) NewMana() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ManaChange) SetNewMana(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ManaChange) Stamina() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ManaChange) SetStamina(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ManaChange) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ManaChange) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ManaChange) Keepcasting() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ManaChange) SetKeepcasting(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ManaChange) Padding() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ManaChange) HasPadding() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ManaChange) SetPadding(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPadding sets the padding field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ManaChange) NewPadding(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ManaChange_List is a list of ManaChange.
type ManaChange_List = capnp.StructList[ManaChange]

// NewManaChange creates a new list of ManaChange.
func NewManaChange_List(s *capnp.Segment, sz int32) (ManaChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[ManaChange](l), err
}

// ManaChange_Future is a wrapper for a ManaChange promised by a client call.
type ManaChange_Future struct{ *capnp.Future }

func (f ManaChange_Future) Struct() (ManaChange, error) {
	p, err := f.Future.Ptr()
	return ManaChange(p.Struct()), err
}

type SwapSpell capnp.Struct

// SwapSpell_TypeID is the unique identifier for the type SwapSpell.
const SwapSpell_TypeID = 0xe4e7eeb23bebb1f8

func NewSwapSpell(s *capnp.Segment) (SwapSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SwapSpell(st), err
}

func NewRootSwapSpell(s *capnp.Segment) (SwapSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SwapSpell(st), err
}

func ReadRootSwapSpell(msg *capnp.Message) (SwapSpell, error) {
	root, err := msg.Root()
	return SwapSpell(root.Struct()), err
}

func (s SwapSpell) String() string {
	str, _ := text.Marshal(0xe4e7eeb23bebb1f8, capnp.Struct(s))
	return str
}

func (s SwapSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SwapSpell) DecodeFromPtr(p capnp.Ptr) SwapSpell {
	return SwapSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SwapSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SwapSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SwapSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SwapSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SwapSpell) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SwapSpell) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SwapSpell) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SwapSpell) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SwapSpell_List is a list of SwapSpell.
type SwapSpell_List = capnp.StructList[SwapSpell]

// NewSwapSpell creates a new list of SwapSpell.
func NewSwapSpell_List(s *capnp.Segment, sz int32) (SwapSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SwapSpell](l), err
}

// SwapSpell_Future is a wrapper for a SwapSpell promised by a client call.
type SwapSpell_Future struct{ *capnp.Future }

func (f SwapSpell_Future) Struct() (SwapSpell, error) {
	p, err := f.Future.Ptr()
	return SwapSpell(p.Struct()), err
}

type BeginCast capnp.Struct

// BeginCast_TypeID is the unique identifier for the type BeginCast.
const BeginCast_TypeID = 0xc576336317865217

func NewBeginCast(s *capnp.Segment) (BeginCast, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BeginCast(st), err
}

func NewRootBeginCast(s *capnp.Segment) (BeginCast, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BeginCast(st), err
}

func ReadRootBeginCast(msg *capnp.Message) (BeginCast, error) {
	root, err := msg.Root()
	return BeginCast(root.Struct()), err
}

func (s BeginCast) String() string {
	str, _ := text.Marshal(0xc576336317865217, capnp.Struct(s))
	return str
}

func (s BeginCast) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BeginCast) DecodeFromPtr(p capnp.Ptr) BeginCast {
	return BeginCast(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BeginCast) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BeginCast) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BeginCast) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BeginCast) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BeginCast) CasterId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BeginCast) SetCasterId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BeginCast) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BeginCast) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BeginCast) CastTime() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BeginCast) SetCastTime(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// BeginCast_List is a list of BeginCast.
type BeginCast_List = capnp.StructList[BeginCast]

// NewBeginCast creates a new list of BeginCast.
func NewBeginCast_List(s *capnp.Segment, sz int32) (BeginCast_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[BeginCast](l), err
}

// BeginCast_Future is a wrapper for a BeginCast promised by a client call.
type BeginCast_Future struct{ *capnp.Future }

func (f BeginCast_Future) Struct() (BeginCast, error) {
	p, err := f.Future.Ptr()
	return BeginCast(p.Struct()), err
}

type CastSpell capnp.Struct

// CastSpell_TypeID is the unique identifier for the type CastSpell.
const CastSpell_TypeID = 0xa987ac170b5f48c3

func NewCastSpell(s *capnp.Segment) (CastSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CastSpell(st), err
}

func NewRootCastSpell(s *capnp.Segment) (CastSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CastSpell(st), err
}

func ReadRootCastSpell(msg *capnp.Message) (CastSpell, error) {
	root, err := msg.Root()
	return CastSpell(root.Struct()), err
}

func (s CastSpell) String() string {
	str, _ := text.Marshal(0xa987ac170b5f48c3, capnp.Struct(s))
	return str
}

func (s CastSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CastSpell) DecodeFromPtr(p capnp.Ptr) CastSpell {
	return CastSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CastSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CastSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CastSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CastSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CastSpell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CastSpell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CastSpell) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CastSpell) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CastSpell) Inventoryslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CastSpell) SetInventoryslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CastSpell) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CastSpell) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// CastSpell_List is a list of CastSpell.
type CastSpell_List = capnp.StructList[CastSpell]

// NewCastSpell creates a new list of CastSpell.
func NewCastSpell_List(s *capnp.Segment, sz int32) (CastSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CastSpell](l), err
}

// CastSpell_Future is a wrapper for a CastSpell promised by a client call.
type CastSpell_Future struct{ *capnp.Future }

func (f CastSpell_Future) Struct() (CastSpell, error) {
	p, err := f.Future.Ptr()
	return CastSpell(p.Struct()), err
}

type SpawnAppearance capnp.Struct

// SpawnAppearance_TypeID is the unique identifier for the type SpawnAppearance.
const SpawnAppearance_TypeID = 0xc817bfd03978a39b

func NewSpawnAppearance(s *capnp.Segment) (SpawnAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnAppearance(st), err
}

func NewRootSpawnAppearance(s *capnp.Segment) (SpawnAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnAppearance(st), err
}

func ReadRootSpawnAppearance(msg *capnp.Message) (SpawnAppearance, error) {
	root, err := msg.Root()
	return SpawnAppearance(root.Struct()), err
}

func (s SpawnAppearance) String() string {
	str, _ := text.Marshal(0xc817bfd03978a39b, capnp.Struct(s))
	return str
}

func (s SpawnAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnAppearance) DecodeFromPtr(p capnp.Ptr) SpawnAppearance {
	return SpawnAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnAppearance) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnAppearance) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpawnAppearance) Parameter() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpawnAppearance) SetParameter(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpawnAppearance_List is a list of SpawnAppearance.
type SpawnAppearance_List = capnp.StructList[SpawnAppearance]

// NewSpawnAppearance creates a new list of SpawnAppearance.
func NewSpawnAppearance_List(s *capnp.Segment, sz int32) (SpawnAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[SpawnAppearance](l), err
}

// SpawnAppearance_Future is a wrapper for a SpawnAppearance promised by a client call.
type SpawnAppearance_Future struct{ *capnp.Future }

func (f SpawnAppearance_Future) Struct() (SpawnAppearance, error) {
	p, err := f.Future.Ptr()
	return SpawnAppearance(p.Struct()), err
}

type SpellBuff capnp.Struct

// SpellBuff_TypeID is the unique identifier for the type SpellBuff.
const SpellBuff_TypeID = 0x9c9f074ebb94ca3b

func NewSpellBuff(s *capnp.Segment) (SpellBuff, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SpellBuff(st), err
}

func NewRootSpellBuff(s *capnp.Segment) (SpellBuff, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SpellBuff(st), err
}

func ReadRootSpellBuff(msg *capnp.Message) (SpellBuff, error) {
	root, err := msg.Root()
	return SpellBuff(root.Struct()), err
}

func (s SpellBuff) String() string {
	str, _ := text.Marshal(0x9c9f074ebb94ca3b, capnp.Struct(s))
	return str
}

func (s SpellBuff) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpellBuff) DecodeFromPtr(p capnp.Ptr) SpellBuff {
	return SpellBuff(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpellBuff) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpellBuff) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpellBuff) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpellBuff) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpellBuff) EffectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpellBuff) SetEffectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpellBuff) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpellBuff) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpellBuff) BardModifier() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpellBuff) SetBardModifier(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s SpellBuff) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s SpellBuff) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s SpellBuff) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s SpellBuff) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s SpellBuff) Counters() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s SpellBuff) SetCounters(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s SpellBuff) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s SpellBuff) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// SpellBuff_List is a list of SpellBuff.
type SpellBuff_List = capnp.StructList[SpellBuff]

// NewSpellBuff creates a new list of SpellBuff.
func NewSpellBuff_List(s *capnp.Segment, sz int32) (SpellBuff_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[SpellBuff](l), err
}

// SpellBuff_Future is a wrapper for a SpellBuff promised by a client call.
type SpellBuff_Future struct{ *capnp.Future }

func (f SpellBuff_Future) Struct() (SpellBuff, error) {
	p, err := f.Future.Ptr()
	return SpellBuff(p.Struct()), err
}

type SpellBuffPacket capnp.Struct

// SpellBuffPacket_TypeID is the unique identifier for the type SpellBuffPacket.
const SpellBuffPacket_TypeID = 0xd0f511db04f5194f

func NewSpellBuffPacket(s *capnp.Segment) (SpellBuffPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SpellBuffPacket(st), err
}

func NewRootSpellBuffPacket(s *capnp.Segment) (SpellBuffPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SpellBuffPacket(st), err
}

func ReadRootSpellBuffPacket(msg *capnp.Message) (SpellBuffPacket, error) {
	root, err := msg.Root()
	return SpellBuffPacket(root.Struct()), err
}

func (s SpellBuffPacket) String() string {
	str, _ := text.Marshal(0xd0f511db04f5194f, capnp.Struct(s))
	return str
}

func (s SpellBuffPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpellBuffPacket) DecodeFromPtr(p capnp.Ptr) SpellBuffPacket {
	return SpellBuffPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpellBuffPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpellBuffPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpellBuffPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpellBuffPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpellBuffPacket) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpellBuffPacket) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpellBuffPacket) Buff() (SpellBuff, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SpellBuff(p.Struct()), err
}

func (s SpellBuffPacket) HasBuff() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpellBuffPacket) SetBuff(v SpellBuff) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBuff sets the buff field to a newly
// allocated SpellBuff struct, preferring placement in s's segment.
func (s SpellBuffPacket) NewBuff() (SpellBuff, error) {
	ss, err := NewSpellBuff(capnp.Struct(s).Segment())
	if err != nil {
		return SpellBuff{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SpellBuffPacket) Slotid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpellBuffPacket) SetSlotid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpellBuffPacket) Bufffade() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpellBuffPacket) SetBufffade(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpellBuffPacket_List is a list of SpellBuffPacket.
type SpellBuffPacket_List = capnp.StructList[SpellBuffPacket]

// NewSpellBuffPacket creates a new list of SpellBuffPacket.
func NewSpellBuffPacket_List(s *capnp.Segment, sz int32) (SpellBuffPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[SpellBuffPacket](l), err
}

// SpellBuffPacket_Future is a wrapper for a SpellBuffPacket promised by a client call.
type SpellBuffPacket_Future struct{ *capnp.Future }

func (f SpellBuffPacket_Future) Struct() (SpellBuffPacket, error) {
	p, err := f.Future.Ptr()
	return SpellBuffPacket(p.Struct()), err
}
func (p SpellBuffPacket_Future) Buff() SpellBuff_Future {
	return SpellBuff_Future{Future: p.Future.Field(0, nil)}
}

type ItemNamePacket capnp.Struct

// ItemNamePacket_TypeID is the unique identifier for the type ItemNamePacket.
const ItemNamePacket_TypeID = 0xf4c3318dcf329728

func NewItemNamePacket(s *capnp.Segment) (ItemNamePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemNamePacket(st), err
}

func NewRootItemNamePacket(s *capnp.Segment) (ItemNamePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemNamePacket(st), err
}

func ReadRootItemNamePacket(msg *capnp.Message) (ItemNamePacket, error) {
	root, err := msg.Root()
	return ItemNamePacket(root.Struct()), err
}

func (s ItemNamePacket) String() string {
	str, _ := text.Marshal(0xf4c3318dcf329728, capnp.Struct(s))
	return str
}

func (s ItemNamePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemNamePacket) DecodeFromPtr(p capnp.Ptr) ItemNamePacket {
	return ItemNamePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemNamePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemNamePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemNamePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemNamePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemNamePacket) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemNamePacket) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ItemNamePacket) Unkown() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ItemNamePacket) SetUnkown(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ItemNamePacket) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ItemNamePacket) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ItemNamePacket) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ItemNamePacket) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ItemNamePacket_List is a list of ItemNamePacket.
type ItemNamePacket_List = capnp.StructList[ItemNamePacket]

// NewItemNamePacket creates a new list of ItemNamePacket.
func NewItemNamePacket_List(s *capnp.Segment, sz int32) (ItemNamePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ItemNamePacket](l), err
}

// ItemNamePacket_Future is a wrapper for a ItemNamePacket promised by a client call.
type ItemNamePacket_Future struct{ *capnp.Future }

func (f ItemNamePacket_Future) Struct() (ItemNamePacket, error) {
	p, err := f.Future.Ptr()
	return ItemNamePacket(p.Struct()), err
}

type ItemProperties capnp.Struct

// ItemProperties_TypeID is the unique identifier for the type ItemProperties.
const ItemProperties_TypeID = 0xe00fb886fc82f1ab

func NewItemProperties(s *capnp.Segment) (ItemProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ItemProperties(st), err
}

func NewRootItemProperties(s *capnp.Segment) (ItemProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ItemProperties(st), err
}

func ReadRootItemProperties(msg *capnp.Message) (ItemProperties, error) {
	root, err := msg.Root()
	return ItemProperties(root.Struct()), err
}

func (s ItemProperties) String() string {
	str, _ := text.Marshal(0xe00fb886fc82f1ab, capnp.Struct(s))
	return str
}

func (s ItemProperties) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemProperties) DecodeFromPtr(p capnp.Ptr) ItemProperties {
	return ItemProperties(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemProperties) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemProperties) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemProperties) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemProperties) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemProperties) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemProperties) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ItemProperties_List is a list of ItemProperties.
type ItemProperties_List = capnp.StructList[ItemProperties]

// NewItemProperties creates a new list of ItemProperties.
func NewItemProperties_List(s *capnp.Segment, sz int32) (ItemProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ItemProperties](l), err
}

// ItemProperties_Future is a wrapper for a ItemProperties promised by a client call.
type ItemProperties_Future struct{ *capnp.Future }

func (f ItemProperties_Future) Struct() (ItemProperties, error) {
	p, err := f.Future.Ptr()
	return ItemProperties(p.Struct()), err
}

type GMTrainee capnp.Struct

// GMTrainee_TypeID is the unique identifier for the type GMTrainee.
const GMTrainee_TypeID = 0xbadafe4de857fe71

func NewGMTrainee(s *capnp.Segment) (GMTrainee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GMTrainee(st), err
}

func NewRootGMTrainee(s *capnp.Segment) (GMTrainee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GMTrainee(st), err
}

func ReadRootGMTrainee(msg *capnp.Message) (GMTrainee, error) {
	root, err := msg.Root()
	return GMTrainee(root.Struct()), err
}

func (s GMTrainee) String() string {
	str, _ := text.Marshal(0xbadafe4de857fe71, capnp.Struct(s))
	return str
}

func (s GMTrainee) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMTrainee) DecodeFromPtr(p capnp.Ptr) GMTrainee {
	return GMTrainee(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMTrainee) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMTrainee) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMTrainee) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMTrainee) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMTrainee) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMTrainee) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMTrainee) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMTrainee) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMTrainee) Skills() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s GMTrainee) HasSkills() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMTrainee) SetSkills(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSkills sets the skills field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s GMTrainee) NewSkills(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GMTrainee_List is a list of GMTrainee.
type GMTrainee_List = capnp.StructList[GMTrainee]

// NewGMTrainee creates a new list of GMTrainee.
func NewGMTrainee_List(s *capnp.Segment, sz int32) (GMTrainee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GMTrainee](l), err
}

// GMTrainee_Future is a wrapper for a GMTrainee promised by a client call.
type GMTrainee_Future struct{ *capnp.Future }

func (f GMTrainee_Future) Struct() (GMTrainee, error) {
	p, err := f.Future.Ptr()
	return GMTrainee(p.Struct()), err
}

type GMTrainEnd capnp.Struct

// GMTrainEnd_TypeID is the unique identifier for the type GMTrainEnd.
const GMTrainEnd_TypeID = 0xb72ecd96799cf7e7

func NewGMTrainEnd(s *capnp.Segment) (GMTrainEnd, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMTrainEnd(st), err
}

func NewRootGMTrainEnd(s *capnp.Segment) (GMTrainEnd, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMTrainEnd(st), err
}

func ReadRootGMTrainEnd(msg *capnp.Message) (GMTrainEnd, error) {
	root, err := msg.Root()
	return GMTrainEnd(root.Struct()), err
}

func (s GMTrainEnd) String() string {
	str, _ := text.Marshal(0xb72ecd96799cf7e7, capnp.Struct(s))
	return str
}

func (s GMTrainEnd) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMTrainEnd) DecodeFromPtr(p capnp.Ptr) GMTrainEnd {
	return GMTrainEnd(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMTrainEnd) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMTrainEnd) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMTrainEnd) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMTrainEnd) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMTrainEnd) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMTrainEnd) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMTrainEnd) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMTrainEnd) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// GMTrainEnd_List is a list of GMTrainEnd.
type GMTrainEnd_List = capnp.StructList[GMTrainEnd]

// NewGMTrainEnd creates a new list of GMTrainEnd.
func NewGMTrainEnd_List(s *capnp.Segment, sz int32) (GMTrainEnd_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GMTrainEnd](l), err
}

// GMTrainEnd_Future is a wrapper for a GMTrainEnd promised by a client call.
type GMTrainEnd_Future struct{ *capnp.Future }

func (f GMTrainEnd_Future) Struct() (GMTrainEnd, error) {
	p, err := f.Future.Ptr()
	return GMTrainEnd(p.Struct()), err
}

type GMSkillChange capnp.Struct

// GMSkillChange_TypeID is the unique identifier for the type GMSkillChange.
const GMSkillChange_TypeID = 0xb0d71e9e634d1529

func NewGMSkillChange(s *capnp.Segment) (GMSkillChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GMSkillChange(st), err
}

func NewRootGMSkillChange(s *capnp.Segment) (GMSkillChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GMSkillChange(st), err
}

func ReadRootGMSkillChange(msg *capnp.Message) (GMSkillChange, error) {
	root, err := msg.Root()
	return GMSkillChange(root.Struct()), err
}

func (s GMSkillChange) String() string {
	str, _ := text.Marshal(0xb0d71e9e634d1529, capnp.Struct(s))
	return str
}

func (s GMSkillChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMSkillChange) DecodeFromPtr(p capnp.Ptr) GMSkillChange {
	return GMSkillChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMSkillChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMSkillChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMSkillChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMSkillChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMSkillChange) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMSkillChange) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMSkillChange) Skillbank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMSkillChange) SetSkillbank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMSkillChange) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMSkillChange) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// GMSkillChange_List is a list of GMSkillChange.
type GMSkillChange_List = capnp.StructList[GMSkillChange]

// NewGMSkillChange creates a new list of GMSkillChange.
func NewGMSkillChange_List(s *capnp.Segment, sz int32) (GMSkillChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[GMSkillChange](l), err
}

// GMSkillChange_Future is a wrapper for a GMSkillChange promised by a client call.
type GMSkillChange_Future struct{ *capnp.Future }

func (f GMSkillChange_Future) Struct() (GMSkillChange, error) {
	p, err := f.Future.Ptr()
	return GMSkillChange(p.Struct()), err
}

type ConsentResponse capnp.Struct

// ConsentResponse_TypeID is the unique identifier for the type ConsentResponse.
const ConsentResponse_TypeID = 0xb52cdc5b0d00dfde

func NewConsentResponse(s *capnp.Segment) (ConsentResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ConsentResponse(st), err
}

func NewRootConsentResponse(s *capnp.Segment) (ConsentResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ConsentResponse(st), err
}

func ReadRootConsentResponse(msg *capnp.Message) (ConsentResponse, error) {
	root, err := msg.Root()
	return ConsentResponse(root.Struct()), err
}

func (s ConsentResponse) String() string {
	str, _ := text.Marshal(0xb52cdc5b0d00dfde, capnp.Struct(s))
	return str
}

func (s ConsentResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ConsentResponse) DecodeFromPtr(p capnp.Ptr) ConsentResponse {
	return ConsentResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ConsentResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ConsentResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ConsentResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ConsentResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ConsentResponse) Grantname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ConsentResponse) HasGrantname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ConsentResponse) GrantnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetGrantname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ConsentResponse) Ownername() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ConsentResponse) HasOwnername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ConsentResponse) OwnernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetOwnername(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ConsentResponse) Permission() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ConsentResponse) SetPermission(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ConsentResponse) Zonename() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ConsentResponse) HasZonename() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ConsentResponse) ZonenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetZonename(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ConsentResponse_List is a list of ConsentResponse.
type ConsentResponse_List = capnp.StructList[ConsentResponse]

// NewConsentResponse creates a new list of ConsentResponse.
func NewConsentResponse_List(s *capnp.Segment, sz int32) (ConsentResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[ConsentResponse](l), err
}

// ConsentResponse_Future is a wrapper for a ConsentResponse promised by a client call.
type ConsentResponse_Future struct{ *capnp.Future }

func (f ConsentResponse_Future) Struct() (ConsentResponse, error) {
	p, err := f.Future.Ptr()
	return ConsentResponse(p.Struct()), err
}

type NameGeneration capnp.Struct

// NameGeneration_TypeID is the unique identifier for the type NameGeneration.
const NameGeneration_TypeID = 0xa984e49365524f14

func NewNameGeneration(s *capnp.Segment) (NameGeneration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameGeneration(st), err
}

func NewRootNameGeneration(s *capnp.Segment) (NameGeneration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameGeneration(st), err
}

func ReadRootNameGeneration(msg *capnp.Message) (NameGeneration, error) {
	root, err := msg.Root()
	return NameGeneration(root.Struct()), err
}

func (s NameGeneration) String() string {
	str, _ := text.Marshal(0xa984e49365524f14, capnp.Struct(s))
	return str
}

func (s NameGeneration) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NameGeneration) DecodeFromPtr(p capnp.Ptr) NameGeneration {
	return NameGeneration(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NameGeneration) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NameGeneration) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NameGeneration) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NameGeneration) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NameGeneration) Race() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NameGeneration) SetRace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NameGeneration) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NameGeneration) SetGender(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s NameGeneration) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NameGeneration) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NameGeneration) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NameGeneration) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// NameGeneration_List is a list of NameGeneration.
type NameGeneration_List = capnp.StructList[NameGeneration]

// NewNameGeneration creates a new list of NameGeneration.
func NewNameGeneration_List(s *capnp.Segment, sz int32) (NameGeneration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NameGeneration](l), err
}

// NameGeneration_Future is a wrapper for a NameGeneration promised by a client call.
type NameGeneration_Future struct{ *capnp.Future }

func (f NameGeneration_Future) Struct() (NameGeneration, error) {
	p, err := f.Future.Ptr()
	return NameGeneration(p.Struct()), err
}

type NameApprove capnp.Struct

// NameApprove_TypeID is the unique identifier for the type NameApprove.
const NameApprove_TypeID = 0xb8b4b6c6e1e52417

func NewNameApprove(s *capnp.Segment) (NameApprove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameApprove(st), err
}

func NewRootNameApprove(s *capnp.Segment) (NameApprove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameApprove(st), err
}

func ReadRootNameApprove(msg *capnp.Message) (NameApprove, error) {
	root, err := msg.Root()
	return NameApprove(root.Struct()), err
}

func (s NameApprove) String() string {
	str, _ := text.Marshal(0xb8b4b6c6e1e52417, capnp.Struct(s))
	return str
}

func (s NameApprove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NameApprove) DecodeFromPtr(p capnp.Ptr) NameApprove {
	return NameApprove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NameApprove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NameApprove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NameApprove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NameApprove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NameApprove) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NameApprove) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NameApprove) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NameApprove) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NameApprove) Race() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NameApprove) SetRace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NameApprove) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NameApprove) SetGender(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// NameApprove_List is a list of NameApprove.
type NameApprove_List = capnp.StructList[NameApprove]

// NewNameApprove creates a new list of NameApprove.
func NewNameApprove_List(s *capnp.Segment, sz int32) (NameApprove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NameApprove](l), err
}

// NameApprove_Future is a wrapper for a NameApprove promised by a client call.
type NameApprove_Future struct{ *capnp.Future }

func (f NameApprove_Future) Struct() (NameApprove, error) {
	p, err := f.Future.Ptr()
	return NameApprove(p.Struct()), err
}

type CharCreate capnp.Struct

// CharCreate_TypeID is the unique identifier for the type CharCreate.
const CharCreate_TypeID = 0xca688fde6bcd4bbd

func NewCharCreate(s *capnp.Segment) (CharCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return CharCreate(st), err
}

func NewRootCharCreate(s *capnp.Segment) (CharCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return CharCreate(st), err
}

func ReadRootCharCreate(msg *capnp.Message) (CharCreate, error) {
	root, err := msg.Root()
	return CharCreate(root.Struct()), err
}

func (s CharCreate) String() string {
	str, _ := text.Marshal(0xca688fde6bcd4bbd, capnp.Struct(s))
	return str
}

func (s CharCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CharCreate) DecodeFromPtr(p capnp.Ptr) CharCreate {
	return CharCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CharCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CharCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CharCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CharCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CharCreate) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CharCreate) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CharCreate) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CharCreate) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CharCreate) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CharCreate) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CharCreate) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CharCreate) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s CharCreate) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s CharCreate) SetGender(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s CharCreate) Race() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s CharCreate) SetRace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s CharCreate) StartZone() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s CharCreate) SetStartZone(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s CharCreate) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s CharCreate) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s CharCreate) Deity() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s CharCreate) SetDeity(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s CharCreate) Str() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s CharCreate) SetStr(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s CharCreate) Sta() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s CharCreate) SetSta(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s CharCreate) Agi() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s CharCreate) SetAgi(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s CharCreate) Dex() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s CharCreate) SetDex(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s CharCreate) Wis() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s CharCreate) SetWis(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s CharCreate) Intel() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s CharCreate) SetIntel(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s CharCreate) Cha() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s CharCreate) SetCha(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s CharCreate) Face() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s CharCreate) SetFace(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s CharCreate) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s CharCreate) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s CharCreate) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s CharCreate) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s CharCreate) Tutorial() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s CharCreate) SetTutorial(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s CharCreate) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CharCreate) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CharCreate) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CharCreate) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CharCreate_List is a list of CharCreate.
type CharCreate_List = capnp.StructList[CharCreate]

// NewCharCreate creates a new list of CharCreate.
func NewCharCreate_List(s *capnp.Segment, sz int32) (CharCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[CharCreate](l), err
}

// CharCreate_Future is a wrapper for a CharCreate promised by a client call.
type CharCreate_Future struct{ *capnp.Future }

func (f CharCreate_Future) Struct() (CharCreate, error) {
	p, err := f.Future.Ptr()
	return CharCreate(p.Struct()), err
}

type AAArray capnp.Struct

// AAArray_TypeID is the unique identifier for the type AAArray.
const AAArray_TypeID = 0xc5d32cc234a53620

func NewAAArray(s *capnp.Segment) (AAArray, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAArray(st), err
}

func NewRootAAArray(s *capnp.Segment) (AAArray, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAArray(st), err
}

func ReadRootAAArray(msg *capnp.Message) (AAArray, error) {
	root, err := msg.Root()
	return AAArray(root.Struct()), err
}

func (s AAArray) String() string {
	str, _ := text.Marshal(0xc5d32cc234a53620, capnp.Struct(s))
	return str
}

func (s AAArray) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAArray) DecodeFromPtr(p capnp.Ptr) AAArray {
	return AAArray(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAArray) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAArray) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAArray) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAArray) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAArray) Aa() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAArray) SetAa(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAArray) Value() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAArray) SetValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AAArray_List is a list of AAArray.
type AAArray_List = capnp.StructList[AAArray]

// NewAAArray creates a new list of AAArray.
func NewAAArray_List(s *capnp.Segment, sz int32) (AAArray_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AAArray](l), err
}

// AAArray_Future is a wrapper for a AAArray promised by a client call.
type AAArray_Future struct{ *capnp.Future }

func (f AAArray_Future) Struct() (AAArray, error) {
	p, err := f.Future.Ptr()
	return AAArray(p.Struct()), err
}

type Disciplines capnp.Struct

// Disciplines_TypeID is the unique identifier for the type Disciplines.
const Disciplines_TypeID = 0xdb811264e672b627

func NewDisciplines(s *capnp.Segment) (Disciplines, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Disciplines(st), err
}

func NewRootDisciplines(s *capnp.Segment) (Disciplines, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Disciplines(st), err
}

func ReadRootDisciplines(msg *capnp.Message) (Disciplines, error) {
	root, err := msg.Root()
	return Disciplines(root.Struct()), err
}

func (s Disciplines) String() string {
	str, _ := text.Marshal(0xdb811264e672b627, capnp.Struct(s))
	return str
}

func (s Disciplines) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Disciplines) DecodeFromPtr(p capnp.Ptr) Disciplines {
	return Disciplines(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Disciplines) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Disciplines) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Disciplines) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Disciplines) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Disciplines) Values() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Disciplines) HasValues() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Disciplines) SetValues(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValues sets the values field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Disciplines) NewValues(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Disciplines_List is a list of Disciplines.
type Disciplines_List = capnp.StructList[Disciplines]

// NewDisciplines creates a new list of Disciplines.
func NewDisciplines_List(s *capnp.Segment, sz int32) (Disciplines_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Disciplines](l), err
}

// Disciplines_Future is a wrapper for a Disciplines promised by a client call.
type Disciplines_Future struct{ *capnp.Future }

func (f Disciplines_Future) Struct() (Disciplines, error) {
	p, err := f.Future.Ptr()
	return Disciplines(p.Struct()), err
}

type Tribute capnp.Struct

// Tribute_TypeID is the unique identifier for the type Tribute.
const Tribute_TypeID = 0xe02474ef23d4f2bc

func NewTribute(s *capnp.Segment) (Tribute, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Tribute(st), err
}

func NewRootTribute(s *capnp.Segment) (Tribute, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Tribute(st), err
}

func ReadRootTribute(msg *capnp.Message) (Tribute, error) {
	root, err := msg.Root()
	return Tribute(root.Struct()), err
}

func (s Tribute) String() string {
	str, _ := text.Marshal(0xe02474ef23d4f2bc, capnp.Struct(s))
	return str
}

func (s Tribute) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tribute) DecodeFromPtr(p capnp.Ptr) Tribute {
	return Tribute(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tribute) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tribute) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tribute) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tribute) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tribute) Tribute() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Tribute) SetTribute(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Tribute) Tier() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Tribute) SetTier(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Tribute_List is a list of Tribute.
type Tribute_List = capnp.StructList[Tribute]

// NewTribute creates a new list of Tribute.
func NewTribute_List(s *capnp.Segment, sz int32) (Tribute_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Tribute](l), err
}

// Tribute_Future is a wrapper for a Tribute promised by a client call.
type Tribute_Future struct{ *capnp.Future }

func (f Tribute_Future) Struct() (Tribute, error) {
	p, err := f.Future.Ptr()
	return Tribute(p.Struct()), err
}

type BandolierItem capnp.Struct

// BandolierItem_TypeID is the unique identifier for the type BandolierItem.
const BandolierItem_TypeID = 0xd7e327183a76a4f8

func NewBandolierItem(s *capnp.Segment) (BandolierItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierItem(st), err
}

func NewRootBandolierItem(s *capnp.Segment) (BandolierItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierItem(st), err
}

func ReadRootBandolierItem(msg *capnp.Message) (BandolierItem, error) {
	root, err := msg.Root()
	return BandolierItem(root.Struct()), err
}

func (s BandolierItem) String() string {
	str, _ := text.Marshal(0xd7e327183a76a4f8, capnp.Struct(s))
	return str
}

func (s BandolierItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierItem) DecodeFromPtr(p capnp.Ptr) BandolierItem {
	return BandolierItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierItem) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierItem) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierItem) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierItem) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BandolierItem) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BandolierItem) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BandolierItem) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BandolierItem) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BandolierItem_List is a list of BandolierItem.
type BandolierItem_List = capnp.StructList[BandolierItem]

// NewBandolierItem creates a new list of BandolierItem.
func NewBandolierItem_List(s *capnp.Segment, sz int32) (BandolierItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BandolierItem](l), err
}

// BandolierItem_Future is a wrapper for a BandolierItem promised by a client call.
type BandolierItem_Future struct{ *capnp.Future }

func (f BandolierItem_Future) Struct() (BandolierItem, error) {
	p, err := f.Future.Ptr()
	return BandolierItem(p.Struct()), err
}

type Bandolier capnp.Struct

// Bandolier_TypeID is the unique identifier for the type Bandolier.
const Bandolier_TypeID = 0x81fa11546e952c02

func NewBandolier(s *capnp.Segment) (Bandolier, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Bandolier(st), err
}

func NewRootBandolier(s *capnp.Segment) (Bandolier, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Bandolier(st), err
}

func ReadRootBandolier(msg *capnp.Message) (Bandolier, error) {
	root, err := msg.Root()
	return Bandolier(root.Struct()), err
}

func (s Bandolier) String() string {
	str, _ := text.Marshal(0x81fa11546e952c02, capnp.Struct(s))
	return str
}

func (s Bandolier) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bandolier) DecodeFromPtr(p capnp.Ptr) Bandolier {
	return Bandolier(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bandolier) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bandolier) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bandolier) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bandolier) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bandolier) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Bandolier) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Bandolier) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Bandolier) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Bandolier) Items() (BandolierItem_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return BandolierItem_List(p.List()), err
}

func (s Bandolier) HasItems() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Bandolier) SetItems(v BandolierItem_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated BandolierItem_List, preferring placement in s's segment.
func (s Bandolier) NewItems(n int32) (BandolierItem_List, error) {
	l, err := NewBandolierItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return BandolierItem_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Bandolier_List is a list of Bandolier.
type Bandolier_List = capnp.StructList[Bandolier]

// NewBandolier creates a new list of Bandolier.
func NewBandolier_List(s *capnp.Segment, sz int32) (Bandolier_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Bandolier](l), err
}

// Bandolier_Future is a wrapper for a Bandolier promised by a client call.
type Bandolier_Future struct{ *capnp.Future }

func (f Bandolier_Future) Struct() (Bandolier, error) {
	p, err := f.Future.Ptr()
	return Bandolier(p.Struct()), err
}

type PotionBeltItem capnp.Struct

// PotionBeltItem_TypeID is the unique identifier for the type PotionBeltItem.
const PotionBeltItem_TypeID = 0xdcfcab864c34a056

func NewPotionBeltItem(s *capnp.Segment) (PotionBeltItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PotionBeltItem(st), err
}

func NewRootPotionBeltItem(s *capnp.Segment) (PotionBeltItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PotionBeltItem(st), err
}

func ReadRootPotionBeltItem(msg *capnp.Message) (PotionBeltItem, error) {
	root, err := msg.Root()
	return PotionBeltItem(root.Struct()), err
}

func (s PotionBeltItem) String() string {
	str, _ := text.Marshal(0xdcfcab864c34a056, capnp.Struct(s))
	return str
}

func (s PotionBeltItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PotionBeltItem) DecodeFromPtr(p capnp.Ptr) PotionBeltItem {
	return PotionBeltItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PotionBeltItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PotionBeltItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PotionBeltItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PotionBeltItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PotionBeltItem) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PotionBeltItem) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PotionBeltItem) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PotionBeltItem) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PotionBeltItem) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PotionBeltItem) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PotionBeltItem) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PotionBeltItem) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PotionBeltItem_List is a list of PotionBeltItem.
type PotionBeltItem_List = capnp.StructList[PotionBeltItem]

// NewPotionBeltItem creates a new list of PotionBeltItem.
func NewPotionBeltItem_List(s *capnp.Segment, sz int32) (PotionBeltItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PotionBeltItem](l), err
}

// PotionBeltItem_Future is a wrapper for a PotionBeltItem promised by a client call.
type PotionBeltItem_Future struct{ *capnp.Future }

func (f PotionBeltItem_Future) Struct() (PotionBeltItem, error) {
	p, err := f.Future.Ptr()
	return PotionBeltItem(p.Struct()), err
}

type PotionBelt capnp.Struct

// PotionBelt_TypeID is the unique identifier for the type PotionBelt.
const PotionBelt_TypeID = 0xce55ffdae06f694d

func NewPotionBelt(s *capnp.Segment) (PotionBelt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PotionBelt(st), err
}

func NewRootPotionBelt(s *capnp.Segment) (PotionBelt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PotionBelt(st), err
}

func ReadRootPotionBelt(msg *capnp.Message) (PotionBelt, error) {
	root, err := msg.Root()
	return PotionBelt(root.Struct()), err
}

func (s PotionBelt) String() string {
	str, _ := text.Marshal(0xce55ffdae06f694d, capnp.Struct(s))
	return str
}

func (s PotionBelt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PotionBelt) DecodeFromPtr(p capnp.Ptr) PotionBelt {
	return PotionBelt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PotionBelt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PotionBelt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PotionBelt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PotionBelt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PotionBelt) Items() (PotionBeltItem_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PotionBeltItem_List(p.List()), err
}

func (s PotionBelt) HasItems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PotionBelt) SetItems(v PotionBeltItem_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated PotionBeltItem_List, preferring placement in s's segment.
func (s PotionBelt) NewItems(n int32) (PotionBeltItem_List, error) {
	l, err := NewPotionBeltItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PotionBeltItem_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PotionBelt_List is a list of PotionBelt.
type PotionBelt_List = capnp.StructList[PotionBelt]

// NewPotionBelt creates a new list of PotionBelt.
func NewPotionBelt_List(s *capnp.Segment, sz int32) (PotionBelt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PotionBelt](l), err
}

// PotionBelt_Future is a wrapper for a PotionBelt promised by a client call.
type PotionBelt_Future struct{ *capnp.Future }

func (f PotionBelt_Future) Struct() (PotionBelt, error) {
	p, err := f.Future.Ptr()
	return PotionBelt(p.Struct()), err
}

type StringList capnp.Struct

// StringList_TypeID is the unique identifier for the type StringList.
const StringList_TypeID = 0xfc766ac7f0d6e4f5

func NewStringList(s *capnp.Segment) (StringList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringList(st), err
}

func NewRootStringList(s *capnp.Segment) (StringList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringList(st), err
}

func ReadRootStringList(msg *capnp.Message) (StringList, error) {
	root, err := msg.Root()
	return StringList(root.Struct()), err
}

func (s StringList) String() string {
	str, _ := text.Marshal(0xfc766ac7f0d6e4f5, capnp.Struct(s))
	return str
}

func (s StringList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StringList) DecodeFromPtr(p capnp.Ptr) StringList {
	return StringList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StringList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StringList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StringList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StringList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StringList) Str() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StringList) HasStr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StringList) StrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StringList) SetStr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StringList_List is a list of StringList.
type StringList_List = capnp.StructList[StringList]

// NewStringList creates a new list of StringList.
func NewStringList_List(s *capnp.Segment, sz int32) (StringList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StringList](l), err
}

// StringList_Future is a wrapper for a StringList promised by a client call.
type StringList_Future struct{ *capnp.Future }

func (f StringList_Future) Struct() (StringList, error) {
	p, err := f.Future.Ptr()
	return StringList(p.Struct()), err
}

type GroupLeadershipAA capnp.Struct

// GroupLeadershipAA_TypeID is the unique identifier for the type GroupLeadershipAA.
const GroupLeadershipAA_TypeID = 0xf418cd61a8543b3c

func NewGroupLeadershipAA(s *capnp.Segment) (GroupLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return GroupLeadershipAA(st), err
}

func NewRootGroupLeadershipAA(s *capnp.Segment) (GroupLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return GroupLeadershipAA(st), err
}

func ReadRootGroupLeadershipAA(msg *capnp.Message) (GroupLeadershipAA, error) {
	root, err := msg.Root()
	return GroupLeadershipAA(root.Struct()), err
}

func (s GroupLeadershipAA) String() string {
	str, _ := text.Marshal(0xf418cd61a8543b3c, capnp.Struct(s))
	return str
}

func (s GroupLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupLeadershipAA) DecodeFromPtr(p capnp.Ptr) GroupLeadershipAA {
	return GroupLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupLeadershipAA) GroupAaMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupLeadershipAA) SetGroupAaMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupLeadershipAA) GroupAanpcHealth() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GroupLeadershipAA) SetGroupAanpcHealth(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GroupLeadershipAA) GroupAaDelegateMainAssist() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GroupLeadershipAA) SetGroupAaDelegateMainAssist(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GroupLeadershipAA) GroupAaDelegateMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GroupLeadershipAA) SetGroupAaDelegateMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GroupLeadershipAA) GroupAa4() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GroupLeadershipAA) SetGroupAa4(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GroupLeadershipAA) GroupAa5() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GroupLeadershipAA) SetGroupAa5(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s GroupLeadershipAA) GroupAaInspectBuffs() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GroupLeadershipAA) SetGroupAaInspectBuffs(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GroupLeadershipAA) GroupAa7() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GroupLeadershipAA) SetGroupAa7(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GroupLeadershipAA) GroupAaSpellAwareness() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GroupLeadershipAA) SetGroupAaSpellAwareness(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s GroupLeadershipAA) GroupAaOffenseEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s GroupLeadershipAA) SetGroupAaOffenseEnhancement(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s GroupLeadershipAA) GroupAaManaEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s GroupLeadershipAA) SetGroupAaManaEnhancement(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s GroupLeadershipAA) SetGroupAaHealthEnhancement(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthRegeneration() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s GroupLeadershipAA) SetGroupAaHealthRegeneration(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s GroupLeadershipAA) GroupAaFindPathToPc() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s GroupLeadershipAA) SetGroupAaFindPathToPc(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthOfTargetsTarget() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s GroupLeadershipAA) SetGroupAaHealthOfTargetsTarget(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s GroupLeadershipAA) GroupAa15() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s GroupLeadershipAA) SetGroupAa15(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// GroupLeadershipAA_List is a list of GroupLeadershipAA.
type GroupLeadershipAA_List = capnp.StructList[GroupLeadershipAA]

// NewGroupLeadershipAA creates a new list of GroupLeadershipAA.
func NewGroupLeadershipAA_List(s *capnp.Segment, sz int32) (GroupLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[GroupLeadershipAA](l), err
}

// GroupLeadershipAA_Future is a wrapper for a GroupLeadershipAA promised by a client call.
type GroupLeadershipAA_Future struct{ *capnp.Future }

func (f GroupLeadershipAA_Future) Struct() (GroupLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return GroupLeadershipAA(p.Struct()), err
}

type RaidLeadershipAA capnp.Struct

// RaidLeadershipAA_TypeID is the unique identifier for the type RaidLeadershipAA.
const RaidLeadershipAA_TypeID = 0xbf5a2cc18c663351

func NewRaidLeadershipAA(s *capnp.Segment) (RaidLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return RaidLeadershipAA(st), err
}

func NewRootRaidLeadershipAA(s *capnp.Segment) (RaidLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return RaidLeadershipAA(st), err
}

func ReadRootRaidLeadershipAA(msg *capnp.Message) (RaidLeadershipAA, error) {
	root, err := msg.Root()
	return RaidLeadershipAA(root.Struct()), err
}

func (s RaidLeadershipAA) String() string {
	str, _ := text.Marshal(0xbf5a2cc18c663351, capnp.Struct(s))
	return str
}

func (s RaidLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidLeadershipAA) DecodeFromPtr(p capnp.Ptr) RaidLeadershipAA {
	return RaidLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidLeadershipAA) RaidAaMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidLeadershipAA) SetRaidAaMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidLeadershipAA) RaidAanpcHealth() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidLeadershipAA) SetRaidAanpcHealth(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidLeadershipAA) RaidAaDelegateMainAssist() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidLeadershipAA) SetRaidAaDelegateMainAssist(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RaidLeadershipAA) RaidAaDelegateMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RaidLeadershipAA) SetRaidAaDelegateMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RaidLeadershipAA) RaidAa4() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RaidLeadershipAA) SetRaidAa4(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RaidLeadershipAA) RaidAa5() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s RaidLeadershipAA) SetRaidAa5(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s RaidLeadershipAA) RaidAa6() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s RaidLeadershipAA) SetRaidAa6(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s RaidLeadershipAA) RaidAaSpellAwareness() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s RaidLeadershipAA) SetRaidAaSpellAwareness(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s RaidLeadershipAA) RaidAaOffenseEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s RaidLeadershipAA) SetRaidAaOffenseEnhancement(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s RaidLeadershipAA) RaidAaManaEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s RaidLeadershipAA) SetRaidAaManaEnhancement(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s RaidLeadershipAA) SetRaidAaHealthEnhancement(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthRegeneration() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s RaidLeadershipAA) SetRaidAaHealthRegeneration(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s RaidLeadershipAA) RaidAaFindPathToPc() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s RaidLeadershipAA) SetRaidAaFindPathToPc(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthOfTargetsTarget() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s RaidLeadershipAA) SetRaidAaHealthOfTargetsTarget(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s RaidLeadershipAA) RaidAa14() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s RaidLeadershipAA) SetRaidAa14(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s RaidLeadershipAA) RaidAa15() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s RaidLeadershipAA) SetRaidAa15(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// RaidLeadershipAA_List is a list of RaidLeadershipAA.
type RaidLeadershipAA_List = capnp.StructList[RaidLeadershipAA]

// NewRaidLeadershipAA creates a new list of RaidLeadershipAA.
func NewRaidLeadershipAA_List(s *capnp.Segment, sz int32) (RaidLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[RaidLeadershipAA](l), err
}

// RaidLeadershipAA_Future is a wrapper for a RaidLeadershipAA promised by a client call.
type RaidLeadershipAA_Future struct{ *capnp.Future }

func (f RaidLeadershipAA_Future) Struct() (RaidLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return RaidLeadershipAA(p.Struct()), err
}

type LeadershipAA capnp.Struct

// LeadershipAA_TypeID is the unique identifier for the type LeadershipAA.
const LeadershipAA_TypeID = 0xe5dcc4b159c002f4

func NewLeadershipAA(s *capnp.Segment) (LeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LeadershipAA(st), err
}

func NewRootLeadershipAA(s *capnp.Segment) (LeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LeadershipAA(st), err
}

func ReadRootLeadershipAA(msg *capnp.Message) (LeadershipAA, error) {
	root, err := msg.Root()
	return LeadershipAA(root.Struct()), err
}

func (s LeadershipAA) String() string {
	str, _ := text.Marshal(0xe5dcc4b159c002f4, capnp.Struct(s))
	return str
}

func (s LeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadershipAA) DecodeFromPtr(p capnp.Ptr) LeadershipAA {
	return LeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadershipAA) Group() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GroupLeadershipAA(p.Struct()), err
}

func (s LeadershipAA) HasGroup() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LeadershipAA) SetGroup(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGroup sets the group field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s LeadershipAA) NewGroup() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LeadershipAA) Raid() (RaidLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RaidLeadershipAA(p.Struct()), err
}

func (s LeadershipAA) HasRaid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LeadershipAA) SetRaid(v RaidLeadershipAA) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewRaid sets the raid field to a newly
// allocated RaidLeadershipAA struct, preferring placement in s's segment.
func (s LeadershipAA) NewRaid() (RaidLeadershipAA, error) {
	ss, err := NewRaidLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return RaidLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// LeadershipAA_List is a list of LeadershipAA.
type LeadershipAA_List = capnp.StructList[LeadershipAA]

// NewLeadershipAA creates a new list of LeadershipAA.
func NewLeadershipAA_List(s *capnp.Segment, sz int32) (LeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[LeadershipAA](l), err
}

// LeadershipAA_Future is a wrapper for a LeadershipAA promised by a client call.
type LeadershipAA_Future struct{ *capnp.Future }

func (f LeadershipAA_Future) Struct() (LeadershipAA, error) {
	p, err := f.Future.Ptr()
	return LeadershipAA(p.Struct()), err
}
func (p LeadershipAA_Future) Group() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(0, nil)}
}
func (p LeadershipAA_Future) Raid() RaidLeadershipAA_Future {
	return RaidLeadershipAA_Future{Future: p.Future.Field(1, nil)}
}

type Bind capnp.Struct

// Bind_TypeID is the unique identifier for the type Bind.
const Bind_TypeID = 0xf1e3711cde8fa324

func NewBind(s *capnp.Segment) (Bind, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Bind(st), err
}

func NewRootBind(s *capnp.Segment) (Bind, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Bind(st), err
}

func ReadRootBind(msg *capnp.Message) (Bind, error) {
	root, err := msg.Root()
	return Bind(root.Struct()), err
}

func (s Bind) String() string {
	str, _ := text.Marshal(0xf1e3711cde8fa324, capnp.Struct(s))
	return str
}

func (s Bind) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bind) DecodeFromPtr(p capnp.Ptr) Bind {
	return Bind(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bind) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bind) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bind) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bind) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bind) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Bind) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Bind) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Bind) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Bind) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Bind) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Bind) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Bind) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Bind) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Bind) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

// Bind_List is a list of Bind.
type Bind_List = capnp.StructList[Bind]

// NewBind creates a new list of Bind.
func NewBind_List(s *capnp.Segment, sz int32) (Bind_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Bind](l), err
}

// Bind_Future is a wrapper for a Bind promised by a client call.
type Bind_Future struct{ *capnp.Future }

func (f Bind_Future) Struct() (Bind, error) {
	p, err := f.Future.Ptr()
	return Bind(p.Struct()), err
}

type PVPStatsEntry capnp.Struct

// PVPStatsEntry_TypeID is the unique identifier for the type PVPStatsEntry.
const PVPStatsEntry_TypeID = 0x9ca1849ea58c8bdb

func NewPVPStatsEntry(s *capnp.Segment) (PVPStatsEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PVPStatsEntry(st), err
}

func NewRootPVPStatsEntry(s *capnp.Segment) (PVPStatsEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PVPStatsEntry(st), err
}

func ReadRootPVPStatsEntry(msg *capnp.Message) (PVPStatsEntry, error) {
	root, err := msg.Root()
	return PVPStatsEntry(root.Struct()), err
}

func (s PVPStatsEntry) String() string {
	str, _ := text.Marshal(0x9ca1849ea58c8bdb, capnp.Struct(s))
	return str
}

func (s PVPStatsEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PVPStatsEntry) DecodeFromPtr(p capnp.Ptr) PVPStatsEntry {
	return PVPStatsEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PVPStatsEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PVPStatsEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PVPStatsEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PVPStatsEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PVPStatsEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PVPStatsEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PVPStatsEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PVPStatsEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PVPStatsEntry) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PVPStatsEntry) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PVPStatsEntry) Race() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PVPStatsEntry) SetRace(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PVPStatsEntry) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PVPStatsEntry) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PVPStatsEntry) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PVPStatsEntry) SetZone(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PVPStatsEntry) Time() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PVPStatsEntry) SetTime(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PVPStatsEntry) Points() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s PVPStatsEntry) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// PVPStatsEntry_List is a list of PVPStatsEntry.
type PVPStatsEntry_List = capnp.StructList[PVPStatsEntry]

// NewPVPStatsEntry creates a new list of PVPStatsEntry.
func NewPVPStatsEntry_List(s *capnp.Segment, sz int32) (PVPStatsEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[PVPStatsEntry](l), err
}

// PVPStatsEntry_Future is a wrapper for a PVPStatsEntry promised by a client call.
type PVPStatsEntry_Future struct{ *capnp.Future }

func (f PVPStatsEntry_Future) Struct() (PVPStatsEntry, error) {
	p, err := f.Future.Ptr()
	return PVPStatsEntry(p.Struct()), err
}

type ClientTarget capnp.Struct

// ClientTarget_TypeID is the unique identifier for the type ClientTarget.
const ClientTarget_TypeID = 0xa1914008041e7c44

func NewClientTarget(s *capnp.Segment) (ClientTarget, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClientTarget(st), err
}

func NewRootClientTarget(s *capnp.Segment) (ClientTarget, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClientTarget(st), err
}

func ReadRootClientTarget(msg *capnp.Message) (ClientTarget, error) {
	root, err := msg.Root()
	return ClientTarget(root.Struct()), err
}

func (s ClientTarget) String() string {
	str, _ := text.Marshal(0xa1914008041e7c44, capnp.Struct(s))
	return str
}

func (s ClientTarget) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientTarget) DecodeFromPtr(p capnp.Ptr) ClientTarget {
	return ClientTarget(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientTarget) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientTarget) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientTarget) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientTarget) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientTarget) NewTarget() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClientTarget) SetNewTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ClientTarget_List is a list of ClientTarget.
type ClientTarget_List = capnp.StructList[ClientTarget]

// NewClientTarget creates a new list of ClientTarget.
func NewClientTarget_List(s *capnp.Segment, sz int32) (ClientTarget_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ClientTarget](l), err
}

// ClientTarget_Future is a wrapper for a ClientTarget promised by a client call.
type ClientTarget_Future struct{ *capnp.Future }

func (f ClientTarget_Future) Struct() (ClientTarget, error) {
	p, err := f.Future.Ptr()
	return ClientTarget(p.Struct()), err
}

type PetCommand capnp.Struct

// PetCommand_TypeID is the unique identifier for the type PetCommand.
const PetCommand_TypeID = 0xa3f9826addd42d0d

func NewPetCommand(s *capnp.Segment) (PetCommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PetCommand(st), err
}

func NewRootPetCommand(s *capnp.Segment) (PetCommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PetCommand(st), err
}

func ReadRootPetCommand(msg *capnp.Message) (PetCommand, error) {
	root, err := msg.Root()
	return PetCommand(root.Struct()), err
}

func (s PetCommand) String() string {
	str, _ := text.Marshal(0xa3f9826addd42d0d, capnp.Struct(s))
	return str
}

func (s PetCommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PetCommand) DecodeFromPtr(p capnp.Ptr) PetCommand {
	return PetCommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PetCommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PetCommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PetCommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PetCommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PetCommand) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PetCommand) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PetCommand) Target() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PetCommand) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// PetCommand_List is a list of PetCommand.
type PetCommand_List = capnp.StructList[PetCommand]

// NewPetCommand creates a new list of PetCommand.
func NewPetCommand_List(s *capnp.Segment, sz int32) (PetCommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[PetCommand](l), err
}

// PetCommand_Future is a wrapper for a PetCommand promised by a client call.
type PetCommand_Future struct{ *capnp.Future }

func (f PetCommand_Future) Struct() (PetCommand, error) {
	p, err := f.Future.Ptr()
	return PetCommand(p.Struct()), err
}

type DeleteSpawn capnp.Struct

// DeleteSpawn_TypeID is the unique identifier for the type DeleteSpawn.
const DeleteSpawn_TypeID = 0xaf015f84859d0028

func NewDeleteSpawn(s *capnp.Segment) (DeleteSpawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpawn(st), err
}

func NewRootDeleteSpawn(s *capnp.Segment) (DeleteSpawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpawn(st), err
}

func ReadRootDeleteSpawn(msg *capnp.Message) (DeleteSpawn, error) {
	root, err := msg.Root()
	return DeleteSpawn(root.Struct()), err
}

func (s DeleteSpawn) String() string {
	str, _ := text.Marshal(0xaf015f84859d0028, capnp.Struct(s))
	return str
}

func (s DeleteSpawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteSpawn) DecodeFromPtr(p capnp.Ptr) DeleteSpawn {
	return DeleteSpawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteSpawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteSpawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteSpawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteSpawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteSpawn) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteSpawn) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// DeleteSpawn_List is a list of DeleteSpawn.
type DeleteSpawn_List = capnp.StructList[DeleteSpawn]

// NewDeleteSpawn creates a new list of DeleteSpawn.
func NewDeleteSpawn_List(s *capnp.Segment, sz int32) (DeleteSpawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DeleteSpawn](l), err
}

// DeleteSpawn_Future is a wrapper for a DeleteSpawn promised by a client call.
type DeleteSpawn_Future struct{ *capnp.Future }

func (f DeleteSpawn_Future) Struct() (DeleteSpawn, error) {
	p, err := f.Future.Ptr()
	return DeleteSpawn(p.Struct()), err
}

type ChannelMessage capnp.Struct

// ChannelMessage_TypeID is the unique identifier for the type ChannelMessage.
const ChannelMessage_TypeID = 0xa23c8c68e3798bb0

func NewChannelMessage(s *capnp.Segment) (ChannelMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return ChannelMessage(st), err
}

func NewRootChannelMessage(s *capnp.Segment) (ChannelMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return ChannelMessage(st), err
}

func ReadRootChannelMessage(msg *capnp.Message) (ChannelMessage, error) {
	root, err := msg.Root()
	return ChannelMessage(root.Struct()), err
}

func (s ChannelMessage) String() string {
	str, _ := text.Marshal(0xa23c8c68e3798bb0, capnp.Struct(s))
	return str
}

func (s ChannelMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChannelMessage) DecodeFromPtr(p capnp.Ptr) ChannelMessage {
	return ChannelMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChannelMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChannelMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChannelMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChannelMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChannelMessage) Targetname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChannelMessage) HasTargetname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChannelMessage) TargetnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetTargetname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ChannelMessage) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ChannelMessage) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ChannelMessage) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ChannelMessage) Language() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ChannelMessage) SetLanguage(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ChannelMessage) ChanNum() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ChannelMessage) SetChanNum(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ChannelMessage) SkillInLanguage() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ChannelMessage) SetSkillInLanguage(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ChannelMessage) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ChannelMessage) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ChannelMessage) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ChannelMessage_List is a list of ChannelMessage.
type ChannelMessage_List = capnp.StructList[ChannelMessage]

// NewChannelMessage creates a new list of ChannelMessage.
func NewChannelMessage_List(s *capnp.Segment, sz int32) (ChannelMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[ChannelMessage](l), err
}

// ChannelMessage_Future is a wrapper for a ChannelMessage promised by a client call.
type ChannelMessage_Future struct{ *capnp.Future }

func (f ChannelMessage_Future) Struct() (ChannelMessage, error) {
	p, err := f.Future.Ptr()
	return ChannelMessage(p.Struct()), err
}

type SpecialMesg capnp.Struct

// SpecialMesg_TypeID is the unique identifier for the type SpecialMesg.
const SpecialMesg_TypeID = 0xe0b0d21d1219b48c

func NewSpecialMesg(s *capnp.Segment) (SpecialMesg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SpecialMesg(st), err
}

func NewRootSpecialMesg(s *capnp.Segment) (SpecialMesg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SpecialMesg(st), err
}

func ReadRootSpecialMesg(msg *capnp.Message) (SpecialMesg, error) {
	root, err := msg.Root()
	return SpecialMesg(root.Struct()), err
}

func (s SpecialMesg) String() string {
	str, _ := text.Marshal(0xe0b0d21d1219b48c, capnp.Struct(s))
	return str
}

func (s SpecialMesg) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpecialMesg) DecodeFromPtr(p capnp.Ptr) SpecialMesg {
	return SpecialMesg(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpecialMesg) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpecialMesg) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpecialMesg) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpecialMesg) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpecialMesg) Header() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SpecialMesg) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpecialMesg) HeaderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetHeader(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SpecialMesg) MsgType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpecialMesg) SetMsgType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpecialMesg) TargetSpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpecialMesg) SetTargetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpecialMesg) Sayer() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SpecialMesg) HasSayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SpecialMesg) SayerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetSayer(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SpecialMesg) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SpecialMesg) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SpecialMesg) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// SpecialMesg_List is a list of SpecialMesg.
type SpecialMesg_List = capnp.StructList[SpecialMesg]

// NewSpecialMesg creates a new list of SpecialMesg.
func NewSpecialMesg_List(s *capnp.Segment, sz int32) (SpecialMesg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[SpecialMesg](l), err
}

// SpecialMesg_Future is a wrapper for a SpecialMesg promised by a client call.
type SpecialMesg_Future struct{ *capnp.Future }

func (f SpecialMesg_Future) Struct() (SpecialMesg, error) {
	p, err := f.Future.Ptr()
	return SpecialMesg(p.Struct()), err
}

type WearChange capnp.Struct

// WearChange_TypeID is the unique identifier for the type WearChange.
const WearChange_TypeID = 0x9fd8d08daae7794b

func NewWearChange(s *capnp.Segment) (WearChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return WearChange(st), err
}

func NewRootWearChange(s *capnp.Segment) (WearChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return WearChange(st), err
}

func ReadRootWearChange(msg *capnp.Message) (WearChange, error) {
	root, err := msg.Root()
	return WearChange(root.Struct()), err
}

func (s WearChange) String() string {
	str, _ := text.Marshal(0x9fd8d08daae7794b, capnp.Struct(s))
	return str
}

func (s WearChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WearChange) DecodeFromPtr(p capnp.Ptr) WearChange {
	return WearChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WearChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WearChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WearChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WearChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WearChange) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WearChange) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WearChange) Material() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WearChange) SetMaterial(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WearChange) Color() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WearChange) SetColor(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WearChange) WearSlotId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WearChange) SetWearSlotId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// WearChange_List is a list of WearChange.
type WearChange_List = capnp.StructList[WearChange]

// NewWearChange creates a new list of WearChange.
func NewWearChange_List(s *capnp.Segment, sz int32) (WearChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[WearChange](l), err
}

// WearChange_Future is a wrapper for a WearChange promised by a client call.
type WearChange_Future struct{ *capnp.Future }

func (f WearChange_Future) Struct() (WearChange, error) {
	p, err := f.Future.Ptr()
	return WearChange(p.Struct()), err
}

type BindWound capnp.Struct

// BindWound_TypeID is the unique identifier for the type BindWound.
const BindWound_TypeID = 0x9d8709f225285c2e

func NewBindWound(s *capnp.Segment) (BindWound, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BindWound(st), err
}

func NewRootBindWound(s *capnp.Segment) (BindWound, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BindWound(st), err
}

func ReadRootBindWound(msg *capnp.Message) (BindWound, error) {
	root, err := msg.Root()
	return BindWound(root.Struct()), err
}

func (s BindWound) String() string {
	str, _ := text.Marshal(0x9d8709f225285c2e, capnp.Struct(s))
	return str
}

func (s BindWound) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BindWound) DecodeFromPtr(p capnp.Ptr) BindWound {
	return BindWound(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BindWound) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BindWound) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BindWound) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BindWound) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BindWound) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BindWound) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BindWound) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BindWound) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BindWound_List is a list of BindWound.
type BindWound_List = capnp.StructList[BindWound]

// NewBindWound creates a new list of BindWound.
func NewBindWound_List(s *capnp.Segment, sz int32) (BindWound_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BindWound](l), err
}

// BindWound_Future is a wrapper for a BindWound promised by a client call.
type BindWound_Future struct{ *capnp.Future }

func (f BindWound_Future) Struct() (BindWound, error) {
	p, err := f.Future.Ptr()
	return BindWound(p.Struct()), err
}

type Animation capnp.Struct

// Animation_TypeID is the unique identifier for the type Animation.
const Animation_TypeID = 0xfe931b1705a8e8a8

func NewAnimation(s *capnp.Segment) (Animation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Animation(st), err
}

func NewRootAnimation(s *capnp.Segment) (Animation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Animation(st), err
}

func ReadRootAnimation(msg *capnp.Message) (Animation, error) {
	root, err := msg.Root()
	return Animation(root.Struct()), err
}

func (s Animation) String() string {
	str, _ := text.Marshal(0xfe931b1705a8e8a8, capnp.Struct(s))
	return str
}

func (s Animation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Animation) DecodeFromPtr(p capnp.Ptr) Animation {
	return Animation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Animation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Animation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Animation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Animation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Animation) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Animation) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Animation) Speed() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Animation) SetSpeed(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Animation) Action() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Animation) SetAction(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Animation_List is a list of Animation.
type Animation_List = capnp.StructList[Animation]

// NewAnimation creates a new list of Animation.
func NewAnimation_List(s *capnp.Segment, sz int32) (Animation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Animation](l), err
}

// Animation_Future is a wrapper for a Animation promised by a client call.
type Animation_Future struct{ *capnp.Future }

func (f Animation_Future) Struct() (Animation, error) {
	p, err := f.Future.Ptr()
	return Animation(p.Struct()), err
}

type Action capnp.Struct

// Action_TypeID is the unique identifier for the type Action.
const Action_TypeID = 0x95ca47192b7d5b43

func NewAction(s *capnp.Segment) (Action, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return Action(st), err
}

func NewRootAction(s *capnp.Segment) (Action, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return Action(st), err
}

func ReadRootAction(msg *capnp.Message) (Action, error) {
	root, err := msg.Root()
	return Action(root.Struct()), err
}

func (s Action) String() string {
	str, _ := text.Marshal(0x95ca47192b7d5b43, capnp.Struct(s))
	return str
}

func (s Action) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Action) DecodeFromPtr(p capnp.Ptr) Action {
	return Action(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Action) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Action) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Action) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Action) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Action) Target() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Action) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Action) Source() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Action) SetSource(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Action) Level() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Action) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Action) InstrumentMod() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Action) SetInstrumentMod(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Action) Force() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Action) SetForce(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Action) HitHeading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Action) SetHitHeading(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Action) HitPitch() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Action) SetHitPitch(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Action) Type() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Action) SetType(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Action) Spell() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Action) SetSpell(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Action) SpellLevel() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Action) SetSpellLevel(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Action) EffectFlag() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Action) SetEffectFlag(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

// Action_List is a list of Action.
type Action_List = capnp.StructList[Action]

// NewAction creates a new list of Action.
func NewAction_List(s *capnp.Segment, sz int32) (Action_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0}, sz)
	return capnp.StructList[Action](l), err
}

// Action_Future is a wrapper for a Action promised by a client call.
type Action_Future struct{ *capnp.Future }

func (f Action_Future) Struct() (Action, error) {
	p, err := f.Future.Ptr()
	return Action(p.Struct()), err
}

type CombatDamage capnp.Struct

// CombatDamage_TypeID is the unique identifier for the type CombatDamage.
const CombatDamage_TypeID = 0xbcba10c194c8e450

func NewCombatDamage(s *capnp.Segment) (CombatDamage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return CombatDamage(st), err
}

func NewRootCombatDamage(s *capnp.Segment) (CombatDamage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return CombatDamage(st), err
}

func ReadRootCombatDamage(msg *capnp.Message) (CombatDamage, error) {
	root, err := msg.Root()
	return CombatDamage(root.Struct()), err
}

func (s CombatDamage) String() string {
	str, _ := text.Marshal(0xbcba10c194c8e450, capnp.Struct(s))
	return str
}

func (s CombatDamage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CombatDamage) DecodeFromPtr(p capnp.Ptr) CombatDamage {
	return CombatDamage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CombatDamage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CombatDamage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CombatDamage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CombatDamage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CombatDamage) Target() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CombatDamage) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CombatDamage) Source() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CombatDamage) SetSource(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CombatDamage) Type() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CombatDamage) SetType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CombatDamage) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CombatDamage) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s CombatDamage) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s CombatDamage) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s CombatDamage) Force() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s CombatDamage) SetForce(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s CombatDamage) HitHeading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s CombatDamage) SetHitHeading(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s CombatDamage) HitPitch() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s CombatDamage) SetHitPitch(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

// CombatDamage_List is a list of CombatDamage.
type CombatDamage_List = capnp.StructList[CombatDamage]

// NewCombatDamage creates a new list of CombatDamage.
func NewCombatDamage_List(s *capnp.Segment, sz int32) (CombatDamage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[CombatDamage](l), err
}

// CombatDamage_Future is a wrapper for a CombatDamage promised by a client call.
type CombatDamage_Future struct{ *capnp.Future }

func (f CombatDamage_Future) Struct() (CombatDamage, error) {
	p, err := f.Future.Ptr()
	return CombatDamage(p.Struct()), err
}

type Consider capnp.Struct

// Consider_TypeID is the unique identifier for the type Consider.
const Consider_TypeID = 0xecbd91cdb76d6a28

func NewConsider(s *capnp.Segment) (Consider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Consider(st), err
}

func NewRootConsider(s *capnp.Segment) (Consider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Consider(st), err
}

func ReadRootConsider(msg *capnp.Message) (Consider, error) {
	root, err := msg.Root()
	return Consider(root.Struct()), err
}

func (s Consider) String() string {
	str, _ := text.Marshal(0xecbd91cdb76d6a28, capnp.Struct(s))
	return str
}

func (s Consider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consider) DecodeFromPtr(p capnp.Ptr) Consider {
	return Consider(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consider) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consider) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consider) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consider) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consider) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Consider) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Consider) Targetid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Consider) SetTargetid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Consider) Faction() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Consider) SetFaction(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Consider) Level() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Consider) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Consider) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Consider) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Consider) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Consider) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Consider) Pvpcon() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Consider) SetPvpcon(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Consider_List is a list of Consider.
type Consider_List = capnp.StructList[Consider]

// NewConsider creates a new list of Consider.
func NewConsider_List(s *capnp.Segment, sz int32) (Consider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[Consider](l), err
}

// Consider_Future is a wrapper for a Consider promised by a client call.
type Consider_Future struct{ *capnp.Future }

func (f Consider_Future) Struct() (Consider, error) {
	p, err := f.Future.Ptr()
	return Consider(p.Struct()), err
}

type Death capnp.Struct

// Death_TypeID is the unique identifier for the type Death.
const Death_TypeID = 0xae8dab9506472d1d

func NewDeath(s *capnp.Segment) (Death, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Death(st), err
}

func NewRootDeath(s *capnp.Segment) (Death, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Death(st), err
}

func ReadRootDeath(msg *capnp.Message) (Death, error) {
	root, err := msg.Root()
	return Death(root.Struct()), err
}

func (s Death) String() string {
	str, _ := text.Marshal(0xae8dab9506472d1d, capnp.Struct(s))
	return str
}

func (s Death) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Death) DecodeFromPtr(p capnp.Ptr) Death {
	return Death(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Death) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Death) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Death) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Death) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Death) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Death) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Death) KillerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Death) SetKillerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Death) Corpseid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Death) SetCorpseid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Death) AttackSkill() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Death) SetAttackSkill(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Death) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Death) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Death) Bindzoneid() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Death) SetBindzoneid(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Death) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Death) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Death_List is a list of Death.
type Death_List = capnp.StructList[Death]

// NewDeath creates a new list of Death.
func NewDeath_List(s *capnp.Segment, sz int32) (Death_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[Death](l), err
}

// Death_Future is a wrapper for a Death promised by a client call.
type Death_Future struct{ *capnp.Future }

func (f Death_Future) Struct() (Death, error) {
	p, err := f.Future.Ptr()
	return Death(p.Struct()), err
}

type BecomeCorpse capnp.Struct

// BecomeCorpse_TypeID is the unique identifier for the type BecomeCorpse.
const BecomeCorpse_TypeID = 0xd5ad818067cc16e7

func NewBecomeCorpse(s *capnp.Segment) (BecomeCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BecomeCorpse(st), err
}

func NewRootBecomeCorpse(s *capnp.Segment) (BecomeCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BecomeCorpse(st), err
}

func ReadRootBecomeCorpse(msg *capnp.Message) (BecomeCorpse, error) {
	root, err := msg.Root()
	return BecomeCorpse(root.Struct()), err
}

func (s BecomeCorpse) String() string {
	str, _ := text.Marshal(0xd5ad818067cc16e7, capnp.Struct(s))
	return str
}

func (s BecomeCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeCorpse) DecodeFromPtr(p capnp.Ptr) BecomeCorpse {
	return BecomeCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeCorpse) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeCorpse) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeCorpse) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s BecomeCorpse) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s BecomeCorpse) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s BecomeCorpse) SetX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s BecomeCorpse) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s BecomeCorpse) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// BecomeCorpse_List is a list of BecomeCorpse.
type BecomeCorpse_List = capnp.StructList[BecomeCorpse]

// NewBecomeCorpse creates a new list of BecomeCorpse.
func NewBecomeCorpse_List(s *capnp.Segment, sz int32) (BecomeCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[BecomeCorpse](l), err
}

// BecomeCorpse_Future is a wrapper for a BecomeCorpse promised by a client call.
type BecomeCorpse_Future struct{ *capnp.Future }

func (f BecomeCorpse_Future) Struct() (BecomeCorpse, error) {
	p, err := f.Future.Ptr()
	return BecomeCorpse(p.Struct()), err
}

type EntityPositionUpdateBase capnp.Struct

// EntityPositionUpdateBase_TypeID is the unique identifier for the type EntityPositionUpdateBase.
const EntityPositionUpdateBase_TypeID = 0xa51c9c2dfa1a6cca

func NewEntityPositionUpdateBase(s *capnp.Segment) (EntityPositionUpdateBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return EntityPositionUpdateBase(st), err
}

func NewRootEntityPositionUpdateBase(s *capnp.Segment) (EntityPositionUpdateBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return EntityPositionUpdateBase(st), err
}

func ReadRootEntityPositionUpdateBase(msg *capnp.Message) (EntityPositionUpdateBase, error) {
	root, err := msg.Root()
	return EntityPositionUpdateBase(root.Struct()), err
}

func (s EntityPositionUpdateBase) String() string {
	str, _ := text.Marshal(0xa51c9c2dfa1a6cca, capnp.Struct(s))
	return str
}

func (s EntityPositionUpdateBase) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityPositionUpdateBase) DecodeFromPtr(p capnp.Ptr) EntityPositionUpdateBase {
	return EntityPositionUpdateBase(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityPositionUpdateBase) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityPositionUpdateBase) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityPositionUpdateBase) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityPositionUpdateBase) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityPositionUpdateBase) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EntityPositionUpdateBase) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EntityPositionUpdateBase) Position() (Vector3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector3(p.Struct()), err
}

func (s EntityPositionUpdateBase) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityPositionUpdateBase) SetPosition(v Vector3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector3 struct, preferring placement in s's segment.
func (s EntityPositionUpdateBase) NewPosition() (Vector3, error) {
	ss, err := NewVector3(capnp.Struct(s).Segment())
	if err != nil {
		return Vector3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntityPositionUpdateBase) Velocity() (Vector3, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Vector3(p.Struct()), err
}

func (s EntityPositionUpdateBase) HasVelocity() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EntityPositionUpdateBase) SetVelocity(v Vector3) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewVelocity sets the velocity field to a newly
// allocated Vector3 struct, preferring placement in s's segment.
func (s EntityPositionUpdateBase) NewVelocity() (Vector3, error) {
	ss, err := NewVector3(capnp.Struct(s).Segment())
	if err != nil {
		return Vector3{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntityPositionUpdateBase) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s EntityPositionUpdateBase) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s EntityPositionUpdateBase) Animation() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s EntityPositionUpdateBase) HasAnimation() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s EntityPositionUpdateBase) AnimationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s EntityPositionUpdateBase) SetAnimation(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// EntityPositionUpdateBase_List is a list of EntityPositionUpdateBase.
type EntityPositionUpdateBase_List = capnp.StructList[EntityPositionUpdateBase]

// NewEntityPositionUpdateBase creates a new list of EntityPositionUpdateBase.
func NewEntityPositionUpdateBase_List(s *capnp.Segment, sz int32) (EntityPositionUpdateBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[EntityPositionUpdateBase](l), err
}

// EntityPositionUpdateBase_Future is a wrapper for a EntityPositionUpdateBase promised by a client call.
type EntityPositionUpdateBase_Future struct{ *capnp.Future }

func (f EntityPositionUpdateBase_Future) Struct() (EntityPositionUpdateBase, error) {
	p, err := f.Future.Ptr()
	return EntityPositionUpdateBase(p.Struct()), err
}
func (p EntityPositionUpdateBase_Future) Position() Vector3_Future {
	return Vector3_Future{Future: p.Future.Field(0, nil)}
}
func (p EntityPositionUpdateBase_Future) Velocity() Vector3_Future {
	return Vector3_Future{Future: p.Future.Field(1, nil)}
}

type EntityPositionUpdate capnp.Struct

// EntityPositionUpdate_TypeID is the unique identifier for the type EntityPositionUpdate.
const EntityPositionUpdate_TypeID = 0x93bff6bb5eecbc2a

func NewEntityPositionUpdate(s *capnp.Segment) (EntityPositionUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EntityPositionUpdate(st), err
}

func NewRootEntityPositionUpdate(s *capnp.Segment) (EntityPositionUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EntityPositionUpdate(st), err
}

func ReadRootEntityPositionUpdate(msg *capnp.Message) (EntityPositionUpdate, error) {
	root, err := msg.Root()
	return EntityPositionUpdate(root.Struct()), err
}

func (s EntityPositionUpdate) String() string {
	str, _ := text.Marshal(0x93bff6bb5eecbc2a, capnp.Struct(s))
	return str
}

func (s EntityPositionUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityPositionUpdate) DecodeFromPtr(p capnp.Ptr) EntityPositionUpdate {
	return EntityPositionUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityPositionUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityPositionUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityPositionUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityPositionUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityPositionUpdate) Updates() (EntityPositionUpdateBase_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EntityPositionUpdateBase_List(p.List()), err
}

func (s EntityPositionUpdate) HasUpdates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityPositionUpdate) SetUpdates(v EntityPositionUpdateBase_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUpdates sets the updates field to a newly
// allocated EntityPositionUpdateBase_List, preferring placement in s's segment.
func (s EntityPositionUpdate) NewUpdates(n int32) (EntityPositionUpdateBase_List, error) {
	l, err := NewEntityPositionUpdateBase_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EntityPositionUpdateBase_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// EntityPositionUpdate_List is a list of EntityPositionUpdate.
type EntityPositionUpdate_List = capnp.StructList[EntityPositionUpdate]

// NewEntityPositionUpdate creates a new list of EntityPositionUpdate.
func NewEntityPositionUpdate_List(s *capnp.Segment, sz int32) (EntityPositionUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EntityPositionUpdate](l), err
}

// EntityPositionUpdate_Future is a wrapper for a EntityPositionUpdate promised by a client call.
type EntityPositionUpdate_Future struct{ *capnp.Future }

func (f EntityPositionUpdate_Future) Struct() (EntityPositionUpdate, error) {
	p, err := f.Future.Ptr()
	return EntityPositionUpdate(p.Struct()), err
}

type EntityAnimation capnp.Struct

// EntityAnimation_TypeID is the unique identifier for the type EntityAnimation.
const EntityAnimation_TypeID = 0xdf6175fbc7aa8195

func NewEntityAnimation(s *capnp.Segment) (EntityAnimation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EntityAnimation(st), err
}

func NewRootEntityAnimation(s *capnp.Segment) (EntityAnimation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EntityAnimation(st), err
}

func ReadRootEntityAnimation(msg *capnp.Message) (EntityAnimation, error) {
	root, err := msg.Root()
	return EntityAnimation(root.Struct()), err
}

func (s EntityAnimation) String() string {
	str, _ := text.Marshal(0xdf6175fbc7aa8195, capnp.Struct(s))
	return str
}

func (s EntityAnimation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityAnimation) DecodeFromPtr(p capnp.Ptr) EntityAnimation {
	return EntityAnimation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityAnimation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityAnimation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityAnimation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityAnimation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityAnimation) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EntityAnimation) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EntityAnimation) Animation() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EntityAnimation) HasAnimation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityAnimation) AnimationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EntityAnimation) SetAnimation(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EntityAnimation_List is a list of EntityAnimation.
type EntityAnimation_List = capnp.StructList[EntityAnimation]

// NewEntityAnimation creates a new list of EntityAnimation.
func NewEntityAnimation_List(s *capnp.Segment, sz int32) (EntityAnimation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[EntityAnimation](l), err
}

// EntityAnimation_Future is a wrapper for a EntityAnimation promised by a client call.
type EntityAnimation_Future struct{ *capnp.Future }

func (f EntityAnimation_Future) Struct() (EntityAnimation, error) {
	p, err := f.Future.Ptr()
	return EntityAnimation(p.Struct()), err
}

type ClientPositionUpdate capnp.Struct

// ClientPositionUpdate_TypeID is the unique identifier for the type ClientPositionUpdate.
const ClientPositionUpdate_TypeID = 0x971031099b134c74

func NewClientPositionUpdate(s *capnp.Segment) (ClientPositionUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClientPositionUpdate(st), err
}

func NewRootClientPositionUpdate(s *capnp.Segment) (ClientPositionUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClientPositionUpdate(st), err
}

func ReadRootClientPositionUpdate(msg *capnp.Message) (ClientPositionUpdate, error) {
	root, err := msg.Root()
	return ClientPositionUpdate(root.Struct()), err
}

func (s ClientPositionUpdate) String() string {
	str, _ := text.Marshal(0x971031099b134c74, capnp.Struct(s))
	return str
}

func (s ClientPositionUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientPositionUpdate) DecodeFromPtr(p capnp.Ptr) ClientPositionUpdate {
	return ClientPositionUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientPositionUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientPositionUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientPositionUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientPositionUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientPositionUpdate) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClientPositionUpdate) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClientPositionUpdate) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ClientPositionUpdate) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ClientPositionUpdate) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ClientPositionUpdate) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ClientPositionUpdate) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ClientPositionUpdate) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ClientPositionUpdate) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ClientPositionUpdate) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ClientPositionUpdate) Animation() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientPositionUpdate) HasAnimation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientPositionUpdate) AnimationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientPositionUpdate) SetAnimation(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClientPositionUpdate_List is a list of ClientPositionUpdate.
type ClientPositionUpdate_List = capnp.StructList[ClientPositionUpdate]

// NewClientPositionUpdate creates a new list of ClientPositionUpdate.
func NewClientPositionUpdate_List(s *capnp.Segment, sz int32) (ClientPositionUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ClientPositionUpdate](l), err
}

// ClientPositionUpdate_Future is a wrapper for a ClientPositionUpdate promised by a client call.
type ClientPositionUpdate_Future struct{ *capnp.Future }

func (f ClientPositionUpdate_Future) Struct() (ClientPositionUpdate, error) {
	p, err := f.Future.Ptr()
	return ClientPositionUpdate(p.Struct()), err
}

type SpawnHPUpdate capnp.Struct

// SpawnHPUpdate_TypeID is the unique identifier for the type SpawnHPUpdate.
const SpawnHPUpdate_TypeID = 0xfa4d6a8cac27c611

func NewSpawnHPUpdate(s *capnp.Segment) (SpawnHPUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnHPUpdate(st), err
}

func NewRootSpawnHPUpdate(s *capnp.Segment) (SpawnHPUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnHPUpdate(st), err
}

func ReadRootSpawnHPUpdate(msg *capnp.Message) (SpawnHPUpdate, error) {
	root, err := msg.Root()
	return SpawnHPUpdate(root.Struct()), err
}

func (s SpawnHPUpdate) String() string {
	str, _ := text.Marshal(0xfa4d6a8cac27c611, capnp.Struct(s))
	return str
}

func (s SpawnHPUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnHPUpdate) DecodeFromPtr(p capnp.Ptr) SpawnHPUpdate {
	return SpawnHPUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnHPUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnHPUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnHPUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnHPUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnHPUpdate) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnHPUpdate) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnHPUpdate) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnHPUpdate) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpawnHPUpdate) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpawnHPUpdate) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpawnHPUpdate_List is a list of SpawnHPUpdate.
type SpawnHPUpdate_List = capnp.StructList[SpawnHPUpdate]

// NewSpawnHPUpdate creates a new list of SpawnHPUpdate.
func NewSpawnHPUpdate_List(s *capnp.Segment, sz int32) (SpawnHPUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[SpawnHPUpdate](l), err
}

// SpawnHPUpdate_Future is a wrapper for a SpawnHPUpdate promised by a client call.
type SpawnHPUpdate_Future struct{ *capnp.Future }

func (f SpawnHPUpdate_Future) Struct() (SpawnHPUpdate, error) {
	p, err := f.Future.Ptr()
	return SpawnHPUpdate(p.Struct()), err
}

type SpawnHPUpdate2 capnp.Struct

// SpawnHPUpdate2_TypeID is the unique identifier for the type SpawnHPUpdate2.
const SpawnHPUpdate2_TypeID = 0xc512b3f8727629d7

func NewSpawnHPUpdate2(s *capnp.Segment) (SpawnHPUpdate2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SpawnHPUpdate2(st), err
}

func NewRootSpawnHPUpdate2(s *capnp.Segment) (SpawnHPUpdate2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SpawnHPUpdate2(st), err
}

func ReadRootSpawnHPUpdate2(msg *capnp.Message) (SpawnHPUpdate2, error) {
	root, err := msg.Root()
	return SpawnHPUpdate2(root.Struct()), err
}

func (s SpawnHPUpdate2) String() string {
	str, _ := text.Marshal(0xc512b3f8727629d7, capnp.Struct(s))
	return str
}

func (s SpawnHPUpdate2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnHPUpdate2) DecodeFromPtr(p capnp.Ptr) SpawnHPUpdate2 {
	return SpawnHPUpdate2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnHPUpdate2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnHPUpdate2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnHPUpdate2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnHPUpdate2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnHPUpdate2) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnHPUpdate2) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnHPUpdate2) Hp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnHPUpdate2) SetHp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SpawnHPUpdate2_List is a list of SpawnHPUpdate2.
type SpawnHPUpdate2_List = capnp.StructList[SpawnHPUpdate2]

// NewSpawnHPUpdate2 creates a new list of SpawnHPUpdate2.
func NewSpawnHPUpdate2_List(s *capnp.Segment, sz int32) (SpawnHPUpdate2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SpawnHPUpdate2](l), err
}

// SpawnHPUpdate2_Future is a wrapper for a SpawnHPUpdate2 promised by a client call.
type SpawnHPUpdate2_Future struct{ *capnp.Future }

func (f SpawnHPUpdate2_Future) Struct() (SpawnHPUpdate2, error) {
	p, err := f.Future.Ptr()
	return SpawnHPUpdate2(p.Struct()), err
}

type Stamina capnp.Struct

// Stamina_TypeID is the unique identifier for the type Stamina.
const Stamina_TypeID = 0xdb651f04f1f0488d

func NewStamina(s *capnp.Segment) (Stamina, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stamina(st), err
}

func NewRootStamina(s *capnp.Segment) (Stamina, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stamina(st), err
}

func ReadRootStamina(msg *capnp.Message) (Stamina, error) {
	root, err := msg.Root()
	return Stamina(root.Struct()), err
}

func (s Stamina) String() string {
	str, _ := text.Marshal(0xdb651f04f1f0488d, capnp.Struct(s))
	return str
}

func (s Stamina) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stamina) DecodeFromPtr(p capnp.Ptr) Stamina {
	return Stamina(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stamina) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stamina) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stamina) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stamina) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stamina) Food() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Stamina) SetFood(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Stamina) Water() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Stamina) SetWater(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Stamina_List is a list of Stamina.
type Stamina_List = capnp.StructList[Stamina]

// NewStamina creates a new list of Stamina.
func NewStamina_List(s *capnp.Segment, sz int32) (Stamina_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Stamina](l), err
}

// Stamina_Future is a wrapper for a Stamina promised by a client call.
type Stamina_Future struct{ *capnp.Future }

func (f Stamina_Future) Struct() (Stamina, error) {
	p, err := f.Future.Ptr()
	return Stamina(p.Struct()), err
}

type LevelUpdate capnp.Struct

// LevelUpdate_TypeID is the unique identifier for the type LevelUpdate.
const LevelUpdate_TypeID = 0xe72726225a9f8ca8

func NewLevelUpdate(s *capnp.Segment) (LevelUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LevelUpdate(st), err
}

func NewRootLevelUpdate(s *capnp.Segment) (LevelUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LevelUpdate(st), err
}

func ReadRootLevelUpdate(msg *capnp.Message) (LevelUpdate, error) {
	root, err := msg.Root()
	return LevelUpdate(root.Struct()), err
}

func (s LevelUpdate) String() string {
	str, _ := text.Marshal(0xe72726225a9f8ca8, capnp.Struct(s))
	return str
}

func (s LevelUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LevelUpdate) DecodeFromPtr(p capnp.Ptr) LevelUpdate {
	return LevelUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LevelUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LevelUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LevelUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LevelUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LevelUpdate) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LevelUpdate) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LevelUpdate) LevelOld() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LevelUpdate) SetLevelOld(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LevelUpdate) Exp() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LevelUpdate) SetExp(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// LevelUpdate_List is a list of LevelUpdate.
type LevelUpdate_List = capnp.StructList[LevelUpdate]

// NewLevelUpdate creates a new list of LevelUpdate.
func NewLevelUpdate_List(s *capnp.Segment, sz int32) (LevelUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LevelUpdate](l), err
}

// LevelUpdate_Future is a wrapper for a LevelUpdate promised by a client call.
type LevelUpdate_Future struct{ *capnp.Future }

func (f LevelUpdate_Future) Struct() (LevelUpdate, error) {
	p, err := f.Future.Ptr()
	return LevelUpdate(p.Struct()), err
}

type ExpUpdate capnp.Struct

// ExpUpdate_TypeID is the unique identifier for the type ExpUpdate.
const ExpUpdate_TypeID = 0x80545037b7a4173b

func NewExpUpdate(s *capnp.Segment) (ExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpUpdate(st), err
}

func NewRootExpUpdate(s *capnp.Segment) (ExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpUpdate(st), err
}

func ReadRootExpUpdate(msg *capnp.Message) (ExpUpdate, error) {
	root, err := msg.Root()
	return ExpUpdate(root.Struct()), err
}

func (s ExpUpdate) String() string {
	str, _ := text.Marshal(0x80545037b7a4173b, capnp.Struct(s))
	return str
}

func (s ExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpUpdate) DecodeFromPtr(p capnp.Ptr) ExpUpdate {
	return ExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpUpdate) Exp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpUpdate) SetExp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpUpdate) Aaxp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpUpdate) SetAaxp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ExpUpdate_List is a list of ExpUpdate.
type ExpUpdate_List = capnp.StructList[ExpUpdate]

// NewExpUpdate creates a new list of ExpUpdate.
func NewExpUpdate_List(s *capnp.Segment, sz int32) (ExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExpUpdate](l), err
}

// ExpUpdate_Future is a wrapper for a ExpUpdate promised by a client call.
type ExpUpdate_Future struct{ *capnp.Future }

func (f ExpUpdate_Future) Struct() (ExpUpdate, error) {
	p, err := f.Future.Ptr()
	return ExpUpdate(p.Struct()), err
}

type BulkItemPacket capnp.Struct

// BulkItemPacket_TypeID is the unique identifier for the type BulkItemPacket.
const BulkItemPacket_TypeID = 0xfb1ba86c82d8b9b1

func NewBulkItemPacket(s *capnp.Segment) (BulkItemPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BulkItemPacket(st), err
}

func NewRootBulkItemPacket(s *capnp.Segment) (BulkItemPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BulkItemPacket(st), err
}

func ReadRootBulkItemPacket(msg *capnp.Message) (BulkItemPacket, error) {
	root, err := msg.Root()
	return BulkItemPacket(root.Struct()), err
}

func (s BulkItemPacket) String() string {
	str, _ := text.Marshal(0xfb1ba86c82d8b9b1, capnp.Struct(s))
	return str
}

func (s BulkItemPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BulkItemPacket) DecodeFromPtr(p capnp.Ptr) BulkItemPacket {
	return BulkItemPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BulkItemPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BulkItemPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BulkItemPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BulkItemPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BulkItemPacket) SerializedItem() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BulkItemPacket) HasSerializedItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BulkItemPacket) SerializedItemBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BulkItemPacket) SetSerializedItem(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BulkItemPacket_List is a list of BulkItemPacket.
type BulkItemPacket_List = capnp.StructList[BulkItemPacket]

// NewBulkItemPacket creates a new list of BulkItemPacket.
func NewBulkItemPacket_List(s *capnp.Segment, sz int32) (BulkItemPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BulkItemPacket](l), err
}

// BulkItemPacket_Future is a wrapper for a BulkItemPacket promised by a client call.
type BulkItemPacket_Future struct{ *capnp.Future }

func (f BulkItemPacket_Future) Struct() (BulkItemPacket, error) {
	p, err := f.Future.Ptr()
	return BulkItemPacket(p.Struct()), err
}

type Consume capnp.Struct

// Consume_TypeID is the unique identifier for the type Consume.
const Consume_TypeID = 0xc7587c9f16a1fc72

func NewConsume(s *capnp.Segment) (Consume, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Consume(st), err
}

func NewRootConsume(s *capnp.Segment) (Consume, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Consume(st), err
}

func ReadRootConsume(msg *capnp.Message) (Consume, error) {
	root, err := msg.Root()
	return Consume(root.Struct()), err
}

func (s Consume) String() string {
	str, _ := text.Marshal(0xc7587c9f16a1fc72, capnp.Struct(s))
	return str
}

func (s Consume) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consume) DecodeFromPtr(p capnp.Ptr) Consume {
	return Consume(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consume) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consume) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consume) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consume) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consume) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Consume) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Consume) AutoConsumed() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Consume) SetAutoConsumed(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Consume) Type() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Consume) SetType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Consume_List is a list of Consume.
type Consume_List = capnp.StructList[Consume]

// NewConsume creates a new list of Consume.
func NewConsume_List(s *capnp.Segment, sz int32) (Consume_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Consume](l), err
}

// Consume_Future is a wrapper for a Consume promised by a client call.
type Consume_Future struct{ *capnp.Future }

func (f Consume_Future) Struct() (Consume, error) {
	p, err := f.Future.Ptr()
	return Consume(p.Struct()), err
}

type DeleteItem capnp.Struct

// DeleteItem_TypeID is the unique identifier for the type DeleteItem.
const DeleteItem_TypeID = 0xde9db2015f39bf49

func NewDeleteItem(s *capnp.Segment) (DeleteItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DeleteItem(st), err
}

func NewRootDeleteItem(s *capnp.Segment) (DeleteItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DeleteItem(st), err
}

func ReadRootDeleteItem(msg *capnp.Message) (DeleteItem, error) {
	root, err := msg.Root()
	return DeleteItem(root.Struct()), err
}

func (s DeleteItem) String() string {
	str, _ := text.Marshal(0xde9db2015f39bf49, capnp.Struct(s))
	return str
}

func (s DeleteItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteItem) DecodeFromPtr(p capnp.Ptr) DeleteItem {
	return DeleteItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteItem) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteItem) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DeleteItem) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DeleteItem) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DeleteItem) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DeleteItem) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// DeleteItem_List is a list of DeleteItem.
type DeleteItem_List = capnp.StructList[DeleteItem]

// NewDeleteItem creates a new list of DeleteItem.
func NewDeleteItem_List(s *capnp.Segment, sz int32) (DeleteItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[DeleteItem](l), err
}

// DeleteItem_Future is a wrapper for a DeleteItem promised by a client call.
type DeleteItem_Future struct{ *capnp.Future }

func (f DeleteItem_Future) Struct() (DeleteItem, error) {
	p, err := f.Future.Ptr()
	return DeleteItem(p.Struct()), err
}

type MoveItem capnp.Struct

// MoveItem_TypeID is the unique identifier for the type MoveItem.
const MoveItem_TypeID = 0x8b2666611a37b434

func NewMoveItem(s *capnp.Segment) (MoveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoveItem(st), err
}

func NewRootMoveItem(s *capnp.Segment) (MoveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoveItem(st), err
}

func ReadRootMoveItem(msg *capnp.Message) (MoveItem, error) {
	root, err := msg.Root()
	return MoveItem(root.Struct()), err
}

func (s MoveItem) String() string {
	str, _ := text.Marshal(0x8b2666611a37b434, capnp.Struct(s))
	return str
}

func (s MoveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveItem) DecodeFromPtr(p capnp.Ptr) MoveItem {
	return MoveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveItem) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveItem) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveItem) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveItem) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoveItem) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoveItem) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MoveItem_List is a list of MoveItem.
type MoveItem_List = capnp.StructList[MoveItem]

// NewMoveItem creates a new list of MoveItem.
func NewMoveItem_List(s *capnp.Segment, sz int32) (MoveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MoveItem](l), err
}

// MoveItem_Future is a wrapper for a MoveItem promised by a client call.
type MoveItem_Future struct{ *capnp.Future }

func (f MoveItem_Future) Struct() (MoveItem, error) {
	p, err := f.Future.Ptr()
	return MoveItem(p.Struct()), err
}

type MultiMoveItemSub capnp.Struct

// MultiMoveItemSub_TypeID is the unique identifier for the type MultiMoveItemSub.
const MultiMoveItemSub_TypeID = 0x815ffda3d9dd039d

func NewMultiMoveItemSub(s *capnp.Segment) (MultiMoveItemSub, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MultiMoveItemSub(st), err
}

func NewRootMultiMoveItemSub(s *capnp.Segment) (MultiMoveItemSub, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MultiMoveItemSub(st), err
}

func ReadRootMultiMoveItemSub(msg *capnp.Message) (MultiMoveItemSub, error) {
	root, err := msg.Root()
	return MultiMoveItemSub(root.Struct()), err
}

func (s MultiMoveItemSub) String() string {
	str, _ := text.Marshal(0x815ffda3d9dd039d, capnp.Struct(s))
	return str
}

func (s MultiMoveItemSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiMoveItemSub) DecodeFromPtr(p capnp.Ptr) MultiMoveItemSub {
	return MultiMoveItemSub(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiMoveItemSub) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiMoveItemSub) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiMoveItemSub) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiMoveItemSub) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiMoveItemSub) FromSlot() (InventorySlot, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return InventorySlot(p.Struct()), err
}

func (s MultiMoveItemSub) HasFromSlot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiMoveItemSub) SetFromSlot(v InventorySlot) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFromSlot sets the fromSlot field to a newly
// allocated InventorySlot struct, preferring placement in s's segment.
func (s MultiMoveItemSub) NewFromSlot() (InventorySlot, error) {
	ss, err := NewInventorySlot(capnp.Struct(s).Segment())
	if err != nil {
		return InventorySlot{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MultiMoveItemSub) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MultiMoveItemSub) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MultiMoveItemSub) ToSlot() (InventorySlot, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return InventorySlot(p.Struct()), err
}

func (s MultiMoveItemSub) HasToSlot() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MultiMoveItemSub) SetToSlot(v InventorySlot) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewToSlot sets the toSlot field to a newly
// allocated InventorySlot struct, preferring placement in s's segment.
func (s MultiMoveItemSub) NewToSlot() (InventorySlot, error) {
	ss, err := NewInventorySlot(capnp.Struct(s).Segment())
	if err != nil {
		return InventorySlot{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MultiMoveItemSub_List is a list of MultiMoveItemSub.
type MultiMoveItemSub_List = capnp.StructList[MultiMoveItemSub]

// NewMultiMoveItemSub creates a new list of MultiMoveItemSub.
func NewMultiMoveItemSub_List(s *capnp.Segment, sz int32) (MultiMoveItemSub_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[MultiMoveItemSub](l), err
}

// MultiMoveItemSub_Future is a wrapper for a MultiMoveItemSub promised by a client call.
type MultiMoveItemSub_Future struct{ *capnp.Future }

func (f MultiMoveItemSub_Future) Struct() (MultiMoveItemSub, error) {
	p, err := f.Future.Ptr()
	return MultiMoveItemSub(p.Struct()), err
}
func (p MultiMoveItemSub_Future) FromSlot() InventorySlot_Future {
	return InventorySlot_Future{Future: p.Future.Field(0, nil)}
}
func (p MultiMoveItemSub_Future) ToSlot() InventorySlot_Future {
	return InventorySlot_Future{Future: p.Future.Field(1, nil)}
}

type MultiMoveItem capnp.Struct

// MultiMoveItem_TypeID is the unique identifier for the type MultiMoveItem.
const MultiMoveItem_TypeID = 0xab1ebc3e87d43ca9

func NewMultiMoveItem(s *capnp.Segment) (MultiMoveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiMoveItem(st), err
}

func NewRootMultiMoveItem(s *capnp.Segment) (MultiMoveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiMoveItem(st), err
}

func ReadRootMultiMoveItem(msg *capnp.Message) (MultiMoveItem, error) {
	root, err := msg.Root()
	return MultiMoveItem(root.Struct()), err
}

func (s MultiMoveItem) String() string {
	str, _ := text.Marshal(0xab1ebc3e87d43ca9, capnp.Struct(s))
	return str
}

func (s MultiMoveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiMoveItem) DecodeFromPtr(p capnp.Ptr) MultiMoveItem {
	return MultiMoveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiMoveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiMoveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiMoveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiMoveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiMoveItem) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MultiMoveItem) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MultiMoveItem) Moves() (MultiMoveItemSub_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiMoveItemSub_List(p.List()), err
}

func (s MultiMoveItem) HasMoves() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiMoveItem) SetMoves(v MultiMoveItemSub_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMoves sets the moves field to a newly
// allocated MultiMoveItemSub_List, preferring placement in s's segment.
func (s MultiMoveItem) NewMoves(n int32) (MultiMoveItemSub_List, error) {
	l, err := NewMultiMoveItemSub_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MultiMoveItemSub_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MultiMoveItem_List is a list of MultiMoveItem.
type MultiMoveItem_List = capnp.StructList[MultiMoveItem]

// NewMultiMoveItem creates a new list of MultiMoveItem.
func NewMultiMoveItem_List(s *capnp.Segment, sz int32) (MultiMoveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MultiMoveItem](l), err
}

// MultiMoveItem_Future is a wrapper for a MultiMoveItem promised by a client call.
type MultiMoveItem_Future struct{ *capnp.Future }

func (f MultiMoveItem_Future) Struct() (MultiMoveItem, error) {
	p, err := f.Future.Ptr()
	return MultiMoveItem(p.Struct()), err
}

type MoveCoin capnp.Struct

// MoveCoin_TypeID is the unique identifier for the type MoveCoin.
const MoveCoin_TypeID = 0xe7eceebcdcb01522

func NewMoveCoin(s *capnp.Segment) (MoveCoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoveCoin(st), err
}

func NewRootMoveCoin(s *capnp.Segment) (MoveCoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoveCoin(st), err
}

func ReadRootMoveCoin(msg *capnp.Message) (MoveCoin, error) {
	root, err := msg.Root()
	return MoveCoin(root.Struct()), err
}

func (s MoveCoin) String() string {
	str, _ := text.Marshal(0xe7eceebcdcb01522, capnp.Struct(s))
	return str
}

func (s MoveCoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveCoin) DecodeFromPtr(p capnp.Ptr) MoveCoin {
	return MoveCoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveCoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveCoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveCoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveCoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveCoin) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveCoin) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveCoin) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveCoin) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoveCoin) Cointype1() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoveCoin) SetCointype1(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoveCoin) Cointype2() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoveCoin) SetCointype2(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MoveCoin) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MoveCoin) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MoveCoin_List is a list of MoveCoin.
type MoveCoin_List = capnp.StructList[MoveCoin]

// NewMoveCoin creates a new list of MoveCoin.
func NewMoveCoin_List(s *capnp.Segment, sz int32) (MoveCoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MoveCoin](l), err
}

// MoveCoin_Future is a wrapper for a MoveCoin promised by a client call.
type MoveCoin_Future struct{ *capnp.Future }

func (f MoveCoin_Future) Struct() (MoveCoin, error) {
	p, err := f.Future.Ptr()
	return MoveCoin(p.Struct()), err
}

type TradeBusy capnp.Struct

// TradeBusy_TypeID is the unique identifier for the type TradeBusy.
const TradeBusy_TypeID = 0xf014129ca27de499

func NewTradeBusy(s *capnp.Segment) (TradeBusy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeBusy(st), err
}

func NewRootTradeBusy(s *capnp.Segment) (TradeBusy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeBusy(st), err
}

func ReadRootTradeBusy(msg *capnp.Message) (TradeBusy, error) {
	root, err := msg.Root()
	return TradeBusy(root.Struct()), err
}

func (s TradeBusy) String() string {
	str, _ := text.Marshal(0xf014129ca27de499, capnp.Struct(s))
	return str
}

func (s TradeBusy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeBusy) DecodeFromPtr(p capnp.Ptr) TradeBusy {
	return TradeBusy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeBusy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeBusy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeBusy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeBusy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeBusy) ToMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeBusy) SetToMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeBusy) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeBusy) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TradeBusy_List is a list of TradeBusy.
type TradeBusy_List = capnp.StructList[TradeBusy]

// NewTradeBusy creates a new list of TradeBusy.
func NewTradeBusy_List(s *capnp.Segment, sz int32) (TradeBusy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeBusy](l), err
}

// TradeBusy_Future is a wrapper for a TradeBusy promised by a client call.
type TradeBusy_Future struct{ *capnp.Future }

func (f TradeBusy_Future) Struct() (TradeBusy, error) {
	p, err := f.Future.Ptr()
	return TradeBusy(p.Struct()), err
}

type TradeCoin capnp.Struct

// TradeCoin_TypeID is the unique identifier for the type TradeCoin.
const TradeCoin_TypeID = 0xed7d297bd1f274b3

func NewTradeCoin(s *capnp.Segment) (TradeCoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeCoin(st), err
}

func NewRootTradeCoin(s *capnp.Segment) (TradeCoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeCoin(st), err
}

func ReadRootTradeCoin(msg *capnp.Message) (TradeCoin, error) {
	root, err := msg.Root()
	return TradeCoin(root.Struct()), err
}

func (s TradeCoin) String() string {
	str, _ := text.Marshal(0xed7d297bd1f274b3, capnp.Struct(s))
	return str
}

func (s TradeCoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeCoin) DecodeFromPtr(p capnp.Ptr) TradeCoin {
	return TradeCoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeCoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeCoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeCoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeCoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeCoin) Trader() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeCoin) SetTrader(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeCoin) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeCoin) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeCoin) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TradeCoin) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TradeCoin_List is a list of TradeCoin.
type TradeCoin_List = capnp.StructList[TradeCoin]

// NewTradeCoin creates a new list of TradeCoin.
func NewTradeCoin_List(s *capnp.Segment, sz int32) (TradeCoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TradeCoin](l), err
}

// TradeCoin_Future is a wrapper for a TradeCoin promised by a client call.
type TradeCoin_Future struct{ *capnp.Future }

func (f TradeCoin_Future) Struct() (TradeCoin, error) {
	p, err := f.Future.Ptr()
	return TradeCoin(p.Struct()), err
}

type TradeMoneyUpdate capnp.Struct

// TradeMoneyUpdate_TypeID is the unique identifier for the type TradeMoneyUpdate.
const TradeMoneyUpdate_TypeID = 0xda1a12e840c66e0f

func NewTradeMoneyUpdate(s *capnp.Segment) (TradeMoneyUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeMoneyUpdate(st), err
}

func NewRootTradeMoneyUpdate(s *capnp.Segment) (TradeMoneyUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeMoneyUpdate(st), err
}

func ReadRootTradeMoneyUpdate(msg *capnp.Message) (TradeMoneyUpdate, error) {
	root, err := msg.Root()
	return TradeMoneyUpdate(root.Struct()), err
}

func (s TradeMoneyUpdate) String() string {
	str, _ := text.Marshal(0xda1a12e840c66e0f, capnp.Struct(s))
	return str
}

func (s TradeMoneyUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeMoneyUpdate) DecodeFromPtr(p capnp.Ptr) TradeMoneyUpdate {
	return TradeMoneyUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeMoneyUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeMoneyUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeMoneyUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeMoneyUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeMoneyUpdate) Trader() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeMoneyUpdate) SetTrader(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeMoneyUpdate) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeMoneyUpdate) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeMoneyUpdate) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TradeMoneyUpdate) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TradeMoneyUpdate_List is a list of TradeMoneyUpdate.
type TradeMoneyUpdate_List = capnp.StructList[TradeMoneyUpdate]

// NewTradeMoneyUpdate creates a new list of TradeMoneyUpdate.
func NewTradeMoneyUpdate_List(s *capnp.Segment, sz int32) (TradeMoneyUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TradeMoneyUpdate](l), err
}

// TradeMoneyUpdate_Future is a wrapper for a TradeMoneyUpdate promised by a client call.
type TradeMoneyUpdate_Future struct{ *capnp.Future }

func (f TradeMoneyUpdate_Future) Struct() (TradeMoneyUpdate, error) {
	p, err := f.Future.Ptr()
	return TradeMoneyUpdate(p.Struct()), err
}

type Surname capnp.Struct

// Surname_TypeID is the unique identifier for the type Surname.
const Surname_TypeID = 0x89f1549a7f447f06

func NewSurname(s *capnp.Segment) (Surname, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Surname(st), err
}

func NewRootSurname(s *capnp.Segment) (Surname, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Surname(st), err
}

func ReadRootSurname(msg *capnp.Message) (Surname, error) {
	root, err := msg.Root()
	return Surname(root.Struct()), err
}

func (s Surname) String() string {
	str, _ := text.Marshal(0x89f1549a7f447f06, capnp.Struct(s))
	return str
}

func (s Surname) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Surname) DecodeFromPtr(p capnp.Ptr) Surname {
	return Surname(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Surname) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Surname) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Surname) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Surname) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Surname) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Surname) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Surname) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Surname) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Surname) Lastname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Surname) HasLastname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Surname) LastnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Surname) SetLastname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Surname_List is a list of Surname.
type Surname_List = capnp.StructList[Surname]

// NewSurname creates a new list of Surname.
func NewSurname_List(s *capnp.Segment, sz int32) (Surname_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Surname](l), err
}

// Surname_Future is a wrapper for a Surname promised by a client call.
type Surname_Future struct{ *capnp.Future }

func (f Surname_Future) Struct() (Surname, error) {
	p, err := f.Future.Ptr()
	return Surname(p.Struct()), err
}

type GuildsList capnp.Struct

// GuildsList_TypeID is the unique identifier for the type GuildsList.
const GuildsList_TypeID = 0xb3a8f9a49aa3ccf8

func NewGuildsList(s *capnp.Segment) (GuildsList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GuildsList(st), err
}

func NewRootGuildsList(s *capnp.Segment) (GuildsList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GuildsList(st), err
}

func ReadRootGuildsList(msg *capnp.Message) (GuildsList, error) {
	root, err := msg.Root()
	return GuildsList(root.Struct()), err
}

func (s GuildsList) String() string {
	str, _ := text.Marshal(0xb3a8f9a49aa3ccf8, capnp.Struct(s))
	return str
}

func (s GuildsList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildsList) DecodeFromPtr(p capnp.Ptr) GuildsList {
	return GuildsList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildsList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildsList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildsList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildsList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildsList) Guilds() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return StringList_List(p.List()), err
}

func (s GuildsList) HasGuilds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildsList) SetGuilds(v StringList_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewGuilds sets the guilds field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GuildsList) NewGuilds(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GuildsList_List is a list of GuildsList.
type GuildsList_List = capnp.StructList[GuildsList]

// NewGuildsList creates a new list of GuildsList.
func NewGuildsList_List(s *capnp.Segment, sz int32) (GuildsList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GuildsList](l), err
}

// GuildsList_Future is a wrapper for a GuildsList promised by a client call.
type GuildsList_Future struct{ *capnp.Future }

func (f GuildsList_Future) Struct() (GuildsList, error) {
	p, err := f.Future.Ptr()
	return GuildsList(p.Struct()), err
}

type MoneyOnCorpse capnp.Struct

// MoneyOnCorpse_TypeID is the unique identifier for the type MoneyOnCorpse.
const MoneyOnCorpse_TypeID = 0xd89879eb841b57cc

func NewMoneyOnCorpse(s *capnp.Segment) (MoneyOnCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoneyOnCorpse(st), err
}

func NewRootMoneyOnCorpse(s *capnp.Segment) (MoneyOnCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoneyOnCorpse(st), err
}

func ReadRootMoneyOnCorpse(msg *capnp.Message) (MoneyOnCorpse, error) {
	root, err := msg.Root()
	return MoneyOnCorpse(root.Struct()), err
}

func (s MoneyOnCorpse) String() string {
	str, _ := text.Marshal(0xd89879eb841b57cc, capnp.Struct(s))
	return str
}

func (s MoneyOnCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoneyOnCorpse) DecodeFromPtr(p capnp.Ptr) MoneyOnCorpse {
	return MoneyOnCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoneyOnCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoneyOnCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoneyOnCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoneyOnCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoneyOnCorpse) Response() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoneyOnCorpse) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoneyOnCorpse) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoneyOnCorpse) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoneyOnCorpse) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoneyOnCorpse) SetGold(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoneyOnCorpse) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoneyOnCorpse) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MoneyOnCorpse) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MoneyOnCorpse) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MoneyOnCorpse_List is a list of MoneyOnCorpse.
type MoneyOnCorpse_List = capnp.StructList[MoneyOnCorpse]

// NewMoneyOnCorpse creates a new list of MoneyOnCorpse.
func NewMoneyOnCorpse_List(s *capnp.Segment, sz int32) (MoneyOnCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MoneyOnCorpse](l), err
}

// MoneyOnCorpse_Future is a wrapper for a MoneyOnCorpse promised by a client call.
type MoneyOnCorpse_Future struct{ *capnp.Future }

func (f MoneyOnCorpse_Future) Struct() (MoneyOnCorpse, error) {
	p, err := f.Future.Ptr()
	return MoneyOnCorpse(p.Struct()), err
}

type LootingItem capnp.Struct

// LootingItem_TypeID is the unique identifier for the type LootingItem.
const LootingItem_TypeID = 0xf0569fdbfd2961b4

func NewLootingItem(s *capnp.Segment) (LootingItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LootingItem(st), err
}

func NewRootLootingItem(s *capnp.Segment) (LootingItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LootingItem(st), err
}

func ReadRootLootingItem(msg *capnp.Message) (LootingItem, error) {
	root, err := msg.Root()
	return LootingItem(root.Struct()), err
}

func (s LootingItem) String() string {
	str, _ := text.Marshal(0xf0569fdbfd2961b4, capnp.Struct(s))
	return str
}

func (s LootingItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LootingItem) DecodeFromPtr(p capnp.Ptr) LootingItem {
	return LootingItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LootingItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LootingItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LootingItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LootingItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LootingItem) Lootee() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LootingItem) SetLootee(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LootingItem) Looter() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LootingItem) SetLooter(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LootingItem) SlotId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LootingItem) SetSlotId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LootingItem) AutoLoot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LootingItem) SetAutoLoot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LootingItem_List is a list of LootingItem.
type LootingItem_List = capnp.StructList[LootingItem]

// NewLootingItem creates a new list of LootingItem.
func NewLootingItem_List(s *capnp.Segment, sz int32) (LootingItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LootingItem](l), err
}

// LootingItem_Future is a wrapper for a LootingItem promised by a client call.
type LootingItem_Future struct{ *capnp.Future }

func (f LootingItem_Future) Struct() (LootingItem, error) {
	p, err := f.Future.Ptr()
	return LootingItem(p.Struct()), err
}

type GuildManageStatus capnp.Struct

// GuildManageStatus_TypeID is the unique identifier for the type GuildManageStatus.
const GuildManageStatus_TypeID = 0xcf365ec11d0c95df

func NewGuildManageStatus(s *capnp.Segment) (GuildManageStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildManageStatus(st), err
}

func NewRootGuildManageStatus(s *capnp.Segment) (GuildManageStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildManageStatus(st), err
}

func ReadRootGuildManageStatus(msg *capnp.Message) (GuildManageStatus, error) {
	root, err := msg.Root()
	return GuildManageStatus(root.Struct()), err
}

func (s GuildManageStatus) String() string {
	str, _ := text.Marshal(0xcf365ec11d0c95df, capnp.Struct(s))
	return str
}

func (s GuildManageStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildManageStatus) DecodeFromPtr(p capnp.Ptr) GuildManageStatus {
	return GuildManageStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildManageStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildManageStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildManageStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildManageStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildManageStatus) Guildid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildManageStatus) SetGuildid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildManageStatus) Oldrank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildManageStatus) SetOldrank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildManageStatus) Newrank() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildManageStatus) SetNewrank(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildManageStatus) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildManageStatus) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildManageStatus) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildManageStatus) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildManageStatus_List is a list of GuildManageStatus.
type GuildManageStatus_List = capnp.StructList[GuildManageStatus]

// NewGuildManageStatus creates a new list of GuildManageStatus.
func NewGuildManageStatus_List(s *capnp.Segment, sz int32) (GuildManageStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[GuildManageStatus](l), err
}

// GuildManageStatus_Future is a wrapper for a GuildManageStatus promised by a client call.
type GuildManageStatus_Future struct{ *capnp.Future }

func (f GuildManageStatus_Future) Struct() (GuildManageStatus, error) {
	p, err := f.Future.Ptr()
	return GuildManageStatus(p.Struct()), err
}

type GuildJoin capnp.Struct

// GuildJoin_TypeID is the unique identifier for the type GuildJoin.
const GuildJoin_TypeID = 0xce388f415f14acb0

func NewGuildJoin(s *capnp.Segment) (GuildJoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GuildJoin(st), err
}

func NewRootGuildJoin(s *capnp.Segment) (GuildJoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GuildJoin(st), err
}

func ReadRootGuildJoin(msg *capnp.Message) (GuildJoin, error) {
	root, err := msg.Root()
	return GuildJoin(root.Struct()), err
}

func (s GuildJoin) String() string {
	str, _ := text.Marshal(0xce388f415f14acb0, capnp.Struct(s))
	return str
}

func (s GuildJoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildJoin) DecodeFromPtr(p capnp.Ptr) GuildJoin {
	return GuildJoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildJoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildJoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildJoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildJoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildJoin) Guildid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildJoin) SetGuildid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildJoin) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildJoin) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildJoin) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildJoin) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildJoin) Rank() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GuildJoin) SetRank(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GuildJoin) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GuildJoin) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GuildJoin) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildJoin) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildJoin) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildJoin) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildJoin_List is a list of GuildJoin.
type GuildJoin_List = capnp.StructList[GuildJoin]

// NewGuildJoin creates a new list of GuildJoin.
func NewGuildJoin_List(s *capnp.Segment, sz int32) (GuildJoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[GuildJoin](l), err
}

// GuildJoin_Future is a wrapper for a GuildJoin promised by a client call.
type GuildJoin_Future struct{ *capnp.Future }

func (f GuildJoin_Future) Struct() (GuildJoin, error) {
	p, err := f.Future.Ptr()
	return GuildJoin(p.Struct()), err
}

type GuildInviteAccept capnp.Struct

// GuildInviteAccept_TypeID is the unique identifier for the type GuildInviteAccept.
const GuildInviteAccept_TypeID = 0xf7787292d29bdcd7

func NewGuildInviteAccept(s *capnp.Segment) (GuildInviteAccept, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildInviteAccept(st), err
}

func NewRootGuildInviteAccept(s *capnp.Segment) (GuildInviteAccept, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildInviteAccept(st), err
}

func ReadRootGuildInviteAccept(msg *capnp.Message) (GuildInviteAccept, error) {
	root, err := msg.Root()
	return GuildInviteAccept(root.Struct()), err
}

func (s GuildInviteAccept) String() string {
	str, _ := text.Marshal(0xf7787292d29bdcd7, capnp.Struct(s))
	return str
}

func (s GuildInviteAccept) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildInviteAccept) DecodeFromPtr(p capnp.Ptr) GuildInviteAccept {
	return GuildInviteAccept(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildInviteAccept) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildInviteAccept) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildInviteAccept) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildInviteAccept) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildInviteAccept) Inviter() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildInviteAccept) HasInviter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildInviteAccept) InviterBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildInviteAccept) SetInviter(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildInviteAccept) Newmember() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildInviteAccept) HasNewmember() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildInviteAccept) NewmemberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildInviteAccept) SetNewmember(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildInviteAccept) Response() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildInviteAccept) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildInviteAccept) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildInviteAccept) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// GuildInviteAccept_List is a list of GuildInviteAccept.
type GuildInviteAccept_List = capnp.StructList[GuildInviteAccept]

// NewGuildInviteAccept creates a new list of GuildInviteAccept.
func NewGuildInviteAccept_List(s *capnp.Segment, sz int32) (GuildInviteAccept_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildInviteAccept](l), err
}

// GuildInviteAccept_Future is a wrapper for a GuildInviteAccept promised by a client call.
type GuildInviteAccept_Future struct{ *capnp.Future }

func (f GuildInviteAccept_Future) Struct() (GuildInviteAccept, error) {
	p, err := f.Future.Ptr()
	return GuildInviteAccept(p.Struct()), err
}

type GuildManageRemove capnp.Struct

// GuildManageRemove_TypeID is the unique identifier for the type GuildManageRemove.
const GuildManageRemove_TypeID = 0xe0a980f598d8a745

func NewGuildManageRemove(s *capnp.Segment) (GuildManageRemove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildManageRemove(st), err
}

func NewRootGuildManageRemove(s *capnp.Segment) (GuildManageRemove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildManageRemove(st), err
}

func ReadRootGuildManageRemove(msg *capnp.Message) (GuildManageRemove, error) {
	root, err := msg.Root()
	return GuildManageRemove(root.Struct()), err
}

func (s GuildManageRemove) String() string {
	str, _ := text.Marshal(0xe0a980f598d8a745, capnp.Struct(s))
	return str
}

func (s GuildManageRemove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildManageRemove) DecodeFromPtr(p capnp.Ptr) GuildManageRemove {
	return GuildManageRemove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildManageRemove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildManageRemove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildManageRemove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildManageRemove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildManageRemove) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildManageRemove) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildManageRemove) Member() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildManageRemove) HasMember() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildManageRemove) MemberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildManageRemove) SetMember(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildManageRemove_List is a list of GuildManageRemove.
type GuildManageRemove_List = capnp.StructList[GuildManageRemove]

// NewGuildManageRemove creates a new list of GuildManageRemove.
func NewGuildManageRemove_List(s *capnp.Segment, sz int32) (GuildManageRemove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GuildManageRemove](l), err
}

// GuildManageRemove_Future is a wrapper for a GuildManageRemove promised by a client call.
type GuildManageRemove_Future struct{ *capnp.Future }

func (f GuildManageRemove_Future) Struct() (GuildManageRemove, error) {
	p, err := f.Future.Ptr()
	return GuildManageRemove(p.Struct()), err
}

type Guildcommand capnp.Struct

// Guildcommand_TypeID is the unique identifier for the type Guildcommand.
const Guildcommand_TypeID = 0x87681fa437f7497d

func NewGuildcommand(s *capnp.Segment) (Guildcommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Guildcommand(st), err
}

func NewRootGuildcommand(s *capnp.Segment) (Guildcommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Guildcommand(st), err
}

func ReadRootGuildcommand(msg *capnp.Message) (Guildcommand, error) {
	root, err := msg.Root()
	return Guildcommand(root.Struct()), err
}

func (s Guildcommand) String() string {
	str, _ := text.Marshal(0x87681fa437f7497d, capnp.Struct(s))
	return str
}

func (s Guildcommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Guildcommand) DecodeFromPtr(p capnp.Ptr) Guildcommand {
	return Guildcommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Guildcommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Guildcommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Guildcommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Guildcommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Guildcommand) Othername() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Guildcommand) HasOthername() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Guildcommand) OthernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Guildcommand) SetOthername(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Guildcommand) Myname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Guildcommand) HasMyname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Guildcommand) MynameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Guildcommand) SetMyname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Guildcommand) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Guildcommand) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Guildcommand) Officer() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Guildcommand) SetOfficer(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Guildcommand_List is a list of Guildcommand.
type Guildcommand_List = capnp.StructList[Guildcommand]

// NewGuildcommand creates a new list of Guildcommand.
func NewGuildcommand_List(s *capnp.Segment, sz int32) (Guildcommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Guildcommand](l), err
}

// Guildcommand_Future is a wrapper for a Guildcommand promised by a client call.
type Guildcommand_Future struct{ *capnp.Future }

func (f Guildcommand_Future) Struct() (Guildcommand, error) {
	p, err := f.Future.Ptr()
	return Guildcommand(p.Struct()), err
}

type OnLevelMessage capnp.Struct

// OnLevelMessage_TypeID is the unique identifier for the type OnLevelMessage.
const OnLevelMessage_TypeID = 0xbed2ab9863c56d3b

func NewOnLevelMessage(s *capnp.Segment) (OnLevelMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return OnLevelMessage(st), err
}

func NewRootOnLevelMessage(s *capnp.Segment) (OnLevelMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return OnLevelMessage(st), err
}

func ReadRootOnLevelMessage(msg *capnp.Message) (OnLevelMessage, error) {
	root, err := msg.Root()
	return OnLevelMessage(root.Struct()), err
}

func (s OnLevelMessage) String() string {
	str, _ := text.Marshal(0xbed2ab9863c56d3b, capnp.Struct(s))
	return str
}

func (s OnLevelMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OnLevelMessage) DecodeFromPtr(p capnp.Ptr) OnLevelMessage {
	return OnLevelMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OnLevelMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OnLevelMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OnLevelMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OnLevelMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OnLevelMessage) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s OnLevelMessage) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OnLevelMessage) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s OnLevelMessage) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s OnLevelMessage) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s OnLevelMessage) HasText() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OnLevelMessage) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s OnLevelMessage) SetText(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s OnLevelMessage) Buttons() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s OnLevelMessage) SetButtons(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s OnLevelMessage) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s OnLevelMessage) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s OnLevelMessage) PopupId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s OnLevelMessage) SetPopupId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// OnLevelMessage_List is a list of OnLevelMessage.
type OnLevelMessage_List = capnp.StructList[OnLevelMessage]

// NewOnLevelMessage creates a new list of OnLevelMessage.
func NewOnLevelMessage_List(s *capnp.Segment, sz int32) (OnLevelMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[OnLevelMessage](l), err
}

// OnLevelMessage_Future is a wrapper for a OnLevelMessage promised by a client call.
type OnLevelMessage_Future struct{ *capnp.Future }

func (f OnLevelMessage_Future) Struct() (OnLevelMessage, error) {
	p, err := f.Future.Ptr()
	return OnLevelMessage(p.Struct()), err
}

type GMZoneRequest capnp.Struct

// GMZoneRequest_TypeID is the unique identifier for the type GMZoneRequest.
const GMZoneRequest_TypeID = 0xd870df23456b7900

func NewGMZoneRequest(s *capnp.Segment) (GMZoneRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GMZoneRequest(st), err
}

func NewRootGMZoneRequest(s *capnp.Segment) (GMZoneRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GMZoneRequest(st), err
}

func ReadRootGMZoneRequest(msg *capnp.Message) (GMZoneRequest, error) {
	root, err := msg.Root()
	return GMZoneRequest(root.Struct()), err
}

func (s GMZoneRequest) String() string {
	str, _ := text.Marshal(0xd870df23456b7900, capnp.Struct(s))
	return str
}

func (s GMZoneRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMZoneRequest) DecodeFromPtr(p capnp.Ptr) GMZoneRequest {
	return GMZoneRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMZoneRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMZoneRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMZoneRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMZoneRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMZoneRequest) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMZoneRequest) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMZoneRequest) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMZoneRequest) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMZoneRequest) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMZoneRequest) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMZoneRequest) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GMZoneRequest) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GMZoneRequest) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s GMZoneRequest) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s GMZoneRequest) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s GMZoneRequest) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s GMZoneRequest) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s GMZoneRequest) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s GMZoneRequest) Success() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GMZoneRequest) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// GMZoneRequest_List is a list of GMZoneRequest.
type GMZoneRequest_List = capnp.StructList[GMZoneRequest]

// NewGMZoneRequest creates a new list of GMZoneRequest.
func NewGMZoneRequest_List(s *capnp.Segment, sz int32) (GMZoneRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[GMZoneRequest](l), err
}

// GMZoneRequest_Future is a wrapper for a GMZoneRequest promised by a client call.
type GMZoneRequest_Future struct{ *capnp.Future }

func (f GMZoneRequest_Future) Struct() (GMZoneRequest, error) {
	p, err := f.Future.Ptr()
	return GMZoneRequest(p.Struct()), err
}

type GMSummon capnp.Struct

// GMSummon_TypeID is the unique identifier for the type GMSummon.
const GMSummon_TypeID = 0xd2768707959c3ea9

func NewGMSummon(s *capnp.Segment) (GMSummon, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMSummon(st), err
}

func NewRootGMSummon(s *capnp.Segment) (GMSummon, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMSummon(st), err
}

func ReadRootGMSummon(msg *capnp.Message) (GMSummon, error) {
	root, err := msg.Root()
	return GMSummon(root.Struct()), err
}

func (s GMSummon) String() string {
	str, _ := text.Marshal(0xd2768707959c3ea9, capnp.Struct(s))
	return str
}

func (s GMSummon) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMSummon) DecodeFromPtr(p capnp.Ptr) GMSummon {
	return GMSummon(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMSummon) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMSummon) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMSummon) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMSummon) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMSummon) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMSummon) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMSummon) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMSummon) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMSummon) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMSummon) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMSummon) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMSummon) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMSummon) Success() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMSummon) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMSummon) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMSummon) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMSummon) Y() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMSummon) SetY(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GMSummon) X() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GMSummon) SetX(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GMSummon) Z() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GMSummon) SetZ(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// GMSummon_List is a list of GMSummon.
type GMSummon_List = capnp.StructList[GMSummon]

// NewGMSummon creates a new list of GMSummon.
func NewGMSummon_List(s *capnp.Segment, sz int32) (GMSummon_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[GMSummon](l), err
}

// GMSummon_Future is a wrapper for a GMSummon promised by a client call.
type GMSummon_Future struct{ *capnp.Future }

func (f GMSummon_Future) Struct() (GMSummon, error) {
	p, err := f.Future.Ptr()
	return GMSummon(p.Struct()), err
}

type GMGoto capnp.Struct

// GMGoto_TypeID is the unique identifier for the type GMGoto.
const GMGoto_TypeID = 0xd963a858373108fc

func NewGMGoto(s *capnp.Segment) (GMGoto, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMGoto(st), err
}

func NewRootGMGoto(s *capnp.Segment) (GMGoto, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMGoto(st), err
}

func ReadRootGMGoto(msg *capnp.Message) (GMGoto, error) {
	root, err := msg.Root()
	return GMGoto(root.Struct()), err
}

func (s GMGoto) String() string {
	str, _ := text.Marshal(0xd963a858373108fc, capnp.Struct(s))
	return str
}

func (s GMGoto) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMGoto) DecodeFromPtr(p capnp.Ptr) GMGoto {
	return GMGoto(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMGoto) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMGoto) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMGoto) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMGoto) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMGoto) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMGoto) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMGoto) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMGoto) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMGoto) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMGoto) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMGoto) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMGoto) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMGoto) Success() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMGoto) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMGoto) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMGoto) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMGoto) Y() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMGoto) SetY(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GMGoto) X() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GMGoto) SetX(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GMGoto) Z() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GMGoto) SetZ(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// GMGoto_List is a list of GMGoto.
type GMGoto_List = capnp.StructList[GMGoto]

// NewGMGoto creates a new list of GMGoto.
func NewGMGoto_List(s *capnp.Segment, sz int32) (GMGoto_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[GMGoto](l), err
}

// GMGoto_Future is a wrapper for a GMGoto promised by a client call.
type GMGoto_Future struct{ *capnp.Future }

func (f GMGoto_Future) Struct() (GMGoto, error) {
	p, err := f.Future.Ptr()
	return GMGoto(p.Struct()), err
}

type GMLastName capnp.Struct

// GMLastName_TypeID is the unique identifier for the type GMLastName.
const GMLastName_TypeID = 0xc186a9c36f974c33

func NewGMLastName(s *capnp.Segment) (GMLastName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GMLastName(st), err
}

func NewRootGMLastName(s *capnp.Segment) (GMLastName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GMLastName(st), err
}

func ReadRootGMLastName(msg *capnp.Message) (GMLastName, error) {
	root, err := msg.Root()
	return GMLastName(root.Struct()), err
}

func (s GMLastName) String() string {
	str, _ := text.Marshal(0xc186a9c36f974c33, capnp.Struct(s))
	return str
}

func (s GMLastName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMLastName) DecodeFromPtr(p capnp.Ptr) GMLastName {
	return GMLastName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMLastName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMLastName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMLastName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMLastName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMLastName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMLastName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMLastName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMLastName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMLastName) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMLastName) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMLastName) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMLastName) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMLastName) Lastname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GMLastName) HasLastname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GMLastName) LastnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GMLastName) SetLastname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GMLastName_List is a list of GMLastName.
type GMLastName_List = capnp.StructList[GMLastName]

// NewGMLastName creates a new list of GMLastName.
func NewGMLastName_List(s *capnp.Segment, sz int32) (GMLastName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GMLastName](l), err
}

// GMLastName_Future is a wrapper for a GMLastName promised by a client call.
type GMLastName_Future struct{ *capnp.Future }

func (f GMLastName_Future) Struct() (GMLastName, error) {
	p, err := f.Future.Ptr()
	return GMLastName(p.Struct()), err
}

type CombatAbility capnp.Struct

// CombatAbility_TypeID is the unique identifier for the type CombatAbility.
const CombatAbility_TypeID = 0xaeb6652f725f241b

func NewCombatAbility(s *capnp.Segment) (CombatAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CombatAbility(st), err
}

func NewRootCombatAbility(s *capnp.Segment) (CombatAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CombatAbility(st), err
}

func ReadRootCombatAbility(msg *capnp.Message) (CombatAbility, error) {
	root, err := msg.Root()
	return CombatAbility(root.Struct()), err
}

func (s CombatAbility) String() string {
	str, _ := text.Marshal(0xaeb6652f725f241b, capnp.Struct(s))
	return str
}

func (s CombatAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CombatAbility) DecodeFromPtr(p capnp.Ptr) CombatAbility {
	return CombatAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CombatAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CombatAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CombatAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CombatAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CombatAbility) MTarget() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CombatAbility) SetMTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CombatAbility) MAtk() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CombatAbility) SetMAtk(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CombatAbility) MSkill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CombatAbility) SetMSkill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// CombatAbility_List is a list of CombatAbility.
type CombatAbility_List = capnp.StructList[CombatAbility]

// NewCombatAbility creates a new list of CombatAbility.
func NewCombatAbility_List(s *capnp.Segment, sz int32) (CombatAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CombatAbility](l), err
}

// CombatAbility_Future is a wrapper for a CombatAbility promised by a client call.
type CombatAbility_Future struct{ *capnp.Future }

func (f CombatAbility_Future) Struct() (CombatAbility, error) {
	p, err := f.Future.Ptr()
	return CombatAbility(p.Struct()), err
}

type InstillDoubt capnp.Struct

// InstillDoubt_TypeID is the unique identifier for the type InstillDoubt.
const InstillDoubt_TypeID = 0xf47ddd36364c797f

func NewInstillDoubt(s *capnp.Segment) (InstillDoubt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InstillDoubt(st), err
}

func NewRootInstillDoubt(s *capnp.Segment) (InstillDoubt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InstillDoubt(st), err
}

func ReadRootInstillDoubt(msg *capnp.Message) (InstillDoubt, error) {
	root, err := msg.Root()
	return InstillDoubt(root.Struct()), err
}

func (s InstillDoubt) String() string {
	str, _ := text.Marshal(0xf47ddd36364c797f, capnp.Struct(s))
	return str
}

func (s InstillDoubt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InstillDoubt) DecodeFromPtr(p capnp.Ptr) InstillDoubt {
	return InstillDoubt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InstillDoubt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InstillDoubt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InstillDoubt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InstillDoubt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InstillDoubt) IId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InstillDoubt) SetIId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InstillDoubt) IAtk() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InstillDoubt) SetIAtk(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InstillDoubt) IType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s InstillDoubt) SetIType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// InstillDoubt_List is a list of InstillDoubt.
type InstillDoubt_List = capnp.StructList[InstillDoubt]

// NewInstillDoubt creates a new list of InstillDoubt.
func NewInstillDoubt_List(s *capnp.Segment, sz int32) (InstillDoubt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[InstillDoubt](l), err
}

// InstillDoubt_Future is a wrapper for a InstillDoubt promised by a client call.
type InstillDoubt_Future struct{ *capnp.Future }

func (f InstillDoubt_Future) Struct() (InstillDoubt, error) {
	p, err := f.Future.Ptr()
	return InstillDoubt(p.Struct()), err
}

type GiveItem capnp.Struct

// GiveItem_TypeID is the unique identifier for the type GiveItem.
const GiveItem_TypeID = 0xeef4dfefeb1def9f

func NewGiveItem(s *capnp.Segment) (GiveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GiveItem(st), err
}

func NewRootGiveItem(s *capnp.Segment) (GiveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GiveItem(st), err
}

func ReadRootGiveItem(msg *capnp.Message) (GiveItem, error) {
	root, err := msg.Root()
	return GiveItem(root.Struct()), err
}

func (s GiveItem) String() string {
	str, _ := text.Marshal(0xeef4dfefeb1def9f, capnp.Struct(s))
	return str
}

func (s GiveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GiveItem) DecodeFromPtr(p capnp.Ptr) GiveItem {
	return GiveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GiveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GiveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GiveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GiveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GiveItem) ToEntity() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GiveItem) SetToEntity(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GiveItem) ToEquipSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GiveItem) SetToEquipSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GiveItem) FromEntity() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GiveItem) SetFromEntity(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GiveItem) FromEquipSlot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GiveItem) SetFromEquipSlot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// GiveItem_List is a list of GiveItem.
type GiveItem_List = capnp.StructList[GiveItem]

// NewGiveItem creates a new list of GiveItem.
func NewGiveItem_List(s *capnp.Segment, sz int32) (GiveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[GiveItem](l), err
}

// GiveItem_Future is a wrapper for a GiveItem promised by a client call.
type GiveItem_Future struct{ *capnp.Future }

func (f GiveItem_Future) Struct() (GiveItem, error) {
	p, err := f.Future.Ptr()
	return GiveItem(p.Struct()), err
}

type RandomReq capnp.Struct

// RandomReq_TypeID is the unique identifier for the type RandomReq.
const RandomReq_TypeID = 0xc76af8996e024e54

func NewRandomReq(s *capnp.Segment) (RandomReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RandomReq(st), err
}

func NewRootRandomReq(s *capnp.Segment) (RandomReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RandomReq(st), err
}

func ReadRootRandomReq(msg *capnp.Message) (RandomReq, error) {
	root, err := msg.Root()
	return RandomReq(root.Struct()), err
}

func (s RandomReq) String() string {
	str, _ := text.Marshal(0xc76af8996e024e54, capnp.Struct(s))
	return str
}

func (s RandomReq) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RandomReq) DecodeFromPtr(p capnp.Ptr) RandomReq {
	return RandomReq(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RandomReq) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RandomReq) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RandomReq) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RandomReq) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RandomReq) Low() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RandomReq) SetLow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RandomReq) High() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RandomReq) SetHigh(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RandomReq_List is a list of RandomReq.
type RandomReq_List = capnp.StructList[RandomReq]

// NewRandomReq creates a new list of RandomReq.
func NewRandomReq_List(s *capnp.Segment, sz int32) (RandomReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[RandomReq](l), err
}

// RandomReq_Future is a wrapper for a RandomReq promised by a client call.
type RandomReq_Future struct{ *capnp.Future }

func (f RandomReq_Future) Struct() (RandomReq, error) {
	p, err := f.Future.Ptr()
	return RandomReq(p.Struct()), err
}

type RandomReply capnp.Struct

// RandomReply_TypeID is the unique identifier for the type RandomReply.
const RandomReply_TypeID = 0xfc446c448d940ff7

func NewRandomReply(s *capnp.Segment) (RandomReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RandomReply(st), err
}

func NewRootRandomReply(s *capnp.Segment) (RandomReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RandomReply(st), err
}

func ReadRootRandomReply(msg *capnp.Message) (RandomReply, error) {
	root, err := msg.Root()
	return RandomReply(root.Struct()), err
}

func (s RandomReply) String() string {
	str, _ := text.Marshal(0xfc446c448d940ff7, capnp.Struct(s))
	return str
}

func (s RandomReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RandomReply) DecodeFromPtr(p capnp.Ptr) RandomReply {
	return RandomReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RandomReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RandomReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RandomReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RandomReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RandomReply) Low() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RandomReply) SetLow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RandomReply) High() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RandomReply) SetHigh(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RandomReply) Result() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RandomReply) SetResult(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RandomReply) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RandomReply) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RandomReply) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RandomReply) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RandomReply_List is a list of RandomReply.
type RandomReply_List = capnp.StructList[RandomReply]

// NewRandomReply creates a new list of RandomReply.
func NewRandomReply_List(s *capnp.Segment, sz int32) (RandomReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RandomReply](l), err
}

// RandomReply_Future is a wrapper for a RandomReply promised by a client call.
type RandomReply_Future struct{ *capnp.Future }

func (f RandomReply_Future) Struct() (RandomReply, error) {
	p, err := f.Future.Ptr()
	return RandomReply(p.Struct()), err
}

type LFG capnp.Struct

// LFG_TypeID is the unique identifier for the type LFG.
const LFG_TypeID = 0x852c02610e8a2a24

func NewLFG(s *capnp.Segment) (LFG, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LFG(st), err
}

func NewRootLFG(s *capnp.Segment) (LFG, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LFG(st), err
}

func ReadRootLFG(msg *capnp.Message) (LFG, error) {
	root, err := msg.Root()
	return LFG(root.Struct()), err
}

func (s LFG) String() string {
	str, _ := text.Marshal(0x852c02610e8a2a24, capnp.Struct(s))
	return str
}

func (s LFG) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFG) DecodeFromPtr(p capnp.Ptr) LFG {
	return LFG(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFG) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFG) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFG) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFG) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFG) Value() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFG) SetValue(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFG) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFG) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFG) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFG) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// LFG_List is a list of LFG.
type LFG_List = capnp.StructList[LFG]

// NewLFG creates a new list of LFG.
func NewLFG_List(s *capnp.Segment, sz int32) (LFG_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[LFG](l), err
}

// LFG_Future is a wrapper for a LFG promised by a client call.
type LFG_Future struct{ *capnp.Future }

func (f LFG_Future) Struct() (LFG, error) {
	p, err := f.Future.Ptr()
	return LFG(p.Struct()), err
}

type LFGAppearance capnp.Struct

// LFGAppearance_TypeID is the unique identifier for the type LFGAppearance.
const LFGAppearance_TypeID = 0x88c6bb9459dd440d

func NewLFGAppearance(s *capnp.Segment) (LFGAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LFGAppearance(st), err
}

func NewRootLFGAppearance(s *capnp.Segment) (LFGAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LFGAppearance(st), err
}

func ReadRootLFGAppearance(msg *capnp.Message) (LFGAppearance, error) {
	root, err := msg.Root()
	return LFGAppearance(root.Struct()), err
}

func (s LFGAppearance) String() string {
	str, _ := text.Marshal(0x88c6bb9459dd440d, capnp.Struct(s))
	return str
}

func (s LFGAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGAppearance) DecodeFromPtr(p capnp.Ptr) LFGAppearance {
	return LFGAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGAppearance) Lfg() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGAppearance) SetLfg(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// LFGAppearance_List is a list of LFGAppearance.
type LFGAppearance_List = capnp.StructList[LFGAppearance]

// NewLFGAppearance creates a new list of LFGAppearance.
func NewLFGAppearance_List(s *capnp.Segment, sz int32) (LFGAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[LFGAppearance](l), err
}

// LFGAppearance_Future is a wrapper for a LFGAppearance promised by a client call.
type LFGAppearance_Future struct{ *capnp.Future }

func (f LFGAppearance_Future) Struct() (LFGAppearance, error) {
	p, err := f.Future.Ptr()
	return LFGAppearance(p.Struct()), err
}

type TimeOfDay capnp.Struct

// TimeOfDay_TypeID is the unique identifier for the type TimeOfDay.
const TimeOfDay_TypeID = 0x873927d4562f9ba5

func NewTimeOfDay(s *capnp.Segment) (TimeOfDay, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TimeOfDay(st), err
}

func NewRootTimeOfDay(s *capnp.Segment) (TimeOfDay, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TimeOfDay(st), err
}

func ReadRootTimeOfDay(msg *capnp.Message) (TimeOfDay, error) {
	root, err := msg.Root()
	return TimeOfDay(root.Struct()), err
}

func (s TimeOfDay) String() string {
	str, _ := text.Marshal(0x873927d4562f9ba5, capnp.Struct(s))
	return str
}

func (s TimeOfDay) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeOfDay) DecodeFromPtr(p capnp.Ptr) TimeOfDay {
	return TimeOfDay(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeOfDay) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeOfDay) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeOfDay) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeOfDay) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeOfDay) Hour() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TimeOfDay) SetHour(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TimeOfDay) Minute() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TimeOfDay) SetMinute(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TimeOfDay) Day() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TimeOfDay) SetDay(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TimeOfDay) Month() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TimeOfDay) SetMonth(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TimeOfDay) Year() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TimeOfDay) SetYear(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// TimeOfDay_List is a list of TimeOfDay.
type TimeOfDay_List = capnp.StructList[TimeOfDay]

// NewTimeOfDay creates a new list of TimeOfDay.
func NewTimeOfDay_List(s *capnp.Segment, sz int32) (TimeOfDay_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[TimeOfDay](l), err
}

// TimeOfDay_Future is a wrapper for a TimeOfDay promised by a client call.
type TimeOfDay_Future struct{ *capnp.Future }

func (f TimeOfDay_Future) Struct() (TimeOfDay, error) {
	p, err := f.Future.Ptr()
	return TimeOfDay(p.Struct()), err
}

type MerchantClick capnp.Struct

// MerchantClick_TypeID is the unique identifier for the type MerchantClick.
const MerchantClick_TypeID = 0xf19df04c8f59f3a6

func NewMerchantClick(s *capnp.Segment) (MerchantClick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantClick(st), err
}

func NewRootMerchantClick(s *capnp.Segment) (MerchantClick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantClick(st), err
}

func ReadRootMerchantClick(msg *capnp.Message) (MerchantClick, error) {
	root, err := msg.Root()
	return MerchantClick(root.Struct()), err
}

func (s MerchantClick) String() string {
	str, _ := text.Marshal(0xf19df04c8f59f3a6, capnp.Struct(s))
	return str
}

func (s MerchantClick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantClick) DecodeFromPtr(p capnp.Ptr) MerchantClick {
	return MerchantClick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantClick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantClick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantClick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantClick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantClick) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantClick) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantClick) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantClick) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantClick) Command() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantClick) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantClick) Rate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s MerchantClick) SetRate(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// MerchantClick_List is a list of MerchantClick.
type MerchantClick_List = capnp.StructList[MerchantClick]

// NewMerchantClick creates a new list of MerchantClick.
func NewMerchantClick_List(s *capnp.Segment, sz int32) (MerchantClick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantClick](l), err
}

// MerchantClick_Future is a wrapper for a MerchantClick promised by a client call.
type MerchantClick_Future struct{ *capnp.Future }

func (f MerchantClick_Future) Struct() (MerchantClick, error) {
	p, err := f.Future.Ptr()
	return MerchantClick(p.Struct()), err
}

type MerchantSell capnp.Struct

// MerchantSell_TypeID is the unique identifier for the type MerchantSell.
const MerchantSell_TypeID = 0xd3bb2f7cf3a77db4

func NewMerchantSell(s *capnp.Segment) (MerchantSell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MerchantSell(st), err
}

func NewRootMerchantSell(s *capnp.Segment) (MerchantSell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MerchantSell(st), err
}

func ReadRootMerchantSell(msg *capnp.Message) (MerchantSell, error) {
	root, err := msg.Root()
	return MerchantSell(root.Struct()), err
}

func (s MerchantSell) String() string {
	str, _ := text.Marshal(0xd3bb2f7cf3a77db4, capnp.Struct(s))
	return str
}

func (s MerchantSell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantSell) DecodeFromPtr(p capnp.Ptr) MerchantSell {
	return MerchantSell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantSell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantSell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantSell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantSell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantSell) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantSell) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantSell) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantSell) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantSell) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantSell) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantSell) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MerchantSell) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MerchantSell) Price() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MerchantSell) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MerchantSell_List is a list of MerchantSell.
type MerchantSell_List = capnp.StructList[MerchantSell]

// NewMerchantSell creates a new list of MerchantSell.
func NewMerchantSell_List(s *capnp.Segment, sz int32) (MerchantSell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MerchantSell](l), err
}

// MerchantSell_Future is a wrapper for a MerchantSell promised by a client call.
type MerchantSell_Future struct{ *capnp.Future }

func (f MerchantSell_Future) Struct() (MerchantSell, error) {
	p, err := f.Future.Ptr()
	return MerchantSell(p.Struct()), err
}

type MerchantPurchase capnp.Struct

// MerchantPurchase_TypeID is the unique identifier for the type MerchantPurchase.
const MerchantPurchase_TypeID = 0xc8d069bf9cf2487f

func NewMerchantPurchase(s *capnp.Segment) (MerchantPurchase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantPurchase(st), err
}

func NewRootMerchantPurchase(s *capnp.Segment) (MerchantPurchase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantPurchase(st), err
}

func ReadRootMerchantPurchase(msg *capnp.Message) (MerchantPurchase, error) {
	root, err := msg.Root()
	return MerchantPurchase(root.Struct()), err
}

func (s MerchantPurchase) String() string {
	str, _ := text.Marshal(0xc8d069bf9cf2487f, capnp.Struct(s))
	return str
}

func (s MerchantPurchase) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantPurchase) DecodeFromPtr(p capnp.Ptr) MerchantPurchase {
	return MerchantPurchase(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantPurchase) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantPurchase) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantPurchase) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantPurchase) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantPurchase) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantPurchase) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantPurchase) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantPurchase) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantPurchase) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantPurchase) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantPurchase) Price() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MerchantPurchase) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MerchantPurchase_List is a list of MerchantPurchase.
type MerchantPurchase_List = capnp.StructList[MerchantPurchase]

// NewMerchantPurchase creates a new list of MerchantPurchase.
func NewMerchantPurchase_List(s *capnp.Segment, sz int32) (MerchantPurchase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantPurchase](l), err
}

// MerchantPurchase_Future is a wrapper for a MerchantPurchase promised by a client call.
type MerchantPurchase_Future struct{ *capnp.Future }

func (f MerchantPurchase_Future) Struct() (MerchantPurchase, error) {
	p, err := f.Future.Ptr()
	return MerchantPurchase(p.Struct()), err
}

type MerchantDelItem capnp.Struct

// MerchantDelItem_TypeID is the unique identifier for the type MerchantDelItem.
const MerchantDelItem_TypeID = 0x91cbe70d9e0d9cee

func NewMerchantDelItem(s *capnp.Segment) (MerchantDelItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantDelItem(st), err
}

func NewRootMerchantDelItem(s *capnp.Segment) (MerchantDelItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantDelItem(st), err
}

func ReadRootMerchantDelItem(msg *capnp.Message) (MerchantDelItem, error) {
	root, err := msg.Root()
	return MerchantDelItem(root.Struct()), err
}

func (s MerchantDelItem) String() string {
	str, _ := text.Marshal(0x91cbe70d9e0d9cee, capnp.Struct(s))
	return str
}

func (s MerchantDelItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantDelItem) DecodeFromPtr(p capnp.Ptr) MerchantDelItem {
	return MerchantDelItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantDelItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantDelItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantDelItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantDelItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantDelItem) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantDelItem) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantDelItem) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantDelItem) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantDelItem) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantDelItem) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MerchantDelItem_List is a list of MerchantDelItem.
type MerchantDelItem_List = capnp.StructList[MerchantDelItem]

// NewMerchantDelItem creates a new list of MerchantDelItem.
func NewMerchantDelItem_List(s *capnp.Segment, sz int32) (MerchantDelItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantDelItem](l), err
}

// MerchantDelItem_Future is a wrapper for a MerchantDelItem promised by a client call.
type MerchantDelItem_Future struct{ *capnp.Future }

func (f MerchantDelItem_Future) Struct() (MerchantDelItem, error) {
	p, err := f.Future.Ptr()
	return MerchantDelItem(p.Struct()), err
}

type AdventurePurchase capnp.Struct

// AdventurePurchase_TypeID is the unique identifier for the type AdventurePurchase.
const AdventurePurchase_TypeID = 0xedae9d3a84825876

func NewAdventurePurchase(s *capnp.Segment) (AdventurePurchase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventurePurchase(st), err
}

func NewRootAdventurePurchase(s *capnp.Segment) (AdventurePurchase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventurePurchase(st), err
}

func ReadRootAdventurePurchase(msg *capnp.Message) (AdventurePurchase, error) {
	root, err := msg.Root()
	return AdventurePurchase(root.Struct()), err
}

func (s AdventurePurchase) String() string {
	str, _ := text.Marshal(0xedae9d3a84825876, capnp.Struct(s))
	return str
}

func (s AdventurePurchase) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventurePurchase) DecodeFromPtr(p capnp.Ptr) AdventurePurchase {
	return AdventurePurchase(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventurePurchase) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventurePurchase) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventurePurchase) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventurePurchase) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventurePurchase) SomeFlag() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventurePurchase) SetSomeFlag(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventurePurchase) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventurePurchase) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventurePurchase) Itemid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventurePurchase) SetItemid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventurePurchase) Variable() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventurePurchase) SetVariable(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AdventurePurchase_List is a list of AdventurePurchase.
type AdventurePurchase_List = capnp.StructList[AdventurePurchase]

// NewAdventurePurchase creates a new list of AdventurePurchase.
func NewAdventurePurchase_List(s *capnp.Segment, sz int32) (AdventurePurchase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AdventurePurchase](l), err
}

// AdventurePurchase_Future is a wrapper for a AdventurePurchase promised by a client call.
type AdventurePurchase_Future struct{ *capnp.Future }

func (f AdventurePurchase_Future) Struct() (AdventurePurchase, error) {
	p, err := f.Future.Ptr()
	return AdventurePurchase(p.Struct()), err
}

type AdventureSell capnp.Struct

// AdventureSell_TypeID is the unique identifier for the type AdventureSell.
const AdventureSell_TypeID = 0xcfe31aeeb9723e6b

func NewAdventureSell(s *capnp.Segment) (AdventureSell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventureSell(st), err
}

func NewRootAdventureSell(s *capnp.Segment) (AdventureSell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventureSell(st), err
}

func ReadRootAdventureSell(msg *capnp.Message) (AdventureSell, error) {
	root, err := msg.Root()
	return AdventureSell(root.Struct()), err
}

func (s AdventureSell) String() string {
	str, _ := text.Marshal(0xcfe31aeeb9723e6b, capnp.Struct(s))
	return str
}

func (s AdventureSell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureSell) DecodeFromPtr(p capnp.Ptr) AdventureSell {
	return AdventureSell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureSell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureSell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureSell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureSell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureSell) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureSell) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureSell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureSell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureSell) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureSell) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureSell) SellPrice() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventureSell) SetSellPrice(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AdventureSell_List is a list of AdventureSell.
type AdventureSell_List = capnp.StructList[AdventureSell]

// NewAdventureSell creates a new list of AdventureSell.
func NewAdventureSell_List(s *capnp.Segment, sz int32) (AdventureSell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AdventureSell](l), err
}

// AdventureSell_Future is a wrapper for a AdventureSell promised by a client call.
type AdventureSell_Future struct{ *capnp.Future }

func (f AdventureSell_Future) Struct() (AdventureSell, error) {
	p, err := f.Future.Ptr()
	return AdventureSell(p.Struct()), err
}

type AdventurePointsUpdate capnp.Struct

// AdventurePointsUpdate_TypeID is the unique identifier for the type AdventurePointsUpdate.
const AdventurePointsUpdate_TypeID = 0x9f9c5384091d79ce

func NewAdventurePointsUpdate(s *capnp.Segment) (AdventurePointsUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return AdventurePointsUpdate(st), err
}

func NewRootAdventurePointsUpdate(s *capnp.Segment) (AdventurePointsUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return AdventurePointsUpdate(st), err
}

func ReadRootAdventurePointsUpdate(msg *capnp.Message) (AdventurePointsUpdate, error) {
	root, err := msg.Root()
	return AdventurePointsUpdate(root.Struct()), err
}

func (s AdventurePointsUpdate) String() string {
	str, _ := text.Marshal(0x9f9c5384091d79ce, capnp.Struct(s))
	return str
}

func (s AdventurePointsUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventurePointsUpdate) DecodeFromPtr(p capnp.Ptr) AdventurePointsUpdate {
	return AdventurePointsUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventurePointsUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventurePointsUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventurePointsUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventurePointsUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventurePointsUpdate) LdonAvailablePoints() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventurePointsUpdate) SetLdonAvailablePoints(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventurePointsUpdate) UnkownApu() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s AdventurePointsUpdate) HasUnkownApu() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventurePointsUpdate) SetUnkownApu(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUnkownApu sets the unkownApu field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AdventurePointsUpdate) NewUnkownApu(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s AdventurePointsUpdate) LdonGukPoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventurePointsUpdate) SetLdonGukPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventurePointsUpdate) LdonMirugalPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventurePointsUpdate) SetLdonMirugalPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventurePointsUpdate) LdonMistmoorePoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventurePointsUpdate) SetLdonMistmoorePoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AdventurePointsUpdate) LdonRujarkianPoints() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AdventurePointsUpdate) SetLdonRujarkianPoints(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AdventurePointsUpdate) LdonTakishPoints() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AdventurePointsUpdate) SetLdonTakishPoints(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// AdventurePointsUpdate_List is a list of AdventurePointsUpdate.
type AdventurePointsUpdate_List = capnp.StructList[AdventurePointsUpdate]

// NewAdventurePointsUpdate creates a new list of AdventurePointsUpdate.
func NewAdventurePointsUpdate_List(s *capnp.Segment, sz int32) (AdventurePointsUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[AdventurePointsUpdate](l), err
}

// AdventurePointsUpdate_Future is a wrapper for a AdventurePointsUpdate promised by a client call.
type AdventurePointsUpdate_Future struct{ *capnp.Future }

func (f AdventurePointsUpdate_Future) Struct() (AdventurePointsUpdate, error) {
	p, err := f.Future.Ptr()
	return AdventurePointsUpdate(p.Struct()), err
}

type AdventureFinish capnp.Struct

// AdventureFinish_TypeID is the unique identifier for the type AdventureFinish.
const AdventureFinish_TypeID = 0x91ab76ec9c2c1b6f

func NewAdventureFinish(s *capnp.Segment) (AdventureFinish, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureFinish(st), err
}

func NewRootAdventureFinish(s *capnp.Segment) (AdventureFinish, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureFinish(st), err
}

func ReadRootAdventureFinish(msg *capnp.Message) (AdventureFinish, error) {
	root, err := msg.Root()
	return AdventureFinish(root.Struct()), err
}

func (s AdventureFinish) String() string {
	str, _ := text.Marshal(0x91ab76ec9c2c1b6f, capnp.Struct(s))
	return str
}

func (s AdventureFinish) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureFinish) DecodeFromPtr(p capnp.Ptr) AdventureFinish {
	return AdventureFinish(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureFinish) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureFinish) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureFinish) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureFinish) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureFinish) WinLose() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureFinish) SetWinLose(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureFinish) Points() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureFinish) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AdventureFinish_List is a list of AdventureFinish.
type AdventureFinish_List = capnp.StructList[AdventureFinish]

// NewAdventureFinish creates a new list of AdventureFinish.
func NewAdventureFinish_List(s *capnp.Segment, sz int32) (AdventureFinish_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureFinish](l), err
}

// AdventureFinish_Future is a wrapper for a AdventureFinish promised by a client call.
type AdventureFinish_Future struct{ *capnp.Future }

func (f AdventureFinish_Future) Struct() (AdventureFinish, error) {
	p, err := f.Future.Ptr()
	return AdventureFinish(p.Struct()), err
}

type AdventureRequest capnp.Struct

// AdventureRequest_TypeID is the unique identifier for the type AdventureRequest.
const AdventureRequest_TypeID = 0xd61435667434c9c3

func NewAdventureRequest(s *capnp.Segment) (AdventureRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureRequest(st), err
}

func NewRootAdventureRequest(s *capnp.Segment) (AdventureRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureRequest(st), err
}

func ReadRootAdventureRequest(msg *capnp.Message) (AdventureRequest, error) {
	root, err := msg.Root()
	return AdventureRequest(root.Struct()), err
}

func (s AdventureRequest) String() string {
	str, _ := text.Marshal(0xd61435667434c9c3, capnp.Struct(s))
	return str
}

func (s AdventureRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureRequest) DecodeFromPtr(p capnp.Ptr) AdventureRequest {
	return AdventureRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureRequest) Risk() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureRequest) SetRisk(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureRequest) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureRequest) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AdventureRequest_List is a list of AdventureRequest.
type AdventureRequest_List = capnp.StructList[AdventureRequest]

// NewAdventureRequest creates a new list of AdventureRequest.
func NewAdventureRequest_List(s *capnp.Segment, sz int32) (AdventureRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureRequest](l), err
}

// AdventureRequest_Future is a wrapper for a AdventureRequest promised by a client call.
type AdventureRequest_Future struct{ *capnp.Future }

func (f AdventureRequest_Future) Struct() (AdventureRequest, error) {
	p, err := f.Future.Ptr()
	return AdventureRequest(p.Struct()), err
}

type AdventureRequestResponse capnp.Struct

// AdventureRequestResponse_TypeID is the unique identifier for the type AdventureRequestResponse.
const AdventureRequestResponse_TypeID = 0xd801819fddc5173b

func NewAdventureRequestResponse(s *capnp.Segment) (AdventureRequestResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return AdventureRequestResponse(st), err
}

func NewRootAdventureRequestResponse(s *capnp.Segment) (AdventureRequestResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return AdventureRequestResponse(st), err
}

func ReadRootAdventureRequestResponse(msg *capnp.Message) (AdventureRequestResponse, error) {
	root, err := msg.Root()
	return AdventureRequestResponse(root.Struct()), err
}

func (s AdventureRequestResponse) String() string {
	str, _ := text.Marshal(0xd801819fddc5173b, capnp.Struct(s))
	return str
}

func (s AdventureRequestResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureRequestResponse) DecodeFromPtr(p capnp.Ptr) AdventureRequestResponse {
	return AdventureRequestResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureRequestResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureRequestResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureRequestResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureRequestResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureRequestResponse) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AdventureRequestResponse) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventureRequestResponse) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AdventureRequestResponse) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AdventureRequestResponse) Timetoenter() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureRequestResponse) SetTimetoenter(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureRequestResponse) Timeleft() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureRequestResponse) SetTimeleft(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureRequestResponse) Risk() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureRequestResponse) SetRisk(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureRequestResponse) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s AdventureRequestResponse) SetX(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s AdventureRequestResponse) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s AdventureRequestResponse) SetY(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s AdventureRequestResponse) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s AdventureRequestResponse) SetZ(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s AdventureRequestResponse) Showcompass() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AdventureRequestResponse) SetShowcompass(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// AdventureRequestResponse_List is a list of AdventureRequestResponse.
type AdventureRequestResponse_List = capnp.StructList[AdventureRequestResponse]

// NewAdventureRequestResponse creates a new list of AdventureRequestResponse.
func NewAdventureRequestResponse_List(s *capnp.Segment, sz int32) (AdventureRequestResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return capnp.StructList[AdventureRequestResponse](l), err
}

// AdventureRequestResponse_Future is a wrapper for a AdventureRequestResponse promised by a client call.
type AdventureRequestResponse_Future struct{ *capnp.Future }

func (f AdventureRequestResponse_Future) Struct() (AdventureRequestResponse, error) {
	p, err := f.Future.Ptr()
	return AdventureRequestResponse(p.Struct()), err
}

type Illusion capnp.Struct

// Illusion_TypeID is the unique identifier for the type Illusion.
const Illusion_TypeID = 0xfffc6cb5879fa108

func NewIllusion(s *capnp.Segment) (Illusion, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Illusion(st), err
}

func NewRootIllusion(s *capnp.Segment) (Illusion, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Illusion(st), err
}

func ReadRootIllusion(msg *capnp.Message) (Illusion, error) {
	root, err := msg.Root()
	return Illusion(root.Struct()), err
}

func (s Illusion) String() string {
	str, _ := text.Marshal(0xfffc6cb5879fa108, capnp.Struct(s))
	return str
}

func (s Illusion) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Illusion) DecodeFromPtr(p capnp.Ptr) Illusion {
	return Illusion(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Illusion) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Illusion) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Illusion) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Illusion) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Illusion) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Illusion) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Illusion) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Illusion) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Illusion) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Illusion) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Illusion) Race() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Illusion) SetRace(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Illusion) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Illusion) SetGender(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Illusion) Texture() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Illusion) SetTexture(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Illusion) Helmtexture() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Illusion) SetHelmtexture(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Illusion) Face() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Illusion) SetFace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Illusion) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Illusion) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Illusion) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Illusion) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Illusion) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Illusion) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Illusion) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Illusion) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Illusion) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s Illusion) SetSize(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

// Illusion_List is a list of Illusion.
type Illusion_List = capnp.StructList[Illusion]

// NewIllusion creates a new list of Illusion.
func NewIllusion_List(s *capnp.Segment, sz int32) (Illusion_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Illusion](l), err
}

// Illusion_Future is a wrapper for a Illusion promised by a client call.
type Illusion_Future struct{ *capnp.Future }

func (f Illusion_Future) Struct() (Illusion, error) {
	p, err := f.Future.Ptr()
	return Illusion(p.Struct()), err
}

type SkillUpdate capnp.Struct

// SkillUpdate_TypeID is the unique identifier for the type SkillUpdate.
const SkillUpdate_TypeID = 0xdaac54598edab4df

func NewSkillUpdate(s *capnp.Segment) (SkillUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SkillUpdate(st), err
}

func NewRootSkillUpdate(s *capnp.Segment) (SkillUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SkillUpdate(st), err
}

func ReadRootSkillUpdate(msg *capnp.Message) (SkillUpdate, error) {
	root, err := msg.Root()
	return SkillUpdate(root.Struct()), err
}

func (s SkillUpdate) String() string {
	str, _ := text.Marshal(0xdaac54598edab4df, capnp.Struct(s))
	return str
}

func (s SkillUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SkillUpdate) DecodeFromPtr(p capnp.Ptr) SkillUpdate {
	return SkillUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SkillUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SkillUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SkillUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SkillUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SkillUpdate) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SkillUpdate) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SkillUpdate) Value() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SkillUpdate) SetValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SkillUpdate_List is a list of SkillUpdate.
type SkillUpdate_List = capnp.StructList[SkillUpdate]

// NewSkillUpdate creates a new list of SkillUpdate.
func NewSkillUpdate_List(s *capnp.Segment, sz int32) (SkillUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SkillUpdate](l), err
}

// SkillUpdate_Future is a wrapper for a SkillUpdate promised by a client call.
type SkillUpdate_Future struct{ *capnp.Future }

func (f SkillUpdate_Future) Struct() (SkillUpdate, error) {
	p, err := f.Future.Ptr()
	return SkillUpdate(p.Struct()), err
}

type ZoneUnavail capnp.Struct

// ZoneUnavail_TypeID is the unique identifier for the type ZoneUnavail.
const ZoneUnavail_TypeID = 0xcafb4dbd23ee299c

func NewZoneUnavail(s *capnp.Segment) (ZoneUnavail, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneUnavail(st), err
}

func NewRootZoneUnavail(s *capnp.Segment) (ZoneUnavail, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneUnavail(st), err
}

func ReadRootZoneUnavail(msg *capnp.Message) (ZoneUnavail, error) {
	root, err := msg.Root()
	return ZoneUnavail(root.Struct()), err
}

func (s ZoneUnavail) String() string {
	str, _ := text.Marshal(0xcafb4dbd23ee299c, capnp.Struct(s))
	return str
}

func (s ZoneUnavail) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneUnavail) DecodeFromPtr(p capnp.Ptr) ZoneUnavail {
	return ZoneUnavail(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneUnavail) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneUnavail) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneUnavail) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneUnavail) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneUnavail) Zonename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneUnavail) HasZonename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneUnavail) ZonenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneUnavail) SetZonename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ZoneUnavail_List is a list of ZoneUnavail.
type ZoneUnavail_List = capnp.StructList[ZoneUnavail]

// NewZoneUnavail creates a new list of ZoneUnavail.
func NewZoneUnavail_List(s *capnp.Segment, sz int32) (ZoneUnavail_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ZoneUnavail](l), err
}

// ZoneUnavail_Future is a wrapper for a ZoneUnavail promised by a client call.
type ZoneUnavail_Future struct{ *capnp.Future }

func (f ZoneUnavail_Future) Struct() (ZoneUnavail, error) {
	p, err := f.Future.Ptr()
	return ZoneUnavail(p.Struct()), err
}

type GroupGeneric capnp.Struct

// GroupGeneric_TypeID is the unique identifier for the type GroupGeneric.
const GroupGeneric_TypeID = 0xba8fb8d4d5b15836

func NewGroupGeneric(s *capnp.Segment) (GroupGeneric, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupGeneric(st), err
}

func NewRootGroupGeneric(s *capnp.Segment) (GroupGeneric, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupGeneric(st), err
}

func ReadRootGroupGeneric(msg *capnp.Message) (GroupGeneric, error) {
	root, err := msg.Root()
	return GroupGeneric(root.Struct()), err
}

func (s GroupGeneric) String() string {
	str, _ := text.Marshal(0xba8fb8d4d5b15836, capnp.Struct(s))
	return str
}

func (s GroupGeneric) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupGeneric) DecodeFromPtr(p capnp.Ptr) GroupGeneric {
	return GroupGeneric(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupGeneric) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupGeneric) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupGeneric) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupGeneric) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupGeneric) Name1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupGeneric) HasName1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupGeneric) Name1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupGeneric) SetName1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupGeneric) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupGeneric) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupGeneric) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupGeneric) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupGeneric_List is a list of GroupGeneric.
type GroupGeneric_List = capnp.StructList[GroupGeneric]

// NewGroupGeneric creates a new list of GroupGeneric.
func NewGroupGeneric_List(s *capnp.Segment, sz int32) (GroupGeneric_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GroupGeneric](l), err
}

// GroupGeneric_Future is a wrapper for a GroupGeneric promised by a client call.
type GroupGeneric_Future struct{ *capnp.Future }

func (f GroupGeneric_Future) Struct() (GroupGeneric, error) {
	p, err := f.Future.Ptr()
	return GroupGeneric(p.Struct()), err
}

type GroupCancel capnp.Struct

// GroupCancel_TypeID is the unique identifier for the type GroupCancel.
const GroupCancel_TypeID = 0x9b4767b704c3f415

func NewGroupCancel(s *capnp.Segment) (GroupCancel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupCancel(st), err
}

func NewRootGroupCancel(s *capnp.Segment) (GroupCancel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupCancel(st), err
}

func ReadRootGroupCancel(msg *capnp.Message) (GroupCancel, error) {
	root, err := msg.Root()
	return GroupCancel(root.Struct()), err
}

func (s GroupCancel) String() string {
	str, _ := text.Marshal(0x9b4767b704c3f415, capnp.Struct(s))
	return str
}

func (s GroupCancel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupCancel) DecodeFromPtr(p capnp.Ptr) GroupCancel {
	return GroupCancel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupCancel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupCancel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupCancel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupCancel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupCancel) Name1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupCancel) HasName1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupCancel) Name1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupCancel) SetName1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupCancel) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupCancel) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupCancel) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupCancel) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GroupCancel) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupCancel) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GroupCancel_List is a list of GroupCancel.
type GroupCancel_List = capnp.StructList[GroupCancel]

// NewGroupCancel creates a new list of GroupCancel.
func NewGroupCancel_List(s *capnp.Segment, sz int32) (GroupCancel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GroupCancel](l), err
}

// GroupCancel_Future is a wrapper for a GroupCancel promised by a client call.
type GroupCancel_Future struct{ *capnp.Future }

func (f GroupCancel_Future) Struct() (GroupCancel, error) {
	p, err := f.Future.Ptr()
	return GroupCancel(p.Struct()), err
}

type GroupUpdate capnp.Struct

// GroupUpdate_TypeID is the unique identifier for the type GroupUpdate.
const GroupUpdate_TypeID = 0xc6cfb8d85c850055

func NewGroupUpdate(s *capnp.Segment) (GroupUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GroupUpdate(st), err
}

func NewRootGroupUpdate(s *capnp.Segment) (GroupUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GroupUpdate(st), err
}

func ReadRootGroupUpdate(msg *capnp.Message) (GroupUpdate, error) {
	root, err := msg.Root()
	return GroupUpdate(root.Struct()), err
}

func (s GroupUpdate) String() string {
	str, _ := text.Marshal(0xc6cfb8d85c850055, capnp.Struct(s))
	return str
}

func (s GroupUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupUpdate) DecodeFromPtr(p capnp.Ptr) GroupUpdate {
	return GroupUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupUpdate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupUpdate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupUpdate) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupUpdate) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupUpdate) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupUpdate) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupUpdate) Membername() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return StringList_List(p.List()), err
}

func (s GroupUpdate) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupUpdate) SetMembername(v StringList_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembername sets the membername field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GroupUpdate) NewMembername(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GroupUpdate) Leadersname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GroupUpdate) HasLeadersname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GroupUpdate) LeadersnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GroupUpdate) SetLeadersname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GroupUpdate_List is a list of GroupUpdate.
type GroupUpdate_List = capnp.StructList[GroupUpdate]

// NewGroupUpdate creates a new list of GroupUpdate.
func NewGroupUpdate_List(s *capnp.Segment, sz int32) (GroupUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[GroupUpdate](l), err
}

// GroupUpdate_Future is a wrapper for a GroupUpdate promised by a client call.
type GroupUpdate_Future struct{ *capnp.Future }

func (f GroupUpdate_Future) Struct() (GroupUpdate, error) {
	p, err := f.Future.Ptr()
	return GroupUpdate(p.Struct()), err
}

type GroupUpdate2 capnp.Struct

// GroupUpdate2_TypeID is the unique identifier for the type GroupUpdate2.
const GroupUpdate2_TypeID = 0xd1052d0564f25e0d

func NewGroupUpdate2(s *capnp.Segment) (GroupUpdate2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return GroupUpdate2(st), err
}

func NewRootGroupUpdate2(s *capnp.Segment) (GroupUpdate2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return GroupUpdate2(st), err
}

func ReadRootGroupUpdate2(msg *capnp.Message) (GroupUpdate2, error) {
	root, err := msg.Root()
	return GroupUpdate2(root.Struct()), err
}

func (s GroupUpdate2) String() string {
	str, _ := text.Marshal(0xd1052d0564f25e0d, capnp.Struct(s))
	return str
}

func (s GroupUpdate2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupUpdate2) DecodeFromPtr(p capnp.Ptr) GroupUpdate2 {
	return GroupUpdate2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupUpdate2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupUpdate2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupUpdate2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupUpdate2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupUpdate2) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupUpdate2) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupUpdate2) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupUpdate2) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupUpdate2) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupUpdate2) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupUpdate2) Membername() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return StringList_List(p.List()), err
}

func (s GroupUpdate2) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupUpdate2) SetMembername(v StringList_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembername sets the membername field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GroupUpdate2) NewMembername(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GroupUpdate2) Leadersname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GroupUpdate2) HasLeadersname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GroupUpdate2) LeadersnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GroupUpdate2) SetLeadersname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GroupUpdate2) LeaderAas() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return GroupLeadershipAA(p.Struct()), err
}

func (s GroupUpdate2) HasLeaderAas() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GroupUpdate2) SetLeaderAas(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewLeaderAas sets the leaderAas field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s GroupUpdate2) NewLeaderAas() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GroupUpdate2_List is a list of GroupUpdate2.
type GroupUpdate2_List = capnp.StructList[GroupUpdate2]

// NewGroupUpdate2 creates a new list of GroupUpdate2.
func NewGroupUpdate2_List(s *capnp.Segment, sz int32) (GroupUpdate2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[GroupUpdate2](l), err
}

// GroupUpdate2_Future is a wrapper for a GroupUpdate2 promised by a client call.
type GroupUpdate2_Future struct{ *capnp.Future }

func (f GroupUpdate2_Future) Struct() (GroupUpdate2, error) {
	p, err := f.Future.Ptr()
	return GroupUpdate2(p.Struct()), err
}
func (p GroupUpdate2_Future) LeaderAas() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(3, nil)}
}

type GroupJoin capnp.Struct

// GroupJoin_TypeID is the unique identifier for the type GroupJoin.
const GroupJoin_TypeID = 0x880f6cbde51358e0

func NewGroupJoin(s *capnp.Segment) (GroupJoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupJoin(st), err
}

func NewRootGroupJoin(s *capnp.Segment) (GroupJoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupJoin(st), err
}

func ReadRootGroupJoin(msg *capnp.Message) (GroupJoin, error) {
	root, err := msg.Root()
	return GroupJoin(root.Struct()), err
}

func (s GroupJoin) String() string {
	str, _ := text.Marshal(0x880f6cbde51358e0, capnp.Struct(s))
	return str
}

func (s GroupJoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupJoin) DecodeFromPtr(p capnp.Ptr) GroupJoin {
	return GroupJoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupJoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupJoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupJoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupJoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupJoin) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupJoin) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupJoin) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupJoin) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupJoin) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupJoin) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupJoin) Membername() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupJoin) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupJoin) MembernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupJoin) SetMembername(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupJoin_List is a list of GroupJoin.
type GroupJoin_List = capnp.StructList[GroupJoin]

// NewGroupJoin creates a new list of GroupJoin.
func NewGroupJoin_List(s *capnp.Segment, sz int32) (GroupJoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GroupJoin](l), err
}

// GroupJoin_Future is a wrapper for a GroupJoin promised by a client call.
type GroupJoin_Future struct{ *capnp.Future }

func (f GroupJoin_Future) Struct() (GroupJoin, error) {
	p, err := f.Future.Ptr()
	return GroupJoin(p.Struct()), err
}

type FaceChange capnp.Struct

// FaceChange_TypeID is the unique identifier for the type FaceChange.
const FaceChange_TypeID = 0xd8b98b1d67fe28a2

func NewFaceChange(s *capnp.Segment) (FaceChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return FaceChange(st), err
}

func NewRootFaceChange(s *capnp.Segment) (FaceChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return FaceChange(st), err
}

func ReadRootFaceChange(msg *capnp.Message) (FaceChange, error) {
	root, err := msg.Root()
	return FaceChange(root.Struct()), err
}

func (s FaceChange) String() string {
	str, _ := text.Marshal(0xd8b98b1d67fe28a2, capnp.Struct(s))
	return str
}

func (s FaceChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FaceChange) DecodeFromPtr(p capnp.Ptr) FaceChange {
	return FaceChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FaceChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FaceChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FaceChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FaceChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FaceChange) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FaceChange) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FaceChange) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FaceChange) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s FaceChange) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s FaceChange) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s FaceChange) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s FaceChange) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s FaceChange) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s FaceChange) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s FaceChange) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s FaceChange) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s FaceChange) Face() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s FaceChange) SetFace(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// FaceChange_List is a list of FaceChange.
type FaceChange_List = capnp.StructList[FaceChange]

// NewFaceChange creates a new list of FaceChange.
func NewFaceChange_List(s *capnp.Segment, sz int32) (FaceChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[FaceChange](l), err
}

// FaceChange_Future is a wrapper for a FaceChange promised by a client call.
type FaceChange_Future struct{ *capnp.Future }

func (f FaceChange_Future) Struct() (FaceChange, error) {
	p, err := f.Future.Ptr()
	return FaceChange(p.Struct()), err
}

type TradeRequest capnp.Struct

// TradeRequest_TypeID is the unique identifier for the type TradeRequest.
const TradeRequest_TypeID = 0xdbc10a1e045d6bed

func NewTradeRequest(s *capnp.Segment) (TradeRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeRequest(st), err
}

func NewRootTradeRequest(s *capnp.Segment) (TradeRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeRequest(st), err
}

func ReadRootTradeRequest(msg *capnp.Message) (TradeRequest, error) {
	root, err := msg.Root()
	return TradeRequest(root.Struct()), err
}

func (s TradeRequest) String() string {
	str, _ := text.Marshal(0xdbc10a1e045d6bed, capnp.Struct(s))
	return str
}

func (s TradeRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeRequest) DecodeFromPtr(p capnp.Ptr) TradeRequest {
	return TradeRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeRequest) ToMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeRequest) SetToMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeRequest) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeRequest) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TradeRequest_List is a list of TradeRequest.
type TradeRequest_List = capnp.StructList[TradeRequest]

// NewTradeRequest creates a new list of TradeRequest.
func NewTradeRequest_List(s *capnp.Segment, sz int32) (TradeRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeRequest](l), err
}

// TradeRequest_Future is a wrapper for a TradeRequest promised by a client call.
type TradeRequest_Future struct{ *capnp.Future }

func (f TradeRequest_Future) Struct() (TradeRequest, error) {
	p, err := f.Future.Ptr()
	return TradeRequest(p.Struct()), err
}

type TradeAccept capnp.Struct

// TradeAccept_TypeID is the unique identifier for the type TradeAccept.
const TradeAccept_TypeID = 0xfa5626b7b9dcd44b

func NewTradeAccept(s *capnp.Segment) (TradeAccept, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeAccept(st), err
}

func NewRootTradeAccept(s *capnp.Segment) (TradeAccept, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeAccept(st), err
}

func ReadRootTradeAccept(msg *capnp.Message) (TradeAccept, error) {
	root, err := msg.Root()
	return TradeAccept(root.Struct()), err
}

func (s TradeAccept) String() string {
	str, _ := text.Marshal(0xfa5626b7b9dcd44b, capnp.Struct(s))
	return str
}

func (s TradeAccept) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeAccept) DecodeFromPtr(p capnp.Ptr) TradeAccept {
	return TradeAccept(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeAccept) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeAccept) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeAccept) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeAccept) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeAccept) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeAccept) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// TradeAccept_List is a list of TradeAccept.
type TradeAccept_List = capnp.StructList[TradeAccept]

// NewTradeAccept creates a new list of TradeAccept.
func NewTradeAccept_List(s *capnp.Segment, sz int32) (TradeAccept_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeAccept](l), err
}

// TradeAccept_Future is a wrapper for a TradeAccept promised by a client call.
type TradeAccept_Future struct{ *capnp.Future }

func (f TradeAccept_Future) Struct() (TradeAccept, error) {
	p, err := f.Future.Ptr()
	return TradeAccept(p.Struct()), err
}

type CancelTrade capnp.Struct

// CancelTrade_TypeID is the unique identifier for the type CancelTrade.
const CancelTrade_TypeID = 0xb7f9da429e0872e9

func NewCancelTrade(s *capnp.Segment) (CancelTrade, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CancelTrade(st), err
}

func NewRootCancelTrade(s *capnp.Segment) (CancelTrade, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CancelTrade(st), err
}

func ReadRootCancelTrade(msg *capnp.Message) (CancelTrade, error) {
	root, err := msg.Root()
	return CancelTrade(root.Struct()), err
}

func (s CancelTrade) String() string {
	str, _ := text.Marshal(0xb7f9da429e0872e9, capnp.Struct(s))
	return str
}

func (s CancelTrade) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CancelTrade) DecodeFromPtr(p capnp.Ptr) CancelTrade {
	return CancelTrade(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CancelTrade) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CancelTrade) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CancelTrade) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CancelTrade) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CancelTrade) Fromid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CancelTrade) SetFromid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CancelTrade) Action() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CancelTrade) SetAction(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// CancelTrade_List is a list of CancelTrade.
type CancelTrade_List = capnp.StructList[CancelTrade]

// NewCancelTrade creates a new list of CancelTrade.
func NewCancelTrade_List(s *capnp.Segment, sz int32) (CancelTrade_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CancelTrade](l), err
}

// CancelTrade_Future is a wrapper for a CancelTrade promised by a client call.
type CancelTrade_Future struct{ *capnp.Future }

func (f CancelTrade_Future) Struct() (CancelTrade, error) {
	p, err := f.Future.Ptr()
	return CancelTrade(p.Struct()), err
}

type PetitionUpdate capnp.Struct

// PetitionUpdate_TypeID is the unique identifier for the type PetitionUpdate.
const PetitionUpdate_TypeID = 0xfab5a20f1d337f75

func NewPetitionUpdate(s *capnp.Segment) (PetitionUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return PetitionUpdate(st), err
}

func NewRootPetitionUpdate(s *capnp.Segment) (PetitionUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return PetitionUpdate(st), err
}

func ReadRootPetitionUpdate(msg *capnp.Message) (PetitionUpdate, error) {
	root, err := msg.Root()
	return PetitionUpdate(root.Struct()), err
}

func (s PetitionUpdate) String() string {
	str, _ := text.Marshal(0xfab5a20f1d337f75, capnp.Struct(s))
	return str
}

func (s PetitionUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PetitionUpdate) DecodeFromPtr(p capnp.Ptr) PetitionUpdate {
	return PetitionUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PetitionUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PetitionUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PetitionUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PetitionUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PetitionUpdate) Petnumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PetitionUpdate) SetPetnumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PetitionUpdate) Color() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PetitionUpdate) SetColor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PetitionUpdate) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PetitionUpdate) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PetitionUpdate) Senttime() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PetitionUpdate) SetSenttime(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PetitionUpdate) Accountid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PetitionUpdate) HasAccountid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PetitionUpdate) AccountidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetAccountid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PetitionUpdate) Gmsenttoo() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s PetitionUpdate) HasGmsenttoo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PetitionUpdate) GmsenttooBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetGmsenttoo(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s PetitionUpdate) Quetotal() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PetitionUpdate) SetQuetotal(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PetitionUpdate) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s PetitionUpdate) HasCharname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s PetitionUpdate) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetCharname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// PetitionUpdate_List is a list of PetitionUpdate.
type PetitionUpdate_List = capnp.StructList[PetitionUpdate]

// NewPetitionUpdate creates a new list of PetitionUpdate.
func NewPetitionUpdate_List(s *capnp.Segment, sz int32) (PetitionUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[PetitionUpdate](l), err
}

// PetitionUpdate_Future is a wrapper for a PetitionUpdate promised by a client call.
type PetitionUpdate_Future struct{ *capnp.Future }

func (f PetitionUpdate_Future) Struct() (PetitionUpdate, error) {
	p, err := f.Future.Ptr()
	return PetitionUpdate(p.Struct()), err
}

type Petition capnp.Struct

// Petition_TypeID is the unique identifier for the type Petition.
const Petition_TypeID = 0x87d72af46493bddd

func NewPetition(s *capnp.Segment) (Petition, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return Petition(st), err
}

func NewRootPetition(s *capnp.Segment) (Petition, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return Petition(st), err
}

func ReadRootPetition(msg *capnp.Message) (Petition, error) {
	root, err := msg.Root()
	return Petition(root.Struct()), err
}

func (s Petition) String() string {
	str, _ := text.Marshal(0x87d72af46493bddd, capnp.Struct(s))
	return str
}

func (s Petition) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Petition) DecodeFromPtr(p capnp.Ptr) Petition {
	return Petition(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Petition) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Petition) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Petition) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Petition) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Petition) Petnumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Petition) SetPetnumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Petition) Urgency() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Petition) SetUrgency(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Petition) Accountid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Petition) HasAccountid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Petition) AccountidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Petition) SetAccountid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Petition) Lastgm() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Petition) HasLastgm() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Petition) LastgmBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Petition) SetLastgm(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Petition) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Petition) SetZone(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Petition) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Petition) HasCharname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Petition) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Petition) SetCharname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Petition) Charlevel() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Petition) SetCharlevel(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Petition) Charclass() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Petition) SetCharclass(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Petition) Charrace() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Petition) SetCharrace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Petition) Checkouts() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Petition) SetCheckouts(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Petition) Unavail() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Petition) SetUnavail(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Petition) Senttime() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Petition) SetSenttime(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Petition) Petitiontext() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Petition) HasPetitiontext() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Petition) PetitiontextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Petition) SetPetitiontext(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Petition) Gmtext() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Petition) HasGmtext() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Petition) GmtextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Petition) SetGmtext(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// Petition_List is a list of Petition.
type Petition_List = capnp.StructList[Petition]

// NewPetition creates a new list of Petition.
func NewPetition_List(s *capnp.Segment, sz int32) (Petition_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5}, sz)
	return capnp.StructList[Petition](l), err
}

// Petition_Future is a wrapper for a Petition promised by a client call.
type Petition_Future struct{ *capnp.Future }

func (f Petition_Future) Struct() (Petition, error) {
	p, err := f.Future.Ptr()
	return Petition(p.Struct()), err
}

type WhoAll capnp.Struct

// WhoAll_TypeID is the unique identifier for the type WhoAll.
const WhoAll_TypeID = 0xb513764d5512a334

func NewWhoAll(s *capnp.Segment) (WhoAll, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return WhoAll(st), err
}

func NewRootWhoAll(s *capnp.Segment) (WhoAll, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return WhoAll(st), err
}

func ReadRootWhoAll(msg *capnp.Message) (WhoAll, error) {
	root, err := msg.Root()
	return WhoAll(root.Struct()), err
}

func (s WhoAll) String() string {
	str, _ := text.Marshal(0xb513764d5512a334, capnp.Struct(s))
	return str
}

func (s WhoAll) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAll) DecodeFromPtr(p capnp.Ptr) WhoAll {
	return WhoAll(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAll) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAll) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAll) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAll) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAll) Whom() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAll) HasWhom() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAll) WhomBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAll) SetWhom(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAll) Wrace() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAll) SetWrace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAll) Wclass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAll) SetWclass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAll) Lvllow() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAll) SetLvllow(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAll) Lvlhigh() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAll) SetLvlhigh(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAll) Gmlookup() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s WhoAll) SetGmlookup(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// WhoAll_List is a list of WhoAll.
type WhoAll_List = capnp.StructList[WhoAll]

// NewWhoAll creates a new list of WhoAll.
func NewWhoAll_List(s *capnp.Segment, sz int32) (WhoAll_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[WhoAll](l), err
}

// WhoAll_Future is a wrapper for a WhoAll promised by a client call.
type WhoAll_Future struct{ *capnp.Future }

func (f WhoAll_Future) Struct() (WhoAll, error) {
	p, err := f.Future.Ptr()
	return WhoAll(p.Struct()), err
}

type Stun capnp.Struct

// Stun_TypeID is the unique identifier for the type Stun.
const Stun_TypeID = 0x88007635e342bb94

func NewStun(s *capnp.Segment) (Stun, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stun(st), err
}

func NewRootStun(s *capnp.Segment) (Stun, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stun(st), err
}

func ReadRootStun(msg *capnp.Message) (Stun, error) {
	root, err := msg.Root()
	return Stun(root.Struct()), err
}

func (s Stun) String() string {
	str, _ := text.Marshal(0x88007635e342bb94, capnp.Struct(s))
	return str
}

func (s Stun) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stun) DecodeFromPtr(p capnp.Ptr) Stun {
	return Stun(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stun) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stun) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stun) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stun) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stun) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Stun) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Stun_List is a list of Stun.
type Stun_List = capnp.StructList[Stun]

// NewStun creates a new list of Stun.
func NewStun_List(s *capnp.Segment, sz int32) (Stun_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Stun](l), err
}

// Stun_Future is a wrapper for a Stun promised by a client call.
type Stun_Future struct{ *capnp.Future }

func (f Stun_Future) Struct() (Stun, error) {
	p, err := f.Future.Ptr()
	return Stun(p.Struct()), err
}

type AugmentItem capnp.Struct

// AugmentItem_TypeID is the unique identifier for the type AugmentItem.
const AugmentItem_TypeID = 0xe5205955ce643ade

func NewAugmentItem(s *capnp.Segment) (AugmentItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AugmentItem(st), err
}

func NewRootAugmentItem(s *capnp.Segment) (AugmentItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AugmentItem(st), err
}

func ReadRootAugmentItem(msg *capnp.Message) (AugmentItem, error) {
	root, err := msg.Root()
	return AugmentItem(root.Struct()), err
}

func (s AugmentItem) String() string {
	str, _ := text.Marshal(0xe5205955ce643ade, capnp.Struct(s))
	return str
}

func (s AugmentItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AugmentItem) DecodeFromPtr(p capnp.Ptr) AugmentItem {
	return AugmentItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AugmentItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AugmentItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AugmentItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AugmentItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AugmentItem) ContainerSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AugmentItem) SetContainerSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AugmentItem) AugmentSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AugmentItem) SetAugmentSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AugmentItem_List is a list of AugmentItem.
type AugmentItem_List = capnp.StructList[AugmentItem]

// NewAugmentItem creates a new list of AugmentItem.
func NewAugmentItem_List(s *capnp.Segment, sz int32) (AugmentItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AugmentItem](l), err
}

// AugmentItem_Future is a wrapper for a AugmentItem promised by a client call.
type AugmentItem_Future struct{ *capnp.Future }

func (f AugmentItem_Future) Struct() (AugmentItem, error) {
	p, err := f.Future.Ptr()
	return AugmentItem(p.Struct()), err
}

type Emote capnp.Struct

// Emote_TypeID is the unique identifier for the type Emote.
const Emote_TypeID = 0xcff0b4cd24d99860

func NewEmote(s *capnp.Segment) (Emote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Emote(st), err
}

func NewRootEmote(s *capnp.Segment) (Emote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Emote(st), err
}

func ReadRootEmote(msg *capnp.Message) (Emote, error) {
	root, err := msg.Root()
	return Emote(root.Struct()), err
}

func (s Emote) String() string {
	str, _ := text.Marshal(0xcff0b4cd24d99860, capnp.Struct(s))
	return str
}

func (s Emote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Emote) DecodeFromPtr(p capnp.Ptr) Emote {
	return Emote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Emote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Emote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Emote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Emote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Emote) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Emote) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Emote) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Emote) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Emote_List is a list of Emote.
type Emote_List = capnp.StructList[Emote]

// NewEmote creates a new list of Emote.
func NewEmote_List(s *capnp.Segment, sz int32) (Emote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Emote](l), err
}

// Emote_Future is a wrapper for a Emote promised by a client call.
type Emote_Future struct{ *capnp.Future }

func (f Emote_Future) Struct() (Emote, error) {
	p, err := f.Future.Ptr()
	return Emote(p.Struct()), err
}

type Inspect capnp.Struct

// Inspect_TypeID is the unique identifier for the type Inspect.
const Inspect_TypeID = 0x8169b9320fb13d79

func NewInspect(s *capnp.Segment) (Inspect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Inspect(st), err
}

func NewRootInspect(s *capnp.Segment) (Inspect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Inspect(st), err
}

func ReadRootInspect(msg *capnp.Message) (Inspect, error) {
	root, err := msg.Root()
	return Inspect(root.Struct()), err
}

func (s Inspect) String() string {
	str, _ := text.Marshal(0x8169b9320fb13d79, capnp.Struct(s))
	return str
}

func (s Inspect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Inspect) DecodeFromPtr(p capnp.Ptr) Inspect {
	return Inspect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Inspect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Inspect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Inspect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Inspect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Inspect) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Inspect) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Inspect) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Inspect) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Inspect_List is a list of Inspect.
type Inspect_List = capnp.StructList[Inspect]

// NewInspect creates a new list of Inspect.
func NewInspect_List(s *capnp.Segment, sz int32) (Inspect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Inspect](l), err
}

// Inspect_Future is a wrapper for a Inspect promised by a client call.
type Inspect_Future struct{ *capnp.Future }

func (f Inspect_Future) Struct() (Inspect, error) {
	p, err := f.Future.Ptr()
	return Inspect(p.Struct()), err
}

type InspectResponse capnp.Struct

// InspectResponse_TypeID is the unique identifier for the type InspectResponse.
const InspectResponse_TypeID = 0x9f325734076f5253

func NewInspectResponse(s *capnp.Segment) (InspectResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InspectResponse(st), err
}

func NewRootInspectResponse(s *capnp.Segment) (InspectResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InspectResponse(st), err
}

func ReadRootInspectResponse(msg *capnp.Message) (InspectResponse, error) {
	root, err := msg.Root()
	return InspectResponse(root.Struct()), err
}

func (s InspectResponse) String() string {
	str, _ := text.Marshal(0x9f325734076f5253, capnp.Struct(s))
	return str
}

func (s InspectResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InspectResponse) DecodeFromPtr(p capnp.Ptr) InspectResponse {
	return InspectResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InspectResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InspectResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InspectResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InspectResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InspectResponse) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InspectResponse) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InspectResponse) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InspectResponse) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InspectResponse) Itemnames() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return StringList_List(p.List()), err
}

func (s InspectResponse) HasItemnames() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InspectResponse) SetItemnames(v StringList_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemnames sets the itemnames field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s InspectResponse) NewItemnames(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s InspectResponse) Itemicons() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s InspectResponse) HasItemicons() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InspectResponse) SetItemicons(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItemicons sets the itemicons field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s InspectResponse) NewItemicons(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s InspectResponse) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s InspectResponse) HasText() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InspectResponse) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s InspectResponse) SetText(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// InspectResponse_List is a list of InspectResponse.
type InspectResponse_List = capnp.StructList[InspectResponse]

// NewInspectResponse creates a new list of InspectResponse.
func NewInspectResponse_List(s *capnp.Segment, sz int32) (InspectResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[InspectResponse](l), err
}

// InspectResponse_Future is a wrapper for a InspectResponse promised by a client call.
type InspectResponse_Future struct{ *capnp.Future }

func (f InspectResponse_Future) Struct() (InspectResponse, error) {
	p, err := f.Future.Ptr()
	return InspectResponse(p.Struct()), err
}

type SetDataRate capnp.Struct

// SetDataRate_TypeID is the unique identifier for the type SetDataRate.
const SetDataRate_TypeID = 0xe8dc5ddc1cdb5438

func NewSetDataRate(s *capnp.Segment) (SetDataRate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetDataRate(st), err
}

func NewRootSetDataRate(s *capnp.Segment) (SetDataRate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetDataRate(st), err
}

func ReadRootSetDataRate(msg *capnp.Message) (SetDataRate, error) {
	root, err := msg.Root()
	return SetDataRate(root.Struct()), err
}

func (s SetDataRate) String() string {
	str, _ := text.Marshal(0xe8dc5ddc1cdb5438, capnp.Struct(s))
	return str
}

func (s SetDataRate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetDataRate) DecodeFromPtr(p capnp.Ptr) SetDataRate {
	return SetDataRate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetDataRate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetDataRate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetDataRate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetDataRate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetDataRate) Newdatarate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s SetDataRate) SetNewdatarate(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// SetDataRate_List is a list of SetDataRate.
type SetDataRate_List = capnp.StructList[SetDataRate]

// NewSetDataRate creates a new list of SetDataRate.
func NewSetDataRate_List(s *capnp.Segment, sz int32) (SetDataRate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetDataRate](l), err
}

// SetDataRate_Future is a wrapper for a SetDataRate promised by a client call.
type SetDataRate_Future struct{ *capnp.Future }

func (f SetDataRate_Future) Struct() (SetDataRate, error) {
	p, err := f.Future.Ptr()
	return SetDataRate(p.Struct()), err
}

type SetServerFilter capnp.Struct

// SetServerFilter_TypeID is the unique identifier for the type SetServerFilter.
const SetServerFilter_TypeID = 0x8acccc8118bd1f80

func NewSetServerFilter(s *capnp.Segment) (SetServerFilter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilter(st), err
}

func NewRootSetServerFilter(s *capnp.Segment) (SetServerFilter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilter(st), err
}

func ReadRootSetServerFilter(msg *capnp.Message) (SetServerFilter, error) {
	root, err := msg.Root()
	return SetServerFilter(root.Struct()), err
}

func (s SetServerFilter) String() string {
	str, _ := text.Marshal(0x8acccc8118bd1f80, capnp.Struct(s))
	return str
}

func (s SetServerFilter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetServerFilter) DecodeFromPtr(p capnp.Ptr) SetServerFilter {
	return SetServerFilter(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetServerFilter) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetServerFilter) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetServerFilter) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetServerFilter) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetServerFilter) Filters() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s SetServerFilter) HasFilters() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetServerFilter) SetFilters(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFilters sets the filters field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s SetServerFilter) NewFilters(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SetServerFilter_List is a list of SetServerFilter.
type SetServerFilter_List = capnp.StructList[SetServerFilter]

// NewSetServerFilter creates a new list of SetServerFilter.
func NewSetServerFilter_List(s *capnp.Segment, sz int32) (SetServerFilter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SetServerFilter](l), err
}

// SetServerFilter_Future is a wrapper for a SetServerFilter promised by a client call.
type SetServerFilter_Future struct{ *capnp.Future }

func (f SetServerFilter_Future) Struct() (SetServerFilter, error) {
	p, err := f.Future.Ptr()
	return SetServerFilter(p.Struct()), err
}

type SetServerFilterAck capnp.Struct

// SetServerFilterAck_TypeID is the unique identifier for the type SetServerFilterAck.
const SetServerFilterAck_TypeID = 0xb2ea7b1704b448ca

func NewSetServerFilterAck(s *capnp.Segment) (SetServerFilterAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilterAck(st), err
}

func NewRootSetServerFilterAck(s *capnp.Segment) (SetServerFilterAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilterAck(st), err
}

func ReadRootSetServerFilterAck(msg *capnp.Message) (SetServerFilterAck, error) {
	root, err := msg.Root()
	return SetServerFilterAck(root.Struct()), err
}

func (s SetServerFilterAck) String() string {
	str, _ := text.Marshal(0xb2ea7b1704b448ca, capnp.Struct(s))
	return str
}

func (s SetServerFilterAck) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetServerFilterAck) DecodeFromPtr(p capnp.Ptr) SetServerFilterAck {
	return SetServerFilterAck(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetServerFilterAck) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetServerFilterAck) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetServerFilterAck) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetServerFilterAck) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetServerFilterAck) Blank() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s SetServerFilterAck) HasBlank() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetServerFilterAck) SetBlank(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBlank sets the blank field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s SetServerFilterAck) NewBlank(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SetServerFilterAck_List is a list of SetServerFilterAck.
type SetServerFilterAck_List = capnp.StructList[SetServerFilterAck]

// NewSetServerFilterAck creates a new list of SetServerFilterAck.
func NewSetServerFilterAck_List(s *capnp.Segment, sz int32) (SetServerFilterAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SetServerFilterAck](l), err
}

// SetServerFilterAck_Future is a wrapper for a SetServerFilterAck promised by a client call.
type SetServerFilterAck_Future struct{ *capnp.Future }

func (f SetServerFilterAck_Future) Struct() (SetServerFilterAck, error) {
	p, err := f.Future.Ptr()
	return SetServerFilterAck(p.Struct()), err
}

type IncreaseStat capnp.Struct

// IncreaseStat_TypeID is the unique identifier for the type IncreaseStat.
const IncreaseStat_TypeID = 0xf1cccb02e7af0dd8

func NewIncreaseStat(s *capnp.Segment) (IncreaseStat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0})
	return IncreaseStat(st), err
}

func NewRootIncreaseStat(s *capnp.Segment) (IncreaseStat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0})
	return IncreaseStat(st), err
}

func ReadRootIncreaseStat(msg *capnp.Message) (IncreaseStat, error) {
	root, err := msg.Root()
	return IncreaseStat(root.Struct()), err
}

func (s IncreaseStat) String() string {
	str, _ := text.Marshal(0xf1cccb02e7af0dd8, capnp.Struct(s))
	return str
}

func (s IncreaseStat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IncreaseStat) DecodeFromPtr(p capnp.Ptr) IncreaseStat {
	return IncreaseStat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IncreaseStat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IncreaseStat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IncreaseStat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IncreaseStat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IncreaseStat) Str() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s IncreaseStat) SetStr(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s IncreaseStat) Sta() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s IncreaseStat) SetSta(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s IncreaseStat) Agi() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s IncreaseStat) SetAgi(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s IncreaseStat) Dex() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s IncreaseStat) SetDex(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s IncreaseStat) Int() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s IncreaseStat) SetInt(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s IncreaseStat) Wis() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s IncreaseStat) SetWis(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s IncreaseStat) Cha() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s IncreaseStat) SetCha(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s IncreaseStat) Fire() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s IncreaseStat) SetFire(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s IncreaseStat) Cold() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s IncreaseStat) SetCold(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s IncreaseStat) Magic() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s IncreaseStat) SetMagic(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s IncreaseStat) Poison() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s IncreaseStat) SetPoison(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s IncreaseStat) Disease() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s IncreaseStat) SetDisease(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s IncreaseStat) Str2() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s IncreaseStat) SetStr2(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s IncreaseStat) Sta2() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s IncreaseStat) SetSta2(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s IncreaseStat) Agi2() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s IncreaseStat) SetAgi2(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s IncreaseStat) Dex2() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s IncreaseStat) SetDex2(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s IncreaseStat) Int2() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s IncreaseStat) SetInt2(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s IncreaseStat) Wis2() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s IncreaseStat) SetWis2(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s IncreaseStat) Cha2() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s IncreaseStat) SetCha2(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s IncreaseStat) Fire2() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s IncreaseStat) SetFire2(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s IncreaseStat) Cold2() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s IncreaseStat) SetCold2(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s IncreaseStat) Magic2() int32 {
	return int32(capnp.Struct(s).Uint32(84))
}

func (s IncreaseStat) SetMagic2(v int32) {
	capnp.Struct(s).SetUint32(84, uint32(v))
}

func (s IncreaseStat) Poison2() int32 {
	return int32(capnp.Struct(s).Uint32(88))
}

func (s IncreaseStat) SetPoison2(v int32) {
	capnp.Struct(s).SetUint32(88, uint32(v))
}

func (s IncreaseStat) Disease2() int32 {
	return int32(capnp.Struct(s).Uint32(92))
}

func (s IncreaseStat) SetDisease2(v int32) {
	capnp.Struct(s).SetUint32(92, uint32(v))
}

// IncreaseStat_List is a list of IncreaseStat.
type IncreaseStat_List = capnp.StructList[IncreaseStat]

// NewIncreaseStat creates a new list of IncreaseStat.
func NewIncreaseStat_List(s *capnp.Segment, sz int32) (IncreaseStat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0}, sz)
	return capnp.StructList[IncreaseStat](l), err
}

// IncreaseStat_Future is a wrapper for a IncreaseStat promised by a client call.
type IncreaseStat_Future struct{ *capnp.Future }

func (f IncreaseStat_Future) Struct() (IncreaseStat, error) {
	p, err := f.Future.Ptr()
	return IncreaseStat(p.Struct()), err
}

type GMName capnp.Struct

// GMName_TypeID is the unique identifier for the type GMName.
const GMName_TypeID = 0x84ae33ececbdf2f2

func NewGMName(s *capnp.Segment) (GMName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GMName(st), err
}

func NewRootGMName(s *capnp.Segment) (GMName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GMName(st), err
}

func ReadRootGMName(msg *capnp.Message) (GMName, error) {
	root, err := msg.Root()
	return GMName(root.Struct()), err
}

func (s GMName) String() string {
	str, _ := text.Marshal(0x84ae33ececbdf2f2, capnp.Struct(s))
	return str
}

func (s GMName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMName) DecodeFromPtr(p capnp.Ptr) GMName {
	return GMName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMName) Oldname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMName) HasOldname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMName) OldnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMName) SetOldname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMName) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMName) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMName) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMName) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMName) Newname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GMName) HasNewname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GMName) NewnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GMName) SetNewname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GMName) Badname() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMName) SetBadname(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GMName_List is a list of GMName.
type GMName_List = capnp.StructList[GMName]

// NewGMName creates a new list of GMName.
func NewGMName_List(s *capnp.Segment, sz int32) (GMName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[GMName](l), err
}

// GMName_Future is a wrapper for a GMName promised by a client call.
type GMName_Future struct{ *capnp.Future }

func (f GMName_Future) Struct() (GMName, error) {
	p, err := f.Future.Ptr()
	return GMName(p.Struct()), err
}

type GMDelCorpse capnp.Struct

// GMDelCorpse_TypeID is the unique identifier for the type GMDelCorpse.
const GMDelCorpse_TypeID = 0xeafef4c5dcc4b5b5

func NewGMDelCorpse(s *capnp.Segment) (GMDelCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMDelCorpse(st), err
}

func NewRootGMDelCorpse(s *capnp.Segment) (GMDelCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMDelCorpse(st), err
}

func ReadRootGMDelCorpse(msg *capnp.Message) (GMDelCorpse, error) {
	root, err := msg.Root()
	return GMDelCorpse(root.Struct()), err
}

func (s GMDelCorpse) String() string {
	str, _ := text.Marshal(0xeafef4c5dcc4b5b5, capnp.Struct(s))
	return str
}

func (s GMDelCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMDelCorpse) DecodeFromPtr(p capnp.Ptr) GMDelCorpse {
	return GMDelCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMDelCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMDelCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMDelCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMDelCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMDelCorpse) Corpsename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMDelCorpse) HasCorpsename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMDelCorpse) CorpsenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMDelCorpse) SetCorpsename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMDelCorpse) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMDelCorpse) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMDelCorpse) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMDelCorpse) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMDelCorpse_List is a list of GMDelCorpse.
type GMDelCorpse_List = capnp.StructList[GMDelCorpse]

// NewGMDelCorpse creates a new list of GMDelCorpse.
func NewGMDelCorpse_List(s *capnp.Segment, sz int32) (GMDelCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMDelCorpse](l), err
}

// GMDelCorpse_Future is a wrapper for a GMDelCorpse promised by a client call.
type GMDelCorpse_Future struct{ *capnp.Future }

func (f GMDelCorpse_Future) Struct() (GMDelCorpse, error) {
	p, err := f.Future.Ptr()
	return GMDelCorpse(p.Struct()), err
}

type GMKick capnp.Struct

// GMKick_TypeID is the unique identifier for the type GMKick.
const GMKick_TypeID = 0xb7c78f3b8eaa6d37

func NewGMKick(s *capnp.Segment) (GMKick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKick(st), err
}

func NewRootGMKick(s *capnp.Segment) (GMKick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKick(st), err
}

func ReadRootGMKick(msg *capnp.Message) (GMKick, error) {
	root, err := msg.Root()
	return GMKick(root.Struct()), err
}

func (s GMKick) String() string {
	str, _ := text.Marshal(0xb7c78f3b8eaa6d37, capnp.Struct(s))
	return str
}

func (s GMKick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMKick) DecodeFromPtr(p capnp.Ptr) GMKick {
	return GMKick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMKick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMKick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMKick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMKick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMKick) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMKick) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMKick) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMKick) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMKick) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMKick) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMKick) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMKick) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMKick_List is a list of GMKick.
type GMKick_List = capnp.StructList[GMKick]

// NewGMKick creates a new list of GMKick.
func NewGMKick_List(s *capnp.Segment, sz int32) (GMKick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMKick](l), err
}

// GMKick_Future is a wrapper for a GMKick promised by a client call.
type GMKick_Future struct{ *capnp.Future }

func (f GMKick_Future) Struct() (GMKick, error) {
	p, err := f.Future.Ptr()
	return GMKick(p.Struct()), err
}

type GMKill capnp.Struct

// GMKill_TypeID is the unique identifier for the type GMKill.
const GMKill_TypeID = 0xf047782143ce741d

func NewGMKill(s *capnp.Segment) (GMKill, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKill(st), err
}

func NewRootGMKill(s *capnp.Segment) (GMKill, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKill(st), err
}

func ReadRootGMKill(msg *capnp.Message) (GMKill, error) {
	root, err := msg.Root()
	return GMKill(root.Struct()), err
}

func (s GMKill) String() string {
	str, _ := text.Marshal(0xf047782143ce741d, capnp.Struct(s))
	return str
}

func (s GMKill) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMKill) DecodeFromPtr(p capnp.Ptr) GMKill {
	return GMKill(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMKill) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMKill) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMKill) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMKill) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMKill) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMKill) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMKill) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMKill) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMKill) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMKill) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMKill) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMKill) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMKill_List is a list of GMKill.
type GMKill_List = capnp.StructList[GMKill]

// NewGMKill creates a new list of GMKill.
func NewGMKill_List(s *capnp.Segment, sz int32) (GMKill_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMKill](l), err
}

// GMKill_Future is a wrapper for a GMKill promised by a client call.
type GMKill_Future struct{ *capnp.Future }

func (f GMKill_Future) Struct() (GMKill, error) {
	p, err := f.Future.Ptr()
	return GMKill(p.Struct()), err
}

type GMEmoteZone capnp.Struct

// GMEmoteZone_TypeID is the unique identifier for the type GMEmoteZone.
const GMEmoteZone_TypeID = 0x82e8c67d0acc92ee

func NewGMEmoteZone(s *capnp.Segment) (GMEmoteZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GMEmoteZone(st), err
}

func NewRootGMEmoteZone(s *capnp.Segment) (GMEmoteZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GMEmoteZone(st), err
}

func ReadRootGMEmoteZone(msg *capnp.Message) (GMEmoteZone, error) {
	root, err := msg.Root()
	return GMEmoteZone(root.Struct()), err
}

func (s GMEmoteZone) String() string {
	str, _ := text.Marshal(0x82e8c67d0acc92ee, capnp.Struct(s))
	return str
}

func (s GMEmoteZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMEmoteZone) DecodeFromPtr(p capnp.Ptr) GMEmoteZone {
	return GMEmoteZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMEmoteZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMEmoteZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMEmoteZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMEmoteZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMEmoteZone) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMEmoteZone) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMEmoteZone) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMEmoteZone) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GMEmoteZone_List is a list of GMEmoteZone.
type GMEmoteZone_List = capnp.StructList[GMEmoteZone]

// NewGMEmoteZone creates a new list of GMEmoteZone.
func NewGMEmoteZone_List(s *capnp.Segment, sz int32) (GMEmoteZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GMEmoteZone](l), err
}

// GMEmoteZone_Future is a wrapper for a GMEmoteZone promised by a client call.
type GMEmoteZone_Future struct{ *capnp.Future }

func (f GMEmoteZone_Future) Struct() (GMEmoteZone, error) {
	p, err := f.Future.Ptr()
	return GMEmoteZone(p.Struct()), err
}

type BookText capnp.Struct

// BookText_TypeID is the unique identifier for the type BookText.
const BookText_TypeID = 0xb854b850a845d36e

func NewBookText(s *capnp.Segment) (BookText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookText(st), err
}

func NewRootBookText(s *capnp.Segment) (BookText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookText(st), err
}

func ReadRootBookText(msg *capnp.Message) (BookText, error) {
	root, err := msg.Root()
	return BookText(root.Struct()), err
}

func (s BookText) String() string {
	str, _ := text.Marshal(0xb854b850a845d36e, capnp.Struct(s))
	return str
}

func (s BookText) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BookText) DecodeFromPtr(p capnp.Ptr) BookText {
	return BookText(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BookText) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BookText) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BookText) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BookText) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BookText) Window() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BookText) SetWindow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BookText) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BookText) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BookText) Booktext() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BookText) HasBooktext() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BookText) BooktextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BookText) SetBooktext(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BookText_List is a list of BookText.
type BookText_List = capnp.StructList[BookText]

// NewBookText creates a new list of BookText.
func NewBookText_List(s *capnp.Segment, sz int32) (BookText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BookText](l), err
}

// BookText_Future is a wrapper for a BookText promised by a client call.
type BookText_Future struct{ *capnp.Future }

func (f BookText_Future) Struct() (BookText, error) {
	p, err := f.Future.Ptr()
	return BookText(p.Struct()), err
}

type BookRequest capnp.Struct

// BookRequest_TypeID is the unique identifier for the type BookRequest.
const BookRequest_TypeID = 0x82c483a4cf75cbe3

func NewBookRequest(s *capnp.Segment) (BookRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookRequest(st), err
}

func NewRootBookRequest(s *capnp.Segment) (BookRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookRequest(st), err
}

func ReadRootBookRequest(msg *capnp.Message) (BookRequest, error) {
	root, err := msg.Root()
	return BookRequest(root.Struct()), err
}

func (s BookRequest) String() string {
	str, _ := text.Marshal(0x82c483a4cf75cbe3, capnp.Struct(s))
	return str
}

func (s BookRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BookRequest) DecodeFromPtr(p capnp.Ptr) BookRequest {
	return BookRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BookRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BookRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BookRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BookRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BookRequest) Window() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BookRequest) SetWindow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BookRequest) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BookRequest) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BookRequest) Txtfile() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BookRequest) HasTxtfile() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BookRequest) TxtfileBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BookRequest) SetTxtfile(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BookRequest_List is a list of BookRequest.
type BookRequest_List = capnp.StructList[BookRequest]

// NewBookRequest creates a new list of BookRequest.
func NewBookRequest_List(s *capnp.Segment, sz int32) (BookRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BookRequest](l), err
}

// BookRequest_Future is a wrapper for a BookRequest promised by a client call.
type BookRequest_Future struct{ *capnp.Future }

func (f BookRequest_Future) Struct() (BookRequest, error) {
	p, err := f.Future.Ptr()
	return BookRequest(p.Struct()), err
}

type Object capnp.Struct

// Object_TypeID is the unique identifier for the type Object.
const Object_TypeID = 0x9c833cee78c1a396

func NewObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return Object(st), err
}

func NewRootObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return Object(st), err
}

func ReadRootObject(msg *capnp.Message) (Object, error) {
	root, err := msg.Root()
	return Object(root.Struct()), err
}

func (s Object) String() string {
	str, _ := text.Marshal(0x9c833cee78c1a396, capnp.Struct(s))
	return str
}

func (s Object) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object) DecodeFromPtr(p capnp.Ptr) Object {
	return Object(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object) LinkedListAddr() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Object) HasLinkedListAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object) SetLinkedListAddr(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLinkedListAddr sets the linkedListAddr field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Object) NewLinkedListAddr(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Object) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Object) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Object) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Object) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Object) ZoneInstance() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Object) SetZoneInstance(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Object) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Object) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Object) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Object) SetZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Object) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Object) SetX(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Object) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Object) SetY(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Object) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Object) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Object) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Object) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Object) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Object) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Object) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// Object_List is a list of Object.
type Object_List = capnp.StructList[Object]

// NewObject creates a new list of Object.
func NewObject_List(s *capnp.Segment, sz int32) (Object_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[Object](l), err
}

// Object_Future is a wrapper for a Object promised by a client call.
type Object_Future struct{ *capnp.Future }

func (f Object_Future) Struct() (Object, error) {
	p, err := f.Future.Ptr()
	return Object(p.Struct()), err
}

type ClickObject capnp.Struct

// ClickObject_TypeID is the unique identifier for the type ClickObject.
const ClickObject_TypeID = 0xf7af0983a9ca61c5

func NewClickObject(s *capnp.Segment) (ClickObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClickObject(st), err
}

func NewRootClickObject(s *capnp.Segment) (ClickObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClickObject(st), err
}

func ReadRootClickObject(msg *capnp.Message) (ClickObject, error) {
	root, err := msg.Root()
	return ClickObject(root.Struct()), err
}

func (s ClickObject) String() string {
	str, _ := text.Marshal(0xf7af0983a9ca61c5, capnp.Struct(s))
	return str
}

func (s ClickObject) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObject) DecodeFromPtr(p capnp.Ptr) ClickObject {
	return ClickObject(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObject) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObject) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObject) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObject) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObject) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObject) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObject) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObject) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ClickObject_List is a list of ClickObject.
type ClickObject_List = capnp.StructList[ClickObject]

// NewClickObject creates a new list of ClickObject.
func NewClickObject_List(s *capnp.Segment, sz int32) (ClickObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ClickObject](l), err
}

// ClickObject_Future is a wrapper for a ClickObject promised by a client call.
type ClickObject_Future struct{ *capnp.Future }

func (f ClickObject_Future) Struct() (ClickObject, error) {
	p, err := f.Future.Ptr()
	return ClickObject(p.Struct()), err
}

type ClickObjectAction capnp.Struct

// ClickObjectAction_TypeID is the unique identifier for the type ClickObjectAction.
const ClickObjectAction_TypeID = 0x998ca559e52e226b

func NewClickObjectAction(s *capnp.Segment) (ClickObjectAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAction(st), err
}

func NewRootClickObjectAction(s *capnp.Segment) (ClickObjectAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAction(st), err
}

func ReadRootClickObjectAction(msg *capnp.Message) (ClickObjectAction, error) {
	root, err := msg.Root()
	return ClickObjectAction(root.Struct()), err
}

func (s ClickObjectAction) String() string {
	str, _ := text.Marshal(0x998ca559e52e226b, capnp.Struct(s))
	return str
}

func (s ClickObjectAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObjectAction) DecodeFromPtr(p capnp.Ptr) ClickObjectAction {
	return ClickObjectAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObjectAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObjectAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObjectAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObjectAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObjectAction) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObjectAction) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObjectAction) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObjectAction) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickObjectAction) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickObjectAction) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickObjectAction) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickObjectAction) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ClickObjectAction) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ClickObjectAction) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ClickObjectAction) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClickObjectAction) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickObjectAction) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClickObjectAction) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClickObjectAction_List is a list of ClickObjectAction.
type ClickObjectAction_List = capnp.StructList[ClickObjectAction]

// NewClickObjectAction creates a new list of ClickObjectAction.
func NewClickObjectAction_List(s *capnp.Segment, sz int32) (ClickObjectAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ClickObjectAction](l), err
}

// ClickObjectAction_Future is a wrapper for a ClickObjectAction promised by a client call.
type ClickObjectAction_Future struct{ *capnp.Future }

func (f ClickObjectAction_Future) Struct() (ClickObjectAction, error) {
	p, err := f.Future.Ptr()
	return ClickObjectAction(p.Struct()), err
}

type Shielding capnp.Struct

// Shielding_TypeID is the unique identifier for the type Shielding.
const Shielding_TypeID = 0xa916afef9cb49a54

func NewShielding(s *capnp.Segment) (Shielding, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Shielding(st), err
}

func NewRootShielding(s *capnp.Segment) (Shielding, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Shielding(st), err
}

func ReadRootShielding(msg *capnp.Message) (Shielding, error) {
	root, err := msg.Root()
	return Shielding(root.Struct()), err
}

func (s Shielding) String() string {
	str, _ := text.Marshal(0xa916afef9cb49a54, capnp.Struct(s))
	return str
}

func (s Shielding) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Shielding) DecodeFromPtr(p capnp.Ptr) Shielding {
	return Shielding(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Shielding) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Shielding) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Shielding) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Shielding) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Shielding) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Shielding) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Shielding_List is a list of Shielding.
type Shielding_List = capnp.StructList[Shielding]

// NewShielding creates a new list of Shielding.
func NewShielding_List(s *capnp.Segment, sz int32) (Shielding_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Shielding](l), err
}

// Shielding_Future is a wrapper for a Shielding promised by a client call.
type Shielding_Future struct{ *capnp.Future }

func (f Shielding_Future) Struct() (Shielding, error) {
	p, err := f.Future.Ptr()
	return Shielding(p.Struct()), err
}

type ClickObjectAck capnp.Struct

// ClickObjectAck_TypeID is the unique identifier for the type ClickObjectAck.
const ClickObjectAck_TypeID = 0x93de0fbdc8643390

func NewClickObjectAck(s *capnp.Segment) (ClickObjectAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAck(st), err
}

func NewRootClickObjectAck(s *capnp.Segment) (ClickObjectAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAck(st), err
}

func ReadRootClickObjectAck(msg *capnp.Message) (ClickObjectAck, error) {
	root, err := msg.Root()
	return ClickObjectAck(root.Struct()), err
}

func (s ClickObjectAck) String() string {
	str, _ := text.Marshal(0x93de0fbdc8643390, capnp.Struct(s))
	return str
}

func (s ClickObjectAck) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObjectAck) DecodeFromPtr(p capnp.Ptr) ClickObjectAck {
	return ClickObjectAck(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObjectAck) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObjectAck) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObjectAck) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObjectAck) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObjectAck) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObjectAck) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObjectAck) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObjectAck) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickObjectAck) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickObjectAck) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickObjectAck) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickObjectAck) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ClickObjectAck) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ClickObjectAck) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ClickObjectAck) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClickObjectAck) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickObjectAck) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClickObjectAck) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClickObjectAck_List is a list of ClickObjectAck.
type ClickObjectAck_List = capnp.StructList[ClickObjectAck]

// NewClickObjectAck creates a new list of ClickObjectAck.
func NewClickObjectAck_List(s *capnp.Segment, sz int32) (ClickObjectAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ClickObjectAck](l), err
}

// ClickObjectAck_Future is a wrapper for a ClickObjectAck promised by a client call.
type ClickObjectAck_Future struct{ *capnp.Future }

func (f ClickObjectAck_Future) Struct() (ClickObjectAck, error) {
	p, err := f.Future.Ptr()
	return ClickObjectAck(p.Struct()), err
}

type CloseContainer capnp.Struct

// CloseContainer_TypeID is the unique identifier for the type CloseContainer.
const CloseContainer_TypeID = 0xfd58a2914a0296e2

func NewCloseContainer(s *capnp.Segment) (CloseContainer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CloseContainer(st), err
}

func NewRootCloseContainer(s *capnp.Segment) (CloseContainer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CloseContainer(st), err
}

func ReadRootCloseContainer(msg *capnp.Message) (CloseContainer, error) {
	root, err := msg.Root()
	return CloseContainer(root.Struct()), err
}

func (s CloseContainer) String() string {
	str, _ := text.Marshal(0xfd58a2914a0296e2, capnp.Struct(s))
	return str
}

func (s CloseContainer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CloseContainer) DecodeFromPtr(p capnp.Ptr) CloseContainer {
	return CloseContainer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CloseContainer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CloseContainer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CloseContainer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CloseContainer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CloseContainer) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CloseContainer) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CloseContainer) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CloseContainer) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CloseContainer) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CloseContainer) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// CloseContainer_List is a list of CloseContainer.
type CloseContainer_List = capnp.StructList[CloseContainer]

// NewCloseContainer creates a new list of CloseContainer.
func NewCloseContainer_List(s *capnp.Segment, sz int32) (CloseContainer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CloseContainer](l), err
}

// CloseContainer_Future is a wrapper for a CloseContainer promised by a client call.
type CloseContainer_Future struct{ *capnp.Future }

func (f CloseContainer_Future) Struct() (CloseContainer, error) {
	p, err := f.Future.Ptr()
	return CloseContainer(p.Struct()), err
}

type Door capnp.Struct

// Door_TypeID is the unique identifier for the type Door.
const Door_TypeID = 0xf9454e8612b10b69

func NewDoor(s *capnp.Segment) (Door, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Door(st), err
}

func NewRootDoor(s *capnp.Segment) (Door, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Door(st), err
}

func ReadRootDoor(msg *capnp.Message) (Door, error) {
	root, err := msg.Root()
	return Door(root.Struct()), err
}

func (s Door) String() string {
	str, _ := text.Marshal(0xf9454e8612b10b69, capnp.Struct(s))
	return str
}

func (s Door) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Door) DecodeFromPtr(p capnp.Ptr) Door {
	return Door(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Door) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Door) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Door) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Door) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Door) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Door) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Door) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Door) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Door) YPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Door) SetYPos(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Door) XPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Door) SetXPos(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Door) ZPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Door) SetZPos(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Door) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Door) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Door) Incline() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Door) SetIncline(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Door) Size() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Door) SetSize(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Door) DoorId() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Door) SetDoorId(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Door) Opentype() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Door) SetOpentype(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Door) StateAtSpawn() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Door) SetStateAtSpawn(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Door) InvertState() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Door) SetInvertState(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Door) DoorParam() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Door) SetDoorParam(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

// Door_List is a list of Door.
type Door_List = capnp.StructList[Door]

// NewDoor creates a new list of Door.
func NewDoor_List(s *capnp.Segment, sz int32) (Door_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Door](l), err
}

// Door_Future is a wrapper for a Door promised by a client call.
type Door_Future struct{ *capnp.Future }

func (f Door_Future) Struct() (Door, error) {
	p, err := f.Future.Ptr()
	return Door(p.Struct()), err
}

type DoorSpawns capnp.Struct

// DoorSpawns_TypeID is the unique identifier for the type DoorSpawns.
const DoorSpawns_TypeID = 0xf304800fc3af267f

func NewDoorSpawns(s *capnp.Segment) (DoorSpawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DoorSpawns(st), err
}

func NewRootDoorSpawns(s *capnp.Segment) (DoorSpawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DoorSpawns(st), err
}

func ReadRootDoorSpawns(msg *capnp.Message) (DoorSpawns, error) {
	root, err := msg.Root()
	return DoorSpawns(root.Struct()), err
}

func (s DoorSpawns) String() string {
	str, _ := text.Marshal(0xf304800fc3af267f, capnp.Struct(s))
	return str
}

func (s DoorSpawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DoorSpawns) DecodeFromPtr(p capnp.Ptr) DoorSpawns {
	return DoorSpawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DoorSpawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DoorSpawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DoorSpawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DoorSpawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DoorSpawns) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DoorSpawns) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DoorSpawns) Doors() (Door_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Door_List(p.List()), err
}

func (s DoorSpawns) HasDoors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DoorSpawns) SetDoors(v Door_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDoors sets the doors field to a newly
// allocated Door_List, preferring placement in s's segment.
func (s DoorSpawns) NewDoors(n int32) (Door_List, error) {
	l, err := NewDoor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Door_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DoorSpawns_List is a list of DoorSpawns.
type DoorSpawns_List = capnp.StructList[DoorSpawns]

// NewDoorSpawns creates a new list of DoorSpawns.
func NewDoorSpawns_List(s *capnp.Segment, sz int32) (DoorSpawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DoorSpawns](l), err
}

// DoorSpawns_Future is a wrapper for a DoorSpawns promised by a client call.
type DoorSpawns_Future struct{ *capnp.Future }

func (f DoorSpawns_Future) Struct() (DoorSpawns, error) {
	p, err := f.Future.Ptr()
	return DoorSpawns(p.Struct()), err
}

type ClickDoor capnp.Struct

// ClickDoor_TypeID is the unique identifier for the type ClickDoor.
const ClickDoor_TypeID = 0xa012f4912c4151f9

func NewClickDoor(s *capnp.Segment) (ClickDoor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ClickDoor(st), err
}

func NewRootClickDoor(s *capnp.Segment) (ClickDoor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ClickDoor(st), err
}

func ReadRootClickDoor(msg *capnp.Message) (ClickDoor, error) {
	root, err := msg.Root()
	return ClickDoor(root.Struct()), err
}

func (s ClickDoor) String() string {
	str, _ := text.Marshal(0xa012f4912c4151f9, capnp.Struct(s))
	return str
}

func (s ClickDoor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickDoor) DecodeFromPtr(p capnp.Ptr) ClickDoor {
	return ClickDoor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickDoor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickDoor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickDoor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickDoor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickDoor) Doorid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickDoor) SetDoorid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickDoor) Picklockskill() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickDoor) SetPicklockskill(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickDoor) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickDoor) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickDoor) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickDoor) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ClickDoor_List is a list of ClickDoor.
type ClickDoor_List = capnp.StructList[ClickDoor]

// NewClickDoor creates a new list of ClickDoor.
func NewClickDoor_List(s *capnp.Segment, sz int32) (ClickDoor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ClickDoor](l), err
}

// ClickDoor_Future is a wrapper for a ClickDoor promised by a client call.
type ClickDoor_Future struct{ *capnp.Future }

func (f ClickDoor_Future) Struct() (ClickDoor, error) {
	p, err := f.Future.Ptr()
	return ClickDoor(p.Struct()), err
}

type MoveDoor capnp.Struct

// MoveDoor_TypeID is the unique identifier for the type MoveDoor.
const MoveDoor_TypeID = 0x844fdb5787f2eb73

func NewMoveDoor(s *capnp.Segment) (MoveDoor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MoveDoor(st), err
}

func NewRootMoveDoor(s *capnp.Segment) (MoveDoor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MoveDoor(st), err
}

func ReadRootMoveDoor(msg *capnp.Message) (MoveDoor, error) {
	root, err := msg.Root()
	return MoveDoor(root.Struct()), err
}

func (s MoveDoor) String() string {
	str, _ := text.Marshal(0x844fdb5787f2eb73, capnp.Struct(s))
	return str
}

func (s MoveDoor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveDoor) DecodeFromPtr(p capnp.Ptr) MoveDoor {
	return MoveDoor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveDoor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveDoor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveDoor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveDoor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveDoor) Doorid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveDoor) SetDoorid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveDoor) Action() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveDoor) SetAction(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// MoveDoor_List is a list of MoveDoor.
type MoveDoor_List = capnp.StructList[MoveDoor]

// NewMoveDoor creates a new list of MoveDoor.
func NewMoveDoor_List(s *capnp.Segment, sz int32) (MoveDoor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MoveDoor](l), err
}

// MoveDoor_Future is a wrapper for a MoveDoor promised by a client call.
type MoveDoor_Future struct{ *capnp.Future }

func (f MoveDoor_Future) Struct() (MoveDoor, error) {
	p, err := f.Future.Ptr()
	return MoveDoor(p.Struct()), err
}

type BecomeNPC capnp.Struct

// BecomeNPC_TypeID is the unique identifier for the type BecomeNPC.
const BecomeNPC_TypeID = 0xb4452aee08031161

func NewBecomeNPC(s *capnp.Segment) (BecomeNPC, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeNPC(st), err
}

func NewRootBecomeNPC(s *capnp.Segment) (BecomeNPC, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeNPC(st), err
}

func ReadRootBecomeNPC(msg *capnp.Message) (BecomeNPC, error) {
	root, err := msg.Root()
	return BecomeNPC(root.Struct()), err
}

func (s BecomeNPC) String() string {
	str, _ := text.Marshal(0xb4452aee08031161, capnp.Struct(s))
	return str
}

func (s BecomeNPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeNPC) DecodeFromPtr(p capnp.Ptr) BecomeNPC {
	return BecomeNPC(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeNPC) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeNPC) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeNPC) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeNPC) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeNPC) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeNPC) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeNPC) Maxlevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BecomeNPC) SetMaxlevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BecomeNPC_List is a list of BecomeNPC.
type BecomeNPC_List = capnp.StructList[BecomeNPC]

// NewBecomeNPC creates a new list of BecomeNPC.
func NewBecomeNPC_List(s *capnp.Segment, sz int32) (BecomeNPC_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BecomeNPC](l), err
}

// BecomeNPC_Future is a wrapper for a BecomeNPC promised by a client call.
type BecomeNPC_Future struct{ *capnp.Future }

func (f BecomeNPC_Future) Struct() (BecomeNPC, error) {
	p, err := f.Future.Ptr()
	return BecomeNPC(p.Struct()), err
}

type Underworld capnp.Struct

// Underworld_TypeID is the unique identifier for the type Underworld.
const Underworld_TypeID = 0xf90c9c3f6c27a1c2

func NewUnderworld(s *capnp.Segment) (Underworld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Underworld(st), err
}

func NewRootUnderworld(s *capnp.Segment) (Underworld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Underworld(st), err
}

func ReadRootUnderworld(msg *capnp.Message) (Underworld, error) {
	root, err := msg.Root()
	return Underworld(root.Struct()), err
}

func (s Underworld) String() string {
	str, _ := text.Marshal(0xf90c9c3f6c27a1c2, capnp.Struct(s))
	return str
}

func (s Underworld) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Underworld) DecodeFromPtr(p capnp.Ptr) Underworld {
	return Underworld(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Underworld) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Underworld) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Underworld) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Underworld) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Underworld) Speed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Underworld) SetSpeed(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Underworld) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Underworld) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Underworld) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Underworld) SetX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Underworld) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Underworld) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// Underworld_List is a list of Underworld.
type Underworld_List = capnp.StructList[Underworld]

// NewUnderworld creates a new list of Underworld.
func NewUnderworld_List(s *capnp.Segment, sz int32) (Underworld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Underworld](l), err
}

// Underworld_Future is a wrapper for a Underworld promised by a client call.
type Underworld_Future struct{ *capnp.Future }

func (f Underworld_Future) Struct() (Underworld, error) {
	p, err := f.Future.Ptr()
	return Underworld(p.Struct()), err
}

type Resurrect capnp.Struct

// Resurrect_TypeID is the unique identifier for the type Resurrect.
const Resurrect_TypeID = 0xd68209c5c40dc249

func NewResurrect(s *capnp.Segment) (Resurrect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return Resurrect(st), err
}

func NewRootResurrect(s *capnp.Segment) (Resurrect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return Resurrect(st), err
}

func ReadRootResurrect(msg *capnp.Message) (Resurrect, error) {
	root, err := msg.Root()
	return Resurrect(root.Struct()), err
}

func (s Resurrect) String() string {
	str, _ := text.Marshal(0xd68209c5c40dc249, capnp.Struct(s))
	return str
}

func (s Resurrect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Resurrect) DecodeFromPtr(p capnp.Ptr) Resurrect {
	return Resurrect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Resurrect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Resurrect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Resurrect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Resurrect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Resurrect) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Resurrect) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Resurrect) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Resurrect) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Resurrect) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Resurrect) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Resurrect) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Resurrect) SetX(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Resurrect) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Resurrect) SetZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Resurrect) YourName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Resurrect) HasYourName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Resurrect) YourNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Resurrect) SetYourName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Resurrect) RezzerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Resurrect) HasRezzerName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Resurrect) RezzerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Resurrect) SetRezzerName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Resurrect) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Resurrect) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Resurrect) CorpseName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Resurrect) HasCorpseName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Resurrect) CorpseNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Resurrect) SetCorpseName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Resurrect) Action() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Resurrect) SetAction(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Resurrect_List is a list of Resurrect.
type Resurrect_List = capnp.StructList[Resurrect]

// NewResurrect creates a new list of Resurrect.
func NewResurrect_List(s *capnp.Segment, sz int32) (Resurrect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[Resurrect](l), err
}

// Resurrect_Future is a wrapper for a Resurrect promised by a client call.
type Resurrect_Future struct{ *capnp.Future }

func (f Resurrect_Future) Struct() (Resurrect, error) {
	p, err := f.Future.Ptr()
	return Resurrect(p.Struct()), err
}

type SetRunMode capnp.Struct

// SetRunMode_TypeID is the unique identifier for the type SetRunMode.
const SetRunMode_TypeID = 0xc1409e4be6401554

func NewSetRunMode(s *capnp.Segment) (SetRunMode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetRunMode(st), err
}

func NewRootSetRunMode(s *capnp.Segment) (SetRunMode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetRunMode(st), err
}

func ReadRootSetRunMode(msg *capnp.Message) (SetRunMode, error) {
	root, err := msg.Root()
	return SetRunMode(root.Struct()), err
}

func (s SetRunMode) String() string {
	str, _ := text.Marshal(0xc1409e4be6401554, capnp.Struct(s))
	return str
}

func (s SetRunMode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetRunMode) DecodeFromPtr(p capnp.Ptr) SetRunMode {
	return SetRunMode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetRunMode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetRunMode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetRunMode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetRunMode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetRunMode) Mode() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetRunMode) SetMode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// SetRunMode_List is a list of SetRunMode.
type SetRunMode_List = capnp.StructList[SetRunMode]

// NewSetRunMode creates a new list of SetRunMode.
func NewSetRunMode_List(s *capnp.Segment, sz int32) (SetRunMode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetRunMode](l), err
}

// SetRunMode_Future is a wrapper for a SetRunMode promised by a client call.
type SetRunMode_Future struct{ *capnp.Future }

func (f SetRunMode_Future) Struct() (SetRunMode, error) {
	p, err := f.Future.Ptr()
	return SetRunMode(p.Struct()), err
}

type EnvDamage2 capnp.Struct

// EnvDamage2_TypeID is the unique identifier for the type EnvDamage2.
const EnvDamage2_TypeID = 0xec5c7b07d1717d84

func NewEnvDamage2(s *capnp.Segment) (EnvDamage2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvDamage2(st), err
}

func NewRootEnvDamage2(s *capnp.Segment) (EnvDamage2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvDamage2(st), err
}

func ReadRootEnvDamage2(msg *capnp.Message) (EnvDamage2, error) {
	root, err := msg.Root()
	return EnvDamage2(root.Struct()), err
}

func (s EnvDamage2) String() string {
	str, _ := text.Marshal(0xec5c7b07d1717d84, capnp.Struct(s))
	return str
}

func (s EnvDamage2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvDamage2) DecodeFromPtr(p capnp.Ptr) EnvDamage2 {
	return EnvDamage2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvDamage2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvDamage2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvDamage2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvDamage2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvDamage2) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EnvDamage2) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EnvDamage2) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s EnvDamage2) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s EnvDamage2) Dmgtype() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s EnvDamage2) SetDmgtype(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s EnvDamage2) Constant() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s EnvDamage2) SetConstant(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// EnvDamage2_List is a list of EnvDamage2.
type EnvDamage2_List = capnp.StructList[EnvDamage2]

// NewEnvDamage2 creates a new list of EnvDamage2.
func NewEnvDamage2_List(s *capnp.Segment, sz int32) (EnvDamage2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[EnvDamage2](l), err
}

// EnvDamage2_Future is a wrapper for a EnvDamage2 promised by a client call.
type EnvDamage2_Future struct{ *capnp.Future }

func (f EnvDamage2_Future) Struct() (EnvDamage2, error) {
	p, err := f.Future.Ptr()
	return EnvDamage2(p.Struct()), err
}

type BazaarWindowStart capnp.Struct

// BazaarWindowStart_TypeID is the unique identifier for the type BazaarWindowStart.
const BazaarWindowStart_TypeID = 0x86f0f1c44a113f21

func NewBazaarWindowStart(s *capnp.Segment) (BazaarWindowStart, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarWindowStart(st), err
}

func NewRootBazaarWindowStart(s *capnp.Segment) (BazaarWindowStart, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarWindowStart(st), err
}

func ReadRootBazaarWindowStart(msg *capnp.Message) (BazaarWindowStart, error) {
	root, err := msg.Root()
	return BazaarWindowStart(root.Struct()), err
}

func (s BazaarWindowStart) String() string {
	str, _ := text.Marshal(0x86f0f1c44a113f21, capnp.Struct(s))
	return str
}

func (s BazaarWindowStart) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarWindowStart) DecodeFromPtr(p capnp.Ptr) BazaarWindowStart {
	return BazaarWindowStart(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarWindowStart) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarWindowStart) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarWindowStart) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarWindowStart) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarWindowStart) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarWindowStart) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// BazaarWindowStart_List is a list of BazaarWindowStart.
type BazaarWindowStart_List = capnp.StructList[BazaarWindowStart]

// NewBazaarWindowStart creates a new list of BazaarWindowStart.
func NewBazaarWindowStart_List(s *capnp.Segment, sz int32) (BazaarWindowStart_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BazaarWindowStart](l), err
}

// BazaarWindowStart_Future is a wrapper for a BazaarWindowStart promised by a client call.
type BazaarWindowStart_Future struct{ *capnp.Future }

func (f BazaarWindowStart_Future) Struct() (BazaarWindowStart, error) {
	p, err := f.Future.Ptr()
	return BazaarWindowStart(p.Struct()), err
}

type BazaarWelcome capnp.Struct

// BazaarWelcome_TypeID is the unique identifier for the type BazaarWelcome.
const BazaarWelcome_TypeID = 0x9c85c1e6d68aa499

func NewBazaarWelcome(s *capnp.Segment) (BazaarWelcome, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarWelcome(st), err
}

func NewRootBazaarWelcome(s *capnp.Segment) (BazaarWelcome, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarWelcome(st), err
}

func ReadRootBazaarWelcome(msg *capnp.Message) (BazaarWelcome, error) {
	root, err := msg.Root()
	return BazaarWelcome(root.Struct()), err
}

func (s BazaarWelcome) String() string {
	str, _ := text.Marshal(0x9c85c1e6d68aa499, capnp.Struct(s))
	return str
}

func (s BazaarWelcome) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarWelcome) DecodeFromPtr(p capnp.Ptr) BazaarWelcome {
	return BazaarWelcome(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarWelcome) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarWelcome) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarWelcome) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarWelcome) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarWelcome) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarWelcome) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarWelcome) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarWelcome) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarWelcome) Traders() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarWelcome) SetTraders(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarWelcome) Items() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarWelcome) SetItems(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BazaarWelcome_List is a list of BazaarWelcome.
type BazaarWelcome_List = capnp.StructList[BazaarWelcome]

// NewBazaarWelcome creates a new list of BazaarWelcome.
func NewBazaarWelcome_List(s *capnp.Segment, sz int32) (BazaarWelcome_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BazaarWelcome](l), err
}

// BazaarWelcome_Future is a wrapper for a BazaarWelcome promised by a client call.
type BazaarWelcome_Future struct{ *capnp.Future }

func (f BazaarWelcome_Future) Struct() (BazaarWelcome, error) {
	p, err := f.Future.Ptr()
	return BazaarWelcome(p.Struct()), err
}
func (p BazaarWelcome_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type BazaarSearch capnp.Struct

// BazaarSearch_TypeID is the unique identifier for the type BazaarSearch.
const BazaarSearch_TypeID = 0x9292e90285848d8e

func NewBazaarSearch(s *capnp.Segment) (BazaarSearch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return BazaarSearch(st), err
}

func NewRootBazaarSearch(s *capnp.Segment) (BazaarSearch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return BazaarSearch(st), err
}

func ReadRootBazaarSearch(msg *capnp.Message) (BazaarSearch, error) {
	root, err := msg.Root()
	return BazaarSearch(root.Struct()), err
}

func (s BazaarSearch) String() string {
	str, _ := text.Marshal(0x9292e90285848d8e, capnp.Struct(s))
	return str
}

func (s BazaarSearch) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarSearch) DecodeFromPtr(p capnp.Ptr) BazaarSearch {
	return BazaarSearch(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarSearch) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarSearch) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarSearch) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarSearch) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarSearch) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarSearch) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarSearch) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarSearch) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarSearch) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarSearch) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarSearch) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarSearch) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BazaarSearch) Race() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BazaarSearch) SetRace(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BazaarSearch) Stat() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BazaarSearch) SetStat(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BazaarSearch) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BazaarSearch) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s BazaarSearch) Type() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s BazaarSearch) SetType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s BazaarSearch) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BazaarSearch) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BazaarSearch) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BazaarSearch) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BazaarSearch) Minprice() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s BazaarSearch) SetMinprice(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s BazaarSearch) Maxprice() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s BazaarSearch) SetMaxprice(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s BazaarSearch) Minlevel() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s BazaarSearch) SetMinlevel(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s BazaarSearch) Maxlevel() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s BazaarSearch) SetMaxlevel(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

// BazaarSearch_List is a list of BazaarSearch.
type BazaarSearch_List = capnp.StructList[BazaarSearch]

// NewBazaarSearch creates a new list of BazaarSearch.
func NewBazaarSearch_List(s *capnp.Segment, sz int32) (BazaarSearch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[BazaarSearch](l), err
}

// BazaarSearch_Future is a wrapper for a BazaarSearch promised by a client call.
type BazaarSearch_Future struct{ *capnp.Future }

func (f BazaarSearch_Future) Struct() (BazaarSearch, error) {
	p, err := f.Future.Ptr()
	return BazaarSearch(p.Struct()), err
}
func (p BazaarSearch_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type BazaarInspect capnp.Struct

// BazaarInspect_TypeID is the unique identifier for the type BazaarInspect.
const BazaarInspect_TypeID = 0x940ac0b117677519

func NewBazaarInspect(s *capnp.Segment) (BazaarInspect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarInspect(st), err
}

func NewRootBazaarInspect(s *capnp.Segment) (BazaarInspect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarInspect(st), err
}

func ReadRootBazaarInspect(msg *capnp.Message) (BazaarInspect, error) {
	root, err := msg.Root()
	return BazaarInspect(root.Struct()), err
}

func (s BazaarInspect) String() string {
	str, _ := text.Marshal(0x940ac0b117677519, capnp.Struct(s))
	return str
}

func (s BazaarInspect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarInspect) DecodeFromPtr(p capnp.Ptr) BazaarInspect {
	return BazaarInspect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarInspect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarInspect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarInspect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarInspect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarInspect) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarInspect) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarInspect) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BazaarInspect) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarInspect) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BazaarInspect) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BazaarInspect_List is a list of BazaarInspect.
type BazaarInspect_List = capnp.StructList[BazaarInspect]

// NewBazaarInspect creates a new list of BazaarInspect.
func NewBazaarInspect_List(s *capnp.Segment, sz int32) (BazaarInspect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BazaarInspect](l), err
}

// BazaarInspect_Future is a wrapper for a BazaarInspect promised by a client call.
type BazaarInspect_Future struct{ *capnp.Future }

func (f BazaarInspect_Future) Struct() (BazaarInspect, error) {
	p, err := f.Future.Ptr()
	return BazaarInspect(p.Struct()), err
}

type BazaarReturnDone capnp.Struct

// BazaarReturnDone_TypeID is the unique identifier for the type BazaarReturnDone.
const BazaarReturnDone_TypeID = 0xbde69a9238be5e37

func NewBazaarReturnDone(s *capnp.Segment) (BazaarReturnDone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarReturnDone(st), err
}

func NewRootBazaarReturnDone(s *capnp.Segment) (BazaarReturnDone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarReturnDone(st), err
}

func ReadRootBazaarReturnDone(msg *capnp.Message) (BazaarReturnDone, error) {
	root, err := msg.Root()
	return BazaarReturnDone(root.Struct()), err
}

func (s BazaarReturnDone) String() string {
	str, _ := text.Marshal(0xbde69a9238be5e37, capnp.Struct(s))
	return str
}

func (s BazaarReturnDone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarReturnDone) DecodeFromPtr(p capnp.Ptr) BazaarReturnDone {
	return BazaarReturnDone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarReturnDone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarReturnDone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarReturnDone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarReturnDone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarReturnDone) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarReturnDone) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarReturnDone) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarReturnDone) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BazaarReturnDone_List is a list of BazaarReturnDone.
type BazaarReturnDone_List = capnp.StructList[BazaarReturnDone]

// NewBazaarReturnDone creates a new list of BazaarReturnDone.
func NewBazaarReturnDone_List(s *capnp.Segment, sz int32) (BazaarReturnDone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BazaarReturnDone](l), err
}

// BazaarReturnDone_Future is a wrapper for a BazaarReturnDone promised by a client call.
type BazaarReturnDone_Future struct{ *capnp.Future }

func (f BazaarReturnDone_Future) Struct() (BazaarReturnDone, error) {
	p, err := f.Future.Ptr()
	return BazaarReturnDone(p.Struct()), err
}

type BazaarSearchResults capnp.Struct

// BazaarSearchResults_TypeID is the unique identifier for the type BazaarSearchResults.
const BazaarSearchResults_TypeID = 0xcd102105578e2465

func NewBazaarSearchResults(s *capnp.Segment) (BazaarSearchResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BazaarSearchResults(st), err
}

func NewRootBazaarSearchResults(s *capnp.Segment) (BazaarSearchResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BazaarSearchResults(st), err
}

func ReadRootBazaarSearchResults(msg *capnp.Message) (BazaarSearchResults, error) {
	root, err := msg.Root()
	return BazaarSearchResults(root.Struct()), err
}

func (s BazaarSearchResults) String() string {
	str, _ := text.Marshal(0xcd102105578e2465, capnp.Struct(s))
	return str
}

func (s BazaarSearchResults) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarSearchResults) DecodeFromPtr(p capnp.Ptr) BazaarSearchResults {
	return BazaarSearchResults(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarSearchResults) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarSearchResults) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarSearchResults) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarSearchResults) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarSearchResults) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarSearchResults) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarSearchResults) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarSearchResults) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarSearchResults) SellerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarSearchResults) SetSellerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarSearchResults) NumItems() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarSearchResults) SetNumItems(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BazaarSearchResults) SerialNumber() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BazaarSearchResults) SetSerialNumber(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BazaarSearchResults) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BazaarSearchResults) HasItemName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BazaarSearchResults) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BazaarSearchResults) SetItemName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BazaarSearchResults) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BazaarSearchResults) SetCost(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BazaarSearchResults) ItemStat() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BazaarSearchResults) SetItemStat(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// BazaarSearchResults_List is a list of BazaarSearchResults.
type BazaarSearchResults_List = capnp.StructList[BazaarSearchResults]

// NewBazaarSearchResults creates a new list of BazaarSearchResults.
func NewBazaarSearchResults_List(s *capnp.Segment, sz int32) (BazaarSearchResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[BazaarSearchResults](l), err
}

// BazaarSearchResults_Future is a wrapper for a BazaarSearchResults promised by a client call.
type BazaarSearchResults_Future struct{ *capnp.Future }

func (f BazaarSearchResults_Future) Struct() (BazaarSearchResults, error) {
	p, err := f.Future.Ptr()
	return BazaarSearchResults(p.Struct()), err
}
func (p BazaarSearchResults_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type ServerSideFilters capnp.Struct

// ServerSideFilters_TypeID is the unique identifier for the type ServerSideFilters.
const ServerSideFilters_TypeID = 0xc54135596f07c87b

func NewServerSideFilters(s *capnp.Segment) (ServerSideFilters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ServerSideFilters(st), err
}

func NewRootServerSideFilters(s *capnp.Segment) (ServerSideFilters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ServerSideFilters(st), err
}

func ReadRootServerSideFilters(msg *capnp.Message) (ServerSideFilters, error) {
	root, err := msg.Root()
	return ServerSideFilters(root.Struct()), err
}

func (s ServerSideFilters) String() string {
	str, _ := text.Marshal(0xc54135596f07c87b, capnp.Struct(s))
	return str
}

func (s ServerSideFilters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerSideFilters) DecodeFromPtr(p capnp.Ptr) ServerSideFilters {
	return ServerSideFilters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerSideFilters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerSideFilters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerSideFilters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerSideFilters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerSideFilters) Clientattackfilters() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ServerSideFilters) SetClientattackfilters(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ServerSideFilters) Npcattackfilters() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ServerSideFilters) SetNpcattackfilters(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ServerSideFilters) Clientcastfilters() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ServerSideFilters) SetClientcastfilters(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ServerSideFilters) Npccastfilters() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ServerSideFilters) SetNpccastfilters(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ServerSideFilters_List is a list of ServerSideFilters.
type ServerSideFilters_List = capnp.StructList[ServerSideFilters]

// NewServerSideFilters creates a new list of ServerSideFilters.
func NewServerSideFilters_List(s *capnp.Segment, sz int32) (ServerSideFilters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ServerSideFilters](l), err
}

// ServerSideFilters_Future is a wrapper for a ServerSideFilters promised by a client call.
type ServerSideFilters_Future struct{ *capnp.Future }

func (f ServerSideFilters_Future) Struct() (ServerSideFilters, error) {
	p, err := f.Future.Ptr()
	return ServerSideFilters(p.Struct()), err
}

type ItemViewRequest capnp.Struct

// ItemViewRequest_TypeID is the unique identifier for the type ItemViewRequest.
const ItemViewRequest_TypeID = 0xc2c16fce3e3aa7eb

func NewItemViewRequest(s *capnp.Segment) (ItemViewRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemViewRequest(st), err
}

func NewRootItemViewRequest(s *capnp.Segment) (ItemViewRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemViewRequest(st), err
}

func ReadRootItemViewRequest(msg *capnp.Message) (ItemViewRequest, error) {
	root, err := msg.Root()
	return ItemViewRequest(root.Struct()), err
}

func (s ItemViewRequest) String() string {
	str, _ := text.Marshal(0xc2c16fce3e3aa7eb, capnp.Struct(s))
	return str
}

func (s ItemViewRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemViewRequest) DecodeFromPtr(p capnp.Ptr) ItemViewRequest {
	return ItemViewRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemViewRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemViewRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemViewRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemViewRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemViewRequest) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemViewRequest) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ItemViewRequest) Augments() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ItemViewRequest) HasAugments() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ItemViewRequest) SetAugments(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAugments sets the augments field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ItemViewRequest) NewAugments(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ItemViewRequest) LinkHash() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ItemViewRequest) SetLinkHash(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ItemViewRequest_List is a list of ItemViewRequest.
type ItemViewRequest_List = capnp.StructList[ItemViewRequest]

// NewItemViewRequest creates a new list of ItemViewRequest.
func NewItemViewRequest_List(s *capnp.Segment, sz int32) (ItemViewRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ItemViewRequest](l), err
}

// ItemViewRequest_Future is a wrapper for a ItemViewRequest promised by a client call.
type ItemViewRequest_Future struct{ *capnp.Future }

func (f ItemViewRequest_Future) Struct() (ItemViewRequest, error) {
	p, err := f.Future.Ptr()
	return ItemViewRequest(p.Struct()), err
}

type PickPocket capnp.Struct

// PickPocket_TypeID is the unique identifier for the type PickPocket.
const PickPocket_TypeID = 0xc4aef0c4dc45bc83

func NewPickPocket(s *capnp.Segment) (PickPocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PickPocket(st), err
}

func NewRootPickPocket(s *capnp.Segment) (PickPocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PickPocket(st), err
}

func ReadRootPickPocket(msg *capnp.Message) (PickPocket, error) {
	root, err := msg.Root()
	return PickPocket(root.Struct()), err
}

func (s PickPocket) String() string {
	str, _ := text.Marshal(0xc4aef0c4dc45bc83, capnp.Struct(s))
	return str
}

func (s PickPocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PickPocket) DecodeFromPtr(p capnp.Ptr) PickPocket {
	return PickPocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PickPocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PickPocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PickPocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PickPocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PickPocket) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PickPocket) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PickPocket) From() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PickPocket) SetFrom(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PickPocket) Myskill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PickPocket) SetMyskill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PickPocket) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PickPocket) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PickPocket) Coin() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PickPocket) SetCoin(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PickPocket) Lastsix() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s PickPocket) HasLastsix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PickPocket) SetLastsix(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLastsix sets the lastsix field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s PickPocket) NewLastsix(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PickPocket_List is a list of PickPocket.
type PickPocket_List = capnp.StructList[PickPocket]

// NewPickPocket creates a new list of PickPocket.
func NewPickPocket_List(s *capnp.Segment, sz int32) (PickPocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[PickPocket](l), err
}

// PickPocket_Future is a wrapper for a PickPocket promised by a client call.
type PickPocket_Future struct{ *capnp.Future }

func (f PickPocket_Future) Struct() (PickPocket, error) {
	p, err := f.Future.Ptr()
	return PickPocket(p.Struct()), err
}

type ActionPickPocket capnp.Struct

// ActionPickPocket_TypeID is the unique identifier for the type ActionPickPocket.
const ActionPickPocket_TypeID = 0xbe54ea0b18470782

func NewActionPickPocket(s *capnp.Segment) (ActionPickPocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ActionPickPocket(st), err
}

func NewRootActionPickPocket(s *capnp.Segment) (ActionPickPocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ActionPickPocket(st), err
}

func ReadRootActionPickPocket(msg *capnp.Message) (ActionPickPocket, error) {
	root, err := msg.Root()
	return ActionPickPocket(root.Struct()), err
}

func (s ActionPickPocket) String() string {
	str, _ := text.Marshal(0xbe54ea0b18470782, capnp.Struct(s))
	return str
}

func (s ActionPickPocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ActionPickPocket) DecodeFromPtr(p capnp.Ptr) ActionPickPocket {
	return ActionPickPocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ActionPickPocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ActionPickPocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ActionPickPocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ActionPickPocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ActionPickPocket) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ActionPickPocket) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ActionPickPocket) From() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ActionPickPocket) SetFrom(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ActionPickPocket) Myskill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ActionPickPocket) SetMyskill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ActionPickPocket) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ActionPickPocket) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ActionPickPocket) Coin() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ActionPickPocket) SetCoin(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ActionPickPocket) Itemname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ActionPickPocket) HasItemname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ActionPickPocket) ItemnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ActionPickPocket) SetItemname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ActionPickPocket_List is a list of ActionPickPocket.
type ActionPickPocket_List = capnp.StructList[ActionPickPocket]

// NewActionPickPocket creates a new list of ActionPickPocket.
func NewActionPickPocket_List(s *capnp.Segment, sz int32) (ActionPickPocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ActionPickPocket](l), err
}

// ActionPickPocket_Future is a wrapper for a ActionPickPocket promised by a client call.
type ActionPickPocket_Future struct{ *capnp.Future }

func (f ActionPickPocket_Future) Struct() (ActionPickPocket, error) {
	p, err := f.Future.Ptr()
	return ActionPickPocket(p.Struct()), err
}

type LogServer capnp.Struct

// LogServer_TypeID is the unique identifier for the type LogServer.
const LogServer_TypeID = 0xb74f1e7519f6fd40

func NewLogServer(s *capnp.Segment) (LogServer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LogServer(st), err
}

func NewRootLogServer(s *capnp.Segment) (LogServer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LogServer(st), err
}

func ReadRootLogServer(msg *capnp.Message) (LogServer, error) {
	root, err := msg.Root()
	return LogServer(root.Struct()), err
}

func (s LogServer) String() string {
	str, _ := text.Marshal(0xb74f1e7519f6fd40, capnp.Struct(s))
	return str
}

func (s LogServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LogServer) DecodeFromPtr(p capnp.Ptr) LogServer {
	return LogServer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LogServer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LogServer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LogServer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LogServer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LogServer) Worldshortname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LogServer) HasWorldshortname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LogServer) WorldshortnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LogServer) SetWorldshortname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// LogServer_List is a list of LogServer.
type LogServer_List = capnp.StructList[LogServer]

// NewLogServer creates a new list of LogServer.
func NewLogServer_List(s *capnp.Segment, sz int32) (LogServer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LogServer](l), err
}

// LogServer_Future is a wrapper for a LogServer promised by a client call.
type LogServer_Future struct{ *capnp.Future }

func (f LogServer_Future) Struct() (LogServer, error) {
	p, err := f.Future.Ptr()
	return LogServer(p.Struct()), err
}

type ClientError capnp.Struct

// ClientError_TypeID is the unique identifier for the type ClientError.
const ClientError_TypeID = 0xcf7084fe71119d92

func NewClientError(s *capnp.Segment) (ClientError, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientError(st), err
}

func NewRootClientError(s *capnp.Segment) (ClientError, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientError(st), err
}

func ReadRootClientError(msg *capnp.Message) (ClientError, error) {
	root, err := msg.Root()
	return ClientError(root.Struct()), err
}

func (s ClientError) String() string {
	str, _ := text.Marshal(0xcf7084fe71119d92, capnp.Struct(s))
	return str
}

func (s ClientError) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientError) DecodeFromPtr(p capnp.Ptr) ClientError {
	return ClientError(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientError) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientError) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientError) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientError) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientError) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientError) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientError) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientError) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClientError) CharacterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ClientError) HasCharacterName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClientError) CharacterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ClientError) SetCharacterName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ClientError) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ClientError) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ClientError) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ClientError) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ClientError_List is a list of ClientError.
type ClientError_List = capnp.StructList[ClientError]

// NewClientError creates a new list of ClientError.
func NewClientError_List(s *capnp.Segment, sz int32) (ClientError_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ClientError](l), err
}

// ClientError_Future is a wrapper for a ClientError promised by a client call.
type ClientError_Future struct{ *capnp.Future }

func (f ClientError_Future) Struct() (ClientError, error) {
	p, err := f.Future.Ptr()
	return ClientError(p.Struct()), err
}

type MobHealth capnp.Struct

// MobHealth_TypeID is the unique identifier for the type MobHealth.
const MobHealth_TypeID = 0xb915e75dd5f36b13

func NewMobHealth(s *capnp.Segment) (MobHealth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MobHealth(st), err
}

func NewRootMobHealth(s *capnp.Segment) (MobHealth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MobHealth(st), err
}

func ReadRootMobHealth(msg *capnp.Message) (MobHealth, error) {
	root, err := msg.Root()
	return MobHealth(root.Struct()), err
}

func (s MobHealth) String() string {
	str, _ := text.Marshal(0xb915e75dd5f36b13, capnp.Struct(s))
	return str
}

func (s MobHealth) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MobHealth) DecodeFromPtr(p capnp.Ptr) MobHealth {
	return MobHealth(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MobHealth) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MobHealth) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MobHealth) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MobHealth) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MobHealth) Hp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MobHealth) SetHp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MobHealth) Id() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MobHealth) SetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// MobHealth_List is a list of MobHealth.
type MobHealth_List = capnp.StructList[MobHealth]

// NewMobHealth creates a new list of MobHealth.
func NewMobHealth_List(s *capnp.Segment, sz int32) (MobHealth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MobHealth](l), err
}

// MobHealth_Future is a wrapper for a MobHealth promised by a client call.
type MobHealth_Future struct{ *capnp.Future }

func (f MobHealth_Future) Struct() (MobHealth, error) {
	p, err := f.Future.Ptr()
	return MobHealth(p.Struct()), err
}

type Track capnp.Struct

// Track_TypeID is the unique identifier for the type Track.
const Track_TypeID = 0x8f371262d861f7d1

func NewTrack(s *capnp.Segment) (Track, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Track(st), err
}

func NewRootTrack(s *capnp.Segment) (Track, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Track(st), err
}

func ReadRootTrack(msg *capnp.Message) (Track, error) {
	root, err := msg.Root()
	return Track(root.Struct()), err
}

func (s Track) String() string {
	str, _ := text.Marshal(0x8f371262d861f7d1, capnp.Struct(s))
	return str
}

func (s Track) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Track) DecodeFromPtr(p capnp.Ptr) Track {
	return Track(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Track) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Track) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Track) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Track) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Track) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Track) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Track) Distance() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Track) SetDistance(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// Track_List is a list of Track.
type Track_List = capnp.StructList[Track]

// NewTrack creates a new list of Track.
func NewTrack_List(s *capnp.Segment, sz int32) (Track_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Track](l), err
}

// Track_Future is a wrapper for a Track promised by a client call.
type Track_Future struct{ *capnp.Future }

func (f Track_Future) Struct() (Track, error) {
	p, err := f.Future.Ptr()
	return Track(p.Struct()), err
}

type TrackTarget capnp.Struct

// TrackTarget_TypeID is the unique identifier for the type TrackTarget.
const TrackTarget_TypeID = 0x881a3fa8b6a21e65

func NewTrackTarget(s *capnp.Segment) (TrackTarget, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TrackTarget(st), err
}

func NewRootTrackTarget(s *capnp.Segment) (TrackTarget, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TrackTarget(st), err
}

func ReadRootTrackTarget(msg *capnp.Message) (TrackTarget, error) {
	root, err := msg.Root()
	return TrackTarget(root.Struct()), err
}

func (s TrackTarget) String() string {
	str, _ := text.Marshal(0x881a3fa8b6a21e65, capnp.Struct(s))
	return str
}

func (s TrackTarget) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrackTarget) DecodeFromPtr(p capnp.Ptr) TrackTarget {
	return TrackTarget(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrackTarget) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrackTarget) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrackTarget) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrackTarget) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrackTarget) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TrackTarget) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// TrackTarget_List is a list of TrackTarget.
type TrackTarget_List = capnp.StructList[TrackTarget]

// NewTrackTarget creates a new list of TrackTarget.
func NewTrackTarget_List(s *capnp.Segment, sz int32) (TrackTarget_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TrackTarget](l), err
}

// TrackTarget_Future is a wrapper for a TrackTarget promised by a client call.
type TrackTarget_Future struct{ *capnp.Future }

func (f TrackTarget_Future) Struct() (TrackTarget, error) {
	p, err := f.Future.Ptr()
	return TrackTarget(p.Struct()), err
}

type Tracking capnp.Struct

// Tracking_TypeID is the unique identifier for the type Tracking.
const Tracking_TypeID = 0x8929937be8c9e001

func NewTracking(s *capnp.Segment) (Tracking, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tracking(st), err
}

func NewRootTracking(s *capnp.Segment) (Tracking, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tracking(st), err
}

func ReadRootTracking(msg *capnp.Message) (Tracking, error) {
	root, err := msg.Root()
	return Tracking(root.Struct()), err
}

func (s Tracking) String() string {
	str, _ := text.Marshal(0x8929937be8c9e001, capnp.Struct(s))
	return str
}

func (s Tracking) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tracking) DecodeFromPtr(p capnp.Ptr) Tracking {
	return Tracking(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tracking) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tracking) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tracking) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tracking) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tracking) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Tracking) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Tracking) Entries() (Track_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Track_List(p.List()), err
}

func (s Tracking) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tracking) SetEntries(v Track_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Track_List, preferring placement in s's segment.
func (s Tracking) NewEntries(n int32) (Track_List, error) {
	l, err := NewTrack_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Track_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Tracking_List is a list of Tracking.
type Tracking_List = capnp.StructList[Tracking]

// NewTracking creates a new list of Tracking.
func NewTracking_List(s *capnp.Segment, sz int32) (Tracking_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Tracking](l), err
}

// Tracking_Future is a wrapper for a Tracking promised by a client call.
type Tracking_Future struct{ *capnp.Future }

func (f Tracking_Future) Struct() (Tracking, error) {
	p, err := f.Future.Ptr()
	return Tracking(p.Struct()), err
}

type ZoneServerInfo capnp.Struct

// ZoneServerInfo_TypeID is the unique identifier for the type ZoneServerInfo.
const ZoneServerInfo_TypeID = 0x94d039e60a812076

func NewZoneServerInfo(s *capnp.Segment) (ZoneServerInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZoneServerInfo(st), err
}

func NewRootZoneServerInfo(s *capnp.Segment) (ZoneServerInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZoneServerInfo(st), err
}

func ReadRootZoneServerInfo(msg *capnp.Message) (ZoneServerInfo, error) {
	root, err := msg.Root()
	return ZoneServerInfo(root.Struct()), err
}

func (s ZoneServerInfo) String() string {
	str, _ := text.Marshal(0x94d039e60a812076, capnp.Struct(s))
	return str
}

func (s ZoneServerInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneServerInfo) DecodeFromPtr(p capnp.Ptr) ZoneServerInfo {
	return ZoneServerInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneServerInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneServerInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneServerInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneServerInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneServerInfo) Ip() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneServerInfo) HasIp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneServerInfo) IpBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneServerInfo) SetIp(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ZoneServerInfo) Port() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ZoneServerInfo) SetPort(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ZoneServerInfo_List is a list of ZoneServerInfo.
type ZoneServerInfo_List = capnp.StructList[ZoneServerInfo]

// NewZoneServerInfo creates a new list of ZoneServerInfo.
func NewZoneServerInfo_List(s *capnp.Segment, sz int32) (ZoneServerInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ZoneServerInfo](l), err
}

// ZoneServerInfo_Future is a wrapper for a ZoneServerInfo promised by a client call.
type ZoneServerInfo_Future struct{ *capnp.Future }

func (f ZoneServerInfo_Future) Struct() (ZoneServerInfo, error) {
	p, err := f.Future.Ptr()
	return ZoneServerInfo(p.Struct()), err
}

type WhoAllPlayer capnp.Struct

// WhoAllPlayer_TypeID is the unique identifier for the type WhoAllPlayer.
const WhoAllPlayer_TypeID = 0xc20152b889987299

func NewWhoAllPlayer(s *capnp.Segment) (WhoAllPlayer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return WhoAllPlayer(st), err
}

func NewRootWhoAllPlayer(s *capnp.Segment) (WhoAllPlayer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return WhoAllPlayer(st), err
}

func ReadRootWhoAllPlayer(msg *capnp.Message) (WhoAllPlayer, error) {
	root, err := msg.Root()
	return WhoAllPlayer(root.Struct()), err
}

func (s WhoAllPlayer) String() string {
	str, _ := text.Marshal(0xc20152b889987299, capnp.Struct(s))
	return str
}

func (s WhoAllPlayer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAllPlayer) DecodeFromPtr(p capnp.Ptr) WhoAllPlayer {
	return WhoAllPlayer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAllPlayer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAllPlayer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAllPlayer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAllPlayer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAllPlayer) Formatstring() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAllPlayer) SetFormatstring(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAllPlayer) Pidstring() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAllPlayer) SetPidstring(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAllPlayer) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAllPlayer) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAllPlayer) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAllPlayer) Rankstring() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAllPlayer) SetRankstring(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAllPlayer) Guild() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WhoAllPlayer) HasGuild() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WhoAllPlayer) GuildBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetGuild(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WhoAllPlayer) Zonestring() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAllPlayer) SetZonestring(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAllPlayer) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s WhoAllPlayer) SetZone(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s WhoAllPlayer) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s WhoAllPlayer) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s WhoAllPlayer) Level() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s WhoAllPlayer) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s WhoAllPlayer) Race() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s WhoAllPlayer) SetRace(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s WhoAllPlayer) Account() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WhoAllPlayer) HasAccount() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WhoAllPlayer) AccountBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetAccount(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// WhoAllPlayer_List is a list of WhoAllPlayer.
type WhoAllPlayer_List = capnp.StructList[WhoAllPlayer]

// NewWhoAllPlayer creates a new list of WhoAllPlayer.
func NewWhoAllPlayer_List(s *capnp.Segment, sz int32) (WhoAllPlayer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[WhoAllPlayer](l), err
}

// WhoAllPlayer_Future is a wrapper for a WhoAllPlayer promised by a client call.
type WhoAllPlayer_Future struct{ *capnp.Future }

func (f WhoAllPlayer_Future) Struct() (WhoAllPlayer, error) {
	p, err := f.Future.Ptr()
	return WhoAllPlayer(p.Struct()), err
}

type WhoAllReturn capnp.Struct

// WhoAllReturn_TypeID is the unique identifier for the type WhoAllReturn.
const WhoAllReturn_TypeID = 0xa58428b610ebb10c

func NewWhoAllReturn(s *capnp.Segment) (WhoAllReturn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return WhoAllReturn(st), err
}

func NewRootWhoAllReturn(s *capnp.Segment) (WhoAllReturn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return WhoAllReturn(st), err
}

func ReadRootWhoAllReturn(msg *capnp.Message) (WhoAllReturn, error) {
	root, err := msg.Root()
	return WhoAllReturn(root.Struct()), err
}

func (s WhoAllReturn) String() string {
	str, _ := text.Marshal(0xa58428b610ebb10c, capnp.Struct(s))
	return str
}

func (s WhoAllReturn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAllReturn) DecodeFromPtr(p capnp.Ptr) WhoAllReturn {
	return WhoAllReturn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAllReturn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAllReturn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAllReturn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAllReturn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAllReturn) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAllReturn) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAllReturn) Playerineqstring() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAllReturn) SetPlayerineqstring(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAllReturn) Line() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAllReturn) HasLine() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAllReturn) LineBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAllReturn) SetLine(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAllReturn) Playersinzonestring() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAllReturn) SetPlayersinzonestring(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAllReturn) Count() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAllReturn) SetCount(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAllReturn) Player() (WhoAllPlayer_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WhoAllPlayer_List(p.List()), err
}

func (s WhoAllReturn) HasPlayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WhoAllReturn) SetPlayer(v WhoAllPlayer_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPlayer sets the player field to a newly
// allocated WhoAllPlayer_List, preferring placement in s's segment.
func (s WhoAllReturn) NewPlayer(n int32) (WhoAllPlayer_List, error) {
	l, err := NewWhoAllPlayer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WhoAllPlayer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// WhoAllReturn_List is a list of WhoAllReturn.
type WhoAllReturn_List = capnp.StructList[WhoAllReturn]

// NewWhoAllReturn creates a new list of WhoAllReturn.
func NewWhoAllReturn_List(s *capnp.Segment, sz int32) (WhoAllReturn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[WhoAllReturn](l), err
}

// WhoAllReturn_Future is a wrapper for a WhoAllReturn promised by a client call.
type WhoAllReturn_Future struct{ *capnp.Future }

func (f WhoAllReturn_Future) Struct() (WhoAllReturn, error) {
	p, err := f.Future.Ptr()
	return WhoAllReturn(p.Struct()), err
}

type Trader capnp.Struct

// Trader_TypeID is the unique identifier for the type Trader.
const Trader_TypeID = 0xd351f43ee97d7196

func NewTrader(s *capnp.Segment) (Trader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Trader(st), err
}

func NewRootTrader(s *capnp.Segment) (Trader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Trader(st), err
}

func ReadRootTrader(msg *capnp.Message) (Trader, error) {
	root, err := msg.Root()
	return Trader(root.Struct()), err
}

func (s Trader) String() string {
	str, _ := text.Marshal(0xd351f43ee97d7196, capnp.Struct(s))
	return str
}

func (s Trader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Trader) DecodeFromPtr(p capnp.Ptr) Trader {
	return Trader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Trader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Trader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Trader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Trader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Trader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Trader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Trader) Itemid() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Trader) HasItemid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Trader) SetItemid(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemid sets the itemid field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Trader) NewItemid(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Trader) Itemcost() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s Trader) HasItemcost() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Trader) SetItemcost(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItemcost sets the itemcost field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Trader) NewItemcost(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Trader_List is a list of Trader.
type Trader_List = capnp.StructList[Trader]

// NewTrader creates a new list of Trader.
func NewTrader_List(s *capnp.Segment, sz int32) (Trader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Trader](l), err
}

// Trader_Future is a wrapper for a Trader promised by a client call.
type Trader_Future struct{ *capnp.Future }

func (f Trader_Future) Struct() (Trader, error) {
	p, err := f.Future.Ptr()
	return Trader(p.Struct()), err
}

type ClickTrader capnp.Struct

// ClickTrader_TypeID is the unique identifier for the type ClickTrader.
const ClickTrader_TypeID = 0xf640e180eb6f7e34

func NewClickTrader(s *capnp.Segment) (ClickTrader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ClickTrader(st), err
}

func NewRootClickTrader(s *capnp.Segment) (ClickTrader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ClickTrader(st), err
}

func ReadRootClickTrader(msg *capnp.Message) (ClickTrader, error) {
	root, err := msg.Root()
	return ClickTrader(root.Struct()), err
}

func (s ClickTrader) String() string {
	str, _ := text.Marshal(0xf640e180eb6f7e34, capnp.Struct(s))
	return str
}

func (s ClickTrader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickTrader) DecodeFromPtr(p capnp.Ptr) ClickTrader {
	return ClickTrader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickTrader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickTrader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickTrader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickTrader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickTrader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickTrader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickTrader) Itemcost() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ClickTrader) HasItemcost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickTrader) SetItemcost(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemcost sets the itemcost field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ClickTrader) NewItemcost(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ClickTrader_List is a list of ClickTrader.
type ClickTrader_List = capnp.StructList[ClickTrader]

// NewClickTrader creates a new list of ClickTrader.
func NewClickTrader_List(s *capnp.Segment, sz int32) (ClickTrader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ClickTrader](l), err
}

// ClickTrader_Future is a wrapper for a ClickTrader promised by a client call.
type ClickTrader_Future struct{ *capnp.Future }

func (f ClickTrader_Future) Struct() (ClickTrader, error) {
	p, err := f.Future.Ptr()
	return ClickTrader(p.Struct()), err
}

type GetItems capnp.Struct

// GetItems_TypeID is the unique identifier for the type GetItems.
const GetItems_TypeID = 0xa796a4d827fc48b4

func NewGetItems(s *capnp.Segment) (GetItems, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetItems(st), err
}

func NewRootGetItems(s *capnp.Segment) (GetItems, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetItems(st), err
}

func ReadRootGetItems(msg *capnp.Message) (GetItems, error) {
	root, err := msg.Root()
	return GetItems(root.Struct()), err
}

func (s GetItems) String() string {
	str, _ := text.Marshal(0xa796a4d827fc48b4, capnp.Struct(s))
	return str
}

func (s GetItems) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetItems) DecodeFromPtr(p capnp.Ptr) GetItems {
	return GetItems(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetItems) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetItems) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetItems) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetItems) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetItems) Items() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s GetItems) HasItems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GetItems) SetItems(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s GetItems) NewItems(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GetItems_List is a list of GetItems.
type GetItems_List = capnp.StructList[GetItems]

// NewGetItems creates a new list of GetItems.
func NewGetItems_List(s *capnp.Segment, sz int32) (GetItems_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetItems](l), err
}

// GetItems_Future is a wrapper for a GetItems promised by a client call.
type GetItems_Future struct{ *capnp.Future }

func (f GetItems_Future) Struct() (GetItems, error) {
	p, err := f.Future.Ptr()
	return GetItems(p.Struct()), err
}

type BecomeTrader capnp.Struct

// BecomeTrader_TypeID is the unique identifier for the type BecomeTrader.
const BecomeTrader_TypeID = 0x9e7c63f7db1235ba

func NewBecomeTrader(s *capnp.Segment) (BecomeTrader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeTrader(st), err
}

func NewRootBecomeTrader(s *capnp.Segment) (BecomeTrader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeTrader(st), err
}

func ReadRootBecomeTrader(msg *capnp.Message) (BecomeTrader, error) {
	root, err := msg.Root()
	return BecomeTrader(root.Struct()), err
}

func (s BecomeTrader) String() string {
	str, _ := text.Marshal(0x9e7c63f7db1235ba, capnp.Struct(s))
	return str
}

func (s BecomeTrader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeTrader) DecodeFromPtr(p capnp.Ptr) BecomeTrader {
	return BecomeTrader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeTrader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeTrader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeTrader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeTrader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeTrader) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeTrader) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeTrader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BecomeTrader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BecomeTrader_List is a list of BecomeTrader.
type BecomeTrader_List = capnp.StructList[BecomeTrader]

// NewBecomeTrader creates a new list of BecomeTrader.
func NewBecomeTrader_List(s *capnp.Segment, sz int32) (BecomeTrader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BecomeTrader](l), err
}

// BecomeTrader_Future is a wrapper for a BecomeTrader promised by a client call.
type BecomeTrader_Future struct{ *capnp.Future }

func (f BecomeTrader_Future) Struct() (BecomeTrader, error) {
	p, err := f.Future.Ptr()
	return BecomeTrader(p.Struct()), err
}

type TraderShowItems capnp.Struct

// TraderShowItems_TypeID is the unique identifier for the type TraderShowItems.
const TraderShowItems_TypeID = 0xc008c1d71bacfa15

func NewTraderShowItems(s *capnp.Segment) (TraderShowItems, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderShowItems(st), err
}

func NewRootTraderShowItems(s *capnp.Segment) (TraderShowItems, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderShowItems(st), err
}

func ReadRootTraderShowItems(msg *capnp.Message) (TraderShowItems, error) {
	root, err := msg.Root()
	return TraderShowItems(root.Struct()), err
}

func (s TraderShowItems) String() string {
	str, _ := text.Marshal(0xc008c1d71bacfa15, capnp.Struct(s))
	return str
}

func (s TraderShowItems) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderShowItems) DecodeFromPtr(p capnp.Ptr) TraderShowItems {
	return TraderShowItems(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderShowItems) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderShowItems) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderShowItems) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderShowItems) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderShowItems) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderShowItems) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderShowItems) TraderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderShowItems) SetTraderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderShowItems_List is a list of TraderShowItems.
type TraderShowItems_List = capnp.StructList[TraderShowItems]

// NewTraderShowItems creates a new list of TraderShowItems.
func NewTraderShowItems_List(s *capnp.Segment, sz int32) (TraderShowItems_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderShowItems](l), err
}

// TraderShowItems_Future is a wrapper for a TraderShowItems promised by a client call.
type TraderShowItems_Future struct{ *capnp.Future }

func (f TraderShowItems_Future) Struct() (TraderShowItems, error) {
	p, err := f.Future.Ptr()
	return TraderShowItems(p.Struct()), err
}

type TraderBuy capnp.Struct

// TraderBuy_TypeID is the unique identifier for the type TraderBuy.
const TraderBuy_TypeID = 0x838b6e674280f93f

func NewTraderBuy(s *capnp.Segment) (TraderBuy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return TraderBuy(st), err
}

func NewRootTraderBuy(s *capnp.Segment) (TraderBuy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return TraderBuy(st), err
}

func ReadRootTraderBuy(msg *capnp.Message) (TraderBuy, error) {
	root, err := msg.Root()
	return TraderBuy(root.Struct()), err
}

func (s TraderBuy) String() string {
	str, _ := text.Marshal(0x838b6e674280f93f, capnp.Struct(s))
	return str
}

func (s TraderBuy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderBuy) DecodeFromPtr(p capnp.Ptr) TraderBuy {
	return TraderBuy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderBuy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderBuy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderBuy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderBuy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderBuy) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderBuy) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderBuy) Price() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderBuy) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TraderBuy) TraderId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TraderBuy) SetTraderId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TraderBuy) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TraderBuy) HasItemName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TraderBuy) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TraderBuy) SetItemName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TraderBuy) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TraderBuy) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TraderBuy) AlreadySold() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TraderBuy) SetAlreadySold(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TraderBuy) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TraderBuy) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// TraderBuy_List is a list of TraderBuy.
type TraderBuy_List = capnp.StructList[TraderBuy]

// NewTraderBuy creates a new list of TraderBuy.
func NewTraderBuy_List(s *capnp.Segment, sz int32) (TraderBuy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[TraderBuy](l), err
}

// TraderBuy_Future is a wrapper for a TraderBuy promised by a client call.
type TraderBuy_Future struct{ *capnp.Future }

func (f TraderBuy_Future) Struct() (TraderBuy, error) {
	p, err := f.Future.Ptr()
	return TraderBuy(p.Struct()), err
}

type TraderItemUpdate capnp.Struct

// TraderItemUpdate_TypeID is the unique identifier for the type TraderItemUpdate.
const TraderItemUpdate_TypeID = 0xc998874f2bcc5999

func NewTraderItemUpdate(s *capnp.Segment) (TraderItemUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TraderItemUpdate(st), err
}

func NewRootTraderItemUpdate(s *capnp.Segment) (TraderItemUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TraderItemUpdate(st), err
}

func ReadRootTraderItemUpdate(msg *capnp.Message) (TraderItemUpdate, error) {
	root, err := msg.Root()
	return TraderItemUpdate(root.Struct()), err
}

func (s TraderItemUpdate) String() string {
	str, _ := text.Marshal(0xc998874f2bcc5999, capnp.Struct(s))
	return str
}

func (s TraderItemUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderItemUpdate) DecodeFromPtr(p capnp.Ptr) TraderItemUpdate {
	return TraderItemUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderItemUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderItemUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderItemUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderItemUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderItemUpdate) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderItemUpdate) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderItemUpdate) Fromslot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderItemUpdate) SetFromslot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TraderItemUpdate) Toslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TraderItemUpdate) SetToslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TraderItemUpdate) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TraderItemUpdate) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// TraderItemUpdate_List is a list of TraderItemUpdate.
type TraderItemUpdate_List = capnp.StructList[TraderItemUpdate]

// NewTraderItemUpdate creates a new list of TraderItemUpdate.
func NewTraderItemUpdate_List(s *capnp.Segment, sz int32) (TraderItemUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TraderItemUpdate](l), err
}

// TraderItemUpdate_Future is a wrapper for a TraderItemUpdate promised by a client call.
type TraderItemUpdate_Future struct{ *capnp.Future }

func (f TraderItemUpdate_Future) Struct() (TraderItemUpdate, error) {
	p, err := f.Future.Ptr()
	return TraderItemUpdate(p.Struct()), err
}

type MoneyUpdate capnp.Struct

// MoneyUpdate_TypeID is the unique identifier for the type MoneyUpdate.
const MoneyUpdate_TypeID = 0xb26bddc14e66729a

func NewMoneyUpdate(s *capnp.Segment) (MoneyUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoneyUpdate(st), err
}

func NewRootMoneyUpdate(s *capnp.Segment) (MoneyUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoneyUpdate(st), err
}

func ReadRootMoneyUpdate(msg *capnp.Message) (MoneyUpdate, error) {
	root, err := msg.Root()
	return MoneyUpdate(root.Struct()), err
}

func (s MoneyUpdate) String() string {
	str, _ := text.Marshal(0xb26bddc14e66729a, capnp.Struct(s))
	return str
}

func (s MoneyUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoneyUpdate) DecodeFromPtr(p capnp.Ptr) MoneyUpdate {
	return MoneyUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoneyUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoneyUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoneyUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoneyUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoneyUpdate) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoneyUpdate) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoneyUpdate) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoneyUpdate) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoneyUpdate) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoneyUpdate) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoneyUpdate) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoneyUpdate) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MoneyUpdate_List is a list of MoneyUpdate.
type MoneyUpdate_List = capnp.StructList[MoneyUpdate]

// NewMoneyUpdate creates a new list of MoneyUpdate.
func NewMoneyUpdate_List(s *capnp.Segment, sz int32) (MoneyUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MoneyUpdate](l), err
}

// MoneyUpdate_Future is a wrapper for a MoneyUpdate promised by a client call.
type MoneyUpdate_Future struct{ *capnp.Future }

func (f MoneyUpdate_Future) Struct() (MoneyUpdate, error) {
	p, err := f.Future.Ptr()
	return MoneyUpdate(p.Struct()), err
}

type TraderDelItem capnp.Struct

// TraderDelItem_TypeID is the unique identifier for the type TraderDelItem.
const TraderDelItem_TypeID = 0xc73e9eb76d70ee0a

func NewTraderDelItem(s *capnp.Segment) (TraderDelItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderDelItem(st), err
}

func NewRootTraderDelItem(s *capnp.Segment) (TraderDelItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderDelItem(st), err
}

func ReadRootTraderDelItem(msg *capnp.Message) (TraderDelItem, error) {
	root, err := msg.Root()
	return TraderDelItem(root.Struct()), err
}

func (s TraderDelItem) String() string {
	str, _ := text.Marshal(0xc73e9eb76d70ee0a, capnp.Struct(s))
	return str
}

func (s TraderDelItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderDelItem) DecodeFromPtr(p capnp.Ptr) TraderDelItem {
	return TraderDelItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderDelItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderDelItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderDelItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderDelItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderDelItem) Slotid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderDelItem) SetSlotid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderDelItem) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderDelItem) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderDelItem_List is a list of TraderDelItem.
type TraderDelItem_List = capnp.StructList[TraderDelItem]

// NewTraderDelItem creates a new list of TraderDelItem.
func NewTraderDelItem_List(s *capnp.Segment, sz int32) (TraderDelItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderDelItem](l), err
}

// TraderDelItem_Future is a wrapper for a TraderDelItem promised by a client call.
type TraderDelItem_Future struct{ *capnp.Future }

func (f TraderDelItem_Future) Struct() (TraderDelItem, error) {
	p, err := f.Future.Ptr()
	return TraderDelItem(p.Struct()), err
}

type TraderClick capnp.Struct

// TraderClick_TypeID is the unique identifier for the type TraderClick.
const TraderClick_TypeID = 0xcac443c397628440

func NewTraderClick(s *capnp.Segment) (TraderClick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderClick(st), err
}

func NewRootTraderClick(s *capnp.Segment) (TraderClick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderClick(st), err
}

func ReadRootTraderClick(msg *capnp.Message) (TraderClick, error) {
	root, err := msg.Root()
	return TraderClick(root.Struct()), err
}

func (s TraderClick) String() string {
	str, _ := text.Marshal(0xcac443c397628440, capnp.Struct(s))
	return str
}

func (s TraderClick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderClick) DecodeFromPtr(p capnp.Ptr) TraderClick {
	return TraderClick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderClick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderClick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderClick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderClick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderClick) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderClick) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderClick) Approval() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderClick) SetApproval(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderClick_List is a list of TraderClick.
type TraderClick_List = capnp.StructList[TraderClick]

// NewTraderClick creates a new list of TraderClick.
func NewTraderClick_List(s *capnp.Segment, sz int32) (TraderClick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderClick](l), err
}

// TraderClick_Future is a wrapper for a TraderClick promised by a client call.
type TraderClick_Future struct{ *capnp.Future }

func (f TraderClick_Future) Struct() (TraderClick, error) {
	p, err := f.Future.Ptr()
	return TraderClick(p.Struct()), err
}

type FormattedMessage capnp.Struct

// FormattedMessage_TypeID is the unique identifier for the type FormattedMessage.
const FormattedMessage_TypeID = 0xfb596df65e062edf

func NewFormattedMessage(s *capnp.Segment) (FormattedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FormattedMessage(st), err
}

func NewRootFormattedMessage(s *capnp.Segment) (FormattedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FormattedMessage(st), err
}

func ReadRootFormattedMessage(msg *capnp.Message) (FormattedMessage, error) {
	root, err := msg.Root()
	return FormattedMessage(root.Struct()), err
}

func (s FormattedMessage) String() string {
	str, _ := text.Marshal(0xfb596df65e062edf, capnp.Struct(s))
	return str
}

func (s FormattedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FormattedMessage) DecodeFromPtr(p capnp.Ptr) FormattedMessage {
	return FormattedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FormattedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FormattedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FormattedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FormattedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FormattedMessage) StringId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FormattedMessage) SetStringId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FormattedMessage) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FormattedMessage) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s FormattedMessage) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s FormattedMessage) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FormattedMessage) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s FormattedMessage) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// FormattedMessage_List is a list of FormattedMessage.
type FormattedMessage_List = capnp.StructList[FormattedMessage]

// NewFormattedMessage creates a new list of FormattedMessage.
func NewFormattedMessage_List(s *capnp.Segment, sz int32) (FormattedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[FormattedMessage](l), err
}

// FormattedMessage_Future is a wrapper for a FormattedMessage promised by a client call.
type FormattedMessage_Future struct{ *capnp.Future }

func (f FormattedMessage_Future) Struct() (FormattedMessage, error) {
	p, err := f.Future.Ptr()
	return FormattedMessage(p.Struct()), err
}

type SimpleMessage capnp.Struct

// SimpleMessage_TypeID is the unique identifier for the type SimpleMessage.
const SimpleMessage_TypeID = 0x8552adf123d9b564

func NewSimpleMessage(s *capnp.Segment) (SimpleMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SimpleMessage(st), err
}

func NewRootSimpleMessage(s *capnp.Segment) (SimpleMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SimpleMessage(st), err
}

func ReadRootSimpleMessage(msg *capnp.Message) (SimpleMessage, error) {
	root, err := msg.Root()
	return SimpleMessage(root.Struct()), err
}

func (s SimpleMessage) String() string {
	str, _ := text.Marshal(0x8552adf123d9b564, capnp.Struct(s))
	return str
}

func (s SimpleMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimpleMessage) DecodeFromPtr(p capnp.Ptr) SimpleMessage {
	return SimpleMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimpleMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimpleMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimpleMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimpleMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimpleMessage) StringId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SimpleMessage) SetStringId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SimpleMessage) Color() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SimpleMessage) SetColor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SimpleMessage_List is a list of SimpleMessage.
type SimpleMessage_List = capnp.StructList[SimpleMessage]

// NewSimpleMessage creates a new list of SimpleMessage.
func NewSimpleMessage_List(s *capnp.Segment, sz int32) (SimpleMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SimpleMessage](l), err
}

// SimpleMessage_Future is a wrapper for a SimpleMessage promised by a client call.
type SimpleMessage_Future struct{ *capnp.Future }

func (f SimpleMessage_Future) Struct() (SimpleMessage, error) {
	p, err := f.Future.Ptr()
	return SimpleMessage(p.Struct()), err
}

type GuildMemberEntry capnp.Struct

// GuildMemberEntry_TypeID is the unique identifier for the type GuildMemberEntry.
const GuildMemberEntry_TypeID = 0x820db271715b4199

func NewGuildMemberEntry(s *capnp.Segment) (GuildMemberEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return GuildMemberEntry(st), err
}

func NewRootGuildMemberEntry(s *capnp.Segment) (GuildMemberEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return GuildMemberEntry(st), err
}

func ReadRootGuildMemberEntry(msg *capnp.Message) (GuildMemberEntry, error) {
	root, err := msg.Root()
	return GuildMemberEntry(root.Struct()), err
}

func (s GuildMemberEntry) String() string {
	str, _ := text.Marshal(0x820db271715b4199, capnp.Struct(s))
	return str
}

func (s GuildMemberEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMemberEntry) DecodeFromPtr(p capnp.Ptr) GuildMemberEntry {
	return GuildMemberEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMemberEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMemberEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMemberEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMemberEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMemberEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMemberEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMemberEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMemberEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMemberEntry) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMemberEntry) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMemberEntry) Banker() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildMemberEntry) SetBanker(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildMemberEntry) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildMemberEntry) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildMemberEntry) Rank() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GuildMemberEntry) SetRank(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GuildMemberEntry) TimeLastOn() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GuildMemberEntry) SetTimeLastOn(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GuildMemberEntry) TributeEnable() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GuildMemberEntry) SetTributeEnable(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s GuildMemberEntry) TotalTribute() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GuildMemberEntry) SetTotalTribute(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GuildMemberEntry) LastTribute() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GuildMemberEntry) SetLastTribute(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GuildMemberEntry) PublicNote() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMemberEntry) HasPublicNote() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMemberEntry) PublicNoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMemberEntry) SetPublicNote(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildMemberEntry) Zoneinstance() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GuildMemberEntry) SetZoneinstance(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s GuildMemberEntry) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s GuildMemberEntry) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

// GuildMemberEntry_List is a list of GuildMemberEntry.
type GuildMemberEntry_List = capnp.StructList[GuildMemberEntry]

// NewGuildMemberEntry creates a new list of GuildMemberEntry.
func NewGuildMemberEntry_List(s *capnp.Segment, sz int32) (GuildMemberEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[GuildMemberEntry](l), err
}

// GuildMemberEntry_Future is a wrapper for a GuildMemberEntry promised by a client call.
type GuildMemberEntry_Future struct{ *capnp.Future }

func (f GuildMemberEntry_Future) Struct() (GuildMemberEntry, error) {
	p, err := f.Future.Ptr()
	return GuildMemberEntry(p.Struct()), err
}

type GuildMembers capnp.Struct

// GuildMembers_TypeID is the unique identifier for the type GuildMembers.
const GuildMembers_TypeID = 0xca9a2c906b36a12e

func NewGuildMembers(s *capnp.Segment) (GuildMembers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildMembers(st), err
}

func NewRootGuildMembers(s *capnp.Segment) (GuildMembers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildMembers(st), err
}

func ReadRootGuildMembers(msg *capnp.Message) (GuildMembers, error) {
	root, err := msg.Root()
	return GuildMembers(root.Struct()), err
}

func (s GuildMembers) String() string {
	str, _ := text.Marshal(0xca9a2c906b36a12e, capnp.Struct(s))
	return str
}

func (s GuildMembers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMembers) DecodeFromPtr(p capnp.Ptr) GuildMembers {
	return GuildMembers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMembers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMembers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMembers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMembers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMembers) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMembers) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMembers) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMembers) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMembers) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMembers) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMembers) Member() (GuildMemberEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return GuildMemberEntry_List(p.List()), err
}

func (s GuildMembers) HasMember() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMembers) SetMember(v GuildMemberEntry_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMember sets the member field to a newly
// allocated GuildMemberEntry_List, preferring placement in s's segment.
func (s GuildMembers) NewMember(n int32) (GuildMemberEntry_List, error) {
	l, err := NewGuildMemberEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GuildMemberEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// GuildMembers_List is a list of GuildMembers.
type GuildMembers_List = capnp.StructList[GuildMembers]

// NewGuildMembers creates a new list of GuildMembers.
func NewGuildMembers_List(s *capnp.Segment, sz int32) (GuildMembers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildMembers](l), err
}

// GuildMembers_Future is a wrapper for a GuildMembers promised by a client call.
type GuildMembers_Future struct{ *capnp.Future }

func (f GuildMembers_Future) Struct() (GuildMembers, error) {
	p, err := f.Future.Ptr()
	return GuildMembers(p.Struct()), err
}

type GuildMOTD capnp.Struct

// GuildMOTD_TypeID is the unique identifier for the type GuildMOTD.
const GuildMOTD_TypeID = 0x9400994ae28f2ed6

func NewGuildMOTD(s *capnp.Segment) (GuildMOTD, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildMOTD(st), err
}

func NewRootGuildMOTD(s *capnp.Segment) (GuildMOTD, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildMOTD(st), err
}

func ReadRootGuildMOTD(msg *capnp.Message) (GuildMOTD, error) {
	root, err := msg.Root()
	return GuildMOTD(root.Struct()), err
}

func (s GuildMOTD) String() string {
	str, _ := text.Marshal(0x9400994ae28f2ed6, capnp.Struct(s))
	return str
}

func (s GuildMOTD) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMOTD) DecodeFromPtr(p capnp.Ptr) GuildMOTD {
	return GuildMOTD(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMOTD) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMOTD) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMOTD) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMOTD) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMOTD) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMOTD) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMOTD) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMOTD) SetbyName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMOTD) HasSetbyName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMOTD) SetbyNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetSetbyName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildMOTD) Motd() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GuildMOTD) HasMotd() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GuildMOTD) MotdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetMotd(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GuildMOTD_List is a list of GuildMOTD.
type GuildMOTD_List = capnp.StructList[GuildMOTD]

// NewGuildMOTD creates a new list of GuildMOTD.
func NewGuildMOTD_List(s *capnp.Segment, sz int32) (GuildMOTD_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GuildMOTD](l), err
}

// GuildMOTD_Future is a wrapper for a GuildMOTD promised by a client call.
type GuildMOTD_Future struct{ *capnp.Future }

func (f GuildMOTD_Future) Struct() (GuildMOTD, error) {
	p, err := f.Future.Ptr()
	return GuildMOTD(p.Struct()), err
}

type GuildUpdatePublicNote capnp.Struct

// GuildUpdatePublicNote_TypeID is the unique identifier for the type GuildUpdatePublicNote.
const GuildUpdatePublicNote_TypeID = 0xa2fef4c64b89cc83

func NewGuildUpdatePublicNote(s *capnp.Segment) (GuildUpdatePublicNote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildUpdatePublicNote(st), err
}

func NewRootGuildUpdatePublicNote(s *capnp.Segment) (GuildUpdatePublicNote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildUpdatePublicNote(st), err
}

func ReadRootGuildUpdatePublicNote(msg *capnp.Message) (GuildUpdatePublicNote, error) {
	root, err := msg.Root()
	return GuildUpdatePublicNote(root.Struct()), err
}

func (s GuildUpdatePublicNote) String() string {
	str, _ := text.Marshal(0xa2fef4c64b89cc83, capnp.Struct(s))
	return str
}

func (s GuildUpdatePublicNote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildUpdatePublicNote) DecodeFromPtr(p capnp.Ptr) GuildUpdatePublicNote {
	return GuildUpdatePublicNote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildUpdatePublicNote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildUpdatePublicNote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildUpdatePublicNote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildUpdatePublicNote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildUpdatePublicNote) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildUpdatePublicNote) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildUpdatePublicNote) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildUpdatePublicNote) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildUpdatePublicNote) Note() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasNote() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GuildUpdatePublicNote) NoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetNote(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GuildUpdatePublicNote_List is a list of GuildUpdatePublicNote.
type GuildUpdatePublicNote_List = capnp.StructList[GuildUpdatePublicNote]

// NewGuildUpdatePublicNote creates a new list of GuildUpdatePublicNote.
func NewGuildUpdatePublicNote_List(s *capnp.Segment, sz int32) (GuildUpdatePublicNote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GuildUpdatePublicNote](l), err
}

// GuildUpdatePublicNote_Future is a wrapper for a GuildUpdatePublicNote promised by a client call.
type GuildUpdatePublicNote_Future struct{ *capnp.Future }

func (f GuildUpdatePublicNote_Future) Struct() (GuildUpdatePublicNote, error) {
	p, err := f.Future.Ptr()
	return GuildUpdatePublicNote(p.Struct()), err
}

type GuildDemote capnp.Struct

// GuildDemote_TypeID is the unique identifier for the type GuildDemote.
const GuildDemote_TypeID = 0xa0ec151dfc4791ad

func NewGuildDemote(s *capnp.Segment) (GuildDemote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildDemote(st), err
}

func NewRootGuildDemote(s *capnp.Segment) (GuildDemote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildDemote(st), err
}

func ReadRootGuildDemote(msg *capnp.Message) (GuildDemote, error) {
	root, err := msg.Root()
	return GuildDemote(root.Struct()), err
}

func (s GuildDemote) String() string {
	str, _ := text.Marshal(0xa0ec151dfc4791ad, capnp.Struct(s))
	return str
}

func (s GuildDemote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildDemote) DecodeFromPtr(p capnp.Ptr) GuildDemote {
	return GuildDemote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildDemote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildDemote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildDemote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildDemote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildDemote) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildDemote) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildDemote) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildDemote) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildDemote) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildDemote) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildDemote) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildDemote) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GuildDemote_List is a list of GuildDemote.
type GuildDemote_List = capnp.StructList[GuildDemote]

// NewGuildDemote creates a new list of GuildDemote.
func NewGuildDemote_List(s *capnp.Segment, sz int32) (GuildDemote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GuildDemote](l), err
}

// GuildDemote_Future is a wrapper for a GuildDemote promised by a client call.
type GuildDemote_Future struct{ *capnp.Future }

func (f GuildDemote_Future) Struct() (GuildDemote, error) {
	p, err := f.Future.Ptr()
	return GuildDemote(p.Struct()), err
}

type GuildRemove capnp.Struct

// GuildRemove_TypeID is the unique identifier for the type GuildRemove.
const GuildRemove_TypeID = 0xd769b0a839cd2c2e

func NewGuildRemove(s *capnp.Segment) (GuildRemove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildRemove(st), err
}

func NewRootGuildRemove(s *capnp.Segment) (GuildRemove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildRemove(st), err
}

func ReadRootGuildRemove(msg *capnp.Message) (GuildRemove, error) {
	root, err := msg.Root()
	return GuildRemove(root.Struct()), err
}

func (s GuildRemove) String() string {
	str, _ := text.Marshal(0xd769b0a839cd2c2e, capnp.Struct(s))
	return str
}

func (s GuildRemove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildRemove) DecodeFromPtr(p capnp.Ptr) GuildRemove {
	return GuildRemove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildRemove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildRemove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildRemove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildRemove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildRemove) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildRemove) HasTarget() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildRemove) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildRemove) SetTarget(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildRemove) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildRemove) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildRemove) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildRemove) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildRemove) Leaderstatus() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildRemove) SetLeaderstatus(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GuildRemove_List is a list of GuildRemove.
type GuildRemove_List = capnp.StructList[GuildRemove]

// NewGuildRemove creates a new list of GuildRemove.
func NewGuildRemove_List(s *capnp.Segment, sz int32) (GuildRemove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildRemove](l), err
}

// GuildRemove_Future is a wrapper for a GuildRemove promised by a client call.
type GuildRemove_Future struct{ *capnp.Future }

func (f GuildRemove_Future) Struct() (GuildRemove, error) {
	p, err := f.Future.Ptr()
	return GuildRemove(p.Struct()), err
}

type GuildMakeLeader capnp.Struct

// GuildMakeLeader_TypeID is the unique identifier for the type GuildMakeLeader.
const GuildMakeLeader_TypeID = 0xdb92e7fa759f1894

func NewGuildMakeLeader(s *capnp.Segment) (GuildMakeLeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildMakeLeader(st), err
}

func NewRootGuildMakeLeader(s *capnp.Segment) (GuildMakeLeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildMakeLeader(st), err
}

func ReadRootGuildMakeLeader(msg *capnp.Message) (GuildMakeLeader, error) {
	root, err := msg.Root()
	return GuildMakeLeader(root.Struct()), err
}

func (s GuildMakeLeader) String() string {
	str, _ := text.Marshal(0xdb92e7fa759f1894, capnp.Struct(s))
	return str
}

func (s GuildMakeLeader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMakeLeader) DecodeFromPtr(p capnp.Ptr) GuildMakeLeader {
	return GuildMakeLeader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMakeLeader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMakeLeader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMakeLeader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMakeLeader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMakeLeader) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMakeLeader) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMakeLeader) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMakeLeader) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMakeLeader) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMakeLeader) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMakeLeader) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMakeLeader) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GuildMakeLeader_List is a list of GuildMakeLeader.
type GuildMakeLeader_List = capnp.StructList[GuildMakeLeader]

// NewGuildMakeLeader creates a new list of GuildMakeLeader.
func NewGuildMakeLeader_List(s *capnp.Segment, sz int32) (GuildMakeLeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GuildMakeLeader](l), err
}

// GuildMakeLeader_Future is a wrapper for a GuildMakeLeader promised by a client call.
type GuildMakeLeader_Future struct{ *capnp.Future }

func (f GuildMakeLeader_Future) Struct() (GuildMakeLeader, error) {
	p, err := f.Future.Ptr()
	return GuildMakeLeader(p.Struct()), err
}

type MakePet capnp.Struct

// MakePet_TypeID is the unique identifier for the type MakePet.
const MakePet_TypeID = 0x919eb8a95b9f8a07

func NewMakePet(s *capnp.Segment) (MakePet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return MakePet(st), err
}

func NewRootMakePet(s *capnp.Segment) (MakePet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return MakePet(st), err
}

func ReadRootMakePet(msg *capnp.Message) (MakePet, error) {
	root, err := msg.Root()
	return MakePet(root.Struct()), err
}

func (s MakePet) String() string {
	str, _ := text.Marshal(0x919eb8a95b9f8a07, capnp.Struct(s))
	return str
}

func (s MakePet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MakePet) DecodeFromPtr(p capnp.Ptr) MakePet {
	return MakePet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MakePet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MakePet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MakePet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MakePet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MakePet) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MakePet) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MakePet) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MakePet) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MakePet) Race() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MakePet) SetRace(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MakePet) Texture() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MakePet) SetTexture(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MakePet) Pettype() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MakePet) SetPettype(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s MakePet) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s MakePet) SetSize(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s MakePet) Type() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s MakePet) SetType(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s MakePet) MinDmg() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s MakePet) SetMinDmg(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s MakePet) MaxDmg() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s MakePet) SetMaxDmg(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// MakePet_List is a list of MakePet.
type MakePet_List = capnp.StructList[MakePet]

// NewMakePet creates a new list of MakePet.
func NewMakePet_List(s *capnp.Segment, sz int32) (MakePet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[MakePet](l), err
}

// MakePet_Future is a wrapper for a MakePet promised by a client call.
type MakePet_Future struct{ *capnp.Future }

func (f MakePet_Future) Struct() (MakePet, error) {
	p, err := f.Future.Ptr()
	return MakePet(p.Struct()), err
}

type GroundSpawn capnp.Struct

// GroundSpawn_TypeID is the unique identifier for the type GroundSpawn.
const GroundSpawn_TypeID = 0x88b187d6e94820bd

func NewGroundSpawn(s *capnp.Segment) (GroundSpawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return GroundSpawn(st), err
}

func NewRootGroundSpawn(s *capnp.Segment) (GroundSpawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return GroundSpawn(st), err
}

func ReadRootGroundSpawn(msg *capnp.Message) (GroundSpawn, error) {
	root, err := msg.Root()
	return GroundSpawn(root.Struct()), err
}

func (s GroundSpawn) String() string {
	str, _ := text.Marshal(0x88b187d6e94820bd, capnp.Struct(s))
	return str
}

func (s GroundSpawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroundSpawn) DecodeFromPtr(p capnp.Ptr) GroundSpawn {
	return GroundSpawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroundSpawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroundSpawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroundSpawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroundSpawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroundSpawn) MaxX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s GroundSpawn) SetMaxX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s GroundSpawn) MaxY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GroundSpawn) SetMaxY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GroundSpawn) MinX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s GroundSpawn) SetMinX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s GroundSpawn) MinY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s GroundSpawn) SetMinY(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s GroundSpawn) MaxZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s GroundSpawn) SetMaxZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s GroundSpawn) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s GroundSpawn) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s GroundSpawn) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroundSpawn) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroundSpawn) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroundSpawn) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroundSpawn) Item() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GroundSpawn) SetItem(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GroundSpawn) MaxAllowed() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GroundSpawn) SetMaxAllowed(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GroundSpawn) Respawntimer() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GroundSpawn) SetRespawntimer(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// GroundSpawn_List is a list of GroundSpawn.
type GroundSpawn_List = capnp.StructList[GroundSpawn]

// NewGroundSpawn creates a new list of GroundSpawn.
func NewGroundSpawn_List(s *capnp.Segment, sz int32) (GroundSpawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[GroundSpawn](l), err
}

// GroundSpawn_Future is a wrapper for a GroundSpawn promised by a client call.
type GroundSpawn_Future struct{ *capnp.Future }

func (f GroundSpawn_Future) Struct() (GroundSpawn, error) {
	p, err := f.Future.Ptr()
	return GroundSpawn(p.Struct()), err
}

type GroundSpawns capnp.Struct

// GroundSpawns_TypeID is the unique identifier for the type GroundSpawns.
const GroundSpawns_TypeID = 0xdf6b29c6f745a197

func NewGroundSpawns(s *capnp.Segment) (GroundSpawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GroundSpawns(st), err
}

func NewRootGroundSpawns(s *capnp.Segment) (GroundSpawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GroundSpawns(st), err
}

func ReadRootGroundSpawns(msg *capnp.Message) (GroundSpawns, error) {
	root, err := msg.Root()
	return GroundSpawns(root.Struct()), err
}

func (s GroundSpawns) String() string {
	str, _ := text.Marshal(0xdf6b29c6f745a197, capnp.Struct(s))
	return str
}

func (s GroundSpawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroundSpawns) DecodeFromPtr(p capnp.Ptr) GroundSpawns {
	return GroundSpawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroundSpawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroundSpawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroundSpawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroundSpawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroundSpawns) Spawn() (GroundSpawn_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GroundSpawn_List(p.List()), err
}

func (s GroundSpawns) HasSpawn() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroundSpawns) SetSpawn(v GroundSpawn_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpawn sets the spawn field to a newly
// allocated GroundSpawn_List, preferring placement in s's segment.
func (s GroundSpawns) NewSpawn(n int32) (GroundSpawn_List, error) {
	l, err := NewGroundSpawn_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GroundSpawn_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GroundSpawns_List is a list of GroundSpawns.
type GroundSpawns_List = capnp.StructList[GroundSpawns]

// NewGroundSpawns creates a new list of GroundSpawns.
func NewGroundSpawns_List(s *capnp.Segment, sz int32) (GroundSpawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GroundSpawns](l), err
}

// GroundSpawns_Future is a wrapper for a GroundSpawns promised by a client call.
type GroundSpawns_Future struct{ *capnp.Future }

func (f GroundSpawns_Future) Struct() (GroundSpawns, error) {
	p, err := f.Future.Ptr()
	return GroundSpawns(p.Struct()), err
}

type ApproveZone capnp.Struct

// ApproveZone_TypeID is the unique identifier for the type ApproveZone.
const ApproveZone_TypeID = 0xb6c8b8141b0acfa3

func NewApproveZone(s *capnp.Segment) (ApproveZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ApproveZone(st), err
}

func NewRootApproveZone(s *capnp.Segment) (ApproveZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ApproveZone(st), err
}

func ReadRootApproveZone(msg *capnp.Message) (ApproveZone, error) {
	root, err := msg.Root()
	return ApproveZone(root.Struct()), err
}

func (s ApproveZone) String() string {
	str, _ := text.Marshal(0xb6c8b8141b0acfa3, capnp.Struct(s))
	return str
}

func (s ApproveZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApproveZone) DecodeFromPtr(p capnp.Ptr) ApproveZone {
	return ApproveZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApproveZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApproveZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApproveZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApproveZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApproveZone) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ApproveZone) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ApproveZone) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ApproveZone) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ApproveZone) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ApproveZone) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ApproveZone) Approve() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ApproveZone) SetApprove(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ApproveZone_List is a list of ApproveZone.
type ApproveZone_List = capnp.StructList[ApproveZone]

// NewApproveZone creates a new list of ApproveZone.
func NewApproveZone_List(s *capnp.Segment, sz int32) (ApproveZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ApproveZone](l), err
}

// ApproveZone_Future is a wrapper for a ApproveZone promised by a client call.
type ApproveZone_Future struct{ *capnp.Future }

func (f ApproveZone_Future) Struct() (ApproveZone, error) {
	p, err := f.Future.Ptr()
	return ApproveZone(p.Struct()), err
}

type ZoneInSendName capnp.Struct

// ZoneInSendName_TypeID is the unique identifier for the type ZoneInSendName.
const ZoneInSendName_TypeID = 0xd75aa49a213b1c70

func NewZoneInSendName(s *capnp.Segment) (ZoneInSendName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZoneInSendName(st), err
}

func NewRootZoneInSendName(s *capnp.Segment) (ZoneInSendName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZoneInSendName(st), err
}

func ReadRootZoneInSendName(msg *capnp.Message) (ZoneInSendName, error) {
	root, err := msg.Root()
	return ZoneInSendName(root.Struct()), err
}

func (s ZoneInSendName) String() string {
	str, _ := text.Marshal(0xd75aa49a213b1c70, capnp.Struct(s))
	return str
}

func (s ZoneInSendName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneInSendName) DecodeFromPtr(p capnp.Ptr) ZoneInSendName {
	return ZoneInSendName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneInSendName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneInSendName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneInSendName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneInSendName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneInSendName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneInSendName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneInSendName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneInSendName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ZoneInSendName) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ZoneInSendName) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ZoneInSendName) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneInSendName) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ZoneInSendName_List is a list of ZoneInSendName.
type ZoneInSendName_List = capnp.StructList[ZoneInSendName]

// NewZoneInSendName creates a new list of ZoneInSendName.
func NewZoneInSendName_List(s *capnp.Segment, sz int32) (ZoneInSendName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ZoneInSendName](l), err
}

// ZoneInSendName_Future is a wrapper for a ZoneInSendName promised by a client call.
type ZoneInSendName_Future struct{ *capnp.Future }

func (f ZoneInSendName_Future) Struct() (ZoneInSendName, error) {
	p, err := f.Future.Ptr()
	return ZoneInSendName(p.Struct()), err
}

type ZoneInSendName2 capnp.Struct

// ZoneInSendName2_TypeID is the unique identifier for the type ZoneInSendName2.
const ZoneInSendName2_TypeID = 0xfb0629d3fd4188b0

func NewZoneInSendName2(s *capnp.Segment) (ZoneInSendName2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneInSendName2(st), err
}

func NewRootZoneInSendName2(s *capnp.Segment) (ZoneInSendName2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneInSendName2(st), err
}

func ReadRootZoneInSendName2(msg *capnp.Message) (ZoneInSendName2, error) {
	root, err := msg.Root()
	return ZoneInSendName2(root.Struct()), err
}

func (s ZoneInSendName2) String() string {
	str, _ := text.Marshal(0xfb0629d3fd4188b0, capnp.Struct(s))
	return str
}

func (s ZoneInSendName2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneInSendName2) DecodeFromPtr(p capnp.Ptr) ZoneInSendName2 {
	return ZoneInSendName2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneInSendName2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneInSendName2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneInSendName2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneInSendName2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneInSendName2) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneInSendName2) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneInSendName2) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneInSendName2) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ZoneInSendName2_List is a list of ZoneInSendName2.
type ZoneInSendName2_List = capnp.StructList[ZoneInSendName2]

// NewZoneInSendName2 creates a new list of ZoneInSendName2.
func NewZoneInSendName2_List(s *capnp.Segment, sz int32) (ZoneInSendName2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ZoneInSendName2](l), err
}

// ZoneInSendName2_Future is a wrapper for a ZoneInSendName2 promised by a client call.
type ZoneInSendName2_Future struct{ *capnp.Future }

func (f ZoneInSendName2_Future) Struct() (ZoneInSendName2, error) {
	p, err := f.Future.Ptr()
	return ZoneInSendName2(p.Struct()), err
}

type StartTribute capnp.Struct

// StartTribute_TypeID is the unique identifier for the type StartTribute.
const StartTribute_TypeID = 0xeabe3c2d8178a916

func NewStartTribute(s *capnp.Segment) (StartTribute, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return StartTribute(st), err
}

func NewRootStartTribute(s *capnp.Segment) (StartTribute, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return StartTribute(st), err
}

func ReadRootStartTribute(msg *capnp.Message) (StartTribute, error) {
	root, err := msg.Root()
	return StartTribute(root.Struct()), err
}

func (s StartTribute) String() string {
	str, _ := text.Marshal(0xeabe3c2d8178a916, capnp.Struct(s))
	return str
}

func (s StartTribute) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StartTribute) DecodeFromPtr(p capnp.Ptr) StartTribute {
	return StartTribute(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StartTribute) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StartTribute) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StartTribute) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StartTribute) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StartTribute) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s StartTribute) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s StartTribute) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s StartTribute) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s StartTribute) Response() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s StartTribute) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// StartTribute_List is a list of StartTribute.
type StartTribute_List = capnp.StructList[StartTribute]

// NewStartTribute creates a new list of StartTribute.
func NewStartTribute_List(s *capnp.Segment, sz int32) (StartTribute_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[StartTribute](l), err
}

// StartTribute_Future is a wrapper for a StartTribute promised by a client call.
type StartTribute_Future struct{ *capnp.Future }

func (f StartTribute_Future) Struct() (StartTribute, error) {
	p, err := f.Future.Ptr()
	return StartTribute(p.Struct()), err
}

type TributeLevel capnp.Struct

// TributeLevel_TypeID is the unique identifier for the type TributeLevel.
const TributeLevel_TypeID = 0xcab56e851899421c

func NewTributeLevel(s *capnp.Segment) (TributeLevel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeLevel(st), err
}

func NewRootTributeLevel(s *capnp.Segment) (TributeLevel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeLevel(st), err
}

func ReadRootTributeLevel(msg *capnp.Message) (TributeLevel, error) {
	root, err := msg.Root()
	return TributeLevel(root.Struct()), err
}

func (s TributeLevel) String() string {
	str, _ := text.Marshal(0xcab56e851899421c, capnp.Struct(s))
	return str
}

func (s TributeLevel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeLevel) DecodeFromPtr(p capnp.Ptr) TributeLevel {
	return TributeLevel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeLevel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeLevel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeLevel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeLevel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeLevel) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeLevel) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeLevel) TributeItemId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeLevel) SetTributeItemId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeLevel) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeLevel) SetCost(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TributeLevel_List is a list of TributeLevel.
type TributeLevel_List = capnp.StructList[TributeLevel]

// NewTributeLevel creates a new list of TributeLevel.
func NewTributeLevel_List(s *capnp.Segment, sz int32) (TributeLevel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeLevel](l), err
}

// TributeLevel_Future is a wrapper for a TributeLevel promised by a client call.
type TributeLevel_Future struct{ *capnp.Future }

func (f TributeLevel_Future) Struct() (TributeLevel, error) {
	p, err := f.Future.Ptr()
	return TributeLevel(p.Struct()), err
}

type TributeAbility capnp.Struct

// TributeAbility_TypeID is the unique identifier for the type TributeAbility.
const TributeAbility_TypeID = 0x9f29336af3ac4f9f

func NewTributeAbility(s *capnp.Segment) (TributeAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeAbility(st), err
}

func NewRootTributeAbility(s *capnp.Segment) (TributeAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeAbility(st), err
}

func ReadRootTributeAbility(msg *capnp.Message) (TributeAbility, error) {
	root, err := msg.Root()
	return TributeAbility(root.Struct()), err
}

func (s TributeAbility) String() string {
	str, _ := text.Marshal(0x9f29336af3ac4f9f, capnp.Struct(s))
	return str
}

func (s TributeAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeAbility) DecodeFromPtr(p capnp.Ptr) TributeAbility {
	return TributeAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeAbility) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeAbility) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeAbility) TierCount() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeAbility) SetTierCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeAbility) Tiers() (TributeLevel_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TributeLevel_List(p.List()), err
}

func (s TributeAbility) HasTiers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TributeAbility) SetTiers(v TributeLevel_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTiers sets the tiers field to a newly
// allocated TributeLevel_List, preferring placement in s's segment.
func (s TributeAbility) NewTiers(n int32) (TributeLevel_List, error) {
	l, err := NewTributeLevel_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TributeLevel_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TributeAbility) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TributeAbility) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TributeAbility) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TributeAbility) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// TributeAbility_List is a list of TributeAbility.
type TributeAbility_List = capnp.StructList[TributeAbility]

// NewTributeAbility creates a new list of TributeAbility.
func NewTributeAbility_List(s *capnp.Segment, sz int32) (TributeAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[TributeAbility](l), err
}

// TributeAbility_Future is a wrapper for a TributeAbility promised by a client call.
type TributeAbility_Future struct{ *capnp.Future }

func (f TributeAbility_Future) Struct() (TributeAbility, error) {
	p, err := f.Future.Ptr()
	return TributeAbility(p.Struct()), err
}

type GuildTributeAbility capnp.Struct

// GuildTributeAbility_TypeID is the unique identifier for the type GuildTributeAbility.
const GuildTributeAbility_TypeID = 0xf6ebf8b8d23d794f

func NewGuildTributeAbility(s *capnp.Segment) (GuildTributeAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildTributeAbility(st), err
}

func NewRootGuildTributeAbility(s *capnp.Segment) (GuildTributeAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildTributeAbility(st), err
}

func ReadRootGuildTributeAbility(msg *capnp.Message) (GuildTributeAbility, error) {
	root, err := msg.Root()
	return GuildTributeAbility(root.Struct()), err
}

func (s GuildTributeAbility) String() string {
	str, _ := text.Marshal(0xf6ebf8b8d23d794f, capnp.Struct(s))
	return str
}

func (s GuildTributeAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildTributeAbility) DecodeFromPtr(p capnp.Ptr) GuildTributeAbility {
	return GuildTributeAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildTributeAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildTributeAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildTributeAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildTributeAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildTributeAbility) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildTributeAbility) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildTributeAbility) Ability() (TributeAbility, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TributeAbility(p.Struct()), err
}

func (s GuildTributeAbility) HasAbility() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildTributeAbility) SetAbility(v TributeAbility) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbility sets the ability field to a newly
// allocated TributeAbility struct, preferring placement in s's segment.
func (s GuildTributeAbility) NewAbility() (TributeAbility, error) {
	ss, err := NewTributeAbility(capnp.Struct(s).Segment())
	if err != nil {
		return TributeAbility{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GuildTributeAbility_List is a list of GuildTributeAbility.
type GuildTributeAbility_List = capnp.StructList[GuildTributeAbility]

// NewGuildTributeAbility creates a new list of GuildTributeAbility.
func NewGuildTributeAbility_List(s *capnp.Segment, sz int32) (GuildTributeAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GuildTributeAbility](l), err
}

// GuildTributeAbility_Future is a wrapper for a GuildTributeAbility promised by a client call.
type GuildTributeAbility_Future struct{ *capnp.Future }

func (f GuildTributeAbility_Future) Struct() (GuildTributeAbility, error) {
	p, err := f.Future.Ptr()
	return GuildTributeAbility(p.Struct()), err
}
func (p GuildTributeAbility_Future) Ability() TributeAbility_Future {
	return TributeAbility_Future{Future: p.Future.Field(0, nil)}
}

type SelectTributeReq capnp.Struct

// SelectTributeReq_TypeID is the unique identifier for the type SelectTributeReq.
const SelectTributeReq_TypeID = 0xb3f8feecbb635492

func NewSelectTributeReq(s *capnp.Segment) (SelectTributeReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SelectTributeReq(st), err
}

func NewRootSelectTributeReq(s *capnp.Segment) (SelectTributeReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SelectTributeReq(st), err
}

func ReadRootSelectTributeReq(msg *capnp.Message) (SelectTributeReq, error) {
	root, err := msg.Root()
	return SelectTributeReq(root.Struct()), err
}

func (s SelectTributeReq) String() string {
	str, _ := text.Marshal(0xb3f8feecbb635492, capnp.Struct(s))
	return str
}

func (s SelectTributeReq) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SelectTributeReq) DecodeFromPtr(p capnp.Ptr) SelectTributeReq {
	return SelectTributeReq(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SelectTributeReq) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SelectTributeReq) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SelectTributeReq) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SelectTributeReq) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SelectTributeReq) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SelectTributeReq) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SelectTributeReq) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SelectTributeReq) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SelectTributeReq_List is a list of SelectTributeReq.
type SelectTributeReq_List = capnp.StructList[SelectTributeReq]

// NewSelectTributeReq creates a new list of SelectTributeReq.
func NewSelectTributeReq_List(s *capnp.Segment, sz int32) (SelectTributeReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SelectTributeReq](l), err
}

// SelectTributeReq_Future is a wrapper for a SelectTributeReq promised by a client call.
type SelectTributeReq_Future struct{ *capnp.Future }

func (f SelectTributeReq_Future) Struct() (SelectTributeReq, error) {
	p, err := f.Future.Ptr()
	return SelectTributeReq(p.Struct()), err
}

type SelectTributeReply capnp.Struct

// SelectTributeReply_TypeID is the unique identifier for the type SelectTributeReply.
const SelectTributeReply_TypeID = 0xb176d4b98cf5afa6

func NewSelectTributeReply(s *capnp.Segment) (SelectTributeReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SelectTributeReply(st), err
}

func NewRootSelectTributeReply(s *capnp.Segment) (SelectTributeReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SelectTributeReply(st), err
}

func ReadRootSelectTributeReply(msg *capnp.Message) (SelectTributeReply, error) {
	root, err := msg.Root()
	return SelectTributeReply(root.Struct()), err
}

func (s SelectTributeReply) String() string {
	str, _ := text.Marshal(0xb176d4b98cf5afa6, capnp.Struct(s))
	return str
}

func (s SelectTributeReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SelectTributeReply) DecodeFromPtr(p capnp.Ptr) SelectTributeReply {
	return SelectTributeReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SelectTributeReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SelectTributeReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SelectTributeReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SelectTributeReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SelectTributeReply) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SelectTributeReply) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SelectTributeReply) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SelectTributeReply) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SelectTributeReply) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SelectTributeReply) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SelectTributeReply) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SelectTributeReply) SetDesc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// SelectTributeReply_List is a list of SelectTributeReply.
type SelectTributeReply_List = capnp.StructList[SelectTributeReply]

// NewSelectTributeReply creates a new list of SelectTributeReply.
func NewSelectTributeReply_List(s *capnp.Segment, sz int32) (SelectTributeReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SelectTributeReply](l), err
}

// SelectTributeReply_Future is a wrapper for a SelectTributeReply promised by a client call.
type SelectTributeReply_Future struct{ *capnp.Future }

func (f SelectTributeReply_Future) Struct() (SelectTributeReply, error) {
	p, err := f.Future.Ptr()
	return SelectTributeReply(p.Struct()), err
}

type TributeInfo capnp.Struct

// TributeInfo_TypeID is the unique identifier for the type TributeInfo.
const TributeInfo_TypeID = 0xd5db12ce6b4738ee

func NewTributeInfo(s *capnp.Segment) (TributeInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeInfo(st), err
}

func NewRootTributeInfo(s *capnp.Segment) (TributeInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeInfo(st), err
}

func ReadRootTributeInfo(msg *capnp.Message) (TributeInfo, error) {
	root, err := msg.Root()
	return TributeInfo(root.Struct()), err
}

func (s TributeInfo) String() string {
	str, _ := text.Marshal(0xd5db12ce6b4738ee, capnp.Struct(s))
	return str
}

func (s TributeInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeInfo) DecodeFromPtr(p capnp.Ptr) TributeInfo {
	return TributeInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeInfo) Active() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeInfo) SetActive(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeInfo) Tributes() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s TributeInfo) HasTributes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TributeInfo) SetTributes(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTributes sets the tributes field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TributeInfo) NewTributes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TributeInfo) Tiers() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s TributeInfo) HasTiers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TributeInfo) SetTiers(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewTiers sets the tiers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TributeInfo) NewTiers(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s TributeInfo) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeInfo) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TributeInfo_List is a list of TributeInfo.
type TributeInfo_List = capnp.StructList[TributeInfo]

// NewTributeInfo creates a new list of TributeInfo.
func NewTributeInfo_List(s *capnp.Segment, sz int32) (TributeInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[TributeInfo](l), err
}

// TributeInfo_Future is a wrapper for a TributeInfo promised by a client call.
type TributeInfo_Future struct{ *capnp.Future }

func (f TributeInfo_Future) Struct() (TributeInfo, error) {
	p, err := f.Future.Ptr()
	return TributeInfo(p.Struct()), err
}

type TributeItem capnp.Struct

// TributeItem_TypeID is the unique identifier for the type TributeItem.
const TributeItem_TypeID = 0xb6db3a4bd35d7d66

func NewTributeItem(s *capnp.Segment) (TributeItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeItem(st), err
}

func NewRootTributeItem(s *capnp.Segment) (TributeItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeItem(st), err
}

func ReadRootTributeItem(msg *capnp.Message) (TributeItem, error) {
	root, err := msg.Root()
	return TributeItem(root.Struct()), err
}

func (s TributeItem) String() string {
	str, _ := text.Marshal(0xb6db3a4bd35d7d66, capnp.Struct(s))
	return str
}

func (s TributeItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeItem) DecodeFromPtr(p capnp.Ptr) TributeItem {
	return TributeItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeItem) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeItem) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeItem) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeItem) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeItem) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeItem) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TributeItem) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TributeItem) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// TributeItem_List is a list of TributeItem.
type TributeItem_List = capnp.StructList[TributeItem]

// NewTributeItem creates a new list of TributeItem.
func NewTributeItem_List(s *capnp.Segment, sz int32) (TributeItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeItem](l), err
}

// TributeItem_Future is a wrapper for a TributeItem promised by a client call.
type TributeItem_Future struct{ *capnp.Future }

func (f TributeItem_Future) Struct() (TributeItem, error) {
	p, err := f.Future.Ptr()
	return TributeItem(p.Struct()), err
}

type TributePoint capnp.Struct

// TributePoint_TypeID is the unique identifier for the type TributePoint.
const TributePoint_TypeID = 0xf1f7baa2935a0cd7

func NewTributePoint(s *capnp.Segment) (TributePoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TributePoint(st), err
}

func NewRootTributePoint(s *capnp.Segment) (TributePoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TributePoint(st), err
}

func ReadRootTributePoint(msg *capnp.Message) (TributePoint, error) {
	root, err := msg.Root()
	return TributePoint(root.Struct()), err
}

func (s TributePoint) String() string {
	str, _ := text.Marshal(0xf1f7baa2935a0cd7, capnp.Struct(s))
	return str
}

func (s TributePoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributePoint) DecodeFromPtr(p capnp.Ptr) TributePoint {
	return TributePoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributePoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributePoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributePoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributePoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributePoint) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributePoint) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributePoint) CareerTributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributePoint) SetCareerTributePoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TributePoint_List is a list of TributePoint.
type TributePoint_List = capnp.StructList[TributePoint]

// NewTributePoint creates a new list of TributePoint.
func NewTributePoint_List(s *capnp.Segment, sz int32) (TributePoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TributePoint](l), err
}

// TributePoint_Future is a wrapper for a TributePoint promised by a client call.
type TributePoint_Future struct{ *capnp.Future }

func (f TributePoint_Future) Struct() (TributePoint, error) {
	p, err := f.Future.Ptr()
	return TributePoint(p.Struct()), err
}

type TributeMoney capnp.Struct

// TributeMoney_TypeID is the unique identifier for the type TributeMoney.
const TributeMoney_TypeID = 0xb66a9193d2300649

func NewTributeMoney(s *capnp.Segment) (TributeMoney, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeMoney(st), err
}

func NewRootTributeMoney(s *capnp.Segment) (TributeMoney, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeMoney(st), err
}

func ReadRootTributeMoney(msg *capnp.Message) (TributeMoney, error) {
	root, err := msg.Root()
	return TributeMoney(root.Struct()), err
}

func (s TributeMoney) String() string {
	str, _ := text.Marshal(0xb66a9193d2300649, capnp.Struct(s))
	return str
}

func (s TributeMoney) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeMoney) DecodeFromPtr(p capnp.Ptr) TributeMoney {
	return TributeMoney(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeMoney) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeMoney) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeMoney) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeMoney) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeMoney) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeMoney) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeMoney) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeMoney) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeMoney) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeMoney) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TributeMoney_List is a list of TributeMoney.
type TributeMoney_List = capnp.StructList[TributeMoney]

// NewTributeMoney creates a new list of TributeMoney.
func NewTributeMoney_List(s *capnp.Segment, sz int32) (TributeMoney_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeMoney](l), err
}

// TributeMoney_Future is a wrapper for a TributeMoney promised by a client call.
type TributeMoney_Future struct{ *capnp.Future }

func (f TributeMoney_Future) Struct() (TributeMoney, error) {
	p, err := f.Future.Ptr()
	return TributeMoney(p.Struct()), err
}

type Split capnp.Struct

// Split_TypeID is the unique identifier for the type Split.
const Split_TypeID = 0xc2f958e3df4726c9

func NewSplit(s *capnp.Segment) (Split, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Split(st), err
}

func NewRootSplit(s *capnp.Segment) (Split, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Split(st), err
}

func ReadRootSplit(msg *capnp.Message) (Split, error) {
	root, err := msg.Root()
	return Split(root.Struct()), err
}

func (s Split) String() string {
	str, _ := text.Marshal(0xc2f958e3df4726c9, capnp.Struct(s))
	return str
}

func (s Split) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Split) DecodeFromPtr(p capnp.Ptr) Split {
	return Split(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Split) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Split) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Split) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Split) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Split) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Split) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Split) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Split) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Split) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Split) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Split) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Split) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// Split_List is a list of Split.
type Split_List = capnp.StructList[Split]

// NewSplit creates a new list of Split.
func NewSplit_List(s *capnp.Segment, sz int32) (Split_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Split](l), err
}

// Split_Future is a wrapper for a Split promised by a client call.
type Split_Future struct{ *capnp.Future }

func (f Split_Future) Struct() (Split, error) {
	p, err := f.Future.Ptr()
	return Split(p.Struct()), err
}

type NewCombine capnp.Struct

// NewCombine_TypeID is the unique identifier for the type NewCombine.
const NewCombine_TypeID = 0xf8dcc5cd22965ff5

func NewNewCombine(s *capnp.Segment) (NewCombine, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NewCombine(st), err
}

func NewRootNewCombine(s *capnp.Segment) (NewCombine, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NewCombine(st), err
}

func ReadRootNewCombine(msg *capnp.Message) (NewCombine, error) {
	root, err := msg.Root()
	return NewCombine(root.Struct()), err
}

func (s NewCombine) String() string {
	str, _ := text.Marshal(0xf8dcc5cd22965ff5, capnp.Struct(s))
	return str
}

func (s NewCombine) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NewCombine) DecodeFromPtr(p capnp.Ptr) NewCombine {
	return NewCombine(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NewCombine) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NewCombine) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NewCombine) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NewCombine) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NewCombine) ContainerSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NewCombine) SetContainerSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NewCombine) GuildtributeSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NewCombine) SetGuildtributeSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// NewCombine_List is a list of NewCombine.
type NewCombine_List = capnp.StructList[NewCombine]

// NewNewCombine creates a new list of NewCombine.
func NewNewCombine_List(s *capnp.Segment, sz int32) (NewCombine_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[NewCombine](l), err
}

// NewCombine_Future is a wrapper for a NewCombine promised by a client call.
type NewCombine_Future struct{ *capnp.Future }

func (f NewCombine_Future) Struct() (NewCombine, error) {
	p, err := f.Future.Ptr()
	return NewCombine(p.Struct()), err
}

type TradeskillFavorites capnp.Struct

// TradeskillFavorites_TypeID is the unique identifier for the type TradeskillFavorites.
const TradeskillFavorites_TypeID = 0xf42a44d24baf1780

func NewTradeskillFavorites(s *capnp.Segment) (TradeskillFavorites, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TradeskillFavorites(st), err
}

func NewRootTradeskillFavorites(s *capnp.Segment) (TradeskillFavorites, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TradeskillFavorites(st), err
}

func ReadRootTradeskillFavorites(msg *capnp.Message) (TradeskillFavorites, error) {
	root, err := msg.Root()
	return TradeskillFavorites(root.Struct()), err
}

func (s TradeskillFavorites) String() string {
	str, _ := text.Marshal(0xf42a44d24baf1780, capnp.Struct(s))
	return str
}

func (s TradeskillFavorites) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeskillFavorites) DecodeFromPtr(p capnp.Ptr) TradeskillFavorites {
	return TradeskillFavorites(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeskillFavorites) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeskillFavorites) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeskillFavorites) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeskillFavorites) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeskillFavorites) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeskillFavorites) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeskillFavorites) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeskillFavorites) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeskillFavorites) FavoriteRecipes() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s TradeskillFavorites) HasFavoriteRecipes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TradeskillFavorites) SetFavoriteRecipes(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFavoriteRecipes sets the favoriteRecipes field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TradeskillFavorites) NewFavoriteRecipes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TradeskillFavorites_List is a list of TradeskillFavorites.
type TradeskillFavorites_List = capnp.StructList[TradeskillFavorites]

// NewTradeskillFavorites creates a new list of TradeskillFavorites.
func NewTradeskillFavorites_List(s *capnp.Segment, sz int32) (TradeskillFavorites_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TradeskillFavorites](l), err
}

// TradeskillFavorites_Future is a wrapper for a TradeskillFavorites promised by a client call.
type TradeskillFavorites_Future struct{ *capnp.Future }

func (f TradeskillFavorites_Future) Struct() (TradeskillFavorites, error) {
	p, err := f.Future.Ptr()
	return TradeskillFavorites(p.Struct()), err
}

type RecipesSearch capnp.Struct

// RecipesSearch_TypeID is the unique identifier for the type RecipesSearch.
const RecipesSearch_TypeID = 0xe10a56be889c8d63

func NewRecipesSearch(s *capnp.Segment) (RecipesSearch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RecipesSearch(st), err
}

func NewRootRecipesSearch(s *capnp.Segment) (RecipesSearch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RecipesSearch(st), err
}

func ReadRootRecipesSearch(msg *capnp.Message) (RecipesSearch, error) {
	root, err := msg.Root()
	return RecipesSearch(root.Struct()), err
}

func (s RecipesSearch) String() string {
	str, _ := text.Marshal(0xe10a56be889c8d63, capnp.Struct(s))
	return str
}

func (s RecipesSearch) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipesSearch) DecodeFromPtr(p capnp.Ptr) RecipesSearch {
	return RecipesSearch(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipesSearch) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipesSearch) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipesSearch) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipesSearch) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipesSearch) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipesSearch) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipesSearch) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipesSearch) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipesSearch) Mintrivial() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipesSearch) SetMintrivial(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipesSearch) Maxtrivial() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipesSearch) SetMaxtrivial(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RecipesSearch) Query() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RecipesSearch) HasQuery() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RecipesSearch) QueryBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RecipesSearch) SetQuery(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RecipesSearch_List is a list of RecipesSearch.
type RecipesSearch_List = capnp.StructList[RecipesSearch]

// NewRecipesSearch creates a new list of RecipesSearch.
func NewRecipesSearch_List(s *capnp.Segment, sz int32) (RecipesSearch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RecipesSearch](l), err
}

// RecipesSearch_Future is a wrapper for a RecipesSearch promised by a client call.
type RecipesSearch_Future struct{ *capnp.Future }

func (f RecipesSearch_Future) Struct() (RecipesSearch, error) {
	p, err := f.Future.Ptr()
	return RecipesSearch(p.Struct()), err
}

type RecipeReply capnp.Struct

// RecipeReply_TypeID is the unique identifier for the type RecipeReply.
const RecipeReply_TypeID = 0xdd1f5357c25cc3b7

func NewRecipeReply(s *capnp.Segment) (RecipeReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RecipeReply(st), err
}

func NewRootRecipeReply(s *capnp.Segment) (RecipeReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RecipeReply(st), err
}

func ReadRootRecipeReply(msg *capnp.Message) (RecipeReply, error) {
	root, err := msg.Root()
	return RecipeReply(root.Struct()), err
}

func (s RecipeReply) String() string {
	str, _ := text.Marshal(0xdd1f5357c25cc3b7, capnp.Struct(s))
	return str
}

func (s RecipeReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipeReply) DecodeFromPtr(p capnp.Ptr) RecipeReply {
	return RecipeReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipeReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipeReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipeReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipeReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipeReply) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipeReply) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipeReply) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipeReply) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipeReply) ComponentCount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipeReply) SetComponentCount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipeReply) RecipeId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipeReply) SetRecipeId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RecipeReply) Trivial() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RecipeReply) SetTrivial(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RecipeReply) RecipeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RecipeReply) HasRecipeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RecipeReply) RecipeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RecipeReply) SetRecipeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RecipeReply_List is a list of RecipeReply.
type RecipeReply_List = capnp.StructList[RecipeReply]

// NewRecipeReply creates a new list of RecipeReply.
func NewRecipeReply_List(s *capnp.Segment, sz int32) (RecipeReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RecipeReply](l), err
}

// RecipeReply_Future is a wrapper for a RecipeReply promised by a client call.
type RecipeReply_Future struct{ *capnp.Future }

func (f RecipeReply_Future) Struct() (RecipeReply, error) {
	p, err := f.Future.Ptr()
	return RecipeReply(p.Struct()), err
}

type RecipeAutoCombine capnp.Struct

// RecipeAutoCombine_TypeID is the unique identifier for the type RecipeAutoCombine.
const RecipeAutoCombine_TypeID = 0xc49c789ac9b97fbe

func NewRecipeAutoCombine(s *capnp.Segment) (RecipeAutoCombine, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RecipeAutoCombine(st), err
}

func NewRootRecipeAutoCombine(s *capnp.Segment) (RecipeAutoCombine, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RecipeAutoCombine(st), err
}

func ReadRootRecipeAutoCombine(msg *capnp.Message) (RecipeAutoCombine, error) {
	root, err := msg.Root()
	return RecipeAutoCombine(root.Struct()), err
}

func (s RecipeAutoCombine) String() string {
	str, _ := text.Marshal(0xc49c789ac9b97fbe, capnp.Struct(s))
	return str
}

func (s RecipeAutoCombine) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipeAutoCombine) DecodeFromPtr(p capnp.Ptr) RecipeAutoCombine {
	return RecipeAutoCombine(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipeAutoCombine) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipeAutoCombine) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipeAutoCombine) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipeAutoCombine) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipeAutoCombine) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipeAutoCombine) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipeAutoCombine) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipeAutoCombine) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipeAutoCombine) RecipeId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipeAutoCombine) SetRecipeId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipeAutoCombine) ReplyCode() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipeAutoCombine) SetReplyCode(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// RecipeAutoCombine_List is a list of RecipeAutoCombine.
type RecipeAutoCombine_List = capnp.StructList[RecipeAutoCombine]

// NewRecipeAutoCombine creates a new list of RecipeAutoCombine.
func NewRecipeAutoCombine_List(s *capnp.Segment, sz int32) (RecipeAutoCombine_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[RecipeAutoCombine](l), err
}

// RecipeAutoCombine_Future is a wrapper for a RecipeAutoCombine promised by a client call.
type RecipeAutoCombine_Future struct{ *capnp.Future }

func (f RecipeAutoCombine_Future) Struct() (RecipeAutoCombine, error) {
	p, err := f.Future.Ptr()
	return RecipeAutoCombine(p.Struct()), err
}

type LevelAppearance capnp.Struct

// LevelAppearance_TypeID is the unique identifier for the type LevelAppearance.
const LevelAppearance_TypeID = 0xd74a1be2552282a4

func NewLevelAppearance(s *capnp.Segment) (LevelAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return LevelAppearance(st), err
}

func NewRootLevelAppearance(s *capnp.Segment) (LevelAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return LevelAppearance(st), err
}

func ReadRootLevelAppearance(msg *capnp.Message) (LevelAppearance, error) {
	root, err := msg.Root()
	return LevelAppearance(root.Struct()), err
}

func (s LevelAppearance) String() string {
	str, _ := text.Marshal(0xd74a1be2552282a4, capnp.Struct(s))
	return str
}

func (s LevelAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LevelAppearance) DecodeFromPtr(p capnp.Ptr) LevelAppearance {
	return LevelAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LevelAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LevelAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LevelAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LevelAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LevelAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LevelAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LevelAppearance) Parm1() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LevelAppearance) SetParm1(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LevelAppearance) Value1a() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LevelAppearance) SetValue1a(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LevelAppearance) Value1b() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LevelAppearance) SetValue1b(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LevelAppearance) Parm2() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LevelAppearance) SetParm2(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LevelAppearance) Value2a() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LevelAppearance) SetValue2a(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s LevelAppearance) Value2b() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s LevelAppearance) SetValue2b(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s LevelAppearance) Parm3() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s LevelAppearance) SetParm3(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s LevelAppearance) Value3a() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s LevelAppearance) SetValue3a(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s LevelAppearance) Value3b() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s LevelAppearance) SetValue3b(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s LevelAppearance) Parm4() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s LevelAppearance) SetParm4(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s LevelAppearance) Value4a() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s LevelAppearance) SetValue4a(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s LevelAppearance) Value4b() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s LevelAppearance) SetValue4b(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s LevelAppearance) Parm5() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s LevelAppearance) SetParm5(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s LevelAppearance) Value5a() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s LevelAppearance) SetValue5a(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s LevelAppearance) Value5b() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s LevelAppearance) SetValue5b(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// LevelAppearance_List is a list of LevelAppearance.
type LevelAppearance_List = capnp.StructList[LevelAppearance]

// NewLevelAppearance creates a new list of LevelAppearance.
func NewLevelAppearance_List(s *capnp.Segment, sz int32) (LevelAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[LevelAppearance](l), err
}

// LevelAppearance_Future is a wrapper for a LevelAppearance promised by a client call.
type LevelAppearance_Future struct{ *capnp.Future }

func (f LevelAppearance_Future) Struct() (LevelAppearance, error) {
	p, err := f.Future.Ptr()
	return LevelAppearance(p.Struct()), err
}

type MerchantList capnp.Struct

// MerchantList_TypeID is the unique identifier for the type MerchantList.
const MerchantList_TypeID = 0xd9cddf13c207ce2d

func NewMerchantList(s *capnp.Segment) (MerchantList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantList(st), err
}

func NewRootMerchantList(s *capnp.Segment) (MerchantList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantList(st), err
}

func ReadRootMerchantList(msg *capnp.Message) (MerchantList, error) {
	root, err := msg.Root()
	return MerchantList(root.Struct()), err
}

func (s MerchantList) String() string {
	str, _ := text.Marshal(0xd9cddf13c207ce2d, capnp.Struct(s))
	return str
}

func (s MerchantList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantList) DecodeFromPtr(p capnp.Ptr) MerchantList {
	return MerchantList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantList) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantList) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantList) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantList) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantList) Item() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantList) SetItem(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MerchantList_List is a list of MerchantList.
type MerchantList_List = capnp.StructList[MerchantList]

// NewMerchantList creates a new list of MerchantList.
func NewMerchantList_List(s *capnp.Segment, sz int32) (MerchantList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantList](l), err
}

// MerchantList_Future is a wrapper for a MerchantList promised by a client call.
type MerchantList_Future struct{ *capnp.Future }

func (f MerchantList_Future) Struct() (MerchantList, error) {
	p, err := f.Future.Ptr()
	return MerchantList(p.Struct()), err
}

type TempMerchantList capnp.Struct

// TempMerchantList_TypeID is the unique identifier for the type TempMerchantList.
const TempMerchantList_TypeID = 0xd6aded5b005488d5

func NewTempMerchantList(s *capnp.Segment) (TempMerchantList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TempMerchantList(st), err
}

func NewRootTempMerchantList(s *capnp.Segment) (TempMerchantList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TempMerchantList(st), err
}

func ReadRootTempMerchantList(msg *capnp.Message) (TempMerchantList, error) {
	root, err := msg.Root()
	return TempMerchantList(root.Struct()), err
}

func (s TempMerchantList) String() string {
	str, _ := text.Marshal(0xd6aded5b005488d5, capnp.Struct(s))
	return str
}

func (s TempMerchantList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TempMerchantList) DecodeFromPtr(p capnp.Ptr) TempMerchantList {
	return TempMerchantList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TempMerchantList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TempMerchantList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TempMerchantList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TempMerchantList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TempMerchantList) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TempMerchantList) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TempMerchantList) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TempMerchantList) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TempMerchantList) Item() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TempMerchantList) SetItem(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TempMerchantList) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TempMerchantList) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TempMerchantList) Origslot() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TempMerchantList) SetOrigslot(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// TempMerchantList_List is a list of TempMerchantList.
type TempMerchantList_List = capnp.StructList[TempMerchantList]

// NewTempMerchantList creates a new list of TempMerchantList.
func NewTempMerchantList_List(s *capnp.Segment, sz int32) (TempMerchantList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[TempMerchantList](l), err
}

// TempMerchantList_Future is a wrapper for a TempMerchantList promised by a client call.
type TempMerchantList_Future struct{ *capnp.Future }

func (f TempMerchantList_Future) Struct() (TempMerchantList, error) {
	p, err := f.Future.Ptr()
	return TempMerchantList(p.Struct()), err
}

type FindPersonPoint capnp.Struct

// FindPersonPoint_TypeID is the unique identifier for the type FindPersonPoint.
const FindPersonPoint_TypeID = 0xcddf6dbc366deb3e

func NewFindPersonPoint(s *capnp.Segment) (FindPersonPoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return FindPersonPoint(st), err
}

func NewRootFindPersonPoint(s *capnp.Segment) (FindPersonPoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return FindPersonPoint(st), err
}

func ReadRootFindPersonPoint(msg *capnp.Message) (FindPersonPoint, error) {
	root, err := msg.Root()
	return FindPersonPoint(root.Struct()), err
}

func (s FindPersonPoint) String() string {
	str, _ := text.Marshal(0xcddf6dbc366deb3e, capnp.Struct(s))
	return str
}

func (s FindPersonPoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonPoint) DecodeFromPtr(p capnp.Ptr) FindPersonPoint {
	return FindPersonPoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonPoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonPoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonPoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonPoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonPoint) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s FindPersonPoint) SetY(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s FindPersonPoint) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s FindPersonPoint) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s FindPersonPoint) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s FindPersonPoint) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// FindPersonPoint_List is a list of FindPersonPoint.
type FindPersonPoint_List = capnp.StructList[FindPersonPoint]

// NewFindPersonPoint creates a new list of FindPersonPoint.
func NewFindPersonPoint_List(s *capnp.Segment, sz int32) (FindPersonPoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[FindPersonPoint](l), err
}

// FindPersonPoint_Future is a wrapper for a FindPersonPoint promised by a client call.
type FindPersonPoint_Future struct{ *capnp.Future }

func (f FindPersonPoint_Future) Struct() (FindPersonPoint, error) {
	p, err := f.Future.Ptr()
	return FindPersonPoint(p.Struct()), err
}

type FindPersonRequest capnp.Struct

// FindPersonRequest_TypeID is the unique identifier for the type FindPersonRequest.
const FindPersonRequest_TypeID = 0xb976985727e64f4f

func NewFindPersonRequest(s *capnp.Segment) (FindPersonRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FindPersonRequest(st), err
}

func NewRootFindPersonRequest(s *capnp.Segment) (FindPersonRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FindPersonRequest(st), err
}

func ReadRootFindPersonRequest(msg *capnp.Message) (FindPersonRequest, error) {
	root, err := msg.Root()
	return FindPersonRequest(root.Struct()), err
}

func (s FindPersonRequest) String() string {
	str, _ := text.Marshal(0xb976985727e64f4f, capnp.Struct(s))
	return str
}

func (s FindPersonRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonRequest) DecodeFromPtr(p capnp.Ptr) FindPersonRequest {
	return FindPersonRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonRequest) NpcId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FindPersonRequest) SetNpcId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FindPersonRequest) ClientPos() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FindPersonRequest) SetClientPos(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// FindPersonRequest_List is a list of FindPersonRequest.
type FindPersonRequest_List = capnp.StructList[FindPersonRequest]

// NewFindPersonRequest creates a new list of FindPersonRequest.
func NewFindPersonRequest_List(s *capnp.Segment, sz int32) (FindPersonRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[FindPersonRequest](l), err
}

// FindPersonRequest_Future is a wrapper for a FindPersonRequest promised by a client call.
type FindPersonRequest_Future struct{ *capnp.Future }

func (f FindPersonRequest_Future) Struct() (FindPersonRequest, error) {
	p, err := f.Future.Ptr()
	return FindPersonRequest(p.Struct()), err
}

type FindPersonResult capnp.Struct

// FindPersonResult_TypeID is the unique identifier for the type FindPersonResult.
const FindPersonResult_TypeID = 0xe89b2535f3e88eb7

func NewFindPersonResult(s *capnp.Segment) (FindPersonResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FindPersonResult(st), err
}

func NewRootFindPersonResult(s *capnp.Segment) (FindPersonResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FindPersonResult(st), err
}

func ReadRootFindPersonResult(msg *capnp.Message) (FindPersonResult, error) {
	root, err := msg.Root()
	return FindPersonResult(root.Struct()), err
}

func (s FindPersonResult) String() string {
	str, _ := text.Marshal(0xe89b2535f3e88eb7, capnp.Struct(s))
	return str
}

func (s FindPersonResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonResult) DecodeFromPtr(p capnp.Ptr) FindPersonResult {
	return FindPersonResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonResult) Dest() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FindPersonResult) SetDest(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FindPersonResult) Path() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s FindPersonResult) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FindPersonResult) SetPath(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s FindPersonResult) NewPath(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// FindPersonResult_List is a list of FindPersonResult.
type FindPersonResult_List = capnp.StructList[FindPersonResult]

// NewFindPersonResult creates a new list of FindPersonResult.
func NewFindPersonResult_List(s *capnp.Segment, sz int32) (FindPersonResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[FindPersonResult](l), err
}

// FindPersonResult_Future is a wrapper for a FindPersonResult promised by a client call.
type FindPersonResult_Future struct{ *capnp.Future }

func (f FindPersonResult_Future) Struct() (FindPersonResult, error) {
	p, err := f.Future.Ptr()
	return FindPersonResult(p.Struct()), err
}

type MobRename capnp.Struct

// MobRename_TypeID is the unique identifier for the type MobRename.
const MobRename_TypeID = 0xb5a6abce79a6f063

func NewMobRename(s *capnp.Segment) (MobRename, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MobRename(st), err
}

func NewRootMobRename(s *capnp.Segment) (MobRename, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MobRename(st), err
}

func ReadRootMobRename(msg *capnp.Message) (MobRename, error) {
	root, err := msg.Root()
	return MobRename(root.Struct()), err
}

func (s MobRename) String() string {
	str, _ := text.Marshal(0xb5a6abce79a6f063, capnp.Struct(s))
	return str
}

func (s MobRename) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MobRename) DecodeFromPtr(p capnp.Ptr) MobRename {
	return MobRename(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MobRename) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MobRename) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MobRename) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MobRename) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MobRename) OldName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s MobRename) HasOldName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MobRename) OldNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s MobRename) SetOldName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s MobRename) OldNameAgain() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s MobRename) HasOldNameAgain() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MobRename) OldNameAgainBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s MobRename) SetOldNameAgain(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s MobRename) NewName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s MobRename) HasNewName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MobRename) NewNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s MobRename) SetNewName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// MobRename_List is a list of MobRename.
type MobRename_List = capnp.StructList[MobRename]

// NewMobRename creates a new list of MobRename.
func NewMobRename_List(s *capnp.Segment, sz int32) (MobRename_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[MobRename](l), err
}

// MobRename_Future is a wrapper for a MobRename promised by a client call.
type MobRename_Future struct{ *capnp.Future }

func (f MobRename_Future) Struct() (MobRename, error) {
	p, err := f.Future.Ptr()
	return MobRename(p.Struct()), err
}

type PlayMP3 capnp.Struct

// PlayMP3_TypeID is the unique identifier for the type PlayMP3.
const PlayMP3_TypeID = 0xde51be80c580aa82

func NewPlayMP3(s *capnp.Segment) (PlayMP3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayMP3(st), err
}

func NewRootPlayMP3(s *capnp.Segment) (PlayMP3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayMP3(st), err
}

func ReadRootPlayMP3(msg *capnp.Message) (PlayMP3, error) {
	root, err := msg.Root()
	return PlayMP3(root.Struct()), err
}

func (s PlayMP3) String() string {
	str, _ := text.Marshal(0xde51be80c580aa82, capnp.Struct(s))
	return str
}

func (s PlayMP3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayMP3) DecodeFromPtr(p capnp.Ptr) PlayMP3 {
	return PlayMP3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayMP3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayMP3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayMP3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayMP3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayMP3) Filename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PlayMP3) HasFilename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayMP3) FilenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PlayMP3) SetFilename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PlayMP3_List is a list of PlayMP3.
type PlayMP3_List = capnp.StructList[PlayMP3]

// NewPlayMP3 creates a new list of PlayMP3.
func NewPlayMP3_List(s *capnp.Segment, sz int32) (PlayMP3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PlayMP3](l), err
}

// PlayMP3_Future is a wrapper for a PlayMP3 promised by a client call.
type PlayMP3_Future struct{ *capnp.Future }

func (f PlayMP3_Future) Struct() (PlayMP3, error) {
	p, err := f.Future.Ptr()
	return PlayMP3(p.Struct()), err
}

type TitleEntry capnp.Struct

// TitleEntry_TypeID is the unique identifier for the type TitleEntry.
const TitleEntry_TypeID = 0x9e2a00f7ceea75bb

func NewTitleEntry(s *capnp.Segment) (TitleEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleEntry(st), err
}

func NewRootTitleEntry(s *capnp.Segment) (TitleEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleEntry(st), err
}

func ReadRootTitleEntry(msg *capnp.Message) (TitleEntry, error) {
	root, err := msg.Root()
	return TitleEntry(root.Struct()), err
}

func (s TitleEntry) String() string {
	str, _ := text.Marshal(0x9e2a00f7ceea75bb, capnp.Struct(s))
	return str
}

func (s TitleEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleEntry) DecodeFromPtr(p capnp.Ptr) TitleEntry {
	return TitleEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleEntry) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TitleEntry) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TitleEntry) SkillValue() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TitleEntry) SetSkillValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TitleEntry) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TitleEntry) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleEntry) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TitleEntry) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// TitleEntry_List is a list of TitleEntry.
type TitleEntry_List = capnp.StructList[TitleEntry]

// NewTitleEntry creates a new list of TitleEntry.
func NewTitleEntry_List(s *capnp.Segment, sz int32) (TitleEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TitleEntry](l), err
}

// TitleEntry_Future is a wrapper for a TitleEntry promised by a client call.
type TitleEntry_Future struct{ *capnp.Future }

func (f TitleEntry_Future) Struct() (TitleEntry, error) {
	p, err := f.Future.Ptr()
	return TitleEntry(p.Struct()), err
}

type Titles capnp.Struct

// Titles_TypeID is the unique identifier for the type Titles.
const Titles_TypeID = 0xa88d7dcd40961f55

func NewTitles(s *capnp.Segment) (Titles, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Titles(st), err
}

func NewRootTitles(s *capnp.Segment) (Titles, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Titles(st), err
}

func ReadRootTitles(msg *capnp.Message) (Titles, error) {
	root, err := msg.Root()
	return Titles(root.Struct()), err
}

func (s Titles) String() string {
	str, _ := text.Marshal(0xa88d7dcd40961f55, capnp.Struct(s))
	return str
}

func (s Titles) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Titles) DecodeFromPtr(p capnp.Ptr) Titles {
	return Titles(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Titles) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Titles) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Titles) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Titles) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Titles) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Titles) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Titles) Titles() (TitleEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TitleEntry_List(p.List()), err
}

func (s Titles) HasTitles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Titles) SetTitles(v TitleEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTitles sets the titles field to a newly
// allocated TitleEntry_List, preferring placement in s's segment.
func (s Titles) NewTitles(n int32) (TitleEntry_List, error) {
	l, err := NewTitleEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TitleEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Titles_List is a list of Titles.
type Titles_List = capnp.StructList[Titles]

// NewTitles creates a new list of Titles.
func NewTitles_List(s *capnp.Segment, sz int32) (Titles_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Titles](l), err
}

// Titles_Future is a wrapper for a Titles promised by a client call.
type Titles_Future struct{ *capnp.Future }

func (f Titles_Future) Struct() (Titles, error) {
	p, err := f.Future.Ptr()
	return Titles(p.Struct()), err
}

type TitleListEntry capnp.Struct

// TitleListEntry_TypeID is the unique identifier for the type TitleListEntry.
const TitleListEntry_TypeID = 0x9ce5c88efd68b310

func NewTitleListEntry(s *capnp.Segment) (TitleListEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TitleListEntry(st), err
}

func NewRootTitleListEntry(s *capnp.Segment) (TitleListEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TitleListEntry(st), err
}

func ReadRootTitleListEntry(msg *capnp.Message) (TitleListEntry, error) {
	root, err := msg.Root()
	return TitleListEntry(root.Struct()), err
}

func (s TitleListEntry) String() string {
	str, _ := text.Marshal(0x9ce5c88efd68b310, capnp.Struct(s))
	return str
}

func (s TitleListEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleListEntry) DecodeFromPtr(p capnp.Ptr) TitleListEntry {
	return TitleListEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleListEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleListEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleListEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleListEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleListEntry) Prefix() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TitleListEntry) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleListEntry) PrefixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TitleListEntry) SetPrefix(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TitleListEntry) Postfix() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TitleListEntry) HasPostfix() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TitleListEntry) PostfixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TitleListEntry) SetPostfix(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// TitleListEntry_List is a list of TitleListEntry.
type TitleListEntry_List = capnp.StructList[TitleListEntry]

// NewTitleListEntry creates a new list of TitleListEntry.
func NewTitleListEntry_List(s *capnp.Segment, sz int32) (TitleListEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TitleListEntry](l), err
}

// TitleListEntry_Future is a wrapper for a TitleListEntry promised by a client call.
type TitleListEntry_Future struct{ *capnp.Future }

func (f TitleListEntry_Future) Struct() (TitleListEntry, error) {
	p, err := f.Future.Ptr()
	return TitleListEntry(p.Struct()), err
}

type TitleList capnp.Struct

// TitleList_TypeID is the unique identifier for the type TitleList.
const TitleList_TypeID = 0x80b7b9a2597c4eed

func NewTitleList(s *capnp.Segment) (TitleList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleList(st), err
}

func NewRootTitleList(s *capnp.Segment) (TitleList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleList(st), err
}

func ReadRootTitleList(msg *capnp.Message) (TitleList, error) {
	root, err := msg.Root()
	return TitleList(root.Struct()), err
}

func (s TitleList) String() string {
	str, _ := text.Marshal(0x80b7b9a2597c4eed, capnp.Struct(s))
	return str
}

func (s TitleList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleList) DecodeFromPtr(p capnp.Ptr) TitleList {
	return TitleList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TitleList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TitleList) Titles() (TitleListEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TitleListEntry_List(p.List()), err
}

func (s TitleList) HasTitles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleList) SetTitles(v TitleListEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTitles sets the titles field to a newly
// allocated TitleListEntry_List, preferring placement in s's segment.
func (s TitleList) NewTitles(n int32) (TitleListEntry_List, error) {
	l, err := NewTitleListEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TitleListEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TitleList_List is a list of TitleList.
type TitleList_List = capnp.StructList[TitleList]

// NewTitleList creates a new list of TitleList.
func NewTitleList_List(s *capnp.Segment, sz int32) (TitleList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TitleList](l), err
}

// TitleList_Future is a wrapper for a TitleList promised by a client call.
type TitleList_Future struct{ *capnp.Future }

func (f TitleList_Future) Struct() (TitleList, error) {
	p, err := f.Future.Ptr()
	return TitleList(p.Struct()), err
}

type SetTitle capnp.Struct

// SetTitle_TypeID is the unique identifier for the type SetTitle.
const SetTitle_TypeID = 0x9217151fa71ac827

func NewSetTitle(s *capnp.Segment) (SetTitle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetTitle(st), err
}

func NewRootSetTitle(s *capnp.Segment) (SetTitle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetTitle(st), err
}

func ReadRootSetTitle(msg *capnp.Message) (SetTitle, error) {
	root, err := msg.Root()
	return SetTitle(root.Struct()), err
}

func (s SetTitle) String() string {
	str, _ := text.Marshal(0x9217151fa71ac827, capnp.Struct(s))
	return str
}

func (s SetTitle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetTitle) DecodeFromPtr(p capnp.Ptr) SetTitle {
	return SetTitle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetTitle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetTitle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetTitle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetTitle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetTitle) IsSuffix() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetTitle) SetIsSuffix(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SetTitle) TitleId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SetTitle) SetTitleId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SetTitle_List is a list of SetTitle.
type SetTitle_List = capnp.StructList[SetTitle]

// NewSetTitle creates a new list of SetTitle.
func NewSetTitle_List(s *capnp.Segment, sz int32) (SetTitle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetTitle](l), err
}

// SetTitle_Future is a wrapper for a SetTitle promised by a client call.
type SetTitle_Future struct{ *capnp.Future }

func (f SetTitle_Future) Struct() (SetTitle, error) {
	p, err := f.Future.Ptr()
	return SetTitle(p.Struct()), err
}

type SetTitleReply capnp.Struct

// SetTitleReply_TypeID is the unique identifier for the type SetTitleReply.
const SetTitleReply_TypeID = 0xbae3c3ae8a00e8a6

func NewSetTitleReply(s *capnp.Segment) (SetTitleReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetTitleReply(st), err
}

func NewRootSetTitleReply(s *capnp.Segment) (SetTitleReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetTitleReply(st), err
}

func ReadRootSetTitleReply(msg *capnp.Message) (SetTitleReply, error) {
	root, err := msg.Root()
	return SetTitleReply(root.Struct()), err
}

func (s SetTitleReply) String() string {
	str, _ := text.Marshal(0xbae3c3ae8a00e8a6, capnp.Struct(s))
	return str
}

func (s SetTitleReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetTitleReply) DecodeFromPtr(p capnp.Ptr) SetTitleReply {
	return SetTitleReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetTitleReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetTitleReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetTitleReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetTitleReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetTitleReply) IsSuffix() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetTitleReply) SetIsSuffix(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SetTitleReply) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SetTitleReply) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetTitleReply) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SetTitleReply) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SetTitleReply) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SetTitleReply) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SetTitleReply_List is a list of SetTitleReply.
type SetTitleReply_List = capnp.StructList[SetTitleReply]

// NewSetTitleReply creates a new list of SetTitleReply.
func NewSetTitleReply_List(s *capnp.Segment, sz int32) (SetTitleReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SetTitleReply](l), err
}

// SetTitleReply_Future is a wrapper for a SetTitleReply promised by a client call.
type SetTitleReply_Future struct{ *capnp.Future }

func (f SetTitleReply_Future) Struct() (SetTitleReply, error) {
	p, err := f.Future.Ptr()
	return SetTitleReply(p.Struct()), err
}

type TaskDescription capnp.Struct

// TaskDescription_TypeID is the unique identifier for the type TaskDescription.
const TaskDescription_TypeID = 0xa77cd936c64d6ed7

func NewTaskDescription(s *capnp.Segment) (TaskDescription, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return TaskDescription(st), err
}

func NewRootTaskDescription(s *capnp.Segment) (TaskDescription, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return TaskDescription(st), err
}

func ReadRootTaskDescription(msg *capnp.Message) (TaskDescription, error) {
	root, err := msg.Root()
	return TaskDescription(root.Struct()), err
}

func (s TaskDescription) String() string {
	str, _ := text.Marshal(0xa77cd936c64d6ed7, capnp.Struct(s))
	return str
}

func (s TaskDescription) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskDescription) DecodeFromPtr(p capnp.Ptr) TaskDescription {
	return TaskDescription(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskDescription) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskDescription) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskDescription) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskDescription) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskDescription) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskDescription) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskDescription) Taskid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskDescription) SetTaskid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskDescription) Unk() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TaskDescription) SetUnk(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TaskDescription) Id() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TaskDescription) SetId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TaskDescription) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskDescription) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskDescription) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskDescription) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskDescription) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TaskDescription) HasDesc() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TaskDescription) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TaskDescription) SetDesc(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s TaskDescription) RewardCount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TaskDescription) SetRewardCount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TaskDescription) RewardLink() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s TaskDescription) HasRewardLink() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TaskDescription) RewardLinkBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s TaskDescription) SetRewardLink(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// TaskDescription_List is a list of TaskDescription.
type TaskDescription_List = capnp.StructList[TaskDescription]

// NewTaskDescription creates a new list of TaskDescription.
func NewTaskDescription_List(s *capnp.Segment, sz int32) (TaskDescription_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[TaskDescription](l), err
}

// TaskDescription_Future is a wrapper for a TaskDescription promised by a client call.
type TaskDescription_Future struct{ *capnp.Future }

func (f TaskDescription_Future) Struct() (TaskDescription, error) {
	p, err := f.Future.Ptr()
	return TaskDescription(p.Struct()), err
}

type TaskMemberList capnp.Struct

// TaskMemberList_TypeID is the unique identifier for the type TaskMemberList.
const TaskMemberList_TypeID = 0x9910215bbf6992b3

func NewTaskMemberList(s *capnp.Segment) (TaskMemberList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskMemberList(st), err
}

func NewRootTaskMemberList(s *capnp.Segment) (TaskMemberList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskMemberList(st), err
}

func ReadRootTaskMemberList(msg *capnp.Message) (TaskMemberList, error) {
	root, err := msg.Root()
	return TaskMemberList(root.Struct()), err
}

func (s TaskMemberList) String() string {
	str, _ := text.Marshal(0x9910215bbf6992b3, capnp.Struct(s))
	return str
}

func (s TaskMemberList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskMemberList) DecodeFromPtr(p capnp.Ptr) TaskMemberList {
	return TaskMemberList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskMemberList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskMemberList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskMemberList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskMemberList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskMemberList) GopherId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskMemberList) SetGopherId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskMemberList) MemberCount() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskMemberList) SetMemberCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskMemberList) ListPointer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskMemberList) HasListPointer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskMemberList) ListPointerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskMemberList) SetListPointer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// TaskMemberList_List is a list of TaskMemberList.
type TaskMemberList_List = capnp.StructList[TaskMemberList]

// NewTaskMemberList creates a new list of TaskMemberList.
func NewTaskMemberList_List(s *capnp.Segment, sz int32) (TaskMemberList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskMemberList](l), err
}

// TaskMemberList_Future is a wrapper for a TaskMemberList promised by a client call.
type TaskMemberList_Future struct{ *capnp.Future }

func (f TaskMemberList_Future) Struct() (TaskMemberList, error) {
	p, err := f.Future.Ptr()
	return TaskMemberList(p.Struct()), err
}

type TaskActivity capnp.Struct

// TaskActivity_TypeID is the unique identifier for the type TaskActivity.
const TaskActivity_TypeID = 0xbdf104dd14c6c05e

func NewTaskActivity(s *capnp.Segment) (TaskActivity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return TaskActivity(st), err
}

func NewRootTaskActivity(s *capnp.Segment) (TaskActivity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return TaskActivity(st), err
}

func ReadRootTaskActivity(msg *capnp.Message) (TaskActivity, error) {
	root, err := msg.Root()
	return TaskActivity(root.Struct()), err
}

func (s TaskActivity) String() string {
	str, _ := text.Marshal(0xbdf104dd14c6c05e, capnp.Struct(s))
	return str
}

func (s TaskActivity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskActivity) DecodeFromPtr(p capnp.Ptr) TaskActivity {
	return TaskActivity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskActivity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskActivity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskActivity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskActivity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskActivity) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskActivity) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskActivity) Id() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskActivity) SetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskActivity) Taskid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TaskActivity) SetTaskid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TaskActivity) ActivityId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TaskActivity) SetActivityId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TaskActivity) ActivityType() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TaskActivity) SetActivityType(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TaskActivity) MobName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskActivity) HasMobName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskActivity) MobNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskActivity) SetMobName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskActivity) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TaskActivity) HasItemName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TaskActivity) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TaskActivity) SetItemName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s TaskActivity) GoalCount() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TaskActivity) SetGoalCount(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TaskActivity) ActivityName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s TaskActivity) HasActivityName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TaskActivity) ActivityNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s TaskActivity) SetActivityName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s TaskActivity) DoneCount() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TaskActivity) SetDoneCount(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// TaskActivity_List is a list of TaskActivity.
type TaskActivity_List = capnp.StructList[TaskActivity]

// NewTaskActivity creates a new list of TaskActivity.
func NewTaskActivity_List(s *capnp.Segment, sz int32) (TaskActivity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[TaskActivity](l), err
}

// TaskActivity_Future is a wrapper for a TaskActivity promised by a client call.
type TaskActivity_Future struct{ *capnp.Future }

func (f TaskActivity_Future) Struct() (TaskActivity, error) {
	p, err := f.Future.Ptr()
	return TaskActivity(p.Struct()), err
}

type TaskHistoryEntry capnp.Struct

// TaskHistoryEntry_TypeID is the unique identifier for the type TaskHistoryEntry.
const TaskHistoryEntry_TypeID = 0xf7b756860a5b5804

func NewTaskHistoryEntry(s *capnp.Segment) (TaskHistoryEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistoryEntry(st), err
}

func NewRootTaskHistoryEntry(s *capnp.Segment) (TaskHistoryEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistoryEntry(st), err
}

func ReadRootTaskHistoryEntry(msg *capnp.Message) (TaskHistoryEntry, error) {
	root, err := msg.Root()
	return TaskHistoryEntry(root.Struct()), err
}

func (s TaskHistoryEntry) String() string {
	str, _ := text.Marshal(0xf7b756860a5b5804, capnp.Struct(s))
	return str
}

func (s TaskHistoryEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskHistoryEntry) DecodeFromPtr(p capnp.Ptr) TaskHistoryEntry {
	return TaskHistoryEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskHistoryEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskHistoryEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskHistoryEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskHistoryEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskHistoryEntry) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskHistoryEntry) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskHistoryEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskHistoryEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskHistoryEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskHistoryEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskHistoryEntry) CompletedTime() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskHistoryEntry) SetCompletedTime(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TaskHistoryEntry_List is a list of TaskHistoryEntry.
type TaskHistoryEntry_List = capnp.StructList[TaskHistoryEntry]

// NewTaskHistoryEntry creates a new list of TaskHistoryEntry.
func NewTaskHistoryEntry_List(s *capnp.Segment, sz int32) (TaskHistoryEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskHistoryEntry](l), err
}

// TaskHistoryEntry_Future is a wrapper for a TaskHistoryEntry promised by a client call.
type TaskHistoryEntry_Future struct{ *capnp.Future }

func (f TaskHistoryEntry_Future) Struct() (TaskHistoryEntry, error) {
	p, err := f.Future.Ptr()
	return TaskHistoryEntry(p.Struct()), err
}

type TaskHistory capnp.Struct

// TaskHistory_TypeID is the unique identifier for the type TaskHistory.
const TaskHistory_TypeID = 0xd35ac5679adaf993

func NewTaskHistory(s *capnp.Segment) (TaskHistory, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistory(st), err
}

func NewRootTaskHistory(s *capnp.Segment) (TaskHistory, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistory(st), err
}

func ReadRootTaskHistory(msg *capnp.Message) (TaskHistory, error) {
	root, err := msg.Root()
	return TaskHistory(root.Struct()), err
}

func (s TaskHistory) String() string {
	str, _ := text.Marshal(0xd35ac5679adaf993, capnp.Struct(s))
	return str
}

func (s TaskHistory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskHistory) DecodeFromPtr(p capnp.Ptr) TaskHistory {
	return TaskHistory(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskHistory) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskHistory) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskHistory) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskHistory) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskHistory) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskHistory) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskHistory) Entries() (TaskHistoryEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TaskHistoryEntry_List(p.List()), err
}

func (s TaskHistory) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskHistory) SetEntries(v TaskHistoryEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated TaskHistoryEntry_List, preferring placement in s's segment.
func (s TaskHistory) NewEntries(n int32) (TaskHistoryEntry_List, error) {
	l, err := NewTaskHistoryEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TaskHistoryEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TaskHistory_List is a list of TaskHistory.
type TaskHistory_List = capnp.StructList[TaskHistory]

// NewTaskHistory creates a new list of TaskHistory.
func NewTaskHistory_List(s *capnp.Segment, sz int32) (TaskHistory_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskHistory](l), err
}

// TaskHistory_Future is a wrapper for a TaskHistory promised by a client call.
type TaskHistory_Future struct{ *capnp.Future }

func (f TaskHistory_Future) Struct() (TaskHistory, error) {
	p, err := f.Future.Ptr()
	return TaskHistory(p.Struct()), err
}

type AcceptNewTask capnp.Struct

// AcceptNewTask_TypeID is the unique identifier for the type AcceptNewTask.
const AcceptNewTask_TypeID = 0xbe5555051342f44e

func NewAcceptNewTask(s *capnp.Segment) (AcceptNewTask, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AcceptNewTask(st), err
}

func NewRootAcceptNewTask(s *capnp.Segment) (AcceptNewTask, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AcceptNewTask(st), err
}

func ReadRootAcceptNewTask(msg *capnp.Message) (AcceptNewTask, error) {
	root, err := msg.Root()
	return AcceptNewTask(root.Struct()), err
}

func (s AcceptNewTask) String() string {
	str, _ := text.Marshal(0xbe5555051342f44e, capnp.Struct(s))
	return str
}

func (s AcceptNewTask) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AcceptNewTask) DecodeFromPtr(p capnp.Ptr) AcceptNewTask {
	return AcceptNewTask(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AcceptNewTask) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AcceptNewTask) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AcceptNewTask) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AcceptNewTask) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AcceptNewTask) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AcceptNewTask) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AcceptNewTask) TaskMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AcceptNewTask) SetTaskMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AcceptNewTask_List is a list of AcceptNewTask.
type AcceptNewTask_List = capnp.StructList[AcceptNewTask]

// NewAcceptNewTask creates a new list of AcceptNewTask.
func NewAcceptNewTask_List(s *capnp.Segment, sz int32) (AcceptNewTask_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AcceptNewTask](l), err
}

// AcceptNewTask_Future is a wrapper for a AcceptNewTask promised by a client call.
type AcceptNewTask_Future struct{ *capnp.Future }

func (f AcceptNewTask_Future) Struct() (AcceptNewTask, error) {
	p, err := f.Future.Ptr()
	return AcceptNewTask(p.Struct()), err
}

type AvaliableTask capnp.Struct

// AvaliableTask_TypeID is the unique identifier for the type AvaliableTask.
const AvaliableTask_TypeID = 0xa86e0a28ffc1ad93

func NewAvaliableTask(s *capnp.Segment) (AvaliableTask, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return AvaliableTask(st), err
}

func NewRootAvaliableTask(s *capnp.Segment) (AvaliableTask, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return AvaliableTask(st), err
}

func ReadRootAvaliableTask(msg *capnp.Message) (AvaliableTask, error) {
	root, err := msg.Root()
	return AvaliableTask(root.Struct()), err
}

func (s AvaliableTask) String() string {
	str, _ := text.Marshal(0xa86e0a28ffc1ad93, capnp.Struct(s))
	return str
}

func (s AvaliableTask) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AvaliableTask) DecodeFromPtr(p capnp.Ptr) AvaliableTask {
	return AvaliableTask(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AvaliableTask) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AvaliableTask) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AvaliableTask) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AvaliableTask) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AvaliableTask) TaskIndex() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AvaliableTask) SetTaskIndex(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AvaliableTask) TaskMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AvaliableTask) SetTaskMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AvaliableTask) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AvaliableTask) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AvaliableTask) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AvaliableTask) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AvaliableTask) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AvaliableTask) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AvaliableTask) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AvaliableTask) SetDesc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AvaliableTask) RewardPlatinum() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AvaliableTask) SetRewardPlatinum(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AvaliableTask) RewardGold() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AvaliableTask) SetRewardGold(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s AvaliableTask) RewardSilver() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AvaliableTask) SetRewardSilver(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s AvaliableTask) RewardCopper() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s AvaliableTask) SetRewardCopper(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s AvaliableTask) SomeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AvaliableTask) HasSomeName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AvaliableTask) SomeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AvaliableTask) SetSomeName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// AvaliableTask_List is a list of AvaliableTask.
type AvaliableTask_List = capnp.StructList[AvaliableTask]

// NewAvaliableTask creates a new list of AvaliableTask.
func NewAvaliableTask_List(s *capnp.Segment, sz int32) (AvaliableTask_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[AvaliableTask](l), err
}

// AvaliableTask_Future is a wrapper for a AvaliableTask promised by a client call.
type AvaliableTask_Future struct{ *capnp.Future }

func (f AvaliableTask_Future) Struct() (AvaliableTask, error) {
	p, err := f.Future.Ptr()
	return AvaliableTask(p.Struct()), err
}

type BankerChange capnp.Struct

// BankerChange_TypeID is the unique identifier for the type BankerChange.
const BankerChange_TypeID = 0xa4fef5cca0eb8eaa

func NewBankerChange(s *capnp.Segment) (BankerChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return BankerChange(st), err
}

func NewRootBankerChange(s *capnp.Segment) (BankerChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return BankerChange(st), err
}

func ReadRootBankerChange(msg *capnp.Message) (BankerChange, error) {
	root, err := msg.Root()
	return BankerChange(root.Struct()), err
}

func (s BankerChange) String() string {
	str, _ := text.Marshal(0xa4fef5cca0eb8eaa, capnp.Struct(s))
	return str
}

func (s BankerChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BankerChange) DecodeFromPtr(p capnp.Ptr) BankerChange {
	return BankerChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BankerChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BankerChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BankerChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BankerChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BankerChange) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BankerChange) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BankerChange) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BankerChange) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BankerChange) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BankerChange) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BankerChange) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BankerChange) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BankerChange) PlatinumBank() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BankerChange) SetPlatinumBank(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s BankerChange) GoldBank() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s BankerChange) SetGoldBank(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s BankerChange) SilverBank() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s BankerChange) SetSilverBank(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s BankerChange) CopperBank() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s BankerChange) SetCopperBank(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

// BankerChange_List is a list of BankerChange.
type BankerChange_List = capnp.StructList[BankerChange]

// NewBankerChange creates a new list of BankerChange.
func NewBankerChange_List(s *capnp.Segment, sz int32) (BankerChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[BankerChange](l), err
}

// BankerChange_Future is a wrapper for a BankerChange promised by a client call.
type BankerChange_Future struct{ *capnp.Future }

func (f BankerChange_Future) Struct() (BankerChange, error) {
	p, err := f.Future.Ptr()
	return BankerChange(p.Struct()), err
}

type LeadershipExpUpdate capnp.Struct

// LeadershipExpUpdate_TypeID is the unique identifier for the type LeadershipExpUpdate.
const LeadershipExpUpdate_TypeID = 0x8534668f6850d8ba

func NewLeadershipExpUpdate(s *capnp.Segment) (LeadershipExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LeadershipExpUpdate(st), err
}

func NewRootLeadershipExpUpdate(s *capnp.Segment) (LeadershipExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LeadershipExpUpdate(st), err
}

func ReadRootLeadershipExpUpdate(msg *capnp.Message) (LeadershipExpUpdate, error) {
	root, err := msg.Root()
	return LeadershipExpUpdate(root.Struct()), err
}

func (s LeadershipExpUpdate) String() string {
	str, _ := text.Marshal(0x8534668f6850d8ba, capnp.Struct(s))
	return str
}

func (s LeadershipExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadershipExpUpdate) DecodeFromPtr(p capnp.Ptr) LeadershipExpUpdate {
	return LeadershipExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadershipExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadershipExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadershipExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadershipExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadershipExpUpdate) GroupLeadershipExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s LeadershipExpUpdate) SetGroupLeadershipExp(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s LeadershipExpUpdate) GroupLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LeadershipExpUpdate) SetGroupLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LeadershipExpUpdate) RaidLeadershipExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s LeadershipExpUpdate) SetRaidLeadershipExp(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s LeadershipExpUpdate) RaidLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LeadershipExpUpdate) SetRaidLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LeadershipExpUpdate_List is a list of LeadershipExpUpdate.
type LeadershipExpUpdate_List = capnp.StructList[LeadershipExpUpdate]

// NewLeadershipExpUpdate creates a new list of LeadershipExpUpdate.
func NewLeadershipExpUpdate_List(s *capnp.Segment, sz int32) (LeadershipExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LeadershipExpUpdate](l), err
}

// LeadershipExpUpdate_Future is a wrapper for a LeadershipExpUpdate promised by a client call.
type LeadershipExpUpdate_Future struct{ *capnp.Future }

func (f LeadershipExpUpdate_Future) Struct() (LeadershipExpUpdate, error) {
	p, err := f.Future.Ptr()
	return LeadershipExpUpdate(p.Struct()), err
}

type UpdateLeadershipAA capnp.Struct

// UpdateLeadershipAA_TypeID is the unique identifier for the type UpdateLeadershipAA.
const UpdateLeadershipAA_TypeID = 0x9726e35ff31ca532

func NewUpdateLeadershipAA(s *capnp.Segment) (UpdateLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UpdateLeadershipAA(st), err
}

func NewRootUpdateLeadershipAA(s *capnp.Segment) (UpdateLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UpdateLeadershipAA(st), err
}

func ReadRootUpdateLeadershipAA(msg *capnp.Message) (UpdateLeadershipAA, error) {
	root, err := msg.Root()
	return UpdateLeadershipAA(root.Struct()), err
}

func (s UpdateLeadershipAA) String() string {
	str, _ := text.Marshal(0x9726e35ff31ca532, capnp.Struct(s))
	return str
}

func (s UpdateLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateLeadershipAA) DecodeFromPtr(p capnp.Ptr) UpdateLeadershipAA {
	return UpdateLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateLeadershipAA) AbilityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s UpdateLeadershipAA) SetAbilityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s UpdateLeadershipAA) NewRank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s UpdateLeadershipAA) SetNewRank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s UpdateLeadershipAA) Pointsleft() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s UpdateLeadershipAA) SetPointsleft(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// UpdateLeadershipAA_List is a list of UpdateLeadershipAA.
type UpdateLeadershipAA_List = capnp.StructList[UpdateLeadershipAA]

// NewUpdateLeadershipAA creates a new list of UpdateLeadershipAA.
func NewUpdateLeadershipAA_List(s *capnp.Segment, sz int32) (UpdateLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[UpdateLeadershipAA](l), err
}

// UpdateLeadershipAA_Future is a wrapper for a UpdateLeadershipAA promised by a client call.
type UpdateLeadershipAA_Future struct{ *capnp.Future }

func (f UpdateLeadershipAA_Future) Struct() (UpdateLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return UpdateLeadershipAA(p.Struct()), err
}

type LeadExpUpdate capnp.Struct

// LeadExpUpdate_TypeID is the unique identifier for the type LeadExpUpdate.
const LeadExpUpdate_TypeID = 0xdea4ce0866a280a7

func NewLeadExpUpdate(s *capnp.Segment) (LeadExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LeadExpUpdate(st), err
}

func NewRootLeadExpUpdate(s *capnp.Segment) (LeadExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LeadExpUpdate(st), err
}

func ReadRootLeadExpUpdate(msg *capnp.Message) (LeadExpUpdate, error) {
	root, err := msg.Root()
	return LeadExpUpdate(root.Struct()), err
}

func (s LeadExpUpdate) String() string {
	str, _ := text.Marshal(0xdea4ce0866a280a7, capnp.Struct(s))
	return str
}

func (s LeadExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadExpUpdate) DecodeFromPtr(p capnp.Ptr) LeadExpUpdate {
	return LeadExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadExpUpdate) GroupLeadershipExp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LeadExpUpdate) SetGroupLeadershipExp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LeadExpUpdate) GroupLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LeadExpUpdate) SetGroupLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LeadExpUpdate) RaidLeadershipExp() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LeadExpUpdate) SetRaidLeadershipExp(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LeadExpUpdate) RaidLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LeadExpUpdate) SetRaidLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LeadExpUpdate_List is a list of LeadExpUpdate.
type LeadExpUpdate_List = capnp.StructList[LeadExpUpdate]

// NewLeadExpUpdate creates a new list of LeadExpUpdate.
func NewLeadExpUpdate_List(s *capnp.Segment, sz int32) (LeadExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LeadExpUpdate](l), err
}

// LeadExpUpdate_Future is a wrapper for a LeadExpUpdate promised by a client call.
type LeadExpUpdate_Future struct{ *capnp.Future }

func (f LeadExpUpdate_Future) Struct() (LeadExpUpdate, error) {
	p, err := f.Future.Ptr()
	return LeadExpUpdate(p.Struct()), err
}

type RaidGeneral capnp.Struct

// RaidGeneral_TypeID is the unique identifier for the type RaidGeneral.
const RaidGeneral_TypeID = 0xaba4e5389c6116b1

func NewRaidGeneral(s *capnp.Segment) (RaidGeneral, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidGeneral(st), err
}

func NewRootRaidGeneral(s *capnp.Segment) (RaidGeneral, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidGeneral(st), err
}

func ReadRootRaidGeneral(msg *capnp.Message) (RaidGeneral, error) {
	root, err := msg.Root()
	return RaidGeneral(root.Struct()), err
}

func (s RaidGeneral) String() string {
	str, _ := text.Marshal(0xaba4e5389c6116b1, capnp.Struct(s))
	return str
}

func (s RaidGeneral) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidGeneral) DecodeFromPtr(p capnp.Ptr) RaidGeneral {
	return RaidGeneral(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidGeneral) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidGeneral) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidGeneral) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidGeneral) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidGeneral) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidGeneral) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidGeneral) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidGeneral) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidGeneral) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidGeneral) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidGeneral) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidGeneral) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidGeneral) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidGeneral) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RaidGeneral) Parameter() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidGeneral) SetParameter(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidGeneral_List is a list of RaidGeneral.
type RaidGeneral_List = capnp.StructList[RaidGeneral]

// NewRaidGeneral creates a new list of RaidGeneral.
func NewRaidGeneral_List(s *capnp.Segment, sz int32) (RaidGeneral_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RaidGeneral](l), err
}

// RaidGeneral_Future is a wrapper for a RaidGeneral promised by a client call.
type RaidGeneral_Future struct{ *capnp.Future }

func (f RaidGeneral_Future) Struct() (RaidGeneral, error) {
	p, err := f.Future.Ptr()
	return RaidGeneral(p.Struct()), err
}

type RaidAddMember capnp.Struct

// RaidAddMember_TypeID is the unique identifier for the type RaidAddMember.
const RaidAddMember_TypeID = 0xdc9cd82121d86b8e

func NewRaidAddMember(s *capnp.Segment) (RaidAddMember, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaidAddMember(st), err
}

func NewRootRaidAddMember(s *capnp.Segment) (RaidAddMember, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaidAddMember(st), err
}

func ReadRootRaidAddMember(msg *capnp.Message) (RaidAddMember, error) {
	root, err := msg.Root()
	return RaidAddMember(root.Struct()), err
}

func (s RaidAddMember) String() string {
	str, _ := text.Marshal(0xdc9cd82121d86b8e, capnp.Struct(s))
	return str
}

func (s RaidAddMember) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidAddMember) DecodeFromPtr(p capnp.Ptr) RaidAddMember {
	return RaidAddMember(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidAddMember) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidAddMember) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidAddMember) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidAddMember) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidAddMember) RaidGen() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidAddMember) HasRaidGen() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidAddMember) SetRaidGen(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRaidGen sets the raidGen field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidAddMember) NewRaidGen() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidAddMember) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidAddMember) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidAddMember) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidAddMember) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidAddMember) IsGroupLeader() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidAddMember) SetIsGroupLeader(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// RaidAddMember_List is a list of RaidAddMember.
type RaidAddMember_List = capnp.StructList[RaidAddMember]

// NewRaidAddMember creates a new list of RaidAddMember.
func NewRaidAddMember_List(s *capnp.Segment, sz int32) (RaidAddMember_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RaidAddMember](l), err
}

// RaidAddMember_Future is a wrapper for a RaidAddMember promised by a client call.
type RaidAddMember_Future struct{ *capnp.Future }

func (f RaidAddMember_Future) Struct() (RaidAddMember, error) {
	p, err := f.Future.Ptr()
	return RaidAddMember(p.Struct()), err
}
func (p RaidAddMember_Future) RaidGen() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidNote capnp.Struct

// RaidNote_TypeID is the unique identifier for the type RaidNote.
const RaidNote_TypeID = 0xcc521ab8cc5e91c0

func NewRaidNote(s *capnp.Segment) (RaidNote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidNote(st), err
}

func NewRootRaidNote(s *capnp.Segment) (RaidNote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidNote(st), err
}

func ReadRootRaidNote(msg *capnp.Message) (RaidNote, error) {
	root, err := msg.Root()
	return RaidNote(root.Struct()), err
}

func (s RaidNote) String() string {
	str, _ := text.Marshal(0xcc521ab8cc5e91c0, capnp.Struct(s))
	return str
}

func (s RaidNote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidNote) DecodeFromPtr(p capnp.Ptr) RaidNote {
	return RaidNote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidNote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidNote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidNote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidNote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidNote) General() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidNote) HasGeneral() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidNote) SetGeneral(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGeneral sets the general field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidNote) NewGeneral() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidNote) Note() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidNote) HasNote() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidNote) NoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidNote) SetNote(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// RaidNote_List is a list of RaidNote.
type RaidNote_List = capnp.StructList[RaidNote]

// NewRaidNote creates a new list of RaidNote.
func NewRaidNote_List(s *capnp.Segment, sz int32) (RaidNote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[RaidNote](l), err
}

// RaidNote_Future is a wrapper for a RaidNote promised by a client call.
type RaidNote_Future struct{ *capnp.Future }

func (f RaidNote_Future) Struct() (RaidNote, error) {
	p, err := f.Future.Ptr()
	return RaidNote(p.Struct()), err
}
func (p RaidNote_Future) General() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidMOTD capnp.Struct

// RaidMOTD_TypeID is the unique identifier for the type RaidMOTD.
const RaidMOTD_TypeID = 0xbad2f81cd78e053a

func NewRaidMOTD(s *capnp.Segment) (RaidMOTD, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidMOTD(st), err
}

func NewRootRaidMOTD(s *capnp.Segment) (RaidMOTD, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidMOTD(st), err
}

func ReadRootRaidMOTD(msg *capnp.Message) (RaidMOTD, error) {
	root, err := msg.Root()
	return RaidMOTD(root.Struct()), err
}

func (s RaidMOTD) String() string {
	str, _ := text.Marshal(0xbad2f81cd78e053a, capnp.Struct(s))
	return str
}

func (s RaidMOTD) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMOTD) DecodeFromPtr(p capnp.Ptr) RaidMOTD {
	return RaidMOTD(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMOTD) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMOTD) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMOTD) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMOTD) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMOTD) General() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidMOTD) HasGeneral() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMOTD) SetGeneral(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGeneral sets the general field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidMOTD) NewGeneral() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidMOTD) Motd() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidMOTD) HasMotd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidMOTD) MotdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidMOTD) SetMotd(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// RaidMOTD_List is a list of RaidMOTD.
type RaidMOTD_List = capnp.StructList[RaidMOTD]

// NewRaidMOTD creates a new list of RaidMOTD.
func NewRaidMOTD_List(s *capnp.Segment, sz int32) (RaidMOTD_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[RaidMOTD](l), err
}

// RaidMOTD_Future is a wrapper for a RaidMOTD promised by a client call.
type RaidMOTD_Future struct{ *capnp.Future }

func (f RaidMOTD_Future) Struct() (RaidMOTD, error) {
	p, err := f.Future.Ptr()
	return RaidMOTD(p.Struct()), err
}
func (p RaidMOTD_Future) General() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidLeadershipUpdate capnp.Struct

// RaidLeadershipUpdate_TypeID is the unique identifier for the type RaidLeadershipUpdate.
const RaidLeadershipUpdate_TypeID = 0x9078ec69fd7d9560

func NewRaidLeadershipUpdate(s *capnp.Segment) (RaidLeadershipUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RaidLeadershipUpdate(st), err
}

func NewRootRaidLeadershipUpdate(s *capnp.Segment) (RaidLeadershipUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RaidLeadershipUpdate(st), err
}

func ReadRootRaidLeadershipUpdate(msg *capnp.Message) (RaidLeadershipUpdate, error) {
	root, err := msg.Root()
	return RaidLeadershipUpdate(root.Struct()), err
}

func (s RaidLeadershipUpdate) String() string {
	str, _ := text.Marshal(0x9078ec69fd7d9560, capnp.Struct(s))
	return str
}

func (s RaidLeadershipUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidLeadershipUpdate) DecodeFromPtr(p capnp.Ptr) RaidLeadershipUpdate {
	return RaidLeadershipUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidLeadershipUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidLeadershipUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidLeadershipUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidLeadershipUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidLeadershipUpdate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidLeadershipUpdate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidLeadershipUpdate) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidLeadershipUpdate) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidLeadershipUpdate) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidLeadershipUpdate) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidLeadershipUpdate) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidLeadershipUpdate) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidLeadershipUpdate) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidLeadershipUpdate) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RaidLeadershipUpdate) Group() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return GroupLeadershipAA(p.Struct()), err
}

func (s RaidLeadershipUpdate) HasGroup() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaidLeadershipUpdate) SetGroup(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewGroup sets the group field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s RaidLeadershipUpdate) NewGroup() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidLeadershipUpdate) Raid() (RaidLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return RaidLeadershipAA(p.Struct()), err
}

func (s RaidLeadershipUpdate) HasRaid() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RaidLeadershipUpdate) SetRaid(v RaidLeadershipAA) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewRaid sets the raid field to a newly
// allocated RaidLeadershipAA struct, preferring placement in s's segment.
func (s RaidLeadershipUpdate) NewRaid() (RaidLeadershipAA, error) {
	ss, err := NewRaidLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return RaidLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaidLeadershipUpdate_List is a list of RaidLeadershipUpdate.
type RaidLeadershipUpdate_List = capnp.StructList[RaidLeadershipUpdate]

// NewRaidLeadershipUpdate creates a new list of RaidLeadershipUpdate.
func NewRaidLeadershipUpdate_List(s *capnp.Segment, sz int32) (RaidLeadershipUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[RaidLeadershipUpdate](l), err
}

// RaidLeadershipUpdate_Future is a wrapper for a RaidLeadershipUpdate promised by a client call.
type RaidLeadershipUpdate_Future struct{ *capnp.Future }

func (f RaidLeadershipUpdate_Future) Struct() (RaidLeadershipUpdate, error) {
	p, err := f.Future.Ptr()
	return RaidLeadershipUpdate(p.Struct()), err
}
func (p RaidLeadershipUpdate_Future) Group() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(2, nil)}
}
func (p RaidLeadershipUpdate_Future) Raid() RaidLeadershipAA_Future {
	return RaidLeadershipAA_Future{Future: p.Future.Field(3, nil)}
}

type RaidCreate capnp.Struct

// RaidCreate_TypeID is the unique identifier for the type RaidCreate.
const RaidCreate_TypeID = 0xfa80583ce360de61

func NewRaidCreate(s *capnp.Segment) (RaidCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RaidCreate(st), err
}

func NewRootRaidCreate(s *capnp.Segment) (RaidCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RaidCreate(st), err
}

func ReadRootRaidCreate(msg *capnp.Message) (RaidCreate, error) {
	root, err := msg.Root()
	return RaidCreate(root.Struct()), err
}

func (s RaidCreate) String() string {
	str, _ := text.Marshal(0xfa80583ce360de61, capnp.Struct(s))
	return str
}

func (s RaidCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidCreate) DecodeFromPtr(p capnp.Ptr) RaidCreate {
	return RaidCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidCreate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidCreate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidCreate) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidCreate) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidCreate) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidCreate) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidCreate) LeaderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidCreate) SetLeaderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidCreate_List is a list of RaidCreate.
type RaidCreate_List = capnp.StructList[RaidCreate]

// NewRaidCreate creates a new list of RaidCreate.
func NewRaidCreate_List(s *capnp.Segment, sz int32) (RaidCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[RaidCreate](l), err
}

// RaidCreate_Future is a wrapper for a RaidCreate promised by a client call.
type RaidCreate_Future struct{ *capnp.Future }

func (f RaidCreate_Future) Struct() (RaidCreate, error) {
	p, err := f.Future.Ptr()
	return RaidCreate(p.Struct()), err
}

type RaidMemberInfo capnp.Struct

// RaidMemberInfo_TypeID is the unique identifier for the type RaidMemberInfo.
const RaidMemberInfo_TypeID = 0xf32339f8d6ffe524

func NewRaidMemberInfo(s *capnp.Segment) (RaidMemberInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaidMemberInfo(st), err
}

func NewRootRaidMemberInfo(s *capnp.Segment) (RaidMemberInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaidMemberInfo(st), err
}

func ReadRootRaidMemberInfo(msg *capnp.Message) (RaidMemberInfo, error) {
	root, err := msg.Root()
	return RaidMemberInfo(root.Struct()), err
}

func (s RaidMemberInfo) String() string {
	str, _ := text.Marshal(0xf32339f8d6ffe524, capnp.Struct(s))
	return str
}

func (s RaidMemberInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMemberInfo) DecodeFromPtr(p capnp.Ptr) RaidMemberInfo {
	return RaidMemberInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMemberInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMemberInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMemberInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMemberInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMemberInfo) GroupNumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidMemberInfo) SetGroupNumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidMemberInfo) MemberName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidMemberInfo) HasMemberName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMemberInfo) MemberNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidMemberInfo) SetMemberName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidMemberInfo) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidMemberInfo) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidMemberInfo) Level() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidMemberInfo) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RaidMemberInfo) IsRaidLeader() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RaidMemberInfo) SetIsRaidLeader(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RaidMemberInfo) IsGroupLeader() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RaidMemberInfo) SetIsGroupLeader(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RaidMemberInfo) MainTank() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s RaidMemberInfo) SetMainTank(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// RaidMemberInfo_List is a list of RaidMemberInfo.
type RaidMemberInfo_List = capnp.StructList[RaidMemberInfo]

// NewRaidMemberInfo creates a new list of RaidMemberInfo.
func NewRaidMemberInfo_List(s *capnp.Segment, sz int32) (RaidMemberInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RaidMemberInfo](l), err
}

// RaidMemberInfo_Future is a wrapper for a RaidMemberInfo promised by a client call.
type RaidMemberInfo_Future struct{ *capnp.Future }

func (f RaidMemberInfo_Future) Struct() (RaidMemberInfo, error) {
	p, err := f.Future.Ptr()
	return RaidMemberInfo(p.Struct()), err
}

type RaidDetails capnp.Struct

// RaidDetails_TypeID is the unique identifier for the type RaidDetails.
const RaidDetails_TypeID = 0xf87e75def99cdba4

func NewRaidDetails(s *capnp.Segment) (RaidDetails, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidDetails(st), err
}

func NewRootRaidDetails(s *capnp.Segment) (RaidDetails, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidDetails(st), err
}

func ReadRootRaidDetails(msg *capnp.Message) (RaidDetails, error) {
	root, err := msg.Root()
	return RaidDetails(root.Struct()), err
}

func (s RaidDetails) String() string {
	str, _ := text.Marshal(0xf87e75def99cdba4, capnp.Struct(s))
	return str
}

func (s RaidDetails) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidDetails) DecodeFromPtr(p capnp.Ptr) RaidDetails {
	return RaidDetails(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidDetails) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidDetails) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidDetails) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidDetails) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidDetails) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidDetails) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidDetails) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidDetails) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidDetails) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidDetails) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidDetails) Abilities() (LeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return LeadershipAA(p.Struct()), err
}

func (s RaidDetails) HasAbilities() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidDetails) SetAbilities(v LeadershipAA) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewAbilities sets the abilities field to a newly
// allocated LeadershipAA struct, preferring placement in s's segment.
func (s RaidDetails) NewAbilities() (LeadershipAA, error) {
	ss, err := NewLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return LeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidDetails) LeaderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidDetails) SetLeaderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidDetails_List is a list of RaidDetails.
type RaidDetails_List = capnp.StructList[RaidDetails]

// NewRaidDetails creates a new list of RaidDetails.
func NewRaidDetails_List(s *capnp.Segment, sz int32) (RaidDetails_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RaidDetails](l), err
}

// RaidDetails_Future is a wrapper for a RaidDetails promised by a client call.
type RaidDetails_Future struct{ *capnp.Future }

func (f RaidDetails_Future) Struct() (RaidDetails, error) {
	p, err := f.Future.Ptr()
	return RaidDetails(p.Struct()), err
}
func (p RaidDetails_Future) Abilities() LeadershipAA_Future {
	return LeadershipAA_Future{Future: p.Future.Field(1, nil)}
}

type RaidMembers capnp.Struct

// RaidMembers_TypeID is the unique identifier for the type RaidMembers.
const RaidMembers_TypeID = 0xa5a8b25550e0240d

func NewRaidMembers(s *capnp.Segment) (RaidMembers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RaidMembers(st), err
}

func NewRootRaidMembers(s *capnp.Segment) (RaidMembers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RaidMembers(st), err
}

func ReadRootRaidMembers(msg *capnp.Message) (RaidMembers, error) {
	root, err := msg.Root()
	return RaidMembers(root.Struct()), err
}

func (s RaidMembers) String() string {
	str, _ := text.Marshal(0xa5a8b25550e0240d, capnp.Struct(s))
	return str
}

func (s RaidMembers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMembers) DecodeFromPtr(p capnp.Ptr) RaidMembers {
	return RaidMembers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMembers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMembers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMembers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMembers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMembers) Details() (RaidDetails, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidDetails(p.Struct()), err
}

func (s RaidMembers) HasDetails() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMembers) SetDetails(v RaidDetails) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDetails sets the details field to a newly
// allocated RaidDetails struct, preferring placement in s's segment.
func (s RaidMembers) NewDetails() (RaidDetails, error) {
	ss, err := NewRaidDetails(capnp.Struct(s).Segment())
	if err != nil {
		return RaidDetails{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidMembers) MemberCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidMembers) SetMemberCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidMembers) Members() (RaidMemberInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RaidMemberInfo_List(p.List()), err
}

func (s RaidMembers) HasMembers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidMembers) SetMembers(v RaidMemberInfo_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated RaidMemberInfo_List, preferring placement in s's segment.
func (s RaidMembers) NewMembers(n int32) (RaidMemberInfo_List, error) {
	l, err := NewRaidMemberInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RaidMemberInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s RaidMembers) Empty() (RaidMemberInfo, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return RaidMemberInfo(p.Struct()), err
}

func (s RaidMembers) HasEmpty() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaidMembers) SetEmpty(v RaidMemberInfo) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEmpty sets the empty field to a newly
// allocated RaidMemberInfo struct, preferring placement in s's segment.
func (s RaidMembers) NewEmpty() (RaidMemberInfo, error) {
	ss, err := NewRaidMemberInfo(capnp.Struct(s).Segment())
	if err != nil {
		return RaidMemberInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaidMembers_List is a list of RaidMembers.
type RaidMembers_List = capnp.StructList[RaidMembers]

// NewRaidMembers creates a new list of RaidMembers.
func NewRaidMembers_List(s *capnp.Segment, sz int32) (RaidMembers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[RaidMembers](l), err
}

// RaidMembers_Future is a wrapper for a RaidMembers promised by a client call.
type RaidMembers_Future struct{ *capnp.Future }

func (f RaidMembers_Future) Struct() (RaidMembers, error) {
	p, err := f.Future.Ptr()
	return RaidMembers(p.Struct()), err
}
func (p RaidMembers_Future) Details() RaidDetails_Future {
	return RaidDetails_Future{Future: p.Future.Field(0, nil)}
}
func (p RaidMembers_Future) Empty() RaidMemberInfo_Future {
	return RaidMemberInfo_Future{Future: p.Future.Field(2, nil)}
}

type DynamicWall capnp.Struct

// DynamicWall_TypeID is the unique identifier for the type DynamicWall.
const DynamicWall_TypeID = 0xaf898798e12e23da

func NewDynamicWall(s *capnp.Segment) (DynamicWall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DynamicWall(st), err
}

func NewRootDynamicWall(s *capnp.Segment) (DynamicWall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DynamicWall(st), err
}

func ReadRootDynamicWall(msg *capnp.Message) (DynamicWall, error) {
	root, err := msg.Root()
	return DynamicWall(root.Struct()), err
}

func (s DynamicWall) String() string {
	str, _ := text.Marshal(0xaf898798e12e23da, capnp.Struct(s))
	return str
}

func (s DynamicWall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicWall) DecodeFromPtr(p capnp.Ptr) DynamicWall {
	return DynamicWall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicWall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicWall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicWall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicWall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicWall) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicWall) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicWall) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicWall) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicWall) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s DynamicWall) SetY(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s DynamicWall) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s DynamicWall) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s DynamicWall) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s DynamicWall) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s DynamicWall) OneHundred() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s DynamicWall) SetOneHundred(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// DynamicWall_List is a list of DynamicWall.
type DynamicWall_List = capnp.StructList[DynamicWall]

// NewDynamicWall creates a new list of DynamicWall.
func NewDynamicWall_List(s *capnp.Segment, sz int32) (DynamicWall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[DynamicWall](l), err
}

// DynamicWall_Future is a wrapper for a DynamicWall promised by a client call.
type DynamicWall_Future struct{ *capnp.Future }

func (f DynamicWall_Future) Struct() (DynamicWall, error) {
	p, err := f.Future.Ptr()
	return DynamicWall(p.Struct()), err
}

type BandolierCreate capnp.Struct

// BandolierCreate_TypeID is the unique identifier for the type BandolierCreate.
const BandolierCreate_TypeID = 0xedada67c810ba36d

func NewBandolierCreate(s *capnp.Segment) (BandolierCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierCreate(st), err
}

func NewRootBandolierCreate(s *capnp.Segment) (BandolierCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierCreate(st), err
}

func ReadRootBandolierCreate(msg *capnp.Message) (BandolierCreate, error) {
	root, err := msg.Root()
	return BandolierCreate(root.Struct()), err
}

func (s BandolierCreate) String() string {
	str, _ := text.Marshal(0xedada67c810ba36d, capnp.Struct(s))
	return str
}

func (s BandolierCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierCreate) DecodeFromPtr(p capnp.Ptr) BandolierCreate {
	return BandolierCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierCreate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierCreate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierCreate) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierCreate) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BandolierCreate) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BandolierCreate) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BandolierCreate) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BandolierCreate) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BandolierCreate_List is a list of BandolierCreate.
type BandolierCreate_List = capnp.StructList[BandolierCreate]

// NewBandolierCreate creates a new list of BandolierCreate.
func NewBandolierCreate_List(s *capnp.Segment, sz int32) (BandolierCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BandolierCreate](l), err
}

// BandolierCreate_Future is a wrapper for a BandolierCreate promised by a client call.
type BandolierCreate_Future struct{ *capnp.Future }

func (f BandolierCreate_Future) Struct() (BandolierCreate, error) {
	p, err := f.Future.Ptr()
	return BandolierCreate(p.Struct()), err
}

type BandolierDelete capnp.Struct

// BandolierDelete_TypeID is the unique identifier for the type BandolierDelete.
const BandolierDelete_TypeID = 0xa304ad602f730110

func NewBandolierDelete(s *capnp.Segment) (BandolierDelete, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierDelete(st), err
}

func NewRootBandolierDelete(s *capnp.Segment) (BandolierDelete, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierDelete(st), err
}

func ReadRootBandolierDelete(msg *capnp.Message) (BandolierDelete, error) {
	root, err := msg.Root()
	return BandolierDelete(root.Struct()), err
}

func (s BandolierDelete) String() string {
	str, _ := text.Marshal(0xa304ad602f730110, capnp.Struct(s))
	return str
}

func (s BandolierDelete) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierDelete) DecodeFromPtr(p capnp.Ptr) BandolierDelete {
	return BandolierDelete(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierDelete) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierDelete) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierDelete) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierDelete) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierDelete) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierDelete) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierDelete) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierDelete) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BandolierDelete_List is a list of BandolierDelete.
type BandolierDelete_List = capnp.StructList[BandolierDelete]

// NewBandolierDelete creates a new list of BandolierDelete.
func NewBandolierDelete_List(s *capnp.Segment, sz int32) (BandolierDelete_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BandolierDelete](l), err
}

// BandolierDelete_Future is a wrapper for a BandolierDelete promised by a client call.
type BandolierDelete_Future struct{ *capnp.Future }

func (f BandolierDelete_Future) Struct() (BandolierDelete, error) {
	p, err := f.Future.Ptr()
	return BandolierDelete(p.Struct()), err
}

type BandolierSet capnp.Struct

// BandolierSet_TypeID is the unique identifier for the type BandolierSet.
const BandolierSet_TypeID = 0xae87b106322248a8

func NewBandolierSet(s *capnp.Segment) (BandolierSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierSet(st), err
}

func NewRootBandolierSet(s *capnp.Segment) (BandolierSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierSet(st), err
}

func ReadRootBandolierSet(msg *capnp.Message) (BandolierSet, error) {
	root, err := msg.Root()
	return BandolierSet(root.Struct()), err
}

func (s BandolierSet) String() string {
	str, _ := text.Marshal(0xae87b106322248a8, capnp.Struct(s))
	return str
}

func (s BandolierSet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierSet) DecodeFromPtr(p capnp.Ptr) BandolierSet {
	return BandolierSet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierSet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierSet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierSet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierSet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierSet) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierSet) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierSet) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierSet) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BandolierSet_List is a list of BandolierSet.
type BandolierSet_List = capnp.StructList[BandolierSet]

// NewBandolierSet creates a new list of BandolierSet.
func NewBandolierSet_List(s *capnp.Segment, sz int32) (BandolierSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BandolierSet](l), err
}

// BandolierSet_Future is a wrapper for a BandolierSet promised by a client call.
type BandolierSet_Future struct{ *capnp.Future }

func (f BandolierSet_Future) Struct() (BandolierSet, error) {
	p, err := f.Future.Ptr()
	return BandolierSet(p.Struct()), err
}

type Arrow capnp.Struct

// Arrow_TypeID is the unique identifier for the type Arrow.
const Arrow_TypeID = 0x8f80c9fc8ead22c9

func NewArrow(s *capnp.Segment) (Arrow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Arrow(st), err
}

func NewRootArrow(s *capnp.Segment) (Arrow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Arrow(st), err
}

func ReadRootArrow(msg *capnp.Message) (Arrow, error) {
	root, err := msg.Root()
	return Arrow(root.Struct()), err
}

func (s Arrow) String() string {
	str, _ := text.Marshal(0x8f80c9fc8ead22c9, capnp.Struct(s))
	return str
}

func (s Arrow) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Arrow) DecodeFromPtr(p capnp.Ptr) Arrow {
	return Arrow(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Arrow) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Arrow) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Arrow) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Arrow) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Arrow) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Arrow) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Arrow) SrcY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Arrow) SetSrcY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Arrow) SrcX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Arrow) SetSrcX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Arrow) SrcZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Arrow) SetSrcZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Arrow) Velocity() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Arrow) SetVelocity(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Arrow) LaunchAngle() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Arrow) SetLaunchAngle(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Arrow) Tilt() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Arrow) SetTilt(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Arrow) Arc() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s Arrow) SetArc(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s Arrow) SourceId() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Arrow) SetSourceId(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Arrow) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Arrow) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Arrow) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Arrow) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s Arrow) ModelName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Arrow) HasModelName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Arrow) ModelNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Arrow) SetModelName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Arrow_List is a list of Arrow.
type Arrow_List = capnp.StructList[Arrow]

// NewArrow creates a new list of Arrow.
func NewArrow_List(s *capnp.Segment, sz int32) (Arrow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Arrow](l), err
}

// Arrow_Future is a wrapper for a Arrow promised by a client call.
type Arrow_Future struct{ *capnp.Future }

func (f Arrow_Future) Struct() (Arrow, error) {
	p, err := f.Future.Ptr()
	return Arrow(p.Struct()), err
}

type Consent capnp.Struct

// Consent_TypeID is the unique identifier for the type Consent.
const Consent_TypeID = 0xa66384177fb99486

func NewConsent(s *capnp.Segment) (Consent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Consent(st), err
}

func NewRootConsent(s *capnp.Segment) (Consent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Consent(st), err
}

func ReadRootConsent(msg *capnp.Message) (Consent, error) {
	root, err := msg.Root()
	return Consent(root.Struct()), err
}

func (s Consent) String() string {
	str, _ := text.Marshal(0xa66384177fb99486, capnp.Struct(s))
	return str
}

func (s Consent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consent) DecodeFromPtr(p capnp.Ptr) Consent {
	return Consent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consent) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Consent) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Consent) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Consent) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Consent_List is a list of Consent.
type Consent_List = capnp.StructList[Consent]

// NewConsent creates a new list of Consent.
func NewConsent_List(s *capnp.Segment, sz int32) (Consent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Consent](l), err
}

// Consent_Future is a wrapper for a Consent promised by a client call.
type Consent_Future struct{ *capnp.Future }

func (f Consent_Future) Struct() (Consent, error) {
	p, err := f.Future.Ptr()
	return Consent(p.Struct()), err
}

type AdventureMerchant capnp.Struct

// AdventureMerchant_TypeID is the unique identifier for the type AdventureMerchant.
const AdventureMerchant_TypeID = 0xf89cd60c9713ce58

func NewAdventureMerchant(s *capnp.Segment) (AdventureMerchant, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureMerchant(st), err
}

func NewRootAdventureMerchant(s *capnp.Segment) (AdventureMerchant, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureMerchant(st), err
}

func ReadRootAdventureMerchant(msg *capnp.Message) (AdventureMerchant, error) {
	root, err := msg.Root()
	return AdventureMerchant(root.Struct()), err
}

func (s AdventureMerchant) String() string {
	str, _ := text.Marshal(0xf89cd60c9713ce58, capnp.Struct(s))
	return str
}

func (s AdventureMerchant) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureMerchant) DecodeFromPtr(p capnp.Ptr) AdventureMerchant {
	return AdventureMerchant(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureMerchant) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureMerchant) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureMerchant) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureMerchant) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureMerchant) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureMerchant) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// AdventureMerchant_List is a list of AdventureMerchant.
type AdventureMerchant_List = capnp.StructList[AdventureMerchant]

// NewAdventureMerchant creates a new list of AdventureMerchant.
func NewAdventureMerchant_List(s *capnp.Segment, sz int32) (AdventureMerchant_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureMerchant](l), err
}

// AdventureMerchant_Future is a wrapper for a AdventureMerchant promised by a client call.
type AdventureMerchant_Future struct{ *capnp.Future }

func (f AdventureMerchant_Future) Struct() (AdventureMerchant, error) {
	p, err := f.Future.Ptr()
	return AdventureMerchant(p.Struct()), err
}

type GMtoggle capnp.Struct

// GMtoggle_TypeID is the unique identifier for the type GMtoggle.
const GMtoggle_TypeID = 0x82a7789fb5b3a028

func NewGMtoggle(s *capnp.Segment) (GMtoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMtoggle(st), err
}

func NewRootGMtoggle(s *capnp.Segment) (GMtoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMtoggle(st), err
}

func ReadRootGMtoggle(msg *capnp.Message) (GMtoggle, error) {
	root, err := msg.Root()
	return GMtoggle(root.Struct()), err
}

func (s GMtoggle) String() string {
	str, _ := text.Marshal(0x82a7789fb5b3a028, capnp.Struct(s))
	return str
}

func (s GMtoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMtoggle) DecodeFromPtr(p capnp.Ptr) GMtoggle {
	return GMtoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMtoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMtoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMtoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMtoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMtoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMtoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GMtoggle_List is a list of GMtoggle.
type GMtoggle_List = capnp.StructList[GMtoggle]

// NewGMtoggle creates a new list of GMtoggle.
func NewGMtoggle_List(s *capnp.Segment, sz int32) (GMtoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GMtoggle](l), err
}

// GMtoggle_Future is a wrapper for a GMtoggle promised by a client call.
type GMtoggle_Future struct{ *capnp.Future }

func (f GMtoggle_Future) Struct() (GMtoggle, error) {
	p, err := f.Future.Ptr()
	return GMtoggle(p.Struct()), err
}

type GroupInvite capnp.Struct

// GroupInvite_TypeID is the unique identifier for the type GroupInvite.
const GroupInvite_TypeID = 0x9b932a4905396044

func NewGroupInvite(s *capnp.Segment) (GroupInvite, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupInvite(st), err
}

func NewRootGroupInvite(s *capnp.Segment) (GroupInvite, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupInvite(st), err
}

func ReadRootGroupInvite(msg *capnp.Message) (GroupInvite, error) {
	root, err := msg.Root()
	return GroupInvite(root.Struct()), err
}

func (s GroupInvite) String() string {
	str, _ := text.Marshal(0x9b932a4905396044, capnp.Struct(s))
	return str
}

func (s GroupInvite) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupInvite) DecodeFromPtr(p capnp.Ptr) GroupInvite {
	return GroupInvite(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupInvite) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupInvite) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupInvite) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupInvite) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupInvite) InviteeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupInvite) HasInviteeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupInvite) InviteeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupInvite) SetInviteeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupInvite) InviterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupInvite) HasInviterName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupInvite) InviterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupInvite) SetInviterName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupInvite_List is a list of GroupInvite.
type GroupInvite_List = capnp.StructList[GroupInvite]

// NewGroupInvite creates a new list of GroupInvite.
func NewGroupInvite_List(s *capnp.Segment, sz int32) (GroupInvite_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GroupInvite](l), err
}

// GroupInvite_Future is a wrapper for a GroupInvite promised by a client call.
type GroupInvite_Future struct{ *capnp.Future }

func (f GroupInvite_Future) Struct() (GroupInvite, error) {
	p, err := f.Future.Ptr()
	return GroupInvite(p.Struct()), err
}

type ColoredText capnp.Struct

// ColoredText_TypeID is the unique identifier for the type ColoredText.
const ColoredText_TypeID = 0xf55818d39f2c0c72

func NewColoredText(s *capnp.Segment) (ColoredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColoredText(st), err
}

func NewRootColoredText(s *capnp.Segment) (ColoredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColoredText(st), err
}

func ReadRootColoredText(msg *capnp.Message) (ColoredText, error) {
	root, err := msg.Root()
	return ColoredText(root.Struct()), err
}

func (s ColoredText) String() string {
	str, _ := text.Marshal(0xf55818d39f2c0c72, capnp.Struct(s))
	return str
}

func (s ColoredText) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ColoredText) DecodeFromPtr(p capnp.Ptr) ColoredText {
	return ColoredText(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ColoredText) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ColoredText) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ColoredText) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ColoredText) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ColoredText) Color() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ColoredText) SetColor(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ColoredText) Msg() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ColoredText) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ColoredText) MsgBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ColoredText) SetMsg(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ColoredText_List is a list of ColoredText.
type ColoredText_List = capnp.StructList[ColoredText]

// NewColoredText creates a new list of ColoredText.
func NewColoredText_List(s *capnp.Segment, sz int32) (ColoredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ColoredText](l), err
}

// ColoredText_Future is a wrapper for a ColoredText promised by a client call.
type ColoredText_Future struct{ *capnp.Future }

func (f ColoredText_Future) Struct() (ColoredText, error) {
	p, err := f.Future.Ptr()
	return ColoredText(p.Struct()), err
}

type UseAA capnp.Struct

// UseAA_TypeID is the unique identifier for the type UseAA.
const UseAA_TypeID = 0xa377d9a07bd4d6d6

func NewUseAA(s *capnp.Segment) (UseAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UseAA(st), err
}

func NewRootUseAA(s *capnp.Segment) (UseAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UseAA(st), err
}

func ReadRootUseAA(msg *capnp.Message) (UseAA, error) {
	root, err := msg.Root()
	return UseAA(root.Struct()), err
}

func (s UseAA) String() string {
	str, _ := text.Marshal(0xa377d9a07bd4d6d6, capnp.Struct(s))
	return str
}

func (s UseAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UseAA) DecodeFromPtr(p capnp.Ptr) UseAA {
	return UseAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UseAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UseAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UseAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UseAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UseAA) Begin() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s UseAA) SetBegin(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s UseAA) Ability() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s UseAA) SetAbility(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s UseAA) End() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s UseAA) SetEnd(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// UseAA_List is a list of UseAA.
type UseAA_List = capnp.StructList[UseAA]

// NewUseAA creates a new list of UseAA.
func NewUseAA_List(s *capnp.Segment, sz int32) (UseAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[UseAA](l), err
}

// UseAA_Future is a wrapper for a UseAA promised by a client call.
type UseAA_Future struct{ *capnp.Future }

func (f UseAA_Future) Struct() (UseAA, error) {
	p, err := f.Future.Ptr()
	return UseAA(p.Struct()), err
}

type AAAbility capnp.Struct

// AAAbility_TypeID is the unique identifier for the type AAAbility.
const AAAbility_TypeID = 0x9598dccef1d83c38

func NewAAAbility(s *capnp.Segment) (AAAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAbility(st), err
}

func NewRootAAAbility(s *capnp.Segment) (AAAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAbility(st), err
}

func ReadRootAAAbility(msg *capnp.Message) (AAAbility, error) {
	root, err := msg.Root()
	return AAAbility(root.Struct()), err
}

func (s AAAbility) String() string {
	str, _ := text.Marshal(0x9598dccef1d83c38, capnp.Struct(s))
	return str
}

func (s AAAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAAbility) DecodeFromPtr(p capnp.Ptr) AAAbility {
	return AAAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAAbility) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAAbility) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAAbility) BaseValue() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAAbility) SetBaseValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AAAbility) LimitValue() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AAAbility) SetLimitValue(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AAAbility) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AAAbility) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AAAbility_List is a list of AAAbility.
type AAAbility_List = capnp.StructList[AAAbility]

// NewAAAbility creates a new list of AAAbility.
func NewAAAbility_List(s *capnp.Segment, sz int32) (AAAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AAAbility](l), err
}

// AAAbility_Future is a wrapper for a AAAbility promised by a client call.
type AAAbility_Future struct{ *capnp.Future }

func (f AAAbility_Future) Struct() (AAAbility, error) {
	p, err := f.Future.Ptr()
	return AAAbility(p.Struct()), err
}

type SendAA capnp.Struct

// SendAA_TypeID is the unique identifier for the type SendAA.
const SendAA_TypeID = 0xdacdaa0d69c497ba

func NewSendAA(s *capnp.Segment) (SendAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1})
	return SendAA(st), err
}

func NewRootSendAA(s *capnp.Segment) (SendAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1})
	return SendAA(st), err
}

func ReadRootSendAA(msg *capnp.Message) (SendAA, error) {
	root, err := msg.Root()
	return SendAA(root.Struct()), err
}

func (s SendAA) String() string {
	str, _ := text.Marshal(0xdacdaa0d69c497ba, capnp.Struct(s))
	return str
}

func (s SendAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SendAA) DecodeFromPtr(p capnp.Ptr) SendAA {
	return SendAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SendAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SendAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SendAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SendAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SendAA) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SendAA) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SendAA) HotkeySid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SendAA) SetHotkeySid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SendAA) HotkeySid2() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SendAA) SetHotkeySid2(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s SendAA) TitleSid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s SendAA) SetTitleSid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s SendAA) DescSid() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s SendAA) SetDescSid(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s SendAA) ClassType() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s SendAA) SetClassType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s SendAA) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s SendAA) SetCost(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s SendAA) Seq() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s SendAA) SetSeq(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s SendAA) CurrentLevel() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s SendAA) SetCurrentLevel(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s SendAA) PrereqSkill() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s SendAA) SetPrereqSkill(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s SendAA) PrereqMinpoints() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s SendAA) SetPrereqMinpoints(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s SendAA) Type() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s SendAA) SetType(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s SendAA) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s SendAA) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s SendAA) SpellType() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s SendAA) SetSpellType(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s SendAA) SpellRefresh() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s SendAA) SetSpellRefresh(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s SendAA) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s SendAA) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s SendAA) MaxLevel() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s SendAA) SetMaxLevel(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s SendAA) LastId() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s SendAA) SetLastId(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s SendAA) NextId() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s SendAA) SetNextId(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s SendAA) Cost2() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s SendAA) SetCost2(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s SendAA) Count() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s SendAA) SetCount(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s SendAA) Abilities() (AAAbility_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAAbility_List(p.List()), err
}

func (s SendAA) HasAbilities() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SendAA) SetAbilities(v AAAbility_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAbilities sets the abilities field to a newly
// allocated AAAbility_List, preferring placement in s's segment.
func (s SendAA) NewAbilities(n int32) (AAAbility_List, error) {
	l, err := NewAAAbility_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAAbility_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SendAA_List is a list of SendAA.
type SendAA_List = capnp.StructList[SendAA]

// NewSendAA creates a new list of SendAA.
func NewSendAA_List(s *capnp.Segment, sz int32) (SendAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1}, sz)
	return capnp.StructList[SendAA](l), err
}

// SendAA_Future is a wrapper for a SendAA promised by a client call.
type SendAA_Future struct{ *capnp.Future }

func (f SendAA_Future) Struct() (SendAA, error) {
	p, err := f.Future.Ptr()
	return SendAA(p.Struct()), err
}

type AAList capnp.Struct

// AAList_TypeID is the unique identifier for the type AAList.
const AAList_TypeID = 0xec5aa6bcd4fca2e4

func NewAAList(s *capnp.Segment) (AAList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AAList(st), err
}

func NewRootAAList(s *capnp.Segment) (AAList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AAList(st), err
}

func ReadRootAAList(msg *capnp.Message) (AAList, error) {
	root, err := msg.Root()
	return AAList(root.Struct()), err
}

func (s AAList) String() string {
	str, _ := text.Marshal(0xec5aa6bcd4fca2e4, capnp.Struct(s))
	return str
}

func (s AAList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAList) DecodeFromPtr(p capnp.Ptr) AAList {
	return AAList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAList) Aa() (SendAA_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SendAA_List(p.List()), err
}

func (s AAList) HasAa() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AAList) SetAa(v SendAA_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAa sets the aa field to a newly
// allocated SendAA_List, preferring placement in s's segment.
func (s AAList) NewAa(n int32) (SendAA_List, error) {
	l, err := NewSendAA_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SendAA_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AAList_List is a list of AAList.
type AAList_List = capnp.StructList[AAList]

// NewAAList creates a new list of AAList.
func NewAAList_List(s *capnp.Segment, sz int32) (AAList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AAList](l), err
}

// AAList_Future is a wrapper for a AAList promised by a client call.
type AAList_Future struct{ *capnp.Future }

func (f AAList_Future) Struct() (AAList, error) {
	p, err := f.Future.Ptr()
	return AAList(p.Struct()), err
}

type AAAction capnp.Struct

// AAAction_TypeID is the unique identifier for the type AAAction.
const AAAction_TypeID = 0xbb2eb4d03dfe2a7d

func NewAAAction(s *capnp.Segment) (AAAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAction(st), err
}

func NewRootAAAction(s *capnp.Segment) (AAAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAction(st), err
}

func ReadRootAAAction(msg *capnp.Message) (AAAction, error) {
	root, err := msg.Root()
	return AAAction(root.Struct()), err
}

func (s AAAction) String() string {
	str, _ := text.Marshal(0xbb2eb4d03dfe2a7d, capnp.Struct(s))
	return str
}

func (s AAAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAAction) DecodeFromPtr(p capnp.Ptr) AAAction {
	return AAAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAAction) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAAction) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAAction) Ability() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAAction) SetAbility(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AAAction) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AAAction) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AAAction) ExpValue() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AAAction) SetExpValue(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AAAction_List is a list of AAAction.
type AAAction_List = capnp.StructList[AAAction]

// NewAAAction creates a new list of AAAction.
func NewAAAction_List(s *capnp.Segment, sz int32) (AAAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AAAction](l), err
}

// AAAction_Future is a wrapper for a AAAction promised by a client call.
type AAAction_Future struct{ *capnp.Future }

func (f AAAction_Future) Struct() (AAAction, error) {
	p, err := f.Future.Ptr()
	return AAAction(p.Struct()), err
}

type AAExpUpdate capnp.Struct

// AAExpUpdate_TypeID is the unique identifier for the type AAExpUpdate.
const AAExpUpdate_TypeID = 0xb861bce5eec387bd

func NewAAExpUpdate(s *capnp.Segment) (AAExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAExpUpdate(st), err
}

func NewRootAAExpUpdate(s *capnp.Segment) (AAExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAExpUpdate(st), err
}

func ReadRootAAExpUpdate(msg *capnp.Message) (AAExpUpdate, error) {
	root, err := msg.Root()
	return AAExpUpdate(root.Struct()), err
}

func (s AAExpUpdate) String() string {
	str, _ := text.Marshal(0xb861bce5eec387bd, capnp.Struct(s))
	return str
}

func (s AAExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAExpUpdate) DecodeFromPtr(p capnp.Ptr) AAExpUpdate {
	return AAExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAExpUpdate) AapointsUnspent() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAExpUpdate) SetAapointsUnspent(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAExpUpdate) AaxpPercent() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAExpUpdate) SetAaxpPercent(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AAExpUpdate_List is a list of AAExpUpdate.
type AAExpUpdate_List = capnp.StructList[AAExpUpdate]

// NewAAExpUpdate creates a new list of AAExpUpdate.
func NewAAExpUpdate_List(s *capnp.Segment, sz int32) (AAExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AAExpUpdate](l), err
}

// AAExpUpdate_Future is a wrapper for a AAExpUpdate promised by a client call.
type AAExpUpdate_Future struct{ *capnp.Future }

func (f AAExpUpdate_Future) Struct() (AAExpUpdate, error) {
	p, err := f.Future.Ptr()
	return AAExpUpdate(p.Struct()), err
}

type AltAdvStats capnp.Struct

// AltAdvStats_TypeID is the unique identifier for the type AltAdvStats.
const AltAdvStats_TypeID = 0xb8ef2f123b9801df

func NewAltAdvStats(s *capnp.Segment) (AltAdvStats, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AltAdvStats(st), err
}

func NewRootAltAdvStats(s *capnp.Segment) (AltAdvStats, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AltAdvStats(st), err
}

func ReadRootAltAdvStats(msg *capnp.Message) (AltAdvStats, error) {
	root, err := msg.Root()
	return AltAdvStats(root.Struct()), err
}

func (s AltAdvStats) String() string {
	str, _ := text.Marshal(0xb8ef2f123b9801df, capnp.Struct(s))
	return str
}

func (s AltAdvStats) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AltAdvStats) DecodeFromPtr(p capnp.Ptr) AltAdvStats {
	return AltAdvStats(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AltAdvStats) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AltAdvStats) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AltAdvStats) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AltAdvStats) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AltAdvStats) Experience() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AltAdvStats) SetExperience(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AltAdvStats) Unspent() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AltAdvStats) SetUnspent(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AltAdvStats) Percentage() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AltAdvStats) SetPercentage(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// AltAdvStats_List is a list of AltAdvStats.
type AltAdvStats_List = capnp.StructList[AltAdvStats]

// NewAltAdvStats creates a new list of AltAdvStats.
func NewAltAdvStats_List(s *capnp.Segment, sz int32) (AltAdvStats_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AltAdvStats](l), err
}

// AltAdvStats_Future is a wrapper for a AltAdvStats promised by a client call.
type AltAdvStats_Future struct{ *capnp.Future }

func (f AltAdvStats_Future) Struct() (AltAdvStats, error) {
	p, err := f.Future.Ptr()
	return AltAdvStats(p.Struct()), err
}

type PlayerAA capnp.Struct

// PlayerAA_TypeID is the unique identifier for the type PlayerAA.
const PlayerAA_TypeID = 0x8cf4d94985ccea99

func NewPlayerAA(s *capnp.Segment) (PlayerAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayerAA(st), err
}

func NewRootPlayerAA(s *capnp.Segment) (PlayerAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayerAA(st), err
}

func ReadRootPlayerAA(msg *capnp.Message) (PlayerAA, error) {
	root, err := msg.Root()
	return PlayerAA(root.Struct()), err
}

func (s PlayerAA) String() string {
	str, _ := text.Marshal(0x8cf4d94985ccea99, capnp.Struct(s))
	return str
}

func (s PlayerAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerAA) DecodeFromPtr(p capnp.Ptr) PlayerAA {
	return PlayerAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerAA) AaList() (AAArray_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAArray_List(p.List()), err
}

func (s PlayerAA) HasAaList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerAA) SetAaList(v AAArray_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAaList sets the aaList field to a newly
// allocated AAArray_List, preferring placement in s's segment.
func (s PlayerAA) NewAaList(n int32) (AAArray_List, error) {
	l, err := NewAAArray_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAArray_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PlayerAA_List is a list of PlayerAA.
type PlayerAA_List = capnp.StructList[PlayerAA]

// NewPlayerAA creates a new list of PlayerAA.
func NewPlayerAA_List(s *capnp.Segment, sz int32) (PlayerAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PlayerAA](l), err
}

// PlayerAA_Future is a wrapper for a PlayerAA promised by a client call.
type PlayerAA_Future struct{ *capnp.Future }

func (f PlayerAA_Future) Struct() (PlayerAA, error) {
	p, err := f.Future.Ptr()
	return PlayerAA(p.Struct()), err
}

type AATable capnp.Struct

// AATable_TypeID is the unique identifier for the type AATable.
const AATable_TypeID = 0xd09020015ade2993

func NewAATable(s *capnp.Segment) (AATable, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AATable(st), err
}

func NewRootAATable(s *capnp.Segment) (AATable, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AATable(st), err
}

func ReadRootAATable(msg *capnp.Message) (AATable, error) {
	root, err := msg.Root()
	return AATable(root.Struct()), err
}

func (s AATable) String() string {
	str, _ := text.Marshal(0xd09020015ade2993, capnp.Struct(s))
	return str
}

func (s AATable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AATable) DecodeFromPtr(p capnp.Ptr) AATable {
	return AATable(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AATable) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AATable) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AATable) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AATable) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AATable) AaList() (AAArray_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAArray_List(p.List()), err
}

func (s AATable) HasAaList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AATable) SetAaList(v AAArray_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAaList sets the aaList field to a newly
// allocated AAArray_List, preferring placement in s's segment.
func (s AATable) NewAaList(n int32) (AAArray_List, error) {
	l, err := NewAAArray_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAArray_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AATable_List is a list of AATable.
type AATable_List = capnp.StructList[AATable]

// NewAATable creates a new list of AATable.
func NewAATable_List(s *capnp.Segment, sz int32) (AATable_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AATable](l), err
}

// AATable_Future is a wrapper for a AATable promised by a client call.
type AATable_Future struct{ *capnp.Future }

func (f AATable_Future) Struct() (AATable, error) {
	p, err := f.Future.Ptr()
	return AATable(p.Struct()), err
}

type Weather capnp.Struct

// Weather_TypeID is the unique identifier for the type Weather.
const Weather_TypeID = 0xe930a7e80f737844

func NewWeather(s *capnp.Segment) (Weather, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Weather(st), err
}

func NewRootWeather(s *capnp.Segment) (Weather, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Weather(st), err
}

func ReadRootWeather(msg *capnp.Message) (Weather, error) {
	root, err := msg.Root()
	return Weather(root.Struct()), err
}

func (s Weather) String() string {
	str, _ := text.Marshal(0xe930a7e80f737844, capnp.Struct(s))
	return str
}

func (s Weather) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Weather) DecodeFromPtr(p capnp.Ptr) Weather {
	return Weather(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Weather) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Weather) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Weather) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Weather) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Weather) Val() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Weather) SetVal(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Weather) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Weather) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Weather) Mode() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Weather) SetMode(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Weather_List is a list of Weather.
type Weather_List = capnp.StructList[Weather]

// NewWeather creates a new list of Weather.
func NewWeather_List(s *capnp.Segment, sz int32) (Weather_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Weather](l), err
}

// Weather_Future is a wrapper for a Weather promised by a client call.
type Weather_Future struct{ *capnp.Future }

func (f Weather_Future) Struct() (Weather, error) {
	p, err := f.Future.Ptr()
	return Weather(p.Struct()), err
}

type LoadSpellSet capnp.Struct

// LoadSpellSet_TypeID is the unique identifier for the type LoadSpellSet.
const LoadSpellSet_TypeID = 0xc854a2272dea6789

func NewLoadSpellSet(s *capnp.Segment) (LoadSpellSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LoadSpellSet(st), err
}

func NewRootLoadSpellSet(s *capnp.Segment) (LoadSpellSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LoadSpellSet(st), err
}

func ReadRootLoadSpellSet(msg *capnp.Message) (LoadSpellSet, error) {
	root, err := msg.Root()
	return LoadSpellSet(root.Struct()), err
}

func (s LoadSpellSet) String() string {
	str, _ := text.Marshal(0xc854a2272dea6789, capnp.Struct(s))
	return str
}

func (s LoadSpellSet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LoadSpellSet) DecodeFromPtr(p capnp.Ptr) LoadSpellSet {
	return LoadSpellSet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LoadSpellSet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LoadSpellSet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LoadSpellSet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LoadSpellSet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LoadSpellSet) Spell() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s LoadSpellSet) HasSpell() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LoadSpellSet) SetSpell(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpell sets the spell field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s LoadSpellSet) NewSpell(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// LoadSpellSet_List is a list of LoadSpellSet.
type LoadSpellSet_List = capnp.StructList[LoadSpellSet]

// NewLoadSpellSet creates a new list of LoadSpellSet.
func NewLoadSpellSet_List(s *capnp.Segment, sz int32) (LoadSpellSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LoadSpellSet](l), err
}

// LoadSpellSet_Future is a wrapper for a LoadSpellSet promised by a client call.
type LoadSpellSet_Future struct{ *capnp.Future }

func (f LoadSpellSet_Future) Struct() (LoadSpellSet, error) {
	p, err := f.Future.Ptr()
	return LoadSpellSet(p.Struct()), err
}

type ApplyPoison capnp.Struct

// ApplyPoison_TypeID is the unique identifier for the type ApplyPoison.
const ApplyPoison_TypeID = 0xdbae5e634d8e9ecd

func NewApplyPoison(s *capnp.Segment) (ApplyPoison, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ApplyPoison(st), err
}

func NewRootApplyPoison(s *capnp.Segment) (ApplyPoison, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ApplyPoison(st), err
}

func ReadRootApplyPoison(msg *capnp.Message) (ApplyPoison, error) {
	root, err := msg.Root()
	return ApplyPoison(root.Struct()), err
}

func (s ApplyPoison) String() string {
	str, _ := text.Marshal(0xdbae5e634d8e9ecd, capnp.Struct(s))
	return str
}

func (s ApplyPoison) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApplyPoison) DecodeFromPtr(p capnp.Ptr) ApplyPoison {
	return ApplyPoison(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApplyPoison) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApplyPoison) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApplyPoison) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApplyPoison) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApplyPoison) InventorySlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ApplyPoison) SetInventorySlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ApplyPoison) Success() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ApplyPoison) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ApplyPoison_List is a list of ApplyPoison.
type ApplyPoison_List = capnp.StructList[ApplyPoison]

// NewApplyPoison creates a new list of ApplyPoison.
func NewApplyPoison_List(s *capnp.Segment, sz int32) (ApplyPoison_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ApplyPoison](l), err
}

// ApplyPoison_Future is a wrapper for a ApplyPoison promised by a client call.
type ApplyPoison_Future struct{ *capnp.Future }

func (f ApplyPoison_Future) Struct() (ApplyPoison, error) {
	p, err := f.Future.Ptr()
	return ApplyPoison(p.Struct()), err
}

type GuildMemberUpdate capnp.Struct

// GuildMemberUpdate_TypeID is the unique identifier for the type GuildMemberUpdate.
const GuildMemberUpdate_TypeID = 0x917f02f6029babd0

func NewGuildMemberUpdate(s *capnp.Segment) (GuildMemberUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildMemberUpdate(st), err
}

func NewRootGuildMemberUpdate(s *capnp.Segment) (GuildMemberUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildMemberUpdate(st), err
}

func ReadRootGuildMemberUpdate(msg *capnp.Message) (GuildMemberUpdate, error) {
	root, err := msg.Root()
	return GuildMemberUpdate(root.Struct()), err
}

func (s GuildMemberUpdate) String() string {
	str, _ := text.Marshal(0x917f02f6029babd0, capnp.Struct(s))
	return str
}

func (s GuildMemberUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMemberUpdate) DecodeFromPtr(p capnp.Ptr) GuildMemberUpdate {
	return GuildMemberUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMemberUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMemberUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMemberUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMemberUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMemberUpdate) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMemberUpdate) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMemberUpdate) MemberName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMemberUpdate) HasMemberName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMemberUpdate) MemberNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMemberUpdate) SetMemberName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMemberUpdate) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildMemberUpdate) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildMemberUpdate) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildMemberUpdate) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// GuildMemberUpdate_List is a list of GuildMemberUpdate.
type GuildMemberUpdate_List = capnp.StructList[GuildMemberUpdate]

// NewGuildMemberUpdate creates a new list of GuildMemberUpdate.
func NewGuildMemberUpdate_List(s *capnp.Segment, sz int32) (GuildMemberUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[GuildMemberUpdate](l), err
}

// GuildMemberUpdate_Future is a wrapper for a GuildMemberUpdate promised by a client call.
type GuildMemberUpdate_Future struct{ *capnp.Future }

func (f GuildMemberUpdate_Future) Struct() (GuildMemberUpdate, error) {
	p, err := f.Future.Ptr()
	return GuildMemberUpdate(p.Struct()), err
}

type VeteranRewardItem capnp.Struct

// VeteranRewardItem_TypeID is the unique identifier for the type VeteranRewardItem.
const VeteranRewardItem_TypeID = 0xc5c8431019d453a8

func NewVeteranRewardItem(s *capnp.Segment) (VeteranRewardItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranRewardItem(st), err
}

func NewRootVeteranRewardItem(s *capnp.Segment) (VeteranRewardItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranRewardItem(st), err
}

func ReadRootVeteranRewardItem(msg *capnp.Message) (VeteranRewardItem, error) {
	root, err := msg.Root()
	return VeteranRewardItem(root.Struct()), err
}

func (s VeteranRewardItem) String() string {
	str, _ := text.Marshal(0xc5c8431019d453a8, capnp.Struct(s))
	return str
}

func (s VeteranRewardItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VeteranRewardItem) DecodeFromPtr(p capnp.Ptr) VeteranRewardItem {
	return VeteranRewardItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VeteranRewardItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VeteranRewardItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VeteranRewardItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VeteranRewardItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VeteranRewardItem) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s VeteranRewardItem) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s VeteranRewardItem) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s VeteranRewardItem) HasItemName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s VeteranRewardItem) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s VeteranRewardItem) SetItemName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// VeteranRewardItem_List is a list of VeteranRewardItem.
type VeteranRewardItem_List = capnp.StructList[VeteranRewardItem]

// NewVeteranRewardItem creates a new list of VeteranRewardItem.
func NewVeteranRewardItem_List(s *capnp.Segment, sz int32) (VeteranRewardItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[VeteranRewardItem](l), err
}

// VeteranRewardItem_Future is a wrapper for a VeteranRewardItem promised by a client call.
type VeteranRewardItem_Future struct{ *capnp.Future }

func (f VeteranRewardItem_Future) Struct() (VeteranRewardItem, error) {
	p, err := f.Future.Ptr()
	return VeteranRewardItem(p.Struct()), err
}

type VeteranReward capnp.Struct

// VeteranReward_TypeID is the unique identifier for the type VeteranReward.
const VeteranReward_TypeID = 0xa0a594ed993e78ca

func NewVeteranReward(s *capnp.Segment) (VeteranReward, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranReward(st), err
}

func NewRootVeteranReward(s *capnp.Segment) (VeteranReward, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranReward(st), err
}

func ReadRootVeteranReward(msg *capnp.Message) (VeteranReward, error) {
	root, err := msg.Root()
	return VeteranReward(root.Struct()), err
}

func (s VeteranReward) String() string {
	str, _ := text.Marshal(0xa0a594ed993e78ca, capnp.Struct(s))
	return str
}

func (s VeteranReward) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VeteranReward) DecodeFromPtr(p capnp.Ptr) VeteranReward {
	return VeteranReward(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VeteranReward) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VeteranReward) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VeteranReward) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VeteranReward) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VeteranReward) ClaimId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s VeteranReward) SetClaimId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s VeteranReward) Item() (VeteranRewardItem, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return VeteranRewardItem(p.Struct()), err
}

func (s VeteranReward) HasItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s VeteranReward) SetItem(v VeteranRewardItem) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewItem sets the item field to a newly
// allocated VeteranRewardItem struct, preferring placement in s's segment.
func (s VeteranReward) NewItem() (VeteranRewardItem, error) {
	ss, err := NewVeteranRewardItem(capnp.Struct(s).Segment())
	if err != nil {
		return VeteranRewardItem{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// VeteranReward_List is a list of VeteranReward.
type VeteranReward_List = capnp.StructList[VeteranReward]

// NewVeteranReward creates a new list of VeteranReward.
func NewVeteranReward_List(s *capnp.Segment, sz int32) (VeteranReward_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[VeteranReward](l), err
}

// VeteranReward_Future is a wrapper for a VeteranReward promised by a client call.
type VeteranReward_Future struct{ *capnp.Future }

func (f VeteranReward_Future) Struct() (VeteranReward, error) {
	p, err := f.Future.Ptr()
	return VeteranReward(p.Struct()), err
}
func (p VeteranReward_Future) Item() VeteranRewardItem_Future {
	return VeteranRewardItem_Future{Future: p.Future.Field(0, nil)}
}

type ExpeditionInvite capnp.Struct

// ExpeditionInvite_TypeID is the unique identifier for the type ExpeditionInvite.
const ExpeditionInvite_TypeID = 0xe79b0d006ef1331d

func NewExpeditionInvite(s *capnp.Segment) (ExpeditionInvite, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return ExpeditionInvite(st), err
}

func NewRootExpeditionInvite(s *capnp.Segment) (ExpeditionInvite, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return ExpeditionInvite(st), err
}

func ReadRootExpeditionInvite(msg *capnp.Message) (ExpeditionInvite, error) {
	root, err := msg.Root()
	return ExpeditionInvite(root.Struct()), err
}

func (s ExpeditionInvite) String() string {
	str, _ := text.Marshal(0xe79b0d006ef1331d, capnp.Struct(s))
	return str
}

func (s ExpeditionInvite) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionInvite) DecodeFromPtr(p capnp.Ptr) ExpeditionInvite {
	return ExpeditionInvite(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionInvite) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionInvite) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionInvite) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionInvite) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionInvite) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionInvite) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionInvite) InviterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionInvite) HasInviterName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionInvite) InviterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetInviterName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionInvite) ExpeditionName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionInvite) HasExpeditionName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionInvite) ExpeditionNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetExpeditionName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ExpeditionInvite) Swapping() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionInvite) SetSwapping(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionInvite) SwapName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ExpeditionInvite) HasSwapName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ExpeditionInvite) SwapNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetSwapName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ExpeditionInvite) Padding() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Int32List(p.List()), err
}

func (s ExpeditionInvite) HasPadding() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ExpeditionInvite) SetPadding(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPadding sets the padding field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ExpeditionInvite) NewPadding(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s ExpeditionInvite) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ExpeditionInvite) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ExpeditionInvite) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ExpeditionInvite) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ExpeditionInvite_List is a list of ExpeditionInvite.
type ExpeditionInvite_List = capnp.StructList[ExpeditionInvite]

// NewExpeditionInvite creates a new list of ExpeditionInvite.
func NewExpeditionInvite_List(s *capnp.Segment, sz int32) (ExpeditionInvite_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return capnp.StructList[ExpeditionInvite](l), err
}

// ExpeditionInvite_Future is a wrapper for a ExpeditionInvite promised by a client call.
type ExpeditionInvite_Future struct{ *capnp.Future }

func (f ExpeditionInvite_Future) Struct() (ExpeditionInvite, error) {
	p, err := f.Future.Ptr()
	return ExpeditionInvite(p.Struct()), err
}

type ExpeditionInviteResponse capnp.Struct

// ExpeditionInviteResponse_TypeID is the unique identifier for the type ExpeditionInviteResponse.
const ExpeditionInviteResponse_TypeID = 0xf7df715b4e24efb3

func NewExpeditionInviteResponse(s *capnp.Segment) (ExpeditionInviteResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ExpeditionInviteResponse(st), err
}

func NewRootExpeditionInviteResponse(s *capnp.Segment) (ExpeditionInviteResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ExpeditionInviteResponse(st), err
}

func ReadRootExpeditionInviteResponse(msg *capnp.Message) (ExpeditionInviteResponse, error) {
	root, err := msg.Root()
	return ExpeditionInviteResponse(root.Struct()), err
}

func (s ExpeditionInviteResponse) String() string {
	str, _ := text.Marshal(0xf7df715b4e24efb3, capnp.Struct(s))
	return str
}

func (s ExpeditionInviteResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionInviteResponse) DecodeFromPtr(p capnp.Ptr) ExpeditionInviteResponse {
	return ExpeditionInviteResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionInviteResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionInviteResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionInviteResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionInviteResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionInviteResponse) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionInviteResponse) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionInviteResponse) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionInviteResponse) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionInviteResponse) Accepted() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ExpeditionInviteResponse) SetAccepted(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ExpeditionInviteResponse) Swapping() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ExpeditionInviteResponse) SetSwapping(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ExpeditionInviteResponse) SwapName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionInviteResponse) HasSwapName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionInviteResponse) SwapNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionInviteResponse) SetSwapName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ExpeditionInviteResponse_List is a list of ExpeditionInviteResponse.
type ExpeditionInviteResponse_List = capnp.StructList[ExpeditionInviteResponse]

// NewExpeditionInviteResponse creates a new list of ExpeditionInviteResponse.
func NewExpeditionInviteResponse_List(s *capnp.Segment, sz int32) (ExpeditionInviteResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionInviteResponse](l), err
}

// ExpeditionInviteResponse_Future is a wrapper for a ExpeditionInviteResponse promised by a client call.
type ExpeditionInviteResponse_Future struct{ *capnp.Future }

func (f ExpeditionInviteResponse_Future) Struct() (ExpeditionInviteResponse, error) {
	p, err := f.Future.Ptr()
	return ExpeditionInviteResponse(p.Struct()), err
}

type DynamicZoneInfo capnp.Struct

// DynamicZoneInfo_TypeID is the unique identifier for the type DynamicZoneInfo.
const DynamicZoneInfo_TypeID = 0xe7469eaa174fdd9f

func NewDynamicZoneInfo(s *capnp.Segment) (DynamicZoneInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneInfo(st), err
}

func NewRootDynamicZoneInfo(s *capnp.Segment) (DynamicZoneInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneInfo(st), err
}

func ReadRootDynamicZoneInfo(msg *capnp.Message) (DynamicZoneInfo, error) {
	root, err := msg.Root()
	return DynamicZoneInfo(root.Struct()), err
}

func (s DynamicZoneInfo) String() string {
	str, _ := text.Marshal(0xe7469eaa174fdd9f, capnp.Struct(s))
	return str
}

func (s DynamicZoneInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneInfo) DecodeFromPtr(p capnp.Ptr) DynamicZoneInfo {
	return DynamicZoneInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneInfo) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneInfo) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneInfo) Assigned() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneInfo) SetAssigned(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneInfo) MaxPlayers() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneInfo) SetMaxPlayers(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneInfo) DzName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneInfo) HasDzName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneInfo) DzNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneInfo) SetDzName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneInfo) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DynamicZoneInfo) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DynamicZoneInfo) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DynamicZoneInfo) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// DynamicZoneInfo_List is a list of DynamicZoneInfo.
type DynamicZoneInfo_List = capnp.StructList[DynamicZoneInfo]

// NewDynamicZoneInfo creates a new list of DynamicZoneInfo.
func NewDynamicZoneInfo_List(s *capnp.Segment, sz int32) (DynamicZoneInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[DynamicZoneInfo](l), err
}

// DynamicZoneInfo_Future is a wrapper for a DynamicZoneInfo promised by a client call.
type DynamicZoneInfo_Future struct{ *capnp.Future }

func (f DynamicZoneInfo_Future) Struct() (DynamicZoneInfo, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneInfo(p.Struct()), err
}

type DynamicZoneMemberEntry capnp.Struct

// DynamicZoneMemberEntry_TypeID is the unique identifier for the type DynamicZoneMemberEntry.
const DynamicZoneMemberEntry_TypeID = 0xd65b5d6ec837db5d

func NewDynamicZoneMemberEntry(s *capnp.Segment) (DynamicZoneMemberEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberEntry(st), err
}

func NewRootDynamicZoneMemberEntry(s *capnp.Segment) (DynamicZoneMemberEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberEntry(st), err
}

func ReadRootDynamicZoneMemberEntry(msg *capnp.Message) (DynamicZoneMemberEntry, error) {
	root, err := msg.Root()
	return DynamicZoneMemberEntry(root.Struct()), err
}

func (s DynamicZoneMemberEntry) String() string {
	str, _ := text.Marshal(0xd65b5d6ec837db5d, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberEntry {
	return DynamicZoneMemberEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneMemberEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneMemberEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneMemberEntry) OnlineStatus() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberEntry) SetOnlineStatus(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// DynamicZoneMemberEntry_List is a list of DynamicZoneMemberEntry.
type DynamicZoneMemberEntry_List = capnp.StructList[DynamicZoneMemberEntry]

// NewDynamicZoneMemberEntry creates a new list of DynamicZoneMemberEntry.
func NewDynamicZoneMemberEntry_List(s *capnp.Segment, sz int32) (DynamicZoneMemberEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberEntry](l), err
}

// DynamicZoneMemberEntry_Future is a wrapper for a DynamicZoneMemberEntry promised by a client call.
type DynamicZoneMemberEntry_Future struct{ *capnp.Future }

func (f DynamicZoneMemberEntry_Future) Struct() (DynamicZoneMemberEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberEntry(p.Struct()), err
}

type DynamicZoneMemberList capnp.Struct

// DynamicZoneMemberList_TypeID is the unique identifier for the type DynamicZoneMemberList.
const DynamicZoneMemberList_TypeID = 0x9ed2b947650ba549

func NewDynamicZoneMemberList(s *capnp.Segment) (DynamicZoneMemberList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberList(st), err
}

func NewRootDynamicZoneMemberList(s *capnp.Segment) (DynamicZoneMemberList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberList(st), err
}

func ReadRootDynamicZoneMemberList(msg *capnp.Message) (DynamicZoneMemberList, error) {
	root, err := msg.Root()
	return DynamicZoneMemberList(root.Struct()), err
}

func (s DynamicZoneMemberList) String() string {
	str, _ := text.Marshal(0x9ed2b947650ba549, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberList) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberList {
	return DynamicZoneMemberList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberList) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberList) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneMemberList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneMemberList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneMemberList) Members() (DynamicZoneMemberEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneMemberEntry_List(p.List()), err
}

func (s DynamicZoneMemberList) HasMembers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberList) SetMembers(v DynamicZoneMemberEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated DynamicZoneMemberEntry_List, preferring placement in s's segment.
func (s DynamicZoneMemberList) NewMembers(n int32) (DynamicZoneMemberEntry_List, error) {
	l, err := NewDynamicZoneMemberEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneMemberEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneMemberList_List is a list of DynamicZoneMemberList.
type DynamicZoneMemberList_List = capnp.StructList[DynamicZoneMemberList]

// NewDynamicZoneMemberList creates a new list of DynamicZoneMemberList.
func NewDynamicZoneMemberList_List(s *capnp.Segment, sz int32) (DynamicZoneMemberList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberList](l), err
}

// DynamicZoneMemberList_Future is a wrapper for a DynamicZoneMemberList promised by a client call.
type DynamicZoneMemberList_Future struct{ *capnp.Future }

func (f DynamicZoneMemberList_Future) Struct() (DynamicZoneMemberList, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberList(p.Struct()), err
}

type DynamicZoneMemberListName capnp.Struct

// DynamicZoneMemberListName_TypeID is the unique identifier for the type DynamicZoneMemberListName.
const DynamicZoneMemberListName_TypeID = 0xc5955ef3c3c9e4b0

func NewDynamicZoneMemberListName(s *capnp.Segment) (DynamicZoneMemberListName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberListName(st), err
}

func NewRootDynamicZoneMemberListName(s *capnp.Segment) (DynamicZoneMemberListName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberListName(st), err
}

func ReadRootDynamicZoneMemberListName(msg *capnp.Message) (DynamicZoneMemberListName, error) {
	root, err := msg.Root()
	return DynamicZoneMemberListName(root.Struct()), err
}

func (s DynamicZoneMemberListName) String() string {
	str, _ := text.Marshal(0xc5955ef3c3c9e4b0, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberListName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberListName) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberListName {
	return DynamicZoneMemberListName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberListName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberListName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberListName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberListName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberListName) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberListName) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneMemberListName) AddName() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneMemberListName) SetAddName(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneMemberListName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneMemberListName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberListName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneMemberListName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DynamicZoneMemberListName_List is a list of DynamicZoneMemberListName.
type DynamicZoneMemberListName_List = capnp.StructList[DynamicZoneMemberListName]

// NewDynamicZoneMemberListName creates a new list of DynamicZoneMemberListName.
func NewDynamicZoneMemberListName_List(s *capnp.Segment, sz int32) (DynamicZoneMemberListName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberListName](l), err
}

// DynamicZoneMemberListName_Future is a wrapper for a DynamicZoneMemberListName promised by a client call.
type DynamicZoneMemberListName_Future struct{ *capnp.Future }

func (f DynamicZoneMemberListName_Future) Struct() (DynamicZoneMemberListName, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberListName(p.Struct()), err
}

type ExpeditionLockoutTimerEntry capnp.Struct

// ExpeditionLockoutTimerEntry_TypeID is the unique identifier for the type ExpeditionLockoutTimerEntry.
const ExpeditionLockoutTimerEntry_TypeID = 0x82bbe68570bc51c9

func NewExpeditionLockoutTimerEntry(s *capnp.Segment) (ExpeditionLockoutTimerEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ExpeditionLockoutTimerEntry(st), err
}

func NewRootExpeditionLockoutTimerEntry(s *capnp.Segment) (ExpeditionLockoutTimerEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ExpeditionLockoutTimerEntry(st), err
}

func ReadRootExpeditionLockoutTimerEntry(msg *capnp.Message) (ExpeditionLockoutTimerEntry, error) {
	root, err := msg.Root()
	return ExpeditionLockoutTimerEntry(root.Struct()), err
}

func (s ExpeditionLockoutTimerEntry) String() string {
	str, _ := text.Marshal(0x82bbe68570bc51c9, capnp.Struct(s))
	return str
}

func (s ExpeditionLockoutTimerEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionLockoutTimerEntry) DecodeFromPtr(p capnp.Ptr) ExpeditionLockoutTimerEntry {
	return ExpeditionLockoutTimerEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionLockoutTimerEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionLockoutTimerEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionLockoutTimerEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionLockoutTimerEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionLockoutTimerEntry) ExpeditionName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionLockoutTimerEntry) HasExpeditionName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionLockoutTimerEntry) ExpeditionNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionLockoutTimerEntry) SetExpeditionName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionLockoutTimerEntry) SecondsRemaining() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionLockoutTimerEntry) SetSecondsRemaining(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionLockoutTimerEntry) EventType() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionLockoutTimerEntry) SetEventType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionLockoutTimerEntry) EventName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionLockoutTimerEntry) HasEventName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionLockoutTimerEntry) EventNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionLockoutTimerEntry) SetEventName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExpeditionLockoutTimerEntry_List is a list of ExpeditionLockoutTimerEntry.
type ExpeditionLockoutTimerEntry_List = capnp.StructList[ExpeditionLockoutTimerEntry]

// NewExpeditionLockoutTimerEntry creates a new list of ExpeditionLockoutTimerEntry.
func NewExpeditionLockoutTimerEntry_List(s *capnp.Segment, sz int32) (ExpeditionLockoutTimerEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[ExpeditionLockoutTimerEntry](l), err
}

// ExpeditionLockoutTimerEntry_Future is a wrapper for a ExpeditionLockoutTimerEntry promised by a client call.
type ExpeditionLockoutTimerEntry_Future struct{ *capnp.Future }

func (f ExpeditionLockoutTimerEntry_Future) Struct() (ExpeditionLockoutTimerEntry, error) {
	p, err := f.Future.Ptr()
	return ExpeditionLockoutTimerEntry(p.Struct()), err
}

type ExpeditionLockoutTimers capnp.Struct

// ExpeditionLockoutTimers_TypeID is the unique identifier for the type ExpeditionLockoutTimers.
const ExpeditionLockoutTimers_TypeID = 0x944a2443abee2e54

func NewExpeditionLockoutTimers(s *capnp.Segment) (ExpeditionLockoutTimers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ExpeditionLockoutTimers(st), err
}

func NewRootExpeditionLockoutTimers(s *capnp.Segment) (ExpeditionLockoutTimers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ExpeditionLockoutTimers(st), err
}

func ReadRootExpeditionLockoutTimers(msg *capnp.Message) (ExpeditionLockoutTimers, error) {
	root, err := msg.Root()
	return ExpeditionLockoutTimers(root.Struct()), err
}

func (s ExpeditionLockoutTimers) String() string {
	str, _ := text.Marshal(0x944a2443abee2e54, capnp.Struct(s))
	return str
}

func (s ExpeditionLockoutTimers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionLockoutTimers) DecodeFromPtr(p capnp.Ptr) ExpeditionLockoutTimers {
	return ExpeditionLockoutTimers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionLockoutTimers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionLockoutTimers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionLockoutTimers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionLockoutTimers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionLockoutTimers) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionLockoutTimers) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionLockoutTimers) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionLockoutTimers) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionLockoutTimers) Timers() (ExpeditionLockoutTimerEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ExpeditionLockoutTimerEntry_List(p.List()), err
}

func (s ExpeditionLockoutTimers) HasTimers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionLockoutTimers) SetTimers(v ExpeditionLockoutTimerEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTimers sets the timers field to a newly
// allocated ExpeditionLockoutTimerEntry_List, preferring placement in s's segment.
func (s ExpeditionLockoutTimers) NewTimers(n int32) (ExpeditionLockoutTimerEntry_List, error) {
	l, err := NewExpeditionLockoutTimerEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ExpeditionLockoutTimerEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ExpeditionLockoutTimers_List is a list of ExpeditionLockoutTimers.
type ExpeditionLockoutTimers_List = capnp.StructList[ExpeditionLockoutTimers]

// NewExpeditionLockoutTimers creates a new list of ExpeditionLockoutTimers.
func NewExpeditionLockoutTimers_List(s *capnp.Segment, sz int32) (ExpeditionLockoutTimers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionLockoutTimers](l), err
}

// ExpeditionLockoutTimers_Future is a wrapper for a ExpeditionLockoutTimers promised by a client call.
type ExpeditionLockoutTimers_Future struct{ *capnp.Future }

func (f ExpeditionLockoutTimers_Future) Struct() (ExpeditionLockoutTimers, error) {
	p, err := f.Future.Ptr()
	return ExpeditionLockoutTimers(p.Struct()), err
}

type DynamicZoneLeaderName capnp.Struct

// DynamicZoneLeaderName_TypeID is the unique identifier for the type DynamicZoneLeaderName.
const DynamicZoneLeaderName_TypeID = 0xc33264acc8d4e592

func NewDynamicZoneLeaderName(s *capnp.Segment) (DynamicZoneLeaderName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneLeaderName(st), err
}

func NewRootDynamicZoneLeaderName(s *capnp.Segment) (DynamicZoneLeaderName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneLeaderName(st), err
}

func ReadRootDynamicZoneLeaderName(msg *capnp.Message) (DynamicZoneLeaderName, error) {
	root, err := msg.Root()
	return DynamicZoneLeaderName(root.Struct()), err
}

func (s DynamicZoneLeaderName) String() string {
	str, _ := text.Marshal(0xc33264acc8d4e592, capnp.Struct(s))
	return str
}

func (s DynamicZoneLeaderName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneLeaderName) DecodeFromPtr(p capnp.Ptr) DynamicZoneLeaderName {
	return DynamicZoneLeaderName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneLeaderName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneLeaderName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneLeaderName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneLeaderName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneLeaderName) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneLeaderName) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneLeaderName) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneLeaderName) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneLeaderName) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneLeaderName) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DynamicZoneLeaderName_List is a list of DynamicZoneLeaderName.
type DynamicZoneLeaderName_List = capnp.StructList[DynamicZoneLeaderName]

// NewDynamicZoneLeaderName creates a new list of DynamicZoneLeaderName.
func NewDynamicZoneLeaderName_List(s *capnp.Segment, sz int32) (DynamicZoneLeaderName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneLeaderName](l), err
}

// DynamicZoneLeaderName_Future is a wrapper for a DynamicZoneLeaderName promised by a client call.
type DynamicZoneLeaderName_Future struct{ *capnp.Future }

func (f DynamicZoneLeaderName_Future) Struct() (DynamicZoneLeaderName, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneLeaderName(p.Struct()), err
}

type ExpeditionCommand capnp.Struct

// ExpeditionCommand_TypeID is the unique identifier for the type ExpeditionCommand.
const ExpeditionCommand_TypeID = 0xf0eb3ae18581b267

func NewExpeditionCommand(s *capnp.Segment) (ExpeditionCommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExpeditionCommand(st), err
}

func NewRootExpeditionCommand(s *capnp.Segment) (ExpeditionCommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExpeditionCommand(st), err
}

func ReadRootExpeditionCommand(msg *capnp.Message) (ExpeditionCommand, error) {
	root, err := msg.Root()
	return ExpeditionCommand(root.Struct()), err
}

func (s ExpeditionCommand) String() string {
	str, _ := text.Marshal(0xf0eb3ae18581b267, capnp.Struct(s))
	return str
}

func (s ExpeditionCommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionCommand) DecodeFromPtr(p capnp.Ptr) ExpeditionCommand {
	return ExpeditionCommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionCommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionCommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionCommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionCommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionCommand) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionCommand) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionCommand) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionCommand) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ExpeditionCommand_List is a list of ExpeditionCommand.
type ExpeditionCommand_List = capnp.StructList[ExpeditionCommand]

// NewExpeditionCommand creates a new list of ExpeditionCommand.
func NewExpeditionCommand_List(s *capnp.Segment, sz int32) (ExpeditionCommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionCommand](l), err
}

// ExpeditionCommand_Future is a wrapper for a ExpeditionCommand promised by a client call.
type ExpeditionCommand_Future struct{ *capnp.Future }

func (f ExpeditionCommand_Future) Struct() (ExpeditionCommand, error) {
	p, err := f.Future.Ptr()
	return ExpeditionCommand(p.Struct()), err
}

type ExpeditionCommandSwap capnp.Struct

// ExpeditionCommandSwap_TypeID is the unique identifier for the type ExpeditionCommandSwap.
const ExpeditionCommandSwap_TypeID = 0xc2320321f84d3e6b

func NewExpeditionCommandSwap(s *capnp.Segment) (ExpeditionCommandSwap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExpeditionCommandSwap(st), err
}

func NewRootExpeditionCommandSwap(s *capnp.Segment) (ExpeditionCommandSwap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExpeditionCommandSwap(st), err
}

func ReadRootExpeditionCommandSwap(msg *capnp.Message) (ExpeditionCommandSwap, error) {
	root, err := msg.Root()
	return ExpeditionCommandSwap(root.Struct()), err
}

func (s ExpeditionCommandSwap) String() string {
	str, _ := text.Marshal(0xc2320321f84d3e6b, capnp.Struct(s))
	return str
}

func (s ExpeditionCommandSwap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionCommandSwap) DecodeFromPtr(p capnp.Ptr) ExpeditionCommandSwap {
	return ExpeditionCommandSwap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionCommandSwap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionCommandSwap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionCommandSwap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionCommandSwap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionCommandSwap) AddPlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionCommandSwap) HasAddPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionCommandSwap) AddPlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionCommandSwap) SetAddPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionCommandSwap) RemPlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionCommandSwap) HasRemPlayerName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionCommandSwap) RemPlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionCommandSwap) SetRemPlayerName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExpeditionCommandSwap_List is a list of ExpeditionCommandSwap.
type ExpeditionCommandSwap_List = capnp.StructList[ExpeditionCommandSwap]

// NewExpeditionCommandSwap creates a new list of ExpeditionCommandSwap.
func NewExpeditionCommandSwap_List(s *capnp.Segment, sz int32) (ExpeditionCommandSwap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ExpeditionCommandSwap](l), err
}

// ExpeditionCommandSwap_Future is a wrapper for a ExpeditionCommandSwap promised by a client call.
type ExpeditionCommandSwap_Future struct{ *capnp.Future }

func (f ExpeditionCommandSwap_Future) Struct() (ExpeditionCommandSwap, error) {
	p, err := f.Future.Ptr()
	return ExpeditionCommandSwap(p.Struct()), err
}

type ExpeditionExpireWarning capnp.Struct

// ExpeditionExpireWarning_TypeID is the unique identifier for the type ExpeditionExpireWarning.
const ExpeditionExpireWarning_TypeID = 0x9c02cc7a71f37f31

func NewExpeditionExpireWarning(s *capnp.Segment) (ExpeditionExpireWarning, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpeditionExpireWarning(st), err
}

func NewRootExpeditionExpireWarning(s *capnp.Segment) (ExpeditionExpireWarning, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpeditionExpireWarning(st), err
}

func ReadRootExpeditionExpireWarning(msg *capnp.Message) (ExpeditionExpireWarning, error) {
	root, err := msg.Root()
	return ExpeditionExpireWarning(root.Struct()), err
}

func (s ExpeditionExpireWarning) String() string {
	str, _ := text.Marshal(0x9c02cc7a71f37f31, capnp.Struct(s))
	return str
}

func (s ExpeditionExpireWarning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionExpireWarning) DecodeFromPtr(p capnp.Ptr) ExpeditionExpireWarning {
	return ExpeditionExpireWarning(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionExpireWarning) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionExpireWarning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionExpireWarning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionExpireWarning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionExpireWarning) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionExpireWarning) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionExpireWarning) MinutesRemaining() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionExpireWarning) SetMinutesRemaining(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ExpeditionExpireWarning_List is a list of ExpeditionExpireWarning.
type ExpeditionExpireWarning_List = capnp.StructList[ExpeditionExpireWarning]

// NewExpeditionExpireWarning creates a new list of ExpeditionExpireWarning.
func NewExpeditionExpireWarning_List(s *capnp.Segment, sz int32) (ExpeditionExpireWarning_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExpeditionExpireWarning](l), err
}

// ExpeditionExpireWarning_Future is a wrapper for a ExpeditionExpireWarning promised by a client call.
type ExpeditionExpireWarning_Future struct{ *capnp.Future }

func (f ExpeditionExpireWarning_Future) Struct() (ExpeditionExpireWarning, error) {
	p, err := f.Future.Ptr()
	return ExpeditionExpireWarning(p.Struct()), err
}

type DynamicZoneCompassEntry capnp.Struct

// DynamicZoneCompassEntry_TypeID is the unique identifier for the type DynamicZoneCompassEntry.
const DynamicZoneCompassEntry_TypeID = 0x837843dd5048c6d0

func NewDynamicZoneCompassEntry(s *capnp.Segment) (DynamicZoneCompassEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return DynamicZoneCompassEntry(st), err
}

func NewRootDynamicZoneCompassEntry(s *capnp.Segment) (DynamicZoneCompassEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return DynamicZoneCompassEntry(st), err
}

func ReadRootDynamicZoneCompassEntry(msg *capnp.Message) (DynamicZoneCompassEntry, error) {
	root, err := msg.Root()
	return DynamicZoneCompassEntry(root.Struct()), err
}

func (s DynamicZoneCompassEntry) String() string {
	str, _ := text.Marshal(0x837843dd5048c6d0, capnp.Struct(s))
	return str
}

func (s DynamicZoneCompassEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneCompassEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneCompassEntry {
	return DynamicZoneCompassEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneCompassEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneCompassEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneCompassEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneCompassEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneCompassEntry) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneCompassEntry) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneCompassEntry) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneCompassEntry) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneCompassEntry) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneCompassEntry) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneCompassEntry) DzSwitchId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s DynamicZoneCompassEntry) SetDzSwitchId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s DynamicZoneCompassEntry) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s DynamicZoneCompassEntry) SetY(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s DynamicZoneCompassEntry) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s DynamicZoneCompassEntry) SetX(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s DynamicZoneCompassEntry) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s DynamicZoneCompassEntry) SetZ(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

// DynamicZoneCompassEntry_List is a list of DynamicZoneCompassEntry.
type DynamicZoneCompassEntry_List = capnp.StructList[DynamicZoneCompassEntry]

// NewDynamicZoneCompassEntry creates a new list of DynamicZoneCompassEntry.
func NewDynamicZoneCompassEntry_List(s *capnp.Segment, sz int32) (DynamicZoneCompassEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[DynamicZoneCompassEntry](l), err
}

// DynamicZoneCompassEntry_Future is a wrapper for a DynamicZoneCompassEntry promised by a client call.
type DynamicZoneCompassEntry_Future struct{ *capnp.Future }

func (f DynamicZoneCompassEntry_Future) Struct() (DynamicZoneCompassEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneCompassEntry(p.Struct()), err
}

type DynamicZoneCompass capnp.Struct

// DynamicZoneCompass_TypeID is the unique identifier for the type DynamicZoneCompass.
const DynamicZoneCompass_TypeID = 0xb7b4735fc72e17de

func NewDynamicZoneCompass(s *capnp.Segment) (DynamicZoneCompass, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneCompass(st), err
}

func NewRootDynamicZoneCompass(s *capnp.Segment) (DynamicZoneCompass, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneCompass(st), err
}

func ReadRootDynamicZoneCompass(msg *capnp.Message) (DynamicZoneCompass, error) {
	root, err := msg.Root()
	return DynamicZoneCompass(root.Struct()), err
}

func (s DynamicZoneCompass) String() string {
	str, _ := text.Marshal(0xb7b4735fc72e17de, capnp.Struct(s))
	return str
}

func (s DynamicZoneCompass) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneCompass) DecodeFromPtr(p capnp.Ptr) DynamicZoneCompass {
	return DynamicZoneCompass(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneCompass) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneCompass) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneCompass) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneCompass) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneCompass) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneCompass) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneCompass) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneCompass) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneCompass) Entries() (DynamicZoneCompassEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneCompassEntry_List(p.List()), err
}

func (s DynamicZoneCompass) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneCompass) SetEntries(v DynamicZoneCompassEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated DynamicZoneCompassEntry_List, preferring placement in s's segment.
func (s DynamicZoneCompass) NewEntries(n int32) (DynamicZoneCompassEntry_List, error) {
	l, err := NewDynamicZoneCompassEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneCompassEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneCompass_List is a list of DynamicZoneCompass.
type DynamicZoneCompass_List = capnp.StructList[DynamicZoneCompass]

// NewDynamicZoneCompass creates a new list of DynamicZoneCompass.
func NewDynamicZoneCompass_List(s *capnp.Segment, sz int32) (DynamicZoneCompass_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneCompass](l), err
}

// DynamicZoneCompass_Future is a wrapper for a DynamicZoneCompass promised by a client call.
type DynamicZoneCompass_Future struct{ *capnp.Future }

func (f DynamicZoneCompass_Future) Struct() (DynamicZoneCompass, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneCompass(p.Struct()), err
}

type DynamicZoneChooseZoneEntry capnp.Struct

// DynamicZoneChooseZoneEntry_TypeID is the unique identifier for the type DynamicZoneChooseZoneEntry.
const DynamicZoneChooseZoneEntry_TypeID = 0xe8b71523b2ef78ed

func NewDynamicZoneChooseZoneEntry(s *capnp.Segment) (DynamicZoneChooseZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneChooseZoneEntry(st), err
}

func NewRootDynamicZoneChooseZoneEntry(s *capnp.Segment) (DynamicZoneChooseZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneChooseZoneEntry(st), err
}

func ReadRootDynamicZoneChooseZoneEntry(msg *capnp.Message) (DynamicZoneChooseZoneEntry, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZoneEntry(root.Struct()), err
}

func (s DynamicZoneChooseZoneEntry) String() string {
	str, _ := text.Marshal(0xe8b71523b2ef78ed, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZoneEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZoneEntry {
	return DynamicZoneChooseZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZoneEntry) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZoneEntry) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZoneEntry) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneChooseZoneEntry) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneChooseZoneEntry) HasDescription() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneChooseZoneEntry) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneChooseZoneEntry) SetDescription(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneChooseZoneEntry) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DynamicZoneChooseZoneEntry) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DynamicZoneChooseZoneEntry) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DynamicZoneChooseZoneEntry) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// DynamicZoneChooseZoneEntry_List is a list of DynamicZoneChooseZoneEntry.
type DynamicZoneChooseZoneEntry_List = capnp.StructList[DynamicZoneChooseZoneEntry]

// NewDynamicZoneChooseZoneEntry creates a new list of DynamicZoneChooseZoneEntry.
func NewDynamicZoneChooseZoneEntry_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[DynamicZoneChooseZoneEntry](l), err
}

// DynamicZoneChooseZoneEntry_Future is a wrapper for a DynamicZoneChooseZoneEntry promised by a client call.
type DynamicZoneChooseZoneEntry_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZoneEntry_Future) Struct() (DynamicZoneChooseZoneEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZoneEntry(p.Struct()), err
}

type DynamicZoneChooseZone capnp.Struct

// DynamicZoneChooseZone_TypeID is the unique identifier for the type DynamicZoneChooseZone.
const DynamicZoneChooseZone_TypeID = 0xbe9f101bff0dabed

func NewDynamicZoneChooseZone(s *capnp.Segment) (DynamicZoneChooseZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneChooseZone(st), err
}

func NewRootDynamicZoneChooseZone(s *capnp.Segment) (DynamicZoneChooseZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneChooseZone(st), err
}

func ReadRootDynamicZoneChooseZone(msg *capnp.Message) (DynamicZoneChooseZone, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZone(root.Struct()), err
}

func (s DynamicZoneChooseZone) String() string {
	str, _ := text.Marshal(0xbe9f101bff0dabed, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZone) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZone {
	return DynamicZoneChooseZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZone) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZone) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZone) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZone) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZone) Choices() (DynamicZoneChooseZoneEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneChooseZoneEntry_List(p.List()), err
}

func (s DynamicZoneChooseZone) HasChoices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneChooseZone) SetChoices(v DynamicZoneChooseZoneEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChoices sets the choices field to a newly
// allocated DynamicZoneChooseZoneEntry_List, preferring placement in s's segment.
func (s DynamicZoneChooseZone) NewChoices(n int32) (DynamicZoneChooseZoneEntry_List, error) {
	l, err := NewDynamicZoneChooseZoneEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneChooseZoneEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneChooseZone_List is a list of DynamicZoneChooseZone.
type DynamicZoneChooseZone_List = capnp.StructList[DynamicZoneChooseZone]

// NewDynamicZoneChooseZone creates a new list of DynamicZoneChooseZone.
func NewDynamicZoneChooseZone_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneChooseZone](l), err
}

// DynamicZoneChooseZone_Future is a wrapper for a DynamicZoneChooseZone promised by a client call.
type DynamicZoneChooseZone_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZone_Future) Struct() (DynamicZoneChooseZone, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZone(p.Struct()), err
}

type DynamicZoneChooseZoneReply capnp.Struct

// DynamicZoneChooseZoneReply_TypeID is the unique identifier for the type DynamicZoneChooseZoneReply.
const DynamicZoneChooseZoneReply_TypeID = 0x806a62bc2851fc01

func NewDynamicZoneChooseZoneReply(s *capnp.Segment) (DynamicZoneChooseZoneReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DynamicZoneChooseZoneReply(st), err
}

func NewRootDynamicZoneChooseZoneReply(s *capnp.Segment) (DynamicZoneChooseZoneReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DynamicZoneChooseZoneReply(st), err
}

func ReadRootDynamicZoneChooseZoneReply(msg *capnp.Message) (DynamicZoneChooseZoneReply, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZoneReply(root.Struct()), err
}

func (s DynamicZoneChooseZoneReply) String() string {
	str, _ := text.Marshal(0x806a62bc2851fc01, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZoneReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZoneReply) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZoneReply {
	return DynamicZoneChooseZoneReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZoneReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZoneReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZoneReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZoneReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZoneReply) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZoneReply) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZoneReply) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZoneReply) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZoneReply) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneChooseZoneReply) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// DynamicZoneChooseZoneReply_List is a list of DynamicZoneChooseZoneReply.
type DynamicZoneChooseZoneReply_List = capnp.StructList[DynamicZoneChooseZoneReply]

// NewDynamicZoneChooseZoneReply creates a new list of DynamicZoneChooseZoneReply.
func NewDynamicZoneChooseZoneReply_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZoneReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[DynamicZoneChooseZoneReply](l), err
}

// DynamicZoneChooseZoneReply_Future is a wrapper for a DynamicZoneChooseZoneReply promised by a client call.
type DynamicZoneChooseZoneReply_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZoneReply_Future) Struct() (DynamicZoneChooseZoneReply, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZoneReply(p.Struct()), err
}

type LFGuildSearchPlayer capnp.Struct

// LFGuildSearchPlayer_TypeID is the unique identifier for the type LFGuildSearchPlayer.
const LFGuildSearchPlayer_TypeID = 0x8a1df08ac17221fd

func NewLFGuildSearchPlayer(s *capnp.Segment) (LFGuildSearchPlayer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchPlayer(st), err
}

func NewRootLFGuildSearchPlayer(s *capnp.Segment) (LFGuildSearchPlayer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchPlayer(st), err
}

func ReadRootLFGuildSearchPlayer(msg *capnp.Message) (LFGuildSearchPlayer, error) {
	root, err := msg.Root()
	return LFGuildSearchPlayer(root.Struct()), err
}

func (s LFGuildSearchPlayer) String() string {
	str, _ := text.Marshal(0x8a1df08ac17221fd, capnp.Struct(s))
	return str
}

func (s LFGuildSearchPlayer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildSearchPlayer) DecodeFromPtr(p capnp.Ptr) LFGuildSearchPlayer {
	return LFGuildSearchPlayer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildSearchPlayer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildSearchPlayer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildSearchPlayer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildSearchPlayer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildSearchPlayer) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildSearchPlayer) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildSearchPlayer) FromLevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildSearchPlayer) SetFromLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildSearchPlayer) ToLevel() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildSearchPlayer) SetToLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildSearchPlayer) MinAa() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildSearchPlayer) SetMinAa(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildSearchPlayer) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildSearchPlayer) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LFGuildSearchPlayer) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LFGuildSearchPlayer) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// LFGuildSearchPlayer_List is a list of LFGuildSearchPlayer.
type LFGuildSearchPlayer_List = capnp.StructList[LFGuildSearchPlayer]

// NewLFGuildSearchPlayer creates a new list of LFGuildSearchPlayer.
func NewLFGuildSearchPlayer_List(s *capnp.Segment, sz int32) (LFGuildSearchPlayer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LFGuildSearchPlayer](l), err
}

// LFGuildSearchPlayer_Future is a wrapper for a LFGuildSearchPlayer promised by a client call.
type LFGuildSearchPlayer_Future struct{ *capnp.Future }

func (f LFGuildSearchPlayer_Future) Struct() (LFGuildSearchPlayer, error) {
	p, err := f.Future.Ptr()
	return LFGuildSearchPlayer(p.Struct()), err
}

type LFGuildSearchGuild capnp.Struct

// LFGuildSearchGuild_TypeID is the unique identifier for the type LFGuildSearchGuild.
const LFGuildSearchGuild_TypeID = 0x86b68baf94f42b99

func NewLFGuildSearchGuild(s *capnp.Segment) (LFGuildSearchGuild, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchGuild(st), err
}

func NewRootLFGuildSearchGuild(s *capnp.Segment) (LFGuildSearchGuild, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchGuild(st), err
}

func ReadRootLFGuildSearchGuild(msg *capnp.Message) (LFGuildSearchGuild, error) {
	root, err := msg.Root()
	return LFGuildSearchGuild(root.Struct()), err
}

func (s LFGuildSearchGuild) String() string {
	str, _ := text.Marshal(0x86b68baf94f42b99, capnp.Struct(s))
	return str
}

func (s LFGuildSearchGuild) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildSearchGuild) DecodeFromPtr(p capnp.Ptr) LFGuildSearchGuild {
	return LFGuildSearchGuild(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildSearchGuild) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildSearchGuild) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildSearchGuild) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildSearchGuild) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildSearchGuild) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildSearchGuild) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildSearchGuild) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildSearchGuild) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildSearchGuild) AaPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildSearchGuild) SetAaPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildSearchGuild) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildSearchGuild) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildSearchGuild) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildSearchGuild) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// LFGuildSearchGuild_List is a list of LFGuildSearchGuild.
type LFGuildSearchGuild_List = capnp.StructList[LFGuildSearchGuild]

// NewLFGuildSearchGuild creates a new list of LFGuildSearchGuild.
func NewLFGuildSearchGuild_List(s *capnp.Segment, sz int32) (LFGuildSearchGuild_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LFGuildSearchGuild](l), err
}

// LFGuildSearchGuild_Future is a wrapper for a LFGuildSearchGuild promised by a client call.
type LFGuildSearchGuild_Future struct{ *capnp.Future }

func (f LFGuildSearchGuild_Future) Struct() (LFGuildSearchGuild, error) {
	p, err := f.Future.Ptr()
	return LFGuildSearchGuild(p.Struct()), err
}

type LFGuildPlayertoggle capnp.Struct

// LFGuildPlayertoggle_TypeID is the unique identifier for the type LFGuildPlayertoggle.
const LFGuildPlayertoggle_TypeID = 0xba7cb4dbd62489d5

func NewLFGuildPlayertoggle(s *capnp.Segment) (LFGuildPlayertoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return LFGuildPlayertoggle(st), err
}

func NewRootLFGuildPlayertoggle(s *capnp.Segment) (LFGuildPlayertoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return LFGuildPlayertoggle(st), err
}

func ReadRootLFGuildPlayertoggle(msg *capnp.Message) (LFGuildPlayertoggle, error) {
	root, err := msg.Root()
	return LFGuildPlayertoggle(root.Struct()), err
}

func (s LFGuildPlayertoggle) String() string {
	str, _ := text.Marshal(0xba7cb4dbd62489d5, capnp.Struct(s))
	return str
}

func (s LFGuildPlayertoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildPlayertoggle) DecodeFromPtr(p capnp.Ptr) LFGuildPlayertoggle {
	return LFGuildPlayertoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildPlayertoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildPlayertoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildPlayertoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildPlayertoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildPlayertoggle) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildPlayertoggle) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildPlayertoggle) Comment() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFGuildPlayertoggle) HasComment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFGuildPlayertoggle) CommentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFGuildPlayertoggle) SetComment(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LFGuildPlayertoggle) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildPlayertoggle) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildPlayertoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildPlayertoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildPlayertoggle) Expires() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildPlayertoggle) SetExpires(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LFGuildPlayertoggle_List is a list of LFGuildPlayertoggle.
type LFGuildPlayertoggle_List = capnp.StructList[LFGuildPlayertoggle]

// NewLFGuildPlayertoggle creates a new list of LFGuildPlayertoggle.
func NewLFGuildPlayertoggle_List(s *capnp.Segment, sz int32) (LFGuildPlayertoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[LFGuildPlayertoggle](l), err
}

// LFGuildPlayertoggle_Future is a wrapper for a LFGuildPlayertoggle promised by a client call.
type LFGuildPlayertoggle_Future struct{ *capnp.Future }

func (f LFGuildPlayertoggle_Future) Struct() (LFGuildPlayertoggle, error) {
	p, err := f.Future.Ptr()
	return LFGuildPlayertoggle(p.Struct()), err
}

type LFGuildGuildtoggle capnp.Struct

// LFGuildGuildtoggle_TypeID is the unique identifier for the type LFGuildGuildtoggle.
const LFGuildGuildtoggle_TypeID = 0xdb56b83f3063105d

func NewLFGuildGuildtoggle(s *capnp.Segment) (LFGuildGuildtoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return LFGuildGuildtoggle(st), err
}

func NewRootLFGuildGuildtoggle(s *capnp.Segment) (LFGuildGuildtoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return LFGuildGuildtoggle(st), err
}

func ReadRootLFGuildGuildtoggle(msg *capnp.Message) (LFGuildGuildtoggle, error) {
	root, err := msg.Root()
	return LFGuildGuildtoggle(root.Struct()), err
}

func (s LFGuildGuildtoggle) String() string {
	str, _ := text.Marshal(0xdb56b83f3063105d, capnp.Struct(s))
	return str
}

func (s LFGuildGuildtoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildGuildtoggle) DecodeFromPtr(p capnp.Ptr) LFGuildGuildtoggle {
	return LFGuildGuildtoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildGuildtoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildGuildtoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildGuildtoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildGuildtoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildGuildtoggle) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildGuildtoggle) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildGuildtoggle) Comment() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFGuildGuildtoggle) HasComment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFGuildGuildtoggle) CommentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFGuildGuildtoggle) SetComment(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LFGuildGuildtoggle) FromLevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildGuildtoggle) SetFromLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildGuildtoggle) ToLevel() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildGuildtoggle) SetToLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildGuildtoggle) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildGuildtoggle) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildGuildtoggle) AaCount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildGuildtoggle) SetAaCount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LFGuildGuildtoggle) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LFGuildGuildtoggle) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s LFGuildGuildtoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s LFGuildGuildtoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s LFGuildGuildtoggle) Expires() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s LFGuildGuildtoggle) SetExpires(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s LFGuildGuildtoggle) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s LFGuildGuildtoggle) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LFGuildGuildtoggle) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s LFGuildGuildtoggle) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// LFGuildGuildtoggle_List is a list of LFGuildGuildtoggle.
type LFGuildGuildtoggle_List = capnp.StructList[LFGuildGuildtoggle]

// NewLFGuildGuildtoggle creates a new list of LFGuildGuildtoggle.
func NewLFGuildGuildtoggle_List(s *capnp.Segment, sz int32) (LFGuildGuildtoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[LFGuildGuildtoggle](l), err
}

// LFGuildGuildtoggle_Future is a wrapper for a LFGuildGuildtoggle promised by a client call.
type LFGuildGuildtoggle_Future struct{ *capnp.Future }

func (f LFGuildGuildtoggle_Future) Struct() (LFGuildGuildtoggle, error) {
	p, err := f.Future.Ptr()
	return LFGuildGuildtoggle(p.Struct()), err
}

type SayLinkBodyFrame capnp.Struct

// SayLinkBodyFrame_TypeID is the unique identifier for the type SayLinkBodyFrame.
const SayLinkBodyFrame_TypeID = 0x853ff72f8a1e3384

func NewSayLinkBodyFrame(s *capnp.Segment) (SayLinkBodyFrame, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11})
	return SayLinkBodyFrame(st), err
}

func NewRootSayLinkBodyFrame(s *capnp.Segment) (SayLinkBodyFrame, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11})
	return SayLinkBodyFrame(st), err
}

func ReadRootSayLinkBodyFrame(msg *capnp.Message) (SayLinkBodyFrame, error) {
	root, err := msg.Root()
	return SayLinkBodyFrame(root.Struct()), err
}

func (s SayLinkBodyFrame) String() string {
	str, _ := text.Marshal(0x853ff72f8a1e3384, capnp.Struct(s))
	return str
}

func (s SayLinkBodyFrame) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SayLinkBodyFrame) DecodeFromPtr(p capnp.Ptr) SayLinkBodyFrame {
	return SayLinkBodyFrame(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SayLinkBodyFrame) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SayLinkBodyFrame) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SayLinkBodyFrame) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SayLinkBodyFrame) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SayLinkBodyFrame) ActionId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasActionId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SayLinkBodyFrame) ActionIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetActionId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SayLinkBodyFrame) ItemId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasItemId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SayLinkBodyFrame) ItemIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetItemId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SayLinkBodyFrame) Augment1() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment1() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SayLinkBodyFrame) Augment1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment1(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s SayLinkBodyFrame) Augment2() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment2() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SayLinkBodyFrame) Augment2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment2(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s SayLinkBodyFrame) Augment3() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment3() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SayLinkBodyFrame) Augment3Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment3(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s SayLinkBodyFrame) Augment4() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment4() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SayLinkBodyFrame) Augment4Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment4(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s SayLinkBodyFrame) Augment5() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment5() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SayLinkBodyFrame) Augment5Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment5(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

func (s SayLinkBodyFrame) IsEvolving() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasIsEvolving() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SayLinkBodyFrame) IsEvolvingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetIsEvolving(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s SayLinkBodyFrame) EvolveGroup() (string, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasEvolveGroup() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SayLinkBodyFrame) EvolveGroupBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetEvolveGroup(v string) error {
	return capnp.Struct(s).SetText(8, v)
}

func (s SayLinkBodyFrame) EvolveLevel() (string, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasEvolveLevel() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SayLinkBodyFrame) EvolveLevelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetEvolveLevel(v string) error {
	return capnp.Struct(s).SetText(9, v)
}

func (s SayLinkBodyFrame) Hash() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasHash() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SayLinkBodyFrame) HashBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetHash(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

// SayLinkBodyFrame_List is a list of SayLinkBodyFrame.
type SayLinkBodyFrame_List = capnp.StructList[SayLinkBodyFrame]

// NewSayLinkBodyFrame creates a new list of SayLinkBodyFrame.
func NewSayLinkBodyFrame_List(s *capnp.Segment, sz int32) (SayLinkBodyFrame_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11}, sz)
	return capnp.StructList[SayLinkBodyFrame](l), err
}

// SayLinkBodyFrame_Future is a wrapper for a SayLinkBodyFrame promised by a client call.
type SayLinkBodyFrame_Future struct{ *capnp.Future }

func (f SayLinkBodyFrame_Future) Struct() (SayLinkBodyFrame, error) {
	p, err := f.Future.Ptr()
	return SayLinkBodyFrame(p.Struct()), err
}

type WebLogin capnp.Struct

// WebLogin_TypeID is the unique identifier for the type WebLogin.
const WebLogin_TypeID = 0xb80f94bef16dea20

func NewWebLogin(s *capnp.Segment) (WebLogin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebLogin(st), err
}

func NewRootWebLogin(s *capnp.Segment) (WebLogin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebLogin(st), err
}

func ReadRootWebLogin(msg *capnp.Message) (WebLogin, error) {
	root, err := msg.Root()
	return WebLogin(root.Struct()), err
}

func (s WebLogin) String() string {
	str, _ := text.Marshal(0xb80f94bef16dea20, capnp.Struct(s))
	return str
}

func (s WebLogin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLogin) DecodeFromPtr(p capnp.Ptr) WebLogin {
	return WebLogin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLogin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLogin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLogin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLogin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLogin) Username() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLogin) HasUsername() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLogin) UsernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLogin) SetUsername(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLogin) Password() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebLogin) HasPassword() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLogin) PasswordBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebLogin) SetPassword(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// WebLogin_List is a list of WebLogin.
type WebLogin_List = capnp.StructList[WebLogin]

// NewWebLogin creates a new list of WebLogin.
func NewWebLogin_List(s *capnp.Segment, sz int32) (WebLogin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebLogin](l), err
}

// WebLogin_Future is a wrapper for a WebLogin promised by a client call.
type WebLogin_Future struct{ *capnp.Future }

func (f WebLogin_Future) Struct() (WebLogin, error) {
	p, err := f.Future.Ptr()
	return WebLogin(p.Struct()), err
}

type WebLoginServerRequest capnp.Struct

// WebLoginServerRequest_TypeID is the unique identifier for the type WebLoginServerRequest.
const WebLoginServerRequest_TypeID = 0xf08bcfb76fcf5061

func NewWebLoginServerRequest(s *capnp.Segment) (WebLoginServerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebLoginServerRequest(st), err
}

func NewRootWebLoginServerRequest(s *capnp.Segment) (WebLoginServerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebLoginServerRequest(st), err
}

func ReadRootWebLoginServerRequest(msg *capnp.Message) (WebLoginServerRequest, error) {
	root, err := msg.Root()
	return WebLoginServerRequest(root.Struct()), err
}

func (s WebLoginServerRequest) String() string {
	str, _ := text.Marshal(0xf08bcfb76fcf5061, capnp.Struct(s))
	return str
}

func (s WebLoginServerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginServerRequest) DecodeFromPtr(p capnp.Ptr) WebLoginServerRequest {
	return WebLoginServerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginServerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginServerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginServerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginServerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginServerRequest) Sequence() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginServerRequest) SetSequence(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// WebLoginServerRequest_List is a list of WebLoginServerRequest.
type WebLoginServerRequest_List = capnp.StructList[WebLoginServerRequest]

// NewWebLoginServerRequest creates a new list of WebLoginServerRequest.
func NewWebLoginServerRequest_List(s *capnp.Segment, sz int32) (WebLoginServerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WebLoginServerRequest](l), err
}

// WebLoginServerRequest_Future is a wrapper for a WebLoginServerRequest promised by a client call.
type WebLoginServerRequest_Future struct{ *capnp.Future }

func (f WebLoginServerRequest_Future) Struct() (WebLoginServerRequest, error) {
	p, err := f.Future.Ptr()
	return WebLoginServerRequest(p.Struct()), err
}

type WebLoginReply capnp.Struct

// WebLoginReply_TypeID is the unique identifier for the type WebLoginReply.
const WebLoginReply_TypeID = 0xef71c6ada87eac4c

func NewWebLoginReply(s *capnp.Segment) (WebLoginReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebLoginReply(st), err
}

func NewRootWebLoginReply(s *capnp.Segment) (WebLoginReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebLoginReply(st), err
}

func ReadRootWebLoginReply(msg *capnp.Message) (WebLoginReply, error) {
	root, err := msg.Root()
	return WebLoginReply(root.Struct()), err
}

func (s WebLoginReply) String() string {
	str, _ := text.Marshal(0xef71c6ada87eac4c, capnp.Struct(s))
	return str
}

func (s WebLoginReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginReply) DecodeFromPtr(p capnp.Ptr) WebLoginReply {
	return WebLoginReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginReply) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLoginReply) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginReply) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLoginReply) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLoginReply) ErrorStrId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginReply) SetErrorStrId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginReply) FailedAttempts() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebLoginReply) SetFailedAttempts(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WebLoginReply) Lsid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WebLoginReply) SetLsid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WebLoginReply) Success() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Bool(p.Struct()), err
}

func (s WebLoginReply) HasSuccess() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLoginReply) SetSuccess(v Bool) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSuccess sets the success field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebLoginReply) NewSuccess() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebLoginReply) ShowPlayerCount() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Bool(p.Struct()), err
}

func (s WebLoginReply) HasShowPlayerCount() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebLoginReply) SetShowPlayerCount(v Bool) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewShowPlayerCount sets the showPlayerCount field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebLoginReply) NewShowPlayerCount() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebLoginReply_List is a list of WebLoginReply.
type WebLoginReply_List = capnp.StructList[WebLoginReply]

// NewWebLoginReply creates a new list of WebLoginReply.
func NewWebLoginReply_List(s *capnp.Segment, sz int32) (WebLoginReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[WebLoginReply](l), err
}

// WebLoginReply_Future is a wrapper for a WebLoginReply promised by a client call.
type WebLoginReply_Future struct{ *capnp.Future }

func (f WebLoginReply_Future) Struct() (WebLoginReply, error) {
	p, err := f.Future.Ptr()
	return WebLoginReply(p.Struct()), err
}
func (p WebLoginReply_Future) Success() Bool_Future {
	return Bool_Future{Future: p.Future.Field(1, nil)}
}
func (p WebLoginReply_Future) ShowPlayerCount() Bool_Future {
	return Bool_Future{Future: p.Future.Field(2, nil)}
}

type WebLoginWorldServer capnp.Struct

// WebLoginWorldServer_TypeID is the unique identifier for the type WebLoginWorldServer.
const WebLoginWorldServer_TypeID = 0xc5eb62ff00b0072f

func NewWebLoginWorldServer(s *capnp.Segment) (WebLoginWorldServer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return WebLoginWorldServer(st), err
}

func NewRootWebLoginWorldServer(s *capnp.Segment) (WebLoginWorldServer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return WebLoginWorldServer(st), err
}

func ReadRootWebLoginWorldServer(msg *capnp.Message) (WebLoginWorldServer, error) {
	root, err := msg.Root()
	return WebLoginWorldServer(root.Struct()), err
}

func (s WebLoginWorldServer) String() string {
	str, _ := text.Marshal(0xc5eb62ff00b0072f, capnp.Struct(s))
	return str
}

func (s WebLoginWorldServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginWorldServer) DecodeFromPtr(p capnp.Ptr) WebLoginWorldServer {
	return WebLoginWorldServer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginWorldServer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginWorldServer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginWorldServer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginWorldServer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginWorldServer) Buffer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasBuffer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginWorldServer) BufferBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetBuffer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLoginWorldServer) Ip() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasIp() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLoginWorldServer) IpBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetIp(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebLoginWorldServer) LongName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasLongName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebLoginWorldServer) LongNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetLongName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s WebLoginWorldServer) CountryCode() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasCountryCode() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebLoginWorldServer) CountryCodeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetCountryCode(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s WebLoginWorldServer) LanguageCode() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasLanguageCode() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s WebLoginWorldServer) LanguageCodeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetLanguageCode(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s WebLoginWorldServer) ServerType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginWorldServer) SetServerType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginWorldServer) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebLoginWorldServer) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WebLoginWorldServer) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WebLoginWorldServer) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WebLoginWorldServer) PlayersOnline() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WebLoginWorldServer) SetPlayersOnline(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// WebLoginWorldServer_List is a list of WebLoginWorldServer.
type WebLoginWorldServer_List = capnp.StructList[WebLoginWorldServer]

// NewWebLoginWorldServer creates a new list of WebLoginWorldServer.
func NewWebLoginWorldServer_List(s *capnp.Segment, sz int32) (WebLoginWorldServer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[WebLoginWorldServer](l), err
}

// WebLoginWorldServer_Future is a wrapper for a WebLoginWorldServer promised by a client call.
type WebLoginWorldServer_Future struct{ *capnp.Future }

func (f WebLoginWorldServer_Future) Struct() (WebLoginWorldServer, error) {
	p, err := f.Future.Ptr()
	return WebLoginWorldServer(p.Struct()), err
}

type WebLoginServerResponse capnp.Struct

// WebLoginServerResponse_TypeID is the unique identifier for the type WebLoginServerResponse.
const WebLoginServerResponse_TypeID = 0xefe5002d4e5acb87

func NewWebLoginServerResponse(s *capnp.Segment) (WebLoginServerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebLoginServerResponse(st), err
}

func NewRootWebLoginServerResponse(s *capnp.Segment) (WebLoginServerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebLoginServerResponse(st), err
}

func ReadRootWebLoginServerResponse(msg *capnp.Message) (WebLoginServerResponse, error) {
	root, err := msg.Root()
	return WebLoginServerResponse(root.Struct()), err
}

func (s WebLoginServerResponse) String() string {
	str, _ := text.Marshal(0xefe5002d4e5acb87, capnp.Struct(s))
	return str
}

func (s WebLoginServerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginServerResponse) DecodeFromPtr(p capnp.Ptr) WebLoginServerResponse {
	return WebLoginServerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginServerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginServerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginServerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginServerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginServerResponse) ServerCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginServerResponse) SetServerCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginServerResponse) Servers() (WebLoginWorldServer_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return WebLoginWorldServer_List(p.List()), err
}

func (s WebLoginServerResponse) HasServers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginServerResponse) SetServers(v WebLoginWorldServer_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewServers sets the servers field to a newly
// allocated WebLoginWorldServer_List, preferring placement in s's segment.
func (s WebLoginServerResponse) NewServers(n int32) (WebLoginWorldServer_List, error) {
	l, err := NewWebLoginWorldServer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebLoginWorldServer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebLoginServerResponse_List is a list of WebLoginServerResponse.
type WebLoginServerResponse_List = capnp.StructList[WebLoginServerResponse]

// NewWebLoginServerResponse creates a new list of WebLoginServerResponse.
func NewWebLoginServerResponse_List(s *capnp.Segment, sz int32) (WebLoginServerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebLoginServerResponse](l), err
}

// WebLoginServerResponse_Future is a wrapper for a WebLoginServerResponse promised by a client call.
type WebLoginServerResponse_Future struct{ *capnp.Future }

func (f WebLoginServerResponse_Future) Struct() (WebLoginServerResponse, error) {
	p, err := f.Future.Ptr()
	return WebLoginServerResponse(p.Struct()), err
}

type WebPlayEverquestRequest capnp.Struct

// WebPlayEverquestRequest_TypeID is the unique identifier for the type WebPlayEverquestRequest.
const WebPlayEverquestRequest_TypeID = 0x9f58a78be70b999b

func NewWebPlayEverquestRequest(s *capnp.Segment) (WebPlayEverquestRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebPlayEverquestRequest(st), err
}

func NewRootWebPlayEverquestRequest(s *capnp.Segment) (WebPlayEverquestRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebPlayEverquestRequest(st), err
}

func ReadRootWebPlayEverquestRequest(msg *capnp.Message) (WebPlayEverquestRequest, error) {
	root, err := msg.Root()
	return WebPlayEverquestRequest(root.Struct()), err
}

func (s WebPlayEverquestRequest) String() string {
	str, _ := text.Marshal(0x9f58a78be70b999b, capnp.Struct(s))
	return str
}

func (s WebPlayEverquestRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebPlayEverquestRequest) DecodeFromPtr(p capnp.Ptr) WebPlayEverquestRequest {
	return WebPlayEverquestRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebPlayEverquestRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebPlayEverquestRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebPlayEverquestRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebPlayEverquestRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebPlayEverquestRequest) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebPlayEverquestRequest) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// WebPlayEverquestRequest_List is a list of WebPlayEverquestRequest.
type WebPlayEverquestRequest_List = capnp.StructList[WebPlayEverquestRequest]

// NewWebPlayEverquestRequest creates a new list of WebPlayEverquestRequest.
func NewWebPlayEverquestRequest_List(s *capnp.Segment, sz int32) (WebPlayEverquestRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WebPlayEverquestRequest](l), err
}

// WebPlayEverquestRequest_Future is a wrapper for a WebPlayEverquestRequest promised by a client call.
type WebPlayEverquestRequest_Future struct{ *capnp.Future }

func (f WebPlayEverquestRequest_Future) Struct() (WebPlayEverquestRequest, error) {
	p, err := f.Future.Ptr()
	return WebPlayEverquestRequest(p.Struct()), err
}

type WebPlayEverquestResponse capnp.Struct

// WebPlayEverquestResponse_TypeID is the unique identifier for the type WebPlayEverquestResponse.
const WebPlayEverquestResponse_TypeID = 0xfa35d04887272ed9

func NewWebPlayEverquestResponse(s *capnp.Segment) (WebPlayEverquestResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebPlayEverquestResponse(st), err
}

func NewRootWebPlayEverquestResponse(s *capnp.Segment) (WebPlayEverquestResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebPlayEverquestResponse(st), err
}

func ReadRootWebPlayEverquestResponse(msg *capnp.Message) (WebPlayEverquestResponse, error) {
	root, err := msg.Root()
	return WebPlayEverquestResponse(root.Struct()), err
}

func (s WebPlayEverquestResponse) String() string {
	str, _ := text.Marshal(0xfa35d04887272ed9, capnp.Struct(s))
	return str
}

func (s WebPlayEverquestResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebPlayEverquestResponse) DecodeFromPtr(p capnp.Ptr) WebPlayEverquestResponse {
	return WebPlayEverquestResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebPlayEverquestResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebPlayEverquestResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebPlayEverquestResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebPlayEverquestResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebPlayEverquestResponse) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebPlayEverquestResponse) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebPlayEverquestResponse) Success() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s WebPlayEverquestResponse) HasSuccess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebPlayEverquestResponse) SetSuccess(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSuccess sets the success field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebPlayEverquestResponse) NewSuccess() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebPlayEverquestResponse) ErrorStrId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebPlayEverquestResponse) SetErrorStrId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// WebPlayEverquestResponse_List is a list of WebPlayEverquestResponse.
type WebPlayEverquestResponse_List = capnp.StructList[WebPlayEverquestResponse]

// NewWebPlayEverquestResponse creates a new list of WebPlayEverquestResponse.
func NewWebPlayEverquestResponse_List(s *capnp.Segment, sz int32) (WebPlayEverquestResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebPlayEverquestResponse](l), err
}

// WebPlayEverquestResponse_Future is a wrapper for a WebPlayEverquestResponse promised by a client call.
type WebPlayEverquestResponse_Future struct{ *capnp.Future }

func (f WebPlayEverquestResponse_Future) Struct() (WebPlayEverquestResponse, error) {
	p, err := f.Future.Ptr()
	return WebPlayEverquestResponse(p.Struct()), err
}
func (p WebPlayEverquestResponse_Future) Success() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}

type WebSession capnp.Struct

// WebSession_TypeID is the unique identifier for the type WebSession.
const WebSession_TypeID = 0xf613029b64a06aeb

func NewWebSession(s *capnp.Segment) (WebSession, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession(st), err
}

func NewRootWebSession(s *capnp.Segment) (WebSession, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession(st), err
}

func ReadRootWebSession(msg *capnp.Message) (WebSession, error) {
	root, err := msg.Root()
	return WebSession(root.Struct()), err
}

func (s WebSession) String() string {
	str, _ := text.Marshal(0xf613029b64a06aeb, capnp.Struct(s))
	return str
}

func (s WebSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession) DecodeFromPtr(p capnp.Ptr) WebSession {
	return WebSession(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession) RemoteAddr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession) HasRemoteAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession) RemoteAddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession) SetRemoteAddr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession) RemoteIp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebSession) SetRemoteIp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebSession) RemotePort() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebSession) SetRemotePort(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// WebSession_List is a list of WebSession.
type WebSession_List = capnp.StructList[WebSession]

// NewWebSession creates a new list of WebSession.
func NewWebSession_List(s *capnp.Segment, sz int32) (WebSession_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebSession](l), err
}

// WebSession_Future is a wrapper for a WebSession promised by a client call.
type WebSession_Future struct{ *capnp.Future }

func (f WebSession_Future) Struct() (WebSession, error) {
	p, err := f.Future.Ptr()
	return WebSession(p.Struct()), err
}

type Int capnp.Struct

// Int_TypeID is the unique identifier for the type Int.
const Int_TypeID = 0xbd94d13b8b1bcadf

func NewInt(s *capnp.Segment) (Int, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Int(st), err
}

func NewRootInt(s *capnp.Segment) (Int, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Int(st), err
}

func ReadRootInt(msg *capnp.Message) (Int, error) {
	root, err := msg.Root()
	return Int(root.Struct()), err
}

func (s Int) String() string {
	str, _ := text.Marshal(0xbd94d13b8b1bcadf, capnp.Struct(s))
	return str
}

func (s Int) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Int) DecodeFromPtr(p capnp.Ptr) Int {
	return Int(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Int) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Int) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Int) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Int) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Int) Value() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Int) SetValue(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Int_List is a list of Int.
type Int_List = capnp.StructList[Int]

// NewInt creates a new list of Int.
func NewInt_List(s *capnp.Segment, sz int32) (Int_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Int](l), err
}

// Int_Future is a wrapper for a Int promised by a client call.
type Int_Future struct{ *capnp.Future }

func (f Int_Future) Struct() (Int, error) {
	p, err := f.Future.Ptr()
	return Int(p.Struct()), err
}

type Bool capnp.Struct

// Bool_TypeID is the unique identifier for the type Bool.
const Bool_TypeID = 0xcc4575715bad9f24

func NewBool(s *capnp.Segment) (Bool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bool(st), err
}

func NewRootBool(s *capnp.Segment) (Bool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bool(st), err
}

func ReadRootBool(msg *capnp.Message) (Bool, error) {
	root, err := msg.Root()
	return Bool(root.Struct()), err
}

func (s Bool) String() string {
	str, _ := text.Marshal(0xcc4575715bad9f24, capnp.Struct(s))
	return str
}

func (s Bool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bool) DecodeFromPtr(p capnp.Ptr) Bool {
	return Bool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bool) Value() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s Bool) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Bool) SetValue(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s Bool) NewValue() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Bool_List is a list of Bool.
type Bool_List = capnp.StructList[Bool]

// NewBool creates a new list of Bool.
func NewBool_List(s *capnp.Segment, sz int32) (Bool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Bool](l), err
}

// Bool_Future is a wrapper for a Bool promised by a client call.
type Bool_Future struct{ *capnp.Future }

func (f Bool_Future) Struct() (Bool, error) {
	p, err := f.Future.Ptr()
	return Bool(p.Struct()), err
}
func (p Bool_Future) Value() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}

type String capnp.Struct

// String_TypeID is the unique identifier for the type String.
const String_TypeID = 0xf23307bee1ce0b8d

func NewString(s *capnp.Segment) (String, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return String(st), err
}

func NewRootString(s *capnp.Segment) (String, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return String(st), err
}

func ReadRootString(msg *capnp.Message) (String, error) {
	root, err := msg.Root()
	return String(root.Struct()), err
}

func (s String) String() string {
	str, _ := text.Marshal(0xf23307bee1ce0b8d, capnp.Struct(s))
	return str
}

func (s String) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (String) DecodeFromPtr(p capnp.Ptr) String {
	return String(capnp.Struct{}.DecodeFromPtr(p))
}

func (s String) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s String) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s String) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s String) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s String) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s String) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s String) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s String) SetValue(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// String_List is a list of String.
type String_List = capnp.StructList[String]

// NewString creates a new list of String.
func NewString_List(s *capnp.Segment, sz int32) (String_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[String](l), err
}

// String_Future is a wrapper for a String promised by a client call.
type String_Future struct{ *capnp.Future }

func (f String_Future) Struct() (String, error) {
	p, err := f.Future.Ptr()
	return String(p.Struct()), err
}

const schema_cdefabcdefabcdef = "x\xda\xe4\xbd\x0bt\x14U\xf67Z\xa7;!\xbcB" +
	"'\xa9f\"*F\x10\x1fd@!\x80H\x04CB" +
	"\"$&\x98N'<\xa2\xa8\x95\xeeJR\xa4\xbb\xaa" +
	"S]\x1d\x12\x84\x09 \xc8C\x90\xb7\x02\x82<\x94\x11" +
	"\x14\x14\x10\x14\x14\x1cQq\xc4\x01GfDAAA" +
	"\xc57\x0a#\x8c\xa2@\xee\xda\xbb\xba\xbbNWN\x92" +
	"\x8e\xff\xff\xf7\xddu\xd7]\xcb\xb5$\xbf\xdeUu\x1e" +
	"\xfb\xec\xb3_g\x9f>'\xff24\xa6o\xfc|\x8d" +
	"\xb38\xf3cc\xdb4\xdc\x9e\xfc\xf4\xcb\x03\x0b\x8b\xa7" +
	"p\x8ek\x09i\xf8\xe9\xe0s\xf8\x1f\x17\x13\xc7q\xfd" +
	"z\xa7\x17\x11>3=\x8e\xe3\xf8!\xe9\x138\xd2@" +
	".:n\xda]6\x1e\x89-&\xe2\xe5\xe9\x1f\x13~" +
	"\x07\x12oM\x7f\x81#\x0d\xa7GN\x1a\xbbn\xd7\xcb" +
	"\xe67\xc7\x12\xa0v\xdc^Dx\xf1v\xa0\x16n\x87" +
	"W\xaf\xb2\x1e?\xfa\xd4\xa5\xfb\xa7\x9a\xa9-@}\xf0" +
	"\xf69\x84?\x85\xd4'o\x87w\x7f\xff\xc5\"\xa5\xe1" +
	"\x19\xd7TV\xab\xa7\x0e\x1eO\xf8\xa5\x83\x81x\xe1`" +
	"xu\xdd\x90\xad\xb6\xb4]\x12\x93\xf8\xfc\xe0,\xc2\xc7" +
	"\x0e\x01b2\x04\x88-\xbd\x96\xca\xc5\x89\xbfM\xe5\x12" +
	"\xafm\xd4\x0cqH\x11\xe1\xeb\x908\x80\xc4\xcb3\xef" +
	"\xa9\xae\xde\x16?\x0d\xde\x1ck\xa6>9d\x0e\xe1/" +
	"\x0c\xc1\xaf\x0cy\xc6\xc2\x91\x86\x9b\xd6\xbc\xb8cu\xed" +
	"3\xd3X\x0d\xd974\x8f\xf0G\x87\xc2\xbb\x0f\x0f\xcd" +
	"\xe0H\xc3~\xc7n\xdf\x8c\xaf^\x9d\xc6\x1c\x90\xf3C" +
	"?'|b&P\xc7g~\xcd\x91\x86/\xfe\x11\xf8" +
	"\xe7\xd3\x0f\xbd5\x8d9\xd8\xe73\xcb\x08\xdf.\x0b\xa8" +
	"c\xb3`\xf8~\\t\xa0\xfd\xe4\xb7\xbf\x99f\xea$" +
	"\x12\xaf\xca*#\xfcV$\xde\x9c\x05\x0dy\xff\xed\x11" +
	"\x85\xc7\x87\xd5>\x04\xaf\x8e1\xb5\xfa`\xd6\x1b\x84?" +
	"\x95\x85\xdd\xcd\x9aO8\xd2\x90qaJV\x85\xfc\x08" +
	"R[\xcd\xef\x0ed\x17\x11~v6\xfcsF6\x92" +
	"\xfb\xbf\xff\xcf\xcc\xd1\x9f\xdc=\x9d5$]\xef\xcc#" +
	"|\xdf;\xa1%\xbd\xef\x84\xe1\xfe\xcf\x7f\xf6\xfc\xf0C" +
	"\xbf\xe7\xcd\xc4\xb1V\xa0\x9e}g:\xe1\x97#\xf5\xd2" +
	";aH.\x8f{\xe8\xe3Ki\x0d\xd3Y\x9d\x94\x86" +
	"\xa7\x13\xben8\xce\xe4p\xe8d\x8f\xd49\x9d\x04K" +
	"\xaf\x19\xcc\xf1[?\xbc;\xe1w \xf5\xd6\xe1\xd0\x90" +
	"W\x8e\x14V\xce/\xef?\xc3\xd4Ilu\xfc\x88u" +
	"\x84\xbf~\x04\x10w\x1b\x01\xed\x98\xde\xef\x9a9\xb7\xfc" +
	"\x921\xc3\xd4\x8e\x0e@\xdc9w\x0e\xe1{\xe7\xc2?" +
	"{\xe6*\xc0#\xee\x1dG\xaf;\xbb\xb9h\x06\x93G" +
	"\xeeR\x09\x7f\xf4.\xe4\x91\xbb\xa0\x1d\xd7\x1c\xab+\xbb" +
	"\xcafy\x98s\\C\xe2\x1aF\xf5\xbf\xfb>\xef\xdc" +
	"\x07Wp\xb1\x9d\x80z@~\x1a\xe1s\xf2\xe1\x9f\x99" +
	"\xf97\xb6\x01v\xfd\xf3\xb9%/<\xf2\xd2\xc3\xacf" +
	"\xafr\xae \xfc\x0e'\xfcs\xab3\x05\xa6\xa6[F" +
	"b\xde[g\xcf<\xccj\xc9\xc1\xe2E\x84?U\x8c" +
	"\x0b\xb2\x18\xc6o\xfd\x13\xb7\x8c\xfa\xe0\xc6A3Y\xaf" +
	"&%E\x84\xef\\\x02\xffL,\xc1WO\xce\xfde" +
	"\xe0\xd3)\x953\x99\xbc\xddm\xd4x\xc2\x0f\x18\x05\xef" +
	"\xee;\x0a\x06\xf0\xf8\x9e\xc5\xees\xa9\x1f\xcd4\xaf\xb2" +
	"X\x1c\xee\xd1y\x84\xef6\x1a\xf9et\xb2\x95#\x7f" +
	"[\xf2j\xd6\x17\x03jf1Z\xed-M%\xfc\xe4" +
	"Rxs])\xb4\xfa\xc4\x18\xfe\xd4\x1e\x8fm\x16\xb3" +
	"\x1d\xabJ\x8b\x08\xbf\x15\xa97\x97\xc2\xaa\x11\xafY\xf7" +
	"\xd2\x86\x8c+g\xb1\x06\xa4\xe0\x9e2\xc2\x0b\xf7\x00\xf1" +
	"\xb8{\xe0\xd5%\x95\x97\x1e\xef\xfa\x979L\xe2\xa9@" +
	"\xbc\x14\x89\x17\xde\x03\xf3\xb8\xe7\xda\x11\xdf~8s\xeb" +
	",s\x0f\x91\xfb\xce\x02u\xec\xbd8\x92\xf7\x0e\x04\x1e" +
	"\x89\xcf>>v\xc9\xabo3\xdf\x9ds\x9fJ\xf8\xb1" +
	"\xf7\xc1\xbbK\xeeC\x99}b\xff7\x0f.\xee9\x9b" +
	"\xc9\xd9[\xef\xcb#\xfc>\xa4\xde\x8b\xd4\xa3\x8f\x8a\xaf" +
	"\xf5\xef\xf7\xe4l\xe6vp\xff6\xc2\xe7\xdc\x0f\xc4\x99" +
	"\xf7\x03q\x9b\xfa\xec\xfa\x15\xc5gg\xb3d\xe5\xda\xfb" +
	"\xb3\x08\xbf\x15\x897#\xf1\xa5n\xea\xde9g\xba\xce" +
	"a\xae\x99\x07`\xcd<\x80\xb3\xff\xc0h\xe0\x90c\xe7" +
	"\xd2\xbb\xfcC\xbau\x0ep618\x1b\xa9\x03\x02H" +
	"\x11\x01^=C\x80W'-\xce\xcf;rC\xe1\x1c" +
	"\xce\x91BHCB\x1aM|J(%\xfc\x05$>" +
	"/\xc0\xc4LI\xd9s\xc5\xd4\x03\x07\xe6\xb0\xc4B\xe7" +
	"\xb2i\x84\xefY\x06\xc4\xd7\x97\x01q\xff\xed\x03\xaf\x14" +
	"\xcaox\x84\xb5\xe1\x95\x94\xe5\x11^Bb\xb1\x0c\xf8" +
	"c\xf9w\x07f\xe4\x1e=7\x97\xf5\xe6XW\x1e\xe1" +
	"\xbb\xb8\x80\xb8\xb3\x0b\xde|\xe8\x17\xe1HY\xd2\xc0\xf9" +
	"\xcc9t\xa5\x11\xbe\x04\x89\x1d.\xe8\xe0\xfe\xee\x9b\x1f" +
	"\xbd\xb8\x7f\x0a\x12\xb71\xbfz\x07P\xef\x03\xea~{" +
	"]\xb8\xcf\\\xbd\xef\x8b\xcfR\xfa<1\x9f9\xe5\xb3" +
	"\xcbU\xc2\xaf*\x87\x97//\x87f?\xb0t\xf2%" +
	"\xe9\x87\xda\x05fjl\xca\x80\x8ag\x09_P\x01\xff" +
	"\xcc\xad\xc0\xb5\xfb\xfesOX\xfek\xa9_h\x1a\x12" +
	"\xfd\xe5B\xe5\"\xc2\xd7U\xa2\\\xad\x84\xb5\x1b7g" +
	"\xf5=\x1bw>\xb9\xd0\xc4\xd9\xf8n\x87\x94ExA" +
	"\x82\x7f\x8e\x93\x1a\xe0\xdd\xcaU\xbdV\xfeP\xf3\xdcB" +
	"\xd6\xa0\x08U\xd3\x08\x1f\xa8\x82WWW\xc1\xa0\xfc\xb8" +
	"2\xfe\xc9\xf8\xaf\xff\xb1\x9057\x07\x81\xf8$\x12\x1f" +
	"\xaf\x82N\xde\xf8\xce\x95\xcf\xa4tN^\xc4z\xf3d" +
	"O\x1e\xe1\x17z\x80x\x9e\x07\xde\xfc\xe8\xbc\xe93," +
	"\xdf.Z\xc4\xdc\xd6O{\xc6\x13\x9ex\xe1\x9f\x97<" +
	"8\xdc\xa9\xbb\x7f\xb8\xef\xd5\xff\xfem1k\xde\x0f*" +
	"\xcf\x12\xfe\x94\x82\x82R\x81y_\xd0\xcf\xfd\xce\x1e\xdb" +
	"\xa7\x8b\x99\xfbc\xa2o\"\xe1\xaf\xf7\xe1:\xf0\xc1:" +
	"\xf8\xdb\x877\xcf\xff<o\xf9\x92\xc87\xe3~\x17\xa8" +
	"\x86UP\x8d\xab\xa0\x1a\xba\xd8%P\x91\xbc\xf5\xf5\xf6" +
	"K\x98\xb3\xdeMU\x09?@E\xa1\xaaB\x1f\x8bo" +
	"\xfe\xf1\xb9a=\xf2\xd8\xd4\xf3\xd47\x08\xbf\x1e\xa9\xd7" +
	"\xaa\xf0\xee\x9ak\xa7\xb6\xffj\xd0\xfbl\xea\x02\xffD" +
	"\xc2\x0b~\x94}~x\xf7m\x83\x8f\x9c}\xef\xd8\xb2" +
	"\xa5\xac\x99\xd9\xe5/\"\xfcA$\xde\xef\x07\x0e\x19v" +
	"\xcf\xe4?w\x19\xfe\xeeR\x13o#\xf1z-\x9d\xf0" +
	";4\x94T\x1an\x8fZ>\xffD\xbb\xbe\x09\x8f3" +
	"\x87o\xc8\x84g\x09_2\x01yk\x02\x8a\x91\xb4\xf5" +
	"W\xff|\xff\x177<\xcej\xc9\xfa\xda\x15\x84\xdfS" +
	"\x0b-\xd9U\x0b\x9d|q\x91\xf4\xb7{\xba%,g" +
	"vrl\xddD\xc2{\xeb\x80Z\xaa\x03\xea\xaa\xee7" +
	"\x9f\x1a\xbb~\xeerfK\xe2'.\"\xfc\xf5\x13q" +
	"\xe4'bK~\xef\xf6\xc3\xf5\xa3~\xb4<\xc1%\xa6" +
	"P\"*\xa8\x16=\x98E\xf8\x19\x0f\xc2\xbb\xa7>\x08" +
	"L\xd2\xf9\xdc\x9b1/W\x0c\x7f\x82\xb9/\xad}\xb0" +
	"\x8c\xf0;\x90z\xeb\x83\xd0\x92\xec\x07\x06\xc5\xe6\xa6." +
	"~\x82%\x86s'\x95\x11~\xdc$ \x1e;\x09\xe6" +
	"\xa6o\xfd\xcf\xd5\x13\x0fXV\xb2\x16\xc2\x9eIo\x10" +
	"\xfe0\x12\x1fB\xe2\xc7\x9e\xda[\xfb\xe3\xe0\x87V2" +
	"\x17\xc2\xa0\xc9\xe9\x84\xcf\x9d\x8c\x02k2N\xce\xf2\xa7" +
	"\xe7|\xf8\xd5\xde\x19+\x99\x03x\xbc^%\xfc\xd9z" +
	"x\xf9\xe9zh\xf6\xed\xef.yud\xdc\xea\x95," +
	"\xbdr\xf6\x94\"\xc2\xaf\x9a\x82v\xc5\x14T\x14?y" +
	"d\xee\xfa'\xa7\xaf]\xc9\x1c\xee\x01\xd3T\xc2\xe7N" +
	"\xc3\xa6LC\xf2\x84\x17+/=\xfa\xce\xa9\x95\xac1" +
	"9\xf4\xd0D\xc2\x9fz\x08\xd7\xe4C\xd0\xcd\x9b\xef\xbd" +
	"\xe9\xfa\xff\xb4\x9b\xb9\x8a5&C\xa6\x17\x11\xde1\x1d" +
	"\x88\x0b\xa6O\xe0\xc8g\xaf\x06\xbe{\xef\x97\xd4'Y" +
	"]\xdc8\xbd\x94\xf0{\x90v\xd7t\xe8\xe2\xe4\x1bV" +
	"\xdc[\xb8\xeb\xcfO\xc2.\x16c\xda\xc5Jfl#" +
	"\xbcw\x06j\xa33\xb0\xcd\xaf\x0cH\xfa\xe4\x17\xd7\xa4" +
	"'\x99v\xca\xc3\xe3\x09\xdfn&\xaa\xf03\xa1\xcd\xb9" +
	"\xeb;\x88\xc3w\xfd\xebI\xe6X\x0b3\xb7\x11\xbe\x0e" +
	"\xa9\x033\xa1!\xab\xef\xde\xf4\xf3\xf8~=W\xb3\x15" +
	"\xaeY\x13\x09?`\x16\xca\x86Y\xb0$\x9dEJ\\" +
	"\xff\xd1i\xab\x99zv\xd7\xd9\xd3\x08\xdfw6*\x04" +
	"\xb3qGxby\x87\xaf\x1fyf\xccjV\xbb\xbd" +
	"s\xde \xfc\x8c9\xc8\xdas\x80\xb5\xdf\xab\xeb\xdan" +
	"\xbas\xe5j\xe6<\xae\x9f\xb3\x8d\xf0{\xe6\xa0\x9c\x98" +
	"\x83crW\xdd\xd7\xcf\xce{\xff\xc8j\xd6\x02\x9e:" +
	"\xb7\x94\xf0K\xe7\xa2\x1a5\x17\xda}\xc1\x91\xd9k\xe1" +
	"\xb9\xa45,b\xef\xbc\"\xc2O\x9d\x07\xc4\x93\xe7\x01" +
	"\xf1\xbb\xb5w,?\xbdd\xfd\x1a\xf6j\x7fT%\xbc" +
	"\xf7Q\\\xed\x8f\xc2po^8\xfcb\xd7\xce?\xac" +
	"a\xf1\xd3\xbeG\xcb\x08\x7f\x14\x89\x0f#q\xf6\xa4k" +
	"b\xda\x0e]\xb8\x965 }\xe7\x8f'|\xce|T" +
	"\xa2\xe6\xc3\x80ly\xa4\xee\x8b\xca\xb9\x83\xd7\x99\xf7S" +
	"\x1clq\xfeD\xc2\xd7\xcdG!1\x1f\xe5\xc8C\x07" +
	"f\xdf\xf5\xf6\xb9\xcb\xeb8\xc6\x96pp\xc16\xc2\x9f" +
	"Z\x80\x8c\xbd\x00\xa6=\x81\xf8oy`s\xccS\xac" +
	"\x86\xd4-\x9cF\xf8y\x0b\x81x\xf6Bh\xf5\x87\x1f" +
	"~\xf0\xe0\x9a\xa3\x13\x9eb\x8d\xde\xa9\x85i\x84?\x8f" +
	"\xc4g\x17\xc2\x9b\xe3{\x7fp|\xfc\xb4\x0b\xcc7\xcf" +
	"^TJ\xf8U\x8bP\xc3X\x04o~\xa8\xa2K'" +
	"^KxZ'\xee\xffF\xa4q\xbah\x1a\xe1\xdb-" +
	"F\xce^\x0c\xd4\xcf>\xfa\xfd\x9a\x03\xe7/?\xcd\x92" +
	"\x0b\xe2\xe2\xf1\x84\xaf[\x8c\xe3\xb1\xf8\xef0\x1e\xefz" +
	"\xae\xfc\xad\xf7\xca\xab\xd73y\xb5`\xe9\xbb\x84\x97\x96" +
	"\xe2\x93K\x91W\xff\xfe\xd3\xbb=\xbal\xd7\xd6s\x8e" +
	"\xabc\xdb6\xcc\xf2\x1c\xbf\xec\xb8:\xf5\x10\xc7\x91~" +
	"S\x1f\xb3\x10~\xdecq\x1c\xe7\x9c\xf5\x98\x15h;" +
	"n\xfd>\xe1\xa5\x9b\xa6\xaf7\xcf\x0cNz\xddc\xe3" +
	"\x83\xe4\xfdf?\x863\x13\xdf\xe3Da\xc9\xb6\x0d\xec" +
	"\x96\x9c\x7f\x1cL\xf0e\xd8\xcbe\xc0~\x0f/\xd9U" +
	"\x9f<\xdd\xf5W\x96\xd2pzY\x16\xe1/!\xf1\x85" +
	"e\xc0#\x1f\xc9\x05o\xdfzt\xd23\xe6E\x83\xaf" +
	"\xee\xb2|\x1a\xe1{/G\x1br9\x8e\xc9\xf6\x11\x17" +
	"o<\xf2\xf4c\xcf\xb0\xde}aE\x1e\xe1\xe3\x9f\x80" +
	"w\xb7{\x02\xde}\xddu\xfd\xdf\xd9\xfd\xe7\xe7\x9ea" +
	"\xeas\x83\x9e(%|\xc1\x13\xb8\x93<\x81\x03\xb8y" +
	"YUw\xc9\xf7\xf93\xcc5\xb6R%\xfc\xd4\x95\xb8" +
	"\xc6VB'\x17o\xde\xdbpS{y\x83i*\xf5" +
	"\x11\x1c\xbb\x0a\xd6\xd8*\x14\x80\xab\xd0\xae)Iyl" +
	"\xe8\xc1\xc9\xf360\x97\xe4\xbe\xd5\xe9\x84?\xbc\x1a7" +
	"\xa7\xd5\xa8\xc1\xac\xd8\xbe\xf2\xa7\x17\xfe\xb4\x91)\xb5\xd7" +
	"\x80\xd4^\x83R{\x0d\xf4\xd2~w\x91\xb8\xf8\xcb\xe9" +
	"\x1b\x99\xaf\xae^3\x91\xf03\x90z\xea\x1a\xe0\xee7" +
	"G\xdc\xdf!y\xd3\xcc\x8d\xacNvY[D\xf8\xde" +
	"k\x81\xb8\xe7Z\xe8\xe4\xc6\xc1\x1f\xcc\xbcc\xf75\xcf" +
	"1_\x1d\xbbN%|\x97u\xa8\xf7\xaf\x83Vo\xfd" +
	"\x93\xb0\xf2\xb6SO?\xc7\x94\xc4S\xd7\x81a\x88\xd4" +
	"\x0b\xd7\xa1\x0fc\xfa\xe3\xed\x0e\xb6\xf9\xd7f\xd3\x06\x12" +
	"l\xf6Sy\x84\x9f\xf1\x14>\xf8\x14N\xfc\x86\x11\xdd" +
	"\xd3\xdal\x9d\xf9<kH\x1c\xeb\xc7\x13^\\\x8f\x1e" +
	"\xb7\xf5\xd0\x92\xae\xbd\x87\xb7Y\xfa\xdc\xbc\xe7Y\xebl" +
	"\xcf\xfa4\xc2\x1f\x04\xe2~\xfb\xd7\xa3 \xbe\xaa\xc7\xfd" +
	"\xea-\xe2K\xcf\xb3\x86DxF%|\xe0\x19T\xcd" +
	"\x9fy\x81#\x97nZ5c\xfa\xfd\xe4\x05F+\xda" +
	"m(#|\xd7\x0d@\xdae\x03L\xcc\xc7\xd7\xdd|" +
	"r\xd9\xcc\xd9/\xb0\xd9\x0f\xa8\x0b6 \xfbm@\xf6" +
	"\x9b\xb5s\xd4\x8f#\x04m\x0b\x8b\xb5\xc7m\x9cF\xf8" +
	"\xea\x8d\xf0n\xefFxw\xcf\xce\x05\xae'\xaf\xf9h" +
	"\x0b\xab\xcd\x0b7\xaa\x84_\x8f\xc4k7\xc2\x9c\xff\xf5" +
	"\x85\xf3sw}P\xb3\x959\x8dC\x9e]A\xf8\x92" +
	"g\xd1\"{\x16\xa8W\xa8\xe5#\xf7\x1e\xaf\xda\xc6z" +
	"\xf5\xd9g\xc1`\x7f\x0e}\x8a\xcf\xe1V3b{L" +
	"\xf2\x83\xdfmc5\xfa\xe8s+\x08\x7f\x16\x89O?" +
	"\x07\x8d\xfe\xf5\xc0S+\x9e\xbe\xb0\xe1E\x16q\xd7M" +
	"\xa5\x84\xef\xbb\x09=b\x9b\x80xQ\xb1\xeb\xd5\x1f." +
	"\xff\xfa\"k\xc2\xc7m\x9aC\xf8\x00\x12Wo\x82\x09" +
	"\x17\x12\xadm\x7fL\xcd\xd9\xce\">\xbc\xa9\x88\xf0\xdf" +
	"\"\xf1)$\xee\xffTRIA\x0d\xbf\x83\xb9O\xe7" +
	"lN'|\xc9fd\xab\xcd \xfc~\xff\xf4\xb3\xf8" +
	"{\x8e\xf5\xda\xc1\x12}k\x9f\x9fF\xf8\x1d\xcf\xa3\xbe" +
	"\xfa<\x0c\x87\xeb\xcc_\xeb\xde{\xee\xaf;X[\xd8" +
	"\xd2\x17\x8a\x08\xbf\xf1\x05 ^\xff\x02\x0ctn\x9b>" +
	"\xffZ\xbcp\xfcK\xac\x81\xce\xdc2\x9e\xf0%[p" +
	"V\xb6\x00\xf1S\xffl\x7f\x95}\xe7;/\xb1\xbd\xa0" +
	"[@\x04oE\x11\xbc\x15\xa8\xcb'\x8f\xfb\xf7]\xe9" +
	"\x9f0_\xbdjk\x19\xe1\xb7\"\xf1\xe6\xad\xd0\xe8\xaf" +
	"\x7fYY\xf7\xd8\xc1\x9b_f\x0d\xde\xbcm\xa5\x84_" +
	"\xbb\x0d\x88Wm\x83\xc1[\xb8\xf0\xcdo'?\x9b\xc3" +
	"$\xbe\xb4-\x95\xf0\xf1/\xa2\x00~\x11\x88\x87^\xfa" +
	"o\x97\xc05w\xbf\xcc\x9ap\xef\x8b\xa0\xb5 \xf1\xe4" +
	"\x17a\xc2?M\xbe\xf9\xef\xf7\xfb\xb7\xbf\xcc\xec\xe1\xda" +
	"\x17W\x10~\x17R\xefx\x11z8\xd0\xfb\xec\xa3\xb7" +
	"\xcf\xff\xfb\xcb,\xadE\xd8\x9eN\xf8\xea\xed\xb8Z\xb6" +
	"C;\xbeU\xdb>\x99\xf5\xf1\x05f\xa3\xf7o/#" +
	"\xfcq$>\x8a\xc4\xd7~\xe7=\xfb\xda\x12\xdbN\xd6" +
	"\x9b\x07\xec\xc8#|\xee\x0e \xce\xd9\x01\xc4\x83\x87\xde" +
	"XU\x7f\xff\xc0\x9d\xf0\xe6\xfe\xd4\xfe\x7f\x05*\xcd;" +
	"T\xc2\xef\xd9\x81:\xdf\x8e\xc7\xaf\xe2H\x83\xfc\xef\x9c" +
	"\x0d\x85;\x8bw2\xfbx\xf0p\x1e\xe1O\x1eF\xcb" +
	"\xfe0\xf4q\xcf\xcc7\x7f<\xb5[\xd8\xc9\xd4q>" +
	",#\xfc\xbc\x0fQ\xc7\xf9\x10Z\x92\xdc\xe3\xd4\xc9\xb7" +
	"_\xda\xce~\xf5i\xa0&\x1f\x01\xf5\xa5\x0f\xe1\xd5\x9f" +
	"\x91e\xb7'\xdd\xf2\xd3N\x16\x83,\xfd\xa8\x8c\xf0\x1b" +
	"\x91x\xfdG@\xccW\xfd|x\xdc\xd7\x9dw1\x1d" +
	":G\x8a\x08?\xf6\x08:\xe5\x8e@;\xee\xbe\xfb\xab" +
	"\x1bG/\xaba\x12o=\xb2\x88\xf0\xfb\x91x\x1f\x12" +
	"\x1f\x9e\xdd\xe3\xc3O\xb6Oz\x85)\"\xaf?\xba\x8e" +
	"\xf0C\x8e\xa2\xb4<\x8a\"\xf2\xd61[\x0f\x7f\xb0s" +
	"\xfe+\xac\xa9)\xf8x<\xe1\x85\x8f\xd1T\xff\x18\xde" +
	"\x9d\x1e\xfb\xe8GW\xff\xfa/&\xf1\xae\x8f\xf3\x08\x7f" +
	"\x10\x89\xf7#q\xf5\xe5\xd1\xdf\x14\\\xfe\xf8\x15\xe6\xe8" +
	"]\xffI\x11\xe1\x07}\x02\xd4\x03>y\x81#\xbf\xff" +
	"\xf5\x9b9\xcf\xbf\xf9\xc5+,\xda\x93\x9f\xa8\x84?\x8f" +
	"\xb4g?AC)\xf5\xf2\x90\xf7\xb7\xdf\xfc*SR" +
	"\x1f\xcb#\xfc\xfac(\xa9\x8f\xc1R,\xfc\xf2\x9d%" +
	"{\x13^\xd9\xcd\xda\xb8&\x1f\x1fO\xf8\x85\xc7qU" +
	"\x1e\xc7=\xf1\xb3w\xafz\xe4\xf6CK\xf6\xb0\x86z" +
	"\xecg\xdd\x09/}\x86.\xbc\xcf`y\x0d\xbc\xef\xb5" +
	"\xdb\x16\xad\xf8\x8aI<\xe3\xb39\x84_\x85\xc4\xcb?" +
	"\x83\xe1\xb8\xef\xf5\xb7\xed\xc7c\xce\xee1k7(\xc8" +
	".|6\x9e\xf0\xf1'p\xcf;\x81\xda\xcd\xc7\xbf\x9f" +
	"\xef\xf7\xc1\xf7\xbf\xec\xe1\x12\xaf\xb1\x18[9G\xfa\x09" +
	"\x9f\x8f'|\xe0s\x14\xd4\x9f\x0f\xe4H\xc3\xb4\xb8\xe1" +
	"Wt\xf8\xae\xf85\xa6\xec\x9d\xfc\xf9\x1c\xc2/\xfd\x1c" +
	"G\xe6sT<G\x9e\xcb\xe2cKJ^c5\xfa" +
	"\xe4\x170\xd2_\xe0H\x7f\x01\x8d>\xfd\\|\xc3U" +
	"\x09\xab_cG\xe5\xbe\xdcFx\xe9K\x1c\x8f/a" +
	"^N\xfc\xb9\xee\xba\x84\xfa\x8d\xaf\x81\xbaL\"\xd4\xe5" +
	"\xc4S\xdd\x09\xdf\xed\x14\xa8\xcbW\x9fBu\xf9v\xef" +
	">\xd7\xb2\xe7\xfe\xf5\x1aS]\x8e?51H\xde\xaf" +
	"\xeb)dSG\xbf\xf2\xb9{{\x95\xfe\x0d\xc8\xdb\x9a" +
	"\x8d\xa4\xaf\xe6\x10>\xf7+\\:_\xcd\xb4r\xa4\xa1" +
	"\xf3o\x9b\xae\xfaho\xdb\xd7\x99\x9a\xcdw\xd3\x08/" +
	"~\x87\x9a\xcdw\xa8\x19v\x1e\xfa\xd5]O\x0e\xdd\xcb" +
	"\"\xde\xfb])\xe1\x0f#\xf1\xa1\xef`\xca\xfb\xe5?" +
	"\xae\xbc\xb9\xf1\xe1\xbd\xac\xdd\xe8,\x10\xc7~\x8f;\xf9" +
	"\xf7\xe8\xe2U\x97\xcd\xdeYD\xde`N\xf9\xaa\xef\xc7" +
	"\x13~+P\xf7\xdb\xfc=:D\xaa\xee(\xf8\xb5\x9b" +
	"5\xed\x0d\xd6\xea\x1a\xf4\xe36\xc2;~D\x15\xf5G" +
	"h\xf5\xd9y\xb7$'=\xb0\xeb\x0d\xee\xd0\xd5\xb1\x97" +
	"m\x11\x83\xbd\xf5\xc7\xf6\x84\xdf\x0b\xb4\xce\xdd?\xe2`" +
	"\x7f\xffL\xfa\x1d\xef){\xdf`N\xe3\xe6\x1f\xa7\x05" +
	"\xc9\xf9=?B\xb3\xf7\xdf0\xfc\xb3/\xc6\\x\x83" +
	"\xa9\xb4\xff\x94F\xf8\xc9?aP\xe4'X^\x8bN" +
	"}\xf0\xce&w\xda\x9bl\x0e9\x03\x1cr\x069\xe4" +
	"\x0c\xb4\xfa\xb5\xfa]\xfbW\xd4\xae|\x8b\xf5\xea\xfdg" +
	"\x16\x11\xfe$\x12\x1f?\x03\xaf~hw\xce\xb1\xb7\xce" +
	"<\xff\x16\x93\xb1\xf7\x9c-%\xfc\xa1\xb3(\xe4\xcf\"" +
	"c\x7f\xd4\xb3F\xfd\xf5\xc5\xa4}\xacy\xec\xf9\xf3D" +
	"\xc2\x0f\xf9\x19\xde=\xe8gh\xc8\x83\xef\xc4)c\x07" +
	"d\xeec\x0a\xeb\x9f\x17\x11~3\x12o\xfc\x19\x1a\x92" +
	"\\\xf4p\xb2\xab_\x0d\x93x\xf9\xb9\"\xc2o>\x87" +
	"\xc4\xe7`\xf4\xee[\xbc\xda\xb1\xe7\xc39\xfb`\x11\xf4" +
	"\x8f\x98\x97\xdc\xf3\x16\xc2\x97\x9c\x87y)<\x8f\xf3\xb2" +
	"\xe5\xcb\xfdo\xfe|\xdf\xd2}\xcc\xc1\xcb<\xff/\xc2" +
	"\x8f;\x8f\xce\xb8\xf3\xf0\xe6\x0d\xce\x0f\xba$\x0c{\x87" +
	"M}\xfe\xfc\"\xc2\xc7\xff\x17\x15\x85\xff\xe2\x9e{\xeb" +
	"\xfa\xfeo\xf4\xfa7s8\xa4\xfff\x11\xbe\x0e\x89\x03" +
	"@\xfc\xcb-q[\x1a\xca\xbe\xdfgZ\x8b\x182;" +
	"\xf4\xdfu\x84\xff\xf6\xbfh\xd7\xff\x17\xfd\xee\xffhw" +
	"\xfcX\xe9\xde\xec\xb7\xc1\xcchc\xf2S]\xfa5\x8b" +
	"\xf0\xf1\x17P\x90]\x00\xae\xbeT2\xe3\xde#;\xff" +
	"\xf963\x08\xfb{\x19\xe1W\xfd\x8e2\xf2w\x18\xe8" +
	"\xf6?\xfa\xbc/?y\xc7\xdf\x99~\x82\x8b*\xe1W" +
	"]D\xe2\x8b\xd0A\xf5\xe2\xda?\xad\x9e4\xe6\xef\xac" +
	"Y\xb9p1\x8b\xf0\xed.\xa1\xf6v\x09\xc6\xaex\xa4" +
	"E^\xfe\xebx\xe6\x9b\xd7^*\"\xfc\x0e$\xdez" +
	"\x09\xde\xfc\xc4S\xb5\x83\xde\xff[\xf2;\xac7\xc7_" +
	"\x9eF\xf8n\x97\x81\xb8\xebex\xf3\xec\x8a\xefz\xdf" +
	"\xb8\xae\xf8\x1d\x96B\xb6\xeb\xf2x\xc2\x1fD\xe2\xfd\x97" +
	"A|$\x9d(\xfa\xa1\xee\xe1\x9aw\x1a;\x14.\\" +
	"N\"|\xbb\x06`\x8e\x98\x06d\x8e\xfa\x11\xffY\xf9" +
	"7\xe9}f+\xce_\x9eC\xf8\xf8\x06\x9c\xed\x06\x18" +
	"\xb9\xe5c\x0f\xfc\xf9\xee\x99\xcb\xf63\xdd1\x0ds\x08" +
	"\x7f\x09\x89/ \xf1\x9e\xbb\x0eV}:\xbf\xf2] " +
	"noj\xf3\x80\xc3\xa4\x94t\xfe\x16\xffy\x8a\xac\x8e" +
	"\xe1H\xc3\xcdko\xadZ\xd0k\xc5\xbb,#t\xe0" +
	"\xe1X2\x9e$\x7f\x8b\xcf&\x9f\x8a%0$c\xde" +
	"\x1dr9\xef\xca'\xf1\x818J\x83\xc3\x07\x16\xb6!" +
	"\xcf\x92\xe4\x8dm\xe0\x81\x81\xeb\xdb\x90\xbbA`_\x9d" +
	"\xb5\xfc\x8a\x19\xf2\x8ew\x19\xcd\x1f\xd8\xb7=|!\xa7" +
	"=~!\xb3=~a\xe8\xf4\xb2\xc7\xdf\x1c\xf6\xd6\xbb" +
	"\x8c\xe9\x1cx\xbc=)#\xc9gu\xfa\xd3\xed\x09\xcc" +
	"\xe8\xca\x9e?^\xb7\xa7\xe0\xf7w\x19\x934\xd0\xd1\x01" +
	"\xe8\xc5\x0eH/t \x18\xe0_\xbd\xf9\x9e\xea@\xce" +
	"\x01\x16\xfd\x8c\x0e$\x95$/\xd5\xe9\x17\xea\xf4\xaf/" +
	"\xbc\xef\xc0\xce+\x8b\x0e0D\xf7\xc0\xad\x1dH\x1eI" +
	"\xde\xa7\xd3\xef\xed\x80\xed\x11{<::\xb6[\xc2A" +
	"\xb3h\xc3\x07\xbav$\xebH\xf2\x80\x8e\xf8\xb5\xbe\x1d" +
	"\x09Z\xd4w|\xef\xbdu\xb7\xf7\xb3\x83\xac\x11:\x14" +
	"O\xa6\x91\xe4S\xf1\xf8\x85\x93\xf18B[6\xd9\xef" +
	"\xcf\x9c\x7f\xdb{,\xe19\xb0\xae\x13)\"\xc9\xf3:" +
	"\xe1\x1f\xb3;\x11\x94\x9f\x05\x92r\xe2\xe3\x86\x92\xf7X" +
	"}>j#\xa5$\xf9\xb4\x0d\xbf\xf0\xad\x0d\xfb\xfc\xd9" +
	"\xd2\x8e]\xf7\xdew\xeb?Y\x8a\xe6\xc0.\x09d\x11" +
	"I\xee\x9b\x80\x0f\xf4N \xb8U\xacJ\xac\xbe<\xdd" +
	"\xf7O\xc6\xde9\x90$\xc2$tND\xfa\xc4D\xec" +
	"B\xd5\x1d\xea\xae\x1f\xaf\xfc\xe2\x9f\xac.oN$*" +
	"I\xde\xab\xd3\xefI\xc4\xf7?\xb0\xech\x8f\x83\xdb\xcf" +
	"\xfc\x93\xd5\x81\xa5I$\x8d$\xafOB\xfa\xb5I\xd8" +
	"\x81\x9e\xe7\xb3\xd3\xaa\xdd\xe2\xfb \xc7\x9c\x0d\xd7\xed\xa5" +
	"\xc5\xde\xc0\xbdI\xa4;I>\x84\x0f\x0c<\x98D\x1a" +
	"zp\xa4aq\xcfOK\xc9\xb5\x0b\xdeg}\xa1\xdb" +
	"`\x92E\x92\xfb\x0e\xd6{<\x18\xbfpw\x97\xf31" +
	"\x9f$\x9e\x7f\x9f9D\xe3\x06\xc3\xacU\xeb\x0fx\x07" +
	"c\x17\xe2\xef\xfb\x8f;\xb6w\xec!Vtu`\xee" +
	"\x10X\x08\xe3\x86\xe0\xd3c\x87\x10T\x8c6\xde\xb1r" +
	"i\xdc\xcc\x9a\x7f19i\xf6\x1d\xc0z\xab\xee\xc0'" +
	"\x96\xdf\xa1s\xd2c\xd5\x93\xbf\xbd\xe3\x9c\xe3\xdf\xcc\xe5" +
	"|\xfdP\x92N\x92\x07\x0c\xc5F\xf5\x1d\x8a\xf3\xb0\xf8" +
	"\xc2\xc7+*\xf6\x95\xfe\x9b\xb5\xef\x0c<=\x14&\x8e" +
	"d\xe2\x03\x97\x86\"wo\x9f\xfc\xcc\xcf\x93ny\xf5" +
	"\xdf\x8c\xe0\xfd@)\x13:19S\xe7\xc3L\xbd\x13" +
	"_\xff\xe9@\xc5\x94\xa9\x9b\x0f\xb3fzi\x16<\xb0" +
	"1\x0b?\xb0>\x0b\x87\xe9\xc7\xdb\x86W\xbd\x97\xf4\xc9" +
	"af\x17\xea\x86A\x8b\xe6\x0d\xc3\x07f\x0f\xc3\x07\xde" +
	"\xdc\xdf_+\x1f`\xff\x90%/fd\x939$y" +
	"U6\xd2/\xcf\xc6\x1e\x8c\xfbd\xe0;\xf2\xb8{>" +
	"dv\xf9B6y\x85$'\xe6\xe0\x03\xf19\xf8@" +
	"\xee\x1b\xf1o\xedk7\xedC\x96\xaa7\xd0\x9b\x03\xcb" +
	"m*>0pr\x0e\x01\x05\xff\x97\xc3\xb3\x8a\xef9" +
	"\xbd\xf9C\xc6\x10\xed\x1f\x0e\x0d:9\x1c\xc9\x8f\x0f\xd7" +
	"\x87\xe8\xe9i\xddK>\xbf*\xef#\x86\x02<\xf0\xec" +
	"\x08\xe0\xa4\xd8\\|\x80\xe4\x12\xd4\x81}W\xdf\xdem" +
	"\xc5\xd3\xa5\x1f\xb1D\xd2\xfa|2\x91$\xef\xca\xc7\x1e" +
	"\xec\xc8\xc7\x1e\xdc\xdc\xeb\xe0\xa0\x0d[\xa4\x8f\x98c\x9a" +
	"X\x00cz}\x01>\xd0\xad\x00\xd9\xe2\xd7\xa7k\xd2" +
	"\xaf\xb8\xf1\x8b\x8f\x98c\xb4\xa7\x00\xd6\xe7!\xfd\x81\x83" +
	"\xfa\x03\xb7'\xef;\xbez*9b\x1e#|@\x1c" +
	"I\xde%\xc9SG\xeac4\x92\x805v\xb9\xae*" +
	"\xe7\xba\xcf|GX\"\xac\xa0\x10> \x14\xeaK\xa9" +
	"Pg\xed\x03\xa3\xaf\x9a\xfe}\xdd\xb2#,\xc6\xfb\xd6" +
	"\x01\x0f\\r\xe8S\xe8\xc0Q\xfd\xddZ9\x7f\xfd\xb4" +
	"g\x8e\xa0\xbf\xd4\x10\x00z\x97\x9d \xf2\xaew\xea\x8b" +
	"\xdbIP\xf5Yw\xd3\xe5\x8a\xae\x8f\xec:\xc20&" +
	"\x07\xf6,\x81\x07\x86\x94\xe0\x03\x83J\xf4\x16\xfd\xfd\xce" +
	"\xa5\xef\xdd\xf3\xcf\xdf\xf0\x81\xabL\xaa\xd5\xc0\xc3\xa3@" +
	"(\x9d\x1a\x85O\x9c\x1cE^\xee\xc8\x91\x86\x8bm\xfb" +
	"\x0e\x1c\xb3\xc1u\x94\xb9\xa0w\xb8ay\xees\xe3\x13" +
	"{\xdd\xfa7z\xbf\x17\xf7\x06\xff\xd9\xc1\xa3\xac\xd5S" +
	"P\x0e\xabG(\xc7y\x18W\x8e\xf3`\x93\xdf\x1e\xfa" +
	"M\xd2\x95\x1f\xb3\xe8\xcf\x97\x03\xef\xc5W }\xbb\x0a" +
	"\xa4\xffl\xfb\xc7\x8f\x8e-\xde\xf41k\xf1\xac\xad\x00" +
	"\xc6\xd8\xa1\xd3o\xad@Nz\xe5\xf1\xb7\xa4\xf8g\x0f" +
	"\"}\x07\xf3\xbc\xc5WB\x0f\xbaV\xea\xbbD%\xf9" +
	"\x084\x8cq\x09\xae>\x19;G}\xc2\xf2\xfc\x0f\x14" +
	"\xbcd\x05I\xae\xf3\xe2\x13\x01/\xae\x9e\x86y#\xce" +
	"\x9c\x8dI\x11?a\xb5i\x97\x02\x92x\xbf\x82m\xda" +
	"\xa7`\x9bn|I\xfd\xca\x9d4\xf5\x13\xa6\xe4\xf6A" +
	"\x1f\x06\xf8t\x99\xe7C\xc9\xbd\xe4\x8a\xd5\x81\xdf\xbe^" +
	"\xf4\x09k\xf5\x08>Xn\x01\x9d\xbe\xda\x87\xef?\xf8" +
	"\xe4\xa3\x05\xae\xfb\x9eg\xb6\xe7 \xbe\xff\xa4N\x7f\\" +
	"\xa7?]5.\xe6\x9a\xf6{\x99\xf4C\xaaa\xce\x1c" +
	"\xd5H_P\x8d\xf4\x8fV\x1d\xe9\xd6\xed\xc8\xcac\xcc" +
	"\x9dds5n\x86\xfa\x03{\xaaQ\xe2\x8dZ\xd3?" +
	"\xff\xe1\xe7.\x1ec\xae\xce\xe5*\xac\xff\xcd*>\xb0" +
	"Q\xc5Y~\xf9\xcd{\xdf\x18\xedL9\xceT\x182" +
	"\xfd\xd0\x85\x12\xbf\xae0\xf9u\x85a\xed\xae\xef\x06~" +
	"\xa0.8\xce\xea\xc3f\x0dv\x9e\xbd\x9a\xde$\x0d\xc7" +
	"t\xda\xb3S\xf6My\xcd\xf1)k\x0eNj0g" +
	"gu\xfa\xd3:}\xee\xdf\x06\xddO\xb6\xad\xfa\x94\xc5" +
	"\xa7\x89\x01\\\x9d\x01] \x05\xb0\x07\xcfLYW\xde" +
	"\xf6\xbd\xa7\x99\xf4{\x030D\x87u\xfaC\x01\x18\xa2" +
	"K\x9b;\xed\xbf!\xa9\xe3g\x91i`zs\xf6\xd5" +
	"\x80\xc4>Z\x83\xe4\x87k\xf0\xf5K\xa7>\xfb\xf7\xdf" +
	"\x03\xc2g\xcc\x11\x0dL\x00\x9e\x98=\x01\x1f\x981\x01" +
	"\xe7\xec\xf1\xb59\xbf\xbc\xdd\xb3\xea3V\x7fOM\x80" +
	"9\xbe\xa0\xd3\x9f\x9f\x80\xfd}\xee\xec\xb4\x8b\x0f\xef\xb4" +
	"\x9d`\x8d\xe7\xf5\xb50c\x83j\x91~@-\xd2\xef" +
	"\xfe\xcf\x07\xd7\xfd\xa4\xf5`\xd2\x97\xd4\xc2x\x8a:\xbd" +
	"P\x8b\xed\xc9y\xe6\xc8\xb2\xf3S6\x9e`\x0b\xecZ" +
	"P\xd8\x0e\xeb\x0f\x1c\xd2\x1f\x98\xbb\xbdKR\xd7\x7fm" +
	"9\xc1\x8aQ\x0e\xec[\x07,\x91S\xa7\xf3G\x9d\xbe" +
	"K\xe5.~\xec\xd5\x89\x0b\xde;\xc1\x8a\xdd\x0e,\x99" +
	"\x08c$M\xc4O\x88\x13\xf1\x13\xaey+g\xbd6" +
	"\xaa\xfdI&_\x1f\x9d\x08\x93v\x1a\x1f\x18\xf8\xedD" +
	"\xfd\x13;\xb2;\xdd@^\xeas\xb2\x91\x93i`\xec" +
	"$r%I\xee<\x09\xc8G'L\"hE\xf5!" +
	"3&?\xf8[\x9f/\x19)e\x03\xc9$\x18T\xfd" +
	"\x81\x81\x89\x93t\x11\xff\xeb\xd6\xefo\xdf\xf6\xe3\xd7_" +
	"\xb2F\xb5\xf3_\x80-z\xfe\x05{p\xfd_\xb0\x07" +
	"\x9f\xa6\xbb\xdf+\x19{\xed)\xa6j\xf1\x17\x18\xa3\xe5" +
	":\xfdR\x9d\xfe\x9c\xe5\xf5\xb1[\xdf:v\x8a%Y" +
	".\xfc\x05\xb8\"\xbe^\x97\xbe\xf5H\x7fv\xd7\xe5\xda" +
	"b\xd7\x9f\xbfbq\xb5X\x0f\x1bH@\xa7\xaf\xaeG" +
	"6\xbd\xa4\xfe:\xee\xb7EY_\xb1\xb8\xae\xdd\x14\x98" +
	"\x81\xaeS\x90\xbe\xcb\x14\xe4\xa2\x09\x07N\x08k^m" +
	"\xfb5\xeb\xfd\x83\xa6\x00\x17\xe5\xea\xf49S\xf0\xfd\x1b" +
	"\xe6\xae.\xed~\xc3\x8dL\xfa\xe3S\xd0\xf4\xd2\xe9O" +
	"\xeb\xf4\x93O\xd5\x1dr]{\xf3\xd7\x8ct\xcb\x81\xb3" +
	"\xa7\x82-\xb8v*\xd2\xaf\x9a\x8a\xedY}\xfc\xee\xe4" +
	"g\x9f\xbc\xf3k\x96cp\xe0\x9e\xa9\xd0\x81CSu" +
	"\xad|*r\xc4O]\xfb\x9d\x95\xe3\x9f\xf8\xdaD\x8f" +
	"\x1f8=\x0d\xb6\xb3\xd8\x87t\xcd\xe8!\xd4*\x1a\xba" +
	"w\xderl\xf7\x8f?|\xcd\xd2\x12\xceN\x07\xb9\x15" +
	";C\x7f`\x86\xcer\xd3\x85\xef\xb3\xde\xfd\xf1\x8eo" +
	"\xf4&\x85\xb9\x1a\x1f\xe8\xfa0X\x83\xbd\x1f\xc6.\xf4" +
	"|\x18e\xef\xcb\x8f~\xf3\xf3\x80\xeb\x9f\xf8\x86\xb9\xd0" +
	".=\x0cM\xea<S\xb7tf\xea\xbbA\xedO\xdb" +
	"\xae\xeb\xfc\xf27\xcc>O\x9eI>&\xc9\xcbg\xea" +
	"v\xccL\xbdI\xb7\x15\x7fr\xf5\xb1q\xc7\xbeaq" +
	"\xdd\x8eY0\x0b\xfbg\xe9\xfb\xdf,\x1c\xd5\xecZ\xbf" +
	"\xed\x9bg\xfa|\xcb\x9a\xb5og\xc1,_\xd0\xe9\xcf" +
	"\xcf\xc2Y\xbb\xa2\xa8vP\xfc\xc85L\xfay\xb3a" +
	"Y\xae\x9d\xad\xcf\xdal\xa4\xff\xd3\xc6\xda\xa9\xbd\x07\xbf" +
	"\xf6\x1d\x93\x8b\xe6\x00W\x17\xccA\xfa\xdc9H\xbfc" +
	"\xc7[\xc7\xf6\x9d\xbb\xfc\x1dk\x15\x9c\x9e\x83&\xc5#" +
	"\xbaI1\x07G\xe8\xcbu\x17?\xd8\xfd\xd7\xd2\x1f\x98" +
	"C:\xee\x11\xd0)\xbc\xfa\x03\xd2#\xf8\xc0\xf4\xc9\xd5" +
	"\x87\xe2\x1e\xbc\xf7\x07V\x83\x0e?\x02\x9b\xc7\xb7:\xfd" +
	"\xa9Gp\xcen\x1a\xef}\xf9\xe0\xc2=?\xb04\xbb" +
	"=s\x81)\x0e\xcd\xd5\xb9n\xae\xaeu\xbd\xa8\xfd\xe7" +
	"\xd0\x83='\x9ff}`\xdc\xa3 '\xaa\x1f\xd5M" +
	"\xbbG\xb1\xc7\xde\xa7:L\x9d\xf4\xd7\xcd\xa7\x99=\x88" +
	"\x9d\x0f|\xdde>>\xd0y>>P3f\xda\xf4" +
	"\xf4U\xcf3?\xb0y>H\xeb}:\xfd\xde\xf9\xd8" +
	"\x83\xd5?u\xfd\xfe\xa7\xcf\xce\xfd\xc8\xa2_\xb5\x00z" +
	"\xb0u\x01\xd2o^\x80\xf4\xf9\x9b\xfe\xb2a\xf3\xdb\xd5" +
	"?\xb1R\x89\x06.\\\x08s\xbc~!\xb6n\xedB" +
	"\xdc\xf0?\x9b\xf9\x8f\xd2\x91\xbdO\xfd\xc4\xb4\x89\x16\xa1" +
	"M\xb4X\xb7\x89\x16\xe3\x14,\xffr\xf2\xba\x95I\xf6" +
	"3,\x1e\x9d\xbc\x18Fh\xa1N?O\xa7\xef\xf0\xce" +
	"\xda\xbe\xb3\xd6\x0e9c\xce[\xc6\x06\x9d^\x0c\x0d\"" +
	"K\xf45\xb4Xw\x1bu\xd5\xde\x1b\xd6\xadv\xf8\x19" +
	"\x16\x17\x05\x1e\x07\xa6\x98\xf18~a\xea\xe3\xbaa*" +
	"\xf4\xbc\xf4\xc9\xeaQg\x98\xb2\xebq\x94]:\xfd\xe9" +
	"\xc7q\x88\x84\xc2\x7f*/\xff\xf3\x11f\x0f\xf6-#" +
	"\xdbH\xf2\xf1eH\x7ft\x19\xae\xb2\x8amSg\x9c" +
	"L\xff\xfe\x0cK\xf6^Z\x06S\xd6y\xb9\xbe\xee\x97" +
	"#\xfd_\x7f\x1e;?\xff\xcc\xaa\xb3L\xb7\xd7r\xe8" +
	"p\x8eN\x9f\xb9\x1c\xdbs$\xfe\x85\xaf-\xff8\x80" +
	"\xf4\x1dM\xf4]V\xc0*\xeb\xbd\x02?\xd6s\x05\x19" +
	"\x1e\xcb\x91\x86\x1eO\xcd\xff\xf4\xea\xea/\xce\xb2D\xdd" +
	"\xd6\xd5 \xb9\xf6\xae\xd6\xb7\xff\xd5\xba\\\xf9\xa8c\xe9" +
	"\xe2u\xaf\xfcr\x96\xa9\xc7\xae\x81/\x9c\\\xa3\xeb\xb1" +
	"kpD\xe7ux\xef\xe4kq\xfd\xfe\xc3\xeaq\xce" +
	"Z\x98\x81\x92\xb5H\xefX\x8b=\xae\xbf\xe1\x857m" +
	"Sb~f\xae\x82\xea\xb5\xb0.g\xe8\x0fL]\x8b" +
	"\x1f\xe8q\xaa\xe1\xc3_\x07]\xf73S-=\xbd\x16" +
	"6p\xb2N\x1f\xe0\xb5\xfa\xc2\x1c|{\xf1\x06\xe1\xe0" +
	"\x15\xe7X\x96\xf2\xaa\xa7`\x12v<\x85\x0fl}J" +
	"\xb7\x94\xa7$\xbfp\xd7\xbf\xb2S\xcf1\xdbt\xf8\x19" +
	"\xb2\x8e$\x9f~F\xf7|=\x83+\xb3\xbe.\xff\xd6" +
	"[\x8fO>\xc7\x9a\xb6\xe5\x1b`\x906o\xd0U\xeb" +
	"\x0dH\x7f\xd3\xe3i\xff\x9c\xd7\xf7M\xf6\x0727B" +
	"\x1fJ6\xea\xa3\xb4\x11\x1fP;\xf6Z\xfd\xef+\xc6" +
	"\x9cg>\xf0\xedF`\xd4K\xfa\x03\x176\xe2(\xad" +
	"}\x7f\xd1\xb05\xf5\x1b\xce\xb3\xb4\x9c\x92g\x81^z" +
	"V7\xb3\x9f\xd5\xb5\x9c\xef\xc7\xafq?a\xe1\xff\xcb" +
	"\xfc\x82\xb4\x09\xe6a\xf2&\xfcB\xdd&lR\xff\xbf" +
	"(\xdfO99\x94\xfd@\xd7\xcd\xf0\x89\xbe\x9bu\xdf" +
	"\xd7fl\xd2\xdduC\xfe\xb5\xf3\xd7\xef\xd9\x0f\xac\xda" +
	"\x0c\xa3\xbaC\x7f`\xab\xfe\xc0G\xc7\x9e\xf8\xd7\"\xb5" +
	"\xf6\x17\xa6\x03\"\xfey\x98\xb8\xeb\x9f\xd7\xf5\xfd\xe7q" +
	"5\xec\x13\xde\xdd\xf8P\xbb\x17~a\xf1*y\x01\xfd" +
	"\x89/\xe8\xab\xed\x05\xfc@\xcc\x98{\xda?<\xea\xe5" +
	"_\xd8\xbc\xf7\x02l\xcb\xb3\xf5\x07f\xbc\x80}~\xf1" +
	"\xa7\x1e#\xef\xa9\xfe\xec\x17\xa6r\xdam\x0by\x97$" +
	"\x0f\xd9\xa2\x9b\xfb[\x82^\x9aOV^\xf84\xf0\x97" +
	"_\x99}\x18\xb7\x15\xdaT\xbdU\xdf\x15\xb6b\x1f\xc6" +
	"\xbc\xc7?\xde\xf1\xc3\x95\xbf\xb2\xfaP\xb0\x0d\xfa,n" +
	"\xd3u\xf8m\xb8~\xce\xdf\xffX\xf7\x83\xfb\x8e1\xe9" +
	"gl\x83i[\xae\xd3/\xdd\x86}~c\xed\x8d\x9e" +
	"\x8c\x95\x1d/\xb0X\xf5\x12\xd2'\xbe\xa8\xcb\xec\x17\xb1" +
	"=R\x87\xadI\x0f\x8f\xcc\xb9\xc0:;2\xf0\xe4\x8b" +
	" 1\xce\xbe\xa8\xaf\xbd\x17\x09\x9egX|\xed-'" +
	"V\x88\x09\xbf\x81>~m\x84>\xbe\xf5%X\xff{" +
	"_B}|\xf7K\xba>~\xf4\xe6\x1bg\x8ex\x7f" +
	"\xc0o\xccI\xd8\xfc\x12\x8c\xe9\xfe\x97t\xcd\xe5%\x9c" +
	"\x84\xc4\xb7o\xdc4w|\xc1oL\xfd\xf7e\x90\x91" +
	"u/#}\xe0e\xa4\xbf\xeb\x83c\xbb^\xbea\xd4" +
	"o\xac\x11\x8a\xdf\x093\xd0m'\xd2w\xdd\x89#*" +
	"|\xfa\xc0\x17\x83\xc7La7(s'\x0cQ\x89\xfe" +
	"\x80c'~ P\xdf\xaf\xabm\xdd\x8e\xdfX\xe9\x95" +
	"\x03\xcf\xee\x84\xd5\x1c\xbbK\xd7\x1fw\xe9\x0a\xe7\x96Y" +
	"\x99\x97\xfe\xdd\xb3\xcd\xef,!y\xfc\x15\xd8\xf9\xcf\xbe" +
	"\xa2o;\xaf`\x93\xb6\xee:2\xcd\xb3\xe1*&}" +
	"\xfc\xab\xf0\x81n\xaf\xea]xU\xf7\xc4\xdf\xdc\xe6\xbe" +
	"\xffz\xc7\xfe\xce\xee\xc2\xab\xc0\xd8c\xf5\x07J^\xc5" +
	".\xfcb[2/\xdb\x93}\x91\xc9\xd8g_\x85A" +
	"\x8a\xdd\x8d\x0f\x90\xdd\xc8\x16\xe7\xbf\xfc\xf0\xcc\xdf\xc7\xd7" +
	"\\d\xb5\xe8\xf0n\xd4\xa6t\xfaS\xbb\xb1E\x9f?" +
	"f\xc9[\xb8n\xcc%\xd6\xa4\xc5\xee\x81\x1et\xd9\xa3" +
	"\xeb:{\xb0A\x1f\xf2\x09\x13z_7\xeb2\x18\x09" +
	"\x16\xb31\xbeu\x0f4h\x9f\xfe\xc0\xde=\xd8\xa0\x0d" +
	"\xdfl\x88M\xbej\xf1e\xa6\x08~\x0dt\x8b\xcd\xaf" +
	"\xe9\"\xf85\xfc@\xdb\xb5\xabg\xee\xf0\\l`\xf2" +
	"u\xe6\xdf@;*\xf9\x9b\xee\xdd\xf8\x1b\xf0\xf5\xb0\x06" +
	"I\xd6DU\x16<1\xb7\x08>\xe9\x16\x97\xe0\x93}" +
	"\xb7\xb8\x14\xafW\x91o\xc6?\xd2sj}%>\xb7" +
	"\xa0\x11\xb1\x90\x10G[k\x0c\xc7\xc5\x10\x8eK\xec\xd9" +
	"\x9d\xe3\x1c=\xac\xc4\xd1\xc7B\x12\x09\xb1\x13\x00{\xa7" +
	"r\x9c\xe3&+q\xf4\xb7\x908\xb1\xd6Gb8\x0b" +
	"\x89\xe1\x88M\x10\x8c?\xc2\xdfl\xd3\xd47\xb3\xebd" +
	"\xc1+\xb9J\x15Y\x1cV\xa9(~\x11\xfeU$\xfa" +
	"\xac\x9e:hD\xc7p#r\xf28\xce\x91m%\x8e" +
	"B\xaa\x11\x05\xe39\xce\x91o%\x8e1\x16\x92h\xb1" +
	"\xd8\x89\x85\xe3\x12K\xd29\xceQh%\x8e{-\xa4" +
	"\xc1=\x11^\x98\xeb\xe68.\xdc(\xf7\xc4\\\xd9\xaf" +
	"\x092gs\x89\xb9\xee\x10\x9c\xe1\x9eX\\\xe7\x13\x1b" +
	"5\xbd\xc9\xe1*\x964\x8f\x98/\xf9\x89f\x1a\xae4" +
	"c\xb8\xc2\xa3\x95\x1e\x1c\xadl\x0bIq)\x01Y\x0b" +
	"\x7fV\x83\xd7\xf8I'\x8e\x14Z\x09I0\x8enp" +
	"\x04\xc0p;b\x9bjGA\xc0\xa3I\x05J\x8d\x98" +
	"\xab\x89^g\xa0\x8c\xe3\x9a\x1e\xb9\xf0\xc0\xa9\xf4\xc0\x11" +
	"\xc6\xc0\x95\xab\x8a\xd7\xe9Q4\x18\xb8\x04\xc3z\xe2\x08" +
	"I\xe0H\x83\x1c\xf0\x96\x89j\xae\xcc\xa585\xc1U" +
	"etF\x81g\x18\x0f\xb48\x9a\xd9\x01\xd1S$\xfa" +
	"}6E\xf6\x9b\xf9/\xcf`\xb5\xf0\xd4\xf7\x05\xb0\x8f" +
	"\x958\x06[H\x83&\xa8\x15\xa2\x169\xcb\xa2\xacI" +
	"Z]$\xd6b+re\xbfOti\xdc\xffF\x03" +
	"|\x1e\xa1NT[\xd9\x80,Av+\x1eI$\xaa" +
	"\xa9\x09\xa9\xac5\x98fp\x95M\x16\xbc\"\xe9\xc8Y" +
	"HG\x8e\xa4H\x9a\xe8\xa5x*\x1c\xd9\x88\x96\xa7\x86" +
	"\x07$\x8f\xbb@\x84I\xce\x915\xb5N\xe7\xa9>\xa1" +
	"\xe6\xf0\x99$\x95\xe3\x9c\x83\x89\x958G\x900[\xf1" +
	"9$\x8d\xe3\x9cC\x01\xce'\x06g\xf1\xb9$\x9d\xe3" +
	"\x9c\xd9\x80\x17\x02n\xb5\xd8\x89\x95\xe3\xf8\x02R\xc4q" +
	"\xce|\xc0\xc7\x00\x1ec\xb5\x93\x18\x8e\xe3K\xf0\xf5\x85" +
	"\x80\xdf\x0bxl\x8c\x9d\xc4r\x1c?\x96\x94r\x9cs" +
	"\x0c\xe0n\xc0\xdb\xc4\xdaI\x1b\x8e\xe3\x05\xa2r\x9c\xf3" +
	"\x01\xc0=\x80\xc7\xb5\xb1\x13<\xbcB\xc6s\x9c\xb3\x12" +
	"p\x0d\xf0\xb6qv\xd2\x96\xe3\xf8jR\xc6qN\x1f" +
	"\xe0\x93\x00oG\xec\xa4\x1d\xc7\xf1u\xf8\xfeZ\xc0\xa7" +
	"\x03\xde\xbe\xad\x9d\xb4\xe78~*\xbeg\x0a\xe0s\x01" +
	"\xef\xd0\xceN:p\x1c?\x1b\xfb5\x1d\xf0\x05\xc4<" +
	"\x07\x1e\xb1F\xf4\x84WF\x99 W\x89j\x98\x11\\" +
	"\x95\x82:\xcc#\xf89\xe2\x0fKNU\x90\xc3+\xa9" +
	"A\x93\xbcb\xbe\xe0\xd78\xeb\xdd\xb2\x01\xaaRY@" +
	"\x13s\xb8\x14Y(\xf3\x18\xb2JS4\xc1S\xacJ" +
	"\x9c\x0d~\x0e\xc3\x1e\xc1\xaf\x15\xabR\x19\x17G\xa3\xbe" +
	"@\x99Gr\x8dT8\xab\x16nl\xc3DE\x16%" +
	"\xd9\xafq6Av\x85i3&\xa2\xf0\x8c\x9e}\x87" +
	"\x17hJE\x85G\xd4\xf9%&\xcc\xbe\xf1 Z\xda" +
	"Z\x89\xc3n\x01!\x01$\xd1\xef\x119\xb5>\xd1-" +
	"i\x92\"\xe7+\xae*%\xa0\x15K^\xe0\xcb8M" +
	"\xc5M\"!\xfc\x19a\"\xc79\x1e\xb0\x12\x87\xc7\x10" +
	"u\xd2\x1c\x8esx\xac\xc4QK\x89\xba@\x11\xc79" +
	"4+qL\x01n$\xc8\x8d\x89\x93\x01\x9cd%\x8e" +
	"Y\x16\xd2 \x06?\xcae(\xf2HjZ\x1b\xfc\xa2" +
	"K\x91\xdd\xfe\"\"z\x05I\x96\xe4\x0aZ\xe6\xd4\x88" +
	"\xb2V\\\xe7\xe3\x88\x18\x89\x8d\x14\xbc\x80\x85\xde\xd1\xb2" +
	"\x18P\x94\xaa\"\xb1:\x10'\xfa5\x934\x87\x91\x1c" +
	"j%\x8e|J\x10\xe4\xa6R\">\xb8\x0d\x16dq" +
	"\x9cc\x84\x958\x8a-$c\x82$\xbb\x95\x09aN" +
	"\xd3\xa8\x8d\xae^\xab\xd5\xca%O+\x1a7\xbc \xc7" +
	"\xabhbi\x9c\"\x8b\xa6iN5\xa6\xd9\xa6\x89\xb5" +
	"Z\xa3\x97F\xa5\x08(^\x9f\xe0\xf7\xeb\x82\x07>p" +
	"u\xf8\x03;@\xe8n\xb7\x12\xc7\xebT\xef\xf7\x80\x16" +
	"\xb0\xdbJ\x1c\xefPZ\xc0>\x18\xa7\xd7\xad\xc4q\x00" +
	"f\xd8\xaa\xcf\xf0\xfeR\x8es\xbcc%\x8e\x0f@\xd8" +
	"\xc4\xa0\xb0I<\x94\xc4q\x8e\x03V\xe28\x02\x92&" +
	"\x16%M\xe2a\x00\xdf\xb7\x12\xc71\x103mP\xcc" +
	"$\x1e\x05\xf0\x03+q\x9c\xf8\x1fi\x16\xee\x89\xce\x09" +
	"\x92\xe6\xaa\xe4\xac\x06\x0d\xa9#\xed9\x0bi\xcf\x11R" +
	"\x1b\xfe\xd7\xc4\xd0\xbf\xa2PFT\xc1-\xaaY\x01R" +
	"g\x1a0\x18\x86-V\xe2\xd8M\x0d\xd8\xae4j\x14" +
	"C\x03\xb6'\xcf\x18E\x12\x1c\xaf}\x80\xbde%\x8e" +
	"\xf7\x0d\xe1\x9cx0\x9d\x1a\xc4\xa0dN<TF\x8f" +
	"Wlp\xbc\xe0\xf1#V\xe2\xf8\xd2B2\x04\x17\xac" +
	"\xe0P\x7fS|\xaa\xe4\xa2\x04\x186\xdf\xb4Wj\xa2" +
	"\x17V\x1e`A6\xca\x00\x8c\x92G\x82G\x15\x05w" +
	"\x9d\x93\x8bS<\x06Z\x1d\x10p\xefo\xd5\xc6\x0b\x0a" +
	"T\xb6\xa2\xa8\x9cy\xefOgm\xbc\xe9\x86B\x90\xe1" +
	"V\x14U2&;\xb2\x9f\xe1\x0f[\x9b\xfap\xc6\xf0" +
	"\x02\xe8\xa5I\x90\xc1\xe2\xbd\xd7J\x1c\x95\xd4W\xc5t" +
	"C\xba\x85\xa7M\x02J\xb7\x958|\xc6\xb4y\x01\xab" +
	"\xb4\x12\x87f!\xf5\x8a\xc7MoK\x19\x15^\xfa\xcf" +
	"zY\x9c\x10\xf1w\x99\xa0\x93G\xdf~\xa7O\x98 " +
	"\xfb\x9b\x90\xf7=,$\xc3\x8f\x04\x866\x12N!0" +
	"i#M~\".\xff\xce\xe1Q\xe8\xd8\x94E\x92R" +
	"#x\x02\xe1ND\xec\xcb-+?\xf9\"0\xa3\xbf" +
	"R\xf2\xe9\x16Q\x9c\xa0\x99\xa7g\x851\xe8\x89 p" +
	"\x01\xf4n\xe38\x87\xcfJ\x1c\x93\xa8\xe9\xa9[d\xec" +
	")a14\xe3Y\x8es\xcc\xb2\x12\xc7\x12\x0bi\xa8" +
	"P\x95\x80/_\x14H\xe8\x9b\xd6Z\x1f\xe9\xc0YH" +
	"\x07\xae\xf1\x8f\x85)\x8a$ka\x95\xa1A\x15$7" +
	"4\x97\x84\xdaK\x8cgM\xbf\x15*\xb6\x88G[\x1c" +
	"\x06\xa7P\x97/\xc9UY\x8a\xbb\xeeN\x15\xd7!\x0c" +
	"B\xaf\xb0\x0ex=\xc9\xe38g\x0fP~\xfa\x10\x83" +
	"M\xf9\xde\xa8\x14\xdd\x04x\x7fb\x0c\x05\xdf\x17\xe9\xfb" +
	"\x00>\x98\x18\xa3\xc1\x0fB\xfc6\xc0\xb3\x89!\x97\xf9" +
	"L\xc4\x0de2(\x9a\xf9\\\xc4G\x00^L\x0c\xe9" +
	"\xcc;\x107\x94\xc6\xb88]\x094+\x8dm\xdb\xea" +
	"J\xa0\x80J\xa0\xa14\xb6k\xa7+\x81\x12\xe2\x86\xd2" +
	"\xd8\xbe\xbd\xae\x04V\xa3R\xea\x01\xbc\x96XH\x83\xbe" +
	"\xd0u\x99e\x92O!V\x13\x02\x15^Q\xd6\xfaR" +
	"$!,\x8d\x81\xf5c`\xfd\x19\xd8\x00\x1a\x93\xfc9" +
	"5\x8a\xa7F\xe2\xacrE\x18\x14\x01\x12\x87\xab\\\x9c" +
	"\x12\xf0\x99\xd0|\x91\x8b\x03\xcd4\x88\xda*\x05\x7fe" +
	"\xf4\x9b\xbfS\xf2\xfa<b\x81\x98\xe2\xf7\x0b\x15Q\x19" +
	"j\xb0T{Y\x89\xe36\x0bi\xf0k\xaa$WD" +
	"\xc8\xf9\x14\x97\xe2Q\xd4f\xe5\x0dh\xa1\xc1\xcf\x8f\x14" +
	"S&\x94\x06\xf5\x0e_\x98\x15\x895\x8f\xe3\x8a\xacV" +
	"\xe2\xech\xa58\xb1\x9d\x15\xcc\x8b\xb6\x80\xdb\xad\x14'" +
	"&\x02\xb93\x01\xf0\xab\xada\xb1\xc9w\xb1\x82\xf5b" +
	"\x07\xf8Z+e\x8dt\xb5\x02C_\x01x\x7f+e" +
	"\x8d\xf4\xc5\xd7\xf4\x01<\xdfJY#\xb9\xd6,\xb0v" +
	"\x00\x7f\xc0JY#\xe3\xac\xc0\x88\xf7\x02^k\xa5\xac" +
	"\x91\x00\xe2\x1a\xe0\x0b\xac\x9452\x0f\xdf3\x0b\xf0%" +
	"\x80\xb7\xb7\xe8\x8c\xb8\x10\xbf\xbb\x00\xf0\x95\x80wh\xab" +
	"[#\xcb\xf1=\xcb\x00\xdf\x0ex\xc7vv\xd2\x91\xe3" +
	"\xf8\xadV\xb0^\xb6\x00~\x00\xf0\xf8\xf6v\x12\xcfq" +
	"\xfc~\xa4\x7f\x07\xf0/\x01\xef\xd4\xc1N:q\x1c\x7f" +
	"\x12\xe9O\x00~\x11p\x9b\xd5Nl\x1c\xc7_\xb0v" +
	"\xe78\xe79\xab\x95\x14\xc5XHbB\x8c\x9d$p" +
	"\x1c\x7f\xc9\xba\x88\xe3\x8ab`\xf0\x01N\x8c\xb5\x93D" +
	"\x18\xfc\x18\x18\xcd\x18\xc0\x13\x00Ojc'I\x1c\xc7" +
	"\xc7#\xde\x16p;\xe0|\x9c\x9d\xf00)\x88w\x04" +
	"\xfc\x0a\xc0\xedm\xed\xc4\xceq|\xe7\x18Xv\x09\x80" +
	"_\x0dx\xe7vv\xd2\x19f+\x06Z\x7f\x05\xe0=" +
	"\x00\xffS{;\xf9\x13\xc7\xf1\xddb`\xd4\xae\x06\xfc" +
	"&\xc0\x93;\xd8I2\x88+\xc4\xaf\x05\xbc\x17\xe0W" +
	"t\xb4\x93+8\x8e\xef\x193\x11\xc4\x15\xe0\xfd\x01\xef" +
	"\xd2\xd1N\xba\xc0\xec\xc6\xc0(\xf4\x01|0\xe0W\xc6" +
	"\xdb\xc9\x95 \xae\x10\xbf\x0d\xf0l\xc0\xaf\x8a\xb7\x93\xab" +
	"@\\a{\x86\x02~o\x8cE\xb7\xf0L\xeaK\x83" +
	"\xbfRQ\xcd\xb6\x80G\x91+Lt)\x13i\x05=" +
	"\xa3\\\xa9(\x12\xdd\xa1\xfd\x13P\xd85\xcb\x95\x8a\xe1" +
	"\xaa(\xca\xf0\\\xe4O\xf5\xe5JE\x16l\x7f\x8d\x9f" +
	"(\x90d\x97\x87\xb3J\xbe\xd0o\xed\xa9\xdf\x84Z\xe6" +
	"o\xf5\x15\xaaP#ia\x05\x15MSPhi\xfd" +
	"J\x15$yX\xa5 sVW\xa3\xef\xc2o\xd9\x01" +
	"U\xe0l\xa8\x19\x99~\xf5\xcb\xca\x84\xa6\x9e\x84\xdf\x9a" +
	"|2\xce_U\x17\xfe>\x88\x88\x9cZ_\x01\x09x" +
	"4\xc9\x87\x0e\x94P{S\xfcB\xb986\xe2\xaf1" +
	"\x11\x7f\x95\x86\xfe\xb2y\x85\xda\xf0\x1f\x0d\x01\xd9-\xaa" +
	"\x13\x14\x95\xb3z\xdc!\xb0\xde\x0b\x03(\xf9\x8c\xbfa" +
	"\xd0\x8c\xbf\xb1\x1d\xceJE\xe52`\x9e\xc5\xb4\x08\x03" +
	";\xd7=2\xc0\xd9\xbce\x94\x1f\x00\xe1Fv7\xc2" +
	"\x85\x8a$sV\x8dR\x9c\xc2\xe7T\xa2u\xe3\xe4\xdf" +
	"\x89\x8e\x1c\xa7(\xa8\xae\xca\xe1\x01\xc9\xeaq\x83\xe0\xb4" +
	"\x87%\xf6d\xd0\x14k\xad\xc41\x9d\x92\xd8S\xd3(" +
	"\x9d%\xa4\xc8\xcc\x00\xd9>\xddJ\x1c\x0b(Ef\x1e" +
	"\x80s\xad\xc4\xb1\x8c\xb2\xa7\x96\x82\x19\xbd\xc4J\x1ck" +
	",\xa4\x1e\x9a#\xc8a\xed8\xd2)\xd2 \x08\x85\xa8" +
	"\xcf\xd0\x9c\x04\xdc\x05\x12\x9e\xc6\x18\xde\x92\x96;\x9f%" +
	"L\x14\x04u4Z\xbeNMPu?m\x13>\x89" +
	"&\xb4\xf6f\x9c\xbf^\xf1\xee\xf2lA\xb7\xb7\xa8\x01" +
	"Me\x0dh:k@\xbbs\x9cc\x8a\x958\xe6R" +
	"\x03:;\x8d\x1a\xe5\xd0\x80\xceK5\xd4E[\xa5\x12" +
	"\x08sO\x86W\x92)\xcfN\x9c[\x08/\x88\x14\xaf" +
	"\"k\x95a\x05\xb8N\x14\xd4Vxq\x80i\\\x8a" +
	"\xd7\x06Sg\xd2|\x8b(\x1b$\xecbI\xa7l\x90" +
	"`\xf7\xbcE\x94\xdb%\xe4a\x09d\x19*r\x83\xa2" +
	"UB3ha\x98\xe1\xad\x8bP\xd5+\xa0!b\xb5" +
	"\xc4\x910\x07\xd5+\xe5\xe5\x92KlEo\x0aE\x0d" +
	"\x9dG\xba\xfez[Xi\xa8C\xe7\xa3\xe1\xec\x0bi" +
	"\x0dS\x09l\x14\x93\x00\x9fE\xc2\x1d\xe2g y\xd8" +
	"\xd7\x17\xea\x13?\x0f\xd5\xddY\x80/A\xf5\xd5\xa2k" +
	"\x0d\x0bQ]\x9c\x0b\xf82T_-\xba\xd6\xb0\x14\xd5" +
	"\xd4%\x80\xafA\xf5\xd5\xaak\x0d\xab\xf0\xfd+\x01\xdf" +
	"\x80\xeak\x8c\xae5\xacG\xfci\xc0\xb7\xa0\xfa\x1a\xab" +
	"k\x0d\x9b\xf1=\x9b\x00\xdf\x89\xeak\x1b]k\xd8\x81" +
	"\xf4\xdb\x01\x7f\x1d\xd5\xd78]k\xd8\x83\xdd\xda\x09\xf8" +
	"[\x84\xd2\x1a\xf6\xe2{^\x07\xfc\x00\xe0\x1d\xad\xba\xd6" +
	"\xb0\x1f}\x9e\xef\x00\xfe\x01\xe0\xf11\xba\xd6p\x08\xfb" +
	"{\x00\xf0#\xa0\x06\xfbD\x0d\xa3\x01\x1c\x09\xcfI}" +
	"@\xad\x10e\x97!\x9d\x05\x17\xc6<p\x1eCS\xed" +
	"\x11\xfcZ\x857\xac\x85\x82\xc4\x8bX\xef\xb2i\xef\x04" +
	"\x0c\xa4\x07G<\x11t.\x93\\\x00L\x15\\&\xf9" +
	"!\xa2\xe3\x90\xa2\xab\x0f\xc8B\x8d \x19\xef\xf2\x8b\xb2" +
	"\x06\xb2'\xc2\x85\x1fb\x9d\x08gVF\x85\x97\xe9\xdb" +
	"j\xd2~\xb59\xb5\x80l\x12> 9;Z\x89\xe3" +
	"\x0a\x0bip\x07TA\xe7\xd0V8,\x86\x83i\x98" +
	"\xa7HDn\xdaA\x18\xf6\x0f\xe6\x19\xbe\xc0\xb0\x0f\xd4" +
	"Qj\x84{\xcc\xf2\xafN\x094\x9a\x00/\x86\x03d" +
	"\x81\xb3z[\xe1,,V\x05WU\xb1\xa0\xc6U\x88" +
	"Z3C\xa0Gk\xa4\xd6\x05K\xb2E\x8f\xa8\x89N" +
	"_\x9c\xe8\xf1\x98,\x91\"\x96%\x92E[\">\xd1" +
	"\xe3qz\x14\x8e\x84Cq\xf5\xfe\x80\xcb%\xfa\xfd\xad" +
	"\x9b\x03\xd9\xed\xf4\xc5\x09\x13p\x16n\x0a\x0b\x97v\xb8" +
	"\xfac`\x95$\xd0\xc2%\x1e\xf1\xb6\x80\xdbi\xe38" +
	"\x11\xf1\x8e\x80_A\x1b\xc7\x9d\x11O\x00\xfcj\xda8" +
	"\xee\x82\xb8\x1d\xf0ki\xe3\xb8+\xae\xf2+\x00\xef\x01" +
	"\xc2+h\x1bwC\xf2\xab\x01\xbe\x89\x0e\x90\\\x8f\xf8" +
	"\xb5\x80\xf7\xa2\x03$=\xd1f6l\xf8vmu\xe1" +
	"\xd2\x17\x85B\xd8\x86\x07\x85i\x0c\xad=\x8d5\xfe\x90" +
	"\xe41\xf4\x1fc\x99JV}\xa5(\xb8%\xb9\"\xfc" +
	"#-\xfem`M\x87'\xc3+\xd4fz<\xca\x04" +
	"\xce*\x1a\xae>UD\xe7\x92\xc6\xd9$ok\xf6\x84" +
	"\xfc;\x87g\xfa|\xa2\x90\xa2\x82\xdae\xe2\x9d,\x96" +
	"\xc7\xaf\xbb\xc1P\xf5\xf8M\xc3\x0d\x19\xe7)\xafh\x85" +
	"\xe6\x00\x0b\x02\xc3\x06Q\xb8\xb4\xb2\x9a\x0a\x1b\xd7\x8b\xb2" +
	"\xa6Jt\xdc8\\Q5Z\xe5\x10Tx\x8f\xe8\xf7" +
	"\xe7\xca5\xa2\xac)jJ\x9d\xd3\xa3h\xd1\x84\x1d\xf3" +
	"\x8cud\xf3{\x14\xcd\x90\xa1\x81\xb2\\\xd9-\xd6\xb6" +
	"j\x15;\x83\xa2\xa6\xb5_\x8e\xd0\x14`71\x0b\xac" +
	"\xd6\xa9\xc7\x85\x1e!\xaeN\xc4\xb0\xeb\x15\xe1V,\xcf" +
	"2t\xd9p+V\x81pYi%\x8e\x0d\x94:\xb7" +
	"\x1e(\xd7X\x89c\x13\xa5\xcem\x849}\xdaJ\x1c" +
	"[(un3tb\x93\x958vR\xf1\x86\x1dY" +
	"\x86\x9f\xde\xac4c,>?r\xeb\xab\xd7\x94|Z" +
	"\x95N\xf1Jr\xa6\xd0\x9c\x12]\x0f\x1b\xa5_l^" +
	"\xbaQ\x9e\x16x\xdc)\xfa\xfd\x92\xa2\xef0-\xb9\xc4" +
	"K\x8d\xa9i\x1c6\xf4k\xb0\xce\xe8\x80\x07\xf3\xf3\x13" +
	"\x14\xd5\xe3\x0e~?otq\x91\xe8\xf7)\xb2\xd5/" +
	"6\xa3\xb8\xfb5A\x0b\xb4\xc6\xab)jNQ\xad\x11" +
	"\xd5;%\x8f&\xaa\xe68e\x96\xe1\xb7\xae/G\x0a" +
	"\xbf\xd9(\x8d*\x94\x90\xab\x89\xde\xe6\x121\x8c\x14\x96" +
	"tzk\x0e2\x93Cm\"\x13\xc3\x94g\x11\xeau" +
	"\x13\xe9\x18Q\xe8\xc6\x98\xa3\x90\x99\xd9d\xbc\xb6\x07\xe8" +
	"\x06B\xbe\xe4\xd7\x0cI\x13.\xc4\x10\xad\xff>\x05e" +
	"^ks*X*\x81[\x0ar\x12\xc75\x8a\x8d5" +
	"\xfd\xf9LUU&4\x9b\xc0\x90hd0\xa4Ff" +
	"0XB\x19\x0c\xa9\x91\x19\x0c\xd6P\x06Cj\x843" +
	":\xb4?\x9b\x9d\xd1\xa1\xfdy,:\x97\xa9\x0c\x866" +
	"\xa1\x0c\x06x\xcf\xbd\x80W\xd2\xcek\x91t\x8fpR" +
	"\x87\x9c\xd7\x12\xbe\xdfpR\x87\x9c\xd7\xd5\x88\x1b\x99\x0d" +
	"!\xe7u\x1dj\xed\x1a\xe0S@/\xe8\xa0+\xff\x93" +
	"\xd1X\x08\xdb:\x11\x81a\x9b_u\x19\xbb\xb6_u" +
	"\x8d\xa1\xff0\xfc$5\xa2Gq\x05\xc3m!\xcc#" +
	"\x04dWe\xa6\xcc\xc5Ux\xc4\xf0c\x9a\xe4\xd1B" +
	"\x7f\xc4\x09\xaa+L\xeeW\x02\xaa\xcb\x14Ke\xa4\xd4" +
	"\x98\xc3\x7f^\xc5-zZ\x1bZ\xcf\x05\x025\xe0K" +
	"\xd1\x86\x09\x8d\x82\xebY\xac\xe0z\x91\xb1BC\xd6\xad" +
	"#\xcb\xc8\x9f\xd2\xd5\x01\x89j\x96\x88\xbe\xf1\x08\xab5" +
	"\x88E\xbf7\x15\x05\xa37z\xf0\xa6\xc4gs\x07\xa3" +
	"P\x94\xaf!\xdd\xf05\x84]\x0d\xa5\x94W!\xa4\xe9" +
	"\xcf.5\x1c\x08\xa1\xdc\x9b\xc4\x85i\xb4\xef&\x18\xdb" +
	"]\x0a\xbb\xee\x02+q\xacll\x13\xe8\xf9L##" +
	"\xf5\x7f\x0f61\x12L\xc1\xa8\x15I0\x12\xd7\xf5$" +
	"0\x9b*Hn\x92`\x94>2\xe5\x86E\x93\x8dD" +
	"%(\xb2\xa3\xa5\xe1`i)\x15\xa2\x0b\x0d\x847\xdd" +
	"\x08\x8c\x86\x07\xa2\xba\xd4pJ\xd4\xa3\xc7\x81f1\xfc" +
	"jd\xff\xfe\xf0\xf6\x16\xb9K\x08Ub\xa1\xa8\xa7\x9a" +
	"\xf5\x08w\xe54\xcc\xca7V\xe28Gq\xe0Y\xe0" +
	"\xc03V\xe2\xb8H\xed\x11\x17`\xaa\xceYI\x11%" +
	"\x8e\x12/\xc1H\xfcj%\xce\x18Z\x18\x110\x0a\x1c" +
	"\x17\xad\xc4\xd9\x96\x96E\xb1 s\x8a`\xedw\xa4E" +
	"\x91\xd9t\x09\x89\xa2x\x14!\x86\xe9\x12\x12E\x89\x88" +
	"\x87M\x17\x93\x8b\x8f\x9d\xe8\xe4\xa2\xd2O\xc4Z-\xa0" +
	"\x1a\x7f\xfbD-R\x0aI\x13)\x09B\xfb\xc5\xbd\x92" +
	"\x9c\xed\xad0\xfe\x14j\xa9?[\xe6\xaaL7\xe8\xbd" +
	"\x01U\xbcS\x92%\x7f%\x17\x8d\x15@\xc5\xfd\xeb'" +
	"Hr\xbe\xe27\x9a\xe3SZ\x17_-\x10UW\xa5" +
	" k\xd9\xa2\x07\xb5\x05\x93(Jc\x89\xa2<\x96\xb2" +
	"\x90g(\x0b)\xb2\xcfEI\"}\xc9J\x8d\xd2*" +
	"\xfc\x91\xeaD\x14:\xba\xa8a\xba+\x17Uf$m" +
	"gK~g\xa0\xbc\\\xa2M\x82zLym\xcdZ" +
	"\xd1]\xb9N\xd1\x86\x8a\xbai#/\xa27\xec\xd0>" +
	"n\x0e\x12\x872\x11\x1dHn\xec\xcb\xa1L\xc4\xb1\xc8" +
	"\xf4\xc5\x80?@g\"\x8eC\xdc\xd8\xafC\xb1?\xf3" +
	"~\x1d\x8a\xfd\x89\x88S\x99\x88$\x94\x89\x08\xb8\x1bp" +
	"\x1f.\x9e6\xfa\xe2\xf1b;\xc3A\xe5\xc4vq\xfa" +
	">\x1e@<\xbc_\x873\x11'#\x1e\xde\xb0\xc3\x99" +
	"\x883\x10\x0f{'\x1b\xca\xc4\x0aI\x96%\x99#\x15" +
	"$\xc1\xb8\xcb&(q\xf5t\x9bH\xbehi\xa1\xda" +
	"@\xd36\xfe\xa0\xd4\xcfH\xad!\xc2,\xf3J2&" +
	"\xfa\xd0\x1f\xf2\x0a\xb5\x8d1IF\xb1a\xa2k\x84\xb5" +
	"\xb8\xa8rPi,T\xfc\xe8\xb7\xa3\xb6\xcd&t\xfc" +
	"\x00\xec'\xb4\x19\x1d.\xa8mRn\x9b\xe4\xcda\x1e" +
	"\xc9Uuw\xd9\xf8\x0c\xd1\xa5e\xeaZ.e?\xc2" +
	"\xfaXf%\x8e\xa7\xa9\xf5\xb16\x9de?\xa6\xb2\xec" +
	"\xc7T\x96\xfd\x08\xe0\x06+ql\xb7\x10\x124\x1f\xb7" +
	"\x96\x1a\xe6#+\xf18\xc3\xad*>c\xc5\xd9\x14\x9f" +
	"(\xb3\xa7OrQ[\xbeR6^ti#[\xe9" +
	"\xf2\xd3\xb7\xeb\xbb\x8bI\xb6I\xa4\xa5\xb6\xa0]\x19\"" +
	"-\xd5P\xaf\"\x19\xca/jeu\x91*\x9f\xcd\xab" +
	"h\xeeV\xa4V\xa2,\xc9\x95S0\xd3\xbbi\xcb\x96" +
	"\x95VdR@\xd9yE\xad\xccc\xf5Ge%\xa6" +
	"1t\xd0\xf4\xe0 UZH\x83\xcb#\x89\xb2fN" +
	"\xac\x88<g\xe0\xa5\x8c\xd9\x04\xe3\x82\xb5h\x19]w" +
	"\x08\xa85\x19`i\x96+\xa6\x91\xbb\xb2\xf9\x91\xb3J" +
	"\xe14\x14\x9bOQ\xb5\xe8e\x7ffff\x99\xe4\x91" +
	"4R\x17M\x8a\\\x11\xad\xf5\x85BQ\xa5t(*" +
	"\xb8\xb4\x02\xa9\x94\xd6\xe7\xaf\x92<\x1ejC*\x13\xfc" +
	"\xe2(\xc1\x13\xa0\xf3x=\x92W\xd2F\x09\x1e\xceJ" +
	"%\x96Ex\xbfZN\x95\xcbD\x8d\xda\x9cF\x95\x1e" +
	"\xe1\x82\x0d\xed`=\x117\xd2\xabB\x96ho\xcc\xb1" +
	"7\\\xb3!K\xb4/\xe6\xc0\x1b\xe9U!\xe5o\x10" +
	"\xd2\xf7\x07|(\xad\xfd\x0dA\x17\xafa\x01\x87\xd4\xbf" +
	"\x1c\xdcI\x0cK7\xa4\xfe\x99-\xdd\x90\xfa\xe7\xc0\xf7" +
	"\x1b9\xfc!K\xb4\x04\xdfo\xec\xa8!Kt\x1c\xe2" +
	"\xe1\x9d3C\xb7\xf3\xc2l\xaa\x9b\x82M\xc4\x8bA\xd3" +
	"V\x03^\x91K\x91\xb5\x02\xc5\x88*\x97+\xf0L\xc8" +
	"\x9a\xac\x94\xb4\x11\xa2\xe0\xd63\xa2(\xb0\x10\x93n\x0d" +
	"+5B\xf0\xa5`@\xc0\xf0d\xc2_\xf9b\x0dg" +
	"\xa5>/\x96\x97\x8b.\xedN\x0fg\x15Z\xa1g\x0e" +
	"\xc3\xa5\xc9\xd8\x92Z\xda&\x92X\xdbD\x12k\x9bH" +
	"bm\x13Y\x8cm\xa2\x88\xda&\x18\"\x83\xca=\xae" +
	"k\x9c\x85lv\xd67\x08\xb2\xe4\x154I\xe1\x88\x1c" +
	"\xbda\x8b\x16\x9ch\x98\xb6\xd6\xccL\x93\x00,b\x09" +
	"\xc0,\xd66AE\xb0\x1a\x04\x94\x12u\xb9\xb4\xd5-" +
	"\x8b\x13\x8a\xe8C\x15\xba\x8a\xee\x119ky+$P" +
	"\xb1\xe0\xaf\x02\xeb3CT\xf3\xa5F.\x03\xa6\xb8." +
	"3\xf6\xaf\x90\xb8.\x01\xac\xd8J\x1c\x0fXHC\x85" +
	"\xe2\xab4\xe7;\xeb\xa6\xe60\x85\x8b\xa3\xc4v\x83\x07" +
	"\xbe\xa8H2\x17\xa7\x89j\xf4\xa3\x1c\xd2JP)\xd1" +
	"B>\xdc\xff\xff)&&\x8fr\xbeR!\xc9f_" +
	"g\x9a\xe1NN\xd1\x94*Qn\x85\xaa\xa3*\x01\xdf" +
	"0A\x8es\x89\x9eh\xec\xb74\xc69\x0d\xca\x01\x9c" +
	"\x02\x0aE\xdf\xb0\x1fE\xa63\x88\x9a:6\xd3|\xdb" +
	"r\xe5\x9a8I3G\xb8\xcaXV[\x19\xe5{\x95" +
	"\xe4\x1aI\x13\xc5\x91\\\\\xa4\x86\x03\xa8\xda\x08\x8dZ" +
	"\xef\xc9\xa9\xf5I\xaa8ZP\xf1\xdcL4\xa6\xe4\x1c" +
	"\x8es\xf4\xb7\x12\xc7P\xb6\xc0j\xd03`\xd8\xa7q" +
	"Z\xde\x8f\xf5\x05b\xde\x8f'\x86\xf6\xdd\xa1\x94A9" +
	"\x04\xb7c#K9dPf\"nl\xa3!\x832" +
	"\x07#\xa5\xc66\x1a2(\x0b0@kl\xa3!\x83" +
	"\xd2A\x92\"\xb6\xd1\x90AY\x828\x95\xd5\xdc&\x94" +
	"\xd5\x9c\x14\xb1\xbd\xb6%\xfavl\xda^\xc3\x06\xa5\x88" +
	"\xb8a\x80\x86\x0cJ/\xb6'\xecHn\xf0Hr\x95" +
	"\xe8\xce\x97\xb8\x0c\xbf\x96\xe9v\xab\xa6\xe8\x87i\xbd\x9a" +
	"]a\xect6\xf3\xc6al)\xac\x0d\x87\xbd\xb8u" +
	"\xb0\xb8\x8e\xb3RG\x97L\x81\xd8h\x95\xff\xd1b\x8a" +
	"\xc7\xa5\xe8g.\xd8\xfb\x0e{\xdb\x09%N\xa4\x19\xd2" +
	"\xbdyC\xbb^7\xb4\xc3\x06u\xf0\\f\xf4n\x17" +
	"\xd0B\xb2\x02\xe5\xa4\xdct\xaa\xa7\x94u\x0c\x0a\x9a\xb5" +
	"\xd3J\x1coQ\xd2{\xefx\xd61\xa8,\xfaXO" +
	"Pz\x1f\xccc\x1d\x83\xca3N<\x85\x8fA\x1d\x07" +
	"\xf0\x98\x958\xbe\xb1\x84t\xa2\xc8y1ime\x82" +
	"\xea.P\xdc\x12g+\x97\x8c }=\xaaX\x94\xb3" +
	"\x8a\x95\x05\x83&\x0c\xd8H\xff\xd3s\xb5\x85\xa3\x0a\x9d" +
	"\x9a\xa0\xf9S\xf0T\x99i4S\x8d=\x8a}D*" +
	"8\xf1{R\xa9\x11\x0e\xb9\x8f\xf7\x16Q#\x1c\xf2\xa3" +
	"\xefO\xa5F8tF\xea`*up*tF\xea" +
	"P\xba1\xec\xcd\x9c\x1f\x8dp\xc50}5t\x02\x95" +
	"\x0d\x8c\xbd\x96\x1c\x93-\x1el\xcf\xd0\xc2\x83\xd5R\xf0" +
	"7\x8b\xb2\x91}\xaaX.\xd5\x86\x0f\x14\xf9\x14\xbfF" +
	"\xfd\x1d\xc5\x1a\x95d\xf7h% \x13w\xd3&&\xb3" +
	"\x0c\x81US\x98\xaaC\x94=\xce\x915\xabZ\x17M" +
	"@\xa8\x94a\x8c\xa7\xd1\x01!\x939\x89\x7f\x9bL\xc7" +
	"\x14t\x826\xab\xd0Q\xc1\xf8\"\xb1: \xfa5\xdd" +
	"\x94\xc03\x92)\x95\x82\xac\x9f\xbfh\xe9\xb0_)K" +
	",$QG&Cba_\x12\xcd\xc9A\xb1\xb0?" +
	"\x89\xe6\xe4\xa0X8\x98Esr\xc7 '\xa7\x1a\x9c" +
	"\x1cM\x88\xa4\xf9#\x8f\x8d2\x83pFm\xc65\"" +
	"\x1c!\xb6\xa8\xd8I\x04Q_\xac\xda@\x12\xb7\x96\xa3" +
	"\x0c\xf1ds)n1z\xa3\x8f:\xce\x8a\x81\xab\x94" +
	"\xa8M\x87\xb4f\xa2\x8dQyz\xeauC\x82r\xf5" +
	"\x84\x8b?G\xeb\xea)\xd6\xcf\x99gf\xe86U4" +
	")\xc0EFd-\xd4\xec\xea\xb4\xa0\xdfe\x16\x95\x02" +
	"<#\xd5\x08P\x86\xce\xb3\xd36[\x83&\x81\x11\x14" +
	"\x90\xa9\xc4\xbc\x14\xc0\xa8\xfe\x84\x8b\xeb\xeb\xfdi\xe5\xf1" +
	"\xbe`\x8d\x07=\xb9\xc4\xaf\xe7\x1dQA\xd5<*W" +
	";\xd4;:\xf9=\xd4\xbbyE\xc1\xf8\xe9\x06\xaaw" +
	"\xeb\x8b\x82v\xd1\xebF&p\xc4\xb6\xd1L\xa5\x88\xc6" +
	"a\x1aLh\"T\xc7\xc3UkB\x13\xa9\x89^\xb0" +
	"\x8b(\xa2\xa0\x9e\xd6\xca\xd3\xd7\xa3\xc5\xb2B\x8fP\x97" +
	"S#\xaa(h\x82\xf2\x86k&c\xd3\x8fY4\xec" +
	"m\xb8\xe5\x98\x9b\x9e\xf7_\x92\xe2\x0b9C()\xb6" +
	"\xce\x18\xae\xd0\x04\x847\xd9c\xd4v|T5\x8e\x17" +
	"\x87\xb7\xe3\x93\x8b8\xce\xf1\xa5\x958\xceP\xdb\xf1\xe9" +
	"uT\x005\xb4\x1d_XG\x07EC\xfav,\x99" +
	"CG9\x1b<nE\xce\xac\x11$\xe2\x11\xca<\xd0" +
	"\xec8z/\x0d\xc8U\xca\x049\xd3\xc7\x91\x809M" +
	"\x08\x1e\x1c\x1e\xa8*\xe4LG6\x01/\x90\xd4\x00\xa9" +
	"\x10<8\x0a\xc4\xfc\x9b_#^EQ\x1b}\x0c~" +
	"-\x0a\x8c\x17\x88Z%\x092\xeb\xd7b\xa1J\"\xfe" +
	"\xca\xd0\xa1\x8a\xe87\xc0\xd1\xa2\xa0\x0e\xab\x14dkE" +
	"T\x07\x91\xf3X^\xd64:\xb6ne\xc4\xd6\xcd\xda" +
	"\xbaW\xd0DU\x12<M\x1f\x06\x9c \x0a*\xa6>" +
	"\xb5*\xb2\x8e\xbe\x8flE\xd1k\xa8P}Ig\xf5" +
	"Ee\xf5%\x9d\xd5\x97<\xa3/\xa6C\xdf\x0d>\xc9" +
	"U\xe5Q\\U\\\x0a\xee\xf5M%\xac\xfc!\xd5u" +
	"\x94\xa8\x89\xaa \x17\xa5\x88\x13\x04\xd5\xddt\x94\x9a\xb5" +
	"\x81\xd5\xbb<\x82DG,0\xa56\xc1\xb8y'\xda" +
	"\xf2<\x18\xd3\xc9\x16\xbdqJ#gBj\x0b\x81\xf2" +
	"\x08\xf1\x1cr\xf7F\xad\x0d\xea*O\xb1`S\x1b'" +
	"\x90\x17Q\xe2H\x16'\x14\xc3\xab\xa9m#\x8a\x97W" +
	"\x0a\xb2,z\x0a2\xc4\xf0iV\xcaEV\xda\x82\x8b" +
	",\xb4\x13\xac\xcf\xa3\x9ca\xa1\x9d\x80v\xbf\x86w\x82" +
	"\xad\xd3(\x05-x $qW\x96aj\x04\xb7\x87" +
	"\xc8$\xfb\x0c\xbf(\xbb)\xe7\x9fG\x90+\x02BE" +
	"drg\xa5 \x8f\x0cx#U\xce\\9\x9f\x84h" +
	"\xffx&\x12N\xbd\xee\xb5-\x0c\x94y\xa4\x14\xd7\xc8" +
	" \x13\xb4\x14\xdaK\xa7\xf4\x9b\xd0\xd2*H5\xf4\x9b" +
	"\xe68\xc3&+Z+\x1a\x19\xaa\x9b\xa4\xeag\x02Z" +
	"]\xc4!2\xd7)CO\xa8\x8c\xde\x93\x94R\xe2\x17" +
	"\x1b\xf9\xb1\x99\x1e\xc0,\xd6\x98t\xa7\\\x80\xe8P\x08" +
	"\xcfV\xd0\xab\x1dN5\x17ew\xabN>\x0dS\xbc" +
	"^\xc1*\xbb[\x9b\xdcbJA6Ei\x98\xf3\xa1" +
	"\x0b7ce\xa9N\xd1#\xba\xb4\x9c\xea\x80\xe4k\xc6" +
	"\xd7\xc7<'\xde\xf4\xd6\x90`\x14\xaf\x8eVvea" +
	"\xe9\xa5a\x95\xb6\x90\xc5tm\xb8!\x87\xf2\xa8\xb2%" +
	"\xa1\x96\x1cM\xa5\x9c\x1e\xa19:\x9eN+\x1b\xc1-" +
	"\xe1d\xba\xe1\x09\x09[L\xa7\xc6S\x1aH\xc8b:" +
	"\x0d\x1f\xfa\xc1J\x1c\xbfR\x8e\x94\xf3\xa5T\x0aW0" +
	"\xce\x96x\xa9\x94RK`\xc7\xd0$9\xe0\xa5\x06\xc2" +
	"VA\x15;\xc9\xf0K\x9e\x1a\x83S3\\\x8a\xcfG" +
	"1n\xf8q[\x16\x1d\x07\x817\x00@\xefC\xfa\x8b" +
	"\xb2\x04\xceJ\x11\xea\xaf3\x81-;|MI\x18 " +
	":\xb2\x04\x7f0{\x88}\xfa4\x9c\xc0\x98\xc7J`" +
	"\xcc\xa3\x13\x18\x83\x12va\x16\x9d\xc0ha\x1c>5" +
	"+\x1c\xbe`\x8b\xf4\x9av\xe1:\xf1A>\xa2\xf3X" +
	"\x1b\xfd\xda\xaa\xd8\x17-&*\x94\xe0\xa0h\x02z\xbc" +
	"\x818\x0a}\xacR\xc9\xf4x\x8aD\x9b\x16P\xcd\x91" +
	"\x9b+YG\x12\xe6\x18A\x9a\xd0\xb6\x14\x11\xa3\x09\xa9" +
	"\xc7\x9b\xd7Q;PH=\x8epv\xc5\x12\x9dc\xf7" +
	"\xa4\x07\xd5\xf0\x0f\"\xec\xe0\x90\xb1\"\x13\xb1Z\xaf\xe6" +
	"@q\xa6G\x92\x0d\x99\xad\x13\xfa%\"OTd\xd1" +
	"\xaf\xa9q0~\xec\xe4\x04\x9d\xd60t\xc2\x17MF" +
	"k\xb1\x16\x09\x12f\x88\xc6\x89\xaa?\x8a\xe4\xd02V" +
	"rh\xa8j\xcetj\xbc\xe8\xb3\xd0\xf5nQ\x13$" +
	"\x8f\x9f$\x18eq\x83\xbc\xc3\x8c\xdd56\xc4\xc3\xb5" +
	"\x9f\xf5n\xa5\x88^\x9fVg\xc2\xa3\x12i\xc3\xc0r" +
	"\x95\x1b\xd9gt\xf9\xad\xd6\x19\xc5\xc5\x82\xbf*[\xf4" +
	"\xbbT\xc9\x87+\xc4$&U\x96\x98Lg\x89\xc9\xee" +
	",1y\xa5!&IHJB[OX\x89\xe3\x07" +
	"\x8a\xe7\xbeM\xa5Dg\x9b\x18]J\x9e.\xa3Dg" +
	"\x9cE\x97\x92\xb4\xe8\xc4J,5\xb0rS\x86E\xa6" +
	"\xbc\x08\xfe*\x83s\xe3\x02\x86\x0c\xa3\x1d;\x11G\xce" +
	"\xdc\xa2\xdf\x15\x1e5\x155nsDVG\xf3%\x94" +
	"\x89\xd1G\x0aE-W\x13\xbd~\xae\xa9\xe8c\x0f\x8b" +
	"\xa9lc\xf4\xe7M\x04Y\xa0\x8c\xb7\x96N\xf7g\xb1" +
	"\x0e\xa3g\xb1\x0e\xa3\x97\x19R74ma\xa1\xbb\xc1" +
	"\x82\xe1u\xf8\xb6\xe1\xd1\xd7\x04\xafD\xff\xed\x13#\xfc" +
	"\xa0U\xa2\xe8s\x09~\x8d\xa3%A\xbdOp\xa3d" +
	"mu\xb7E\xaf\xa2J\x13\xc5\x14\x8c\x92\x98\x16}*" +
	"\xcb\xd4\xcbb\xd5\xcf\xcac\x99zE\x86\xa9\x17\x91\xe3" +
	"\xd3\xa8K\xb0b\xcaP\x08R\xb50Dw\xc0\x15\xdc" +
	"\x1a\xa2Os\xaa\x11<\x92P\xe6I\x11a)\x9a\x0f" +
	"\x93\x16Ed^\x87b\x92\x89\x18c4\x0e\x87\x86R" +
	"\x84\xba`L\xd28\x1c\x1aJ\x11\xea\x8a)B\xe1S" +
	"\xa0\xc19mt\x084\x14\x92\xec\x89\x91P#\xd3(" +
	"\xe4\"\xe9\x8b\xa1D#\xd3(\x14\x92\x1c\x84\xcd1B" +
	"\xa4\xa1\xc3\xa4\x99\x88\x1bgjB\xf5mL9\xba\x0d" +
	"\xb0\\se\xb7\xc8\x91Z\xea\x14\x88\xbf\xaa\x00X\xc6" +
	"\x06vs\xc4\xca\xa6\xeb\xc0\xb1\x05\x00k5\x17z\xb8" +
	"\x0c]'2-\xe8\xe1\x0a\x16\xfa\x88\x04\x9d\x12g\xa3" +
	"\xf5+C$\xd8\"\xf4,\xbf\xe2\x15G6q\xfc\xb0" +
	"\xe9\xf03\x86\x1d\xfc\xff\x9b\xd5\x83?{5\xf0\xdd{" +
	"\xbf\xa4>\x19\xed\xb6\xe9\xac\x94D\x8f[\x92IE3" +
	"\x9e>\x96\xcb\xb2\xc57\xc3h\x0c\x17e1C\x0f\xea" +
	"\xb5\xd2\\$,k\x91\x0e\x81eT\xe86q\xb3\x99" +
	"\x98Mo\x9f\x82_\x03\xa9A\xfe\xb8\xd8P[\xf0\x10" +
	"5/6\xa4\xe0\x99[.\xa5.\"\x85\xf0\x0f\x0du" +
	"\xa8\x00t\x0a\x9e:\x8c\x82\x9d\xd2\x9ab\xa7\x14\xafR" +
	"C'C\xaf\xb2\x1e?\xfa\xd4\xa5\xfb\xa7\xb6J\x0d\x83" +
	"Y\x8fS\x05O\xd3\xce\xb7\xe6\xcf\xe8\x94\xb2\x0a\x87P" +
	"\xf5Z\xff\xf0\xb9\xa4\x06\x9f\xa0\x0a^Q\xa3KUD" +
	"s\x0av\x18\x86\xda8\xaei\xd3\x91\xad\x12\x05;t" +
	"\xbc\x942\x12Cz\xe5\xa9$J\xfd\x09\xe9\xe1\xdf&" +
	"\xd1\x96c\xd0M}:\x89:\x11\x14\x8a\x1a\x9f-\xa5" +
	"\x1c\xdaA\xf9\x9bx!\x8b\xd2\x89\x18\xe5\xa7\xfe\xe7A" +
	"9\xcc\xef(\x12\x05?g5&\xa0\xf5e\x13B\xce" +
	"\x1a\x9b\xea\x14\xb5\xff\xdb\x9e\x9alQ\xd0*M\x11\x87" +
	",V\xdc4\x8f\x157\xcdc\xa5S\x94\xb1\xaa\xcaf" +
	"\xb1\xd2)JY\xe9\x14\x94g\xa1\x91\xc9Z%y<" +
	"f\x8f\xb1KQ}~12\\$h\x9a\xe0\xaar" +
	"Vqq\x94\xfb\xb9\x91\xd8)\x93d7L!G\xe9" +
	"\xbf\x19n\xc1+T\xb4\"X>L\xf1\x96\x09Zf" +
	"YJ86\xd8R\xbc<\x95\xe5\xf3\xa2\xd2\xde\xea\xbd" +
	"\xc5\x11\xee%\x9b7S3j\xca{\x9d\xb4K\xbd\x15" +
	"UA\x82E9\x18'?\xec\x96?\x90;\x14\x0c\xe9" +
	"\x8e\x8e\x13tm\x93]\xf4)\xacf'\xd1jvP" +
	"\x14\xccH\xa2\xd5\xec\xa0(\x98\x9dD\xd7|\x0a\x8a\x82" +
	"y\xa5\x86s#bska\x81*\xb28\" \xbb" +
	"\xd5\x88*\x19Q\xa6(\x83\xac3\x8a.7\xa1\x0c\xb0" +
	"\xca\xdaEQ1\x1a\xe7\x90JZh\xc9M\xca<\x15" +
	"B\x1d\xba5\x1dtCww\x99 s\xa4\xca`~" +
	"S\x16F\x14\xa5\x01<\xa2K\x0b\xc6\xbe\xa3\xbf\x83\xa2" +
	"\x88\x91\xeb\x9bJ%&\xb3\xd2\x16\x19\x81\xefHe5" +
	"\x8a\"\x03\xb2X\xc7.N\x9b\xc7\x8a\xcf\xa7F\x1d\xe6" +
	"J7\xf6\xdf\xff\xa9\xfb\xb1\xb5\xd5\x182\xad\xfa\x01\xaa" +
	"&\xcc\xe32\x8f W\xb5\xdaN\xc4\xf8\x85?_\xb2" +
	"\xfa\xb5f\x8a\x1c\xe0\xc1\xdf\xe6B\xed\xad\xe4\x9e\xea\xe8" +
	"\x8eJ\x16QI\xb7Q2J\xb4)/#\x0b\xc9\xb0" +
	"h\xf2]\xa8\x9a*\xb4\x9f\xaf\xb9\xe3wM\x9b4\xba" +
	"\xe3\xd2\xe4\xb1L5<\x96a\x87e\x1a\x15\\\x0b\x89" +
	"\xc7\x88\xfc\xf3\x90x\\\x9fN\xe5\x9f\x87\xc4\xe3\xc6," +
	"\xca\xb7\x19\xd2\x94\xe8\xc2*\xb6\x09\x95J\xb8\xb8X\xca" +
	"\x84\x08\xd3a\x02VB\x09\xff\xe9\xa9\xf1x\x8c\xda\xf8" +
	"\xf5\x9e\x1aO\xa5TQi\xf8\xca\xbd\x1eE\xa9\x0a\xf8" +
	"Z\x95\xe7\x10\xf4\xcfE\xe4\x98\xfc\x91\x0c\x1a*|\x1e" +
	"\x1e\x90\xba<c\xb7i\xa8P\x05Y\x8b,\xa2\xd7\xa0" +
	"L\x90\xcd\x85\xf5\x1a|\xa2\xea\x95\xfc~\x89V\xdcP" +
	"\x9b\x93[+\xcb\x0b\x94\xb2\"x\x8a\x88\xd1l\xfd\xe3" +
	"[\x90\xe3\xf5\x8a\xc7\x1dq\xbdB\xf0\xefL\xceV!" +
	"H2]\xa6|\xa4\xd0\xba\xbac\xb8p\x0al '" +
	"\xa3\x11\xe3\xd3XW\x09\xa9\xd4\x99\x0d\x86,\x0c-\xcf" +
	"\x02\"\xf85T\xd3\xcc\xbf4J\xffh\xd9\x11\xe4\xf3" +
	"\xa9J\x8dq\xbb\x02\xdbjf\xc7XI\xe3\xab\x1f\"" +
	"c\xacx\xcd\x87q>F\xd0\xbf\xd5\x9a\xe2U\xba8" +
	"\x8a\x0b\x1a\x9a-\x99\xce\xccD\x91i\xac\xe3x\xaaa" +
	"\xe0E\x9e\xaacU\xf3\xff?0\xec\xc3\x0b\x8aUA" +
	"\x92s\x1a\xc7J\xd3Z\x10\x9a\xd1\x9c\xb9o\xb1B`" +
	"v@4\x97\xb0SY\xfbE)\xb5_\xb8\x03\xa2'" +
	"W\x964.E\x124*k\x06pP\xa89\xab\xd8" +
	"\x8a\\\x88|\xa5\x02\xb7b=k\x86\xda%'R\xda" +
	"\x1f\x1e\xa7\xf1W*\\\x86\xaa\xb5.\xc0`\xbe\xdf\xc3" +
	"\xea\xf7\xff\xdf\xc9\x86lT(\xed\xfd\xb7G\x14\x1e\x1f" +
	"V\xfbP\xd4\xe5\x8b2\x86\x17\xdc%5\xaa_\xd4\xba" +
	"\xb4\x97\xc8[\x17\xa2\xf1P\xc9.\xd1S\xac\xc6\x09n" +
	"\xb1\xb5\x16r\xb9\xaax[\xbe\x90\xa2\x99\\\xb02\xfd" +
	"\x98T\xabo\xc1\x0a\xf8\xc5FU#}\x82\xdf?A" +
	"Q\xdd-\xed1\x11\xd9\x03zY\xaaB5E)\x97" +
	"<\xd0\x7f\xe7\xaf$\xec\x0d\xdf\x05\xf6\x88sg\xbc\x95" +
	"8\xdf\x8a\xa7\xbc\xe1{A\x9fs\xee\x06\xfc\x9dx\xca" +
	"\x1b\xbe/>\x95\xe3\x9c\xaf\x03~ \x9e\xf2\x86\xef\x8f" +
	"/\xe28\xe7;\x80\x7f\x10O\x1d\x98=\x04:\xa7\xf3" +
	"\x00\xe0G\xe2\xa9\x03\xb3\x87\xf1\xfd\xef\x03~,\xde(" +
	"\xadx\x14\xc9?\x00\xf8L<\xe5\x0d?\x8d\xf87\x80" +
	"\x9f\x8b\xa7\xbc\xe1g\xe3\xc7s\x9c\xf3\x0c\xe0\x17\xe3)" +
	"o\xf8\x85\xf89\x1c\xe7\xbc\x08\xf8\x15\x9d\xa8\x03:\x9d" +
	";\xad\xe08\xe7\x15\x9d\xac\xc4\xd9\xa3\x13U\xf1\xa1[" +
	"'h\xfe\xb5\x80\xf7\x02\xbcc{\xbdnk\xcfNX" +
	"\xba\x11\xf0\xfe\x80\xc7w\xd0\xeb\xb6\xf6E\xfa>\x80\x0f" +
	"\x06\xbcSG\xbd\xda\xfb \xc4o\x03<\x1bp[\xbc" +
	"^\xed=\x13\xf1\xa1\x80\xe7\x03\x9e\xd0I/\xf7\x9e\xdb" +
	"\x09\xfa\x95\x0dx!\xe0\x89\x16\xbd\xde{A'\xe8W" +
	">\xe0c\x00O\xb2\xe9\xf5\xdeK:\xc1t\x15\x03\xfe" +
	"\x00\xe0\xbcU\xaf\xf7>\xaeS\x16\xc79\xc7\x00\xae\x01" +
	"nO\xd0\xeb\xbdWw\x82a\xf6\x00^\x0bx\xe7D" +
	"\xbd\xde{\xa0\x13L\xa3\x0f\xf0I\x80\xff)I\xaf\xf7" +
	"^\x87\xed\xd1\x00\x9f\x02x2\xaf\xd7{\x9f\xdc\xa9;" +
	"\xc79k\x01\x9f\x0e\xf8\x15v\xbd\xde\xfbT\xc4'\x01" +
	">\x0b\xf0.\x9d\xf5z\xef3\x10\x9f\x02\xf8\\\xc0\xaf" +
	"\xfc\x93^\xef}6\xe2\xd3\x01_\x00\xf8U\xc9z\xbd" +
	"\xf7y\xf8\xddY\x80/\x01\xfc\xea+\xec\xe4j\x8e\xe3" +
	"\x17\"\xfd\\\xc0\x97\x01\xde\xb5\x8b\x9dt\xe58~)" +
	"\xe2\x0b\x00_\x09\xf85W\xda\xc95\x1c\xc7/\xc7~" +
	"-\x01|\x0d\xe0)1v\x92\xc2q\xfc*\x1c\xff\x95" +
	"\x80\xef\x04\xfc\xdaX;\xb9\x96\xe3\xf8\x1d\x88o\x07\xfc" +
	"}\xc0\xbb]e'\xdd8\x8e?\x88\xe3|\x00\xf0#" +
	"\x80w\xbf\xdaN\xba\x03\xdb\xe2\xfb\xdf\x07\xfc\x18\xe0\xd7" +
	"u\xb5\x93\xeb\x80oq\x9c?\x00\xfc\x04\xe0=\xae\xb1" +
	"\x93\x1e\x1c\xc7\x1fG\xfc\x08\xe0_\x02~}\x8a\x9d\\" +
	"\xcfq\xfc\xc9N\x139\xcey\x02\xf0\x1f\x00\xbf\xe1Z" +
	";\xb9\x81\xe3\xf8o\x91\xdf\xbe\x01\xfc\x1c\xe07v\xb3" +
	"\x93\x1b\x81\xcf\x91\x1f\xce\x00~\x11\xf0\x9b\xba\xdb\xc9M" +
	"\xc0\xe7\x88\xff\x0ax\x8c\xcdB\x12{\xb6\xb1\x93\x9e\x1c" +
	"\xc7\x13\x1b|\xf7\"\xe0W\x00\x9e\x1ag'\xa9\xc0\xff" +
	"6\xa0\xb7\xdb\xac\xc4\xd9\x07\xf0?_g'\x7f\xe68" +
	"\xbe\xb7\x0d\xfa\xdb\x0b\xf0\xdb\x00\xef\xd5\xc3Nzq\x1c" +
	"?\xc0V\xc6q\xce\xfe\x80\x0f\x05\xbc\xf7\xf5v\xd2\x9b" +
	"\xe3\xf8!\x88\x0f\x06|\x04\xe07\xb7\xb5\x93\x9b9\x8e" +
	"\xcf\xb1\xe1\x9du\x80\xdf\x0b\xf8-\xed\xec\xe4\x16\x8e\xe3" +
	"\xc7\"\xfd\x18\xc0\xdd\x80\xf7io'}8\x8e\x17\xb0" +
	"=\x0f\x00>\x09\xf0\xbe7\xd8I_\xe0C\x1b\x96\x93" +
	"\x06|:\xe0i7\xdaI\x1a\xf0\x9bM\x05\xbe\x02|" +
	".\xe0\xfdn\xb2\x93~\xc0W\xd8\xfeY\x80/\x01\xbc" +
	"\x7f\x07;\xe9\x0f\xfcc\x83\xf1\\\x00\xf8&\xc0\x07t" +
	"\xb4\x93\x01\x1c\xc7oD|\x03\xe0\xdb\x01\xbf\xb5\xa7\x9d" +
	"\xdc\xcaq\xfcV\x1b\xcc\xcb\x16\xc0w\x03>0\xdeN" +
	"\x06\x82\x98\xb4\xc1\xbco\x07\xfcu\xc0o\xebd'\xb7" +
	"q\x1c\xbf\x07\xbf\xbb\x1b\xf0w\x00\x1f\x94j'\x83@" +
	"L\xda`=\xbe\x0e\xf8\x01\xc0\xd3\xffl'\xe9 &" +
	"\x91\xfe\x1d\xc0?\x00\xfc\xf6^vr;\x88I\xec\xef" +
	"\xfb\x80\x1f\x03|po;\x19\x0c|\x85\xfd=\x02\xf8" +
	"\x97\x80\x0f\xb9\xd9N\x86\x00\xff\xd8\x80\xff\x8f\x01\xfe\x0d" +
	"\xe0w\xdcb'wp\x1c\x7f\x0a\xdby\x02\xf0\x1f\x00" +
	"\xcf\xe8c'\x19\xc0W\xb6+9\xce\xf9%\xe0g\x00" +
	"\x1f\xda\xd7N\x86\x82\\\xc5\xef\xfe\x00\xf8\xaf\x80g\xa6" +
	"\xd9I&\xc7\xf1\xe7q\xbe\xce\xd9\xac\xa4(\xc1B\x12" +
	"\xb3\xfa\xd9I\x16\xc7\xf1\x97\xf0\xb3\xbf\x02y\x0c\xe0\xc3" +
	"\xfa\xdb\xc90`\xb7\x84m\x1c\xe7\x8cI\xb0\x12g\x02" +
	"\xe0\xd96;\xc9\xe68>>\x01^\xdf\x11\xf0\x9b\x00" +
	"\xcf\x19`'9\x1c\xc7_\x9f\x90\x04\xe2\x16\xf0^\x80" +
	"\xdfy\xab\x9d\xdc\x09\xe2\x16\xf1\x1e\x80\xf7\x01|\xf8@" +
	";\x19\x0e\xec\x89\xf8M\x80\xf7\x07|\xc4mv2\x02" +
	"\xc4p\x02\x0cs/\xc0o\x03<w\x90\x9d\xe4\x02\xdb" +
	"&\x00[\xf5\x07|(\xe0y\xe9v\x92\x07l\x9b\x00" +
	"\xc3?\x18\xf0\x11\x80\xdfu\xbb\x9d\xdc\x05l\x9b\x00\xec" +
	"\x90\x0dx!\xe0\xf9\x83\xed$\x1f\xc40\xe2\xf9\x80\x8f" +
	"\x01\xbc`\x88\x9d\x14\x80\x18N\x006)\x06\xfc\x01\xc0" +
	"G\xdea'#A\x0c#\xfd\xbd\x80W\x02~w\x86" +
	"\x9d\xdc\xcdq\xbc\x88\xe3\xe0\x06\xdc\x07x\xe1P;)" +
	"\xe48\xde\x9b\x00\xcb\xb4\x12p\x0dpG\xa6\x9d8@" +
	"lc\xfb}\x80O\x02\xbc(\xc1N\x8a`Y ^" +
	"\x0b\xf8\x12\xc0\x9d\x89v\xe2\x046O\x80\xe9Z\x00\xf8" +
	"J\xc0\x8b\xb3\xec\xa4\x18\xc4!\xf6w\x19\xe0O\x03^" +
	"2\xccNJ8\x8e_\x8b\xefY\x03\xf8&\xc0Ge" +
	"\xdb\xc9(X\x16\x09\xc0n\x1b\x00\xdf\x0e\xf8\xe8\x1c;" +
	"\x19\x0d\xcb\x02\xf1-\x80\xef\x06|\xcc\x9dv2\x06\x96" +
	"\x05\xe2;\x01\x7f\x0b\xf0\xb1\xc3\xedd,h\x0f\x88\xbf" +
	"\x0e\xf8\x01\xc0KG\xd8I)\xb0?\xe2\xef\x00\xfe\x01" +
	"\xe0\xf7\xe4\xda\xc9=\xc0\xfe\x09\xeb@|\x02~\x02\xf0" +
	"{\xf3\xec\xe4^\x10\x9f\x09\xcf\x02;\x03\xfe\x03\xe0\xe3" +
	"\xee\xb2\x93q\xc0\xceH\xff\x03\xe0\xbf\x02~_\xbe\x9d" +
	"\xdc\x07l\x8b\xef?\x97`%E\x89\x16\x92x\x7f\x81" +
	"\x9d\xdc\x0fl\x8b\xf0E o\x0b\xf8\x03Iv\xf2\x00" +
	"\xc7\xf1\xb1\x890<1\x89V\xe2\xbc\x16p\xe1F;" +
	"\x118\x8e\xef\x9a\x08Z\xc2\xb5\x80\xf7\x02\xbc\xec&;" +
	")\x03\xf6L\\\x04\xec\x06\xf8m\x80\xbb\x8a\xec\xc4\x05" +
	"\xec\x96\x08\xec\x7f\x1b\xe0\xd9\x80\xbb\x9dv\xe2\x86]?" +
	"\x11\x9a\x9f\x0dx!\xe0\"o'\"\xb0U\xe24`" +
	"+\xc0\xc7\x00^^l'\xe5\xc0V\x890-\xc5\x80" +
	"?\x00xE\x89\x9dT\x00[a;\xef\x05\xbc\x12\xf0" +
	"\xcaQvR\x09l\x95\x88l\x05\xb8\x0fpi\xb4\x9d" +
	"H\xc0V\x89\xa0\xfd\xf8\x00\x9f\x04\xf8\xf81v2\x1e" +
	"\xd8\x07\xbf[\x0b\xf8t\xc0\xab\xc6\xdaI\x15HU\xec" +
	"\xd7t\xc0\x17\x00\xee)\xb5\x13\x0f\xec\xca\x890\xcc\x0b" +
	"\x00_\x09\xb8\xf7\x1e;\xf1\x02[a\xbfV\x02\xbe\x01" +
	"p\xd9n'2\xc7\xf1\xeb\x13\x81\x0d\x9f\x06|\x0b\xe0" +
	"Jg;Q8\x8e\xdf\x8c\xfd\xda\x04\xf8N\xc0}\xf7" +
	"\xda\x89\x0fv\xdf\xc4\xcfAz\x02\xfe\x0e\xe0\xd5\x7f\xb2" +
	"\x93j\x90\x9e\x89\xb0\xbc\xde\x02\xfc\x04\xe0\xea8;Q" +
	"\x81\x1d\x12aw9\x02\xf8\x97\x80\xfb\xef\xb3\x13?H" +
	"C\x9c\xaf/\x01?\x03\xb8v\xbf\x9dh \xdd\xb0_" +
	"g\x00\xbf\x08x\xe0\x01;\x09\xc0\xae\x89\xfd\xba\x08x" +
	"\xdb$\x0bI\xac\x11\xec\xa4\x06\xf8!\x09\xde\xd36\xc9" +
	"J\x9cv\xc0'\x94\xd9\xc9\x04\x8e\xe3\x13\x93`<\xed" +
	"\x80_\x0bx\xad\xcbNj\x81O\x92`<\xaf\x06\xfc" +
	"&\xc0\xeb\xdcvR\x07\xe2\x0d\xe9o\x02\xbc?\xe0\x13" +
	"E;\x99\x08\xe2*\x09\x96{/\xc0o\x03\xfc\xc1r" +
	";y\x10\xf8'\x09\xe6\xb7?\xe0C\x01\x9f\x94l'" +
	"\x93@\\%\xc18\x0c\x06|\x0c\xe0\x93+\xecd2" +
	"\xf0I\x12\x88\xbdB\xc0\xefM\xb2\x04+\xf2\xfb#\x9c" +
	")\xe6\x90~K'^M\x17\xac\xe2_}\xc3?\x96" +
	"I2\xed\xce\xed\xf1\xd4\xfcO\xaf\xae\xfe\xe2l(\xf3" +
	"\xce-RY\xd5`\x90(\xb5\x92+t\xcfLD\x11" +
	"\x18\xa7G!Z\x91X\xae\x8a\xfe\xcaFW\xed\x84\xaa" +
	"\x8e8\x89G\xd1\x89\xac~\xc3uX)H\xaaK\xf1" +
	"(t\xbc\xb9L\x14T\xb7K\xf1pV\xcab\x17\xeb" +
	"D\xccn\xe6H_\x06\x96\x16\xf1B\xbfV\xe7\xa1\xea" +
	"\x12\xa5\xe0\x0b#\x8e\x8d\x15\x08\x9a\xc8\xd9TI\xf0\x90" +
	"\x84\x86>d\xc6\xe4\x07\x7f\xeb\xf3e8\xb5P\x13\xbd" +
	"\xc5\x92L\x97\xff\xab\x17\x84LU\x15\xea\x9a\xac\xf0k" +
	":Al\xf3RI_)\xae\x80:\"|\xe1w\x9c" +
	"_S\xa9\x7f\x87\xa9\xe2\\\x95\xc6\xbf\xddb\xadq " +
	"^\xd6\x8c9\x8c\x13*\xa4\xf0\xbf'H\xc6\x07\xcbi" +
	"V\xc0Y\xc9R\x14\x8e4\x8a\x05xE/&\x835" +
	">\x0f\xf7\xbf\x96H\x9d1,\xa0\xfa\xa9\xa9\x83w\x00" +
	"\x141\x9f\xfa\xbb\x86\x058[\x04\xad\xfeN3\x9c\x81" +
	"\x81*F\xda\x9f,h\xa2\xb3\x8a\xb3\xb1~E~5" +
	"{\xc5*\x81;B\xd7\xbb\x85y& W\x88\xaa\x09" +
	"M)\x0b\x94\x97S\xcb\xe3\xf6w\x97\xbc:2nu" +
	"\xf8\xd2q\xb7\xe4wI>\x8f\xc4\xc5\xc9\xa2\x9f$4" +
	"\xdc\xf8\x92\xfa\x95;i\xea'!.RE\x97\xe0\xd7" +
	"\x8a%\xce\xe6eT\xc8\x16ew@\x15d\x17]>" +
	"K\x10t&\xe2R\x9c>\x91\xca\xa6\x0c\xe3TG\xca" +
	"\x82\xf9\x01\x9c\x95N\x9e\xb5\xf4Z*\x17'\xfe\x16N" +
	"F\xf1)\xb0X\xcbD\xce\xea\xd1HBC\x81\xa4\x9c" +
	"\xf8\xb8\xa1\xe4\xbdP\x13\xf1v\x0f\xa1\xcc\xc3e\x88N" +
	"\x8fBqo\xa3\xba\xf1\xa6pf\xa3\x1a\xb0e\x92\xaa" +
	"U\xba\x85\x88\xb1\x86\xe7<J\x85D\xe7\xf8i\x92W" +
	",\xf4\x08u\\\x8a\xe8.0\xcep\xc4\xf9j\xa8\xdb" +
	"\xf1eC\xbeX+\x8c\x1c4\xfc\xa6\x1a\x11\xc0\xd4\xb1" +
	"2A\xe6\xe2\xa8\x9b\xa3\xe9\xbb\xf6\xf1\x8b\xa2\xacID" +
	"\xf3\x88nE\x16\\\x91\xbe/\xe3\xa4P\xa3\xf5\xd0\xca" +
	"JO\xffG\xce\x11\x18k\xcaY)\xa8T\xbcZ\xac" +
	"\xf5\x09\xb2_R8\xablxp\x85\x80\xa6\xf8\x81%" +
	"\x8d\x03^\xd1U\x1f\xd1/\xd1,\x10\xbd\x9c-2\x1b" +
	"\xdb\x1c\xe2\x0b]\xb6\xc9\xc5\xd1\xa7\xadXe\xc8=\xa2" +
	"\xe0\xce\x142]\xb0_P\xees\x8f[\x91\xb1VS" +
	"\x8a\xe6\x1f\x1e\xa8b\xe2\x05\x92\xca\xc6\xbd.&^\x14" +
	"\x18\xcf\xc4\x8b\x85\xc6\xef'\x9a?\x13\xb9>.\xe2r" +
	"p\xdd%^L$\xafX$z\x05\xc9&S\xe9\xb7" +
	"\x0d.A\x15E\xb5X%\xba\xe3\xdct\xaa\xb4)\x7f" +
	"z\x10\xcf\xe4R\\\x11C\x10\xc4\xfd\xd4\xadt\x09\x0d" +
	"\xbb\xff\xf3\xc1u?i=N\x98\x07\x9ay\xe5is" +
	"W\x9a\xb6\xf2:T\xf3\x95\xa7zRXf\x19\x81=" +
	"[\x12\xfd\x1cIh8gy}\xec\xd6\xb7\x8e\x9d\x0a" +
	"\x8b\x0dI\xc5A\xe2\"G\xc9W\xe3\xbb\x0b\xe4p\xc4" +
	"\xb1\xed\x1a\x1f&\x13\xd1\xb7\x0f\xf9j|\xc3\x02\xaa*" +
	"\x12Ykt\x0a\x17~\x83\xc1&j\xf0'\xfa\x97," +
	"\xd1\xaf\xddE$\x8f\xc7\xa9\xa9\xa2@I\x01_\x8do" +
	"\xb4\xa2\xfa5\x82\xdfrjj\x9c(T\xb1\xbew\x17" +
	">lSM?\xe7\x0b~\xed.=-(\xa1\xe1\x93" +
	"G\xe6\xae\x7fr\xfa\xda\x95\xa1\xde\x06\x7f\xcf\xe6l\xf0" +
	"r6\xc1\xc8\x80\xb7L\xb4\xa8w\x97\xe3\x00\xe4\xca\xf0" +
	"\xc0\x08%.\xa0F\xf4\xbaHt\x892\x97\x81\xad\xa0" +
	"\xd6\x18\xfd><\xf1P\xeb\xa3\xae\xa9pA\xd3e\xad" +
	"\x88\x08\xeeaj\x9d_\x13\xac\x1e\xbf\x891\x8b\x04\x12" +
	"\xfc\xcdC_\xf2\xa4?\x98C\xca\x14\x19\x7f\x8d\x13\x1a" +
	"=\x99SF\x82?F\xbc\x16y(3\xa0\x11\xc5\x15" +
	"<D\x11q\x8b\xa1;3\xa0)$\xf4S\xa4,f" +
	"?\xa5k\x9e\xfd\x0c\x01X\xa9L\xa8\x14=\xde\xc8\x00" +
	"P0\xdf3\xa3.\x97\xce\xf1O\xf8\xddZ9\x7f\xfd" +
	"\xb4g\x8e\xe8\xc3\xf3\x07\x0a\x1a)JU\xb1X\xab5" +
	"\xbak\"\xeak\xe2\xf3\x8c\xb8gs\xd7\xc47\x94)" +
	"J\x95\x86_jE\xb0833\xf2\x0ae*\x9a0" +
	"\xad\xa5\x1ad!\xcd\x80\x94\xc8~_\xc4d\x08B\xad" +
	"\xafPT]\\\x1c\xadID\x95\x92\x9c\xe9\xf3\xa9q" +
	"JM4\x91\xd5TVd5\xbd\x89\xc8js\xc9\xc9" +
	"Q\x0c\x93G\xcbt\xd78\xb58A3G\xc5J\xff" +
	"P1D\xb1\xd6'\xaa\x92\xa8_\xaai\xdcx\xe6\x8f" +
	"P\xbd|\xa2\xea\x12eM\xe0\xac\xadI\xff+P\xca" +
	"F\x88\x82G#\x95\xd1$\x97\\I\x15S\xa9\xf41" +
	"\x8e\xdf\xb4\x1c9\xbcS\x92\xdd\x85\xa2\xeaWd\xbd*" +
	"\x05\xd1\xa2\x09\xd0\x16E\x06h\xa95\xe5\x0a\xd6\xe3l" +
	"\xd5e\x92\xc1\xab\x82\xf4\xc0\x94\xa6T\xc4Ux\xc4(" +
	"\x0e3f\xb1\x92\x00#n\xd2\x0c&u\xccK\xa7N" +
	"8\x86\xb2\\\xe8\x13\x8e\xe6\x13\xb9\xf87\xccfh-" +
	"2\xae\xfc1\x95\x0c\xac\x17\xb1\xfc^+\xef7\xf3\x0d" +
	"\x17e\x9b\xa8J\xaehF=\x8d\xba\x82\xbd\x99Z\x86" +
	"Q\x9e\xe7\xbb\xbb8\x9b\x8b\xaa,?]\xf1\xa0B\x94" +
	"E\x15M\xdf\xad\x7f\x12V\xdev\xea\xe9\xe7B\xd7O" +
	"\xb4\xaeNt0!@$b+\x0b\xf3\xb3\xea3\xb7" +
	"\x9c#\xd0\xa4\x15\x18ee\xfe\x94\"\xd1\xd7\\\xbe\"" +
	"+\xa2nT\xb4\xa3\xae\x10`U\xec7\x15\xab\xd2U" +
	"\xe2V\x9eR\xc8\xcc\xd4\xab\x1fs\\4U9\xa2?" +
	"\xaaEW\xe5\x88\x0cu\x9b\x0f\xcf3OW\x88\xb5\xbe" +
	"Q\x82' \xb6\xaa/z\x0at\xb6`\xf3\x0a\x8dN" +
	"\x94S\xf5\xdc\xc2\xdd9\x9cN\x9d\x9f\x0cu'\xe2\x98" +
	"y\xa8;\xc7\xb3\xa8\xf3\x93\xa1\\\xf2\x88c\xe6\xa1\\" +
	"\xf2Si\xd4\x09\x82P.\xf9\xb7\xa5\xd4a\x81\xd0\x89" +
	"\xf2\xb3y\xc6a\x81\xe6\xcb-G\xec\xf8\xe6\x02}\xa6" +
	"D\xf1?Xt\xb9\xe5t\x8b\xb8\\Yk\xa6Bk" +
	"\x0d\xccVko\x01.\x12\xb5\x80*g\xa3xl\xed" +
	"=s\x11Z\x10\xeb\xe6\x84\xa8\x0a\x08\x03\xf3\xdbj\x82" +
	"\x09\xf3\xf4\xd1>\xb5\x89\xa3}WF\xdc\x07\x19Jf" +
	"\xe8\x8cG\xfb\x8c#\x7f\xa1d\x86.x&/|\xef" +
	"c8\x99\xa1\x1b\x9e\xbd\x0b\x9f\xed\x0b\x96\xe5\xe5{b" +
	"\xd5O\xa3\xb8x\x1b\xa2'3\xf4\xc6#y\xbd\x00\xbf" +
	"\x0d\x8f\xf6\xc5\xea\xc9\x0c\x03\xf0\x04\xa2QD\xbc\xadE" +
	"Of\x18\x82\xaf7\xaa\x9f\x86.\xa1\xcdA\xfap\xf5" +
	"\xd3\xa6\x0e\xe8\xd1\xc7\x10\"\x0f\xeb\x1aOXY\xe7\xfc" +
	"l\xc54\xa3z\x95\xb2\xc8\xe4@M\xf4\x9as\xd4+" +
	"\x14\xc1c*+F\xbd.\xe2q7\xe6(E\x92F" +
	"}L\x08[\x86,\x86\x8b<\xb1\x08v\x1fL\xa1\xc7" +
	"\x8b\xdcF+\xaa\x87#n\xfcwp\xb7\x8e\xa2j\x96" +
	"^6^rU\x15*\xae*1\xa8\xec\xb7T\x12 " +
	"\x95\xce\xb0\x0d\xca\x9c\xb5Yt\x86mP\xe6DTx" +
	"\x0e\xc9\x1c\xbaz@\xa8\x983\x9d`K\x17[\x84\xce" +
	"\x18\x93Q\x17Q\x02)\xb2\x88\xb3K\x91\xe4\xc6%\xce" +
	"ZeQ\xb8\\\xa2O\x1b)\xa6L\x08\x9d\x93m)" +
	"5j<u1\xa1\xe9\xdc(\xfbti\xeb\x92\xd9*" +
	"\x15\xc5\x9f\x82\x9a\xd7\xff\x9d|6W\xa5\"\xb9\xe8|" +
	"\xb6\xd3\xb5?m\xbb\xae\xf3\xcb\xdf4\x97\xcf\x16\xaeB" +
	"\xe1\x13\\Uq\xfa\xa6\x15]%\x8a\xbbe\xbcg\x92" +
	".\x91D\xe9\xbci\xac\x03\xe6\xa9\x86\xd2K\x98\xe7\xcb" +
	"\x83\x87\xfa\"\xaaz\x84\x0ax\xd0:o\xa4\xda\x11Q" +
	"\xd2\xae\xbe,\xa0i\x0a\xe5\x1edT\x8f\xad\xf7)\xbe" +
	"\x80\xaf5\xf3\x1ay\xe9Z\xe8Z\xc4\xa1ai\xbd\x15" +
	"\xa5\xf5\x16\x10k\xbbii\xbd\x8bL\x8b\xb8[;$" +
	"\xad\xf7\x92w#\xee\xd0\x0eI\xebCd\x1b\xc79?" +
	"\x00\xfc\x04-\xad\x8f\xa3X>\x02\xf8\x97\xf4]\x0d'" +
	"\x11?\x06\xf87\xf4]\x0d\xa7\x10?\x01\xf8\x0f\xf4]" +
	"\x0d\xdf\x92g9\xce\xf9\x03\xe0\xbf\xd2w5\x9c\xc7\xf6" +
	"\\\x04\xbc\xad\x85\xba\xab!\xd6\x02\xedik\x81]\xc8" +
	"B\xdd\xd5\x90hy\x83\xe3\x9cv\xc0\xaf\x05\xbcC\xf0" +
	"\xda\xc0\xae\x16xO\x0f\xc0\xfb\x00\xde\xb1\xa3\x9e{\xd6" +
	"\xdb\xb2\x82\xe3\x9c}\x00\x1f\x0cx|\xbc\x9e{6\xc8" +
	"\xf29\xc79\x87\x02\x9e\x0fx\xa7Nz\xeeY\xae\x05" +
	"O\x80\x03^\x0c\xb8\xcd\xa6\xe7\x9e9\x10/\x04\xfc^" +
	"\x8b%\xe8\x97\x11\x0a\x04.E\xad\x1a\xe9sE\xfak" +
	"\x04\xd9G\\h\x92V\x9a<9B\xb6h\xf1\x88\x15" +
	"\x82&\x16\x08\x92\x9c\xe9\xf7K\xfeF\xde\x1e![$" +
	"!\x9a\xc8\xb7\xd7\xeb\xbf\xf77\xfd=\xc0\xf4\xf7\xad\xa6" +
	"\xf79}D\xf4x2'\x08\xaah\x93\xe9c\x91\xfa" +
	"\xcfw\x97[\xcaE\xd9/\xe6\xc8\x95\x82\xec\x12\xbd\x0c" +
	"\x07\x94P \x10Y\xd0\x09R\x90\xc2\xf4\xfb\x08\xd1\x02" +
	"\xbd\xa5_\xc1\xa6(\x12ukH_\x18&\x9a;%" +
	"\"\xbb\x0b\x05\xad\xb2X\xb1\x16\xba\xd8/\xb8\xbb\\?" +
	"\x99\xe7\x0f\xde\xe0m\xa2\xea\xdb\x9fk\xf4\xda\xbe\x03Z" +
	"uR\xa2\x18\x15*g\xa52A/\x8f\xd1Z\xed," +
	"\xa2,\xab\xae\x9d\xb5\xd20q\x8aZQ@.P\xac" +
	"n\xb1\x99r*^V\xf9\xd7f\x8c\xc7|\x0c,Y" +
	"\xbd\x7f\xbcPZ^\x13w \x99s\x89\x9b\xbb\xfa\xb8" +
	"\x85\x02C\x85\x1e\x9b\x10\xbc\xf3\x98.\x80?>B7" +
	"\x0c\x09\xb9\xde\xa8\xd3\x85u\xc3\xa0h\xe7\x07`\xf5\x08" +
	"\xa3\x1aD\xa8\x00\xfe \xd4H\x8dj\x101D\x97q" +
	"\x99x_\x8c\xa12\xc6Zu\x19\x97\x83\xf4F\xc1\xfc" +
	"`\xf9\x97F\xf7\xce\x84TR\xf3Mn\xa1\x1b\xd5\xc6" +
	"\xe2\xfb\x8d\xc2\xf8\xa1\x02\xf8\xe6\x9b\xdc\xda[t\x19'" +
	"\xa0\x0c\x0d\x17\xcco(WT\xaf\xa0\x81N\xa0F\x04" +
	"\x00$7\x96;\xe2H\x05;\x92\xa8\x0ar\x15P\xa0" +
	"\x01\x14\xda\xba\xd1m\x1c&\x09\xd6A\x8a \x89\xa8\xdb" +
	"\xddr\x9aC\xe4\xdd\x89\x82K\xd7\x0d\xa2\xce\xc27\xae" +
	"b\xc0\xc2pr\x8a\xdb9A\xf0Es\xf0@\xa5=" +
	"\xb3n\xdd\x11\xc6\xa5\xa8\x11\x8a\xb3*z\x99x\xb3\x1a" +
	"\x89\xce\xbaf}\xa4\xe9\xea\xbd\x9a\xe8\x1d%\x89\x13\xe8" +
	"\x0a\xb5l\xb7w#\xdf\x8c\x9b\xf2x\xd0\x87$\xcdU" +
	":\x85@\x05\xc8T:\x86\x15.\xea*\xc9U#\x04" +
	"\x7fe\xab\x0ew\xa48}\x1eI\xfb\xff\xee!MJ" +
	"\xdbE\xe5H\x9f\xdd(*\xfa\x95\xb6p\xb8\x91Y\xa4" +
	"\xa1e%MtI>13\xa0)\xc3\x14o\x99$" +
	"7\xba\x0d\xb6\x945\xb4\xe9\xac\xa1\xcdc\x9dD\xa2J" +
	"M0o\x9d\xc8\xf0+^:\xea\xacb{\"{\xa6" +
	"\x8a>O\xdd0\xc5Mg@\xb4\\\xae1h\xe0Y" +
	"\xf5\xa2\x08\xff/\xd8w\xa1\x9a\xa5o\xfdo\xd8w\xf5" +
	"\xb01\xf9\xa5\xda\xd6\xbb4}\xc2\x04yDaI\x06" +
	"\x16\x0eL\x8b\xc6\x01L\x85\x19\xcc14*\xec\x10\xcd" +
	"!^\xb5FT\x9d\x92[\xd4\x0f$\x13s1\xb9u" +
	"\x14\x1b\x85\xbe\xee\x9dC\x9d\xd2\x0c\xcdD\xdd\"\xca\xf5" +
	"\x1f\x9a\x89\x19\x13\x0d\xd7\x7fpE\x08\x1a\xd1\x04WU" +
	"\xb9\xe4\xd1\xe2\xa8\x9bB\x1ad\x9f\x0bk:\x90\xaa\xe0" +
	"5\xf4t\x01\x08|\xd2%\x10\xbfV\x1el&\xfd\x9c" +
	"K\xf0k\xe5\\F\xf0\xf6\xfaV\x9c\x1a\xae\x90\xe4a" +
	"B0\xbe\xd2\x92!\x9b\xd5\xc2M\xb4\x0d\xae\xd0\xd9<" +
	"\xca 3\xd7\xa3\xd0\x93\x88\xbcbK\xe24\xbcY\xb8" +
	"\x15W\xa3\xad\xa2M\xb45\xf8\xb1\x04\xffH\xc6\xc9\xd5" +
	"\x96:H\x18\xd7R\xb2\x04Z\xbd\xe0\xd6\x0f\xb36[" +
	"\x95(\xb6\xa5B\xcfXb*W\x13\x897\x8a\xdb)" +
	")]\xd8\xbc\x8f\xb1\xdc`\xd1\xb8\xe9UU\xa8\xe3\xa2" +
	"\x09\xeeQ\xd1\x1e\xab`d\x04\xb6\xd2C\x1b:o6" +
	"ZQ=n\xa7\xa8\xc6\xd5\xe8\x1a)u)v:\xeb" +
	"R\xec+\xa9\xb2\x80!\x0e<\x9f\xc7\xba\x14\xbb\x8c." +
	"\xf4\x1e\xb2\xb5cQ\xcd\x0d_s\x1d\xf2\x8c\xc6\xa3\x1a" +
	"j8^C\x9e\xd1\xce\xe8\x195j\xaa\x05\x0b\x11\xf2" +
	"]\xd1!k8^\xdbZu5\xb4\x1b\xba\x0a\xc2\x8e" +
	"\xd7\x8c\xb2@y\xb9\x91UD]\x87\xd9\xe0Q\xe4\x0a" +
	"\xf34\xa1Z\xa7\xd6\x0d\xe3\xe2\xc0\xechT\xf8\xd96" +
	"\x8c\x86\xf5J\xfc\x91\x9b\x14\xab<\x7f\x86_\x13\xb4\x80" +
	"\xdf\x14\x85\xf2\xdf\xcd\xa5\xc8X\xb8\xb3\x15\xbeNL`" +
	"\xe1\xccvC^\x13vCRD\x19\xb9\x90s\xa4/" +
	"\xe2\x86\xaf9\xe4\x1c\x19\x808\xeb\"\xcb\xac&.\xb2" +
	"\x8c\xbc\x99+\xe4\x1c1\x97\x9d\x0b9Gr\x91\xde0" +
	"4B\xce\x11\xf3\xcd\\!\xe7\x88\x03q\xe3f\xae\x90" +
	"s\xa4\x04\xf1\xb0\x01\x02\xcbM\x154E\xfd\xc3\xf7)" +
	"F\x97\xcef\xaaxT\xaf\x07t\xc6\x84_\xaa\xff=" +
	"\xd6\xf4wi\xa3\xf8K\xf3A_ve\x11V\x0d\xaf" +
	"\xbc\xe6jx\xcd\xa2B\xdc3\xca\x8c\xcd\xcf|(\xb5" +
	"N\x094:9\xaaWO\x0d\x96Bo2iO\xd7" +
	"!\xfd2\xfbN\xba\x98\xe6\xdd\x0e\xd9b\x8a\x87Q3" +
	"-\xbd\x05\xa7C\x86\xdf\xa3hT\xac\x82uD=\xaa" +
	"\x12\xae\x01\xaf\xc8E\xe3\x1f\x18\xdf\xd2\x1d\xc9\x11'\xe6" +
	"\x05T\x8de?g\x0bx\x8d\xac\xcaV^\x89T$" +
	"\xc8n\xc5[$\x92j\xd3\xe0to!\x00\x1fG\x15" +
	"\xd3\xb0ET\xd2hY\xfb\x02\xcd-\xd3\xe7\x13\x05\x15" +
	"\xeb\x92\xfd\xe1\xdaRE\xf4eL\x91\xea`\xe40D" +
	"[\x11\xcetR^p;}\xa2\xc7\xe6q\x8aZ3" +
	"\xe5j\xf4\x1be\x9b\xd0~\xd9\xb6\xb0\xa2\x09X\x8a\x91" +
	"\xb3\xb6<Z\x05\xa2\xea\xaa\x14d\xad0\x00\xff\x0fU" +
	"\xd7\xa6VkZ\xd4\x15\x19\x98vP\x9a\xa1\xd5\x9a\xd2" +
	"\x17\xb0L\xadG\xa1\xcf\x10\xb0\xd6@\x0a^\xf3\xdeZ" +
	"W \xacG\xbddx\xa3\x0e1mf:) \xd4" +
	"!\xda<6:\x94et\x88\x19\xc7\x053\xc7\xd4\xad" +
	"\x0cM\x89\xa8\xe3\xe8\xaa\x04i\xeao\xd5\x0d\x13\xea0" +
	"U\x14\xac\xba,-\x0e\xef\x96C,E\x1c\xe7\x1cl" +
	"\xb1\x12\xe7\x08\x0b\xb5[\xe6 \x9e\x0dx\xa1\x85\xda-" +
	"\x0b,x\xae\x0f\xf01\x16j\xb7,\xb1\xa4\xd1\xae\xf2" +
	"\xf0n9\xd6\x02\xbb\\1\xe0\x0fX\xa8\xddr\x9c\x05" +
	"\xdd`\x80\xbb-\xd4n)\xe0w\x1f\x00\xdcc\xa1v" +
	"K\x09\xf1J\xc05\x0b\xb5[V\xe3w=\x80\xd7\xd2" +
	"\xa1\x84\x80\xa5;\xc79}\x80O\xa2C\x09u\x88k" +
	"\x80O\xa1C\x09\x93\x11\xaf\x05|:\x1dJ\x98\x8a\xf8" +
	"$\xc0g\xd1\xa1\x84\x19\x88O\x01|.\x1dJ\x98\x8d" +
	"\xed\x99\x0e\xf8\x02:\x940\x0f\xe9g\x01\xbe\x04\xf0\x84" +
	"\x04\xfd\x18\xfbB\x1c\x87\xb9\x80/\x03<1Q?\xc6" +
	"\xbe\x14\xfb\xbb\x04\xf05\x80'%\xe9\xc7\xd8W!\xbe" +
	"\x12\xf0\x0d\x80\xf3\xbc~\x8c}=\x86*\x9e\x06|\x8b" +
	"\xc5B\x88]?\xc5\xbe\x19_\xbf\x01\xe0\xed\x16\x0b\xd3" +
	"\xb1\x17\xf5\xf1\xa0\xc8#>\xcd\x1e\x93\xf2k\x82\xaa\x95" +
	"*2\xedw`\x1d\x1a\x8a8\xfe\xd4\xe4\xa1\x1d\xfa8" +
	"\x0euh\x87>\x9ac:\xc0C\x1d\xf3\x89<\xb4\x13" +
	"\xed\x09'-\xa0)\xa6\x8b\x1fZY\xdb\x15\xf3\xf4\x0a" +
	"D/&\xfb7\x9dL\xd9|>\x14}\xb5>\xab\xbe" +
	"\xa8\xa9\x0a\xaf\xae\xaaP\xe5\xeb3\xef\xa9\xae\xde\x16?" +
	"\xad\xb9\xe2a\x8d\xae\xcb\x10\\\x9a\x18\xba3\xc3\x16\xba" +
	"xqpX`,E\xff\xf5\x02P7WR\xf7\xd2" +
	".G7\xf82\x80\x9f\xa6\xef\xa5]\x8b\xe4+\x01\xdf" +
	"@\xbb\xe5\xd7\xa3{|\x0d\xe0\x9b\xe8{i7\"\xfd" +
	"\xd3\x80o\xa1\x8b@oF\xad~\x13\xe0;\xe9\"\xd0" +
	";P\x8b6B\xa1\xa1\xb2\x17\xbb\xf0=\xdb\x01\x7f\x9d" +
	"\xbe\x97v\x0f~wg8\x14\x1ar\xcb\x1fB\xfc\x00" +
	"\xe0G\xe8{i\x0f\xa3\xfdd\x84HCe/\x8ec" +
	"\xa8\xd5\x08\x85\x86\xca^\x9c\xc2\xf6\x18\xa1\xd0P\xd9\x8b" +
	"oQK\xff\x12\xf03\x84*{q\x1a\xc7-\x1c\"" +
	"\x8dd2\xd6\xfd\x9a\xf4:3\xf9\xe4#\\\xf8\xe1\xaa" +
	"\xaaM\x9fl\xa4WFd\xcdwS>\xb8\xe9\x98\xa2" +
	"O\x95\xbc\x82Z\x97\xcb\xa5\xb8\xef\x94<\xb4\xad\xe7R" +
	"d\xb7\xa0\x92\xba\\\xfc\x81\xfa\xb02B\xf1R\x09\xa0" +
	"\xb2P\xe6\xa1\x0e\xdax\x04\xbf\x96o:\xc5\x14m\x0d" +
	"\xa8|\x1b\x8cA4\xb9\x91j\x0b\xda\xab\xe9\xba\xd8p" +
	"\xc9\xbb\x94\x08w\x86\xcd\xa5\xf8[si;n\xf0\xc3" +
	"<q\x8d+\xf7\xb4X\xc7\x86\xa5\x1c\xe8\xa5\xb2\x04O" +
	"\xabt|0\x95Kd\xa1&N\x90<\xcd\xd4\xd4l" +
	"\xae\x0e[\xd3%\xa3\xb2\x14\xc5\xd3b\x9e\\BC\x8f" +
	"\xd5\x9b\xef\xa9\x0e\xe4\x1c\x88\xfan\x89\"Ar\x8fT" +
	"4\xf1\x7f3\xf5\xb6\xb5\x979M\x14\x04\xd5)\x0a\xaa" +
	"\xab\xb2H\xf4\x07\xe2<zZ<U\xb1\xb7\xc8\xb8\xb1" +
	"$|\xffq\x1eu\xa7iH\x92\xef\xcb\xa3\xae/\x0d" +
	"Y\xa2\x07\xc7S9\x9a\xc1\xb8d\xe4U\xc7\xc1\xa0d" +
	"\xe2\xf1T*\x1d3t!\xc5\xc9<#\xf3\xb2\xf9\xfb" +
	"\x9f\x1b\xfcb\xe3\xf2\xbdr\xc0\x1b\xbc\x09\x82\xa3\xbd5" +
	"\x92\xe0\x19\x19\xe0l\x91\xd5\x8c\x1b{\xf0L\xcb@\x13" +
	"\xbdNM\xd0Z\x15r7\x12\xea\x0d7\x0e\xb5\x86\x93" +
	"Xk8\x89ef%Q.\xd2\xe6\xcb\xd2F\xb7k" +
	"\xe7)\x121\xdfv\x93\xc5\x0a}\xa4\xb1B\x1fET" +
	"\x94#\xa4\xf3\xff?\xec\x9d\x7f\x8c\x1c\xd5\xb5\xe7\xab\xba" +
	"\xedn\x13\xe0\xb5=\xeeq\x80G\xd2\xe0\x98\xc4LL" +
	"\x82\xc7\xe3\x04&\xf0\xda3\x1e\x83g2\x86\xf1\xf4\x18" +
	"\xec\x89y\xcf\xd5]\xb7g\xca\xae\xaejWU\xcf\xaf" +
	"g2\x86\xd8\xc4$&\xb1\x13;1\x89Ilb\xde" +
	"3o\x1d\x09\x9e@\x0bOF\x0b\x92\xad\x85\xc8~k" +
	"VxeVF\x02\x09$\xb3K$\xd0\x12=X\x91" +
	"\x9d\xd59\xb7\xab\xee\xa9\xea\xea\xe9j'\xbb\xf9c\xf7" +
	"\x1f\xcb\xfd\x99\xea\xea\xea\xea\xba\xf7\x9e{\xef\xf7|\x8f" +
	"\xaf\x06\x8e\xbb\xf5\xf1\xdbNQ\x9a\xcd\xdd\xfax\xb6M" +
	"H\xdbx\x02\xa8\x98\xef\x04\xfa\xa7\xf0\xc1A\xe45\x06" +
	"L\xf6\x9a\x0c_\x060\xab\xb5\x9b\xc5u'j\xa1\x90" +
	"\xf93\xf7\x1d\xe9\xe8\x7f\xe4\xdf}v1\xb2Y)\x0f" +
	"\x92\x14C\x19a\xf0\xf8Td;J\xd9\xc7PQv" +
	"\xb7\x98P\xca\xd5\xbb^j\x13s\xb2\xe0\xcd\x9c61" +
	"\xcfU\xd8\xf4\x1al\x9c\xben\xd6\xc9\x1fW\xe1\xd7X" +
	"I\xcb\xb4\xa2\xac\xa4X\x0d\xfc(\xf9\xf2\x00\x8d\x03 " +
	",\x0blh\xd7\xad\xa17\xa7Q\xdd\xd3\x0c\xcb\xd5\xd6" +
	"*\x09\x9d\xa7\xb75\xb8\xd7\xde#^\x1a\x14s]\xff" +
	"<=5\xeb\xd4\x15\xba\xa6\x01K+\x84mQ\xd6\xdf" +
	"\xca^S\xaa\xd6\xfe\xab\xe3\xaa]\xef\xce\xd03\xc2\xc3" +
	"\xeb\xed\xe6'Y\x09\x9e=\x98A\xb9\x91n\xa9\xe5:" +
	"\x98r\xb6\xc0\x94\xb3\x85L\x8d\xb7\xb7@\xc8V\x06\xbe" +
	"\xa3E\x08P&[ \xe2t\x00\xefl!\x91\xee\x83" +
	"\xc8'\x80\xefj!\x91\xeeCx\xfa\x1d\xc0\xf7\xb4\x90" +
	"Hw7ZZ\xec\x02\xbe\xaf\x85D\xba\x8f\xe1y\xf6" +
	"\x00?\xd0B\"\xdd\xfd\xc8\xf7\x02?\xd4B\x0c\xde\x0e" +
	"\"\xdf\x07\xfc0\xf0+\xe6\xf1H\xf7\xf1\x96\xad\x10\xa9" +
	"\x03?\x06\xfcsW\xf0H\xf7(\x1e\x7f\x18\xf8q\xe0" +
	"W~\x8eG\xbaO!?\x02\xfc\x04\xf0\xab\xae\xe4\x91" +
	"\xee\xd3h\xc9q\x0c\xf83\xc0\xaf\xbe\x8aG\xba\xbfm" +
	"\xc9C\xa4\x0e\xfc\x05\xe0\x7fu5\x8ft\x9f\xc7\xcf}" +
	"\x0e\xf8\xcb\xc0S\x7f\xc5g\xc6/\xa1\x15\xc8I\xe0\xaf" +
	"\x02\x9f\x9f\xe23\xe3\xd3x\xfc)\xe0\xe7\x80/\x98\xcf" +
	"g\xc6g\xf1\xf83\xc0/\x00oY\xc0g\xc6\xe7\xf1" +
	"\xf87\x80\xbf\x0d|a\x0b\x9f\x19\xbf\x85\xc7_\x04~" +
	"\x09xz!\x9f\x1a\xbf\x87\xc7\xbf\x0b\xfcC\xe0\xadi" +
	"n\xf0\xf6{<\xfe\x03\xe0\x9f\x00_\xd4\xca\x0d\xde\xfe" +
	"\x80\xc7\x7f\xdc\x12\x97\x07\x17\xc6\xe4\x05\x9f_\xc4\xfd\xdd" +
	"\xfe\x88\x87\x7f\x06\x87\xcf\x03~\xcd\xe7\xb9\xbf\xdb\xdc\x85" +
	"\xb8\xaf\xb30.\xe7\xe6\x03\xbf\xf6\x1a\xee\xefv\xf5B" +
	"8\xfe*\xe0\xd7\x00\xbf\xeeZ\xee\xef\xd6\xba\x10&\x08" +
	"\xf3\x81_\x0f\xfc\xaf\xaf\xe3\xfen\xd7.\x84\xa7\xed\x1a" +
	"\xe0K\x80_\xff\xd7\xdc\xdf\xed\xc6\x85\xf0\xb3\\\x0f|" +
	")\xf0/\\\xcf\xfd\xddn\xc2\xf3\xdc\x00|\x19\xf0/" +
	"~\x81\xfb\xbb\xdd\xbc\x10\x1e\xab\xa5\xc0;\x80g\xbe\xc8" +
	"\xfd\xdd\x96\xe3\xf1\xcb\x80\xdf\x06\xfc\x86\x0c\xf7w[\xb9" +
	"\x10&D\xb7\x02\xbf\x03\xf8\x8d7p\x7f\xb7\xdb\x17\xa2" +
	"\x9e\x0ax\x0f\xf0\xc57r\x7f\xb7\xae\x85S\x92\x94[" +
	"\x05\xbc\x1f\xf8\x97\x16s\x7f\xb7\xde\x85\xf08\xac\x05>" +
	"\x04|\xc9\x97\xb8\xbf\xdbz\xe4\x03\xc07\x03\xbfi\x09" +
	"\xf7w\xdb\x84\xd7\xb9\x11\xb8\x0a\xfc\xcb7q\x7f7\x05" +
	"\xef\xc3\x16\xe0:\xf0\xaf|\x99\xfb\xbbix\x1fT\xe0" +
	"e\xe0K\xbf\xc2\xfd\xddJx\x1e\x1d\xf8\x04\xf0\x9b\x97" +
	"r\x7f\xb7\x0a\x9e\xc7\x01\xbe\x13x\xdb\xcd\xdc\xdf\xedA" +
	"\xbc\x0f\x13\xc0w\x01\xffj\x1b\xf7w{\x08\xef\xc3\x0e" +
	"\xe0{\x80/\x93\xb9\xbf\xdb\xee\x8501\xdc\x05|\x1f" +
	"\xf0[\xbe\xca\xfd\xdd\x1eC\xbe\x17\xf8!\xe0_[\xc6" +
	"\xfd\xdd\x0e\xe2\xf7=\x00\xfc\x08\xf0\xaf\xdf\xc2\xfd\xdd\x9e" +
	"\xc0\xf3\x1f\x02~\x0c\xf8\xad_\xe3\xfenG\x17B\xf7" +
	"p\x18\xf8q\xe0\xcb\xbf\xce\xfd\xdd\x9eZ\x08\xcd\xee\x08" +
	"\xf0\x13\xc0\xdbo\xe5\xfenO\xe3\xf3v\x1c\xf8s\xc0" +
	"W,\xe7\xfen\xcf\xe2\xf9O\x00\x7f\x01xG;\xf7" +
	"w{\x1e\xf93\xc0O\x02_\xb9\x82\xfb\xbb\xbd\x88\xe7" +
	"y\x01\xf8)\xe0\xdf\xe8\xe0\xfen\xaf \x7f\x19\xf8\x19" +
	"\xe0\xdf\\\xc9\xfd\xdd^\xc3\xeb<\x05\xfc\x1c\xf0\xdb\xbe" +
	"\xc1\xfd\xdd\xce\xe2}>\x03\xfc\x02\xf0\xdb\xbf\xc9\xfd\xdd" +
	"\xce\xe3}x\x03\xf8\xdb\xc0;o\xe3\xfeno!\xbf" +
	"\x08\xfc\x12\xf0o\xdd\xce\xfd\xdd\xde\xc3\xe7\xed]\xe0\x1f" +
	"\x02\xbf\xa3\x93\xfb\xbb\xfd\x1e\xaf\xff\x12\xf0\x8f\x81\xdf\xf9" +
	"-\xee\xef\xf6\x11\x9e\xe7C\xe0\x9f\x01\xff\x9b;\xb8\xbf" +
	"\xdb\xa7\xc8?\x01>'\x1d\x93\x17d\xef\xe4\xfenr" +
	":/I\x83\xe9\xb8\x9c\xbb\x0a\xf0\xaa\xbf\xe1\xf6nW" +
	"\x00\xce\xcd\x03\x9e\x06\xde\x95\xe5\xf6n\x0b\x90\xcf\x07~" +
	"=\xf0\xeeU\xdc\xdf\xedZ\xe4\xd7\x00_\x02|u\x17" +
	"\xf7w\xbb\x11\xf9\x0d\xc0\x97\x01\xef\xe9\xe6\xfen7#" +
	"_\x0a\xbc\x03\xf8\x9a\xd5\xdc\xdfm9\xf2[\x81\xdf\x01" +
	"\xfc\xae\x1e\xee\xefv{\x1ans\x07\xf0U\xc0\xef^" +
	"\xc3\xfd\xdd\xeeL\xa3/\x1b\xf0\xb5\xc0\xd7\xde\xc5\xfd\xdd" +
	"\xd6\xa4\xd1N\x10x?\xf0\xde\xbb\xb9\xbf[o\x1an" +
	"\xe7Z\xe0C\xc0\xfb\xd6r\x7f\xb7\xf5x\xfe~\xe0\x1b" +
	"\x81\x7f\xbb\x97\xfb\xbbm\xc0\xf3\x0c\x00\xdf\x0c\xbc\xbf\x8f" +
	"\xfb\xbbmJC\xb3\x1b\x02\xbe\x05\xf8\xba\x18\xf7w{" +
	" \x0d\x8f\xe7F\xe0*\xf0{\xbe\xcd\xfd\xdd\x9446" +
	"_\xe0:\xf0{\xfb\xb9\xbf\x9b\x86\xd7?\x0a\xdc\x01>" +
	"\xb0\x8e\xfb\xbbm\xc7\xcf\xd5\x81O\x00_\x1f\xe7\xfen" +
	"\x15\xfc\xdc2\xf0\x1d\xc0\x07\xef\xa9\xfa\xbb\xe1\xf9'\x80" +
	"\xef\x02\x9e\xbb\x97\xfb\xbb=\x84\xe7\xd9\x01|\x0f\xf0\xa1" +
	"\x01\xee\xef\xb6\x1b\xcf\xb3\x13\xf8^\xe0\x1b\xd6s\x7f\xb7" +
	"G\xf1<{\x80\x1f\x00~\xdf \xf7w\xdb\x9f\x86\xee" +
	"m\x1f\xf0\xc3\xc0\xef\xcfq\x7f\xb7\xc7\xf1\xfa\x0f\x01?" +
	"\x06|\xe3\x10\xf7w;\x9a\x86n\xfe\x08\xf0\x13\xc07" +
	"m\xe0\xfenO\xe3\xfd?\x0e\xfc9\xe0\xc3\xf7q\x7f" +
	"\xb7g\xf1\xfe\x9f\x00\xfe\x02\xf0\xef\xdc\xcf\xfd\xdd\x9e\xc7" +
	"\xfb\xf9\x0c\xf0\x93\xc07o\xe4\xfen/\"\x7f\x0e\xf8" +
	"\xcb\xc0\x1f\xd8\xc4\xfd\xdd^\xc2\xcf=\x09\xfcU\xe0\x7f" +
	";\xcc\xfd\xddN\xe3\xf9_\x06~\x06\xf8\xdf}\x87\x1b" +
	"\xbc\xbd\x86\xd7\xff*\xf07\x80o\xd9\xcc\x0d\xde^\xc7" +
	"\xfbv\x06\xf8\x05\xe0\xca\x03\xdc\xe0\xed<\xf2s\xc0/" +
	"\x02\xcf\xff-7x{\x13\xcfs\x01\xf8\xbb\xc0\x0b\x7f" +
	"\xc7\x0d\xde\xdeA\xfe6\xf0\x0f\x80\xab[\xb8\xc1\xdb\xfb" +
	"\xc8/\x01\xff\x188[\xce\x0d\xde>B\xfe!\xf0\xcf" +
	"\x80\x17\x15n\xf0\xf6)\xfe.\x9f\x00\x9f\xd3\x1a\x93\x17" +
	"\x8c\xa8\xdc\xe0Mn\x85\xdf\xf13\xe0\xf3\x80\x8f2n" +
	"\xf06\xb7\x15\x87\xdfV\x18~\x81kEn\xf0vu" +
	"+t\xcfW\x01\xbf\x06\xf8\xd6\x11n\xf0\xd6\xda\x0a\xdf" +
	"k>\xf0\xeb\x81o\x1b\xe5\x06o\xd7\xb6b\xbb\x06\xbe" +
	"\x04\xb8\xaeq\x83\xb7\x1b\x91\xdf\x00|\x19\xf0\xd2Vn" +
	"\xf0v3\x9e\x7f)\xf0\x0e\xe0\xc66n\xf0\xb6\xbc\x15" +
	"\x8b\xd5\x01\xbf\x03\xb8\xa9s\x83\xb7\xdb\xf1:o\x03\xde" +
	"\x03\xbc\\\xe2\x06o]x\xfeU\xc0\xfb\x81o7\xb8" +
	"\xc1[/^g\x0f\xf0\x01\xe0\x96\xc9\x0d\xde\xd6\xb5\xc2" +
	"\xf3\xb0\x16\xf8\x10p\xbb\xcc\x0d\xde\xd6\xe3y\x06\x80o" +
	"\x06\xeel\xe7\x06o\x9bZq\x98\x05\xae\x02\xafX\xdc" +
	"\xe0M\xc1\xe3\xb7\x00\xd7\x81\x8f\xd9\xdc\xe0M\xc3\xeb\x1f" +
	"\x05\xee\x00\x1fw\xb8\xc1\xdbv\xe4e\xe0;\x80OT" +
	"\xb8\xc1\xdb$\xf2\x09\xe0\xbb\x80O\x8eq\x83\xb7\x87\xf0" +
	"\xfaw\x00\xdf\x03|j\x0e7x\xdb\xdd\x0a\xc3\xefN" +
	"\xe0{\x81\xff\xfd87x{\xb4\x15\xdb#\xf0\x03\xc0" +
	"wLp\x83\xb7\xfdx\xfe}\xc0\x0f\x03\x7fp\x92\x1b" +
	"\xbc=\xde\x0a\xcf\xff!\xe0\xc7\x80\x7fw*-\x7f\x17" +
	"\xda#\x9e\xe7\x08\xf0\x13\xc0\xa7\xff>-OC{\xc4" +
	"\xf3\x1c\x07\xfe\x1c\xf0\x9d;\xd2\xf2Nh\x8fx\xfc3" +
	"\xc0O\x02\x7f\xe8\xc1\xb4\xfc\x10\xb4;<\xfe\x05\xe0\xa7" +
	"\x80?\xfc\xdd\xb4\xfc0\x0c\x8fx?_\x06~\x06\xf8" +
	"\xf7\xa6\xd3\xf2\xf7\xa0}\xe1\xf1\xaf\x02\x7f\x03\xf8\xae\x9d" +
	"iy\x17\xb4/<\xff9\xe0\x17\x81\xef~(-\xef" +
	"\x86v\x84\xc7_\x00\xfe.\xf0G\x1eN\xcb\x8f@;" +
	"\xc2\xf3\xbf\x0d\xfc\x03\xe0\xdf\xff^Z\xfe>\xb4#<" +
	"\xfe\x12\xf0\x8f\x81\xef\xd9\x95\x96\xf7@;\xc2\xf3\x7f\x08" +
	"\xfc3\xe0\x8f\xeeN\xcb\x8fB;B\xfe\x09\xf09\x8b" +
	"b\xf2\x82\x1f<\x92\x96\x7f\x00\xedh\x11\x0c\x83\x8b`" +
	"\x18\x04\xfc\xc3\xef\xa7\xe5\x1f\xc20\xb8\x08N?\x0fx" +
	"\x1a\xf8\xde=iy/\x0c\x83\x8b\xb0\xe4#\xf0\xeb\x81" +
	"?\xf6hZ~\x0c\x9a\x0b\x1e\x7f\x0d\xf0%\xc0\x7f\xf4" +
	"\x83\xb4\xfc#h.x\xfc\x0d\xc0\x97\x01\xff\xf1\x0f\xd3" +
	"\xf2\x8f\xa1\xb9,\xc2a\x10x\x07\xf0}{\xd3\xf2>" +
	"h.x\xfc\xad\xc0\xef\x00\xbe\xff\xb1\xb4\xbc\x1f\x9a\x0b" +
	"\x1e\x7f\x1b\xf0\x1e\xe0?\xf9QZ\xfe\x094\x97E\xd0" +
	"\xecV\x01\xef\x07\xfe\xd3\x1f\xa7\xe5\x9fBsY\x84\"" +
	"\x1b\xe0\x03\xc0\x0f\xecK\xcb\x07\xa0\xb9,B\x91\x0d\xf0" +
	"!\xe0\x07\xf7\xa7\xe5\x83\xd0\\\x16\xc1\xe3\xd9\x0f|#" +
	"\xf0\x9f\xfd$-\xff\x0c\x86A<\xff\x10\xf0-\xc0\x7f" +
	"\xfe\xd3\xb4\xfcs\x18\xee\xf0\xfc\x1b\x81\xab\xc0\x0f\x1dH" +
	"\xcb\x87\xa0\x19\xe1\xf5o\x01\xae\x03\x7f\xfc`Z~\x1c" +
	"\x9a\x11~\xae\x0a\xbc\x0c\xfc\x17?K\xcb\xbf\x80hu" +
	"\x11F\xab\xc0'\x80\xff\xf2\xe7i\xf9\x970\xdc\xe1y" +
	"\x1c\xe0;\x81\x1f>\x94\x96\x0fC\xb4\x8a\xf7a\x07\xf0" +
	"=\xc0\x9fx<-?\x01\xcd\x08\xafs\x17\xf0}\xc0" +
	"\x7f\xf5\x8b\xb4\xfc+\x88J\xf1<{\x81\x1f\x02\xfe\xeb" +
	"_\xa6\xe5_CT\xba\x08\x9a\xcb\x01\xe0G\x80\x1f9" +
	"\x9c\x96\x8f@T\xba\xe8Ih.\xc0O\x00?\xfaD" +
	"Z>\x0a\xcd\x05\x7f\xdf\xe3\xc0\x9f\x03\xfe\xe4\xaf\xd2\xf2" +
	"\x93\xd0\\\x16\xa1\xfb/\xf0\x93\xc0\x7f\xf3\xeb\xb4\xfc\x1b" +
	"h.x\xfc\x0b\xc0O\x01?v$-\x1f\x83\xe6\xb2" +
	"\x08\x1e\xc3\x97\x81\x9f\x01\xfe\xd4\xd1\xb4\xfc\x144\x17\xbc" +
	"?\xa7\x80\x9f\x03\xfe\x0fO\xa6\xe5\x7f\x80h\x12\xef\xcf" +
	"\x19\xe0\x17\x80\xff\xe3o\xd2\xf2?\xc2p\x84\xe7y\x03" +
	"\xf8\xdb\xc0\x8f\x1fK\xcb\xc7!\x9a\xc4\xe3/\x02\xbf\xb4" +
	"(PP\x06wF\x9c\x0a]7\xf3Y\xa8(d\xbf" +
	"1\xae\x14H\x9an\xa1b)\x05*-H)t\xa7" +
	"Q!\x9b\x93)E\xa3\xeer\x96\xa3\x15\x95\x82#\xa5" +
	"\x8a\xba2\"\xcf\x93b\xf2<8\x86\xecr\xc2\x0b\xa1" +
	"\x8d\xe7u\xd4h*\x80\xc5l\xc7\x92\x92Z\x81\x0al" +
	"Fl\xddt\x96K~1\x89\x8b\xe51\xcd\xd6\xf2d" +
	"\x1b\xc6\xfdK{\xf8\x1b\xda\xeb\xbeaE\xf8\x1bV\xd4" +
	"}CG\xf8\x1b:\xea\xbeae\xf8\x1bV\xd6}\xc3" +
	"7\xc2\xdf\xf0\x8d\x9a7L+\x95\x11\xff\x91c\xa6\xa6" +
	"\xfa]\x01S\x0a\xd9J\x9e\xce+#\xb66E\x1c\x87" +
	"\x14<5](\x87c\xe8I3yed\xdc\xa2\xc6" +
	"\x81L-\x8d(R\xbc\xe4\x04\xa1%e\x95\x02Sj" +
	"\xff\x90\x97\x92\xa6:Y{x\x92\xee_\xe7\x15K\x85" +
	"\x0f\xf6\xdb\x14Z\xea\x98\xa2W\xe8\x17\xca\x9b\xe66\x9f" +
	"\xbc\xd9\x09\xc8\x9b=&6\xbd\xa7\xb1\x1e\x91X\x9a\xcb" +
	"\xe0\xae\xb8\xfb\xb0\xce\x14\xd0l\x82\x15\xa5L\x91\x15\x1c" +
	"[\xb8pL8\x96\xa2\x96F\xa4\x8cO\x90/x\x92" +
	"|Y\xbf\x16'^\xb0\xea\x95\xff\xe3/\xedQ)\xa5" +
	"1\x91B\xe2\xdf\x88\xcc\xa8LW&\xe9#\xa0j\xb6" +
	"\xa3I)]g\xe2\xbaU\xd3\xb1G5\xa6K)\x95" +
	"$R\xc5U\x8b\xea\xd8\x0b\xdb\x9c\xc92]\x82D\xa6" +
	"\xb31)\xc9t!\x0b`:+\xa9\xa5\x11GJ\xd2" +
	"'\xaaJ}?w\x06\xcd'\x85\xa6\x87\x0b\x0d\x15)" +
	"Yr\x96\x87\xd2\xf6P\xba\"\x94v\x04i\x09\x9e\x9d" +
	"\xe5\xa1\xb4=\x94\xae\x08\xa5\xe4\xbcf\xa1b\xb3bQ" +
	"J2\xd1\xe1\xc4\x8b\xe4\x0b\x8d\x19\xa6j\x99\xb4\x1cU" +
	"fT\xb1\x9d\x90;\x18\x17\x9b\x16$\x09\"c\xb1\x11" +
	"\xe6m\xf7\xa6\xb4\x02)\xa6\xa9\xa9EM\xf7\xfb(\x14" +
	"\x02\xa2\x15`\x81\x86\x90\xd1\xb5\x91QQ\xbcQ7-" +
	"\"Y6-6b\x99\x15I\x16\x17PRF\xb4B" +
	"\xa8\x99\xec\x0c\xbc\x80\xeb\xa3\x1b\xd2\x9e\x9bh\x96\xf9." +
	"}\xa6\xa48,\xa0\x15\x99\x19e\x96i\x17MK\x1e" +
	"a%Se\xbaD\xeb\x99\xe1\x12\xb8\x14\x17--^" +
	"\x12\xed\x80\xdfV\xf2\xd2\xf2{e\x19\xf0\x14\xeb\xb2i" +
	"1\x18J$\xf71\x8f\x97\x89I\xace\x16,\x14\xae" +
	"\x89{c)\x05\xd2\xb2-\xc5 m\xcdb\x85\x9a\x12" +
	"k\x16+`s\xf6\xb3\xed5\xc7\xd9L\xd7\xdd\xcfr" +
	"\xed\x11\xedj5g\x9a\xa3\xe8\xebQ\xf1\xcc%S\x0d" +
	"\xf4\xe1\x1e\xf6K\xf736\xf5M\xe5\xcfU\xf0\xd1\xe4" +
	"n\xbc\xf6\xa8\x06\xed\x95\xd4ct,m\x1bsF\xa5" +
	"\x8ceV\x88\x04\xd4v*\x86\xc5lM\x8a\x93ML" +
	"\xbbR*\x99\x06S\xfd\x834\xdf\x85\xb7\xb7iRR" +
	"\x17\xf6}\x99\xa22F\xacs\xc7\x19}\xf4f\xf2\xcc" +
	"`E\xcd)JI8\x91\xcf\xb9.\xd0ws\x03[" +
	"\x95\xc1\x91\x93\x01\xea\xf8\x95\xf4\xb8\x81UT\xc6|\x0e" +
	"\xbf\x8a\xe3T\x0c\xa6\xe4\xa5\xb8\xd0ad\x0c\xb3,R" +
	"\xa4\xa7+(b\x14\xd9\x9f\xe8f\x17\xe8\xed|\x1e\xb6" +
	"A(\xeb\x0e\x1f\xff\xa8\xbc\xab\xb0\xcd\xd6\xa6\xe8)\x0c" +
	"\xd3\xb1\x14\xc3.JqZ\x8f\x1c\x0eT\xf2\xba\xef\xb3" +
	",\xb3\xc0\x8aE&\xc5\xc9\xcf\x070xo\x80\xc1\xf3" +
	"&\xc5I\x0f\xecAY\x8c4\xe3\xa6e\xd4\x9c\x11`" +
	"\xf0\x8c\xc0j\xce\xe8ArF\xec\xfe\x02\xf7\x08Y\xcd" +
	"\x88\xe0Q\xd2\xcb\xcd\xd8\x05\xcb\xd4uV\x94RE\xdf" +
	"3\x8a8\xf0\xb3r\xa83)5F\xcf\xeba\x9f\x89" +
	"\xb2=V0-\xabR\x0e\x1a\x84\xbb\x0d'YR&" +
	"\x88\x14\x96\xd9\x8e\xe60)S*\x92\xe70[\xaeX" +
	"d\x10\x9dfc&t\xa6b\xe0\x82\xf8H\xf4zc" +
	"\xa6>\xa6\x19#R\xc0\xe6\x9c\x8d\x99\xf4\xb3T\xbb\xa4" +
	"9\xdaH\xc0\xb9|z\x94):\x0du\xb0\x95BL" +
	"\xe0\xcb\"S4k\xcc\x9c\x0c\xb8\xe5\xe6\xe1\x11s\x94" +
	"\xbc\x94TK#d\xa8\x85kU\x1c)\x83].\xbd" +
	"]Z\xd9)\xc2\xd8\xcf4\x9f\x83/3T%/\xeb" +
	"L\xb1,s\x9c<\\\xe68\xb3l\xb3\"[\x05V" +
	"P\xcaJ!I\x15N\x10R\xd5<Q\x1e\xcc\x16\x1c" +
	"\xbf%\xa5b\xa95\x8f\x95\x07eR\x07\xb9\x92\xf7\xbd" +
	"q\x94i\x96n\x9a>\x8b\xce\xb2\x0e\xe1\xa1\xbf\xc9\xb0" +
	"\xb2V\x80\xef\xdd\xa4\xd1\xd9\x90\x02\x81\xf0,\xc5F\x15" +
	"\xa5_\xb3\x9d\xba~\xebQ\x94\xf2L\xd7\xbb+\xc5\xe2" +
	"\x80\x82\x86@\xf5\x85\xd2\xe1\xb9\xc5rXnq\xac\xd6" +
	"Q-\xcc\xfd8\x95\xaf\x14\x8b\x01\xcf\xf0\xf9RMR" +
	"\x04\x1cUT\xd4\xe6\x8c\xd5\xdc\xdc\x93\x94\x9b\xf8I\xbc" +
	"f:C\xfc\x15\xfb\x88\xad\x8c\xfb\xa5\x1e\x1d\xae\xda\xca" +
	"\x1c#_\xeah>\xac\x8a\xe8\xa0\x10\x82\xfc\x9f\xceH" +
	"\xa9z\x0f+\x10K\xcd\x9f\xb9\xe3[C\xc7\x95\xb3\xd7" +
	"|\x1cY\x94u\xf7\xba\x1c\x8e\x92\\\x94E\x84P}" +
	"B\x08\xe5\x89\x07^\xea\x14\xa5\xcb\xdd\xdc\xc5W\xba\x89" +
	":\xcau\xe09\xddI\xca\x99\xbb\x0e<\xaf\xb5\x10\xc9" +
	"\x94+\x84:\xdbBj\x9c\xbbB\xa8\xd7[\x84\x8e\x0a" +
	"\xb5\x12\x81\x1b\x16p\xaa\x08\x16\x8a\x0f\xe4;\xc9\x93$" +
	"m\xca\xfd\xdfT\x13\xb5g\xb9\xe4\xaf\x89\x9a\x99[\xc8" +
	"S\xf3@_U\x851\x110\x15\xc1\xacJM\xad\xc9" +
	"\xe3\x80\xd8\xd8\xb4\x9d\x10\x93\x80H~pk5\xdbI" +
	"\x9a\\\xe4\x1b\xee\xaa\xe9I\xec\xba\xab\x12\xbb\x9eX\xc3" +
	"\xda\x86s6~\xe7s\x8f\xdc\xf7\xef\xff-\xd8\x91\xcc" +
	"i\x94D\x92ru)\x8d\xcc\x9d|-\xae\xfal\xf9" +
	"\x8c\x9c\\]\xca~\x80\xfb\xe2\xf2\xfa\xc3Dz\xf5x" +
	"\xbb\x90sE\xa9\x9b\xf9'%\x9a4\xa8\x8f\xbc\xdaL" +
	"Ye\x9bE\x11>\xb5\x84\x89qZ\xc2\xc48-D" +
	"\xf9\x14\xc8<\xfaS%r^\xedU\xa3h6\x91\x97" +
	"\xb7\x93<\xe4\xdeOz\x80t\x02\xfb\x1f\x16?\x14\xf6" +
	"\x82\xb3\xdb\xb9W\x9f\xf2\x8c\xa3\x85T~\xa8_\x98\xb5" +
	"\xb1\xc9]U\"\xc5\\g\x8f\xa6\xad\x80,\xcd\xdeF" +
	"f\x8d\xf5=J\xe7F\xcd\x18\xcfZk\\!~\xf8" +
	"\x85\x84\x99\xcc\xf9\x15l&\xe6\xd6\xe6\x1c)\xe5\xcb\xbd" +
	"m\xac\xc2ev\xc5\xb2X\x81g\xe3S\xc3\xc8N\x9a" +
	"\xb6\xec\x89\xa3\x82y\xcb\xc20\xb2\xa5\x8ead\x8b/" +
	"\x9f\xd9\xcd\x1b\xfa\x02r/\x9f\xd9M\x8b\xbe\x11\xd3\x00" +
	"\xbctf/-\xfaf\xfcX\x91\xdc\xeb\xba\xf3,G" +
	"\xd9\xbdH\xeeu\x0d#W\xe2\xf1\"\x89\xd75\x8c\x0c" +
	"$\xf1\x06Sa=Q}<r{\x82\x01<\x98V" +
	"m\xb1\xa9\xa9`*G\xd0\xe6t\xa6`B\xb7\xe0?" +
	"\xa8^\x11\xd5\xfa\xb9l\xacTv\xfb\xd6~\xcd}\x9a" +
	"\x9bp\xce\xf3\xfa\x99\xddm\xd4:\xaf\xda\xcf<\xdaM" +
	"<\xa4\xdd\xce\xf5\xb1>b\x9dW_\x09\x98\xa2\xb3\x8e" +
	"\x1aY\xa0ii#\xc1.\xb7\xb1;6LQ\x02\x89" +
	"\x9b\xd45\xaf\xdb\x97B\xe2>\xb2\xcfc\xea\x87H!" +
	"q\x1f\xd9\x17\xf1x\x91B\xe2>\xb2/!\x17.{" +
	"\xee#\xfb\x0a\x9e\xe7$\xf0Wib\xf8i<\xfee" +
	"\xe0ghb\xf8k\xc8O\x01?G\x13\xc3\xcf\xe2y" +
	"\x84[\x9f\x9b\xea\xf6:\x1e/RT\xdcT\xb7\xf3\xc8" +
	"\xcf\x01\xbfH\x13\xc3\xdf\xc4\xf3\x90\xd4\x95+\xdd\xd4\x15" +
	"\xbf\xbb\x9f\x9b\xea\x16t\xf7sS\xdd\xde\xc3\xf3\x88\x94" +
	"\x167\xd5-\x98\xd2\xe2\xa6\xba\xfd\x1e\xf9%\xe0\x1f\xcb" +
	"\xb5\xe3O\xa6\xacX%o\xadr\x1a\x97z\x96+\x81" +
	"\xd7y\xdf\xd1\xed\xfe\xbf\xb6\x07\x8en\xf7\x1f\xbd\xc2\xff" +
	"\xd7\x15\x81\xa3W\xf8\x8f\xee\xf0\xff\xb5#pt\x87\xff" +
	"\xe8\x95\xfe\xbf\xae\x0c\x1c\xbd2\xdf\\RF\xaf\x91c" +
	"YC\x0d\xf11jk`t\xe1\xeb\xdd\x9bu5G" +
	"\xd9\xf5 +\x85T \x88\\\xafa+\xa9\xd7P5" +
	"sv7\xd0\x8c\xda\x09\x87\xdd\xf4\xc0\xd3]-\xbe\x94" +
	"\xb1\xdc\xccxr\x95\xd7E\xbd\xca6\xa1\xb3&{\x80" +
	"\xbe\xd5\xe6p\xa5w\"j|0\xc8\xec\xb2i\xb8i" +
	"\xcf\xc4\x80\xbbMLJ<\xff\xed<\xc9\xedp\x83\xa1" +
	"\xb7\xfa\x88\xab\xb6;O|\xaf\x8d\xb8j\xbb\xf3\xc4\xf7" +
	"!\xaa{7.\xaf\xffP\xc8\x85\x17\xfc\xbe\x85\x98\x92" +
	"T\xb5\xc2\x0b>j!\xa6$U\xa1\xf0\x82?\xe4\x85" +
	")\x89\xcf\xc4\x14=\xfb\x1d\x93\x19R\xd2!\x8bw@" +
	"uV\xa4]\xb0/\xb6\x99\xddU\x02\xeb\x8f\x14\xccR" +
	"YJ*vS\x05\xf0\xa1a\x0c\xb2\x0c\xde\xdd\xfa\xb3" +
	"\xcc\xb0I\xa6wO_i\xa1\xb3\xcc\xea==\xddB" +
	"g\x99\xf1\xb0Yf\xf5\x9e\x9e\xed\xa6\xb3\xcc\xea=}" +
	"\xbd\xbb\xc1,30\x8dl\xcas#8'\x8dR\xff" +
	"\xc2`\x93\xf7\x1a\xab3\xa6;{ \xa3z\x1f\x19\xc0" +
	"\xdd\x1b\xe5\xab\xf7\xe0\x8e\xea\x8f\xb5\x85M\x99:\xc5\x00" +
	"\xee\x8d\xea\x07;Ex>cy\x0f\xbdT[F\xeb" +
	"O\xb3\x7f\x9bSO\xa1\xcfJ\xbd\x18}\xc5\x0b,`" +
	"\xcbs]\x98-O\xa7h\x01no\xf0\x876a@" +
	"\xef=\x15\x9fv\x13\xab\x1e\xf7\xa9\xf8c\x1f\xb5\xeaq" +
	"\x95\xf9sa`\x1b\x84q\xed*\x9a\x82z\x05\xa6p" +
	"\x0a\xeftW\x98\xbf\x00SPE(\xec\xa6\xa0\xb6\"" +
	"\xf7Baj>\xeewNJ\x95L\xd5\xdbg\xf5\"" +
	"$w_\x82N@\xabl\xda\x1c7\xd0A\xda=\x06" +
	"_\x0f\xf9\xd6\xb1Cb\xb0\xf937\xff\xa1\xa7}\xbb" +
	"\xca\xceE^\x07\xbaK)\xa0\xd1x\x9c[1\x87g" +
	"\xc4\x89\x85\xa0a\x9a\x12W\xfd5N\x0f\xd2\x94\xb8\xea" +
	"\xa3wv\x90\xa6\xc4U\x1f\xbd\xf3\x834%\xae\x9a)" +
	"\xf5V;M\x89\xab\xd6\x1dx\xa7M\xf4\xa5\x7f\x81\xb2" +
	"\x97\xfe\\\xf3(\x86\x8c\xca8&\x9a]\xf2\x82\xd4\xde" +
	"\xc4u\x92\x94\xebI\xc4\xe5\xdc@\x82\x04\xa9\xeb\x12\xa8" +
	"\xef\x03>\x94 A\xea\xfa\x04<L\xfd\xc07&\xa8" +
	"\x1f\x03\xf2\x01\xe0\x9b\x131Yv\xed\x18\x10\x0f\x01\xde" +
	"\x92 \x8f\xf6\x03\x09\x88\xf16\x02W\x13\xe4\xd9V\xf0" +
	"\xf8\xcd\xc0G\x13\xe4\xd9f\x89\xc5\x92\x94\xdb\x02\\O" +
	"\x90\xa4\x13\x0d\xcf\xa3\x02/'H\xd2I)\x01mD" +
	"\x07>\x91 I'\x15<\xbe\x0c|G\x82$\x9dL" +
	"\"w\x80\xefL\x90\xa4\x93\x07\x130\xff\xdb\x01|O" +
	"\x82$\x9d\xecNl\x95\xa4\xdc.\xe0\xfb\x12$\xe9\xe4" +
	"\xb1\x04L#\xf7\x00?\x90 I'\xfb\x91\xef\x05~" +
	"(A\x92N\x0e\xe2u\x1e\x00~$A\x92N\x9e\xc0" +
	"\xe3\x0f\x01?\x96 I'G\xf1g9\x0c\xfcx\x82" +
	"$\x9d<\x85\xfc\x08\xf0\x13\x09\x92t\xf2t\x02b\xe3" +
	"c\xc0\x9fI\x90\xa4\x93\xdf\xe2\xf1\xc7\x81?\x97 I" +
	"'\xcf\xe2\xf5<\x03\xfcd\x82d\x9d\xbc\x88\xf7\xe1\x05" +
	"\xe0\xa7\x12$\xeb\xe4\x15\xbco'\x81\xbf\x9a Y'" +
	"\xa7\xf1<\xa7\x80\x9fK\x90\xac\x93\xb3\x09\x98\x07\x9f\x01" +
	"~!A\xb2N\xce\xe3y\xce\x01\xbf\x98 Y'o" +
	"&\xf20w\x00\xfen\x82d\x9d\xbc\x83\xc7_\x04~" +
	"\x09\xf8\x17e\x9eu\xf2\x1e~\xaf\xb7\x81\x7f\x00<\xf3" +
	"\x05\x9eu\xf2>~\xee%\xe0\x1f\x03\xbf\xe1\x8b<\xeb" +
	"\xe4#\xbc\xce\x0f\x81\x7f\x06\xfc\xc6\x18\xcf:\xf9\x14\xf9" +
	"'\xc0\xe7$c\xf2\x82\xc5\x19\x9eu\"'\xfb$i" +
	"0\x09]2\xe0/\xdd\xc0\x93N\xaeH\xc2\xe39\x07" +
	"\xf8|\xe0Kn\xe4I'W'\xe1\xf6\xcf\x03\x9e\x06" +
	"~S\x9c'\x9d,H\xc2\xe5_\x05\xfc\x1a\xe0_^" +
	"\xcc\x93NZ\x93\xd8U\x03\xbf\x1e\xf8W\xbe\xc4\x93N" +
	"\xaeE\x9e\x06~\x03\xf0\xa5sx\xd2\xc9\x17\xe0rr" +
	"\xd7\x03_\x0a\xfc\xe6%<\xe9\xe4\xa6$\\\xfe\x12\xe0" +
	"\xb7\x02o\xbb\x89'\x9d\xdc\x82\x9f\xbb\x14x\x07\xf0\xaf" +
	"~\x99'\x9d,G\xbe\x0c\xf8m\xc0\x97}\x85'\x9d" +
	"\xac\xc4\xf3t\x00_\x05\xfc\x96\xa5<\xe9\xe4N\xe4w" +
	"\x00_\x0b\xfck7\xf3\xa4\x935\xf8}W\x01\xef\x07" +
	"\xfe\xf56\x9et\xd2\x9bDY$\xf0\x01\xe0\xb7~\x95" +
	"'\x9d\xac\xc3\xeb\xef\x07\xbe\x11\xf8\xf2e<\xe9dC" +
	"\x12~\xae!\xe0[\x80\xb7\xdf\xc2\x93N\x1e@\xbe\x19" +
	"\xf8(\xf0\x15_\xe3I'\x0c?w\x0bp\x1dx\xc7" +
	"\xd7y\xd2\x89\x96\x9c\x92\xa4\xdc(p\x07\xf8\xca[y" +
	"\xd2\xc9\xf6\xa4\x05\xdd\x00\xf0\x1d\xc0\xbf\xb1\x9c'\x9dL" +
	"\xe2\xef\xe8\x00\xdf\x09\xfc\x9b\xed<\xe9\xe4A\xbc?\x13" +
	"\xc0w\x01\xbfm\x05O:y\x08\xf9\x0e\xe0{\x80\xdf" +
	"\xde\xc1\x93Nv#\xdf\x09|o2F+\x9ef\x15" +
	"\x05\xcd\xfd\xc3\x0a\xa3\xfa\xbas\xff\x84\xcb\xa7C\xe2\xe2" +
	"\x86j$\x974\x84u{F3\xc6\xb4Y\x8dV\xfc" +
	"e\x8b3%eB\xbc\x9a)j\x86\x8a[x$\xca" +
	"R\x99\xee(k\x99\xe2W3\x91\x9d\x0a\xa2\x872\xb4" +
	"\x92\xe2h&\x11\xb1\x88}\x8c,\x9eh\x93\xff\xe5F" +
	"\xbaqK\xcf\xcf\xff<<\xeb\x88\x19Ro0\xa3\xd9" +
	"\xd4&?d\xfc\x0c7\x9a\xf1':\xf3\x15\xf9\x9c#" +
	"%\x15\xa7\xce\xc0\x9b\xb5\xb1T\x94\xd080\xe7^\x08" +
	"}|U[\xc2j\xdb\xb2\xed\x15\xad\\bXc\xa5" +
	"\xb6H\xb5\x85\xa5\xea\x98J\xea\x06%\x95\xa2\xc8\x19\x0e" +
	"T\xe8\x0d\xd4\x89\x80\x9b\x11n\x8f\x13R\xedwf\\" +
	"\xd1\xb7\xc1\x87I\xb2\xea~VF\xb3\x07\x84\x90\xc3/" +
	"o\x0au\xf2\x09\x09Z\xa6\x8b\xfa$\xf5\x8c\x0f\xd6\x04" +
	"\xcc\x9b\xeadP&\x817e\xf5(\xf3\xa9cJf" +
	"\xc5pV\xfb\x7f\xa8\x9a:\x91y\xb3\x82\xfa$);" +
	"\xa8\xa8Z\xc5\xf6&\x83\xde}\xce8CD\x18\x9b\xd4" +
	"\x8b\xc2\xa4\xbc\xc0t}\xa3\xef\xd5&\xdf\xab\xe1&\xf6" +
	"\xe0\xee^w\xb7\xe9\x98\xff\xaf\xefQ6\xden\xeb\xd7" +
	"l\xa7\xc9\xb5\x15\xe1\xbbPgq\xa5\xee\"oD\xeb" +
	"5\x9c\xd9R\xeb\xb5&\x96\xa7\xc4\xc5\x91\x0a\x99Yn" +
	"\xa4\x12j\xbd\x97UJ\xbeR\xd5\x8d]\xa1\xb7i\xba" +
	"\x1e^J\xb4\xbb\xc1\x9a\xdd4\xeatH\x7f\x11\xeeP" +
	"[\xff\xa9\xce1C\xed\xea\x82O\xdd\xe8M\x186\xc5" +
	"\xae\xf3\x19\xac\xb9\x13\x86\x07\xd0(l3\xf0Qj\xe0" +
	"\xc6\xd0\xc0M\x05^\xa6\x06n%4\x10\x13Fj\xee" +
	"\xaav%\xd6\xed3RsW\xb5'\xf1\xfc\xc20\xcd" +
	"]\xd5~\x08\x1d\xc7\x84a\x9a\xbb\xaa\x1d4LsW" +
	"\xb5\x1f\x8dm\xf5\x19\xa3\xb9\xab\xda\xfbc\x10i\xee\x03" +
	"~\x98\x1a\xb8=\x1e\xc3\x04\x1f\xe0\xc7\xa8\x81\xdbQ\xfc" +
	"\\a\x8c\xe6\xaej?\x85\xd7\x7f\x04\xf8\x09j\xe0\xf6" +
	"4^\xbf\xe7\x8c\xe6\xadj?\x8b\xd7\xf3\x0c\xf0\x93\xd4" +
	"\xc0\xedE<\xcfs\xc0_\xa6\x06n/\xe1};\x09" +
	"\xfcUj\xe0v\x1a\x8d\xef^\x06~\x86\x1a\xb8\xbd\x86" +
	"\xfc\x14\xf0s\xd4\xc0\xed,\x1a\xc7\xbd\x0a\xfc\x0d\xe0\xe9" +
	"\xaa\x83\xdb\xeb\xc8\xcf\x00\xbf\x10\x8b\xc9r+\x9f0\x9c" +
	"\xc7\xcb\x7f\x03\xf0\x871\x7f\x82\xc3\xa8\xe9lc\x939" +
	"\x0dF\x92\x1a\x16'\x82`\x1c\xaer\xbe\xad\xeei\x95" +
	"\xd9\x85\x1c\xdd\x85\xd2\x15\xdb\x0e\xac P\xeb\x97\xa4\xcd" +
	"\xb6\x07\xcb!\xf7K)\xff\x00n1\x8bm\xcfm\xe3" +
	"\xd5\x9f\xfdt\x9d&\x1be\x7f\x19\xeaY\xab\xffq\x09" +
	"\x99\xff\x828\x1bdE)e1{\xb4\x9e\x9e}\xa6" +
	"\xa4L\xf4\x07\xf4\xabY\x18\x8aE\x8b\xcc\x1al\x82\xbc" +
	"\xcc\xc07m\x0f/\x805\xc3\xab:j\xb4\xa8\xfd\xfc" +
	"\x99\xdb\xee\xb8\xf0\xd1\xbf^<t0\xb2\x82\xaaZ\xd0" +
	"\x15\xffq\xcc\x91\x918\xaf\xe7J7Z\xbb}\xfe\xd0" +
	"\xde>k\xb7o\xd1\xc9\xf5[[\x80\x8bQd\x9f5" +
	"\xe6\xee\xb3v\xfb\xf7Y\xe3\xee>k\xb7\xcf7\xda]" +
	"\x10\xb8\x11\xf9\xf5\xc0\x97\xd2\xc5\xae\xa0\xbb\xb2\xbb p" +
	"\x0bn\x9c\x8a\x0dXwA \xb8\x01{\x85\xcc\x9bw" +
	"\xa0\\K\xc3\xb2\xb2E\xcb,\xf5\x07\xe4t\x8e\xd9O" +
	"\x9f\xb3\xe0\xef=\xad(\xbe*\x7f\x97Q\x9a\xb6I\x17" +
	"\x98\x9c\xa3\x944C\x91\x9a\xdd\xcb)\x9a\xa6x\xe6\xc6" +
	"\x15\xa7\x99\x9a\xcd=\x9a]\xd0\xca\xba\x964\x98=\x8b" +
	"\xd4\x0f\x87\x9a\xbae]\x1b\x19\xf4l\xe3\x157\xacH" +
	"\xdf\xac\xb3\xce.U`\x9b(\x82\x82\xb1\\\xd6'\x07" +
	"L-i\x9bF\x94\xda0\xddB\xfc *\x9dg&" +
	"s\xd4~\xa6\xe9uv\x0cI\x06\xd9\xf6\x94\xbb\x1d\xd1" +
	"h\xc0'\x15\x9f\xa7\x1ds\x9d\x99'\xf11<\xc5@" +
	"h\xd7\x1c\xc9\x08\xadKU\xd7eP\xf6W_'\xe4" +
	"In\x06\xc3$\x96\xeda\x12KKH,\xb1\x8c\xd8" +
	"\xdd\xcc\xa8uMk\\\x0dhF\xb3Q1\xd9/e" +
	"\x98\xd2T\xc5q\xd7f*\xab;\x7f\x91m\xbe9\xb3" +
	"Ww\x19d\xc9j5cb\x056L\\\xbf\xdc\xab" +
	":\xdaI\x0a\x9e\xb81\xe8SS\xc4\xf5\xcb]\xe1\xa6" +
	"\xc5+\xbd\x15\xee\xe7\xe1g|&.\xaf?)\xac\xc0" +
	"^\x1c\x163\x93H\x05`\x0af\xa9l\x1a\xcc\x90\xb2" +
	"\x8e\xbf\xdf\x0b\xa9\x0c3\xedX\xda\x18\x15P\xf3c\xea" +
	"\xd4\xc0\xa9{\x97\xd6x\xea\xa6Yl\x05/\xabL\xf3" +
	"\x80\xaeL\xae\x1bX1\xdby\x8b\x9a\xce\x9a.8\xd6" +
	"\xc3t\xe6\xb0^'^\xf3\xb0\x85V\xdf\xe8\x0c\xf3\xe9" +
	"\xb2Hy\x11h\xd1\xb9\x1a\xb3f\xda\xe5\xccp\xa3\xfc" +
	"^C\xca\xe4|I\x9d\x8d\x0d\xbe\x99\xa2\xae\x99(o" +
	"\xc8\xe0\\(\xd0\xf0\x7f\x11V\x01\xe6\x9f#W\x80\xf9" +
	"'\xb1\xef73\x82m\x97)r\xb5\xe0\xe4\x9a\xf8\x84" +
	"X\x84\x0a\xfeq \x83\xd1\x9a\xaf\xda\x1e\\\xa8\\}" +
	"\xef\x84\xc8\xb0\x0a\xfem\xc0L\xf9\xde\x1av\x03\xc6M" +
	"KW\xc5\xd3\xc5\xac\xfbMK\x97\xd5\x08j\xda\xbe0" +
	"\x03\xdda\xf1S\xf9;\x80\x10\x83\xdf\x19\x0b\xab3\xaf" +
	"5\xb1\x0dD\x9e\xb3\xf26\xd0U]l3fq\xab" +
	"\x0c\x1d\"\x82K(t\xd5.\xba\xa0\xc32+\x86\x9a" +
	"+\xa7\x94q\xc3\x9e\xd5\x0a^\x197D\xb4\xfa\xd2\x0d" +
	"k\xdf\xff/\xdf\x7fvOd\x99.\xf6\xd1\x96Y\xce" +
	"2\xcb\xd1j\xe2\x0dj\xc0\xd6\xb4CyUV\xda\xb4" +
	"\xd9gU\xea)&\x0fZ35\xc5\x88\x01\xe1 +" +
	"\x99crpN?\x18RO\xac\x93\xc4\x19\xb8\x04\xc8" +
	"\xb6\xd3\xc9\x96k\xc3\x1c=l,\xb3\x82\xa6\xe8\xeb\x92" +
	"\xcc\x1e\x89\x90l\xd0M\xd5y\xd5\x07}\xb7E6\xf7" +
	"\xdd%\xab\xc7\xda\x1b\x14\xb6\xcd\x8e\xf2\xe1\xda\xf3\x13\xb4" +
	"G\x86|U\xc61`\xcb\x95\xa5\x8c_\xc1e+\x93" +
	"\xf4]u\xbc\xf6\xa2\xbaL\x07\x7f\xf2\xa9YJ\xb8\xf5" +
	"\xc7\x88\x1bb\xd6\xf2\x8fs\xde\x1f\xe2\x16\x99\x92m\xfc" +
	"\xdd\x9d\xff\xab\xef\xba_\xfd.\xf2C\xce\x87~;\x97" +
	"A\xe3\xd7\xc0\x0f2\x1c\xa6\xac\xe8\x0c\x13\xa3\x0f\x87)" +
	"+\x86\x85\x88B\x0e\xd1\xa2G\x1a\xe7K\x9a\x81\xa3\xb7" +
	"\x14'\xe3wI\x99\xa8\x81\x99\xed\x15fMF+\x7f" +
	"\xa8\x95\xcaf\xdcr\"\xd7c\x1eb\x13N\xc5b\x03" +
	"Y\xcb\x84q8\xa0\xc8h\x0bSd\xb4\x87\x15J\xf2" +
	"I2\xaaw\xe9\xd3v*\xc9\xa8\xde\xa6?\x02\xfc$" +
	".\xe7\xe6Pm\xa5\x0c\xd3H\xa1\xd4p\x17\xa1\xe6\x02" +
	"\x16J\x0dw\x0d*0\x97\xf6\xd6\xa0\xae\xc6I\xb3\xa7" +
	"\xd4HA\xb3\x10\xb3\xfeQ&\x96;R\x8aU\x12A" +
	"\xf0\xb8\xa5\x89?eF\x15C\x153G\x9d\x8d\x88\x17" +
	"EF\x122\xab\xf6\xd95\xb6\xd9\x12\xd9\xbbi\xdcg" +
	"\x8c+\xe5\\\x99\xe9\xb2\x1e\xc5U\x9a\xf6X\x11\"\x96" +
	"\xc633^\x9a\xb27Y[\xb4&tf\x96\xa7\x15" +
	"\x18M\xc3Q4\x83I\x19+\xe7/\x17\x83\xe7\xccI" +
	"\xc9\xa6.\xc5\xad\x93\x9d\xd2\xca|i4<\x8b%t" +
	"\xf0\xc8`pS\x9b\x07\x95\x82\xc0E\x9e?\xb3~E" +
	"q\xef+\xcb\x86\xffCP\x16S_\xd1\x01][)" +
	"J\xbd\x98\xf6\xb05kR\xeb\xcd\x93\xf2x\xeaSF" +
	"\x16\xa6\x82\xcb%Q+\x0a\x0e\x9b\x06\xc3T\x82zY" +
	"\x81\xe9\x98\x9c\xe5}\xb5<\x7f\xe6?\xdeu\xf0_\xbf" +
	"\xf3\x9f\xfe\xe7\x85\xc8\xaa\xa0\xfbX\xc11\xad\x15\x7f\x1e" +
	"'\xe7\xd9\xd5\x85\x11\x9e\x8b1F\xd7\xe9\x1b\xb9\xc3\xf7" +
	"\x85E\xfa\x8b\xeb\xba\xc3\xe3\xab{u:\xa9I\xb2\x89" +
	"\xd9K<\xd2\xd8\xf6~\x96\xef54GS\x1c\xb6\xda" +
	"4\x0cV\xc0\xc4\xd9Y|\xd4usD3dY\x8a" +
	"\xc9r\x93)$\xbdF\xd1\x94.[ 8,\xc2\x05" +
	"\xd7W\x99J\x01=\xdfr:-\x0e\xad\xb2\xaa\xd8\xb6" +
	"6b0\x1f+)\x13\xbcRo\\T\x88\xcc\xaaS" +
	"\xf7\xd4\x0a\x88\x9b\xad\xce**\x0c\xf7\x1ac\x9aS+" +
	"\xcf\x85/{..\xaf\xbf(\xa2\x8c7\xf3DR\xe6" +
	"FV\xefL\x11%\xae\x1bY\xbd\xdfG\x0687\xb2" +
	"\xfa\xa8\x8f\x8ce\xeef\xa0+/\xe4\x03N\"\xc6\xc7" +
	"\xa7\xabq\x15UH\x03\x93q>@\xb5b\xad8o" +
	"\x956\xf4>j\xf8}\xac{\xfcy\x9d\xac\xfa}\xa5" +
	"\xaci\xf8n\x9f=\xae\x94\xcb\x9a\xe1K\xb9\x06\x16\xd8" +
	"\x7f\x9e.+*\xee\xf8\x07V\x08\xd5)|\x84|W" +
	"\xa0Nq%\xa6\x94*\xf8\x93c\x1aJV\xc7\xd8j" +
	"S3\xa4HOchP5\x18\x16T\x0d\x86e\xf8" +
	"u\x92\xa8*\xc2\x90W\x80Y\xedd\x99QE\x83`" +
	"\xed\x8d\xb6\x0b\xe3\xf5b\xdd\xd4\x90f\x04k.\xb7\x85" +
	"\xe5\xf6\xb5\x87\xe5\xf6-\x0e\xcb\xed\xeb\x16+y\xa9<" +
	"\xf5\xc9\x18\xb1\x98\xb0%IZ\xa2\xc0\xc6t\xc5ft" +
	"\xdb\xbd\x19o\xfeAfW\xf4Y\xb3\xe0jF\xd6\x9e" +
	"\x98\x9cRi\xd0TV\x9c\xd1zK\xcfQ\xca\xa6\xae" +
	"\x1e5M\x9bU\x07\xaf8O\x84k\xf4\xf8l\x0d\xeb" +
	"\xcc:\xc5\xe3\xe3vf\xfb\xf3\x8d:\xb3\xe8M \xab" +
	"N\xf9\xe6O*\xe3\xbe\x04RR3\x8dh\x1dZ\xfd" +
	"\x80\x8f9=\x8a\xa3\x0c\xba\xe3\x19\x19&\xf2dQ\xcc" +
	"`\xe3\xaa\xe2(\x16\x17\xcbD\x1e-\xefg\x8a3Z" +
	"]\xdf'#\xe5\xe2\xcb\xd1\x02$\xc7\x94:e\x99\xa9" +
	"\x10%\xc2bCu\x09\x9f\xaf\xe0Gq\xd5\x0f\xbd\xb2" +
	"\xbe\xa0\xab~\x98Na\xc6\xae\xe4{\x0d\x95M4\xb5" +
	"H\x99s\x14\xcb\x19\xb2\xb4T\xbe\xe2D*\xe6\xfb\xb0" +
	"\xb8\x16\xef\x027\xc0\x91C<\x0d<\xb4\xc3\xaf\x9f\xcc" +
	"\x1a&\xc3\x8f\x90`\xd1\xc3\xf4\xd5\xa6\x95\xac\xa6\x0d\x90" +
	"F=\xdch\xee\xc0s\x12\x0d\x7fN\xa2_\xb9\x12A" +
	"\xc6\xd0\xd5\xe5\xcaN\x1ad\x9c_W/\xe3<\xae(" +
	"b\x82\xff/??\xa5]\xfdOg\xffk\xe4\x09\xfe" +
	"\x1ac\xacG))#q\xee\xed@z\xe6\xeb\xc2z" +
	"\xe6\xce\xc8%\x10H\xfdB\xaa\xea\xf7[\x9bM\xab%" +
	"\xbf!]\xc1\xc4\xae\xc4i\xbal\xa7\xa62+\x9a\x11" +
	"C_\x98\xfe\xbe\x9b\x08\x9a\xdc\xaf\xf0Z;\x114\xb9" +
	"c\xe9\xd9v\"hr\xf5\xf7\xaf\xb7\x13\xa5\xbe\xab\xbf" +
	"?\xdf)\xa2\xaa\xd0Lz\xbe\xa2\xe4\x97\x1c\x14\xfdI" +
	"\xad\xfe@{6\x81d\xb6<V.\x98F\x93{y" +
	"\xab\xdd\xea.\x7fnY\x11\xedO\xea\xc5\x09s\x1b\xa5" +
	"\xbba\x95F\x87E\xd2=u\xce\xbe\x13\x16H\x16\x0e" +
	"\x14\xecm\xb2(\xb8\x97\xf6V-\xf3)\xb3(E1" +
	"\xdb\xc3\xaa|\xfa\xcc^\xe2!f/\xb6Ybw\xe9" +
	"\x0a\x0dY\xfdy\xc4\xae\x17\x86{w\xc7\x14K\x0b\x0a" +
	"e\x1b\xf7\x83\xda\x18\xebES\x9d(\xdf$\x1fV\xde" +
	"s\x98l\xb7\xb8\xdfd\xd2\x12K\xb63\x8e\xb9\xa6\xa6" +
	"\"\xafc\xae\xd9^\xd1\xca\x81u\x0e\x08Q\xe1X)" +
	"Nl\x88\x10n\xafhR\xa6\xdc\xdc\xfa\x8c[\xcb<" +
	"3\xc8j\xf7/\x17\x8b\xc8\xd8\xabd4L\xb7/\xe5" +
	"\xb0\xed\xcb\xea\x96\xf1o\xdb\x84W\x8d\x17.=\xdbM" +
	"\xf64\xe7\xc6x\x07\xf1\xfc\xc3\xa2'Jncb\x1d" +
	"\x92Y\x96i\xe5\x1c\xbf8\xb7\xa8h:S\xbb\x1c)" +
	"\xeb\xb0R\xd9!\xebh6)\xda\xe3\xee\xde\xd7\x96\x13" +
	"\xb3G\xcdq\x98J\xca\x8c/\x0aK\xb3\x94\x1ckX" +
	"\x02\x9e/\x96\x0c\xb2,\x1f^\x03#U>d}\xda" +
	"\x95\x1e\xac\x8d\xb9%\xcfW\x9bR\x92z\xa4p*\xd6" +
	"\xa5\xff\xed\xeb\xc9gf\xf2\xff\xfdt\xd4A\x0b\xfb\xae" +
	"\xee\x8a-O\xfeED\x08\xa2rPo\xd5\xf7\x83\x96" +
	"\x84\xec\xa6%!\x17\x88\x9a\x90\xed\x92\x94;\x00\xfc\x88" +
	",\x0a\xe5<\x81X\x94\x8at%JGQB$J" +
	"EV\x9f\xae\x85O\xc9y\x7fI\xc8x\x9d\x92\x90s" +
	"\xdc\x92\x90\x96/o\xdf-\x91\xff\x12J\x8eD\xde\xfe" +
	"\xbc\xb9|\xf5\xf7\x15\xe4\"o\xdf\xf5\x82\x08\xe6\xed\x7f" +
	".\xc9\x15\x88\xaf\xe1u\x8a\xbc\xfd+\xe7q\x05\xe2Y" +
	"\xb4\xac\x10y\xfbW]\xc1\x15\x88\xaf#\x17y\xfbW" +
	"\x7f\x8e+\x10\xcf\xe3yD\xde\xfe_]\xc9\x15\x88o" +
	"\xe2\xf5{\xf9\xf9\xd3\x98\x08KV\x02\x8dr\x81\xbc\xd2" +
	"\x8c\x0dvH}\xbd`\x91}h\x1f\xab\xbdl\xdc\xda" +
	"\xb6a\xe6\xb72G\x1b\xf3u\xa1\x1e\xcb\xdcG\x85\xaa" +
	"\xbe\xdca\xbfX\xaf\xa4\x19\x15G\xec\xfae\xcb\xbe\xbd" +
	"\xe2\xb0%\xbd@\x952\xacA\xa8V\x8c\x11)\xc3L" +
	"CS\x9b\x92|\x7f[\xd3\xf5?I\xa0T'\x92\x9d" +
	"\xa5\x02\xb7\xe9h\xc6\x88\xb7\x0c\x1en\x85\xd3 \x92\xec" +
	"l\x10Ifu\xd3t\x98\xd8\x0d\xc2\x97\"\x8d\x16\xa2" +
	"\x0e\xba}\\qL\xb8\xac\xa6|3\x82\xfd\x9e\xc8\xbd" +
	"\xae#\xbd\xb0\xd9\xf6\x0a\xf3\x17\x17mfIn5\xae" +
	"^\xf3]}\xf2\x09mb\xb9\xb3I\xb5\x8e\xabg\xcf" +
	"\xac\xd6\xabu6/\xab\xfexwXd\xd2V\xaf\xae" +
	"YX\x80\x1b\\\x98OYMM\xc3{\x8d\x82\xc5\x14" +
	"\x9b\xa5r\x8e\x82\xf7\x7f\x8b\xd7\xc9\xeeG\xfd\xb4(\x14" +
	"\xedv\xb2\x07\x91\x0b\x9d\xb4\xab\xf3~\x1c\xb9( \xed" +
	"\xea\xbc\x9f@.\xf4\xd3\xae\xce\xfb(r\xa1\x9fvw" +
	"\xd8\x9eB.\xf4\xd3\xee\x16\xdb\xd3\xc8\xbd\x82\xd3\xde\x1e" +
	"[\xa0\xe2\xb4\xb7\xc7\xf6,\xf2\x13\xc0_\xa0:\xef\xe7" +
	"Q\xdf,\xf4\xd6\xae\xce\xfbE\xd4I\x0b\xbd\xb5\xab\xf3" +
	"~\x09u\xd8/\x00?Eu\xde\xaf\xe0\xf9\x85\x0e\xdb" +
	"\xd5y\x9fF.t\xd8\xae\xce\xfb5\xe4B\x87\xed\xea" +
	"\xbc\xcf\"\x17:lW\xe7\xfd:rO\x87\xed\xe9\xbc" +
	"\xcf#?\x07\xfc\"\xd5y\xbf\x89\x1c\x05\xdaoS\x9d" +
	"\xf7[\xf8}/\x00\x7f\x97\xea\xbc\xdfA~\x11\xf8%" +
	"\xe0\xadU\xa1\xf7{x\x1f\xde\x06\xfe\x01\xf0E\x8bx" +
	"f\xe8\xfbx\x1f\xdeu\x05\xe0\x0b>\xffy\x9e\x19\xfa" +
	"{\xd4\xa3\x7f\x00\xfc\x93X\xac\xf9\xa2\xda4;\x87\xb8" +
	"\xa2\xfbKjk\x16U\x83\x13\x7fn\x9f\xa72t\xff" +
	"6q\x03U5\x1b\x1en1ar\xacv\xf2B\x11" +
	"/\x94\x11M\xbcP\xd9\x84x\xa1\x19B\x90\x9d\x1a\xd7" +
	"l\xf1\xa20*N\x90\x81+\xa4\xc2m]\xc8\xde\xb3" +
	"x\x8d\"A\x8a_\xa4P\xc5W\xaf\xb2=\xaco\x9b" +
	"\xa5\x0a\xaef\xa8\xf5\xb5\x1b\xc2Z\xa9%\xccZ\xa9%" +
	"\xccZ\xa9%\xccZ\xa9[,`\xfeI~\x13\x91\xf5" +
	"8\x03)\xb3\xba\x80\xddh\x8f\xf7IIZ\xdf\x11\x97" +
	"\xd7\xaf\x8ayKV\x03R@,VP,\xc6\xac!" +
	"K\xe6\x7f6\xb5d\x98\x1el\x96\x04\x18\xc7\xd2\x8c\x91" +
	"\x86\xd5\x86\xa3\xab\x01M\xd3\xca\x95\x95\xf18WM5" +
	"X\x8ej\xaf\xb7\x1c\x95QM\x93JN\xb4+\x9fm" +
	"y\xe4\x9e5\x9fF\x97\x9c(\x9a\xba\x8e\x95\xf2Yf" +
	"\xb9\xe15Y\xd2\xc9\x87\xb8\x9e\x0c\x87\x15\x19\x1e\x0c+" +
	"2L\x17o\\\x7f\x8b\xd7\xb7\x8au\x1a\xcf\xf5\xe4M" +
	"\x8b:*\xcc\x0d)2\x8c\xdb\xe5\xf7TJR\x92V" +
	"\x07\xe6r\xa7\xc0zv\x14\xcd\xf0 \xca\x03\xa5\x94_" +
	"2\\GJ\\R4cH1\xb65\x15r\xdc]" +
	"\x15/V\xb5\x8b]rW\xd0\x12l\xcag\xfd\xe5\x0e" +
	"\xaa/\xca?\xf0M\x09\xdcA\xf5\xb4\xfc\x9f}\xa1\xbc" +
	";\xa8\x9e\x97\xff\xc5g\xa9\xe5\x0e\xaa\xef\xe0\x14EX" +
	"g\xb9\x83\xea\xfb\xc8=\x8b,oP\xfdH~R\x92" +
	"r\x1f\xcbqy\x90\x8e\xa9\x7f\xc4\xc3?\x83\xc3\xe7\xd1" +
	"1un\xec\x9f%)7\x0f\xfa\xfa4\x1dS\x17\xc4" +
	"\xe02\xaf\x01\xbe\x84\x8e\xa97\xc6\xe02\x97\x00\xbf\x95" +
	"\x8e\xa9\xb7\xc4~'I\xb9\x0e\xe0\xab\xe8\x98z'\x9e" +
	"\xa7\x07\xf8\x00\x1dS\xd7\xc5\xe02\x07\x80o\xa6c\xea" +
	"\xa6\xd8\x7f\x93\xa4\xdc\x16\xe0:\x1dS5LV\x1a\x05" +
	"\xee\xc4\xdc\xe7\xa8KY'e\x15k\x1b\xcd\x10\xae\xfe" +
	"\xc1\x90\xcb\x85\xb5L\xd1\x9dQ\xf2cW\xff\xd6\x13c" +
	":\x1bQ\x1c\xb6N\xd1\x8c.\xdb\xd6l\xd9\xa99F" +
	"v\x8f\xa9\xf3\x01\x1dR\xed\x89W\x86\xb0^\xd9\xb0\xcb" +
	"\xac\xe0tW\x92\xc5\xa2\x1d\xfc\xeb7C\xde\x91\x93\xcb" +
	"L\xd7\xbb\xc6\x15+\xc3\x0c\x9ahP\xfd\xfb\xbd\xb1b" +
	"\x91\x196[c\x8c*F\x81\x95\x98Q{\xf9\xebd" +
	"\xc5P\xf0\x80,\x1eQs\xc0\xda\x18\xde\x1cq\x0e\xa7" +
	"\xf6B\xaa\xc7\x0c2^\x0d\xdd\xd1LR\xcb\xa0z\xcc" +
	"]2\x8cZ\x8a3:\x944\x07\x0au\xcepoq" +
	"\x08\x17m\xed!%\x85\xf9\x1b\x81\xc3\x96K\xf2\xca&" +
	"3<1\x0f\xf2.e\xcc\xb4\xb4\xa4\xc3e\xa4d\xad" +
	"s\xb8\x81\x10\xdb]\xeb\\\xffpU\xdc\xabG\x14\xce" +
	"\xa1g\xbf\xe60\xb9\xaa\xf0k\xde1\xb7\xd7\xb0\x1dM" +
	"\xd7{Rf%\xef\\\xf6^Y;\xd9+\xd3\x88\xdd" +
	"\x8f\xd6\xe5l\x13\xf3z\xdfNb$e\xee=J\x89" +
	"e\xb9\x13\xf7\x9fc\xf9\xd8oF\x94\xad\x18\xdb\xcc\xf1" +
	"\xcbM\xa7Xm\xea\xa6\xc5\xd4\xa1$\x9b\x88\xb2\xf1\xb3" +
	"\x98h\xb4x\x15\x1a7\x0c-\xd9#\xd1?\x15\xf7\xde" +
	"-\xb3\x98\xfc\xff\x0a\xc5\xff\xfb\x0a\xc5\xfbY>\xc7l" +
	"[\x8b\x9bF\xfd\x06\xee\xb5\xef>\xba3Z\x8dg6" +
	"\x0c\x93\x9dQ\x8b\x95L\x87u\xa9R\\\xb5\x88\x91*" +
	"\xc0\xde\xb2_\xc5\x8f\xb5\xc1M)n5\xb1b\x8e\x0b" +
	"\x07C\x96\x92\xacZw7\x90:\xf4\x89\xf5^\x9fK" +
	"w\x14?\xee\xd9\xc5\xe8\xd5\xb8\xbb+\xaf\xe9I\xcd\x99" +
	"\x8c\x90M\xd0M\xd4\xf0\x01G\x8ai\x9e\xa4:)\xcf" +
	"\x9f\xf9\xf5\xbd'\xfe\xc7\xd6\x157\xff:\xf2b8^" +
	"\x0d\x17Ou\x15\x0a\xac,;Q,\xaaI\xee\x99\xdb" +
	"\xa9\xd0\xc5,OAU\x81\x03\x1d\xee\x0b=]\x954" +
	"y?\xab\xc1\xc61\xa8\x94d\xfaS\xd7\xeeu\x87\x88" +
	"\xef#\xfe\xd2\xf7\xe6\xb7&Y!\xd8\x15u6\xb0v" +
	"\xce\xaa\x96Y\xee\x0d.\x005i\xee\xec\xba\xae\x9b\xd6" +
	"$\x97b\xce\xb2\xd7\x17>\x8eT\x9b\xc7:\xcbg\xc1" +
	"io#C\x89\xafw.\x98\xa5\xb2\xce\x1c&e\xd4" +
	"!-$\xb5%\x11UD\xe7\xf7\xba\xbc,\x05\x0e\xf1" +
	"\x06\xf6z\xd3\x83}dG\xaa\xda\x99>\xd1'v\xa4" +
	"\x9a\x11\xa1)\xf0\xa8:~\x95aD\x09\\\xb4iZ" +
	"\x0fs\x94\xa4\xa6\xdb\x11\xac\xcf\x87\xc3\xf20\x07\xc3\x1a" +
	"C\x9fh\x0cA\x8b\xe7P\xb5\x10\xcd=\x9f?\xf3q" +
	"\xec\xe5M\xcf\x9e\xba\xf8\x9e\xdb\xb4\xf9[\x9a|,\xbd" +
	"\x0d\xde\xeaZ\xaa\xec\xfc\xb9S\xfa\xeea\xe3\xab\xcdR" +
	"^\x8b\x1b,\xcaz\xc2\x0f\xc8zB=\xcd8v\x00" +
	"\x8e\xa5\xc9\xd0er\x85_\xf4\xeb\xd9`\xa8\xcc\x1a7" +
	"\xad\xb8\xaeFY1\xbe,\xf3\xfd\x0c\xfa\x07\x85\xac\xcc" +
	"\xccf\xbd_\x7f\x95\xa9\xc74qt\xba\xd5\x9b\xc1v" +
	"\xe1\xe6\xd5\x1d\x10\x18\xac%\xf6\x00k\x10\xaf\x02\xdcO" +
	"\xed\x01z\x91\xf7\x00\x1f\xa0{o\xeb\x90\xaf\x05>D" +
	"\xed\x01\xd6c<\xd2\x0f|#\xb5\x07\xd8\x80|\x00\xf8" +
	"fj\x0f\xb0\x09\xcf3\x04|\x0b\xb5\x07x\x00\xf7\xba" +
	"6\x02W\xa9=\x80\x823\xdb-\xc0u\x99\xf8\x05j" +
	"(\x84\x1d\x05\xee\xc8\xc4/p;\xee\x05\x96\x81\xef\x90" +
	"\xa9_ \xc6G\x13\xc0w\xc9\x81\xed\x83\xd4\xe4\x80\xe9" +
	"9\x11\xa5&\xe8\x8b)\xf2\xa2\xc6\x92U3\x0a\xbaf" +
	"\xb0\xd0\x12fY\xd54\x89:\x7f\xc6,\xb3\x9ajS" +
	"\xb6\xa38\xac\xcb\xc9I)\xcc\xba#\xfa]f9\x01" +
	";\xab\x198\xdf\x80b)\x92\\\x9au=\xccK\xd8" +
	")Tl'kb\x0d\xbc`\xd2Nb\x96\x90l@" +
	"W&\xd7\x8c1+\xc4\xbb8\\\xbc\xe6Eh\xdd\x0d" +
	"\xf2+\xab\xfb\xde\xfe4\xe3\xfa\x1b\xf6\xa1*\x80\x08\xa9" +
	"r\xca\xb8\xb1v\x80\xa4\xc46\xd2\xf57J\xb4\x98M" +
	"`T\x93\x9c\x19m\x97\xbe\xabPH\xb2r\xb0\xff\x1c" +
	"\xa4\xa9\xcb\x97\xeb\x03\xb0\xdabJ\xdca\x11\"\x86\xe1" +
	"\xb0\x9f\xabO\xfc\\\x91\xc6\x99\xd9F\x92\xfa\xa9\xdb\xcc" +
	"\xc1\x98!\xbb\xc1\xfb\x91\x88\xee~\x90\xac<z\xc2\xfb" +
	"v\xea\x8b]\xfd\x91\xde\xea$\xcb\x91n\xdfJ\x97#" +
	"\xddP\xe1\xfdA2\x97\x9b+\xf3\xc5\xcc\x8f\x06\xc9\xb4" +
	"\xcd5\xe1\xfa\xb4\x8f\xce\xd0\\]\x80\x0c}\x907\x15" +
	"\x9b)3\x07\x95R>\x97>:\x07\xad\xd9ZgF" +
	"MyU\xa5\x80\x0b\xc4\x18\x99\xba7s\xa4\x84G\x9a" +
	"\x92lzl{\x859\xa6\xe3OC\x0eq\x07k<" +
	"|\xbbn\xf2\xdcL\xbe]\xfa\xb3m\xadvW\xf4m" +
	"\xbd\x0e+\x91\x85\x05r\xde)\xdf\xa6\xb0\xa5)\xba6" +
	"%e\x99\x0a\xef\x88~\xf1w\x99VIq\x1c\xa6\xae" +
	"\xe3\xa9\xa4\xb3\xf5GbI\xa8-dI\xa8[\x84\xc4" +
	"X\xfc\xd1\x18\xf1=\xbc\x01\xb5B\x9d\xc4\xd5YZ\xa0" +
	"\xa1\x9a%a\x0aAB\x86\xc5a!C[\x83\xfd~" +
	"W\x83^j\x13\x11CR7\xc7\xbd\xcb\x1d\xd5D\xd1" +
	"\xca\xac\x85J\xfc\xcb\xb6\xa6\x81\x9b\xd1\xaf\xc5k\xf6\xf5" +
	"\x17\x8bG\x037\x0b\xa3\xaf\xe9\xe8\xa6\xcdV\x9bF\x16" +
	"C3\xeb\xb2\xed\x14\xda\xc8o\x162\xa3\x0aL\xbaR" +
	"0\xd4F\xb6\x10\x80\xc6\xd0U.[frL\xd1\xeb" +
	"\xa7a\x84\xffb\xd5^S\x1b\x0c\xb3Ni\x17q\xbc" +
	"?\xda\xf09=\x86m\x83\xf8\xbcC#(\xaf\xaa\x86" +
	"\x005\xa2\xd5\xe8y\x85\xe4\xb6\xf3!M#\xb9\xdc\x18" +
	"\xa0z\xb2\xd5\xf0\xfa2\xf5\x97\x1du\xbdbkn=" +
	"8\x1a\x96v\x87\x87\xa5}\xbe\xf0\xd3\x0dK\x83\xe1\xa7" +
	"\x1b\x96\xae\xc7\xb0Q\x84\x9fnX\x1a\x0c?\xdd\xb0t" +
	"\x13\x86\x87\"\xcc\xf4l\xac\xf1\xfc\x9b\x81\x8f\xd2\xb0\x94" +
	"a\xd8\xa8\x02/\xd3\xb0\xb4\x84\\\x07>A\xc3\xd2\x0a" +
	"J\xd7D\xf8\xe9\x86\xa5\x93XN\xc8\x0b?\xbd\xb0\xf4" +
	"!\xfc\xdc\x1d\xc0\xf7\xc8\xb57?\xac\xab\xf7=?\x01" +
	"\xb7\xcei\x87g]\x93\x02\x92z\x09\x98\x94$\xd4\xef" +
	"B\x1ef\xba\x1afD\xeb\xf3S\x0d\xb5e\xf5\xd9\xdc" +
	"\xfe\xef\x00\x00\x00\xff\xffce\x0c\xa0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_cdefabcdefabcdef,
		Nodes: []uint64{
			0x80545037b7a4173b,
			0x806a62bc2851fc01,
			0x80b7b9a2597c4eed,
			0x815ffda3d9dd039d,
			0x8163a7ff6f92e3eb,
			0x8169b9320fb13d79,
			0x81fa11546e952c02,
			0x820db271715b4199,
			0x82a7789fb5b3a028,
			0x82bbe68570bc51c9,
			0x82c483a4cf75cbe3,
			0x82e8c67d0acc92ee,
			0x837843dd5048c6d0,
			0x838b6e674280f93f,
			0x844fdb5787f2eb73,
			0x84ae33ececbdf2f2,
			0x84ff32fdda835dfe,
			0x852c02610e8a2a24,
			0x8534668f6850d8ba,
			0x853ff72f8a1e3384,
			0x8552adf123d9b564,
			0x86020f1b6279dc1e,
			0x86b68baf94f42b99,
			0x86f0f1c44a113f21,
			0x873927d4562f9ba5,
			0x87681fa437f7497d,
			0x87d72af46493bddd,
			0x88007635e342bb94,
			0x880f6cbde51358e0,
			0x881a3fa8b6a21e65,
			0x888a7e1d97fd6855,
			0x88b187d6e94820bd,
			0x88c6bb9459dd440d,
			0x8929937be8c9e001,
			0x899e3334be65d957,
			0x89f1549a7f447f06,
			0x8a1df08ac17221fd,
			0x8a3669cb193af4dc,
			0x8a5026d84a4c9312,
			0x8acccc8118bd1f80,
			0x8b2666611a37b434,
			0x8cf4d94985ccea99,
			0x8f371262d861f7d1,
			0x8f80c9fc8ead22c9,
			0x8f9b301fdfe3c51c,
			0x9078ec69fd7d9560,
			0x917f02f6029babd0,
			0x919eb8a95b9f8a07,
			0x91ab76ec9c2c1b6f,
			0x91cbe70d9e0d9cee,
			0x9217151fa71ac827,
			0x9292e90285848d8e,
			0x93bff6bb5eecbc2a,
			0x93de0fbdc8643390,
			0x9400994ae28f2ed6,
			0x940ac0b117677519,
			0x944a2443abee2e54,
			0x94d039e60a812076,
			0x9598dccef1d83c38,
			0x95ca47192b7d5b43,
			0x971031099b134c74,
			0x9726e35ff31ca532,
			0x9910215bbf6992b3,
			0x998ca559e52e226b,
			0x9b02ee5625ec21fb,
			0x9b4767b704c3f415,
			0x9b932a4905396044,
			0x9c02cc7a71f37f31,
			0x9c833cee78c1a396,
			0x9c85c1e6d68aa499,
			0x9c9f074ebb94ca3b,
			0x9ca1849ea58c8bdb,
			0x9ce5c88efd68b310,
			0x9d8709f225285c2e,
			0x9e2a00f7ceea75bb,
			0x9e2bb9505c9a267d,
			0x9e7c63f7db1235ba,
			0x9ed2b947650ba549,
			0x9f29336af3ac4f9f,
			0x9f325734076f5253,
			0x9f58a78be70b999b,
			0x9f9c5384091d79ce,
			0x9fd8d08daae7794b,
			0xa012f4912c4151f9,
			0xa0a594ed993e78ca,
			0xa0ec151dfc4791ad,
			0xa1914008041e7c44,
			0xa23c8c68e3798bb0,
			0xa2fef4c64b89cc83,
			0xa304ad602f730110,
			0xa377d9a07bd4d6d6,
			0xa3f9826addd42d0d,
			0xa41074130e196783,
			0xa4fef5cca0eb8eaa,
			0xa51c9c2dfa1a6cca,
			0xa574b41924caefc7,
			0xa58428b610ebb10c,
			0xa5a8b25550e0240d,
			0xa66384177fb99486,
			0xa77cd936c64d6ed7,
			0xa796a4d827fc48b4,
			0xa7ab2bbcc8342323,
			0xa7e27069226b98ad,
			0xa86e0a28ffc1ad93,
			0xa88d7dcd40961f55,
			0xa916afef9cb49a54,
			0xa984e49365524f14,
			0xa987ac170b5f48c3,
			0xab1ebc3e87d43ca9,
			0xaba4e5389c6116b1,
			0xadd206cd099784fe,
			0xae87b106322248a8,
			0xae8dab9506472d1d,
			0xaeb6652f725f241b,
			0xaf015f84859d0028,
			0xaf898798e12e23da,
			0xb0746148ee56b888,
			0xb0d71e9e634d1529,
			0xb176d4b98cf5afa6,
			0xb26bddc14e66729a,
			0xb2ea7b1704b448ca,
			0xb3a8f9a49aa3ccf8,
			0xb3f8feecbb635492,
			0xb4452aee08031161,
			0xb513764d5512a334,
			0xb52cdc5b0d00dfde,
			0xb5a6abce79a6f063,
			0xb66a9193d2300649,
			0xb6c8b8141b0acfa3,
			0xb6db3a4bd35d7d66,
			0xb72ecd96799cf7e7,
			0xb745aa7de9c39191,
			0xb74f1e7519f6fd40,
			0xb7b4735fc72e17de,
			0xb7c78f3b8eaa6d37,
			0xb7f9da429e0872e9,
			0xb80f94bef16dea20,
			0xb8375f7f6b27403c,
			0xb854b850a845d36e,
			0xb861bce5eec387bd,
			0xb8b4b6c6e1e52417,
			0xb8ef2f123b9801df,
			0xb915e75dd5f36b13,
			0xb976985727e64f4f,
			0xba7cb4dbd62489d5,
			0xba8fb8d4d5b15836,
			0xbad2f81cd78e053a,
			0xbadafe4de857fe71,
			0xbae3c3ae8a00e8a6,
			0xbb2eb4d03dfe2a7d,
			0xbcba10c194c8e450,
			0xbd94d13b8b1bcadf,
			0xbde69a9238be5e37,
			0xbdf104dd14c6c05e,
			0xbdf7ebd433f5fbda,
			0xbe54ea0b18470782,
			0xbe5555051342f44e,
			0xbe9f101bff0dabed,
			0xbea97f1023792be0,
			0xbed2ab9863c56d3b,
			0xbf5a2cc18c663351,
			0xc008c1d71bacfa15,
			0xc1409e4be6401554,
			0xc186a9c36f974c33,
			0xc20152b889987299,
			0xc2320321f84d3e6b,
			0xc2b96012172f8df1,
			0xc2c16fce3e3aa7eb,
			0xc2f958e3df4726c9,
			0xc33264acc8d4e592,
			0xc49c789ac9b97fbe,
			0xc4aef0c4dc45bc83,
			0xc512b3f8727629d7,
			0xc54135596f07c87b,
			0xc576336317865217,
			0xc58ad6bd519f935e,
			0xc5955ef3c3c9e4b0,
			0xc5c8431019d453a8,
			0xc5d32cc234a53620,
			0xc5eb62ff00b0072f,
			0xc644c15adcdd09cb,
			0xc6cfb8d85c850055,
			0xc73e9eb76d70ee0a,
			0xc7587c9f16a1fc72,
			0xc76af8996e024e54,
			0xc817bfd03978a39b,
			0xc854a2272dea6789,
			0xc8768679ec52e012,
			0xc8d069bf9cf2487f,
			0xc998874f2bcc5999,
			0xca688fde6bcd4bbd,
			0xca9a2c906b36a12e,
			0xca9e1a4afe3dca58,
			0xcab56e851899421c,
			0xcac443c397628440,
			0xcafb4dbd23ee299c,
			0xcc4575715bad9f24,
			0xcc521ab8cc5e91c0,
			0xcd102105578e2465,
			0xcddf6dbc366deb3e,
			0xce388f415f14acb0,
			0xce55ffdae06f694d,
			0xcf365ec11d0c95df,
			0xcf7084fe71119d92,
			0xcfe31aeeb9723e6b,
			0xcff0b4cd24d99860,
			0xd06564713244f529,
			0xd09020015ade2993,
			0xd0f511db04f5194f,
			0xd1052d0564f25e0d,
			0xd2768707959c3ea9,
			0xd351f43ee97d7196,
			0xd35ac5679adaf993,
			0xd3bb2f7cf3a77db4,
			0xd5ad818067cc16e7,
			0xd5db12ce6b4738ee,
			0xd61435667434c9c3,
			0xd65b5d6ec837db5d,
			0xd68209c5c40dc249,
			0xd6aded5b005488d5,
			0xd74a1be2552282a4,
			0xd75aa49a213b1c70,
			0xd769b0a839cd2c2e,
			0xd7e327183a76a4f8,
			0xd801819fddc5173b,
			0xd870df23456b7900,
			0xd89879eb841b57cc,
			0xd8a782a58f006803,
			0xd8b98b1d67fe28a2,
			0xd8facf5bce9546c7,
			0xd963a858373108fc,
			0xd9cddf13c207ce2d,
			0xda1a12e840c66e0f,
			0xdaac54598edab4df,
			0xdacdaa0d69c497ba,
			0xdb56b83f3063105d,
			0xdb651f04f1f0488d,
			0xdb811264e672b627,
			0xdb92e7fa759f1894,
			0xdbae5e634d8e9ecd,
			0xdbc10a1e045d6bed,
			0xdc9cd82121d86b8e,
			0xdcfcab864c34a056,
			0xdd1f5357c25cc3b7,
			0xdd9072d437eab9a1,
			0xde51be80c580aa82,
			0xde9db2015f39bf49,
			0xdea4ce0866a280a7,
			0xdf0c1226c90e00ad,
			0xdf6175fbc7aa8195,
			0xdf6b29c6f745a197,
			0xe00fb886fc82f1ab,
			0xe02474ef23d4f2bc,
			0xe0a980f598d8a745,
			0xe0b0d21d1219b48c,
			0xe0ce907abb969349,
			0xe10a56be889c8d63,
			0xe130b601260e44b5,
			0xe430fa7b7d850130,
			0xe4e7eeb23bebb1f8,
			0xe5205955ce643ade,
			0xe5dcc4b159c002f4,
			0xe62b635478feb9f1,
			0xe64292fa5df872fd,
			0xe708bba061e0cc77,
			0xe72726225a9f8ca8,
			0xe72e2063d179e57d,
			0xe7469eaa174fdd9f,
			0xe79b0d006ef1331d,
			0xe7eceebcdcb01522,
			0xe83eeeca42eb6184,
			0xe89b2535f3e88eb7,
			0xe8b71523b2ef78ed,
			0xe8dc5ddc1cdb5438,
			0xe930a7e80f737844,
			0xe9a04e0d39785218,
			0xeabe3c2d8178a916,
			0xeafef4c5dcc4b5b5,
			0xec5aa6bcd4fca2e4,
			0xec5c7b07d1717d84,
			0xecbd91cdb76d6a28,
			0xed7d297bd1f274b3,
			0xedada67c810ba36d,
			0xedae9d3a84825876,
			0xeef4dfefeb1def9f,
			0xef71c6ada87eac4c,
			0xefe5002d4e5acb87,
			0xf014129ca27de499,
			0xf03da18831a1c80b,
			0xf047782143ce741d,
			0xf0569fdbfd2961b4,
			0xf08bcfb76fcf5061,
			0xf0eb3ae18581b267,
			0xf19df04c8f59f3a6,
			0xf1cccb02e7af0dd8,
			0xf1e3711cde8fa324,
			0xf1f7baa2935a0cd7,
			0xf23307bee1ce0b8d,
			0xf304800fc3af267f,
			0xf32339f8d6ffe524,
			0xf418cd61a8543b3c,
			0xf42a44d24baf1780,
			0xf47ddd36364c797f,
			0xf4c3318dcf329728,
			0xf55818d39f2c0c72,
			0xf5a87fa04392d0a1,
			0xf613029b64a06aeb,
			0xf640e180eb6f7e34,
			0xf6ebf8b8d23d794f,
			0xf7787292d29bdcd7,
			0xf7af0983a9ca61c5,
			0xf7b756860a5b5804,
			0xf7df715b4e24efb3,
			0xf87e75def99cdba4,
			0xf89cd60c9713ce58,
			0xf8dcc5cd22965ff5,
			0xf90c9c3f6c27a1c2,
			0xf9454e8612b10b69,
			0xfa10659ae02f2093,
			0xfa35d04887272ed9,
			0xfa4d6a8cac27c611,
			0xfa5626b7b9dcd44b,
			0xfa80583ce360de61,
			0xfab5a20f1d337f75,
			0xfb0629d3fd4188b0,
			0xfb1ba86c82d8b9b1,
			0xfb596df65e062edf,
			0xfc446c448d940ff7,
			0xfc766ac7f0d6e4f5,
			0xfd58a2914a0296e2,
			0xfe88232d771013d6,
			0xfe931b1705a8e8a8,
			0xfffc6cb5879fa108,
		},
		Compressed: true,
	})
}
