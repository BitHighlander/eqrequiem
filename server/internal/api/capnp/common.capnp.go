// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Vector3 capnp.Struct

// Vector3_TypeID is the unique identifier for the type Vector3.
const Vector3_TypeID = 0xe708bba061e0cc77

func NewVector3(s *capnp.Segment) (Vector3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vector3(st), err
}

func NewRootVector3(s *capnp.Segment) (Vector3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Vector3(st), err
}

func ReadRootVector3(msg *capnp.Message) (Vector3, error) {
	root, err := msg.Root()
	return Vector3(root.Struct()), err
}

func (s Vector3) String() string {
	str, _ := text.Marshal(0xe708bba061e0cc77, capnp.Struct(s))
	return str
}

func (s Vector3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Vector3) DecodeFromPtr(p capnp.Ptr) Vector3 {
	return Vector3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Vector3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Vector3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Vector3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Vector3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Vector3) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Vector3) SetX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Vector3) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Vector3) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Vector3) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Vector3) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// Vector3_List is a list of Vector3.
type Vector3_List = capnp.StructList[Vector3]

// NewVector3 creates a new list of Vector3.
func NewVector3_List(s *capnp.Segment, sz int32) (Vector3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Vector3](l), err
}

// Vector3_Future is a wrapper for a Vector3 promised by a client call.
type Vector3_Future struct{ *capnp.Future }

func (f Vector3_Future) Struct() (Vector3, error) {
	p, err := f.Future.Ptr()
	return Vector3(p.Struct()), err
}

type InventorySlot capnp.Struct

// InventorySlot_TypeID is the unique identifier for the type InventorySlot.
const InventorySlot_TypeID = 0xe9a04e0d39785218

func NewInventorySlot(s *capnp.Segment) (InventorySlot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InventorySlot(st), err
}

func NewRootInventorySlot(s *capnp.Segment) (InventorySlot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InventorySlot(st), err
}

func ReadRootInventorySlot(msg *capnp.Message) (InventorySlot, error) {
	root, err := msg.Root()
	return InventorySlot(root.Struct()), err
}

func (s InventorySlot) String() string {
	str, _ := text.Marshal(0xe9a04e0d39785218, capnp.Struct(s))
	return str
}

func (s InventorySlot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InventorySlot) DecodeFromPtr(p capnp.Ptr) InventorySlot {
	return InventorySlot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InventorySlot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InventorySlot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InventorySlot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InventorySlot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InventorySlot) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InventorySlot) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InventorySlot) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InventorySlot) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InventorySlot) SubIndex() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s InventorySlot) SetSubIndex(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// InventorySlot_List is a list of InventorySlot.
type InventorySlot_List = capnp.StructList[InventorySlot]

// NewInventorySlot creates a new list of InventorySlot.
func NewInventorySlot_List(s *capnp.Segment, sz int32) (InventorySlot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[InventorySlot](l), err
}

// InventorySlot_Future is a wrapper for a InventorySlot promised by a client call.
type InventorySlot_Future struct{ *capnp.Future }

func (f InventorySlot_Future) Struct() (InventorySlot, error) {
	p, err := f.Future.Ptr()
	return InventorySlot(p.Struct()), err
}

type TypelessInventorySlot capnp.Struct

// TypelessInventorySlot_TypeID is the unique identifier for the type TypelessInventorySlot.
const TypelessInventorySlot_TypeID = 0x899e3334be65d957

func NewTypelessInventorySlot(s *capnp.Segment) (TypelessInventorySlot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TypelessInventorySlot(st), err
}

func NewRootTypelessInventorySlot(s *capnp.Segment) (TypelessInventorySlot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TypelessInventorySlot(st), err
}

func ReadRootTypelessInventorySlot(msg *capnp.Message) (TypelessInventorySlot, error) {
	root, err := msg.Root()
	return TypelessInventorySlot(root.Struct()), err
}

func (s TypelessInventorySlot) String() string {
	str, _ := text.Marshal(0x899e3334be65d957, capnp.Struct(s))
	return str
}

func (s TypelessInventorySlot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TypelessInventorySlot) DecodeFromPtr(p capnp.Ptr) TypelessInventorySlot {
	return TypelessInventorySlot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TypelessInventorySlot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TypelessInventorySlot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TypelessInventorySlot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TypelessInventorySlot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TypelessInventorySlot) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TypelessInventorySlot) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TypelessInventorySlot) SubIndex() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TypelessInventorySlot) SetSubIndex(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TypelessInventorySlot_List is a list of TypelessInventorySlot.
type TypelessInventorySlot_List = capnp.StructList[TypelessInventorySlot]

// NewTypelessInventorySlot creates a new list of TypelessInventorySlot.
func NewTypelessInventorySlot_List(s *capnp.Segment, sz int32) (TypelessInventorySlot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TypelessInventorySlot](l), err
}

// TypelessInventorySlot_Future is a wrapper for a TypelessInventorySlot promised by a client call.
type TypelessInventorySlot_Future struct{ *capnp.Future }

func (f TypelessInventorySlot_Future) Struct() (TypelessInventorySlot, error) {
	p, err := f.Future.Ptr()
	return TypelessInventorySlot(p.Struct()), err
}

type EntityId capnp.Struct

// EntityId_TypeID is the unique identifier for the type EntityId.
const EntityId_TypeID = 0xdd9072d437eab9a1

func NewEntityId(s *capnp.Segment) (EntityId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityId(st), err
}

func NewRootEntityId(s *capnp.Segment) (EntityId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityId(st), err
}

func ReadRootEntityId(msg *capnp.Message) (EntityId, error) {
	root, err := msg.Root()
	return EntityId(root.Struct()), err
}

func (s EntityId) String() string {
	str, _ := text.Marshal(0xdd9072d437eab9a1, capnp.Struct(s))
	return str
}

func (s EntityId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityId) DecodeFromPtr(p capnp.Ptr) EntityId {
	return EntityId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityId) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EntityId) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// EntityId_List is a list of EntityId.
type EntityId_List = capnp.StructList[EntityId]

// NewEntityId creates a new list of EntityId.
func NewEntityId_List(s *capnp.Segment, sz int32) (EntityId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityId](l), err
}

// EntityId_Future is a wrapper for a EntityId promised by a client call.
type EntityId_Future struct{ *capnp.Future }

func (f EntityId_Future) Struct() (EntityId, error) {
	p, err := f.Future.Ptr()
	return EntityId(p.Struct()), err
}

type Duel capnp.Struct

// Duel_TypeID is the unique identifier for the type Duel.
const Duel_TypeID = 0xb745aa7de9c39191

func NewDuel(s *capnp.Segment) (Duel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Duel(st), err
}

func NewRootDuel(s *capnp.Segment) (Duel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Duel(st), err
}

func ReadRootDuel(msg *capnp.Message) (Duel, error) {
	root, err := msg.Root()
	return Duel(root.Struct()), err
}

func (s Duel) String() string {
	str, _ := text.Marshal(0xb745aa7de9c39191, capnp.Struct(s))
	return str
}

func (s Duel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Duel) DecodeFromPtr(p capnp.Ptr) Duel {
	return Duel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Duel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Duel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Duel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Duel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Duel) DuelInitiator() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Duel) SetDuelInitiator(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Duel) DuelTarget() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Duel) SetDuelTarget(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Duel_List is a list of Duel.
type Duel_List = capnp.StructList[Duel]

// NewDuel creates a new list of Duel.
func NewDuel_List(s *capnp.Segment, sz int32) (Duel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Duel](l), err
}

// Duel_Future is a wrapper for a Duel promised by a client call.
type Duel_Future struct{ *capnp.Future }

func (f Duel_Future) Struct() (Duel, error) {
	p, err := f.Future.Ptr()
	return Duel(p.Struct()), err
}

type DuelResponse capnp.Struct

// DuelResponse_TypeID is the unique identifier for the type DuelResponse.
const DuelResponse_TypeID = 0x8163a7ff6f92e3eb

func NewDuelResponse(s *capnp.Segment) (DuelResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DuelResponse(st), err
}

func NewRootDuelResponse(s *capnp.Segment) (DuelResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DuelResponse(st), err
}

func ReadRootDuelResponse(msg *capnp.Message) (DuelResponse, error) {
	root, err := msg.Root()
	return DuelResponse(root.Struct()), err
}

func (s DuelResponse) String() string {
	str, _ := text.Marshal(0x8163a7ff6f92e3eb, capnp.Struct(s))
	return str
}

func (s DuelResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DuelResponse) DecodeFromPtr(p capnp.Ptr) DuelResponse {
	return DuelResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DuelResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DuelResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DuelResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DuelResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DuelResponse) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DuelResponse) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DuelResponse) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DuelResponse) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// DuelResponse_List is a list of DuelResponse.
type DuelResponse_List = capnp.StructList[DuelResponse]

// NewDuelResponse creates a new list of DuelResponse.
func NewDuelResponse_List(s *capnp.Segment, sz int32) (DuelResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DuelResponse](l), err
}

// DuelResponse_Future is a wrapper for a DuelResponse promised by a client call.
type DuelResponse_Future struct{ *capnp.Future }

func (f DuelResponse_Future) Struct() (DuelResponse, error) {
	p, err := f.Future.Ptr()
	return DuelResponse(p.Struct()), err
}

type AdventureInfo capnp.Struct

// AdventureInfo_TypeID is the unique identifier for the type AdventureInfo.
const AdventureInfo_TypeID = 0xf03da18831a1c80b

func NewAdventureInfo(s *capnp.Segment) (AdventureInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3})
	return AdventureInfo(st), err
}

func NewRootAdventureInfo(s *capnp.Segment) (AdventureInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3})
	return AdventureInfo(st), err
}

func ReadRootAdventureInfo(msg *capnp.Message) (AdventureInfo, error) {
	root, err := msg.Root()
	return AdventureInfo(root.Struct()), err
}

func (s AdventureInfo) String() string {
	str, _ := text.Marshal(0xf03da18831a1c80b, capnp.Struct(s))
	return str
}

func (s AdventureInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureInfo) DecodeFromPtr(p capnp.Ptr) AdventureInfo {
	return AdventureInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureInfo) QuestId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureInfo) SetQuestId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureInfo) NpcId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureInfo) SetNpcId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureInfo) InUse() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s AdventureInfo) HasInUse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventureInfo) SetInUse(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInUse sets the inUse field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s AdventureInfo) NewInUse() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AdventureInfo) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureInfo) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureInfo) ShowCompass() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Bool(p.Struct()), err
}

func (s AdventureInfo) HasShowCompass() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AdventureInfo) SetShowCompass(v Bool) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewShowCompass sets the showCompass field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s AdventureInfo) NewShowCompass() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AdventureInfo) Objetive() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventureInfo) SetObjetive(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AdventureInfo) ObjetiveValue() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AdventureInfo) SetObjetiveValue(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AdventureInfo) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s AdventureInfo) HasText() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s AdventureInfo) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s AdventureInfo) SetText(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s AdventureInfo) Type() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AdventureInfo) SetType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s AdventureInfo) Minutes() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AdventureInfo) SetMinutes(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s AdventureInfo) Points() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s AdventureInfo) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s AdventureInfo) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s AdventureInfo) SetX(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s AdventureInfo) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s AdventureInfo) SetY(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s AdventureInfo) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s AdventureInfo) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s AdventureInfo) Zonedungeonid() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s AdventureInfo) SetZonedungeonid(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

// AdventureInfo_List is a list of AdventureInfo.
type AdventureInfo_List = capnp.StructList[AdventureInfo]

// NewAdventureInfo creates a new list of AdventureInfo.
func NewAdventureInfo_List(s *capnp.Segment, sz int32) (AdventureInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3}, sz)
	return capnp.StructList[AdventureInfo](l), err
}

// AdventureInfo_Future is a wrapper for a AdventureInfo promised by a client call.
type AdventureInfo_Future struct{ *capnp.Future }

func (f AdventureInfo_Future) Struct() (AdventureInfo, error) {
	p, err := f.Future.Ptr()
	return AdventureInfo(p.Struct()), err
}
func (p AdventureInfo_Future) InUse() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}
func (p AdventureInfo_Future) ShowCompass() Bool_Future {
	return Bool_Future{Future: p.Future.Field(1, nil)}
}

type TextureProfile capnp.Struct

// TextureProfile_TypeID is the unique identifier for the type TextureProfile.
const TextureProfile_TypeID = 0xe430fa7b7d850130

func NewTextureProfile(s *capnp.Segment) (TextureProfile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TextureProfile(st), err
}

func NewRootTextureProfile(s *capnp.Segment) (TextureProfile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TextureProfile(st), err
}

func ReadRootTextureProfile(msg *capnp.Message) (TextureProfile, error) {
	root, err := msg.Root()
	return TextureProfile(root.Struct()), err
}

func (s TextureProfile) String() string {
	str, _ := text.Marshal(0xe430fa7b7d850130, capnp.Struct(s))
	return str
}

func (s TextureProfile) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TextureProfile) DecodeFromPtr(p capnp.Ptr) TextureProfile {
	return TextureProfile(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TextureProfile) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TextureProfile) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TextureProfile) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TextureProfile) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TextureProfile) Head() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TextureProfile) SetHead(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TextureProfile) Chest() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TextureProfile) SetChest(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TextureProfile) Arms() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TextureProfile) SetArms(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TextureProfile) Wrist() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TextureProfile) SetWrist(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TextureProfile) Hands() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TextureProfile) SetHands(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TextureProfile) Legs() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TextureProfile) SetLegs(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TextureProfile) Feet() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TextureProfile) SetFeet(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s TextureProfile) Primary() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s TextureProfile) SetPrimary(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s TextureProfile) Secondary() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s TextureProfile) SetSecondary(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// TextureProfile_List is a list of TextureProfile.
type TextureProfile_List = capnp.StructList[TextureProfile]

// NewTextureProfile creates a new list of TextureProfile.
func NewTextureProfile_List(s *capnp.Segment, sz int32) (TextureProfile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[TextureProfile](l), err
}

// TextureProfile_Future is a wrapper for a TextureProfile promised by a client call.
type TextureProfile_Future struct{ *capnp.Future }

func (f TextureProfile_Future) Struct() (TextureProfile, error) {
	p, err := f.Future.Ptr()
	return TextureProfile(p.Struct()), err
}

type TintProfile capnp.Struct

// TintProfile_TypeID is the unique identifier for the type TintProfile.
const TintProfile_TypeID = 0xf5a87fa04392d0a1

func NewTintProfile(s *capnp.Segment) (TintProfile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TintProfile(st), err
}

func NewRootTintProfile(s *capnp.Segment) (TintProfile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TintProfile(st), err
}

func ReadRootTintProfile(msg *capnp.Message) (TintProfile, error) {
	root, err := msg.Root()
	return TintProfile(root.Struct()), err
}

func (s TintProfile) String() string {
	str, _ := text.Marshal(0xf5a87fa04392d0a1, capnp.Struct(s))
	return str
}

func (s TintProfile) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TintProfile) DecodeFromPtr(p capnp.Ptr) TintProfile {
	return TintProfile(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TintProfile) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TintProfile) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TintProfile) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TintProfile) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TintProfile) Head() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TintProfile) SetHead(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TintProfile) Chest() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TintProfile) SetChest(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TintProfile) Arms() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TintProfile) SetArms(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TintProfile) Wrist() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TintProfile) SetWrist(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TintProfile) Hands() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TintProfile) SetHands(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TintProfile) Legs() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TintProfile) SetLegs(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TintProfile) Feet() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TintProfile) SetFeet(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s TintProfile) Primary() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s TintProfile) SetPrimary(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s TintProfile) Secondary() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s TintProfile) SetSecondary(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// TintProfile_List is a list of TintProfile.
type TintProfile_List = capnp.StructList[TintProfile]

// NewTintProfile creates a new list of TintProfile.
func NewTintProfile_List(s *capnp.Segment, sz int32) (TintProfile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[TintProfile](l), err
}

// TintProfile_Future is a wrapper for a TintProfile promised by a client call.
type TintProfile_Future struct{ *capnp.Future }

func (f TintProfile_Future) Struct() (TintProfile, error) {
	p, err := f.Future.Ptr()
	return TintProfile(p.Struct()), err
}

type Spawns capnp.Struct

// Spawns_TypeID is the unique identifier for the type Spawns.
const Spawns_TypeID = 0x84ff32fdda835dfe

func NewSpawns(s *capnp.Segment) (Spawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Spawns(st), err
}

func NewRootSpawns(s *capnp.Segment) (Spawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Spawns(st), err
}

func ReadRootSpawns(msg *capnp.Message) (Spawns, error) {
	root, err := msg.Root()
	return Spawns(root.Struct()), err
}

func (s Spawns) String() string {
	str, _ := text.Marshal(0x84ff32fdda835dfe, capnp.Struct(s))
	return str
}

func (s Spawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Spawns) DecodeFromPtr(p capnp.Ptr) Spawns {
	return Spawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Spawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Spawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Spawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Spawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Spawns) Spawns() (Spawn_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Spawn_List(p.List()), err
}

func (s Spawns) HasSpawns() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Spawns) SetSpawns(v Spawn_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpawns sets the spawns field to a newly
// allocated Spawn_List, preferring placement in s's segment.
func (s Spawns) NewSpawns(n int32) (Spawn_List, error) {
	l, err := NewSpawn_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Spawn_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Spawns_List is a list of Spawns.
type Spawns_List = capnp.StructList[Spawns]

// NewSpawns creates a new list of Spawns.
func NewSpawns_List(s *capnp.Segment, sz int32) (Spawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Spawns](l), err
}

// Spawns_Future is a wrapper for a Spawns promised by a client call.
type Spawns_Future struct{ *capnp.Future }

func (f Spawns_Future) Struct() (Spawns, error) {
	p, err := f.Future.Ptr()
	return Spawns(p.Struct()), err
}

type Spawn capnp.Struct

// Spawn_TypeID is the unique identifier for the type Spawn.
const Spawn_TypeID = 0xd8facf5bce9546c7

func NewSpawn(s *capnp.Segment) (Spawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 216, PointerCount: 5})
	return Spawn(st), err
}

func NewRootSpawn(s *capnp.Segment) (Spawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 216, PointerCount: 5})
	return Spawn(st), err
}

func ReadRootSpawn(msg *capnp.Message) (Spawn, error) {
	root, err := msg.Root()
	return Spawn(root.Struct()), err
}

func (s Spawn) String() string {
	str, _ := text.Marshal(0xd8facf5bce9546c7, capnp.Struct(s))
	return str
}

func (s Spawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Spawn) DecodeFromPtr(p capnp.Ptr) Spawn {
	return Spawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Spawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Spawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Spawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Spawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Spawn) Gm() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Spawn) SetGm(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Spawn) Aaitle() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Spawn) SetAaitle(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Spawn) Anon() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Spawn) SetAnon(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Spawn) Face() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Spawn) SetFace(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Spawn) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Spawn) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Spawn) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Spawn) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Spawn) Deity() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Spawn) SetDeity(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Spawn) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Spawn) SetSize(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Spawn) Npc() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Spawn) SetNpc(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Spawn) Invis() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Spawn) SetInvis(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Spawn) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Spawn) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Spawn) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Spawn) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Spawn) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Spawn) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s Spawn) Findable() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s Spawn) SetFindable(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s Spawn) DeltaHeading() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s Spawn) SetDeltaHeading(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s Spawn) X() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s Spawn) SetX(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s Spawn) Y() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s Spawn) SetY(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s Spawn) Animation() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s Spawn) SetAnimation(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s Spawn) Z() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s Spawn) SetZ(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s Spawn) DeltaY() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s Spawn) SetDeltaY(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s Spawn) DeltaX() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s Spawn) SetDeltaX(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s Spawn) Heading() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s Spawn) SetHeading(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s Spawn) DeltaZ() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s Spawn) SetDeltaZ(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s Spawn) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(84))
}

func (s Spawn) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(84, uint32(v))
}

func (s Spawn) Showhelm() int32 {
	return int32(capnp.Struct(s).Uint32(88))
}

func (s Spawn) SetShowhelm(v int32) {
	capnp.Struct(s).SetUint32(88, uint32(v))
}

func (s Spawn) IsNpc() int32 {
	return int32(capnp.Struct(s).Uint32(92))
}

func (s Spawn) SetIsNpc(v int32) {
	capnp.Struct(s).SetUint32(92, uint32(v))
}

func (s Spawn) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(96))
}

func (s Spawn) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(96, uint32(v))
}

func (s Spawn) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(100))
}

func (s Spawn) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(100, uint32(v))
}

func (s Spawn) Level() int32 {
	return int32(capnp.Struct(s).Uint32(104))
}

func (s Spawn) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(104, uint32(v))
}

func (s Spawn) PlayerState() int32 {
	return int32(capnp.Struct(s).Uint32(108))
}

func (s Spawn) SetPlayerState(v int32) {
	capnp.Struct(s).SetUint32(108, uint32(v))
}

func (s Spawn) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(112))
}

func (s Spawn) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(112, uint32(v))
}

func (s Spawn) Suffix() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Spawn) HasSuffix() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Spawn) SuffixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Spawn) SetSuffix(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Spawn) PetOwnerId() int32 {
	return int32(capnp.Struct(s).Uint32(116))
}

func (s Spawn) SetPetOwnerId(v int32) {
	capnp.Struct(s).SetUint32(116, uint32(v))
}

func (s Spawn) Guildrank() int32 {
	return int32(capnp.Struct(s).Uint32(120))
}

func (s Spawn) SetGuildrank(v int32) {
	capnp.Struct(s).SetUint32(120, uint32(v))
}

func (s Spawn) Equipment() (TextureProfile, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return TextureProfile(p.Struct()), err
}

func (s Spawn) HasEquipment() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Spawn) SetEquipment(v TextureProfile) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEquipment sets the equipment field to a newly
// allocated TextureProfile struct, preferring placement in s's segment.
func (s Spawn) NewEquipment() (TextureProfile, error) {
	ss, err := NewTextureProfile(capnp.Struct(s).Segment())
	if err != nil {
		return TextureProfile{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Spawn) Runspeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(124))
}

func (s Spawn) SetRunspeed(v float32) {
	capnp.Struct(s).SetUint32(124, math.Float32bits(v))
}

func (s Spawn) Afk() int32 {
	return int32(capnp.Struct(s).Uint32(128))
}

func (s Spawn) SetAfk(v int32) {
	capnp.Struct(s).SetUint32(128, uint32(v))
}

func (s Spawn) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(132))
}

func (s Spawn) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(132, uint32(v))
}

func (s Spawn) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Spawn) HasTitle() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Spawn) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Spawn) SetTitle(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Spawn) Helm() int32 {
	return int32(capnp.Struct(s).Uint32(136))
}

func (s Spawn) SetHelm(v int32) {
	capnp.Struct(s).SetUint32(136, uint32(v))
}

func (s Spawn) Race() int32 {
	return int32(capnp.Struct(s).Uint32(140))
}

func (s Spawn) SetRace(v int32) {
	capnp.Struct(s).SetUint32(140, uint32(v))
}

func (s Spawn) LastName() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Spawn) HasLastName() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Spawn) LastNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Spawn) SetLastName(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Spawn) Walkspeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(144))
}

func (s Spawn) SetWalkspeed(v float32) {
	capnp.Struct(s).SetUint32(144, math.Float32bits(v))
}

func (s Spawn) IsPet() int32 {
	return int32(capnp.Struct(s).Uint32(148))
}

func (s Spawn) SetIsPet(v int32) {
	capnp.Struct(s).SetUint32(148, uint32(v))
}

func (s Spawn) Light() int32 {
	return int32(capnp.Struct(s).Uint32(152))
}

func (s Spawn) SetLight(v int32) {
	capnp.Struct(s).SetUint32(152, uint32(v))
}

func (s Spawn) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(156))
}

func (s Spawn) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(156, uint32(v))
}

func (s Spawn) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(160))
}

func (s Spawn) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(160, uint32(v))
}

func (s Spawn) Flymode() int32 {
	return int32(capnp.Struct(s).Uint32(164))
}

func (s Spawn) SetFlymode(v int32) {
	capnp.Struct(s).SetUint32(164, uint32(v))
}

func (s Spawn) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(168))
}

func (s Spawn) SetGender(v int32) {
	capnp.Struct(s).SetUint32(168, uint32(v))
}

func (s Spawn) Bodytype() int32 {
	return int32(capnp.Struct(s).Uint32(172))
}

func (s Spawn) SetBodytype(v int32) {
	capnp.Struct(s).SetUint32(172, uint32(v))
}

func (s Spawn) EquipChest() int32 {
	return int32(capnp.Struct(s).Uint32(176))
}

func (s Spawn) SetEquipChest(v int32) {
	capnp.Struct(s).SetUint32(176, uint32(v))
}

func (s Spawn) MountColor() int32 {
	return int32(capnp.Struct(s).Uint32(180))
}

func (s Spawn) SetMountColor(v int32) {
	capnp.Struct(s).SetUint32(180, uint32(v))
}

func (s Spawn) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(184))
}

func (s Spawn) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(184, uint32(v))
}

func (s Spawn) BoundingRadius() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(188))
}

func (s Spawn) SetBoundingRadius(v float32) {
	capnp.Struct(s).SetUint32(188, math.Float32bits(v))
}

func (s Spawn) EquipmentTint() int32 {
	return int32(capnp.Struct(s).Uint32(192))
}

func (s Spawn) SetEquipmentTint(v int32) {
	capnp.Struct(s).SetUint32(192, uint32(v))
}

func (s Spawn) Lfg() int32 {
	return int32(capnp.Struct(s).Uint32(196))
}

func (s Spawn) SetLfg(v int32) {
	capnp.Struct(s).SetUint32(196, uint32(v))
}

func (s Spawn) CellX() int32 {
	return int32(capnp.Struct(s).Uint32(200))
}

func (s Spawn) SetCellX(v int32) {
	capnp.Struct(s).SetUint32(200, uint32(v))
}

func (s Spawn) CellY() int32 {
	return int32(capnp.Struct(s).Uint32(204))
}

func (s Spawn) SetCellY(v int32) {
	capnp.Struct(s).SetUint32(204, uint32(v))
}

func (s Spawn) CellZ() int32 {
	return int32(capnp.Struct(s).Uint32(208))
}

func (s Spawn) SetCellZ(v int32) {
	capnp.Struct(s).SetUint32(208, uint32(v))
}

// Spawn_List is a list of Spawn.
type Spawn_List = capnp.StructList[Spawn]

// NewSpawn creates a new list of Spawn.
func NewSpawn_List(s *capnp.Segment, sz int32) (Spawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 216, PointerCount: 5}, sz)
	return capnp.StructList[Spawn](l), err
}

// Spawn_Future is a wrapper for a Spawn promised by a client call.
type Spawn_Future struct{ *capnp.Future }

func (f Spawn_Future) Struct() (Spawn, error) {
	p, err := f.Future.Ptr()
	return Spawn(p.Struct()), err
}
func (p Spawn_Future) Equipment() TextureProfile_Future {
	return TextureProfile_Future{Future: p.Future.Field(2, nil)}
}

type ClientZoneEntry capnp.Struct

// ClientZoneEntry_TypeID is the unique identifier for the type ClientZoneEntry.
const ClientZoneEntry_TypeID = 0xb0746148ee56b888

func NewClientZoneEntry(s *capnp.Segment) (ClientZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientZoneEntry(st), err
}

func NewRootClientZoneEntry(s *capnp.Segment) (ClientZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientZoneEntry(st), err
}

func ReadRootClientZoneEntry(msg *capnp.Message) (ClientZoneEntry, error) {
	root, err := msg.Root()
	return ClientZoneEntry(root.Struct()), err
}

func (s ClientZoneEntry) String() string {
	str, _ := text.Marshal(0xb0746148ee56b888, capnp.Struct(s))
	return str
}

func (s ClientZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientZoneEntry) DecodeFromPtr(p capnp.Ptr) ClientZoneEntry {
	return ClientZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientZoneEntry) CharName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientZoneEntry) HasCharName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientZoneEntry) CharNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientZoneEntry) SetCharName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClientZoneEntry_List is a list of ClientZoneEntry.
type ClientZoneEntry_List = capnp.StructList[ClientZoneEntry]

// NewClientZoneEntry creates a new list of ClientZoneEntry.
func NewClientZoneEntry_List(s *capnp.Segment, sz int32) (ClientZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClientZoneEntry](l), err
}

// ClientZoneEntry_Future is a wrapper for a ClientZoneEntry promised by a client call.
type ClientZoneEntry_Future struct{ *capnp.Future }

func (f ClientZoneEntry_Future) Struct() (ClientZoneEntry, error) {
	p, err := f.Future.Ptr()
	return ClientZoneEntry(p.Struct()), err
}

type ServerZoneEntry capnp.Struct

// ServerZoneEntry_TypeID is the unique identifier for the type ServerZoneEntry.
const ServerZoneEntry_TypeID = 0xe64292fa5df872fd

func NewServerZoneEntry(s *capnp.Segment) (ServerZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerZoneEntry(st), err
}

func NewRootServerZoneEntry(s *capnp.Segment) (ServerZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerZoneEntry(st), err
}

func ReadRootServerZoneEntry(msg *capnp.Message) (ServerZoneEntry, error) {
	root, err := msg.Root()
	return ServerZoneEntry(root.Struct()), err
}

func (s ServerZoneEntry) String() string {
	str, _ := text.Marshal(0xe64292fa5df872fd, capnp.Struct(s))
	return str
}

func (s ServerZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerZoneEntry) DecodeFromPtr(p capnp.Ptr) ServerZoneEntry {
	return ServerZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerZoneEntry) Player() (Spawn, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Spawn(p.Struct()), err
}

func (s ServerZoneEntry) HasPlayer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerZoneEntry) SetPlayer(v Spawn) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayer sets the player field to a newly
// allocated Spawn struct, preferring placement in s's segment.
func (s ServerZoneEntry) NewPlayer() (Spawn, error) {
	ss, err := NewSpawn(capnp.Struct(s).Segment())
	if err != nil {
		return Spawn{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerZoneEntry_List is a list of ServerZoneEntry.
type ServerZoneEntry_List = capnp.StructList[ServerZoneEntry]

// NewServerZoneEntry creates a new list of ServerZoneEntry.
func NewServerZoneEntry_List(s *capnp.Segment, sz int32) (ServerZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServerZoneEntry](l), err
}

// ServerZoneEntry_Future is a wrapper for a ServerZoneEntry promised by a client call.
type ServerZoneEntry_Future struct{ *capnp.Future }

func (f ServerZoneEntry_Future) Struct() (ServerZoneEntry, error) {
	p, err := f.Future.Ptr()
	return ServerZoneEntry(p.Struct()), err
}
func (p ServerZoneEntry_Future) Player() Spawn_Future {
	return Spawn_Future{Future: p.Future.Field(0, nil)}
}

type MemorizeSpell capnp.Struct

// MemorizeSpell_TypeID is the unique identifier for the type MemorizeSpell.
const MemorizeSpell_TypeID = 0xa7e27069226b98ad

func NewMemorizeSpell(s *capnp.Segment) (MemorizeSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MemorizeSpell(st), err
}

func NewRootMemorizeSpell(s *capnp.Segment) (MemorizeSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MemorizeSpell(st), err
}

func ReadRootMemorizeSpell(msg *capnp.Message) (MemorizeSpell, error) {
	root, err := msg.Root()
	return MemorizeSpell(root.Struct()), err
}

func (s MemorizeSpell) String() string {
	str, _ := text.Marshal(0xa7e27069226b98ad, capnp.Struct(s))
	return str
}

func (s MemorizeSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MemorizeSpell) DecodeFromPtr(p capnp.Ptr) MemorizeSpell {
	return MemorizeSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MemorizeSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MemorizeSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MemorizeSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MemorizeSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MemorizeSpell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MemorizeSpell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MemorizeSpell) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MemorizeSpell) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MemorizeSpell) Scribing() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MemorizeSpell) SetScribing(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MemorizeSpell) Reduction() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MemorizeSpell) SetReduction(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MemorizeSpell_List is a list of MemorizeSpell.
type MemorizeSpell_List = capnp.StructList[MemorizeSpell]

// NewMemorizeSpell creates a new list of MemorizeSpell.
func NewMemorizeSpell_List(s *capnp.Segment, sz int32) (MemorizeSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MemorizeSpell](l), err
}

// MemorizeSpell_Future is a wrapper for a MemorizeSpell promised by a client call.
type MemorizeSpell_Future struct{ *capnp.Future }

func (f MemorizeSpell_Future) Struct() (MemorizeSpell, error) {
	p, err := f.Future.Ptr()
	return MemorizeSpell(p.Struct()), err
}

type Charm capnp.Struct

// Charm_TypeID is the unique identifier for the type Charm.
const Charm_TypeID = 0xe62b635478feb9f1

func NewCharm(s *capnp.Segment) (Charm, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Charm(st), err
}

func NewRootCharm(s *capnp.Segment) (Charm, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Charm(st), err
}

func ReadRootCharm(msg *capnp.Message) (Charm, error) {
	root, err := msg.Root()
	return Charm(root.Struct()), err
}

func (s Charm) String() string {
	str, _ := text.Marshal(0xe62b635478feb9f1, capnp.Struct(s))
	return str
}

func (s Charm) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Charm) DecodeFromPtr(p capnp.Ptr) Charm {
	return Charm(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Charm) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Charm) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Charm) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Charm) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Charm) OwnerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Charm) SetOwnerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Charm) PetId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Charm) SetPetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Charm) Command() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Charm) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Charm_List is a list of Charm.
type Charm_List = capnp.StructList[Charm]

// NewCharm creates a new list of Charm.
func NewCharm_List(s *capnp.Segment, sz int32) (Charm_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Charm](l), err
}

// Charm_Future is a wrapper for a Charm promised by a client call.
type Charm_Future struct{ *capnp.Future }

func (f Charm_Future) Struct() (Charm, error) {
	p, err := f.Future.Ptr()
	return Charm(p.Struct()), err
}

type InterruptCast capnp.Struct

// InterruptCast_TypeID is the unique identifier for the type InterruptCast.
const InterruptCast_TypeID = 0x8f9b301fdfe3c51c

func NewInterruptCast(s *capnp.Segment) (InterruptCast, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return InterruptCast(st), err
}

func NewRootInterruptCast(s *capnp.Segment) (InterruptCast, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return InterruptCast(st), err
}

func ReadRootInterruptCast(msg *capnp.Message) (InterruptCast, error) {
	root, err := msg.Root()
	return InterruptCast(root.Struct()), err
}

func (s InterruptCast) String() string {
	str, _ := text.Marshal(0x8f9b301fdfe3c51c, capnp.Struct(s))
	return str
}

func (s InterruptCast) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InterruptCast) DecodeFromPtr(p capnp.Ptr) InterruptCast {
	return InterruptCast(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InterruptCast) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InterruptCast) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InterruptCast) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InterruptCast) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InterruptCast) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InterruptCast) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InterruptCast) Messageid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InterruptCast) SetMessageid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InterruptCast) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s InterruptCast) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InterruptCast) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s InterruptCast) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// InterruptCast_List is a list of InterruptCast.
type InterruptCast_List = capnp.StructList[InterruptCast]

// NewInterruptCast creates a new list of InterruptCast.
func NewInterruptCast_List(s *capnp.Segment, sz int32) (InterruptCast_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[InterruptCast](l), err
}

// InterruptCast_Future is a wrapper for a InterruptCast promised by a client call.
type InterruptCast_Future struct{ *capnp.Future }

func (f InterruptCast_Future) Struct() (InterruptCast, error) {
	p, err := f.Future.Ptr()
	return InterruptCast(p.Struct()), err
}

type DeleteSpell capnp.Struct

// DeleteSpell_TypeID is the unique identifier for the type DeleteSpell.
const DeleteSpell_TypeID = 0x888a7e1d97fd6855

func NewDeleteSpell(s *capnp.Segment) (DeleteSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpell(st), err
}

func NewRootDeleteSpell(s *capnp.Segment) (DeleteSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpell(st), err
}

func ReadRootDeleteSpell(msg *capnp.Message) (DeleteSpell, error) {
	root, err := msg.Root()
	return DeleteSpell(root.Struct()), err
}

func (s DeleteSpell) String() string {
	str, _ := text.Marshal(0x888a7e1d97fd6855, capnp.Struct(s))
	return str
}

func (s DeleteSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteSpell) DecodeFromPtr(p capnp.Ptr) DeleteSpell {
	return DeleteSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteSpell) SpellSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteSpell) SetSpellSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DeleteSpell) Success() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DeleteSpell) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// DeleteSpell_List is a list of DeleteSpell.
type DeleteSpell_List = capnp.StructList[DeleteSpell]

// NewDeleteSpell creates a new list of DeleteSpell.
func NewDeleteSpell_List(s *capnp.Segment, sz int32) (DeleteSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DeleteSpell](l), err
}

// DeleteSpell_Future is a wrapper for a DeleteSpell promised by a client call.
type DeleteSpell_Future struct{ *capnp.Future }

func (f DeleteSpell_Future) Struct() (DeleteSpell, error) {
	p, err := f.Future.Ptr()
	return DeleteSpell(p.Struct()), err
}

type ManaChange capnp.Struct

// ManaChange_TypeID is the unique identifier for the type ManaChange.
const ManaChange_TypeID = 0xa7ab2bbcc8342323

func NewManaChange(s *capnp.Segment) (ManaChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ManaChange(st), err
}

func NewRootManaChange(s *capnp.Segment) (ManaChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ManaChange(st), err
}

func ReadRootManaChange(msg *capnp.Message) (ManaChange, error) {
	root, err := msg.Root()
	return ManaChange(root.Struct()), err
}

func (s ManaChange) String() string {
	str, _ := text.Marshal(0xa7ab2bbcc8342323, capnp.Struct(s))
	return str
}

func (s ManaChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ManaChange) DecodeFromPtr(p capnp.Ptr) ManaChange {
	return ManaChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ManaChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ManaChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ManaChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ManaChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ManaChange) NewMana() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ManaChange) SetNewMana(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ManaChange) Stamina() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ManaChange) SetStamina(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ManaChange) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ManaChange) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ManaChange) Keepcasting() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ManaChange) SetKeepcasting(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ManaChange) Padding() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ManaChange) HasPadding() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ManaChange) SetPadding(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPadding sets the padding field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ManaChange) NewPadding(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ManaChange_List is a list of ManaChange.
type ManaChange_List = capnp.StructList[ManaChange]

// NewManaChange creates a new list of ManaChange.
func NewManaChange_List(s *capnp.Segment, sz int32) (ManaChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[ManaChange](l), err
}

// ManaChange_Future is a wrapper for a ManaChange promised by a client call.
type ManaChange_Future struct{ *capnp.Future }

func (f ManaChange_Future) Struct() (ManaChange, error) {
	p, err := f.Future.Ptr()
	return ManaChange(p.Struct()), err
}

type SwapSpell capnp.Struct

// SwapSpell_TypeID is the unique identifier for the type SwapSpell.
const SwapSpell_TypeID = 0xe4e7eeb23bebb1f8

func NewSwapSpell(s *capnp.Segment) (SwapSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SwapSpell(st), err
}

func NewRootSwapSpell(s *capnp.Segment) (SwapSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SwapSpell(st), err
}

func ReadRootSwapSpell(msg *capnp.Message) (SwapSpell, error) {
	root, err := msg.Root()
	return SwapSpell(root.Struct()), err
}

func (s SwapSpell) String() string {
	str, _ := text.Marshal(0xe4e7eeb23bebb1f8, capnp.Struct(s))
	return str
}

func (s SwapSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SwapSpell) DecodeFromPtr(p capnp.Ptr) SwapSpell {
	return SwapSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SwapSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SwapSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SwapSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SwapSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SwapSpell) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SwapSpell) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SwapSpell) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SwapSpell) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SwapSpell_List is a list of SwapSpell.
type SwapSpell_List = capnp.StructList[SwapSpell]

// NewSwapSpell creates a new list of SwapSpell.
func NewSwapSpell_List(s *capnp.Segment, sz int32) (SwapSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SwapSpell](l), err
}

// SwapSpell_Future is a wrapper for a SwapSpell promised by a client call.
type SwapSpell_Future struct{ *capnp.Future }

func (f SwapSpell_Future) Struct() (SwapSpell, error) {
	p, err := f.Future.Ptr()
	return SwapSpell(p.Struct()), err
}

type BeginCast capnp.Struct

// BeginCast_TypeID is the unique identifier for the type BeginCast.
const BeginCast_TypeID = 0xc576336317865217

func NewBeginCast(s *capnp.Segment) (BeginCast, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BeginCast(st), err
}

func NewRootBeginCast(s *capnp.Segment) (BeginCast, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BeginCast(st), err
}

func ReadRootBeginCast(msg *capnp.Message) (BeginCast, error) {
	root, err := msg.Root()
	return BeginCast(root.Struct()), err
}

func (s BeginCast) String() string {
	str, _ := text.Marshal(0xc576336317865217, capnp.Struct(s))
	return str
}

func (s BeginCast) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BeginCast) DecodeFromPtr(p capnp.Ptr) BeginCast {
	return BeginCast(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BeginCast) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BeginCast) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BeginCast) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BeginCast) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BeginCast) CasterId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BeginCast) SetCasterId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BeginCast) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BeginCast) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BeginCast) CastTime() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BeginCast) SetCastTime(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// BeginCast_List is a list of BeginCast.
type BeginCast_List = capnp.StructList[BeginCast]

// NewBeginCast creates a new list of BeginCast.
func NewBeginCast_List(s *capnp.Segment, sz int32) (BeginCast_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[BeginCast](l), err
}

// BeginCast_Future is a wrapper for a BeginCast promised by a client call.
type BeginCast_Future struct{ *capnp.Future }

func (f BeginCast_Future) Struct() (BeginCast, error) {
	p, err := f.Future.Ptr()
	return BeginCast(p.Struct()), err
}

type CastSpell capnp.Struct

// CastSpell_TypeID is the unique identifier for the type CastSpell.
const CastSpell_TypeID = 0xa987ac170b5f48c3

func NewCastSpell(s *capnp.Segment) (CastSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CastSpell(st), err
}

func NewRootCastSpell(s *capnp.Segment) (CastSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CastSpell(st), err
}

func ReadRootCastSpell(msg *capnp.Message) (CastSpell, error) {
	root, err := msg.Root()
	return CastSpell(root.Struct()), err
}

func (s CastSpell) String() string {
	str, _ := text.Marshal(0xa987ac170b5f48c3, capnp.Struct(s))
	return str
}

func (s CastSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CastSpell) DecodeFromPtr(p capnp.Ptr) CastSpell {
	return CastSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CastSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CastSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CastSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CastSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CastSpell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CastSpell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CastSpell) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CastSpell) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CastSpell) Inventoryslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CastSpell) SetInventoryslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CastSpell) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CastSpell) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// CastSpell_List is a list of CastSpell.
type CastSpell_List = capnp.StructList[CastSpell]

// NewCastSpell creates a new list of CastSpell.
func NewCastSpell_List(s *capnp.Segment, sz int32) (CastSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CastSpell](l), err
}

// CastSpell_Future is a wrapper for a CastSpell promised by a client call.
type CastSpell_Future struct{ *capnp.Future }

func (f CastSpell_Future) Struct() (CastSpell, error) {
	p, err := f.Future.Ptr()
	return CastSpell(p.Struct()), err
}

type SpawnAppearance capnp.Struct

// SpawnAppearance_TypeID is the unique identifier for the type SpawnAppearance.
const SpawnAppearance_TypeID = 0xc817bfd03978a39b

func NewSpawnAppearance(s *capnp.Segment) (SpawnAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnAppearance(st), err
}

func NewRootSpawnAppearance(s *capnp.Segment) (SpawnAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnAppearance(st), err
}

func ReadRootSpawnAppearance(msg *capnp.Message) (SpawnAppearance, error) {
	root, err := msg.Root()
	return SpawnAppearance(root.Struct()), err
}

func (s SpawnAppearance) String() string {
	str, _ := text.Marshal(0xc817bfd03978a39b, capnp.Struct(s))
	return str
}

func (s SpawnAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnAppearance) DecodeFromPtr(p capnp.Ptr) SpawnAppearance {
	return SpawnAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnAppearance) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnAppearance) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpawnAppearance) Parameter() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpawnAppearance) SetParameter(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpawnAppearance_List is a list of SpawnAppearance.
type SpawnAppearance_List = capnp.StructList[SpawnAppearance]

// NewSpawnAppearance creates a new list of SpawnAppearance.
func NewSpawnAppearance_List(s *capnp.Segment, sz int32) (SpawnAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[SpawnAppearance](l), err
}

// SpawnAppearance_Future is a wrapper for a SpawnAppearance promised by a client call.
type SpawnAppearance_Future struct{ *capnp.Future }

func (f SpawnAppearance_Future) Struct() (SpawnAppearance, error) {
	p, err := f.Future.Ptr()
	return SpawnAppearance(p.Struct()), err
}

type SpellBuff capnp.Struct

// SpellBuff_TypeID is the unique identifier for the type SpellBuff.
const SpellBuff_TypeID = 0x9c9f074ebb94ca3b

func NewSpellBuff(s *capnp.Segment) (SpellBuff, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SpellBuff(st), err
}

func NewRootSpellBuff(s *capnp.Segment) (SpellBuff, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SpellBuff(st), err
}

func ReadRootSpellBuff(msg *capnp.Message) (SpellBuff, error) {
	root, err := msg.Root()
	return SpellBuff(root.Struct()), err
}

func (s SpellBuff) String() string {
	str, _ := text.Marshal(0x9c9f074ebb94ca3b, capnp.Struct(s))
	return str
}

func (s SpellBuff) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpellBuff) DecodeFromPtr(p capnp.Ptr) SpellBuff {
	return SpellBuff(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpellBuff) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpellBuff) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpellBuff) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpellBuff) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpellBuff) EffectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpellBuff) SetEffectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpellBuff) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpellBuff) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpellBuff) BardModifier() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpellBuff) SetBardModifier(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s SpellBuff) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s SpellBuff) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s SpellBuff) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s SpellBuff) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s SpellBuff) Counters() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s SpellBuff) SetCounters(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s SpellBuff) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s SpellBuff) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// SpellBuff_List is a list of SpellBuff.
type SpellBuff_List = capnp.StructList[SpellBuff]

// NewSpellBuff creates a new list of SpellBuff.
func NewSpellBuff_List(s *capnp.Segment, sz int32) (SpellBuff_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[SpellBuff](l), err
}

// SpellBuff_Future is a wrapper for a SpellBuff promised by a client call.
type SpellBuff_Future struct{ *capnp.Future }

func (f SpellBuff_Future) Struct() (SpellBuff, error) {
	p, err := f.Future.Ptr()
	return SpellBuff(p.Struct()), err
}

type SpellBuffPacket capnp.Struct

// SpellBuffPacket_TypeID is the unique identifier for the type SpellBuffPacket.
const SpellBuffPacket_TypeID = 0xd0f511db04f5194f

func NewSpellBuffPacket(s *capnp.Segment) (SpellBuffPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SpellBuffPacket(st), err
}

func NewRootSpellBuffPacket(s *capnp.Segment) (SpellBuffPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SpellBuffPacket(st), err
}

func ReadRootSpellBuffPacket(msg *capnp.Message) (SpellBuffPacket, error) {
	root, err := msg.Root()
	return SpellBuffPacket(root.Struct()), err
}

func (s SpellBuffPacket) String() string {
	str, _ := text.Marshal(0xd0f511db04f5194f, capnp.Struct(s))
	return str
}

func (s SpellBuffPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpellBuffPacket) DecodeFromPtr(p capnp.Ptr) SpellBuffPacket {
	return SpellBuffPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpellBuffPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpellBuffPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpellBuffPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpellBuffPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpellBuffPacket) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpellBuffPacket) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpellBuffPacket) Buff() (SpellBuff, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SpellBuff(p.Struct()), err
}

func (s SpellBuffPacket) HasBuff() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpellBuffPacket) SetBuff(v SpellBuff) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBuff sets the buff field to a newly
// allocated SpellBuff struct, preferring placement in s's segment.
func (s SpellBuffPacket) NewBuff() (SpellBuff, error) {
	ss, err := NewSpellBuff(capnp.Struct(s).Segment())
	if err != nil {
		return SpellBuff{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SpellBuffPacket) Slotid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpellBuffPacket) SetSlotid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpellBuffPacket) Bufffade() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpellBuffPacket) SetBufffade(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpellBuffPacket_List is a list of SpellBuffPacket.
type SpellBuffPacket_List = capnp.StructList[SpellBuffPacket]

// NewSpellBuffPacket creates a new list of SpellBuffPacket.
func NewSpellBuffPacket_List(s *capnp.Segment, sz int32) (SpellBuffPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[SpellBuffPacket](l), err
}

// SpellBuffPacket_Future is a wrapper for a SpellBuffPacket promised by a client call.
type SpellBuffPacket_Future struct{ *capnp.Future }

func (f SpellBuffPacket_Future) Struct() (SpellBuffPacket, error) {
	p, err := f.Future.Ptr()
	return SpellBuffPacket(p.Struct()), err
}
func (p SpellBuffPacket_Future) Buff() SpellBuff_Future {
	return SpellBuff_Future{Future: p.Future.Field(0, nil)}
}

type ItemNamePacket capnp.Struct

// ItemNamePacket_TypeID is the unique identifier for the type ItemNamePacket.
const ItemNamePacket_TypeID = 0xf4c3318dcf329728

func NewItemNamePacket(s *capnp.Segment) (ItemNamePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemNamePacket(st), err
}

func NewRootItemNamePacket(s *capnp.Segment) (ItemNamePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemNamePacket(st), err
}

func ReadRootItemNamePacket(msg *capnp.Message) (ItemNamePacket, error) {
	root, err := msg.Root()
	return ItemNamePacket(root.Struct()), err
}

func (s ItemNamePacket) String() string {
	str, _ := text.Marshal(0xf4c3318dcf329728, capnp.Struct(s))
	return str
}

func (s ItemNamePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemNamePacket) DecodeFromPtr(p capnp.Ptr) ItemNamePacket {
	return ItemNamePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemNamePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemNamePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemNamePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemNamePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemNamePacket) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemNamePacket) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ItemNamePacket) Unkown() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ItemNamePacket) SetUnkown(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ItemNamePacket) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ItemNamePacket) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ItemNamePacket) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ItemNamePacket) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ItemNamePacket_List is a list of ItemNamePacket.
type ItemNamePacket_List = capnp.StructList[ItemNamePacket]

// NewItemNamePacket creates a new list of ItemNamePacket.
func NewItemNamePacket_List(s *capnp.Segment, sz int32) (ItemNamePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ItemNamePacket](l), err
}

// ItemNamePacket_Future is a wrapper for a ItemNamePacket promised by a client call.
type ItemNamePacket_Future struct{ *capnp.Future }

func (f ItemNamePacket_Future) Struct() (ItemNamePacket, error) {
	p, err := f.Future.Ptr()
	return ItemNamePacket(p.Struct()), err
}

type ItemProperties capnp.Struct

// ItemProperties_TypeID is the unique identifier for the type ItemProperties.
const ItemProperties_TypeID = 0xe00fb886fc82f1ab

func NewItemProperties(s *capnp.Segment) (ItemProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ItemProperties(st), err
}

func NewRootItemProperties(s *capnp.Segment) (ItemProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ItemProperties(st), err
}

func ReadRootItemProperties(msg *capnp.Message) (ItemProperties, error) {
	root, err := msg.Root()
	return ItemProperties(root.Struct()), err
}

func (s ItemProperties) String() string {
	str, _ := text.Marshal(0xe00fb886fc82f1ab, capnp.Struct(s))
	return str
}

func (s ItemProperties) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemProperties) DecodeFromPtr(p capnp.Ptr) ItemProperties {
	return ItemProperties(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemProperties) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemProperties) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemProperties) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemProperties) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemProperties) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemProperties) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ItemProperties_List is a list of ItemProperties.
type ItemProperties_List = capnp.StructList[ItemProperties]

// NewItemProperties creates a new list of ItemProperties.
func NewItemProperties_List(s *capnp.Segment, sz int32) (ItemProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ItemProperties](l), err
}

// ItemProperties_Future is a wrapper for a ItemProperties promised by a client call.
type ItemProperties_Future struct{ *capnp.Future }

func (f ItemProperties_Future) Struct() (ItemProperties, error) {
	p, err := f.Future.Ptr()
	return ItemProperties(p.Struct()), err
}

type GMTrainee capnp.Struct

// GMTrainee_TypeID is the unique identifier for the type GMTrainee.
const GMTrainee_TypeID = 0xbadafe4de857fe71

func NewGMTrainee(s *capnp.Segment) (GMTrainee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GMTrainee(st), err
}

func NewRootGMTrainee(s *capnp.Segment) (GMTrainee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GMTrainee(st), err
}

func ReadRootGMTrainee(msg *capnp.Message) (GMTrainee, error) {
	root, err := msg.Root()
	return GMTrainee(root.Struct()), err
}

func (s GMTrainee) String() string {
	str, _ := text.Marshal(0xbadafe4de857fe71, capnp.Struct(s))
	return str
}

func (s GMTrainee) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMTrainee) DecodeFromPtr(p capnp.Ptr) GMTrainee {
	return GMTrainee(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMTrainee) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMTrainee) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMTrainee) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMTrainee) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMTrainee) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMTrainee) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMTrainee) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMTrainee) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMTrainee) Skills() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s GMTrainee) HasSkills() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMTrainee) SetSkills(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSkills sets the skills field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s GMTrainee) NewSkills(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GMTrainee_List is a list of GMTrainee.
type GMTrainee_List = capnp.StructList[GMTrainee]

// NewGMTrainee creates a new list of GMTrainee.
func NewGMTrainee_List(s *capnp.Segment, sz int32) (GMTrainee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GMTrainee](l), err
}

// GMTrainee_Future is a wrapper for a GMTrainee promised by a client call.
type GMTrainee_Future struct{ *capnp.Future }

func (f GMTrainee_Future) Struct() (GMTrainee, error) {
	p, err := f.Future.Ptr()
	return GMTrainee(p.Struct()), err
}

type GMTrainEnd capnp.Struct

// GMTrainEnd_TypeID is the unique identifier for the type GMTrainEnd.
const GMTrainEnd_TypeID = 0xb72ecd96799cf7e7

func NewGMTrainEnd(s *capnp.Segment) (GMTrainEnd, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMTrainEnd(st), err
}

func NewRootGMTrainEnd(s *capnp.Segment) (GMTrainEnd, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMTrainEnd(st), err
}

func ReadRootGMTrainEnd(msg *capnp.Message) (GMTrainEnd, error) {
	root, err := msg.Root()
	return GMTrainEnd(root.Struct()), err
}

func (s GMTrainEnd) String() string {
	str, _ := text.Marshal(0xb72ecd96799cf7e7, capnp.Struct(s))
	return str
}

func (s GMTrainEnd) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMTrainEnd) DecodeFromPtr(p capnp.Ptr) GMTrainEnd {
	return GMTrainEnd(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMTrainEnd) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMTrainEnd) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMTrainEnd) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMTrainEnd) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMTrainEnd) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMTrainEnd) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMTrainEnd) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMTrainEnd) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// GMTrainEnd_List is a list of GMTrainEnd.
type GMTrainEnd_List = capnp.StructList[GMTrainEnd]

// NewGMTrainEnd creates a new list of GMTrainEnd.
func NewGMTrainEnd_List(s *capnp.Segment, sz int32) (GMTrainEnd_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GMTrainEnd](l), err
}

// GMTrainEnd_Future is a wrapper for a GMTrainEnd promised by a client call.
type GMTrainEnd_Future struct{ *capnp.Future }

func (f GMTrainEnd_Future) Struct() (GMTrainEnd, error) {
	p, err := f.Future.Ptr()
	return GMTrainEnd(p.Struct()), err
}

type GMSkillChange capnp.Struct

// GMSkillChange_TypeID is the unique identifier for the type GMSkillChange.
const GMSkillChange_TypeID = 0xb0d71e9e634d1529

func NewGMSkillChange(s *capnp.Segment) (GMSkillChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GMSkillChange(st), err
}

func NewRootGMSkillChange(s *capnp.Segment) (GMSkillChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GMSkillChange(st), err
}

func ReadRootGMSkillChange(msg *capnp.Message) (GMSkillChange, error) {
	root, err := msg.Root()
	return GMSkillChange(root.Struct()), err
}

func (s GMSkillChange) String() string {
	str, _ := text.Marshal(0xb0d71e9e634d1529, capnp.Struct(s))
	return str
}

func (s GMSkillChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMSkillChange) DecodeFromPtr(p capnp.Ptr) GMSkillChange {
	return GMSkillChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMSkillChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMSkillChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMSkillChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMSkillChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMSkillChange) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMSkillChange) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMSkillChange) Skillbank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMSkillChange) SetSkillbank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMSkillChange) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMSkillChange) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// GMSkillChange_List is a list of GMSkillChange.
type GMSkillChange_List = capnp.StructList[GMSkillChange]

// NewGMSkillChange creates a new list of GMSkillChange.
func NewGMSkillChange_List(s *capnp.Segment, sz int32) (GMSkillChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[GMSkillChange](l), err
}

// GMSkillChange_Future is a wrapper for a GMSkillChange promised by a client call.
type GMSkillChange_Future struct{ *capnp.Future }

func (f GMSkillChange_Future) Struct() (GMSkillChange, error) {
	p, err := f.Future.Ptr()
	return GMSkillChange(p.Struct()), err
}

type ConsentResponse capnp.Struct

// ConsentResponse_TypeID is the unique identifier for the type ConsentResponse.
const ConsentResponse_TypeID = 0xb52cdc5b0d00dfde

func NewConsentResponse(s *capnp.Segment) (ConsentResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ConsentResponse(st), err
}

func NewRootConsentResponse(s *capnp.Segment) (ConsentResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ConsentResponse(st), err
}

func ReadRootConsentResponse(msg *capnp.Message) (ConsentResponse, error) {
	root, err := msg.Root()
	return ConsentResponse(root.Struct()), err
}

func (s ConsentResponse) String() string {
	str, _ := text.Marshal(0xb52cdc5b0d00dfde, capnp.Struct(s))
	return str
}

func (s ConsentResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ConsentResponse) DecodeFromPtr(p capnp.Ptr) ConsentResponse {
	return ConsentResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ConsentResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ConsentResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ConsentResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ConsentResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ConsentResponse) Grantname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ConsentResponse) HasGrantname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ConsentResponse) GrantnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetGrantname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ConsentResponse) Ownername() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ConsentResponse) HasOwnername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ConsentResponse) OwnernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetOwnername(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ConsentResponse) Permission() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ConsentResponse) SetPermission(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ConsentResponse) Zonename() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ConsentResponse) HasZonename() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ConsentResponse) ZonenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetZonename(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ConsentResponse_List is a list of ConsentResponse.
type ConsentResponse_List = capnp.StructList[ConsentResponse]

// NewConsentResponse creates a new list of ConsentResponse.
func NewConsentResponse_List(s *capnp.Segment, sz int32) (ConsentResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[ConsentResponse](l), err
}

// ConsentResponse_Future is a wrapper for a ConsentResponse promised by a client call.
type ConsentResponse_Future struct{ *capnp.Future }

func (f ConsentResponse_Future) Struct() (ConsentResponse, error) {
	p, err := f.Future.Ptr()
	return ConsentResponse(p.Struct()), err
}

type NameGeneration capnp.Struct

// NameGeneration_TypeID is the unique identifier for the type NameGeneration.
const NameGeneration_TypeID = 0xa984e49365524f14

func NewNameGeneration(s *capnp.Segment) (NameGeneration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameGeneration(st), err
}

func NewRootNameGeneration(s *capnp.Segment) (NameGeneration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameGeneration(st), err
}

func ReadRootNameGeneration(msg *capnp.Message) (NameGeneration, error) {
	root, err := msg.Root()
	return NameGeneration(root.Struct()), err
}

func (s NameGeneration) String() string {
	str, _ := text.Marshal(0xa984e49365524f14, capnp.Struct(s))
	return str
}

func (s NameGeneration) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NameGeneration) DecodeFromPtr(p capnp.Ptr) NameGeneration {
	return NameGeneration(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NameGeneration) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NameGeneration) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NameGeneration) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NameGeneration) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NameGeneration) Race() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NameGeneration) SetRace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NameGeneration) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NameGeneration) SetGender(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s NameGeneration) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NameGeneration) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NameGeneration) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NameGeneration) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// NameGeneration_List is a list of NameGeneration.
type NameGeneration_List = capnp.StructList[NameGeneration]

// NewNameGeneration creates a new list of NameGeneration.
func NewNameGeneration_List(s *capnp.Segment, sz int32) (NameGeneration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NameGeneration](l), err
}

// NameGeneration_Future is a wrapper for a NameGeneration promised by a client call.
type NameGeneration_Future struct{ *capnp.Future }

func (f NameGeneration_Future) Struct() (NameGeneration, error) {
	p, err := f.Future.Ptr()
	return NameGeneration(p.Struct()), err
}

type NameApprove capnp.Struct

// NameApprove_TypeID is the unique identifier for the type NameApprove.
const NameApprove_TypeID = 0xb8b4b6c6e1e52417

func NewNameApprove(s *capnp.Segment) (NameApprove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameApprove(st), err
}

func NewRootNameApprove(s *capnp.Segment) (NameApprove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameApprove(st), err
}

func ReadRootNameApprove(msg *capnp.Message) (NameApprove, error) {
	root, err := msg.Root()
	return NameApprove(root.Struct()), err
}

func (s NameApprove) String() string {
	str, _ := text.Marshal(0xb8b4b6c6e1e52417, capnp.Struct(s))
	return str
}

func (s NameApprove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NameApprove) DecodeFromPtr(p capnp.Ptr) NameApprove {
	return NameApprove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NameApprove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NameApprove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NameApprove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NameApprove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NameApprove) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NameApprove) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NameApprove) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NameApprove) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NameApprove) Race() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NameApprove) SetRace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NameApprove) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NameApprove) SetGender(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// NameApprove_List is a list of NameApprove.
type NameApprove_List = capnp.StructList[NameApprove]

// NewNameApprove creates a new list of NameApprove.
func NewNameApprove_List(s *capnp.Segment, sz int32) (NameApprove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NameApprove](l), err
}

// NameApprove_Future is a wrapper for a NameApprove promised by a client call.
type NameApprove_Future struct{ *capnp.Future }

func (f NameApprove_Future) Struct() (NameApprove, error) {
	p, err := f.Future.Ptr()
	return NameApprove(p.Struct()), err
}

type CharCreate capnp.Struct

// CharCreate_TypeID is the unique identifier for the type CharCreate.
const CharCreate_TypeID = 0xca688fde6bcd4bbd

func NewCharCreate(s *capnp.Segment) (CharCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return CharCreate(st), err
}

func NewRootCharCreate(s *capnp.Segment) (CharCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return CharCreate(st), err
}

func ReadRootCharCreate(msg *capnp.Message) (CharCreate, error) {
	root, err := msg.Root()
	return CharCreate(root.Struct()), err
}

func (s CharCreate) String() string {
	str, _ := text.Marshal(0xca688fde6bcd4bbd, capnp.Struct(s))
	return str
}

func (s CharCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CharCreate) DecodeFromPtr(p capnp.Ptr) CharCreate {
	return CharCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CharCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CharCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CharCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CharCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CharCreate) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CharCreate) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CharCreate) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CharCreate) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CharCreate) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CharCreate) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CharCreate) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CharCreate) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s CharCreate) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s CharCreate) SetGender(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s CharCreate) Race() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s CharCreate) SetRace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s CharCreate) StartZone() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s CharCreate) SetStartZone(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s CharCreate) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s CharCreate) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s CharCreate) Deity() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s CharCreate) SetDeity(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s CharCreate) Str() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s CharCreate) SetStr(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s CharCreate) Sta() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s CharCreate) SetSta(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s CharCreate) Agi() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s CharCreate) SetAgi(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s CharCreate) Dex() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s CharCreate) SetDex(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s CharCreate) Wis() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s CharCreate) SetWis(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s CharCreate) Intel() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s CharCreate) SetIntel(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s CharCreate) Cha() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s CharCreate) SetCha(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s CharCreate) Face() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s CharCreate) SetFace(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s CharCreate) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s CharCreate) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s CharCreate) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s CharCreate) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s CharCreate) Tutorial() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s CharCreate) SetTutorial(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s CharCreate) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CharCreate) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CharCreate) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CharCreate) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CharCreate_List is a list of CharCreate.
type CharCreate_List = capnp.StructList[CharCreate]

// NewCharCreate creates a new list of CharCreate.
func NewCharCreate_List(s *capnp.Segment, sz int32) (CharCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[CharCreate](l), err
}

// CharCreate_Future is a wrapper for a CharCreate promised by a client call.
type CharCreate_Future struct{ *capnp.Future }

func (f CharCreate_Future) Struct() (CharCreate, error) {
	p, err := f.Future.Ptr()
	return CharCreate(p.Struct()), err
}

type AAArray capnp.Struct

// AAArray_TypeID is the unique identifier for the type AAArray.
const AAArray_TypeID = 0xc5d32cc234a53620

func NewAAArray(s *capnp.Segment) (AAArray, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAArray(st), err
}

func NewRootAAArray(s *capnp.Segment) (AAArray, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAArray(st), err
}

func ReadRootAAArray(msg *capnp.Message) (AAArray, error) {
	root, err := msg.Root()
	return AAArray(root.Struct()), err
}

func (s AAArray) String() string {
	str, _ := text.Marshal(0xc5d32cc234a53620, capnp.Struct(s))
	return str
}

func (s AAArray) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAArray) DecodeFromPtr(p capnp.Ptr) AAArray {
	return AAArray(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAArray) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAArray) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAArray) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAArray) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAArray) Aa() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAArray) SetAa(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAArray) Value() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAArray) SetValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AAArray_List is a list of AAArray.
type AAArray_List = capnp.StructList[AAArray]

// NewAAArray creates a new list of AAArray.
func NewAAArray_List(s *capnp.Segment, sz int32) (AAArray_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AAArray](l), err
}

// AAArray_Future is a wrapper for a AAArray promised by a client call.
type AAArray_Future struct{ *capnp.Future }

func (f AAArray_Future) Struct() (AAArray, error) {
	p, err := f.Future.Ptr()
	return AAArray(p.Struct()), err
}

type Disciplines capnp.Struct

// Disciplines_TypeID is the unique identifier for the type Disciplines.
const Disciplines_TypeID = 0xdb811264e672b627

func NewDisciplines(s *capnp.Segment) (Disciplines, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Disciplines(st), err
}

func NewRootDisciplines(s *capnp.Segment) (Disciplines, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Disciplines(st), err
}

func ReadRootDisciplines(msg *capnp.Message) (Disciplines, error) {
	root, err := msg.Root()
	return Disciplines(root.Struct()), err
}

func (s Disciplines) String() string {
	str, _ := text.Marshal(0xdb811264e672b627, capnp.Struct(s))
	return str
}

func (s Disciplines) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Disciplines) DecodeFromPtr(p capnp.Ptr) Disciplines {
	return Disciplines(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Disciplines) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Disciplines) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Disciplines) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Disciplines) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Disciplines) Values() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Disciplines) HasValues() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Disciplines) SetValues(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValues sets the values field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Disciplines) NewValues(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Disciplines_List is a list of Disciplines.
type Disciplines_List = capnp.StructList[Disciplines]

// NewDisciplines creates a new list of Disciplines.
func NewDisciplines_List(s *capnp.Segment, sz int32) (Disciplines_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Disciplines](l), err
}

// Disciplines_Future is a wrapper for a Disciplines promised by a client call.
type Disciplines_Future struct{ *capnp.Future }

func (f Disciplines_Future) Struct() (Disciplines, error) {
	p, err := f.Future.Ptr()
	return Disciplines(p.Struct()), err
}

type Tribute capnp.Struct

// Tribute_TypeID is the unique identifier for the type Tribute.
const Tribute_TypeID = 0xe02474ef23d4f2bc

func NewTribute(s *capnp.Segment) (Tribute, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Tribute(st), err
}

func NewRootTribute(s *capnp.Segment) (Tribute, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Tribute(st), err
}

func ReadRootTribute(msg *capnp.Message) (Tribute, error) {
	root, err := msg.Root()
	return Tribute(root.Struct()), err
}

func (s Tribute) String() string {
	str, _ := text.Marshal(0xe02474ef23d4f2bc, capnp.Struct(s))
	return str
}

func (s Tribute) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tribute) DecodeFromPtr(p capnp.Ptr) Tribute {
	return Tribute(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tribute) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tribute) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tribute) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tribute) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tribute) Tribute() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Tribute) SetTribute(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Tribute) Tier() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Tribute) SetTier(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Tribute_List is a list of Tribute.
type Tribute_List = capnp.StructList[Tribute]

// NewTribute creates a new list of Tribute.
func NewTribute_List(s *capnp.Segment, sz int32) (Tribute_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Tribute](l), err
}

// Tribute_Future is a wrapper for a Tribute promised by a client call.
type Tribute_Future struct{ *capnp.Future }

func (f Tribute_Future) Struct() (Tribute, error) {
	p, err := f.Future.Ptr()
	return Tribute(p.Struct()), err
}

type BandolierItem capnp.Struct

// BandolierItem_TypeID is the unique identifier for the type BandolierItem.
const BandolierItem_TypeID = 0xd7e327183a76a4f8

func NewBandolierItem(s *capnp.Segment) (BandolierItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierItem(st), err
}

func NewRootBandolierItem(s *capnp.Segment) (BandolierItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierItem(st), err
}

func ReadRootBandolierItem(msg *capnp.Message) (BandolierItem, error) {
	root, err := msg.Root()
	return BandolierItem(root.Struct()), err
}

func (s BandolierItem) String() string {
	str, _ := text.Marshal(0xd7e327183a76a4f8, capnp.Struct(s))
	return str
}

func (s BandolierItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierItem) DecodeFromPtr(p capnp.Ptr) BandolierItem {
	return BandolierItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierItem) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierItem) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierItem) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierItem) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BandolierItem) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BandolierItem) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BandolierItem) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BandolierItem) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BandolierItem_List is a list of BandolierItem.
type BandolierItem_List = capnp.StructList[BandolierItem]

// NewBandolierItem creates a new list of BandolierItem.
func NewBandolierItem_List(s *capnp.Segment, sz int32) (BandolierItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BandolierItem](l), err
}

// BandolierItem_Future is a wrapper for a BandolierItem promised by a client call.
type BandolierItem_Future struct{ *capnp.Future }

func (f BandolierItem_Future) Struct() (BandolierItem, error) {
	p, err := f.Future.Ptr()
	return BandolierItem(p.Struct()), err
}

type Bandolier capnp.Struct

// Bandolier_TypeID is the unique identifier for the type Bandolier.
const Bandolier_TypeID = 0x81fa11546e952c02

func NewBandolier(s *capnp.Segment) (Bandolier, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Bandolier(st), err
}

func NewRootBandolier(s *capnp.Segment) (Bandolier, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Bandolier(st), err
}

func ReadRootBandolier(msg *capnp.Message) (Bandolier, error) {
	root, err := msg.Root()
	return Bandolier(root.Struct()), err
}

func (s Bandolier) String() string {
	str, _ := text.Marshal(0x81fa11546e952c02, capnp.Struct(s))
	return str
}

func (s Bandolier) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bandolier) DecodeFromPtr(p capnp.Ptr) Bandolier {
	return Bandolier(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bandolier) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bandolier) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bandolier) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bandolier) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bandolier) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Bandolier) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Bandolier) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Bandolier) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Bandolier) Items() (BandolierItem_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return BandolierItem_List(p.List()), err
}

func (s Bandolier) HasItems() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Bandolier) SetItems(v BandolierItem_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated BandolierItem_List, preferring placement in s's segment.
func (s Bandolier) NewItems(n int32) (BandolierItem_List, error) {
	l, err := NewBandolierItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return BandolierItem_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Bandolier_List is a list of Bandolier.
type Bandolier_List = capnp.StructList[Bandolier]

// NewBandolier creates a new list of Bandolier.
func NewBandolier_List(s *capnp.Segment, sz int32) (Bandolier_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Bandolier](l), err
}

// Bandolier_Future is a wrapper for a Bandolier promised by a client call.
type Bandolier_Future struct{ *capnp.Future }

func (f Bandolier_Future) Struct() (Bandolier, error) {
	p, err := f.Future.Ptr()
	return Bandolier(p.Struct()), err
}

type PotionBeltItem capnp.Struct

// PotionBeltItem_TypeID is the unique identifier for the type PotionBeltItem.
const PotionBeltItem_TypeID = 0xdcfcab864c34a056

func NewPotionBeltItem(s *capnp.Segment) (PotionBeltItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PotionBeltItem(st), err
}

func NewRootPotionBeltItem(s *capnp.Segment) (PotionBeltItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PotionBeltItem(st), err
}

func ReadRootPotionBeltItem(msg *capnp.Message) (PotionBeltItem, error) {
	root, err := msg.Root()
	return PotionBeltItem(root.Struct()), err
}

func (s PotionBeltItem) String() string {
	str, _ := text.Marshal(0xdcfcab864c34a056, capnp.Struct(s))
	return str
}

func (s PotionBeltItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PotionBeltItem) DecodeFromPtr(p capnp.Ptr) PotionBeltItem {
	return PotionBeltItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PotionBeltItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PotionBeltItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PotionBeltItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PotionBeltItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PotionBeltItem) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PotionBeltItem) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PotionBeltItem) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PotionBeltItem) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PotionBeltItem) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PotionBeltItem) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PotionBeltItem) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PotionBeltItem) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PotionBeltItem_List is a list of PotionBeltItem.
type PotionBeltItem_List = capnp.StructList[PotionBeltItem]

// NewPotionBeltItem creates a new list of PotionBeltItem.
func NewPotionBeltItem_List(s *capnp.Segment, sz int32) (PotionBeltItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PotionBeltItem](l), err
}

// PotionBeltItem_Future is a wrapper for a PotionBeltItem promised by a client call.
type PotionBeltItem_Future struct{ *capnp.Future }

func (f PotionBeltItem_Future) Struct() (PotionBeltItem, error) {
	p, err := f.Future.Ptr()
	return PotionBeltItem(p.Struct()), err
}

type PotionBelt capnp.Struct

// PotionBelt_TypeID is the unique identifier for the type PotionBelt.
const PotionBelt_TypeID = 0xce55ffdae06f694d

func NewPotionBelt(s *capnp.Segment) (PotionBelt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PotionBelt(st), err
}

func NewRootPotionBelt(s *capnp.Segment) (PotionBelt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PotionBelt(st), err
}

func ReadRootPotionBelt(msg *capnp.Message) (PotionBelt, error) {
	root, err := msg.Root()
	return PotionBelt(root.Struct()), err
}

func (s PotionBelt) String() string {
	str, _ := text.Marshal(0xce55ffdae06f694d, capnp.Struct(s))
	return str
}

func (s PotionBelt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PotionBelt) DecodeFromPtr(p capnp.Ptr) PotionBelt {
	return PotionBelt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PotionBelt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PotionBelt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PotionBelt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PotionBelt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PotionBelt) Items() (PotionBeltItem_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PotionBeltItem_List(p.List()), err
}

func (s PotionBelt) HasItems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PotionBelt) SetItems(v PotionBeltItem_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated PotionBeltItem_List, preferring placement in s's segment.
func (s PotionBelt) NewItems(n int32) (PotionBeltItem_List, error) {
	l, err := NewPotionBeltItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PotionBeltItem_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PotionBelt_List is a list of PotionBelt.
type PotionBelt_List = capnp.StructList[PotionBelt]

// NewPotionBelt creates a new list of PotionBelt.
func NewPotionBelt_List(s *capnp.Segment, sz int32) (PotionBelt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PotionBelt](l), err
}

// PotionBelt_Future is a wrapper for a PotionBelt promised by a client call.
type PotionBelt_Future struct{ *capnp.Future }

func (f PotionBelt_Future) Struct() (PotionBelt, error) {
	p, err := f.Future.Ptr()
	return PotionBelt(p.Struct()), err
}

type StringList capnp.Struct

// StringList_TypeID is the unique identifier for the type StringList.
const StringList_TypeID = 0xfc766ac7f0d6e4f5

func NewStringList(s *capnp.Segment) (StringList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringList(st), err
}

func NewRootStringList(s *capnp.Segment) (StringList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringList(st), err
}

func ReadRootStringList(msg *capnp.Message) (StringList, error) {
	root, err := msg.Root()
	return StringList(root.Struct()), err
}

func (s StringList) String() string {
	str, _ := text.Marshal(0xfc766ac7f0d6e4f5, capnp.Struct(s))
	return str
}

func (s StringList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StringList) DecodeFromPtr(p capnp.Ptr) StringList {
	return StringList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StringList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StringList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StringList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StringList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StringList) Str() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StringList) HasStr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StringList) StrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StringList) SetStr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StringList_List is a list of StringList.
type StringList_List = capnp.StructList[StringList]

// NewStringList creates a new list of StringList.
func NewStringList_List(s *capnp.Segment, sz int32) (StringList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StringList](l), err
}

// StringList_Future is a wrapper for a StringList promised by a client call.
type StringList_Future struct{ *capnp.Future }

func (f StringList_Future) Struct() (StringList, error) {
	p, err := f.Future.Ptr()
	return StringList(p.Struct()), err
}

type GroupLeadershipAA capnp.Struct

// GroupLeadershipAA_TypeID is the unique identifier for the type GroupLeadershipAA.
const GroupLeadershipAA_TypeID = 0xf418cd61a8543b3c

func NewGroupLeadershipAA(s *capnp.Segment) (GroupLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return GroupLeadershipAA(st), err
}

func NewRootGroupLeadershipAA(s *capnp.Segment) (GroupLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return GroupLeadershipAA(st), err
}

func ReadRootGroupLeadershipAA(msg *capnp.Message) (GroupLeadershipAA, error) {
	root, err := msg.Root()
	return GroupLeadershipAA(root.Struct()), err
}

func (s GroupLeadershipAA) String() string {
	str, _ := text.Marshal(0xf418cd61a8543b3c, capnp.Struct(s))
	return str
}

func (s GroupLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupLeadershipAA) DecodeFromPtr(p capnp.Ptr) GroupLeadershipAA {
	return GroupLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupLeadershipAA) GroupAaMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupLeadershipAA) SetGroupAaMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupLeadershipAA) GroupAanpcHealth() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GroupLeadershipAA) SetGroupAanpcHealth(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GroupLeadershipAA) GroupAaDelegateMainAssist() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GroupLeadershipAA) SetGroupAaDelegateMainAssist(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GroupLeadershipAA) GroupAaDelegateMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GroupLeadershipAA) SetGroupAaDelegateMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GroupLeadershipAA) GroupAa4() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GroupLeadershipAA) SetGroupAa4(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GroupLeadershipAA) GroupAa5() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GroupLeadershipAA) SetGroupAa5(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s GroupLeadershipAA) GroupAaInspectBuffs() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GroupLeadershipAA) SetGroupAaInspectBuffs(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GroupLeadershipAA) GroupAa7() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GroupLeadershipAA) SetGroupAa7(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GroupLeadershipAA) GroupAaSpellAwareness() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GroupLeadershipAA) SetGroupAaSpellAwareness(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s GroupLeadershipAA) GroupAaOffenseEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s GroupLeadershipAA) SetGroupAaOffenseEnhancement(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s GroupLeadershipAA) GroupAaManaEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s GroupLeadershipAA) SetGroupAaManaEnhancement(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s GroupLeadershipAA) SetGroupAaHealthEnhancement(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthRegeneration() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s GroupLeadershipAA) SetGroupAaHealthRegeneration(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s GroupLeadershipAA) GroupAaFindPathToPc() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s GroupLeadershipAA) SetGroupAaFindPathToPc(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthOfTargetsTarget() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s GroupLeadershipAA) SetGroupAaHealthOfTargetsTarget(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s GroupLeadershipAA) GroupAa15() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s GroupLeadershipAA) SetGroupAa15(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// GroupLeadershipAA_List is a list of GroupLeadershipAA.
type GroupLeadershipAA_List = capnp.StructList[GroupLeadershipAA]

// NewGroupLeadershipAA creates a new list of GroupLeadershipAA.
func NewGroupLeadershipAA_List(s *capnp.Segment, sz int32) (GroupLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[GroupLeadershipAA](l), err
}

// GroupLeadershipAA_Future is a wrapper for a GroupLeadershipAA promised by a client call.
type GroupLeadershipAA_Future struct{ *capnp.Future }

func (f GroupLeadershipAA_Future) Struct() (GroupLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return GroupLeadershipAA(p.Struct()), err
}

type RaidLeadershipAA capnp.Struct

// RaidLeadershipAA_TypeID is the unique identifier for the type RaidLeadershipAA.
const RaidLeadershipAA_TypeID = 0xbf5a2cc18c663351

func NewRaidLeadershipAA(s *capnp.Segment) (RaidLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return RaidLeadershipAA(st), err
}

func NewRootRaidLeadershipAA(s *capnp.Segment) (RaidLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return RaidLeadershipAA(st), err
}

func ReadRootRaidLeadershipAA(msg *capnp.Message) (RaidLeadershipAA, error) {
	root, err := msg.Root()
	return RaidLeadershipAA(root.Struct()), err
}

func (s RaidLeadershipAA) String() string {
	str, _ := text.Marshal(0xbf5a2cc18c663351, capnp.Struct(s))
	return str
}

func (s RaidLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidLeadershipAA) DecodeFromPtr(p capnp.Ptr) RaidLeadershipAA {
	return RaidLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidLeadershipAA) RaidAaMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidLeadershipAA) SetRaidAaMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidLeadershipAA) RaidAanpcHealth() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidLeadershipAA) SetRaidAanpcHealth(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidLeadershipAA) RaidAaDelegateMainAssist() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidLeadershipAA) SetRaidAaDelegateMainAssist(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RaidLeadershipAA) RaidAaDelegateMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RaidLeadershipAA) SetRaidAaDelegateMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RaidLeadershipAA) RaidAa4() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RaidLeadershipAA) SetRaidAa4(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RaidLeadershipAA) RaidAa5() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s RaidLeadershipAA) SetRaidAa5(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s RaidLeadershipAA) RaidAa6() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s RaidLeadershipAA) SetRaidAa6(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s RaidLeadershipAA) RaidAaSpellAwareness() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s RaidLeadershipAA) SetRaidAaSpellAwareness(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s RaidLeadershipAA) RaidAaOffenseEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s RaidLeadershipAA) SetRaidAaOffenseEnhancement(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s RaidLeadershipAA) RaidAaManaEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s RaidLeadershipAA) SetRaidAaManaEnhancement(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s RaidLeadershipAA) SetRaidAaHealthEnhancement(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthRegeneration() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s RaidLeadershipAA) SetRaidAaHealthRegeneration(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s RaidLeadershipAA) RaidAaFindPathToPc() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s RaidLeadershipAA) SetRaidAaFindPathToPc(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthOfTargetsTarget() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s RaidLeadershipAA) SetRaidAaHealthOfTargetsTarget(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s RaidLeadershipAA) RaidAa14() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s RaidLeadershipAA) SetRaidAa14(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s RaidLeadershipAA) RaidAa15() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s RaidLeadershipAA) SetRaidAa15(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// RaidLeadershipAA_List is a list of RaidLeadershipAA.
type RaidLeadershipAA_List = capnp.StructList[RaidLeadershipAA]

// NewRaidLeadershipAA creates a new list of RaidLeadershipAA.
func NewRaidLeadershipAA_List(s *capnp.Segment, sz int32) (RaidLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[RaidLeadershipAA](l), err
}

// RaidLeadershipAA_Future is a wrapper for a RaidLeadershipAA promised by a client call.
type RaidLeadershipAA_Future struct{ *capnp.Future }

func (f RaidLeadershipAA_Future) Struct() (RaidLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return RaidLeadershipAA(p.Struct()), err
}

type LeadershipAA capnp.Struct

// LeadershipAA_TypeID is the unique identifier for the type LeadershipAA.
const LeadershipAA_TypeID = 0xe5dcc4b159c002f4

func NewLeadershipAA(s *capnp.Segment) (LeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LeadershipAA(st), err
}

func NewRootLeadershipAA(s *capnp.Segment) (LeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LeadershipAA(st), err
}

func ReadRootLeadershipAA(msg *capnp.Message) (LeadershipAA, error) {
	root, err := msg.Root()
	return LeadershipAA(root.Struct()), err
}

func (s LeadershipAA) String() string {
	str, _ := text.Marshal(0xe5dcc4b159c002f4, capnp.Struct(s))
	return str
}

func (s LeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadershipAA) DecodeFromPtr(p capnp.Ptr) LeadershipAA {
	return LeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadershipAA) Group() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GroupLeadershipAA(p.Struct()), err
}

func (s LeadershipAA) HasGroup() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LeadershipAA) SetGroup(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGroup sets the group field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s LeadershipAA) NewGroup() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LeadershipAA) Raid() (RaidLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RaidLeadershipAA(p.Struct()), err
}

func (s LeadershipAA) HasRaid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LeadershipAA) SetRaid(v RaidLeadershipAA) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewRaid sets the raid field to a newly
// allocated RaidLeadershipAA struct, preferring placement in s's segment.
func (s LeadershipAA) NewRaid() (RaidLeadershipAA, error) {
	ss, err := NewRaidLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return RaidLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// LeadershipAA_List is a list of LeadershipAA.
type LeadershipAA_List = capnp.StructList[LeadershipAA]

// NewLeadershipAA creates a new list of LeadershipAA.
func NewLeadershipAA_List(s *capnp.Segment, sz int32) (LeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[LeadershipAA](l), err
}

// LeadershipAA_Future is a wrapper for a LeadershipAA promised by a client call.
type LeadershipAA_Future struct{ *capnp.Future }

func (f LeadershipAA_Future) Struct() (LeadershipAA, error) {
	p, err := f.Future.Ptr()
	return LeadershipAA(p.Struct()), err
}
func (p LeadershipAA_Future) Group() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(0, nil)}
}
func (p LeadershipAA_Future) Raid() RaidLeadershipAA_Future {
	return RaidLeadershipAA_Future{Future: p.Future.Field(1, nil)}
}

type Bind capnp.Struct

// Bind_TypeID is the unique identifier for the type Bind.
const Bind_TypeID = 0xf1e3711cde8fa324

func NewBind(s *capnp.Segment) (Bind, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Bind(st), err
}

func NewRootBind(s *capnp.Segment) (Bind, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Bind(st), err
}

func ReadRootBind(msg *capnp.Message) (Bind, error) {
	root, err := msg.Root()
	return Bind(root.Struct()), err
}

func (s Bind) String() string {
	str, _ := text.Marshal(0xf1e3711cde8fa324, capnp.Struct(s))
	return str
}

func (s Bind) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bind) DecodeFromPtr(p capnp.Ptr) Bind {
	return Bind(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bind) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bind) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bind) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bind) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bind) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Bind) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Bind) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Bind) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Bind) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Bind) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Bind) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Bind) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Bind) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Bind) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

// Bind_List is a list of Bind.
type Bind_List = capnp.StructList[Bind]

// NewBind creates a new list of Bind.
func NewBind_List(s *capnp.Segment, sz int32) (Bind_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Bind](l), err
}

// Bind_Future is a wrapper for a Bind promised by a client call.
type Bind_Future struct{ *capnp.Future }

func (f Bind_Future) Struct() (Bind, error) {
	p, err := f.Future.Ptr()
	return Bind(p.Struct()), err
}

type PVPStatsEntry capnp.Struct

// PVPStatsEntry_TypeID is the unique identifier for the type PVPStatsEntry.
const PVPStatsEntry_TypeID = 0x9ca1849ea58c8bdb

func NewPVPStatsEntry(s *capnp.Segment) (PVPStatsEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PVPStatsEntry(st), err
}

func NewRootPVPStatsEntry(s *capnp.Segment) (PVPStatsEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PVPStatsEntry(st), err
}

func ReadRootPVPStatsEntry(msg *capnp.Message) (PVPStatsEntry, error) {
	root, err := msg.Root()
	return PVPStatsEntry(root.Struct()), err
}

func (s PVPStatsEntry) String() string {
	str, _ := text.Marshal(0x9ca1849ea58c8bdb, capnp.Struct(s))
	return str
}

func (s PVPStatsEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PVPStatsEntry) DecodeFromPtr(p capnp.Ptr) PVPStatsEntry {
	return PVPStatsEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PVPStatsEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PVPStatsEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PVPStatsEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PVPStatsEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PVPStatsEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PVPStatsEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PVPStatsEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PVPStatsEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PVPStatsEntry) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PVPStatsEntry) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PVPStatsEntry) Race() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PVPStatsEntry) SetRace(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PVPStatsEntry) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PVPStatsEntry) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PVPStatsEntry) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PVPStatsEntry) SetZone(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PVPStatsEntry) Time() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PVPStatsEntry) SetTime(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PVPStatsEntry) Points() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s PVPStatsEntry) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// PVPStatsEntry_List is a list of PVPStatsEntry.
type PVPStatsEntry_List = capnp.StructList[PVPStatsEntry]

// NewPVPStatsEntry creates a new list of PVPStatsEntry.
func NewPVPStatsEntry_List(s *capnp.Segment, sz int32) (PVPStatsEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[PVPStatsEntry](l), err
}

// PVPStatsEntry_Future is a wrapper for a PVPStatsEntry promised by a client call.
type PVPStatsEntry_Future struct{ *capnp.Future }

func (f PVPStatsEntry_Future) Struct() (PVPStatsEntry, error) {
	p, err := f.Future.Ptr()
	return PVPStatsEntry(p.Struct()), err
}

type ClientTarget capnp.Struct

// ClientTarget_TypeID is the unique identifier for the type ClientTarget.
const ClientTarget_TypeID = 0xa1914008041e7c44

func NewClientTarget(s *capnp.Segment) (ClientTarget, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClientTarget(st), err
}

func NewRootClientTarget(s *capnp.Segment) (ClientTarget, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClientTarget(st), err
}

func ReadRootClientTarget(msg *capnp.Message) (ClientTarget, error) {
	root, err := msg.Root()
	return ClientTarget(root.Struct()), err
}

func (s ClientTarget) String() string {
	str, _ := text.Marshal(0xa1914008041e7c44, capnp.Struct(s))
	return str
}

func (s ClientTarget) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientTarget) DecodeFromPtr(p capnp.Ptr) ClientTarget {
	return ClientTarget(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientTarget) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientTarget) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientTarget) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientTarget) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientTarget) NewTarget() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClientTarget) SetNewTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ClientTarget_List is a list of ClientTarget.
type ClientTarget_List = capnp.StructList[ClientTarget]

// NewClientTarget creates a new list of ClientTarget.
func NewClientTarget_List(s *capnp.Segment, sz int32) (ClientTarget_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ClientTarget](l), err
}

// ClientTarget_Future is a wrapper for a ClientTarget promised by a client call.
type ClientTarget_Future struct{ *capnp.Future }

func (f ClientTarget_Future) Struct() (ClientTarget, error) {
	p, err := f.Future.Ptr()
	return ClientTarget(p.Struct()), err
}

type PetCommand capnp.Struct

// PetCommand_TypeID is the unique identifier for the type PetCommand.
const PetCommand_TypeID = 0xa3f9826addd42d0d

func NewPetCommand(s *capnp.Segment) (PetCommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PetCommand(st), err
}

func NewRootPetCommand(s *capnp.Segment) (PetCommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PetCommand(st), err
}

func ReadRootPetCommand(msg *capnp.Message) (PetCommand, error) {
	root, err := msg.Root()
	return PetCommand(root.Struct()), err
}

func (s PetCommand) String() string {
	str, _ := text.Marshal(0xa3f9826addd42d0d, capnp.Struct(s))
	return str
}

func (s PetCommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PetCommand) DecodeFromPtr(p capnp.Ptr) PetCommand {
	return PetCommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PetCommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PetCommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PetCommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PetCommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PetCommand) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PetCommand) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PetCommand) Target() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PetCommand) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// PetCommand_List is a list of PetCommand.
type PetCommand_List = capnp.StructList[PetCommand]

// NewPetCommand creates a new list of PetCommand.
func NewPetCommand_List(s *capnp.Segment, sz int32) (PetCommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[PetCommand](l), err
}

// PetCommand_Future is a wrapper for a PetCommand promised by a client call.
type PetCommand_Future struct{ *capnp.Future }

func (f PetCommand_Future) Struct() (PetCommand, error) {
	p, err := f.Future.Ptr()
	return PetCommand(p.Struct()), err
}

type DeleteSpawn capnp.Struct

// DeleteSpawn_TypeID is the unique identifier for the type DeleteSpawn.
const DeleteSpawn_TypeID = 0xaf015f84859d0028

func NewDeleteSpawn(s *capnp.Segment) (DeleteSpawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpawn(st), err
}

func NewRootDeleteSpawn(s *capnp.Segment) (DeleteSpawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpawn(st), err
}

func ReadRootDeleteSpawn(msg *capnp.Message) (DeleteSpawn, error) {
	root, err := msg.Root()
	return DeleteSpawn(root.Struct()), err
}

func (s DeleteSpawn) String() string {
	str, _ := text.Marshal(0xaf015f84859d0028, capnp.Struct(s))
	return str
}

func (s DeleteSpawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteSpawn) DecodeFromPtr(p capnp.Ptr) DeleteSpawn {
	return DeleteSpawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteSpawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteSpawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteSpawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteSpawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteSpawn) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteSpawn) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// DeleteSpawn_List is a list of DeleteSpawn.
type DeleteSpawn_List = capnp.StructList[DeleteSpawn]

// NewDeleteSpawn creates a new list of DeleteSpawn.
func NewDeleteSpawn_List(s *capnp.Segment, sz int32) (DeleteSpawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DeleteSpawn](l), err
}

// DeleteSpawn_Future is a wrapper for a DeleteSpawn promised by a client call.
type DeleteSpawn_Future struct{ *capnp.Future }

func (f DeleteSpawn_Future) Struct() (DeleteSpawn, error) {
	p, err := f.Future.Ptr()
	return DeleteSpawn(p.Struct()), err
}

type ChannelMessage capnp.Struct

// ChannelMessage_TypeID is the unique identifier for the type ChannelMessage.
const ChannelMessage_TypeID = 0xa23c8c68e3798bb0

func NewChannelMessage(s *capnp.Segment) (ChannelMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return ChannelMessage(st), err
}

func NewRootChannelMessage(s *capnp.Segment) (ChannelMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return ChannelMessage(st), err
}

func ReadRootChannelMessage(msg *capnp.Message) (ChannelMessage, error) {
	root, err := msg.Root()
	return ChannelMessage(root.Struct()), err
}

func (s ChannelMessage) String() string {
	str, _ := text.Marshal(0xa23c8c68e3798bb0, capnp.Struct(s))
	return str
}

func (s ChannelMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChannelMessage) DecodeFromPtr(p capnp.Ptr) ChannelMessage {
	return ChannelMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChannelMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChannelMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChannelMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChannelMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChannelMessage) Targetname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChannelMessage) HasTargetname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChannelMessage) TargetnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetTargetname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ChannelMessage) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ChannelMessage) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ChannelMessage) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ChannelMessage) Language() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ChannelMessage) SetLanguage(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ChannelMessage) ChanNum() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ChannelMessage) SetChanNum(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ChannelMessage) SkillInLanguage() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ChannelMessage) SetSkillInLanguage(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ChannelMessage) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ChannelMessage) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ChannelMessage) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ChannelMessage_List is a list of ChannelMessage.
type ChannelMessage_List = capnp.StructList[ChannelMessage]

// NewChannelMessage creates a new list of ChannelMessage.
func NewChannelMessage_List(s *capnp.Segment, sz int32) (ChannelMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[ChannelMessage](l), err
}

// ChannelMessage_Future is a wrapper for a ChannelMessage promised by a client call.
type ChannelMessage_Future struct{ *capnp.Future }

func (f ChannelMessage_Future) Struct() (ChannelMessage, error) {
	p, err := f.Future.Ptr()
	return ChannelMessage(p.Struct()), err
}

type SpecialMesg capnp.Struct

// SpecialMesg_TypeID is the unique identifier for the type SpecialMesg.
const SpecialMesg_TypeID = 0xe0b0d21d1219b48c

func NewSpecialMesg(s *capnp.Segment) (SpecialMesg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SpecialMesg(st), err
}

func NewRootSpecialMesg(s *capnp.Segment) (SpecialMesg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SpecialMesg(st), err
}

func ReadRootSpecialMesg(msg *capnp.Message) (SpecialMesg, error) {
	root, err := msg.Root()
	return SpecialMesg(root.Struct()), err
}

func (s SpecialMesg) String() string {
	str, _ := text.Marshal(0xe0b0d21d1219b48c, capnp.Struct(s))
	return str
}

func (s SpecialMesg) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpecialMesg) DecodeFromPtr(p capnp.Ptr) SpecialMesg {
	return SpecialMesg(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpecialMesg) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpecialMesg) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpecialMesg) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpecialMesg) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpecialMesg) Header() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SpecialMesg) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpecialMesg) HeaderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetHeader(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SpecialMesg) MsgType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpecialMesg) SetMsgType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpecialMesg) TargetSpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpecialMesg) SetTargetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpecialMesg) Sayer() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SpecialMesg) HasSayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SpecialMesg) SayerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetSayer(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SpecialMesg) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SpecialMesg) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SpecialMesg) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// SpecialMesg_List is a list of SpecialMesg.
type SpecialMesg_List = capnp.StructList[SpecialMesg]

// NewSpecialMesg creates a new list of SpecialMesg.
func NewSpecialMesg_List(s *capnp.Segment, sz int32) (SpecialMesg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[SpecialMesg](l), err
}

// SpecialMesg_Future is a wrapper for a SpecialMesg promised by a client call.
type SpecialMesg_Future struct{ *capnp.Future }

func (f SpecialMesg_Future) Struct() (SpecialMesg, error) {
	p, err := f.Future.Ptr()
	return SpecialMesg(p.Struct()), err
}

type WearChange capnp.Struct

// WearChange_TypeID is the unique identifier for the type WearChange.
const WearChange_TypeID = 0x9fd8d08daae7794b

func NewWearChange(s *capnp.Segment) (WearChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return WearChange(st), err
}

func NewRootWearChange(s *capnp.Segment) (WearChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return WearChange(st), err
}

func ReadRootWearChange(msg *capnp.Message) (WearChange, error) {
	root, err := msg.Root()
	return WearChange(root.Struct()), err
}

func (s WearChange) String() string {
	str, _ := text.Marshal(0x9fd8d08daae7794b, capnp.Struct(s))
	return str
}

func (s WearChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WearChange) DecodeFromPtr(p capnp.Ptr) WearChange {
	return WearChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WearChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WearChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WearChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WearChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WearChange) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WearChange) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WearChange) Material() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WearChange) SetMaterial(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WearChange) Color() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WearChange) SetColor(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WearChange) WearSlotId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WearChange) SetWearSlotId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// WearChange_List is a list of WearChange.
type WearChange_List = capnp.StructList[WearChange]

// NewWearChange creates a new list of WearChange.
func NewWearChange_List(s *capnp.Segment, sz int32) (WearChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[WearChange](l), err
}

// WearChange_Future is a wrapper for a WearChange promised by a client call.
type WearChange_Future struct{ *capnp.Future }

func (f WearChange_Future) Struct() (WearChange, error) {
	p, err := f.Future.Ptr()
	return WearChange(p.Struct()), err
}

type BindWound capnp.Struct

// BindWound_TypeID is the unique identifier for the type BindWound.
const BindWound_TypeID = 0x9d8709f225285c2e

func NewBindWound(s *capnp.Segment) (BindWound, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BindWound(st), err
}

func NewRootBindWound(s *capnp.Segment) (BindWound, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BindWound(st), err
}

func ReadRootBindWound(msg *capnp.Message) (BindWound, error) {
	root, err := msg.Root()
	return BindWound(root.Struct()), err
}

func (s BindWound) String() string {
	str, _ := text.Marshal(0x9d8709f225285c2e, capnp.Struct(s))
	return str
}

func (s BindWound) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BindWound) DecodeFromPtr(p capnp.Ptr) BindWound {
	return BindWound(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BindWound) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BindWound) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BindWound) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BindWound) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BindWound) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BindWound) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BindWound) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BindWound) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BindWound_List is a list of BindWound.
type BindWound_List = capnp.StructList[BindWound]

// NewBindWound creates a new list of BindWound.
func NewBindWound_List(s *capnp.Segment, sz int32) (BindWound_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BindWound](l), err
}

// BindWound_Future is a wrapper for a BindWound promised by a client call.
type BindWound_Future struct{ *capnp.Future }

func (f BindWound_Future) Struct() (BindWound, error) {
	p, err := f.Future.Ptr()
	return BindWound(p.Struct()), err
}

type Animation capnp.Struct

// Animation_TypeID is the unique identifier for the type Animation.
const Animation_TypeID = 0xfe931b1705a8e8a8

func NewAnimation(s *capnp.Segment) (Animation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Animation(st), err
}

func NewRootAnimation(s *capnp.Segment) (Animation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Animation(st), err
}

func ReadRootAnimation(msg *capnp.Message) (Animation, error) {
	root, err := msg.Root()
	return Animation(root.Struct()), err
}

func (s Animation) String() string {
	str, _ := text.Marshal(0xfe931b1705a8e8a8, capnp.Struct(s))
	return str
}

func (s Animation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Animation) DecodeFromPtr(p capnp.Ptr) Animation {
	return Animation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Animation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Animation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Animation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Animation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Animation) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Animation) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Animation) Speed() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Animation) SetSpeed(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Animation) Action() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Animation) SetAction(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Animation_List is a list of Animation.
type Animation_List = capnp.StructList[Animation]

// NewAnimation creates a new list of Animation.
func NewAnimation_List(s *capnp.Segment, sz int32) (Animation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Animation](l), err
}

// Animation_Future is a wrapper for a Animation promised by a client call.
type Animation_Future struct{ *capnp.Future }

func (f Animation_Future) Struct() (Animation, error) {
	p, err := f.Future.Ptr()
	return Animation(p.Struct()), err
}

type Action capnp.Struct

// Action_TypeID is the unique identifier for the type Action.
const Action_TypeID = 0x95ca47192b7d5b43

func NewAction(s *capnp.Segment) (Action, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return Action(st), err
}

func NewRootAction(s *capnp.Segment) (Action, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return Action(st), err
}

func ReadRootAction(msg *capnp.Message) (Action, error) {
	root, err := msg.Root()
	return Action(root.Struct()), err
}

func (s Action) String() string {
	str, _ := text.Marshal(0x95ca47192b7d5b43, capnp.Struct(s))
	return str
}

func (s Action) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Action) DecodeFromPtr(p capnp.Ptr) Action {
	return Action(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Action) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Action) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Action) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Action) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Action) Target() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Action) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Action) Source() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Action) SetSource(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Action) Level() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Action) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Action) InstrumentMod() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Action) SetInstrumentMod(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Action) Force() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Action) SetForce(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Action) HitHeading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Action) SetHitHeading(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Action) HitPitch() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Action) SetHitPitch(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Action) Type() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Action) SetType(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Action) Spell() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Action) SetSpell(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Action) SpellLevel() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Action) SetSpellLevel(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Action) EffectFlag() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Action) SetEffectFlag(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

// Action_List is a list of Action.
type Action_List = capnp.StructList[Action]

// NewAction creates a new list of Action.
func NewAction_List(s *capnp.Segment, sz int32) (Action_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0}, sz)
	return capnp.StructList[Action](l), err
}

// Action_Future is a wrapper for a Action promised by a client call.
type Action_Future struct{ *capnp.Future }

func (f Action_Future) Struct() (Action, error) {
	p, err := f.Future.Ptr()
	return Action(p.Struct()), err
}

type CombatDamage capnp.Struct

// CombatDamage_TypeID is the unique identifier for the type CombatDamage.
const CombatDamage_TypeID = 0xbcba10c194c8e450

func NewCombatDamage(s *capnp.Segment) (CombatDamage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return CombatDamage(st), err
}

func NewRootCombatDamage(s *capnp.Segment) (CombatDamage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return CombatDamage(st), err
}

func ReadRootCombatDamage(msg *capnp.Message) (CombatDamage, error) {
	root, err := msg.Root()
	return CombatDamage(root.Struct()), err
}

func (s CombatDamage) String() string {
	str, _ := text.Marshal(0xbcba10c194c8e450, capnp.Struct(s))
	return str
}

func (s CombatDamage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CombatDamage) DecodeFromPtr(p capnp.Ptr) CombatDamage {
	return CombatDamage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CombatDamage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CombatDamage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CombatDamage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CombatDamage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CombatDamage) Target() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CombatDamage) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CombatDamage) Source() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CombatDamage) SetSource(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CombatDamage) Type() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CombatDamage) SetType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CombatDamage) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CombatDamage) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s CombatDamage) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s CombatDamage) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s CombatDamage) Force() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s CombatDamage) SetForce(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s CombatDamage) HitHeading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s CombatDamage) SetHitHeading(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s CombatDamage) HitPitch() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s CombatDamage) SetHitPitch(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

// CombatDamage_List is a list of CombatDamage.
type CombatDamage_List = capnp.StructList[CombatDamage]

// NewCombatDamage creates a new list of CombatDamage.
func NewCombatDamage_List(s *capnp.Segment, sz int32) (CombatDamage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[CombatDamage](l), err
}

// CombatDamage_Future is a wrapper for a CombatDamage promised by a client call.
type CombatDamage_Future struct{ *capnp.Future }

func (f CombatDamage_Future) Struct() (CombatDamage, error) {
	p, err := f.Future.Ptr()
	return CombatDamage(p.Struct()), err
}

type Consider capnp.Struct

// Consider_TypeID is the unique identifier for the type Consider.
const Consider_TypeID = 0xecbd91cdb76d6a28

func NewConsider(s *capnp.Segment) (Consider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Consider(st), err
}

func NewRootConsider(s *capnp.Segment) (Consider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Consider(st), err
}

func ReadRootConsider(msg *capnp.Message) (Consider, error) {
	root, err := msg.Root()
	return Consider(root.Struct()), err
}

func (s Consider) String() string {
	str, _ := text.Marshal(0xecbd91cdb76d6a28, capnp.Struct(s))
	return str
}

func (s Consider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consider) DecodeFromPtr(p capnp.Ptr) Consider {
	return Consider(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consider) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consider) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consider) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consider) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consider) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Consider) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Consider) Targetid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Consider) SetTargetid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Consider) Faction() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Consider) SetFaction(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Consider) Level() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Consider) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Consider) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Consider) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Consider) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Consider) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Consider) Pvpcon() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Consider) SetPvpcon(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Consider_List is a list of Consider.
type Consider_List = capnp.StructList[Consider]

// NewConsider creates a new list of Consider.
func NewConsider_List(s *capnp.Segment, sz int32) (Consider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[Consider](l), err
}

// Consider_Future is a wrapper for a Consider promised by a client call.
type Consider_Future struct{ *capnp.Future }

func (f Consider_Future) Struct() (Consider, error) {
	p, err := f.Future.Ptr()
	return Consider(p.Struct()), err
}

type Death capnp.Struct

// Death_TypeID is the unique identifier for the type Death.
const Death_TypeID = 0xae8dab9506472d1d

func NewDeath(s *capnp.Segment) (Death, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Death(st), err
}

func NewRootDeath(s *capnp.Segment) (Death, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Death(st), err
}

func ReadRootDeath(msg *capnp.Message) (Death, error) {
	root, err := msg.Root()
	return Death(root.Struct()), err
}

func (s Death) String() string {
	str, _ := text.Marshal(0xae8dab9506472d1d, capnp.Struct(s))
	return str
}

func (s Death) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Death) DecodeFromPtr(p capnp.Ptr) Death {
	return Death(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Death) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Death) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Death) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Death) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Death) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Death) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Death) KillerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Death) SetKillerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Death) Corpseid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Death) SetCorpseid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Death) AttackSkill() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Death) SetAttackSkill(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Death) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Death) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Death) Bindzoneid() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Death) SetBindzoneid(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Death) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Death) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Death_List is a list of Death.
type Death_List = capnp.StructList[Death]

// NewDeath creates a new list of Death.
func NewDeath_List(s *capnp.Segment, sz int32) (Death_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[Death](l), err
}

// Death_Future is a wrapper for a Death promised by a client call.
type Death_Future struct{ *capnp.Future }

func (f Death_Future) Struct() (Death, error) {
	p, err := f.Future.Ptr()
	return Death(p.Struct()), err
}

type BecomeCorpse capnp.Struct

// BecomeCorpse_TypeID is the unique identifier for the type BecomeCorpse.
const BecomeCorpse_TypeID = 0xd5ad818067cc16e7

func NewBecomeCorpse(s *capnp.Segment) (BecomeCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BecomeCorpse(st), err
}

func NewRootBecomeCorpse(s *capnp.Segment) (BecomeCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BecomeCorpse(st), err
}

func ReadRootBecomeCorpse(msg *capnp.Message) (BecomeCorpse, error) {
	root, err := msg.Root()
	return BecomeCorpse(root.Struct()), err
}

func (s BecomeCorpse) String() string {
	str, _ := text.Marshal(0xd5ad818067cc16e7, capnp.Struct(s))
	return str
}

func (s BecomeCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeCorpse) DecodeFromPtr(p capnp.Ptr) BecomeCorpse {
	return BecomeCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeCorpse) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeCorpse) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeCorpse) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s BecomeCorpse) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s BecomeCorpse) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s BecomeCorpse) SetX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s BecomeCorpse) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s BecomeCorpse) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// BecomeCorpse_List is a list of BecomeCorpse.
type BecomeCorpse_List = capnp.StructList[BecomeCorpse]

// NewBecomeCorpse creates a new list of BecomeCorpse.
func NewBecomeCorpse_List(s *capnp.Segment, sz int32) (BecomeCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[BecomeCorpse](l), err
}

// BecomeCorpse_Future is a wrapper for a BecomeCorpse promised by a client call.
type BecomeCorpse_Future struct{ *capnp.Future }

func (f BecomeCorpse_Future) Struct() (BecomeCorpse, error) {
	p, err := f.Future.Ptr()
	return BecomeCorpse(p.Struct()), err
}

type EntityPositionUpdateBase capnp.Struct

// EntityPositionUpdateBase_TypeID is the unique identifier for the type EntityPositionUpdateBase.
const EntityPositionUpdateBase_TypeID = 0xa51c9c2dfa1a6cca

func NewEntityPositionUpdateBase(s *capnp.Segment) (EntityPositionUpdateBase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return EntityPositionUpdateBase(st), err
}

func NewRootEntityPositionUpdateBase(s *capnp.Segment) (EntityPositionUpdateBase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return EntityPositionUpdateBase(st), err
}

func ReadRootEntityPositionUpdateBase(msg *capnp.Message) (EntityPositionUpdateBase, error) {
	root, err := msg.Root()
	return EntityPositionUpdateBase(root.Struct()), err
}

func (s EntityPositionUpdateBase) String() string {
	str, _ := text.Marshal(0xa51c9c2dfa1a6cca, capnp.Struct(s))
	return str
}

func (s EntityPositionUpdateBase) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityPositionUpdateBase) DecodeFromPtr(p capnp.Ptr) EntityPositionUpdateBase {
	return EntityPositionUpdateBase(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityPositionUpdateBase) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityPositionUpdateBase) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityPositionUpdateBase) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityPositionUpdateBase) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityPositionUpdateBase) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EntityPositionUpdateBase) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EntityPositionUpdateBase) Position() (Vector3, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Vector3(p.Struct()), err
}

func (s EntityPositionUpdateBase) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityPositionUpdateBase) SetPosition(v Vector3) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated Vector3 struct, preferring placement in s's segment.
func (s EntityPositionUpdateBase) NewPosition() (Vector3, error) {
	ss, err := NewVector3(capnp.Struct(s).Segment())
	if err != nil {
		return Vector3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntityPositionUpdateBase) Velocity() (Vector3, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Vector3(p.Struct()), err
}

func (s EntityPositionUpdateBase) HasVelocity() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EntityPositionUpdateBase) SetVelocity(v Vector3) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewVelocity sets the velocity field to a newly
// allocated Vector3 struct, preferring placement in s's segment.
func (s EntityPositionUpdateBase) NewVelocity() (Vector3, error) {
	ss, err := NewVector3(capnp.Struct(s).Segment())
	if err != nil {
		return Vector3{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EntityPositionUpdateBase) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s EntityPositionUpdateBase) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s EntityPositionUpdateBase) Animation() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s EntityPositionUpdateBase) HasAnimation() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s EntityPositionUpdateBase) AnimationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s EntityPositionUpdateBase) SetAnimation(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// EntityPositionUpdateBase_List is a list of EntityPositionUpdateBase.
type EntityPositionUpdateBase_List = capnp.StructList[EntityPositionUpdateBase]

// NewEntityPositionUpdateBase creates a new list of EntityPositionUpdateBase.
func NewEntityPositionUpdateBase_List(s *capnp.Segment, sz int32) (EntityPositionUpdateBase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[EntityPositionUpdateBase](l), err
}

// EntityPositionUpdateBase_Future is a wrapper for a EntityPositionUpdateBase promised by a client call.
type EntityPositionUpdateBase_Future struct{ *capnp.Future }

func (f EntityPositionUpdateBase_Future) Struct() (EntityPositionUpdateBase, error) {
	p, err := f.Future.Ptr()
	return EntityPositionUpdateBase(p.Struct()), err
}
func (p EntityPositionUpdateBase_Future) Position() Vector3_Future {
	return Vector3_Future{Future: p.Future.Field(0, nil)}
}
func (p EntityPositionUpdateBase_Future) Velocity() Vector3_Future {
	return Vector3_Future{Future: p.Future.Field(1, nil)}
}

type EntityPositionUpdate capnp.Struct

// EntityPositionUpdate_TypeID is the unique identifier for the type EntityPositionUpdate.
const EntityPositionUpdate_TypeID = 0x93bff6bb5eecbc2a

func NewEntityPositionUpdate(s *capnp.Segment) (EntityPositionUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EntityPositionUpdate(st), err
}

func NewRootEntityPositionUpdate(s *capnp.Segment) (EntityPositionUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EntityPositionUpdate(st), err
}

func ReadRootEntityPositionUpdate(msg *capnp.Message) (EntityPositionUpdate, error) {
	root, err := msg.Root()
	return EntityPositionUpdate(root.Struct()), err
}

func (s EntityPositionUpdate) String() string {
	str, _ := text.Marshal(0x93bff6bb5eecbc2a, capnp.Struct(s))
	return str
}

func (s EntityPositionUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityPositionUpdate) DecodeFromPtr(p capnp.Ptr) EntityPositionUpdate {
	return EntityPositionUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityPositionUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityPositionUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityPositionUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityPositionUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityPositionUpdate) Updates() (EntityPositionUpdateBase_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EntityPositionUpdateBase_List(p.List()), err
}

func (s EntityPositionUpdate) HasUpdates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityPositionUpdate) SetUpdates(v EntityPositionUpdateBase_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUpdates sets the updates field to a newly
// allocated EntityPositionUpdateBase_List, preferring placement in s's segment.
func (s EntityPositionUpdate) NewUpdates(n int32) (EntityPositionUpdateBase_List, error) {
	l, err := NewEntityPositionUpdateBase_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EntityPositionUpdateBase_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// EntityPositionUpdate_List is a list of EntityPositionUpdate.
type EntityPositionUpdate_List = capnp.StructList[EntityPositionUpdate]

// NewEntityPositionUpdate creates a new list of EntityPositionUpdate.
func NewEntityPositionUpdate_List(s *capnp.Segment, sz int32) (EntityPositionUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EntityPositionUpdate](l), err
}

// EntityPositionUpdate_Future is a wrapper for a EntityPositionUpdate promised by a client call.
type EntityPositionUpdate_Future struct{ *capnp.Future }

func (f EntityPositionUpdate_Future) Struct() (EntityPositionUpdate, error) {
	p, err := f.Future.Ptr()
	return EntityPositionUpdate(p.Struct()), err
}

type EntityAnimation capnp.Struct

// EntityAnimation_TypeID is the unique identifier for the type EntityAnimation.
const EntityAnimation_TypeID = 0xdf6175fbc7aa8195

func NewEntityAnimation(s *capnp.Segment) (EntityAnimation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EntityAnimation(st), err
}

func NewRootEntityAnimation(s *capnp.Segment) (EntityAnimation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EntityAnimation(st), err
}

func ReadRootEntityAnimation(msg *capnp.Message) (EntityAnimation, error) {
	root, err := msg.Root()
	return EntityAnimation(root.Struct()), err
}

func (s EntityAnimation) String() string {
	str, _ := text.Marshal(0xdf6175fbc7aa8195, capnp.Struct(s))
	return str
}

func (s EntityAnimation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityAnimation) DecodeFromPtr(p capnp.Ptr) EntityAnimation {
	return EntityAnimation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityAnimation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityAnimation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityAnimation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityAnimation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityAnimation) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EntityAnimation) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EntityAnimation) Animation() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EntityAnimation) HasAnimation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntityAnimation) AnimationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EntityAnimation) SetAnimation(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// EntityAnimation_List is a list of EntityAnimation.
type EntityAnimation_List = capnp.StructList[EntityAnimation]

// NewEntityAnimation creates a new list of EntityAnimation.
func NewEntityAnimation_List(s *capnp.Segment, sz int32) (EntityAnimation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[EntityAnimation](l), err
}

// EntityAnimation_Future is a wrapper for a EntityAnimation promised by a client call.
type EntityAnimation_Future struct{ *capnp.Future }

func (f EntityAnimation_Future) Struct() (EntityAnimation, error) {
	p, err := f.Future.Ptr()
	return EntityAnimation(p.Struct()), err
}

type ClientPositionUpdate capnp.Struct

// ClientPositionUpdate_TypeID is the unique identifier for the type ClientPositionUpdate.
const ClientPositionUpdate_TypeID = 0x971031099b134c74

func NewClientPositionUpdate(s *capnp.Segment) (ClientPositionUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClientPositionUpdate(st), err
}

func NewRootClientPositionUpdate(s *capnp.Segment) (ClientPositionUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClientPositionUpdate(st), err
}

func ReadRootClientPositionUpdate(msg *capnp.Message) (ClientPositionUpdate, error) {
	root, err := msg.Root()
	return ClientPositionUpdate(root.Struct()), err
}

func (s ClientPositionUpdate) String() string {
	str, _ := text.Marshal(0x971031099b134c74, capnp.Struct(s))
	return str
}

func (s ClientPositionUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientPositionUpdate) DecodeFromPtr(p capnp.Ptr) ClientPositionUpdate {
	return ClientPositionUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientPositionUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientPositionUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientPositionUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientPositionUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientPositionUpdate) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClientPositionUpdate) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClientPositionUpdate) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ClientPositionUpdate) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ClientPositionUpdate) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ClientPositionUpdate) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ClientPositionUpdate) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ClientPositionUpdate) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ClientPositionUpdate) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ClientPositionUpdate) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ClientPositionUpdate) Animation() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientPositionUpdate) HasAnimation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientPositionUpdate) AnimationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientPositionUpdate) SetAnimation(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClientPositionUpdate_List is a list of ClientPositionUpdate.
type ClientPositionUpdate_List = capnp.StructList[ClientPositionUpdate]

// NewClientPositionUpdate creates a new list of ClientPositionUpdate.
func NewClientPositionUpdate_List(s *capnp.Segment, sz int32) (ClientPositionUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ClientPositionUpdate](l), err
}

// ClientPositionUpdate_Future is a wrapper for a ClientPositionUpdate promised by a client call.
type ClientPositionUpdate_Future struct{ *capnp.Future }

func (f ClientPositionUpdate_Future) Struct() (ClientPositionUpdate, error) {
	p, err := f.Future.Ptr()
	return ClientPositionUpdate(p.Struct()), err
}

type SpawnHPUpdate capnp.Struct

// SpawnHPUpdate_TypeID is the unique identifier for the type SpawnHPUpdate.
const SpawnHPUpdate_TypeID = 0xfa4d6a8cac27c611

func NewSpawnHPUpdate(s *capnp.Segment) (SpawnHPUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnHPUpdate(st), err
}

func NewRootSpawnHPUpdate(s *capnp.Segment) (SpawnHPUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnHPUpdate(st), err
}

func ReadRootSpawnHPUpdate(msg *capnp.Message) (SpawnHPUpdate, error) {
	root, err := msg.Root()
	return SpawnHPUpdate(root.Struct()), err
}

func (s SpawnHPUpdate) String() string {
	str, _ := text.Marshal(0xfa4d6a8cac27c611, capnp.Struct(s))
	return str
}

func (s SpawnHPUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnHPUpdate) DecodeFromPtr(p capnp.Ptr) SpawnHPUpdate {
	return SpawnHPUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnHPUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnHPUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnHPUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnHPUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnHPUpdate) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnHPUpdate) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnHPUpdate) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnHPUpdate) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpawnHPUpdate) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpawnHPUpdate) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpawnHPUpdate_List is a list of SpawnHPUpdate.
type SpawnHPUpdate_List = capnp.StructList[SpawnHPUpdate]

// NewSpawnHPUpdate creates a new list of SpawnHPUpdate.
func NewSpawnHPUpdate_List(s *capnp.Segment, sz int32) (SpawnHPUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[SpawnHPUpdate](l), err
}

// SpawnHPUpdate_Future is a wrapper for a SpawnHPUpdate promised by a client call.
type SpawnHPUpdate_Future struct{ *capnp.Future }

func (f SpawnHPUpdate_Future) Struct() (SpawnHPUpdate, error) {
	p, err := f.Future.Ptr()
	return SpawnHPUpdate(p.Struct()), err
}

type SpawnHPUpdate2 capnp.Struct

// SpawnHPUpdate2_TypeID is the unique identifier for the type SpawnHPUpdate2.
const SpawnHPUpdate2_TypeID = 0xc512b3f8727629d7

func NewSpawnHPUpdate2(s *capnp.Segment) (SpawnHPUpdate2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SpawnHPUpdate2(st), err
}

func NewRootSpawnHPUpdate2(s *capnp.Segment) (SpawnHPUpdate2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SpawnHPUpdate2(st), err
}

func ReadRootSpawnHPUpdate2(msg *capnp.Message) (SpawnHPUpdate2, error) {
	root, err := msg.Root()
	return SpawnHPUpdate2(root.Struct()), err
}

func (s SpawnHPUpdate2) String() string {
	str, _ := text.Marshal(0xc512b3f8727629d7, capnp.Struct(s))
	return str
}

func (s SpawnHPUpdate2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnHPUpdate2) DecodeFromPtr(p capnp.Ptr) SpawnHPUpdate2 {
	return SpawnHPUpdate2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnHPUpdate2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnHPUpdate2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnHPUpdate2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnHPUpdate2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnHPUpdate2) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnHPUpdate2) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnHPUpdate2) Hp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnHPUpdate2) SetHp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SpawnHPUpdate2_List is a list of SpawnHPUpdate2.
type SpawnHPUpdate2_List = capnp.StructList[SpawnHPUpdate2]

// NewSpawnHPUpdate2 creates a new list of SpawnHPUpdate2.
func NewSpawnHPUpdate2_List(s *capnp.Segment, sz int32) (SpawnHPUpdate2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SpawnHPUpdate2](l), err
}

// SpawnHPUpdate2_Future is a wrapper for a SpawnHPUpdate2 promised by a client call.
type SpawnHPUpdate2_Future struct{ *capnp.Future }

func (f SpawnHPUpdate2_Future) Struct() (SpawnHPUpdate2, error) {
	p, err := f.Future.Ptr()
	return SpawnHPUpdate2(p.Struct()), err
}

type Stamina capnp.Struct

// Stamina_TypeID is the unique identifier for the type Stamina.
const Stamina_TypeID = 0xdb651f04f1f0488d

func NewStamina(s *capnp.Segment) (Stamina, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stamina(st), err
}

func NewRootStamina(s *capnp.Segment) (Stamina, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stamina(st), err
}

func ReadRootStamina(msg *capnp.Message) (Stamina, error) {
	root, err := msg.Root()
	return Stamina(root.Struct()), err
}

func (s Stamina) String() string {
	str, _ := text.Marshal(0xdb651f04f1f0488d, capnp.Struct(s))
	return str
}

func (s Stamina) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stamina) DecodeFromPtr(p capnp.Ptr) Stamina {
	return Stamina(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stamina) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stamina) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stamina) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stamina) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stamina) Food() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Stamina) SetFood(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Stamina) Water() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Stamina) SetWater(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Stamina_List is a list of Stamina.
type Stamina_List = capnp.StructList[Stamina]

// NewStamina creates a new list of Stamina.
func NewStamina_List(s *capnp.Segment, sz int32) (Stamina_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Stamina](l), err
}

// Stamina_Future is a wrapper for a Stamina promised by a client call.
type Stamina_Future struct{ *capnp.Future }

func (f Stamina_Future) Struct() (Stamina, error) {
	p, err := f.Future.Ptr()
	return Stamina(p.Struct()), err
}

type LevelUpdate capnp.Struct

// LevelUpdate_TypeID is the unique identifier for the type LevelUpdate.
const LevelUpdate_TypeID = 0xe72726225a9f8ca8

func NewLevelUpdate(s *capnp.Segment) (LevelUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LevelUpdate(st), err
}

func NewRootLevelUpdate(s *capnp.Segment) (LevelUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LevelUpdate(st), err
}

func ReadRootLevelUpdate(msg *capnp.Message) (LevelUpdate, error) {
	root, err := msg.Root()
	return LevelUpdate(root.Struct()), err
}

func (s LevelUpdate) String() string {
	str, _ := text.Marshal(0xe72726225a9f8ca8, capnp.Struct(s))
	return str
}

func (s LevelUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LevelUpdate) DecodeFromPtr(p capnp.Ptr) LevelUpdate {
	return LevelUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LevelUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LevelUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LevelUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LevelUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LevelUpdate) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LevelUpdate) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LevelUpdate) LevelOld() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LevelUpdate) SetLevelOld(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LevelUpdate) Exp() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LevelUpdate) SetExp(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// LevelUpdate_List is a list of LevelUpdate.
type LevelUpdate_List = capnp.StructList[LevelUpdate]

// NewLevelUpdate creates a new list of LevelUpdate.
func NewLevelUpdate_List(s *capnp.Segment, sz int32) (LevelUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LevelUpdate](l), err
}

// LevelUpdate_Future is a wrapper for a LevelUpdate promised by a client call.
type LevelUpdate_Future struct{ *capnp.Future }

func (f LevelUpdate_Future) Struct() (LevelUpdate, error) {
	p, err := f.Future.Ptr()
	return LevelUpdate(p.Struct()), err
}

type ExpUpdate capnp.Struct

// ExpUpdate_TypeID is the unique identifier for the type ExpUpdate.
const ExpUpdate_TypeID = 0x80545037b7a4173b

func NewExpUpdate(s *capnp.Segment) (ExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpUpdate(st), err
}

func NewRootExpUpdate(s *capnp.Segment) (ExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpUpdate(st), err
}

func ReadRootExpUpdate(msg *capnp.Message) (ExpUpdate, error) {
	root, err := msg.Root()
	return ExpUpdate(root.Struct()), err
}

func (s ExpUpdate) String() string {
	str, _ := text.Marshal(0x80545037b7a4173b, capnp.Struct(s))
	return str
}

func (s ExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpUpdate) DecodeFromPtr(p capnp.Ptr) ExpUpdate {
	return ExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpUpdate) Exp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpUpdate) SetExp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpUpdate) Aaxp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpUpdate) SetAaxp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ExpUpdate_List is a list of ExpUpdate.
type ExpUpdate_List = capnp.StructList[ExpUpdate]

// NewExpUpdate creates a new list of ExpUpdate.
func NewExpUpdate_List(s *capnp.Segment, sz int32) (ExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExpUpdate](l), err
}

// ExpUpdate_Future is a wrapper for a ExpUpdate promised by a client call.
type ExpUpdate_Future struct{ *capnp.Future }

func (f ExpUpdate_Future) Struct() (ExpUpdate, error) {
	p, err := f.Future.Ptr()
	return ExpUpdate(p.Struct()), err
}

type BulkItemPacket capnp.Struct

// BulkItemPacket_TypeID is the unique identifier for the type BulkItemPacket.
const BulkItemPacket_TypeID = 0xfb1ba86c82d8b9b1

func NewBulkItemPacket(s *capnp.Segment) (BulkItemPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BulkItemPacket(st), err
}

func NewRootBulkItemPacket(s *capnp.Segment) (BulkItemPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BulkItemPacket(st), err
}

func ReadRootBulkItemPacket(msg *capnp.Message) (BulkItemPacket, error) {
	root, err := msg.Root()
	return BulkItemPacket(root.Struct()), err
}

func (s BulkItemPacket) String() string {
	str, _ := text.Marshal(0xfb1ba86c82d8b9b1, capnp.Struct(s))
	return str
}

func (s BulkItemPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BulkItemPacket) DecodeFromPtr(p capnp.Ptr) BulkItemPacket {
	return BulkItemPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BulkItemPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BulkItemPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BulkItemPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BulkItemPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BulkItemPacket) SerializedItem() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BulkItemPacket) HasSerializedItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BulkItemPacket) SerializedItemBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BulkItemPacket) SetSerializedItem(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BulkItemPacket_List is a list of BulkItemPacket.
type BulkItemPacket_List = capnp.StructList[BulkItemPacket]

// NewBulkItemPacket creates a new list of BulkItemPacket.
func NewBulkItemPacket_List(s *capnp.Segment, sz int32) (BulkItemPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BulkItemPacket](l), err
}

// BulkItemPacket_Future is a wrapper for a BulkItemPacket promised by a client call.
type BulkItemPacket_Future struct{ *capnp.Future }

func (f BulkItemPacket_Future) Struct() (BulkItemPacket, error) {
	p, err := f.Future.Ptr()
	return BulkItemPacket(p.Struct()), err
}

type Consume capnp.Struct

// Consume_TypeID is the unique identifier for the type Consume.
const Consume_TypeID = 0xc7587c9f16a1fc72

func NewConsume(s *capnp.Segment) (Consume, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Consume(st), err
}

func NewRootConsume(s *capnp.Segment) (Consume, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Consume(st), err
}

func ReadRootConsume(msg *capnp.Message) (Consume, error) {
	root, err := msg.Root()
	return Consume(root.Struct()), err
}

func (s Consume) String() string {
	str, _ := text.Marshal(0xc7587c9f16a1fc72, capnp.Struct(s))
	return str
}

func (s Consume) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consume) DecodeFromPtr(p capnp.Ptr) Consume {
	return Consume(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consume) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consume) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consume) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consume) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consume) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Consume) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Consume) AutoConsumed() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Consume) SetAutoConsumed(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Consume) Type() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Consume) SetType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Consume_List is a list of Consume.
type Consume_List = capnp.StructList[Consume]

// NewConsume creates a new list of Consume.
func NewConsume_List(s *capnp.Segment, sz int32) (Consume_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Consume](l), err
}

// Consume_Future is a wrapper for a Consume promised by a client call.
type Consume_Future struct{ *capnp.Future }

func (f Consume_Future) Struct() (Consume, error) {
	p, err := f.Future.Ptr()
	return Consume(p.Struct()), err
}

type DeleteItem capnp.Struct

// DeleteItem_TypeID is the unique identifier for the type DeleteItem.
const DeleteItem_TypeID = 0xde9db2015f39bf49

func NewDeleteItem(s *capnp.Segment) (DeleteItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DeleteItem(st), err
}

func NewRootDeleteItem(s *capnp.Segment) (DeleteItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DeleteItem(st), err
}

func ReadRootDeleteItem(msg *capnp.Message) (DeleteItem, error) {
	root, err := msg.Root()
	return DeleteItem(root.Struct()), err
}

func (s DeleteItem) String() string {
	str, _ := text.Marshal(0xde9db2015f39bf49, capnp.Struct(s))
	return str
}

func (s DeleteItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteItem) DecodeFromPtr(p capnp.Ptr) DeleteItem {
	return DeleteItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteItem) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteItem) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DeleteItem) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DeleteItem) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DeleteItem) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DeleteItem) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// DeleteItem_List is a list of DeleteItem.
type DeleteItem_List = capnp.StructList[DeleteItem]

// NewDeleteItem creates a new list of DeleteItem.
func NewDeleteItem_List(s *capnp.Segment, sz int32) (DeleteItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[DeleteItem](l), err
}

// DeleteItem_Future is a wrapper for a DeleteItem promised by a client call.
type DeleteItem_Future struct{ *capnp.Future }

func (f DeleteItem_Future) Struct() (DeleteItem, error) {
	p, err := f.Future.Ptr()
	return DeleteItem(p.Struct()), err
}

type MoveItem capnp.Struct

// MoveItem_TypeID is the unique identifier for the type MoveItem.
const MoveItem_TypeID = 0x8b2666611a37b434

func NewMoveItem(s *capnp.Segment) (MoveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoveItem(st), err
}

func NewRootMoveItem(s *capnp.Segment) (MoveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoveItem(st), err
}

func ReadRootMoveItem(msg *capnp.Message) (MoveItem, error) {
	root, err := msg.Root()
	return MoveItem(root.Struct()), err
}

func (s MoveItem) String() string {
	str, _ := text.Marshal(0x8b2666611a37b434, capnp.Struct(s))
	return str
}

func (s MoveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveItem) DecodeFromPtr(p capnp.Ptr) MoveItem {
	return MoveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveItem) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveItem) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveItem) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveItem) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoveItem) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoveItem) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MoveItem_List is a list of MoveItem.
type MoveItem_List = capnp.StructList[MoveItem]

// NewMoveItem creates a new list of MoveItem.
func NewMoveItem_List(s *capnp.Segment, sz int32) (MoveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MoveItem](l), err
}

// MoveItem_Future is a wrapper for a MoveItem promised by a client call.
type MoveItem_Future struct{ *capnp.Future }

func (f MoveItem_Future) Struct() (MoveItem, error) {
	p, err := f.Future.Ptr()
	return MoveItem(p.Struct()), err
}

type MultiMoveItemSub capnp.Struct

// MultiMoveItemSub_TypeID is the unique identifier for the type MultiMoveItemSub.
const MultiMoveItemSub_TypeID = 0x815ffda3d9dd039d

func NewMultiMoveItemSub(s *capnp.Segment) (MultiMoveItemSub, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MultiMoveItemSub(st), err
}

func NewRootMultiMoveItemSub(s *capnp.Segment) (MultiMoveItemSub, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MultiMoveItemSub(st), err
}

func ReadRootMultiMoveItemSub(msg *capnp.Message) (MultiMoveItemSub, error) {
	root, err := msg.Root()
	return MultiMoveItemSub(root.Struct()), err
}

func (s MultiMoveItemSub) String() string {
	str, _ := text.Marshal(0x815ffda3d9dd039d, capnp.Struct(s))
	return str
}

func (s MultiMoveItemSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiMoveItemSub) DecodeFromPtr(p capnp.Ptr) MultiMoveItemSub {
	return MultiMoveItemSub(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiMoveItemSub) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiMoveItemSub) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiMoveItemSub) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiMoveItemSub) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiMoveItemSub) FromSlot() (InventorySlot, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return InventorySlot(p.Struct()), err
}

func (s MultiMoveItemSub) HasFromSlot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiMoveItemSub) SetFromSlot(v InventorySlot) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFromSlot sets the fromSlot field to a newly
// allocated InventorySlot struct, preferring placement in s's segment.
func (s MultiMoveItemSub) NewFromSlot() (InventorySlot, error) {
	ss, err := NewInventorySlot(capnp.Struct(s).Segment())
	if err != nil {
		return InventorySlot{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MultiMoveItemSub) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MultiMoveItemSub) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MultiMoveItemSub) ToSlot() (InventorySlot, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return InventorySlot(p.Struct()), err
}

func (s MultiMoveItemSub) HasToSlot() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MultiMoveItemSub) SetToSlot(v InventorySlot) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewToSlot sets the toSlot field to a newly
// allocated InventorySlot struct, preferring placement in s's segment.
func (s MultiMoveItemSub) NewToSlot() (InventorySlot, error) {
	ss, err := NewInventorySlot(capnp.Struct(s).Segment())
	if err != nil {
		return InventorySlot{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MultiMoveItemSub_List is a list of MultiMoveItemSub.
type MultiMoveItemSub_List = capnp.StructList[MultiMoveItemSub]

// NewMultiMoveItemSub creates a new list of MultiMoveItemSub.
func NewMultiMoveItemSub_List(s *capnp.Segment, sz int32) (MultiMoveItemSub_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[MultiMoveItemSub](l), err
}

// MultiMoveItemSub_Future is a wrapper for a MultiMoveItemSub promised by a client call.
type MultiMoveItemSub_Future struct{ *capnp.Future }

func (f MultiMoveItemSub_Future) Struct() (MultiMoveItemSub, error) {
	p, err := f.Future.Ptr()
	return MultiMoveItemSub(p.Struct()), err
}
func (p MultiMoveItemSub_Future) FromSlot() InventorySlot_Future {
	return InventorySlot_Future{Future: p.Future.Field(0, nil)}
}
func (p MultiMoveItemSub_Future) ToSlot() InventorySlot_Future {
	return InventorySlot_Future{Future: p.Future.Field(1, nil)}
}

type MultiMoveItem capnp.Struct

// MultiMoveItem_TypeID is the unique identifier for the type MultiMoveItem.
const MultiMoveItem_TypeID = 0xab1ebc3e87d43ca9

func NewMultiMoveItem(s *capnp.Segment) (MultiMoveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiMoveItem(st), err
}

func NewRootMultiMoveItem(s *capnp.Segment) (MultiMoveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiMoveItem(st), err
}

func ReadRootMultiMoveItem(msg *capnp.Message) (MultiMoveItem, error) {
	root, err := msg.Root()
	return MultiMoveItem(root.Struct()), err
}

func (s MultiMoveItem) String() string {
	str, _ := text.Marshal(0xab1ebc3e87d43ca9, capnp.Struct(s))
	return str
}

func (s MultiMoveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiMoveItem) DecodeFromPtr(p capnp.Ptr) MultiMoveItem {
	return MultiMoveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiMoveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiMoveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiMoveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiMoveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiMoveItem) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MultiMoveItem) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MultiMoveItem) Moves() (MultiMoveItemSub_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiMoveItemSub_List(p.List()), err
}

func (s MultiMoveItem) HasMoves() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiMoveItem) SetMoves(v MultiMoveItemSub_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMoves sets the moves field to a newly
// allocated MultiMoveItemSub_List, preferring placement in s's segment.
func (s MultiMoveItem) NewMoves(n int32) (MultiMoveItemSub_List, error) {
	l, err := NewMultiMoveItemSub_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MultiMoveItemSub_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MultiMoveItem_List is a list of MultiMoveItem.
type MultiMoveItem_List = capnp.StructList[MultiMoveItem]

// NewMultiMoveItem creates a new list of MultiMoveItem.
func NewMultiMoveItem_List(s *capnp.Segment, sz int32) (MultiMoveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MultiMoveItem](l), err
}

// MultiMoveItem_Future is a wrapper for a MultiMoveItem promised by a client call.
type MultiMoveItem_Future struct{ *capnp.Future }

func (f MultiMoveItem_Future) Struct() (MultiMoveItem, error) {
	p, err := f.Future.Ptr()
	return MultiMoveItem(p.Struct()), err
}

type MoveCoin capnp.Struct

// MoveCoin_TypeID is the unique identifier for the type MoveCoin.
const MoveCoin_TypeID = 0xe7eceebcdcb01522

func NewMoveCoin(s *capnp.Segment) (MoveCoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoveCoin(st), err
}

func NewRootMoveCoin(s *capnp.Segment) (MoveCoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoveCoin(st), err
}

func ReadRootMoveCoin(msg *capnp.Message) (MoveCoin, error) {
	root, err := msg.Root()
	return MoveCoin(root.Struct()), err
}

func (s MoveCoin) String() string {
	str, _ := text.Marshal(0xe7eceebcdcb01522, capnp.Struct(s))
	return str
}

func (s MoveCoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveCoin) DecodeFromPtr(p capnp.Ptr) MoveCoin {
	return MoveCoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveCoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveCoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveCoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveCoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveCoin) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveCoin) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveCoin) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveCoin) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoveCoin) Cointype1() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoveCoin) SetCointype1(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoveCoin) Cointype2() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoveCoin) SetCointype2(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MoveCoin) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MoveCoin) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MoveCoin_List is a list of MoveCoin.
type MoveCoin_List = capnp.StructList[MoveCoin]

// NewMoveCoin creates a new list of MoveCoin.
func NewMoveCoin_List(s *capnp.Segment, sz int32) (MoveCoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MoveCoin](l), err
}

// MoveCoin_Future is a wrapper for a MoveCoin promised by a client call.
type MoveCoin_Future struct{ *capnp.Future }

func (f MoveCoin_Future) Struct() (MoveCoin, error) {
	p, err := f.Future.Ptr()
	return MoveCoin(p.Struct()), err
}

type TradeBusy capnp.Struct

// TradeBusy_TypeID is the unique identifier for the type TradeBusy.
const TradeBusy_TypeID = 0xf014129ca27de499

func NewTradeBusy(s *capnp.Segment) (TradeBusy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeBusy(st), err
}

func NewRootTradeBusy(s *capnp.Segment) (TradeBusy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeBusy(st), err
}

func ReadRootTradeBusy(msg *capnp.Message) (TradeBusy, error) {
	root, err := msg.Root()
	return TradeBusy(root.Struct()), err
}

func (s TradeBusy) String() string {
	str, _ := text.Marshal(0xf014129ca27de499, capnp.Struct(s))
	return str
}

func (s TradeBusy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeBusy) DecodeFromPtr(p capnp.Ptr) TradeBusy {
	return TradeBusy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeBusy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeBusy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeBusy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeBusy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeBusy) ToMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeBusy) SetToMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeBusy) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeBusy) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TradeBusy_List is a list of TradeBusy.
type TradeBusy_List = capnp.StructList[TradeBusy]

// NewTradeBusy creates a new list of TradeBusy.
func NewTradeBusy_List(s *capnp.Segment, sz int32) (TradeBusy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeBusy](l), err
}

// TradeBusy_Future is a wrapper for a TradeBusy promised by a client call.
type TradeBusy_Future struct{ *capnp.Future }

func (f TradeBusy_Future) Struct() (TradeBusy, error) {
	p, err := f.Future.Ptr()
	return TradeBusy(p.Struct()), err
}

type TradeCoin capnp.Struct

// TradeCoin_TypeID is the unique identifier for the type TradeCoin.
const TradeCoin_TypeID = 0xed7d297bd1f274b3

func NewTradeCoin(s *capnp.Segment) (TradeCoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeCoin(st), err
}

func NewRootTradeCoin(s *capnp.Segment) (TradeCoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeCoin(st), err
}

func ReadRootTradeCoin(msg *capnp.Message) (TradeCoin, error) {
	root, err := msg.Root()
	return TradeCoin(root.Struct()), err
}

func (s TradeCoin) String() string {
	str, _ := text.Marshal(0xed7d297bd1f274b3, capnp.Struct(s))
	return str
}

func (s TradeCoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeCoin) DecodeFromPtr(p capnp.Ptr) TradeCoin {
	return TradeCoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeCoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeCoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeCoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeCoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeCoin) Trader() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeCoin) SetTrader(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeCoin) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeCoin) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeCoin) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TradeCoin) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TradeCoin_List is a list of TradeCoin.
type TradeCoin_List = capnp.StructList[TradeCoin]

// NewTradeCoin creates a new list of TradeCoin.
func NewTradeCoin_List(s *capnp.Segment, sz int32) (TradeCoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TradeCoin](l), err
}

// TradeCoin_Future is a wrapper for a TradeCoin promised by a client call.
type TradeCoin_Future struct{ *capnp.Future }

func (f TradeCoin_Future) Struct() (TradeCoin, error) {
	p, err := f.Future.Ptr()
	return TradeCoin(p.Struct()), err
}

type TradeMoneyUpdate capnp.Struct

// TradeMoneyUpdate_TypeID is the unique identifier for the type TradeMoneyUpdate.
const TradeMoneyUpdate_TypeID = 0xda1a12e840c66e0f

func NewTradeMoneyUpdate(s *capnp.Segment) (TradeMoneyUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeMoneyUpdate(st), err
}

func NewRootTradeMoneyUpdate(s *capnp.Segment) (TradeMoneyUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeMoneyUpdate(st), err
}

func ReadRootTradeMoneyUpdate(msg *capnp.Message) (TradeMoneyUpdate, error) {
	root, err := msg.Root()
	return TradeMoneyUpdate(root.Struct()), err
}

func (s TradeMoneyUpdate) String() string {
	str, _ := text.Marshal(0xda1a12e840c66e0f, capnp.Struct(s))
	return str
}

func (s TradeMoneyUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeMoneyUpdate) DecodeFromPtr(p capnp.Ptr) TradeMoneyUpdate {
	return TradeMoneyUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeMoneyUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeMoneyUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeMoneyUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeMoneyUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeMoneyUpdate) Trader() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeMoneyUpdate) SetTrader(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeMoneyUpdate) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeMoneyUpdate) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeMoneyUpdate) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TradeMoneyUpdate) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TradeMoneyUpdate_List is a list of TradeMoneyUpdate.
type TradeMoneyUpdate_List = capnp.StructList[TradeMoneyUpdate]

// NewTradeMoneyUpdate creates a new list of TradeMoneyUpdate.
func NewTradeMoneyUpdate_List(s *capnp.Segment, sz int32) (TradeMoneyUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TradeMoneyUpdate](l), err
}

// TradeMoneyUpdate_Future is a wrapper for a TradeMoneyUpdate promised by a client call.
type TradeMoneyUpdate_Future struct{ *capnp.Future }

func (f TradeMoneyUpdate_Future) Struct() (TradeMoneyUpdate, error) {
	p, err := f.Future.Ptr()
	return TradeMoneyUpdate(p.Struct()), err
}

type Surname capnp.Struct

// Surname_TypeID is the unique identifier for the type Surname.
const Surname_TypeID = 0x89f1549a7f447f06

func NewSurname(s *capnp.Segment) (Surname, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Surname(st), err
}

func NewRootSurname(s *capnp.Segment) (Surname, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Surname(st), err
}

func ReadRootSurname(msg *capnp.Message) (Surname, error) {
	root, err := msg.Root()
	return Surname(root.Struct()), err
}

func (s Surname) String() string {
	str, _ := text.Marshal(0x89f1549a7f447f06, capnp.Struct(s))
	return str
}

func (s Surname) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Surname) DecodeFromPtr(p capnp.Ptr) Surname {
	return Surname(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Surname) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Surname) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Surname) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Surname) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Surname) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Surname) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Surname) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Surname) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Surname) Lastname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Surname) HasLastname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Surname) LastnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Surname) SetLastname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Surname_List is a list of Surname.
type Surname_List = capnp.StructList[Surname]

// NewSurname creates a new list of Surname.
func NewSurname_List(s *capnp.Segment, sz int32) (Surname_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Surname](l), err
}

// Surname_Future is a wrapper for a Surname promised by a client call.
type Surname_Future struct{ *capnp.Future }

func (f Surname_Future) Struct() (Surname, error) {
	p, err := f.Future.Ptr()
	return Surname(p.Struct()), err
}

type GuildsList capnp.Struct

// GuildsList_TypeID is the unique identifier for the type GuildsList.
const GuildsList_TypeID = 0xb3a8f9a49aa3ccf8

func NewGuildsList(s *capnp.Segment) (GuildsList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GuildsList(st), err
}

func NewRootGuildsList(s *capnp.Segment) (GuildsList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GuildsList(st), err
}

func ReadRootGuildsList(msg *capnp.Message) (GuildsList, error) {
	root, err := msg.Root()
	return GuildsList(root.Struct()), err
}

func (s GuildsList) String() string {
	str, _ := text.Marshal(0xb3a8f9a49aa3ccf8, capnp.Struct(s))
	return str
}

func (s GuildsList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildsList) DecodeFromPtr(p capnp.Ptr) GuildsList {
	return GuildsList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildsList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildsList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildsList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildsList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildsList) Guilds() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return StringList_List(p.List()), err
}

func (s GuildsList) HasGuilds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildsList) SetGuilds(v StringList_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewGuilds sets the guilds field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GuildsList) NewGuilds(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GuildsList_List is a list of GuildsList.
type GuildsList_List = capnp.StructList[GuildsList]

// NewGuildsList creates a new list of GuildsList.
func NewGuildsList_List(s *capnp.Segment, sz int32) (GuildsList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GuildsList](l), err
}

// GuildsList_Future is a wrapper for a GuildsList promised by a client call.
type GuildsList_Future struct{ *capnp.Future }

func (f GuildsList_Future) Struct() (GuildsList, error) {
	p, err := f.Future.Ptr()
	return GuildsList(p.Struct()), err
}

type MoneyOnCorpse capnp.Struct

// MoneyOnCorpse_TypeID is the unique identifier for the type MoneyOnCorpse.
const MoneyOnCorpse_TypeID = 0xd89879eb841b57cc

func NewMoneyOnCorpse(s *capnp.Segment) (MoneyOnCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoneyOnCorpse(st), err
}

func NewRootMoneyOnCorpse(s *capnp.Segment) (MoneyOnCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoneyOnCorpse(st), err
}

func ReadRootMoneyOnCorpse(msg *capnp.Message) (MoneyOnCorpse, error) {
	root, err := msg.Root()
	return MoneyOnCorpse(root.Struct()), err
}

func (s MoneyOnCorpse) String() string {
	str, _ := text.Marshal(0xd89879eb841b57cc, capnp.Struct(s))
	return str
}

func (s MoneyOnCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoneyOnCorpse) DecodeFromPtr(p capnp.Ptr) MoneyOnCorpse {
	return MoneyOnCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoneyOnCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoneyOnCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoneyOnCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoneyOnCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoneyOnCorpse) Response() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoneyOnCorpse) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoneyOnCorpse) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoneyOnCorpse) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoneyOnCorpse) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoneyOnCorpse) SetGold(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoneyOnCorpse) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoneyOnCorpse) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MoneyOnCorpse) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MoneyOnCorpse) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MoneyOnCorpse_List is a list of MoneyOnCorpse.
type MoneyOnCorpse_List = capnp.StructList[MoneyOnCorpse]

// NewMoneyOnCorpse creates a new list of MoneyOnCorpse.
func NewMoneyOnCorpse_List(s *capnp.Segment, sz int32) (MoneyOnCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MoneyOnCorpse](l), err
}

// MoneyOnCorpse_Future is a wrapper for a MoneyOnCorpse promised by a client call.
type MoneyOnCorpse_Future struct{ *capnp.Future }

func (f MoneyOnCorpse_Future) Struct() (MoneyOnCorpse, error) {
	p, err := f.Future.Ptr()
	return MoneyOnCorpse(p.Struct()), err
}

type LootingItem capnp.Struct

// LootingItem_TypeID is the unique identifier for the type LootingItem.
const LootingItem_TypeID = 0xf0569fdbfd2961b4

func NewLootingItem(s *capnp.Segment) (LootingItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LootingItem(st), err
}

func NewRootLootingItem(s *capnp.Segment) (LootingItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LootingItem(st), err
}

func ReadRootLootingItem(msg *capnp.Message) (LootingItem, error) {
	root, err := msg.Root()
	return LootingItem(root.Struct()), err
}

func (s LootingItem) String() string {
	str, _ := text.Marshal(0xf0569fdbfd2961b4, capnp.Struct(s))
	return str
}

func (s LootingItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LootingItem) DecodeFromPtr(p capnp.Ptr) LootingItem {
	return LootingItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LootingItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LootingItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LootingItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LootingItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LootingItem) Lootee() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LootingItem) SetLootee(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LootingItem) Looter() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LootingItem) SetLooter(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LootingItem) SlotId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LootingItem) SetSlotId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LootingItem) AutoLoot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LootingItem) SetAutoLoot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LootingItem_List is a list of LootingItem.
type LootingItem_List = capnp.StructList[LootingItem]

// NewLootingItem creates a new list of LootingItem.
func NewLootingItem_List(s *capnp.Segment, sz int32) (LootingItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LootingItem](l), err
}

// LootingItem_Future is a wrapper for a LootingItem promised by a client call.
type LootingItem_Future struct{ *capnp.Future }

func (f LootingItem_Future) Struct() (LootingItem, error) {
	p, err := f.Future.Ptr()
	return LootingItem(p.Struct()), err
}

type GuildManageStatus capnp.Struct

// GuildManageStatus_TypeID is the unique identifier for the type GuildManageStatus.
const GuildManageStatus_TypeID = 0xcf365ec11d0c95df

func NewGuildManageStatus(s *capnp.Segment) (GuildManageStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildManageStatus(st), err
}

func NewRootGuildManageStatus(s *capnp.Segment) (GuildManageStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildManageStatus(st), err
}

func ReadRootGuildManageStatus(msg *capnp.Message) (GuildManageStatus, error) {
	root, err := msg.Root()
	return GuildManageStatus(root.Struct()), err
}

func (s GuildManageStatus) String() string {
	str, _ := text.Marshal(0xcf365ec11d0c95df, capnp.Struct(s))
	return str
}

func (s GuildManageStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildManageStatus) DecodeFromPtr(p capnp.Ptr) GuildManageStatus {
	return GuildManageStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildManageStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildManageStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildManageStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildManageStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildManageStatus) Guildid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildManageStatus) SetGuildid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildManageStatus) Oldrank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildManageStatus) SetOldrank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildManageStatus) Newrank() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildManageStatus) SetNewrank(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildManageStatus) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildManageStatus) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildManageStatus) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildManageStatus) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildManageStatus_List is a list of GuildManageStatus.
type GuildManageStatus_List = capnp.StructList[GuildManageStatus]

// NewGuildManageStatus creates a new list of GuildManageStatus.
func NewGuildManageStatus_List(s *capnp.Segment, sz int32) (GuildManageStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[GuildManageStatus](l), err
}

// GuildManageStatus_Future is a wrapper for a GuildManageStatus promised by a client call.
type GuildManageStatus_Future struct{ *capnp.Future }

func (f GuildManageStatus_Future) Struct() (GuildManageStatus, error) {
	p, err := f.Future.Ptr()
	return GuildManageStatus(p.Struct()), err
}

type GuildJoin capnp.Struct

// GuildJoin_TypeID is the unique identifier for the type GuildJoin.
const GuildJoin_TypeID = 0xce388f415f14acb0

func NewGuildJoin(s *capnp.Segment) (GuildJoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GuildJoin(st), err
}

func NewRootGuildJoin(s *capnp.Segment) (GuildJoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GuildJoin(st), err
}

func ReadRootGuildJoin(msg *capnp.Message) (GuildJoin, error) {
	root, err := msg.Root()
	return GuildJoin(root.Struct()), err
}

func (s GuildJoin) String() string {
	str, _ := text.Marshal(0xce388f415f14acb0, capnp.Struct(s))
	return str
}

func (s GuildJoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildJoin) DecodeFromPtr(p capnp.Ptr) GuildJoin {
	return GuildJoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildJoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildJoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildJoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildJoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildJoin) Guildid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildJoin) SetGuildid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildJoin) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildJoin) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildJoin) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildJoin) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildJoin) Rank() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GuildJoin) SetRank(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GuildJoin) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GuildJoin) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GuildJoin) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildJoin) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildJoin) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildJoin) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildJoin_List is a list of GuildJoin.
type GuildJoin_List = capnp.StructList[GuildJoin]

// NewGuildJoin creates a new list of GuildJoin.
func NewGuildJoin_List(s *capnp.Segment, sz int32) (GuildJoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[GuildJoin](l), err
}

// GuildJoin_Future is a wrapper for a GuildJoin promised by a client call.
type GuildJoin_Future struct{ *capnp.Future }

func (f GuildJoin_Future) Struct() (GuildJoin, error) {
	p, err := f.Future.Ptr()
	return GuildJoin(p.Struct()), err
}

type GuildInviteAccept capnp.Struct

// GuildInviteAccept_TypeID is the unique identifier for the type GuildInviteAccept.
const GuildInviteAccept_TypeID = 0xf7787292d29bdcd7

func NewGuildInviteAccept(s *capnp.Segment) (GuildInviteAccept, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildInviteAccept(st), err
}

func NewRootGuildInviteAccept(s *capnp.Segment) (GuildInviteAccept, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildInviteAccept(st), err
}

func ReadRootGuildInviteAccept(msg *capnp.Message) (GuildInviteAccept, error) {
	root, err := msg.Root()
	return GuildInviteAccept(root.Struct()), err
}

func (s GuildInviteAccept) String() string {
	str, _ := text.Marshal(0xf7787292d29bdcd7, capnp.Struct(s))
	return str
}

func (s GuildInviteAccept) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildInviteAccept) DecodeFromPtr(p capnp.Ptr) GuildInviteAccept {
	return GuildInviteAccept(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildInviteAccept) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildInviteAccept) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildInviteAccept) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildInviteAccept) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildInviteAccept) Inviter() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildInviteAccept) HasInviter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildInviteAccept) InviterBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildInviteAccept) SetInviter(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildInviteAccept) Newmember() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildInviteAccept) HasNewmember() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildInviteAccept) NewmemberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildInviteAccept) SetNewmember(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildInviteAccept) Response() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildInviteAccept) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildInviteAccept) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildInviteAccept) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// GuildInviteAccept_List is a list of GuildInviteAccept.
type GuildInviteAccept_List = capnp.StructList[GuildInviteAccept]

// NewGuildInviteAccept creates a new list of GuildInviteAccept.
func NewGuildInviteAccept_List(s *capnp.Segment, sz int32) (GuildInviteAccept_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildInviteAccept](l), err
}

// GuildInviteAccept_Future is a wrapper for a GuildInviteAccept promised by a client call.
type GuildInviteAccept_Future struct{ *capnp.Future }

func (f GuildInviteAccept_Future) Struct() (GuildInviteAccept, error) {
	p, err := f.Future.Ptr()
	return GuildInviteAccept(p.Struct()), err
}

type GuildManageRemove capnp.Struct

// GuildManageRemove_TypeID is the unique identifier for the type GuildManageRemove.
const GuildManageRemove_TypeID = 0xe0a980f598d8a745

func NewGuildManageRemove(s *capnp.Segment) (GuildManageRemove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildManageRemove(st), err
}

func NewRootGuildManageRemove(s *capnp.Segment) (GuildManageRemove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildManageRemove(st), err
}

func ReadRootGuildManageRemove(msg *capnp.Message) (GuildManageRemove, error) {
	root, err := msg.Root()
	return GuildManageRemove(root.Struct()), err
}

func (s GuildManageRemove) String() string {
	str, _ := text.Marshal(0xe0a980f598d8a745, capnp.Struct(s))
	return str
}

func (s GuildManageRemove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildManageRemove) DecodeFromPtr(p capnp.Ptr) GuildManageRemove {
	return GuildManageRemove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildManageRemove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildManageRemove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildManageRemove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildManageRemove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildManageRemove) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildManageRemove) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildManageRemove) Member() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildManageRemove) HasMember() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildManageRemove) MemberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildManageRemove) SetMember(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildManageRemove_List is a list of GuildManageRemove.
type GuildManageRemove_List = capnp.StructList[GuildManageRemove]

// NewGuildManageRemove creates a new list of GuildManageRemove.
func NewGuildManageRemove_List(s *capnp.Segment, sz int32) (GuildManageRemove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GuildManageRemove](l), err
}

// GuildManageRemove_Future is a wrapper for a GuildManageRemove promised by a client call.
type GuildManageRemove_Future struct{ *capnp.Future }

func (f GuildManageRemove_Future) Struct() (GuildManageRemove, error) {
	p, err := f.Future.Ptr()
	return GuildManageRemove(p.Struct()), err
}

type Guildcommand capnp.Struct

// Guildcommand_TypeID is the unique identifier for the type Guildcommand.
const Guildcommand_TypeID = 0x87681fa437f7497d

func NewGuildcommand(s *capnp.Segment) (Guildcommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Guildcommand(st), err
}

func NewRootGuildcommand(s *capnp.Segment) (Guildcommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Guildcommand(st), err
}

func ReadRootGuildcommand(msg *capnp.Message) (Guildcommand, error) {
	root, err := msg.Root()
	return Guildcommand(root.Struct()), err
}

func (s Guildcommand) String() string {
	str, _ := text.Marshal(0x87681fa437f7497d, capnp.Struct(s))
	return str
}

func (s Guildcommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Guildcommand) DecodeFromPtr(p capnp.Ptr) Guildcommand {
	return Guildcommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Guildcommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Guildcommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Guildcommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Guildcommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Guildcommand) Othername() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Guildcommand) HasOthername() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Guildcommand) OthernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Guildcommand) SetOthername(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Guildcommand) Myname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Guildcommand) HasMyname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Guildcommand) MynameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Guildcommand) SetMyname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Guildcommand) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Guildcommand) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Guildcommand) Officer() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Guildcommand) SetOfficer(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Guildcommand_List is a list of Guildcommand.
type Guildcommand_List = capnp.StructList[Guildcommand]

// NewGuildcommand creates a new list of Guildcommand.
func NewGuildcommand_List(s *capnp.Segment, sz int32) (Guildcommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Guildcommand](l), err
}

// Guildcommand_Future is a wrapper for a Guildcommand promised by a client call.
type Guildcommand_Future struct{ *capnp.Future }

func (f Guildcommand_Future) Struct() (Guildcommand, error) {
	p, err := f.Future.Ptr()
	return Guildcommand(p.Struct()), err
}

type OnLevelMessage capnp.Struct

// OnLevelMessage_TypeID is the unique identifier for the type OnLevelMessage.
const OnLevelMessage_TypeID = 0xbed2ab9863c56d3b

func NewOnLevelMessage(s *capnp.Segment) (OnLevelMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return OnLevelMessage(st), err
}

func NewRootOnLevelMessage(s *capnp.Segment) (OnLevelMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return OnLevelMessage(st), err
}

func ReadRootOnLevelMessage(msg *capnp.Message) (OnLevelMessage, error) {
	root, err := msg.Root()
	return OnLevelMessage(root.Struct()), err
}

func (s OnLevelMessage) String() string {
	str, _ := text.Marshal(0xbed2ab9863c56d3b, capnp.Struct(s))
	return str
}

func (s OnLevelMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OnLevelMessage) DecodeFromPtr(p capnp.Ptr) OnLevelMessage {
	return OnLevelMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OnLevelMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OnLevelMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OnLevelMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OnLevelMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OnLevelMessage) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s OnLevelMessage) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OnLevelMessage) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s OnLevelMessage) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s OnLevelMessage) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s OnLevelMessage) HasText() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OnLevelMessage) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s OnLevelMessage) SetText(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s OnLevelMessage) Buttons() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s OnLevelMessage) SetButtons(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s OnLevelMessage) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s OnLevelMessage) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s OnLevelMessage) PopupId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s OnLevelMessage) SetPopupId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// OnLevelMessage_List is a list of OnLevelMessage.
type OnLevelMessage_List = capnp.StructList[OnLevelMessage]

// NewOnLevelMessage creates a new list of OnLevelMessage.
func NewOnLevelMessage_List(s *capnp.Segment, sz int32) (OnLevelMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[OnLevelMessage](l), err
}

// OnLevelMessage_Future is a wrapper for a OnLevelMessage promised by a client call.
type OnLevelMessage_Future struct{ *capnp.Future }

func (f OnLevelMessage_Future) Struct() (OnLevelMessage, error) {
	p, err := f.Future.Ptr()
	return OnLevelMessage(p.Struct()), err
}

type GMZoneRequest capnp.Struct

// GMZoneRequest_TypeID is the unique identifier for the type GMZoneRequest.
const GMZoneRequest_TypeID = 0xd870df23456b7900

func NewGMZoneRequest(s *capnp.Segment) (GMZoneRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GMZoneRequest(st), err
}

func NewRootGMZoneRequest(s *capnp.Segment) (GMZoneRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GMZoneRequest(st), err
}

func ReadRootGMZoneRequest(msg *capnp.Message) (GMZoneRequest, error) {
	root, err := msg.Root()
	return GMZoneRequest(root.Struct()), err
}

func (s GMZoneRequest) String() string {
	str, _ := text.Marshal(0xd870df23456b7900, capnp.Struct(s))
	return str
}

func (s GMZoneRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMZoneRequest) DecodeFromPtr(p capnp.Ptr) GMZoneRequest {
	return GMZoneRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMZoneRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMZoneRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMZoneRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMZoneRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMZoneRequest) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMZoneRequest) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMZoneRequest) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMZoneRequest) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMZoneRequest) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMZoneRequest) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMZoneRequest) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GMZoneRequest) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GMZoneRequest) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s GMZoneRequest) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s GMZoneRequest) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s GMZoneRequest) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s GMZoneRequest) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s GMZoneRequest) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s GMZoneRequest) Success() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GMZoneRequest) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// GMZoneRequest_List is a list of GMZoneRequest.
type GMZoneRequest_List = capnp.StructList[GMZoneRequest]

// NewGMZoneRequest creates a new list of GMZoneRequest.
func NewGMZoneRequest_List(s *capnp.Segment, sz int32) (GMZoneRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[GMZoneRequest](l), err
}

// GMZoneRequest_Future is a wrapper for a GMZoneRequest promised by a client call.
type GMZoneRequest_Future struct{ *capnp.Future }

func (f GMZoneRequest_Future) Struct() (GMZoneRequest, error) {
	p, err := f.Future.Ptr()
	return GMZoneRequest(p.Struct()), err
}

type GMSummon capnp.Struct

// GMSummon_TypeID is the unique identifier for the type GMSummon.
const GMSummon_TypeID = 0xd2768707959c3ea9

func NewGMSummon(s *capnp.Segment) (GMSummon, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMSummon(st), err
}

func NewRootGMSummon(s *capnp.Segment) (GMSummon, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMSummon(st), err
}

func ReadRootGMSummon(msg *capnp.Message) (GMSummon, error) {
	root, err := msg.Root()
	return GMSummon(root.Struct()), err
}

func (s GMSummon) String() string {
	str, _ := text.Marshal(0xd2768707959c3ea9, capnp.Struct(s))
	return str
}

func (s GMSummon) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMSummon) DecodeFromPtr(p capnp.Ptr) GMSummon {
	return GMSummon(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMSummon) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMSummon) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMSummon) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMSummon) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMSummon) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMSummon) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMSummon) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMSummon) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMSummon) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMSummon) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMSummon) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMSummon) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMSummon) Success() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMSummon) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMSummon) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMSummon) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMSummon) Y() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMSummon) SetY(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GMSummon) X() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GMSummon) SetX(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GMSummon) Z() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GMSummon) SetZ(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// GMSummon_List is a list of GMSummon.
type GMSummon_List = capnp.StructList[GMSummon]

// NewGMSummon creates a new list of GMSummon.
func NewGMSummon_List(s *capnp.Segment, sz int32) (GMSummon_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[GMSummon](l), err
}

// GMSummon_Future is a wrapper for a GMSummon promised by a client call.
type GMSummon_Future struct{ *capnp.Future }

func (f GMSummon_Future) Struct() (GMSummon, error) {
	p, err := f.Future.Ptr()
	return GMSummon(p.Struct()), err
}

type GMGoto capnp.Struct

// GMGoto_TypeID is the unique identifier for the type GMGoto.
const GMGoto_TypeID = 0xd963a858373108fc

func NewGMGoto(s *capnp.Segment) (GMGoto, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMGoto(st), err
}

func NewRootGMGoto(s *capnp.Segment) (GMGoto, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMGoto(st), err
}

func ReadRootGMGoto(msg *capnp.Message) (GMGoto, error) {
	root, err := msg.Root()
	return GMGoto(root.Struct()), err
}

func (s GMGoto) String() string {
	str, _ := text.Marshal(0xd963a858373108fc, capnp.Struct(s))
	return str
}

func (s GMGoto) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMGoto) DecodeFromPtr(p capnp.Ptr) GMGoto {
	return GMGoto(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMGoto) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMGoto) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMGoto) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMGoto) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMGoto) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMGoto) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMGoto) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMGoto) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMGoto) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMGoto) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMGoto) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMGoto) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMGoto) Success() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMGoto) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMGoto) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMGoto) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMGoto) Y() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMGoto) SetY(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GMGoto) X() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GMGoto) SetX(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GMGoto) Z() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GMGoto) SetZ(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// GMGoto_List is a list of GMGoto.
type GMGoto_List = capnp.StructList[GMGoto]

// NewGMGoto creates a new list of GMGoto.
func NewGMGoto_List(s *capnp.Segment, sz int32) (GMGoto_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[GMGoto](l), err
}

// GMGoto_Future is a wrapper for a GMGoto promised by a client call.
type GMGoto_Future struct{ *capnp.Future }

func (f GMGoto_Future) Struct() (GMGoto, error) {
	p, err := f.Future.Ptr()
	return GMGoto(p.Struct()), err
}

type GMLastName capnp.Struct

// GMLastName_TypeID is the unique identifier for the type GMLastName.
const GMLastName_TypeID = 0xc186a9c36f974c33

func NewGMLastName(s *capnp.Segment) (GMLastName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GMLastName(st), err
}

func NewRootGMLastName(s *capnp.Segment) (GMLastName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GMLastName(st), err
}

func ReadRootGMLastName(msg *capnp.Message) (GMLastName, error) {
	root, err := msg.Root()
	return GMLastName(root.Struct()), err
}

func (s GMLastName) String() string {
	str, _ := text.Marshal(0xc186a9c36f974c33, capnp.Struct(s))
	return str
}

func (s GMLastName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMLastName) DecodeFromPtr(p capnp.Ptr) GMLastName {
	return GMLastName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMLastName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMLastName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMLastName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMLastName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMLastName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMLastName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMLastName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMLastName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMLastName) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMLastName) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMLastName) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMLastName) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMLastName) Lastname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GMLastName) HasLastname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GMLastName) LastnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GMLastName) SetLastname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GMLastName_List is a list of GMLastName.
type GMLastName_List = capnp.StructList[GMLastName]

// NewGMLastName creates a new list of GMLastName.
func NewGMLastName_List(s *capnp.Segment, sz int32) (GMLastName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GMLastName](l), err
}

// GMLastName_Future is a wrapper for a GMLastName promised by a client call.
type GMLastName_Future struct{ *capnp.Future }

func (f GMLastName_Future) Struct() (GMLastName, error) {
	p, err := f.Future.Ptr()
	return GMLastName(p.Struct()), err
}

type CombatAbility capnp.Struct

// CombatAbility_TypeID is the unique identifier for the type CombatAbility.
const CombatAbility_TypeID = 0xaeb6652f725f241b

func NewCombatAbility(s *capnp.Segment) (CombatAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CombatAbility(st), err
}

func NewRootCombatAbility(s *capnp.Segment) (CombatAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CombatAbility(st), err
}

func ReadRootCombatAbility(msg *capnp.Message) (CombatAbility, error) {
	root, err := msg.Root()
	return CombatAbility(root.Struct()), err
}

func (s CombatAbility) String() string {
	str, _ := text.Marshal(0xaeb6652f725f241b, capnp.Struct(s))
	return str
}

func (s CombatAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CombatAbility) DecodeFromPtr(p capnp.Ptr) CombatAbility {
	return CombatAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CombatAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CombatAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CombatAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CombatAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CombatAbility) MTarget() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CombatAbility) SetMTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CombatAbility) MAtk() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CombatAbility) SetMAtk(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CombatAbility) MSkill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CombatAbility) SetMSkill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// CombatAbility_List is a list of CombatAbility.
type CombatAbility_List = capnp.StructList[CombatAbility]

// NewCombatAbility creates a new list of CombatAbility.
func NewCombatAbility_List(s *capnp.Segment, sz int32) (CombatAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CombatAbility](l), err
}

// CombatAbility_Future is a wrapper for a CombatAbility promised by a client call.
type CombatAbility_Future struct{ *capnp.Future }

func (f CombatAbility_Future) Struct() (CombatAbility, error) {
	p, err := f.Future.Ptr()
	return CombatAbility(p.Struct()), err
}

type InstillDoubt capnp.Struct

// InstillDoubt_TypeID is the unique identifier for the type InstillDoubt.
const InstillDoubt_TypeID = 0xf47ddd36364c797f

func NewInstillDoubt(s *capnp.Segment) (InstillDoubt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InstillDoubt(st), err
}

func NewRootInstillDoubt(s *capnp.Segment) (InstillDoubt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InstillDoubt(st), err
}

func ReadRootInstillDoubt(msg *capnp.Message) (InstillDoubt, error) {
	root, err := msg.Root()
	return InstillDoubt(root.Struct()), err
}

func (s InstillDoubt) String() string {
	str, _ := text.Marshal(0xf47ddd36364c797f, capnp.Struct(s))
	return str
}

func (s InstillDoubt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InstillDoubt) DecodeFromPtr(p capnp.Ptr) InstillDoubt {
	return InstillDoubt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InstillDoubt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InstillDoubt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InstillDoubt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InstillDoubt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InstillDoubt) IId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InstillDoubt) SetIId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InstillDoubt) IAtk() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InstillDoubt) SetIAtk(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InstillDoubt) IType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s InstillDoubt) SetIType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// InstillDoubt_List is a list of InstillDoubt.
type InstillDoubt_List = capnp.StructList[InstillDoubt]

// NewInstillDoubt creates a new list of InstillDoubt.
func NewInstillDoubt_List(s *capnp.Segment, sz int32) (InstillDoubt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[InstillDoubt](l), err
}

// InstillDoubt_Future is a wrapper for a InstillDoubt promised by a client call.
type InstillDoubt_Future struct{ *capnp.Future }

func (f InstillDoubt_Future) Struct() (InstillDoubt, error) {
	p, err := f.Future.Ptr()
	return InstillDoubt(p.Struct()), err
}

type GiveItem capnp.Struct

// GiveItem_TypeID is the unique identifier for the type GiveItem.
const GiveItem_TypeID = 0xeef4dfefeb1def9f

func NewGiveItem(s *capnp.Segment) (GiveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GiveItem(st), err
}

func NewRootGiveItem(s *capnp.Segment) (GiveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GiveItem(st), err
}

func ReadRootGiveItem(msg *capnp.Message) (GiveItem, error) {
	root, err := msg.Root()
	return GiveItem(root.Struct()), err
}

func (s GiveItem) String() string {
	str, _ := text.Marshal(0xeef4dfefeb1def9f, capnp.Struct(s))
	return str
}

func (s GiveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GiveItem) DecodeFromPtr(p capnp.Ptr) GiveItem {
	return GiveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GiveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GiveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GiveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GiveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GiveItem) ToEntity() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GiveItem) SetToEntity(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GiveItem) ToEquipSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GiveItem) SetToEquipSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GiveItem) FromEntity() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GiveItem) SetFromEntity(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GiveItem) FromEquipSlot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GiveItem) SetFromEquipSlot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// GiveItem_List is a list of GiveItem.
type GiveItem_List = capnp.StructList[GiveItem]

// NewGiveItem creates a new list of GiveItem.
func NewGiveItem_List(s *capnp.Segment, sz int32) (GiveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[GiveItem](l), err
}

// GiveItem_Future is a wrapper for a GiveItem promised by a client call.
type GiveItem_Future struct{ *capnp.Future }

func (f GiveItem_Future) Struct() (GiveItem, error) {
	p, err := f.Future.Ptr()
	return GiveItem(p.Struct()), err
}

type RandomReq capnp.Struct

// RandomReq_TypeID is the unique identifier for the type RandomReq.
const RandomReq_TypeID = 0xc76af8996e024e54

func NewRandomReq(s *capnp.Segment) (RandomReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RandomReq(st), err
}

func NewRootRandomReq(s *capnp.Segment) (RandomReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RandomReq(st), err
}

func ReadRootRandomReq(msg *capnp.Message) (RandomReq, error) {
	root, err := msg.Root()
	return RandomReq(root.Struct()), err
}

func (s RandomReq) String() string {
	str, _ := text.Marshal(0xc76af8996e024e54, capnp.Struct(s))
	return str
}

func (s RandomReq) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RandomReq) DecodeFromPtr(p capnp.Ptr) RandomReq {
	return RandomReq(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RandomReq) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RandomReq) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RandomReq) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RandomReq) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RandomReq) Low() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RandomReq) SetLow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RandomReq) High() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RandomReq) SetHigh(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RandomReq_List is a list of RandomReq.
type RandomReq_List = capnp.StructList[RandomReq]

// NewRandomReq creates a new list of RandomReq.
func NewRandomReq_List(s *capnp.Segment, sz int32) (RandomReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[RandomReq](l), err
}

// RandomReq_Future is a wrapper for a RandomReq promised by a client call.
type RandomReq_Future struct{ *capnp.Future }

func (f RandomReq_Future) Struct() (RandomReq, error) {
	p, err := f.Future.Ptr()
	return RandomReq(p.Struct()), err
}

type RandomReply capnp.Struct

// RandomReply_TypeID is the unique identifier for the type RandomReply.
const RandomReply_TypeID = 0xfc446c448d940ff7

func NewRandomReply(s *capnp.Segment) (RandomReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RandomReply(st), err
}

func NewRootRandomReply(s *capnp.Segment) (RandomReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RandomReply(st), err
}

func ReadRootRandomReply(msg *capnp.Message) (RandomReply, error) {
	root, err := msg.Root()
	return RandomReply(root.Struct()), err
}

func (s RandomReply) String() string {
	str, _ := text.Marshal(0xfc446c448d940ff7, capnp.Struct(s))
	return str
}

func (s RandomReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RandomReply) DecodeFromPtr(p capnp.Ptr) RandomReply {
	return RandomReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RandomReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RandomReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RandomReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RandomReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RandomReply) Low() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RandomReply) SetLow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RandomReply) High() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RandomReply) SetHigh(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RandomReply) Result() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RandomReply) SetResult(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RandomReply) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RandomReply) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RandomReply) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RandomReply) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RandomReply_List is a list of RandomReply.
type RandomReply_List = capnp.StructList[RandomReply]

// NewRandomReply creates a new list of RandomReply.
func NewRandomReply_List(s *capnp.Segment, sz int32) (RandomReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RandomReply](l), err
}

// RandomReply_Future is a wrapper for a RandomReply promised by a client call.
type RandomReply_Future struct{ *capnp.Future }

func (f RandomReply_Future) Struct() (RandomReply, error) {
	p, err := f.Future.Ptr()
	return RandomReply(p.Struct()), err
}

type LFG capnp.Struct

// LFG_TypeID is the unique identifier for the type LFG.
const LFG_TypeID = 0x852c02610e8a2a24

func NewLFG(s *capnp.Segment) (LFG, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LFG(st), err
}

func NewRootLFG(s *capnp.Segment) (LFG, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LFG(st), err
}

func ReadRootLFG(msg *capnp.Message) (LFG, error) {
	root, err := msg.Root()
	return LFG(root.Struct()), err
}

func (s LFG) String() string {
	str, _ := text.Marshal(0x852c02610e8a2a24, capnp.Struct(s))
	return str
}

func (s LFG) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFG) DecodeFromPtr(p capnp.Ptr) LFG {
	return LFG(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFG) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFG) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFG) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFG) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFG) Value() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFG) SetValue(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFG) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFG) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFG) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFG) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// LFG_List is a list of LFG.
type LFG_List = capnp.StructList[LFG]

// NewLFG creates a new list of LFG.
func NewLFG_List(s *capnp.Segment, sz int32) (LFG_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[LFG](l), err
}

// LFG_Future is a wrapper for a LFG promised by a client call.
type LFG_Future struct{ *capnp.Future }

func (f LFG_Future) Struct() (LFG, error) {
	p, err := f.Future.Ptr()
	return LFG(p.Struct()), err
}

type LFGAppearance capnp.Struct

// LFGAppearance_TypeID is the unique identifier for the type LFGAppearance.
const LFGAppearance_TypeID = 0x88c6bb9459dd440d

func NewLFGAppearance(s *capnp.Segment) (LFGAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LFGAppearance(st), err
}

func NewRootLFGAppearance(s *capnp.Segment) (LFGAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LFGAppearance(st), err
}

func ReadRootLFGAppearance(msg *capnp.Message) (LFGAppearance, error) {
	root, err := msg.Root()
	return LFGAppearance(root.Struct()), err
}

func (s LFGAppearance) String() string {
	str, _ := text.Marshal(0x88c6bb9459dd440d, capnp.Struct(s))
	return str
}

func (s LFGAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGAppearance) DecodeFromPtr(p capnp.Ptr) LFGAppearance {
	return LFGAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGAppearance) Lfg() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGAppearance) SetLfg(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// LFGAppearance_List is a list of LFGAppearance.
type LFGAppearance_List = capnp.StructList[LFGAppearance]

// NewLFGAppearance creates a new list of LFGAppearance.
func NewLFGAppearance_List(s *capnp.Segment, sz int32) (LFGAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[LFGAppearance](l), err
}

// LFGAppearance_Future is a wrapper for a LFGAppearance promised by a client call.
type LFGAppearance_Future struct{ *capnp.Future }

func (f LFGAppearance_Future) Struct() (LFGAppearance, error) {
	p, err := f.Future.Ptr()
	return LFGAppearance(p.Struct()), err
}

type TimeOfDay capnp.Struct

// TimeOfDay_TypeID is the unique identifier for the type TimeOfDay.
const TimeOfDay_TypeID = 0x873927d4562f9ba5

func NewTimeOfDay(s *capnp.Segment) (TimeOfDay, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TimeOfDay(st), err
}

func NewRootTimeOfDay(s *capnp.Segment) (TimeOfDay, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TimeOfDay(st), err
}

func ReadRootTimeOfDay(msg *capnp.Message) (TimeOfDay, error) {
	root, err := msg.Root()
	return TimeOfDay(root.Struct()), err
}

func (s TimeOfDay) String() string {
	str, _ := text.Marshal(0x873927d4562f9ba5, capnp.Struct(s))
	return str
}

func (s TimeOfDay) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeOfDay) DecodeFromPtr(p capnp.Ptr) TimeOfDay {
	return TimeOfDay(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeOfDay) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeOfDay) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeOfDay) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeOfDay) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeOfDay) Hour() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TimeOfDay) SetHour(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TimeOfDay) Minute() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TimeOfDay) SetMinute(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TimeOfDay) Day() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TimeOfDay) SetDay(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TimeOfDay) Month() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TimeOfDay) SetMonth(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TimeOfDay) Year() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TimeOfDay) SetYear(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// TimeOfDay_List is a list of TimeOfDay.
type TimeOfDay_List = capnp.StructList[TimeOfDay]

// NewTimeOfDay creates a new list of TimeOfDay.
func NewTimeOfDay_List(s *capnp.Segment, sz int32) (TimeOfDay_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[TimeOfDay](l), err
}

// TimeOfDay_Future is a wrapper for a TimeOfDay promised by a client call.
type TimeOfDay_Future struct{ *capnp.Future }

func (f TimeOfDay_Future) Struct() (TimeOfDay, error) {
	p, err := f.Future.Ptr()
	return TimeOfDay(p.Struct()), err
}

type MerchantClick capnp.Struct

// MerchantClick_TypeID is the unique identifier for the type MerchantClick.
const MerchantClick_TypeID = 0xf19df04c8f59f3a6

func NewMerchantClick(s *capnp.Segment) (MerchantClick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantClick(st), err
}

func NewRootMerchantClick(s *capnp.Segment) (MerchantClick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantClick(st), err
}

func ReadRootMerchantClick(msg *capnp.Message) (MerchantClick, error) {
	root, err := msg.Root()
	return MerchantClick(root.Struct()), err
}

func (s MerchantClick) String() string {
	str, _ := text.Marshal(0xf19df04c8f59f3a6, capnp.Struct(s))
	return str
}

func (s MerchantClick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantClick) DecodeFromPtr(p capnp.Ptr) MerchantClick {
	return MerchantClick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantClick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantClick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantClick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantClick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantClick) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantClick) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantClick) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantClick) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantClick) Command() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantClick) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantClick) Rate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s MerchantClick) SetRate(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// MerchantClick_List is a list of MerchantClick.
type MerchantClick_List = capnp.StructList[MerchantClick]

// NewMerchantClick creates a new list of MerchantClick.
func NewMerchantClick_List(s *capnp.Segment, sz int32) (MerchantClick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantClick](l), err
}

// MerchantClick_Future is a wrapper for a MerchantClick promised by a client call.
type MerchantClick_Future struct{ *capnp.Future }

func (f MerchantClick_Future) Struct() (MerchantClick, error) {
	p, err := f.Future.Ptr()
	return MerchantClick(p.Struct()), err
}

type MerchantSell capnp.Struct

// MerchantSell_TypeID is the unique identifier for the type MerchantSell.
const MerchantSell_TypeID = 0xd3bb2f7cf3a77db4

func NewMerchantSell(s *capnp.Segment) (MerchantSell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MerchantSell(st), err
}

func NewRootMerchantSell(s *capnp.Segment) (MerchantSell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MerchantSell(st), err
}

func ReadRootMerchantSell(msg *capnp.Message) (MerchantSell, error) {
	root, err := msg.Root()
	return MerchantSell(root.Struct()), err
}

func (s MerchantSell) String() string {
	str, _ := text.Marshal(0xd3bb2f7cf3a77db4, capnp.Struct(s))
	return str
}

func (s MerchantSell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantSell) DecodeFromPtr(p capnp.Ptr) MerchantSell {
	return MerchantSell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantSell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantSell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantSell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantSell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantSell) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantSell) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantSell) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantSell) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantSell) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantSell) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantSell) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MerchantSell) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MerchantSell) Price() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MerchantSell) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MerchantSell_List is a list of MerchantSell.
type MerchantSell_List = capnp.StructList[MerchantSell]

// NewMerchantSell creates a new list of MerchantSell.
func NewMerchantSell_List(s *capnp.Segment, sz int32) (MerchantSell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MerchantSell](l), err
}

// MerchantSell_Future is a wrapper for a MerchantSell promised by a client call.
type MerchantSell_Future struct{ *capnp.Future }

func (f MerchantSell_Future) Struct() (MerchantSell, error) {
	p, err := f.Future.Ptr()
	return MerchantSell(p.Struct()), err
}

type MerchantPurchase capnp.Struct

// MerchantPurchase_TypeID is the unique identifier for the type MerchantPurchase.
const MerchantPurchase_TypeID = 0xc8d069bf9cf2487f

func NewMerchantPurchase(s *capnp.Segment) (MerchantPurchase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantPurchase(st), err
}

func NewRootMerchantPurchase(s *capnp.Segment) (MerchantPurchase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantPurchase(st), err
}

func ReadRootMerchantPurchase(msg *capnp.Message) (MerchantPurchase, error) {
	root, err := msg.Root()
	return MerchantPurchase(root.Struct()), err
}

func (s MerchantPurchase) String() string {
	str, _ := text.Marshal(0xc8d069bf9cf2487f, capnp.Struct(s))
	return str
}

func (s MerchantPurchase) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantPurchase) DecodeFromPtr(p capnp.Ptr) MerchantPurchase {
	return MerchantPurchase(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantPurchase) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantPurchase) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantPurchase) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantPurchase) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantPurchase) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantPurchase) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantPurchase) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantPurchase) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantPurchase) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantPurchase) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantPurchase) Price() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MerchantPurchase) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MerchantPurchase_List is a list of MerchantPurchase.
type MerchantPurchase_List = capnp.StructList[MerchantPurchase]

// NewMerchantPurchase creates a new list of MerchantPurchase.
func NewMerchantPurchase_List(s *capnp.Segment, sz int32) (MerchantPurchase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantPurchase](l), err
}

// MerchantPurchase_Future is a wrapper for a MerchantPurchase promised by a client call.
type MerchantPurchase_Future struct{ *capnp.Future }

func (f MerchantPurchase_Future) Struct() (MerchantPurchase, error) {
	p, err := f.Future.Ptr()
	return MerchantPurchase(p.Struct()), err
}

type MerchantDelItem capnp.Struct

// MerchantDelItem_TypeID is the unique identifier for the type MerchantDelItem.
const MerchantDelItem_TypeID = 0x91cbe70d9e0d9cee

func NewMerchantDelItem(s *capnp.Segment) (MerchantDelItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantDelItem(st), err
}

func NewRootMerchantDelItem(s *capnp.Segment) (MerchantDelItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantDelItem(st), err
}

func ReadRootMerchantDelItem(msg *capnp.Message) (MerchantDelItem, error) {
	root, err := msg.Root()
	return MerchantDelItem(root.Struct()), err
}

func (s MerchantDelItem) String() string {
	str, _ := text.Marshal(0x91cbe70d9e0d9cee, capnp.Struct(s))
	return str
}

func (s MerchantDelItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantDelItem) DecodeFromPtr(p capnp.Ptr) MerchantDelItem {
	return MerchantDelItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantDelItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantDelItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantDelItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantDelItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantDelItem) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantDelItem) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantDelItem) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantDelItem) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantDelItem) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantDelItem) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MerchantDelItem_List is a list of MerchantDelItem.
type MerchantDelItem_List = capnp.StructList[MerchantDelItem]

// NewMerchantDelItem creates a new list of MerchantDelItem.
func NewMerchantDelItem_List(s *capnp.Segment, sz int32) (MerchantDelItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantDelItem](l), err
}

// MerchantDelItem_Future is a wrapper for a MerchantDelItem promised by a client call.
type MerchantDelItem_Future struct{ *capnp.Future }

func (f MerchantDelItem_Future) Struct() (MerchantDelItem, error) {
	p, err := f.Future.Ptr()
	return MerchantDelItem(p.Struct()), err
}

type AdventurePurchase capnp.Struct

// AdventurePurchase_TypeID is the unique identifier for the type AdventurePurchase.
const AdventurePurchase_TypeID = 0xedae9d3a84825876

func NewAdventurePurchase(s *capnp.Segment) (AdventurePurchase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventurePurchase(st), err
}

func NewRootAdventurePurchase(s *capnp.Segment) (AdventurePurchase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventurePurchase(st), err
}

func ReadRootAdventurePurchase(msg *capnp.Message) (AdventurePurchase, error) {
	root, err := msg.Root()
	return AdventurePurchase(root.Struct()), err
}

func (s AdventurePurchase) String() string {
	str, _ := text.Marshal(0xedae9d3a84825876, capnp.Struct(s))
	return str
}

func (s AdventurePurchase) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventurePurchase) DecodeFromPtr(p capnp.Ptr) AdventurePurchase {
	return AdventurePurchase(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventurePurchase) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventurePurchase) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventurePurchase) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventurePurchase) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventurePurchase) SomeFlag() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventurePurchase) SetSomeFlag(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventurePurchase) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventurePurchase) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventurePurchase) Itemid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventurePurchase) SetItemid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventurePurchase) Variable() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventurePurchase) SetVariable(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AdventurePurchase_List is a list of AdventurePurchase.
type AdventurePurchase_List = capnp.StructList[AdventurePurchase]

// NewAdventurePurchase creates a new list of AdventurePurchase.
func NewAdventurePurchase_List(s *capnp.Segment, sz int32) (AdventurePurchase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AdventurePurchase](l), err
}

// AdventurePurchase_Future is a wrapper for a AdventurePurchase promised by a client call.
type AdventurePurchase_Future struct{ *capnp.Future }

func (f AdventurePurchase_Future) Struct() (AdventurePurchase, error) {
	p, err := f.Future.Ptr()
	return AdventurePurchase(p.Struct()), err
}

type AdventureSell capnp.Struct

// AdventureSell_TypeID is the unique identifier for the type AdventureSell.
const AdventureSell_TypeID = 0xcfe31aeeb9723e6b

func NewAdventureSell(s *capnp.Segment) (AdventureSell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventureSell(st), err
}

func NewRootAdventureSell(s *capnp.Segment) (AdventureSell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventureSell(st), err
}

func ReadRootAdventureSell(msg *capnp.Message) (AdventureSell, error) {
	root, err := msg.Root()
	return AdventureSell(root.Struct()), err
}

func (s AdventureSell) String() string {
	str, _ := text.Marshal(0xcfe31aeeb9723e6b, capnp.Struct(s))
	return str
}

func (s AdventureSell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureSell) DecodeFromPtr(p capnp.Ptr) AdventureSell {
	return AdventureSell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureSell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureSell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureSell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureSell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureSell) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureSell) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureSell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureSell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureSell) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureSell) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureSell) SellPrice() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventureSell) SetSellPrice(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AdventureSell_List is a list of AdventureSell.
type AdventureSell_List = capnp.StructList[AdventureSell]

// NewAdventureSell creates a new list of AdventureSell.
func NewAdventureSell_List(s *capnp.Segment, sz int32) (AdventureSell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AdventureSell](l), err
}

// AdventureSell_Future is a wrapper for a AdventureSell promised by a client call.
type AdventureSell_Future struct{ *capnp.Future }

func (f AdventureSell_Future) Struct() (AdventureSell, error) {
	p, err := f.Future.Ptr()
	return AdventureSell(p.Struct()), err
}

type AdventurePointsUpdate capnp.Struct

// AdventurePointsUpdate_TypeID is the unique identifier for the type AdventurePointsUpdate.
const AdventurePointsUpdate_TypeID = 0x9f9c5384091d79ce

func NewAdventurePointsUpdate(s *capnp.Segment) (AdventurePointsUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return AdventurePointsUpdate(st), err
}

func NewRootAdventurePointsUpdate(s *capnp.Segment) (AdventurePointsUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return AdventurePointsUpdate(st), err
}

func ReadRootAdventurePointsUpdate(msg *capnp.Message) (AdventurePointsUpdate, error) {
	root, err := msg.Root()
	return AdventurePointsUpdate(root.Struct()), err
}

func (s AdventurePointsUpdate) String() string {
	str, _ := text.Marshal(0x9f9c5384091d79ce, capnp.Struct(s))
	return str
}

func (s AdventurePointsUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventurePointsUpdate) DecodeFromPtr(p capnp.Ptr) AdventurePointsUpdate {
	return AdventurePointsUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventurePointsUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventurePointsUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventurePointsUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventurePointsUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventurePointsUpdate) LdonAvailablePoints() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventurePointsUpdate) SetLdonAvailablePoints(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventurePointsUpdate) UnkownApu() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s AdventurePointsUpdate) HasUnkownApu() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventurePointsUpdate) SetUnkownApu(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUnkownApu sets the unkownApu field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AdventurePointsUpdate) NewUnkownApu(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s AdventurePointsUpdate) LdonGukPoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventurePointsUpdate) SetLdonGukPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventurePointsUpdate) LdonMirugalPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventurePointsUpdate) SetLdonMirugalPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventurePointsUpdate) LdonMistmoorePoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventurePointsUpdate) SetLdonMistmoorePoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AdventurePointsUpdate) LdonRujarkianPoints() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AdventurePointsUpdate) SetLdonRujarkianPoints(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AdventurePointsUpdate) LdonTakishPoints() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AdventurePointsUpdate) SetLdonTakishPoints(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// AdventurePointsUpdate_List is a list of AdventurePointsUpdate.
type AdventurePointsUpdate_List = capnp.StructList[AdventurePointsUpdate]

// NewAdventurePointsUpdate creates a new list of AdventurePointsUpdate.
func NewAdventurePointsUpdate_List(s *capnp.Segment, sz int32) (AdventurePointsUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[AdventurePointsUpdate](l), err
}

// AdventurePointsUpdate_Future is a wrapper for a AdventurePointsUpdate promised by a client call.
type AdventurePointsUpdate_Future struct{ *capnp.Future }

func (f AdventurePointsUpdate_Future) Struct() (AdventurePointsUpdate, error) {
	p, err := f.Future.Ptr()
	return AdventurePointsUpdate(p.Struct()), err
}

type AdventureFinish capnp.Struct

// AdventureFinish_TypeID is the unique identifier for the type AdventureFinish.
const AdventureFinish_TypeID = 0x91ab76ec9c2c1b6f

func NewAdventureFinish(s *capnp.Segment) (AdventureFinish, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureFinish(st), err
}

func NewRootAdventureFinish(s *capnp.Segment) (AdventureFinish, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureFinish(st), err
}

func ReadRootAdventureFinish(msg *capnp.Message) (AdventureFinish, error) {
	root, err := msg.Root()
	return AdventureFinish(root.Struct()), err
}

func (s AdventureFinish) String() string {
	str, _ := text.Marshal(0x91ab76ec9c2c1b6f, capnp.Struct(s))
	return str
}

func (s AdventureFinish) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureFinish) DecodeFromPtr(p capnp.Ptr) AdventureFinish {
	return AdventureFinish(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureFinish) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureFinish) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureFinish) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureFinish) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureFinish) WinLose() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureFinish) SetWinLose(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureFinish) Points() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureFinish) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AdventureFinish_List is a list of AdventureFinish.
type AdventureFinish_List = capnp.StructList[AdventureFinish]

// NewAdventureFinish creates a new list of AdventureFinish.
func NewAdventureFinish_List(s *capnp.Segment, sz int32) (AdventureFinish_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureFinish](l), err
}

// AdventureFinish_Future is a wrapper for a AdventureFinish promised by a client call.
type AdventureFinish_Future struct{ *capnp.Future }

func (f AdventureFinish_Future) Struct() (AdventureFinish, error) {
	p, err := f.Future.Ptr()
	return AdventureFinish(p.Struct()), err
}

type AdventureRequest capnp.Struct

// AdventureRequest_TypeID is the unique identifier for the type AdventureRequest.
const AdventureRequest_TypeID = 0xd61435667434c9c3

func NewAdventureRequest(s *capnp.Segment) (AdventureRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureRequest(st), err
}

func NewRootAdventureRequest(s *capnp.Segment) (AdventureRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureRequest(st), err
}

func ReadRootAdventureRequest(msg *capnp.Message) (AdventureRequest, error) {
	root, err := msg.Root()
	return AdventureRequest(root.Struct()), err
}

func (s AdventureRequest) String() string {
	str, _ := text.Marshal(0xd61435667434c9c3, capnp.Struct(s))
	return str
}

func (s AdventureRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureRequest) DecodeFromPtr(p capnp.Ptr) AdventureRequest {
	return AdventureRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureRequest) Risk() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureRequest) SetRisk(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureRequest) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureRequest) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AdventureRequest_List is a list of AdventureRequest.
type AdventureRequest_List = capnp.StructList[AdventureRequest]

// NewAdventureRequest creates a new list of AdventureRequest.
func NewAdventureRequest_List(s *capnp.Segment, sz int32) (AdventureRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureRequest](l), err
}

// AdventureRequest_Future is a wrapper for a AdventureRequest promised by a client call.
type AdventureRequest_Future struct{ *capnp.Future }

func (f AdventureRequest_Future) Struct() (AdventureRequest, error) {
	p, err := f.Future.Ptr()
	return AdventureRequest(p.Struct()), err
}

type AdventureRequestResponse capnp.Struct

// AdventureRequestResponse_TypeID is the unique identifier for the type AdventureRequestResponse.
const AdventureRequestResponse_TypeID = 0xd801819fddc5173b

func NewAdventureRequestResponse(s *capnp.Segment) (AdventureRequestResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return AdventureRequestResponse(st), err
}

func NewRootAdventureRequestResponse(s *capnp.Segment) (AdventureRequestResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return AdventureRequestResponse(st), err
}

func ReadRootAdventureRequestResponse(msg *capnp.Message) (AdventureRequestResponse, error) {
	root, err := msg.Root()
	return AdventureRequestResponse(root.Struct()), err
}

func (s AdventureRequestResponse) String() string {
	str, _ := text.Marshal(0xd801819fddc5173b, capnp.Struct(s))
	return str
}

func (s AdventureRequestResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureRequestResponse) DecodeFromPtr(p capnp.Ptr) AdventureRequestResponse {
	return AdventureRequestResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureRequestResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureRequestResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureRequestResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureRequestResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureRequestResponse) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AdventureRequestResponse) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventureRequestResponse) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AdventureRequestResponse) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AdventureRequestResponse) Timetoenter() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureRequestResponse) SetTimetoenter(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureRequestResponse) Timeleft() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureRequestResponse) SetTimeleft(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureRequestResponse) Risk() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureRequestResponse) SetRisk(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureRequestResponse) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s AdventureRequestResponse) SetX(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s AdventureRequestResponse) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s AdventureRequestResponse) SetY(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s AdventureRequestResponse) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s AdventureRequestResponse) SetZ(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s AdventureRequestResponse) Showcompass() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AdventureRequestResponse) SetShowcompass(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// AdventureRequestResponse_List is a list of AdventureRequestResponse.
type AdventureRequestResponse_List = capnp.StructList[AdventureRequestResponse]

// NewAdventureRequestResponse creates a new list of AdventureRequestResponse.
func NewAdventureRequestResponse_List(s *capnp.Segment, sz int32) (AdventureRequestResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return capnp.StructList[AdventureRequestResponse](l), err
}

// AdventureRequestResponse_Future is a wrapper for a AdventureRequestResponse promised by a client call.
type AdventureRequestResponse_Future struct{ *capnp.Future }

func (f AdventureRequestResponse_Future) Struct() (AdventureRequestResponse, error) {
	p, err := f.Future.Ptr()
	return AdventureRequestResponse(p.Struct()), err
}

type Illusion capnp.Struct

// Illusion_TypeID is the unique identifier for the type Illusion.
const Illusion_TypeID = 0xfffc6cb5879fa108

func NewIllusion(s *capnp.Segment) (Illusion, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Illusion(st), err
}

func NewRootIllusion(s *capnp.Segment) (Illusion, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Illusion(st), err
}

func ReadRootIllusion(msg *capnp.Message) (Illusion, error) {
	root, err := msg.Root()
	return Illusion(root.Struct()), err
}

func (s Illusion) String() string {
	str, _ := text.Marshal(0xfffc6cb5879fa108, capnp.Struct(s))
	return str
}

func (s Illusion) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Illusion) DecodeFromPtr(p capnp.Ptr) Illusion {
	return Illusion(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Illusion) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Illusion) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Illusion) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Illusion) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Illusion) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Illusion) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Illusion) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Illusion) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Illusion) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Illusion) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Illusion) Race() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Illusion) SetRace(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Illusion) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Illusion) SetGender(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Illusion) Texture() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Illusion) SetTexture(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Illusion) Helmtexture() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Illusion) SetHelmtexture(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Illusion) Face() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Illusion) SetFace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Illusion) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Illusion) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Illusion) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Illusion) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Illusion) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Illusion) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Illusion) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Illusion) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Illusion) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s Illusion) SetSize(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

// Illusion_List is a list of Illusion.
type Illusion_List = capnp.StructList[Illusion]

// NewIllusion creates a new list of Illusion.
func NewIllusion_List(s *capnp.Segment, sz int32) (Illusion_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Illusion](l), err
}

// Illusion_Future is a wrapper for a Illusion promised by a client call.
type Illusion_Future struct{ *capnp.Future }

func (f Illusion_Future) Struct() (Illusion, error) {
	p, err := f.Future.Ptr()
	return Illusion(p.Struct()), err
}

type SkillUpdate capnp.Struct

// SkillUpdate_TypeID is the unique identifier for the type SkillUpdate.
const SkillUpdate_TypeID = 0xdaac54598edab4df

func NewSkillUpdate(s *capnp.Segment) (SkillUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SkillUpdate(st), err
}

func NewRootSkillUpdate(s *capnp.Segment) (SkillUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SkillUpdate(st), err
}

func ReadRootSkillUpdate(msg *capnp.Message) (SkillUpdate, error) {
	root, err := msg.Root()
	return SkillUpdate(root.Struct()), err
}

func (s SkillUpdate) String() string {
	str, _ := text.Marshal(0xdaac54598edab4df, capnp.Struct(s))
	return str
}

func (s SkillUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SkillUpdate) DecodeFromPtr(p capnp.Ptr) SkillUpdate {
	return SkillUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SkillUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SkillUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SkillUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SkillUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SkillUpdate) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SkillUpdate) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SkillUpdate) Value() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SkillUpdate) SetValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SkillUpdate_List is a list of SkillUpdate.
type SkillUpdate_List = capnp.StructList[SkillUpdate]

// NewSkillUpdate creates a new list of SkillUpdate.
func NewSkillUpdate_List(s *capnp.Segment, sz int32) (SkillUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SkillUpdate](l), err
}

// SkillUpdate_Future is a wrapper for a SkillUpdate promised by a client call.
type SkillUpdate_Future struct{ *capnp.Future }

func (f SkillUpdate_Future) Struct() (SkillUpdate, error) {
	p, err := f.Future.Ptr()
	return SkillUpdate(p.Struct()), err
}

type ZoneUnavail capnp.Struct

// ZoneUnavail_TypeID is the unique identifier for the type ZoneUnavail.
const ZoneUnavail_TypeID = 0xcafb4dbd23ee299c

func NewZoneUnavail(s *capnp.Segment) (ZoneUnavail, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneUnavail(st), err
}

func NewRootZoneUnavail(s *capnp.Segment) (ZoneUnavail, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneUnavail(st), err
}

func ReadRootZoneUnavail(msg *capnp.Message) (ZoneUnavail, error) {
	root, err := msg.Root()
	return ZoneUnavail(root.Struct()), err
}

func (s ZoneUnavail) String() string {
	str, _ := text.Marshal(0xcafb4dbd23ee299c, capnp.Struct(s))
	return str
}

func (s ZoneUnavail) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneUnavail) DecodeFromPtr(p capnp.Ptr) ZoneUnavail {
	return ZoneUnavail(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneUnavail) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneUnavail) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneUnavail) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneUnavail) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneUnavail) Zonename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneUnavail) HasZonename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneUnavail) ZonenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneUnavail) SetZonename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ZoneUnavail_List is a list of ZoneUnavail.
type ZoneUnavail_List = capnp.StructList[ZoneUnavail]

// NewZoneUnavail creates a new list of ZoneUnavail.
func NewZoneUnavail_List(s *capnp.Segment, sz int32) (ZoneUnavail_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ZoneUnavail](l), err
}

// ZoneUnavail_Future is a wrapper for a ZoneUnavail promised by a client call.
type ZoneUnavail_Future struct{ *capnp.Future }

func (f ZoneUnavail_Future) Struct() (ZoneUnavail, error) {
	p, err := f.Future.Ptr()
	return ZoneUnavail(p.Struct()), err
}

type GroupGeneric capnp.Struct

// GroupGeneric_TypeID is the unique identifier for the type GroupGeneric.
const GroupGeneric_TypeID = 0xba8fb8d4d5b15836

func NewGroupGeneric(s *capnp.Segment) (GroupGeneric, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupGeneric(st), err
}

func NewRootGroupGeneric(s *capnp.Segment) (GroupGeneric, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupGeneric(st), err
}

func ReadRootGroupGeneric(msg *capnp.Message) (GroupGeneric, error) {
	root, err := msg.Root()
	return GroupGeneric(root.Struct()), err
}

func (s GroupGeneric) String() string {
	str, _ := text.Marshal(0xba8fb8d4d5b15836, capnp.Struct(s))
	return str
}

func (s GroupGeneric) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupGeneric) DecodeFromPtr(p capnp.Ptr) GroupGeneric {
	return GroupGeneric(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupGeneric) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupGeneric) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupGeneric) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupGeneric) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupGeneric) Name1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupGeneric) HasName1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupGeneric) Name1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupGeneric) SetName1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupGeneric) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupGeneric) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupGeneric) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupGeneric) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupGeneric_List is a list of GroupGeneric.
type GroupGeneric_List = capnp.StructList[GroupGeneric]

// NewGroupGeneric creates a new list of GroupGeneric.
func NewGroupGeneric_List(s *capnp.Segment, sz int32) (GroupGeneric_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GroupGeneric](l), err
}

// GroupGeneric_Future is a wrapper for a GroupGeneric promised by a client call.
type GroupGeneric_Future struct{ *capnp.Future }

func (f GroupGeneric_Future) Struct() (GroupGeneric, error) {
	p, err := f.Future.Ptr()
	return GroupGeneric(p.Struct()), err
}

type GroupCancel capnp.Struct

// GroupCancel_TypeID is the unique identifier for the type GroupCancel.
const GroupCancel_TypeID = 0x9b4767b704c3f415

func NewGroupCancel(s *capnp.Segment) (GroupCancel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupCancel(st), err
}

func NewRootGroupCancel(s *capnp.Segment) (GroupCancel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupCancel(st), err
}

func ReadRootGroupCancel(msg *capnp.Message) (GroupCancel, error) {
	root, err := msg.Root()
	return GroupCancel(root.Struct()), err
}

func (s GroupCancel) String() string {
	str, _ := text.Marshal(0x9b4767b704c3f415, capnp.Struct(s))
	return str
}

func (s GroupCancel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupCancel) DecodeFromPtr(p capnp.Ptr) GroupCancel {
	return GroupCancel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupCancel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupCancel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupCancel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupCancel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupCancel) Name1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupCancel) HasName1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupCancel) Name1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupCancel) SetName1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupCancel) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupCancel) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupCancel) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupCancel) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GroupCancel) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupCancel) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GroupCancel_List is a list of GroupCancel.
type GroupCancel_List = capnp.StructList[GroupCancel]

// NewGroupCancel creates a new list of GroupCancel.
func NewGroupCancel_List(s *capnp.Segment, sz int32) (GroupCancel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GroupCancel](l), err
}

// GroupCancel_Future is a wrapper for a GroupCancel promised by a client call.
type GroupCancel_Future struct{ *capnp.Future }

func (f GroupCancel_Future) Struct() (GroupCancel, error) {
	p, err := f.Future.Ptr()
	return GroupCancel(p.Struct()), err
}

type GroupUpdate capnp.Struct

// GroupUpdate_TypeID is the unique identifier for the type GroupUpdate.
const GroupUpdate_TypeID = 0xc6cfb8d85c850055

func NewGroupUpdate(s *capnp.Segment) (GroupUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GroupUpdate(st), err
}

func NewRootGroupUpdate(s *capnp.Segment) (GroupUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GroupUpdate(st), err
}

func ReadRootGroupUpdate(msg *capnp.Message) (GroupUpdate, error) {
	root, err := msg.Root()
	return GroupUpdate(root.Struct()), err
}

func (s GroupUpdate) String() string {
	str, _ := text.Marshal(0xc6cfb8d85c850055, capnp.Struct(s))
	return str
}

func (s GroupUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupUpdate) DecodeFromPtr(p capnp.Ptr) GroupUpdate {
	return GroupUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupUpdate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupUpdate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupUpdate) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupUpdate) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupUpdate) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupUpdate) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupUpdate) Membername() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return StringList_List(p.List()), err
}

func (s GroupUpdate) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupUpdate) SetMembername(v StringList_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembername sets the membername field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GroupUpdate) NewMembername(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GroupUpdate) Leadersname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GroupUpdate) HasLeadersname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GroupUpdate) LeadersnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GroupUpdate) SetLeadersname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GroupUpdate_List is a list of GroupUpdate.
type GroupUpdate_List = capnp.StructList[GroupUpdate]

// NewGroupUpdate creates a new list of GroupUpdate.
func NewGroupUpdate_List(s *capnp.Segment, sz int32) (GroupUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[GroupUpdate](l), err
}

// GroupUpdate_Future is a wrapper for a GroupUpdate promised by a client call.
type GroupUpdate_Future struct{ *capnp.Future }

func (f GroupUpdate_Future) Struct() (GroupUpdate, error) {
	p, err := f.Future.Ptr()
	return GroupUpdate(p.Struct()), err
}

type GroupUpdate2 capnp.Struct

// GroupUpdate2_TypeID is the unique identifier for the type GroupUpdate2.
const GroupUpdate2_TypeID = 0xd1052d0564f25e0d

func NewGroupUpdate2(s *capnp.Segment) (GroupUpdate2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return GroupUpdate2(st), err
}

func NewRootGroupUpdate2(s *capnp.Segment) (GroupUpdate2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return GroupUpdate2(st), err
}

func ReadRootGroupUpdate2(msg *capnp.Message) (GroupUpdate2, error) {
	root, err := msg.Root()
	return GroupUpdate2(root.Struct()), err
}

func (s GroupUpdate2) String() string {
	str, _ := text.Marshal(0xd1052d0564f25e0d, capnp.Struct(s))
	return str
}

func (s GroupUpdate2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupUpdate2) DecodeFromPtr(p capnp.Ptr) GroupUpdate2 {
	return GroupUpdate2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupUpdate2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupUpdate2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupUpdate2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupUpdate2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupUpdate2) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupUpdate2) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupUpdate2) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupUpdate2) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupUpdate2) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupUpdate2) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupUpdate2) Membername() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return StringList_List(p.List()), err
}

func (s GroupUpdate2) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupUpdate2) SetMembername(v StringList_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembername sets the membername field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GroupUpdate2) NewMembername(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GroupUpdate2) Leadersname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GroupUpdate2) HasLeadersname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GroupUpdate2) LeadersnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GroupUpdate2) SetLeadersname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GroupUpdate2) LeaderAas() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return GroupLeadershipAA(p.Struct()), err
}

func (s GroupUpdate2) HasLeaderAas() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GroupUpdate2) SetLeaderAas(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewLeaderAas sets the leaderAas field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s GroupUpdate2) NewLeaderAas() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GroupUpdate2_List is a list of GroupUpdate2.
type GroupUpdate2_List = capnp.StructList[GroupUpdate2]

// NewGroupUpdate2 creates a new list of GroupUpdate2.
func NewGroupUpdate2_List(s *capnp.Segment, sz int32) (GroupUpdate2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[GroupUpdate2](l), err
}

// GroupUpdate2_Future is a wrapper for a GroupUpdate2 promised by a client call.
type GroupUpdate2_Future struct{ *capnp.Future }

func (f GroupUpdate2_Future) Struct() (GroupUpdate2, error) {
	p, err := f.Future.Ptr()
	return GroupUpdate2(p.Struct()), err
}
func (p GroupUpdate2_Future) LeaderAas() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(3, nil)}
}

type GroupJoin capnp.Struct

// GroupJoin_TypeID is the unique identifier for the type GroupJoin.
const GroupJoin_TypeID = 0x880f6cbde51358e0

func NewGroupJoin(s *capnp.Segment) (GroupJoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupJoin(st), err
}

func NewRootGroupJoin(s *capnp.Segment) (GroupJoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupJoin(st), err
}

func ReadRootGroupJoin(msg *capnp.Message) (GroupJoin, error) {
	root, err := msg.Root()
	return GroupJoin(root.Struct()), err
}

func (s GroupJoin) String() string {
	str, _ := text.Marshal(0x880f6cbde51358e0, capnp.Struct(s))
	return str
}

func (s GroupJoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupJoin) DecodeFromPtr(p capnp.Ptr) GroupJoin {
	return GroupJoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupJoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupJoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupJoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupJoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupJoin) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupJoin) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupJoin) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupJoin) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupJoin) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupJoin) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupJoin) Membername() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupJoin) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupJoin) MembernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupJoin) SetMembername(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupJoin_List is a list of GroupJoin.
type GroupJoin_List = capnp.StructList[GroupJoin]

// NewGroupJoin creates a new list of GroupJoin.
func NewGroupJoin_List(s *capnp.Segment, sz int32) (GroupJoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GroupJoin](l), err
}

// GroupJoin_Future is a wrapper for a GroupJoin promised by a client call.
type GroupJoin_Future struct{ *capnp.Future }

func (f GroupJoin_Future) Struct() (GroupJoin, error) {
	p, err := f.Future.Ptr()
	return GroupJoin(p.Struct()), err
}

type FaceChange capnp.Struct

// FaceChange_TypeID is the unique identifier for the type FaceChange.
const FaceChange_TypeID = 0xd8b98b1d67fe28a2

func NewFaceChange(s *capnp.Segment) (FaceChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return FaceChange(st), err
}

func NewRootFaceChange(s *capnp.Segment) (FaceChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return FaceChange(st), err
}

func ReadRootFaceChange(msg *capnp.Message) (FaceChange, error) {
	root, err := msg.Root()
	return FaceChange(root.Struct()), err
}

func (s FaceChange) String() string {
	str, _ := text.Marshal(0xd8b98b1d67fe28a2, capnp.Struct(s))
	return str
}

func (s FaceChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FaceChange) DecodeFromPtr(p capnp.Ptr) FaceChange {
	return FaceChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FaceChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FaceChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FaceChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FaceChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FaceChange) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FaceChange) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FaceChange) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FaceChange) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s FaceChange) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s FaceChange) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s FaceChange) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s FaceChange) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s FaceChange) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s FaceChange) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s FaceChange) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s FaceChange) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s FaceChange) Face() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s FaceChange) SetFace(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// FaceChange_List is a list of FaceChange.
type FaceChange_List = capnp.StructList[FaceChange]

// NewFaceChange creates a new list of FaceChange.
func NewFaceChange_List(s *capnp.Segment, sz int32) (FaceChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[FaceChange](l), err
}

// FaceChange_Future is a wrapper for a FaceChange promised by a client call.
type FaceChange_Future struct{ *capnp.Future }

func (f FaceChange_Future) Struct() (FaceChange, error) {
	p, err := f.Future.Ptr()
	return FaceChange(p.Struct()), err
}

type TradeRequest capnp.Struct

// TradeRequest_TypeID is the unique identifier for the type TradeRequest.
const TradeRequest_TypeID = 0xdbc10a1e045d6bed

func NewTradeRequest(s *capnp.Segment) (TradeRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeRequest(st), err
}

func NewRootTradeRequest(s *capnp.Segment) (TradeRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeRequest(st), err
}

func ReadRootTradeRequest(msg *capnp.Message) (TradeRequest, error) {
	root, err := msg.Root()
	return TradeRequest(root.Struct()), err
}

func (s TradeRequest) String() string {
	str, _ := text.Marshal(0xdbc10a1e045d6bed, capnp.Struct(s))
	return str
}

func (s TradeRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeRequest) DecodeFromPtr(p capnp.Ptr) TradeRequest {
	return TradeRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeRequest) ToMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeRequest) SetToMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeRequest) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeRequest) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TradeRequest_List is a list of TradeRequest.
type TradeRequest_List = capnp.StructList[TradeRequest]

// NewTradeRequest creates a new list of TradeRequest.
func NewTradeRequest_List(s *capnp.Segment, sz int32) (TradeRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeRequest](l), err
}

// TradeRequest_Future is a wrapper for a TradeRequest promised by a client call.
type TradeRequest_Future struct{ *capnp.Future }

func (f TradeRequest_Future) Struct() (TradeRequest, error) {
	p, err := f.Future.Ptr()
	return TradeRequest(p.Struct()), err
}

type TradeAccept capnp.Struct

// TradeAccept_TypeID is the unique identifier for the type TradeAccept.
const TradeAccept_TypeID = 0xfa5626b7b9dcd44b

func NewTradeAccept(s *capnp.Segment) (TradeAccept, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeAccept(st), err
}

func NewRootTradeAccept(s *capnp.Segment) (TradeAccept, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeAccept(st), err
}

func ReadRootTradeAccept(msg *capnp.Message) (TradeAccept, error) {
	root, err := msg.Root()
	return TradeAccept(root.Struct()), err
}

func (s TradeAccept) String() string {
	str, _ := text.Marshal(0xfa5626b7b9dcd44b, capnp.Struct(s))
	return str
}

func (s TradeAccept) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeAccept) DecodeFromPtr(p capnp.Ptr) TradeAccept {
	return TradeAccept(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeAccept) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeAccept) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeAccept) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeAccept) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeAccept) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeAccept) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// TradeAccept_List is a list of TradeAccept.
type TradeAccept_List = capnp.StructList[TradeAccept]

// NewTradeAccept creates a new list of TradeAccept.
func NewTradeAccept_List(s *capnp.Segment, sz int32) (TradeAccept_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeAccept](l), err
}

// TradeAccept_Future is a wrapper for a TradeAccept promised by a client call.
type TradeAccept_Future struct{ *capnp.Future }

func (f TradeAccept_Future) Struct() (TradeAccept, error) {
	p, err := f.Future.Ptr()
	return TradeAccept(p.Struct()), err
}

type CancelTrade capnp.Struct

// CancelTrade_TypeID is the unique identifier for the type CancelTrade.
const CancelTrade_TypeID = 0xb7f9da429e0872e9

func NewCancelTrade(s *capnp.Segment) (CancelTrade, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CancelTrade(st), err
}

func NewRootCancelTrade(s *capnp.Segment) (CancelTrade, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CancelTrade(st), err
}

func ReadRootCancelTrade(msg *capnp.Message) (CancelTrade, error) {
	root, err := msg.Root()
	return CancelTrade(root.Struct()), err
}

func (s CancelTrade) String() string {
	str, _ := text.Marshal(0xb7f9da429e0872e9, capnp.Struct(s))
	return str
}

func (s CancelTrade) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CancelTrade) DecodeFromPtr(p capnp.Ptr) CancelTrade {
	return CancelTrade(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CancelTrade) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CancelTrade) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CancelTrade) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CancelTrade) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CancelTrade) Fromid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CancelTrade) SetFromid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CancelTrade) Action() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CancelTrade) SetAction(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// CancelTrade_List is a list of CancelTrade.
type CancelTrade_List = capnp.StructList[CancelTrade]

// NewCancelTrade creates a new list of CancelTrade.
func NewCancelTrade_List(s *capnp.Segment, sz int32) (CancelTrade_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CancelTrade](l), err
}

// CancelTrade_Future is a wrapper for a CancelTrade promised by a client call.
type CancelTrade_Future struct{ *capnp.Future }

func (f CancelTrade_Future) Struct() (CancelTrade, error) {
	p, err := f.Future.Ptr()
	return CancelTrade(p.Struct()), err
}

type PetitionUpdate capnp.Struct

// PetitionUpdate_TypeID is the unique identifier for the type PetitionUpdate.
const PetitionUpdate_TypeID = 0xfab5a20f1d337f75

func NewPetitionUpdate(s *capnp.Segment) (PetitionUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return PetitionUpdate(st), err
}

func NewRootPetitionUpdate(s *capnp.Segment) (PetitionUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return PetitionUpdate(st), err
}

func ReadRootPetitionUpdate(msg *capnp.Message) (PetitionUpdate, error) {
	root, err := msg.Root()
	return PetitionUpdate(root.Struct()), err
}

func (s PetitionUpdate) String() string {
	str, _ := text.Marshal(0xfab5a20f1d337f75, capnp.Struct(s))
	return str
}

func (s PetitionUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PetitionUpdate) DecodeFromPtr(p capnp.Ptr) PetitionUpdate {
	return PetitionUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PetitionUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PetitionUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PetitionUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PetitionUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PetitionUpdate) Petnumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PetitionUpdate) SetPetnumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PetitionUpdate) Color() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PetitionUpdate) SetColor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PetitionUpdate) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PetitionUpdate) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PetitionUpdate) Senttime() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PetitionUpdate) SetSenttime(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PetitionUpdate) Accountid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PetitionUpdate) HasAccountid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PetitionUpdate) AccountidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetAccountid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PetitionUpdate) Gmsenttoo() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s PetitionUpdate) HasGmsenttoo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PetitionUpdate) GmsenttooBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetGmsenttoo(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s PetitionUpdate) Quetotal() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PetitionUpdate) SetQuetotal(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PetitionUpdate) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s PetitionUpdate) HasCharname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s PetitionUpdate) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetCharname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// PetitionUpdate_List is a list of PetitionUpdate.
type PetitionUpdate_List = capnp.StructList[PetitionUpdate]

// NewPetitionUpdate creates a new list of PetitionUpdate.
func NewPetitionUpdate_List(s *capnp.Segment, sz int32) (PetitionUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[PetitionUpdate](l), err
}

// PetitionUpdate_Future is a wrapper for a PetitionUpdate promised by a client call.
type PetitionUpdate_Future struct{ *capnp.Future }

func (f PetitionUpdate_Future) Struct() (PetitionUpdate, error) {
	p, err := f.Future.Ptr()
	return PetitionUpdate(p.Struct()), err
}

type Petition capnp.Struct

// Petition_TypeID is the unique identifier for the type Petition.
const Petition_TypeID = 0x87d72af46493bddd

func NewPetition(s *capnp.Segment) (Petition, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return Petition(st), err
}

func NewRootPetition(s *capnp.Segment) (Petition, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return Petition(st), err
}

func ReadRootPetition(msg *capnp.Message) (Petition, error) {
	root, err := msg.Root()
	return Petition(root.Struct()), err
}

func (s Petition) String() string {
	str, _ := text.Marshal(0x87d72af46493bddd, capnp.Struct(s))
	return str
}

func (s Petition) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Petition) DecodeFromPtr(p capnp.Ptr) Petition {
	return Petition(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Petition) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Petition) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Petition) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Petition) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Petition) Petnumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Petition) SetPetnumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Petition) Urgency() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Petition) SetUrgency(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Petition) Accountid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Petition) HasAccountid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Petition) AccountidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Petition) SetAccountid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Petition) Lastgm() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Petition) HasLastgm() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Petition) LastgmBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Petition) SetLastgm(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Petition) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Petition) SetZone(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Petition) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Petition) HasCharname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Petition) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Petition) SetCharname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Petition) Charlevel() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Petition) SetCharlevel(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Petition) Charclass() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Petition) SetCharclass(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Petition) Charrace() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Petition) SetCharrace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Petition) Checkouts() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Petition) SetCheckouts(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Petition) Unavail() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Petition) SetUnavail(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Petition) Senttime() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Petition) SetSenttime(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Petition) Petitiontext() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Petition) HasPetitiontext() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Petition) PetitiontextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Petition) SetPetitiontext(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Petition) Gmtext() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Petition) HasGmtext() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Petition) GmtextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Petition) SetGmtext(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// Petition_List is a list of Petition.
type Petition_List = capnp.StructList[Petition]

// NewPetition creates a new list of Petition.
func NewPetition_List(s *capnp.Segment, sz int32) (Petition_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5}, sz)
	return capnp.StructList[Petition](l), err
}

// Petition_Future is a wrapper for a Petition promised by a client call.
type Petition_Future struct{ *capnp.Future }

func (f Petition_Future) Struct() (Petition, error) {
	p, err := f.Future.Ptr()
	return Petition(p.Struct()), err
}

type WhoAll capnp.Struct

// WhoAll_TypeID is the unique identifier for the type WhoAll.
const WhoAll_TypeID = 0xb513764d5512a334

func NewWhoAll(s *capnp.Segment) (WhoAll, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return WhoAll(st), err
}

func NewRootWhoAll(s *capnp.Segment) (WhoAll, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return WhoAll(st), err
}

func ReadRootWhoAll(msg *capnp.Message) (WhoAll, error) {
	root, err := msg.Root()
	return WhoAll(root.Struct()), err
}

func (s WhoAll) String() string {
	str, _ := text.Marshal(0xb513764d5512a334, capnp.Struct(s))
	return str
}

func (s WhoAll) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAll) DecodeFromPtr(p capnp.Ptr) WhoAll {
	return WhoAll(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAll) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAll) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAll) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAll) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAll) Whom() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAll) HasWhom() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAll) WhomBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAll) SetWhom(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAll) Wrace() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAll) SetWrace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAll) Wclass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAll) SetWclass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAll) Lvllow() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAll) SetLvllow(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAll) Lvlhigh() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAll) SetLvlhigh(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAll) Gmlookup() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s WhoAll) SetGmlookup(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// WhoAll_List is a list of WhoAll.
type WhoAll_List = capnp.StructList[WhoAll]

// NewWhoAll creates a new list of WhoAll.
func NewWhoAll_List(s *capnp.Segment, sz int32) (WhoAll_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[WhoAll](l), err
}

// WhoAll_Future is a wrapper for a WhoAll promised by a client call.
type WhoAll_Future struct{ *capnp.Future }

func (f WhoAll_Future) Struct() (WhoAll, error) {
	p, err := f.Future.Ptr()
	return WhoAll(p.Struct()), err
}

type Stun capnp.Struct

// Stun_TypeID is the unique identifier for the type Stun.
const Stun_TypeID = 0x88007635e342bb94

func NewStun(s *capnp.Segment) (Stun, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stun(st), err
}

func NewRootStun(s *capnp.Segment) (Stun, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stun(st), err
}

func ReadRootStun(msg *capnp.Message) (Stun, error) {
	root, err := msg.Root()
	return Stun(root.Struct()), err
}

func (s Stun) String() string {
	str, _ := text.Marshal(0x88007635e342bb94, capnp.Struct(s))
	return str
}

func (s Stun) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stun) DecodeFromPtr(p capnp.Ptr) Stun {
	return Stun(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stun) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stun) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stun) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stun) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stun) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Stun) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Stun_List is a list of Stun.
type Stun_List = capnp.StructList[Stun]

// NewStun creates a new list of Stun.
func NewStun_List(s *capnp.Segment, sz int32) (Stun_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Stun](l), err
}

// Stun_Future is a wrapper for a Stun promised by a client call.
type Stun_Future struct{ *capnp.Future }

func (f Stun_Future) Struct() (Stun, error) {
	p, err := f.Future.Ptr()
	return Stun(p.Struct()), err
}

type AugmentItem capnp.Struct

// AugmentItem_TypeID is the unique identifier for the type AugmentItem.
const AugmentItem_TypeID = 0xe5205955ce643ade

func NewAugmentItem(s *capnp.Segment) (AugmentItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AugmentItem(st), err
}

func NewRootAugmentItem(s *capnp.Segment) (AugmentItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AugmentItem(st), err
}

func ReadRootAugmentItem(msg *capnp.Message) (AugmentItem, error) {
	root, err := msg.Root()
	return AugmentItem(root.Struct()), err
}

func (s AugmentItem) String() string {
	str, _ := text.Marshal(0xe5205955ce643ade, capnp.Struct(s))
	return str
}

func (s AugmentItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AugmentItem) DecodeFromPtr(p capnp.Ptr) AugmentItem {
	return AugmentItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AugmentItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AugmentItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AugmentItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AugmentItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AugmentItem) ContainerSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AugmentItem) SetContainerSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AugmentItem) AugmentSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AugmentItem) SetAugmentSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AugmentItem_List is a list of AugmentItem.
type AugmentItem_List = capnp.StructList[AugmentItem]

// NewAugmentItem creates a new list of AugmentItem.
func NewAugmentItem_List(s *capnp.Segment, sz int32) (AugmentItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AugmentItem](l), err
}

// AugmentItem_Future is a wrapper for a AugmentItem promised by a client call.
type AugmentItem_Future struct{ *capnp.Future }

func (f AugmentItem_Future) Struct() (AugmentItem, error) {
	p, err := f.Future.Ptr()
	return AugmentItem(p.Struct()), err
}

type Emote capnp.Struct

// Emote_TypeID is the unique identifier for the type Emote.
const Emote_TypeID = 0xcff0b4cd24d99860

func NewEmote(s *capnp.Segment) (Emote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Emote(st), err
}

func NewRootEmote(s *capnp.Segment) (Emote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Emote(st), err
}

func ReadRootEmote(msg *capnp.Message) (Emote, error) {
	root, err := msg.Root()
	return Emote(root.Struct()), err
}

func (s Emote) String() string {
	str, _ := text.Marshal(0xcff0b4cd24d99860, capnp.Struct(s))
	return str
}

func (s Emote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Emote) DecodeFromPtr(p capnp.Ptr) Emote {
	return Emote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Emote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Emote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Emote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Emote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Emote) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Emote) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Emote) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Emote) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Emote_List is a list of Emote.
type Emote_List = capnp.StructList[Emote]

// NewEmote creates a new list of Emote.
func NewEmote_List(s *capnp.Segment, sz int32) (Emote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Emote](l), err
}

// Emote_Future is a wrapper for a Emote promised by a client call.
type Emote_Future struct{ *capnp.Future }

func (f Emote_Future) Struct() (Emote, error) {
	p, err := f.Future.Ptr()
	return Emote(p.Struct()), err
}

type Inspect capnp.Struct

// Inspect_TypeID is the unique identifier for the type Inspect.
const Inspect_TypeID = 0x8169b9320fb13d79

func NewInspect(s *capnp.Segment) (Inspect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Inspect(st), err
}

func NewRootInspect(s *capnp.Segment) (Inspect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Inspect(st), err
}

func ReadRootInspect(msg *capnp.Message) (Inspect, error) {
	root, err := msg.Root()
	return Inspect(root.Struct()), err
}

func (s Inspect) String() string {
	str, _ := text.Marshal(0x8169b9320fb13d79, capnp.Struct(s))
	return str
}

func (s Inspect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Inspect) DecodeFromPtr(p capnp.Ptr) Inspect {
	return Inspect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Inspect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Inspect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Inspect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Inspect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Inspect) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Inspect) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Inspect) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Inspect) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Inspect_List is a list of Inspect.
type Inspect_List = capnp.StructList[Inspect]

// NewInspect creates a new list of Inspect.
func NewInspect_List(s *capnp.Segment, sz int32) (Inspect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Inspect](l), err
}

// Inspect_Future is a wrapper for a Inspect promised by a client call.
type Inspect_Future struct{ *capnp.Future }

func (f Inspect_Future) Struct() (Inspect, error) {
	p, err := f.Future.Ptr()
	return Inspect(p.Struct()), err
}

type InspectResponse capnp.Struct

// InspectResponse_TypeID is the unique identifier for the type InspectResponse.
const InspectResponse_TypeID = 0x9f325734076f5253

func NewInspectResponse(s *capnp.Segment) (InspectResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InspectResponse(st), err
}

func NewRootInspectResponse(s *capnp.Segment) (InspectResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InspectResponse(st), err
}

func ReadRootInspectResponse(msg *capnp.Message) (InspectResponse, error) {
	root, err := msg.Root()
	return InspectResponse(root.Struct()), err
}

func (s InspectResponse) String() string {
	str, _ := text.Marshal(0x9f325734076f5253, capnp.Struct(s))
	return str
}

func (s InspectResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InspectResponse) DecodeFromPtr(p capnp.Ptr) InspectResponse {
	return InspectResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InspectResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InspectResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InspectResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InspectResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InspectResponse) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InspectResponse) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InspectResponse) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InspectResponse) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InspectResponse) Itemnames() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return StringList_List(p.List()), err
}

func (s InspectResponse) HasItemnames() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InspectResponse) SetItemnames(v StringList_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemnames sets the itemnames field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s InspectResponse) NewItemnames(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s InspectResponse) Itemicons() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s InspectResponse) HasItemicons() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InspectResponse) SetItemicons(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItemicons sets the itemicons field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s InspectResponse) NewItemicons(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s InspectResponse) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s InspectResponse) HasText() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InspectResponse) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s InspectResponse) SetText(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// InspectResponse_List is a list of InspectResponse.
type InspectResponse_List = capnp.StructList[InspectResponse]

// NewInspectResponse creates a new list of InspectResponse.
func NewInspectResponse_List(s *capnp.Segment, sz int32) (InspectResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[InspectResponse](l), err
}

// InspectResponse_Future is a wrapper for a InspectResponse promised by a client call.
type InspectResponse_Future struct{ *capnp.Future }

func (f InspectResponse_Future) Struct() (InspectResponse, error) {
	p, err := f.Future.Ptr()
	return InspectResponse(p.Struct()), err
}

type SetDataRate capnp.Struct

// SetDataRate_TypeID is the unique identifier for the type SetDataRate.
const SetDataRate_TypeID = 0xe8dc5ddc1cdb5438

func NewSetDataRate(s *capnp.Segment) (SetDataRate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetDataRate(st), err
}

func NewRootSetDataRate(s *capnp.Segment) (SetDataRate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetDataRate(st), err
}

func ReadRootSetDataRate(msg *capnp.Message) (SetDataRate, error) {
	root, err := msg.Root()
	return SetDataRate(root.Struct()), err
}

func (s SetDataRate) String() string {
	str, _ := text.Marshal(0xe8dc5ddc1cdb5438, capnp.Struct(s))
	return str
}

func (s SetDataRate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetDataRate) DecodeFromPtr(p capnp.Ptr) SetDataRate {
	return SetDataRate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetDataRate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetDataRate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetDataRate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetDataRate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetDataRate) Newdatarate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s SetDataRate) SetNewdatarate(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// SetDataRate_List is a list of SetDataRate.
type SetDataRate_List = capnp.StructList[SetDataRate]

// NewSetDataRate creates a new list of SetDataRate.
func NewSetDataRate_List(s *capnp.Segment, sz int32) (SetDataRate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetDataRate](l), err
}

// SetDataRate_Future is a wrapper for a SetDataRate promised by a client call.
type SetDataRate_Future struct{ *capnp.Future }

func (f SetDataRate_Future) Struct() (SetDataRate, error) {
	p, err := f.Future.Ptr()
	return SetDataRate(p.Struct()), err
}

type SetServerFilter capnp.Struct

// SetServerFilter_TypeID is the unique identifier for the type SetServerFilter.
const SetServerFilter_TypeID = 0x8acccc8118bd1f80

func NewSetServerFilter(s *capnp.Segment) (SetServerFilter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilter(st), err
}

func NewRootSetServerFilter(s *capnp.Segment) (SetServerFilter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilter(st), err
}

func ReadRootSetServerFilter(msg *capnp.Message) (SetServerFilter, error) {
	root, err := msg.Root()
	return SetServerFilter(root.Struct()), err
}

func (s SetServerFilter) String() string {
	str, _ := text.Marshal(0x8acccc8118bd1f80, capnp.Struct(s))
	return str
}

func (s SetServerFilter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetServerFilter) DecodeFromPtr(p capnp.Ptr) SetServerFilter {
	return SetServerFilter(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetServerFilter) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetServerFilter) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetServerFilter) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetServerFilter) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetServerFilter) Filters() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s SetServerFilter) HasFilters() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetServerFilter) SetFilters(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFilters sets the filters field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s SetServerFilter) NewFilters(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SetServerFilter_List is a list of SetServerFilter.
type SetServerFilter_List = capnp.StructList[SetServerFilter]

// NewSetServerFilter creates a new list of SetServerFilter.
func NewSetServerFilter_List(s *capnp.Segment, sz int32) (SetServerFilter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SetServerFilter](l), err
}

// SetServerFilter_Future is a wrapper for a SetServerFilter promised by a client call.
type SetServerFilter_Future struct{ *capnp.Future }

func (f SetServerFilter_Future) Struct() (SetServerFilter, error) {
	p, err := f.Future.Ptr()
	return SetServerFilter(p.Struct()), err
}

type SetServerFilterAck capnp.Struct

// SetServerFilterAck_TypeID is the unique identifier for the type SetServerFilterAck.
const SetServerFilterAck_TypeID = 0xb2ea7b1704b448ca

func NewSetServerFilterAck(s *capnp.Segment) (SetServerFilterAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilterAck(st), err
}

func NewRootSetServerFilterAck(s *capnp.Segment) (SetServerFilterAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilterAck(st), err
}

func ReadRootSetServerFilterAck(msg *capnp.Message) (SetServerFilterAck, error) {
	root, err := msg.Root()
	return SetServerFilterAck(root.Struct()), err
}

func (s SetServerFilterAck) String() string {
	str, _ := text.Marshal(0xb2ea7b1704b448ca, capnp.Struct(s))
	return str
}

func (s SetServerFilterAck) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetServerFilterAck) DecodeFromPtr(p capnp.Ptr) SetServerFilterAck {
	return SetServerFilterAck(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetServerFilterAck) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetServerFilterAck) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetServerFilterAck) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetServerFilterAck) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetServerFilterAck) Blank() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s SetServerFilterAck) HasBlank() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetServerFilterAck) SetBlank(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBlank sets the blank field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s SetServerFilterAck) NewBlank(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SetServerFilterAck_List is a list of SetServerFilterAck.
type SetServerFilterAck_List = capnp.StructList[SetServerFilterAck]

// NewSetServerFilterAck creates a new list of SetServerFilterAck.
func NewSetServerFilterAck_List(s *capnp.Segment, sz int32) (SetServerFilterAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SetServerFilterAck](l), err
}

// SetServerFilterAck_Future is a wrapper for a SetServerFilterAck promised by a client call.
type SetServerFilterAck_Future struct{ *capnp.Future }

func (f SetServerFilterAck_Future) Struct() (SetServerFilterAck, error) {
	p, err := f.Future.Ptr()
	return SetServerFilterAck(p.Struct()), err
}

type IncreaseStat capnp.Struct

// IncreaseStat_TypeID is the unique identifier for the type IncreaseStat.
const IncreaseStat_TypeID = 0xf1cccb02e7af0dd8

func NewIncreaseStat(s *capnp.Segment) (IncreaseStat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0})
	return IncreaseStat(st), err
}

func NewRootIncreaseStat(s *capnp.Segment) (IncreaseStat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0})
	return IncreaseStat(st), err
}

func ReadRootIncreaseStat(msg *capnp.Message) (IncreaseStat, error) {
	root, err := msg.Root()
	return IncreaseStat(root.Struct()), err
}

func (s IncreaseStat) String() string {
	str, _ := text.Marshal(0xf1cccb02e7af0dd8, capnp.Struct(s))
	return str
}

func (s IncreaseStat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IncreaseStat) DecodeFromPtr(p capnp.Ptr) IncreaseStat {
	return IncreaseStat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IncreaseStat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IncreaseStat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IncreaseStat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IncreaseStat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IncreaseStat) Str() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s IncreaseStat) SetStr(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s IncreaseStat) Sta() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s IncreaseStat) SetSta(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s IncreaseStat) Agi() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s IncreaseStat) SetAgi(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s IncreaseStat) Dex() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s IncreaseStat) SetDex(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s IncreaseStat) Int() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s IncreaseStat) SetInt(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s IncreaseStat) Wis() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s IncreaseStat) SetWis(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s IncreaseStat) Cha() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s IncreaseStat) SetCha(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s IncreaseStat) Fire() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s IncreaseStat) SetFire(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s IncreaseStat) Cold() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s IncreaseStat) SetCold(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s IncreaseStat) Magic() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s IncreaseStat) SetMagic(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s IncreaseStat) Poison() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s IncreaseStat) SetPoison(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s IncreaseStat) Disease() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s IncreaseStat) SetDisease(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s IncreaseStat) Str2() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s IncreaseStat) SetStr2(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s IncreaseStat) Sta2() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s IncreaseStat) SetSta2(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s IncreaseStat) Agi2() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s IncreaseStat) SetAgi2(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s IncreaseStat) Dex2() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s IncreaseStat) SetDex2(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s IncreaseStat) Int2() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s IncreaseStat) SetInt2(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s IncreaseStat) Wis2() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s IncreaseStat) SetWis2(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s IncreaseStat) Cha2() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s IncreaseStat) SetCha2(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s IncreaseStat) Fire2() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s IncreaseStat) SetFire2(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s IncreaseStat) Cold2() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s IncreaseStat) SetCold2(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s IncreaseStat) Magic2() int32 {
	return int32(capnp.Struct(s).Uint32(84))
}

func (s IncreaseStat) SetMagic2(v int32) {
	capnp.Struct(s).SetUint32(84, uint32(v))
}

func (s IncreaseStat) Poison2() int32 {
	return int32(capnp.Struct(s).Uint32(88))
}

func (s IncreaseStat) SetPoison2(v int32) {
	capnp.Struct(s).SetUint32(88, uint32(v))
}

func (s IncreaseStat) Disease2() int32 {
	return int32(capnp.Struct(s).Uint32(92))
}

func (s IncreaseStat) SetDisease2(v int32) {
	capnp.Struct(s).SetUint32(92, uint32(v))
}

// IncreaseStat_List is a list of IncreaseStat.
type IncreaseStat_List = capnp.StructList[IncreaseStat]

// NewIncreaseStat creates a new list of IncreaseStat.
func NewIncreaseStat_List(s *capnp.Segment, sz int32) (IncreaseStat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0}, sz)
	return capnp.StructList[IncreaseStat](l), err
}

// IncreaseStat_Future is a wrapper for a IncreaseStat promised by a client call.
type IncreaseStat_Future struct{ *capnp.Future }

func (f IncreaseStat_Future) Struct() (IncreaseStat, error) {
	p, err := f.Future.Ptr()
	return IncreaseStat(p.Struct()), err
}

type GMName capnp.Struct

// GMName_TypeID is the unique identifier for the type GMName.
const GMName_TypeID = 0x84ae33ececbdf2f2

func NewGMName(s *capnp.Segment) (GMName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GMName(st), err
}

func NewRootGMName(s *capnp.Segment) (GMName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GMName(st), err
}

func ReadRootGMName(msg *capnp.Message) (GMName, error) {
	root, err := msg.Root()
	return GMName(root.Struct()), err
}

func (s GMName) String() string {
	str, _ := text.Marshal(0x84ae33ececbdf2f2, capnp.Struct(s))
	return str
}

func (s GMName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMName) DecodeFromPtr(p capnp.Ptr) GMName {
	return GMName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMName) Oldname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMName) HasOldname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMName) OldnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMName) SetOldname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMName) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMName) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMName) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMName) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMName) Newname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GMName) HasNewname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GMName) NewnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GMName) SetNewname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GMName) Badname() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMName) SetBadname(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GMName_List is a list of GMName.
type GMName_List = capnp.StructList[GMName]

// NewGMName creates a new list of GMName.
func NewGMName_List(s *capnp.Segment, sz int32) (GMName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[GMName](l), err
}

// GMName_Future is a wrapper for a GMName promised by a client call.
type GMName_Future struct{ *capnp.Future }

func (f GMName_Future) Struct() (GMName, error) {
	p, err := f.Future.Ptr()
	return GMName(p.Struct()), err
}

type GMDelCorpse capnp.Struct

// GMDelCorpse_TypeID is the unique identifier for the type GMDelCorpse.
const GMDelCorpse_TypeID = 0xeafef4c5dcc4b5b5

func NewGMDelCorpse(s *capnp.Segment) (GMDelCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMDelCorpse(st), err
}

func NewRootGMDelCorpse(s *capnp.Segment) (GMDelCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMDelCorpse(st), err
}

func ReadRootGMDelCorpse(msg *capnp.Message) (GMDelCorpse, error) {
	root, err := msg.Root()
	return GMDelCorpse(root.Struct()), err
}

func (s GMDelCorpse) String() string {
	str, _ := text.Marshal(0xeafef4c5dcc4b5b5, capnp.Struct(s))
	return str
}

func (s GMDelCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMDelCorpse) DecodeFromPtr(p capnp.Ptr) GMDelCorpse {
	return GMDelCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMDelCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMDelCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMDelCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMDelCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMDelCorpse) Corpsename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMDelCorpse) HasCorpsename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMDelCorpse) CorpsenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMDelCorpse) SetCorpsename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMDelCorpse) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMDelCorpse) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMDelCorpse) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMDelCorpse) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMDelCorpse_List is a list of GMDelCorpse.
type GMDelCorpse_List = capnp.StructList[GMDelCorpse]

// NewGMDelCorpse creates a new list of GMDelCorpse.
func NewGMDelCorpse_List(s *capnp.Segment, sz int32) (GMDelCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMDelCorpse](l), err
}

// GMDelCorpse_Future is a wrapper for a GMDelCorpse promised by a client call.
type GMDelCorpse_Future struct{ *capnp.Future }

func (f GMDelCorpse_Future) Struct() (GMDelCorpse, error) {
	p, err := f.Future.Ptr()
	return GMDelCorpse(p.Struct()), err
}

type GMKick capnp.Struct

// GMKick_TypeID is the unique identifier for the type GMKick.
const GMKick_TypeID = 0xb7c78f3b8eaa6d37

func NewGMKick(s *capnp.Segment) (GMKick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKick(st), err
}

func NewRootGMKick(s *capnp.Segment) (GMKick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKick(st), err
}

func ReadRootGMKick(msg *capnp.Message) (GMKick, error) {
	root, err := msg.Root()
	return GMKick(root.Struct()), err
}

func (s GMKick) String() string {
	str, _ := text.Marshal(0xb7c78f3b8eaa6d37, capnp.Struct(s))
	return str
}

func (s GMKick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMKick) DecodeFromPtr(p capnp.Ptr) GMKick {
	return GMKick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMKick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMKick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMKick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMKick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMKick) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMKick) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMKick) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMKick) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMKick) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMKick) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMKick) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMKick) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMKick_List is a list of GMKick.
type GMKick_List = capnp.StructList[GMKick]

// NewGMKick creates a new list of GMKick.
func NewGMKick_List(s *capnp.Segment, sz int32) (GMKick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMKick](l), err
}

// GMKick_Future is a wrapper for a GMKick promised by a client call.
type GMKick_Future struct{ *capnp.Future }

func (f GMKick_Future) Struct() (GMKick, error) {
	p, err := f.Future.Ptr()
	return GMKick(p.Struct()), err
}

type GMKill capnp.Struct

// GMKill_TypeID is the unique identifier for the type GMKill.
const GMKill_TypeID = 0xf047782143ce741d

func NewGMKill(s *capnp.Segment) (GMKill, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKill(st), err
}

func NewRootGMKill(s *capnp.Segment) (GMKill, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKill(st), err
}

func ReadRootGMKill(msg *capnp.Message) (GMKill, error) {
	root, err := msg.Root()
	return GMKill(root.Struct()), err
}

func (s GMKill) String() string {
	str, _ := text.Marshal(0xf047782143ce741d, capnp.Struct(s))
	return str
}

func (s GMKill) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMKill) DecodeFromPtr(p capnp.Ptr) GMKill {
	return GMKill(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMKill) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMKill) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMKill) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMKill) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMKill) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMKill) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMKill) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMKill) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMKill) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMKill) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMKill) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMKill) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMKill_List is a list of GMKill.
type GMKill_List = capnp.StructList[GMKill]

// NewGMKill creates a new list of GMKill.
func NewGMKill_List(s *capnp.Segment, sz int32) (GMKill_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMKill](l), err
}

// GMKill_Future is a wrapper for a GMKill promised by a client call.
type GMKill_Future struct{ *capnp.Future }

func (f GMKill_Future) Struct() (GMKill, error) {
	p, err := f.Future.Ptr()
	return GMKill(p.Struct()), err
}

type GMEmoteZone capnp.Struct

// GMEmoteZone_TypeID is the unique identifier for the type GMEmoteZone.
const GMEmoteZone_TypeID = 0x82e8c67d0acc92ee

func NewGMEmoteZone(s *capnp.Segment) (GMEmoteZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GMEmoteZone(st), err
}

func NewRootGMEmoteZone(s *capnp.Segment) (GMEmoteZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GMEmoteZone(st), err
}

func ReadRootGMEmoteZone(msg *capnp.Message) (GMEmoteZone, error) {
	root, err := msg.Root()
	return GMEmoteZone(root.Struct()), err
}

func (s GMEmoteZone) String() string {
	str, _ := text.Marshal(0x82e8c67d0acc92ee, capnp.Struct(s))
	return str
}

func (s GMEmoteZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMEmoteZone) DecodeFromPtr(p capnp.Ptr) GMEmoteZone {
	return GMEmoteZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMEmoteZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMEmoteZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMEmoteZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMEmoteZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMEmoteZone) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMEmoteZone) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMEmoteZone) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMEmoteZone) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GMEmoteZone_List is a list of GMEmoteZone.
type GMEmoteZone_List = capnp.StructList[GMEmoteZone]

// NewGMEmoteZone creates a new list of GMEmoteZone.
func NewGMEmoteZone_List(s *capnp.Segment, sz int32) (GMEmoteZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GMEmoteZone](l), err
}

// GMEmoteZone_Future is a wrapper for a GMEmoteZone promised by a client call.
type GMEmoteZone_Future struct{ *capnp.Future }

func (f GMEmoteZone_Future) Struct() (GMEmoteZone, error) {
	p, err := f.Future.Ptr()
	return GMEmoteZone(p.Struct()), err
}

type BookText capnp.Struct

// BookText_TypeID is the unique identifier for the type BookText.
const BookText_TypeID = 0xb854b850a845d36e

func NewBookText(s *capnp.Segment) (BookText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookText(st), err
}

func NewRootBookText(s *capnp.Segment) (BookText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookText(st), err
}

func ReadRootBookText(msg *capnp.Message) (BookText, error) {
	root, err := msg.Root()
	return BookText(root.Struct()), err
}

func (s BookText) String() string {
	str, _ := text.Marshal(0xb854b850a845d36e, capnp.Struct(s))
	return str
}

func (s BookText) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BookText) DecodeFromPtr(p capnp.Ptr) BookText {
	return BookText(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BookText) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BookText) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BookText) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BookText) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BookText) Window() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BookText) SetWindow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BookText) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BookText) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BookText) Booktext() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BookText) HasBooktext() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BookText) BooktextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BookText) SetBooktext(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BookText_List is a list of BookText.
type BookText_List = capnp.StructList[BookText]

// NewBookText creates a new list of BookText.
func NewBookText_List(s *capnp.Segment, sz int32) (BookText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BookText](l), err
}

// BookText_Future is a wrapper for a BookText promised by a client call.
type BookText_Future struct{ *capnp.Future }

func (f BookText_Future) Struct() (BookText, error) {
	p, err := f.Future.Ptr()
	return BookText(p.Struct()), err
}

type BookRequest capnp.Struct

// BookRequest_TypeID is the unique identifier for the type BookRequest.
const BookRequest_TypeID = 0x82c483a4cf75cbe3

func NewBookRequest(s *capnp.Segment) (BookRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookRequest(st), err
}

func NewRootBookRequest(s *capnp.Segment) (BookRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookRequest(st), err
}

func ReadRootBookRequest(msg *capnp.Message) (BookRequest, error) {
	root, err := msg.Root()
	return BookRequest(root.Struct()), err
}

func (s BookRequest) String() string {
	str, _ := text.Marshal(0x82c483a4cf75cbe3, capnp.Struct(s))
	return str
}

func (s BookRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BookRequest) DecodeFromPtr(p capnp.Ptr) BookRequest {
	return BookRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BookRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BookRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BookRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BookRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BookRequest) Window() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BookRequest) SetWindow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BookRequest) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BookRequest) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BookRequest) Txtfile() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BookRequest) HasTxtfile() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BookRequest) TxtfileBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BookRequest) SetTxtfile(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BookRequest_List is a list of BookRequest.
type BookRequest_List = capnp.StructList[BookRequest]

// NewBookRequest creates a new list of BookRequest.
func NewBookRequest_List(s *capnp.Segment, sz int32) (BookRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BookRequest](l), err
}

// BookRequest_Future is a wrapper for a BookRequest promised by a client call.
type BookRequest_Future struct{ *capnp.Future }

func (f BookRequest_Future) Struct() (BookRequest, error) {
	p, err := f.Future.Ptr()
	return BookRequest(p.Struct()), err
}

type Object capnp.Struct

// Object_TypeID is the unique identifier for the type Object.
const Object_TypeID = 0x9c833cee78c1a396

func NewObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return Object(st), err
}

func NewRootObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return Object(st), err
}

func ReadRootObject(msg *capnp.Message) (Object, error) {
	root, err := msg.Root()
	return Object(root.Struct()), err
}

func (s Object) String() string {
	str, _ := text.Marshal(0x9c833cee78c1a396, capnp.Struct(s))
	return str
}

func (s Object) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object) DecodeFromPtr(p capnp.Ptr) Object {
	return Object(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object) LinkedListAddr() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Object) HasLinkedListAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object) SetLinkedListAddr(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLinkedListAddr sets the linkedListAddr field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Object) NewLinkedListAddr(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Object) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Object) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Object) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Object) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Object) ZoneInstance() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Object) SetZoneInstance(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Object) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Object) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Object) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Object) SetZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Object) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Object) SetX(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Object) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Object) SetY(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Object) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Object) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Object) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Object) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Object) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Object) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Object) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// Object_List is a list of Object.
type Object_List = capnp.StructList[Object]

// NewObject creates a new list of Object.
func NewObject_List(s *capnp.Segment, sz int32) (Object_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[Object](l), err
}

// Object_Future is a wrapper for a Object promised by a client call.
type Object_Future struct{ *capnp.Future }

func (f Object_Future) Struct() (Object, error) {
	p, err := f.Future.Ptr()
	return Object(p.Struct()), err
}

type ClickObject capnp.Struct

// ClickObject_TypeID is the unique identifier for the type ClickObject.
const ClickObject_TypeID = 0xf7af0983a9ca61c5

func NewClickObject(s *capnp.Segment) (ClickObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClickObject(st), err
}

func NewRootClickObject(s *capnp.Segment) (ClickObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClickObject(st), err
}

func ReadRootClickObject(msg *capnp.Message) (ClickObject, error) {
	root, err := msg.Root()
	return ClickObject(root.Struct()), err
}

func (s ClickObject) String() string {
	str, _ := text.Marshal(0xf7af0983a9ca61c5, capnp.Struct(s))
	return str
}

func (s ClickObject) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObject) DecodeFromPtr(p capnp.Ptr) ClickObject {
	return ClickObject(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObject) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObject) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObject) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObject) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObject) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObject) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObject) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObject) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ClickObject_List is a list of ClickObject.
type ClickObject_List = capnp.StructList[ClickObject]

// NewClickObject creates a new list of ClickObject.
func NewClickObject_List(s *capnp.Segment, sz int32) (ClickObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ClickObject](l), err
}

// ClickObject_Future is a wrapper for a ClickObject promised by a client call.
type ClickObject_Future struct{ *capnp.Future }

func (f ClickObject_Future) Struct() (ClickObject, error) {
	p, err := f.Future.Ptr()
	return ClickObject(p.Struct()), err
}

type ClickObjectAction capnp.Struct

// ClickObjectAction_TypeID is the unique identifier for the type ClickObjectAction.
const ClickObjectAction_TypeID = 0x998ca559e52e226b

func NewClickObjectAction(s *capnp.Segment) (ClickObjectAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAction(st), err
}

func NewRootClickObjectAction(s *capnp.Segment) (ClickObjectAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAction(st), err
}

func ReadRootClickObjectAction(msg *capnp.Message) (ClickObjectAction, error) {
	root, err := msg.Root()
	return ClickObjectAction(root.Struct()), err
}

func (s ClickObjectAction) String() string {
	str, _ := text.Marshal(0x998ca559e52e226b, capnp.Struct(s))
	return str
}

func (s ClickObjectAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObjectAction) DecodeFromPtr(p capnp.Ptr) ClickObjectAction {
	return ClickObjectAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObjectAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObjectAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObjectAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObjectAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObjectAction) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObjectAction) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObjectAction) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObjectAction) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickObjectAction) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickObjectAction) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickObjectAction) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickObjectAction) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ClickObjectAction) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ClickObjectAction) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ClickObjectAction) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClickObjectAction) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickObjectAction) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClickObjectAction) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClickObjectAction_List is a list of ClickObjectAction.
type ClickObjectAction_List = capnp.StructList[ClickObjectAction]

// NewClickObjectAction creates a new list of ClickObjectAction.
func NewClickObjectAction_List(s *capnp.Segment, sz int32) (ClickObjectAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ClickObjectAction](l), err
}

// ClickObjectAction_Future is a wrapper for a ClickObjectAction promised by a client call.
type ClickObjectAction_Future struct{ *capnp.Future }

func (f ClickObjectAction_Future) Struct() (ClickObjectAction, error) {
	p, err := f.Future.Ptr()
	return ClickObjectAction(p.Struct()), err
}

type Shielding capnp.Struct

// Shielding_TypeID is the unique identifier for the type Shielding.
const Shielding_TypeID = 0xa916afef9cb49a54

func NewShielding(s *capnp.Segment) (Shielding, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Shielding(st), err
}

func NewRootShielding(s *capnp.Segment) (Shielding, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Shielding(st), err
}

func ReadRootShielding(msg *capnp.Message) (Shielding, error) {
	root, err := msg.Root()
	return Shielding(root.Struct()), err
}

func (s Shielding) String() string {
	str, _ := text.Marshal(0xa916afef9cb49a54, capnp.Struct(s))
	return str
}

func (s Shielding) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Shielding) DecodeFromPtr(p capnp.Ptr) Shielding {
	return Shielding(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Shielding) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Shielding) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Shielding) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Shielding) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Shielding) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Shielding) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Shielding_List is a list of Shielding.
type Shielding_List = capnp.StructList[Shielding]

// NewShielding creates a new list of Shielding.
func NewShielding_List(s *capnp.Segment, sz int32) (Shielding_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Shielding](l), err
}

// Shielding_Future is a wrapper for a Shielding promised by a client call.
type Shielding_Future struct{ *capnp.Future }

func (f Shielding_Future) Struct() (Shielding, error) {
	p, err := f.Future.Ptr()
	return Shielding(p.Struct()), err
}

type ClickObjectAck capnp.Struct

// ClickObjectAck_TypeID is the unique identifier for the type ClickObjectAck.
const ClickObjectAck_TypeID = 0x93de0fbdc8643390

func NewClickObjectAck(s *capnp.Segment) (ClickObjectAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAck(st), err
}

func NewRootClickObjectAck(s *capnp.Segment) (ClickObjectAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAck(st), err
}

func ReadRootClickObjectAck(msg *capnp.Message) (ClickObjectAck, error) {
	root, err := msg.Root()
	return ClickObjectAck(root.Struct()), err
}

func (s ClickObjectAck) String() string {
	str, _ := text.Marshal(0x93de0fbdc8643390, capnp.Struct(s))
	return str
}

func (s ClickObjectAck) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObjectAck) DecodeFromPtr(p capnp.Ptr) ClickObjectAck {
	return ClickObjectAck(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObjectAck) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObjectAck) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObjectAck) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObjectAck) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObjectAck) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObjectAck) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObjectAck) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObjectAck) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickObjectAck) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickObjectAck) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickObjectAck) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickObjectAck) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ClickObjectAck) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ClickObjectAck) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ClickObjectAck) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClickObjectAck) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickObjectAck) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClickObjectAck) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClickObjectAck_List is a list of ClickObjectAck.
type ClickObjectAck_List = capnp.StructList[ClickObjectAck]

// NewClickObjectAck creates a new list of ClickObjectAck.
func NewClickObjectAck_List(s *capnp.Segment, sz int32) (ClickObjectAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ClickObjectAck](l), err
}

// ClickObjectAck_Future is a wrapper for a ClickObjectAck promised by a client call.
type ClickObjectAck_Future struct{ *capnp.Future }

func (f ClickObjectAck_Future) Struct() (ClickObjectAck, error) {
	p, err := f.Future.Ptr()
	return ClickObjectAck(p.Struct()), err
}

type CloseContainer capnp.Struct

// CloseContainer_TypeID is the unique identifier for the type CloseContainer.
const CloseContainer_TypeID = 0xfd58a2914a0296e2

func NewCloseContainer(s *capnp.Segment) (CloseContainer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CloseContainer(st), err
}

func NewRootCloseContainer(s *capnp.Segment) (CloseContainer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CloseContainer(st), err
}

func ReadRootCloseContainer(msg *capnp.Message) (CloseContainer, error) {
	root, err := msg.Root()
	return CloseContainer(root.Struct()), err
}

func (s CloseContainer) String() string {
	str, _ := text.Marshal(0xfd58a2914a0296e2, capnp.Struct(s))
	return str
}

func (s CloseContainer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CloseContainer) DecodeFromPtr(p capnp.Ptr) CloseContainer {
	return CloseContainer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CloseContainer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CloseContainer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CloseContainer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CloseContainer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CloseContainer) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CloseContainer) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CloseContainer) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CloseContainer) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CloseContainer) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CloseContainer) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// CloseContainer_List is a list of CloseContainer.
type CloseContainer_List = capnp.StructList[CloseContainer]

// NewCloseContainer creates a new list of CloseContainer.
func NewCloseContainer_List(s *capnp.Segment, sz int32) (CloseContainer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CloseContainer](l), err
}

// CloseContainer_Future is a wrapper for a CloseContainer promised by a client call.
type CloseContainer_Future struct{ *capnp.Future }

func (f CloseContainer_Future) Struct() (CloseContainer, error) {
	p, err := f.Future.Ptr()
	return CloseContainer(p.Struct()), err
}

type Door capnp.Struct

// Door_TypeID is the unique identifier for the type Door.
const Door_TypeID = 0xf9454e8612b10b69

func NewDoor(s *capnp.Segment) (Door, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Door(st), err
}

func NewRootDoor(s *capnp.Segment) (Door, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Door(st), err
}

func ReadRootDoor(msg *capnp.Message) (Door, error) {
	root, err := msg.Root()
	return Door(root.Struct()), err
}

func (s Door) String() string {
	str, _ := text.Marshal(0xf9454e8612b10b69, capnp.Struct(s))
	return str
}

func (s Door) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Door) DecodeFromPtr(p capnp.Ptr) Door {
	return Door(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Door) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Door) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Door) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Door) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Door) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Door) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Door) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Door) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Door) YPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Door) SetYPos(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Door) XPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Door) SetXPos(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Door) ZPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Door) SetZPos(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Door) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Door) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Door) Incline() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Door) SetIncline(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Door) Size() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Door) SetSize(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Door) DoorId() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Door) SetDoorId(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Door) Opentype() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Door) SetOpentype(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Door) StateAtSpawn() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Door) SetStateAtSpawn(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Door) InvertState() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Door) SetInvertState(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Door) DoorParam() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Door) SetDoorParam(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

// Door_List is a list of Door.
type Door_List = capnp.StructList[Door]

// NewDoor creates a new list of Door.
func NewDoor_List(s *capnp.Segment, sz int32) (Door_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Door](l), err
}

// Door_Future is a wrapper for a Door promised by a client call.
type Door_Future struct{ *capnp.Future }

func (f Door_Future) Struct() (Door, error) {
	p, err := f.Future.Ptr()
	return Door(p.Struct()), err
}

type DoorSpawns capnp.Struct

// DoorSpawns_TypeID is the unique identifier for the type DoorSpawns.
const DoorSpawns_TypeID = 0xf304800fc3af267f

func NewDoorSpawns(s *capnp.Segment) (DoorSpawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DoorSpawns(st), err
}

func NewRootDoorSpawns(s *capnp.Segment) (DoorSpawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DoorSpawns(st), err
}

func ReadRootDoorSpawns(msg *capnp.Message) (DoorSpawns, error) {
	root, err := msg.Root()
	return DoorSpawns(root.Struct()), err
}

func (s DoorSpawns) String() string {
	str, _ := text.Marshal(0xf304800fc3af267f, capnp.Struct(s))
	return str
}

func (s DoorSpawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DoorSpawns) DecodeFromPtr(p capnp.Ptr) DoorSpawns {
	return DoorSpawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DoorSpawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DoorSpawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DoorSpawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DoorSpawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DoorSpawns) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DoorSpawns) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DoorSpawns) Doors() (Door_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Door_List(p.List()), err
}

func (s DoorSpawns) HasDoors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DoorSpawns) SetDoors(v Door_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDoors sets the doors field to a newly
// allocated Door_List, preferring placement in s's segment.
func (s DoorSpawns) NewDoors(n int32) (Door_List, error) {
	l, err := NewDoor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Door_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DoorSpawns_List is a list of DoorSpawns.
type DoorSpawns_List = capnp.StructList[DoorSpawns]

// NewDoorSpawns creates a new list of DoorSpawns.
func NewDoorSpawns_List(s *capnp.Segment, sz int32) (DoorSpawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DoorSpawns](l), err
}

// DoorSpawns_Future is a wrapper for a DoorSpawns promised by a client call.
type DoorSpawns_Future struct{ *capnp.Future }

func (f DoorSpawns_Future) Struct() (DoorSpawns, error) {
	p, err := f.Future.Ptr()
	return DoorSpawns(p.Struct()), err
}

type ClickDoor capnp.Struct

// ClickDoor_TypeID is the unique identifier for the type ClickDoor.
const ClickDoor_TypeID = 0xa012f4912c4151f9

func NewClickDoor(s *capnp.Segment) (ClickDoor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ClickDoor(st), err
}

func NewRootClickDoor(s *capnp.Segment) (ClickDoor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ClickDoor(st), err
}

func ReadRootClickDoor(msg *capnp.Message) (ClickDoor, error) {
	root, err := msg.Root()
	return ClickDoor(root.Struct()), err
}

func (s ClickDoor) String() string {
	str, _ := text.Marshal(0xa012f4912c4151f9, capnp.Struct(s))
	return str
}

func (s ClickDoor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickDoor) DecodeFromPtr(p capnp.Ptr) ClickDoor {
	return ClickDoor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickDoor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickDoor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickDoor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickDoor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickDoor) Doorid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickDoor) SetDoorid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickDoor) Picklockskill() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickDoor) SetPicklockskill(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickDoor) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickDoor) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickDoor) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickDoor) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ClickDoor_List is a list of ClickDoor.
type ClickDoor_List = capnp.StructList[ClickDoor]

// NewClickDoor creates a new list of ClickDoor.
func NewClickDoor_List(s *capnp.Segment, sz int32) (ClickDoor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ClickDoor](l), err
}

// ClickDoor_Future is a wrapper for a ClickDoor promised by a client call.
type ClickDoor_Future struct{ *capnp.Future }

func (f ClickDoor_Future) Struct() (ClickDoor, error) {
	p, err := f.Future.Ptr()
	return ClickDoor(p.Struct()), err
}

type MoveDoor capnp.Struct

// MoveDoor_TypeID is the unique identifier for the type MoveDoor.
const MoveDoor_TypeID = 0x844fdb5787f2eb73

func NewMoveDoor(s *capnp.Segment) (MoveDoor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MoveDoor(st), err
}

func NewRootMoveDoor(s *capnp.Segment) (MoveDoor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MoveDoor(st), err
}

func ReadRootMoveDoor(msg *capnp.Message) (MoveDoor, error) {
	root, err := msg.Root()
	return MoveDoor(root.Struct()), err
}

func (s MoveDoor) String() string {
	str, _ := text.Marshal(0x844fdb5787f2eb73, capnp.Struct(s))
	return str
}

func (s MoveDoor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveDoor) DecodeFromPtr(p capnp.Ptr) MoveDoor {
	return MoveDoor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveDoor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveDoor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveDoor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveDoor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveDoor) Doorid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveDoor) SetDoorid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveDoor) Action() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveDoor) SetAction(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// MoveDoor_List is a list of MoveDoor.
type MoveDoor_List = capnp.StructList[MoveDoor]

// NewMoveDoor creates a new list of MoveDoor.
func NewMoveDoor_List(s *capnp.Segment, sz int32) (MoveDoor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MoveDoor](l), err
}

// MoveDoor_Future is a wrapper for a MoveDoor promised by a client call.
type MoveDoor_Future struct{ *capnp.Future }

func (f MoveDoor_Future) Struct() (MoveDoor, error) {
	p, err := f.Future.Ptr()
	return MoveDoor(p.Struct()), err
}

type BecomeNPC capnp.Struct

// BecomeNPC_TypeID is the unique identifier for the type BecomeNPC.
const BecomeNPC_TypeID = 0xb4452aee08031161

func NewBecomeNPC(s *capnp.Segment) (BecomeNPC, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeNPC(st), err
}

func NewRootBecomeNPC(s *capnp.Segment) (BecomeNPC, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeNPC(st), err
}

func ReadRootBecomeNPC(msg *capnp.Message) (BecomeNPC, error) {
	root, err := msg.Root()
	return BecomeNPC(root.Struct()), err
}

func (s BecomeNPC) String() string {
	str, _ := text.Marshal(0xb4452aee08031161, capnp.Struct(s))
	return str
}

func (s BecomeNPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeNPC) DecodeFromPtr(p capnp.Ptr) BecomeNPC {
	return BecomeNPC(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeNPC) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeNPC) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeNPC) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeNPC) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeNPC) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeNPC) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeNPC) Maxlevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BecomeNPC) SetMaxlevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BecomeNPC_List is a list of BecomeNPC.
type BecomeNPC_List = capnp.StructList[BecomeNPC]

// NewBecomeNPC creates a new list of BecomeNPC.
func NewBecomeNPC_List(s *capnp.Segment, sz int32) (BecomeNPC_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BecomeNPC](l), err
}

// BecomeNPC_Future is a wrapper for a BecomeNPC promised by a client call.
type BecomeNPC_Future struct{ *capnp.Future }

func (f BecomeNPC_Future) Struct() (BecomeNPC, error) {
	p, err := f.Future.Ptr()
	return BecomeNPC(p.Struct()), err
}

type Underworld capnp.Struct

// Underworld_TypeID is the unique identifier for the type Underworld.
const Underworld_TypeID = 0xf90c9c3f6c27a1c2

func NewUnderworld(s *capnp.Segment) (Underworld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Underworld(st), err
}

func NewRootUnderworld(s *capnp.Segment) (Underworld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Underworld(st), err
}

func ReadRootUnderworld(msg *capnp.Message) (Underworld, error) {
	root, err := msg.Root()
	return Underworld(root.Struct()), err
}

func (s Underworld) String() string {
	str, _ := text.Marshal(0xf90c9c3f6c27a1c2, capnp.Struct(s))
	return str
}

func (s Underworld) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Underworld) DecodeFromPtr(p capnp.Ptr) Underworld {
	return Underworld(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Underworld) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Underworld) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Underworld) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Underworld) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Underworld) Speed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Underworld) SetSpeed(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Underworld) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Underworld) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Underworld) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Underworld) SetX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Underworld) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Underworld) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// Underworld_List is a list of Underworld.
type Underworld_List = capnp.StructList[Underworld]

// NewUnderworld creates a new list of Underworld.
func NewUnderworld_List(s *capnp.Segment, sz int32) (Underworld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Underworld](l), err
}

// Underworld_Future is a wrapper for a Underworld promised by a client call.
type Underworld_Future struct{ *capnp.Future }

func (f Underworld_Future) Struct() (Underworld, error) {
	p, err := f.Future.Ptr()
	return Underworld(p.Struct()), err
}

type Resurrect capnp.Struct

// Resurrect_TypeID is the unique identifier for the type Resurrect.
const Resurrect_TypeID = 0xd68209c5c40dc249

func NewResurrect(s *capnp.Segment) (Resurrect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return Resurrect(st), err
}

func NewRootResurrect(s *capnp.Segment) (Resurrect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return Resurrect(st), err
}

func ReadRootResurrect(msg *capnp.Message) (Resurrect, error) {
	root, err := msg.Root()
	return Resurrect(root.Struct()), err
}

func (s Resurrect) String() string {
	str, _ := text.Marshal(0xd68209c5c40dc249, capnp.Struct(s))
	return str
}

func (s Resurrect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Resurrect) DecodeFromPtr(p capnp.Ptr) Resurrect {
	return Resurrect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Resurrect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Resurrect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Resurrect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Resurrect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Resurrect) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Resurrect) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Resurrect) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Resurrect) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Resurrect) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Resurrect) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Resurrect) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Resurrect) SetX(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Resurrect) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Resurrect) SetZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Resurrect) YourName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Resurrect) HasYourName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Resurrect) YourNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Resurrect) SetYourName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Resurrect) RezzerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Resurrect) HasRezzerName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Resurrect) RezzerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Resurrect) SetRezzerName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Resurrect) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Resurrect) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Resurrect) CorpseName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Resurrect) HasCorpseName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Resurrect) CorpseNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Resurrect) SetCorpseName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Resurrect) Action() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Resurrect) SetAction(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Resurrect_List is a list of Resurrect.
type Resurrect_List = capnp.StructList[Resurrect]

// NewResurrect creates a new list of Resurrect.
func NewResurrect_List(s *capnp.Segment, sz int32) (Resurrect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[Resurrect](l), err
}

// Resurrect_Future is a wrapper for a Resurrect promised by a client call.
type Resurrect_Future struct{ *capnp.Future }

func (f Resurrect_Future) Struct() (Resurrect, error) {
	p, err := f.Future.Ptr()
	return Resurrect(p.Struct()), err
}

type SetRunMode capnp.Struct

// SetRunMode_TypeID is the unique identifier for the type SetRunMode.
const SetRunMode_TypeID = 0xc1409e4be6401554

func NewSetRunMode(s *capnp.Segment) (SetRunMode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetRunMode(st), err
}

func NewRootSetRunMode(s *capnp.Segment) (SetRunMode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetRunMode(st), err
}

func ReadRootSetRunMode(msg *capnp.Message) (SetRunMode, error) {
	root, err := msg.Root()
	return SetRunMode(root.Struct()), err
}

func (s SetRunMode) String() string {
	str, _ := text.Marshal(0xc1409e4be6401554, capnp.Struct(s))
	return str
}

func (s SetRunMode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetRunMode) DecodeFromPtr(p capnp.Ptr) SetRunMode {
	return SetRunMode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetRunMode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetRunMode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetRunMode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetRunMode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetRunMode) Mode() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetRunMode) SetMode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// SetRunMode_List is a list of SetRunMode.
type SetRunMode_List = capnp.StructList[SetRunMode]

// NewSetRunMode creates a new list of SetRunMode.
func NewSetRunMode_List(s *capnp.Segment, sz int32) (SetRunMode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetRunMode](l), err
}

// SetRunMode_Future is a wrapper for a SetRunMode promised by a client call.
type SetRunMode_Future struct{ *capnp.Future }

func (f SetRunMode_Future) Struct() (SetRunMode, error) {
	p, err := f.Future.Ptr()
	return SetRunMode(p.Struct()), err
}

type EnvDamage2 capnp.Struct

// EnvDamage2_TypeID is the unique identifier for the type EnvDamage2.
const EnvDamage2_TypeID = 0xec5c7b07d1717d84

func NewEnvDamage2(s *capnp.Segment) (EnvDamage2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvDamage2(st), err
}

func NewRootEnvDamage2(s *capnp.Segment) (EnvDamage2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvDamage2(st), err
}

func ReadRootEnvDamage2(msg *capnp.Message) (EnvDamage2, error) {
	root, err := msg.Root()
	return EnvDamage2(root.Struct()), err
}

func (s EnvDamage2) String() string {
	str, _ := text.Marshal(0xec5c7b07d1717d84, capnp.Struct(s))
	return str
}

func (s EnvDamage2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvDamage2) DecodeFromPtr(p capnp.Ptr) EnvDamage2 {
	return EnvDamage2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvDamage2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvDamage2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvDamage2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvDamage2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvDamage2) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EnvDamage2) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EnvDamage2) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s EnvDamage2) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s EnvDamage2) Dmgtype() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s EnvDamage2) SetDmgtype(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s EnvDamage2) Constant() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s EnvDamage2) SetConstant(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// EnvDamage2_List is a list of EnvDamage2.
type EnvDamage2_List = capnp.StructList[EnvDamage2]

// NewEnvDamage2 creates a new list of EnvDamage2.
func NewEnvDamage2_List(s *capnp.Segment, sz int32) (EnvDamage2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[EnvDamage2](l), err
}

// EnvDamage2_Future is a wrapper for a EnvDamage2 promised by a client call.
type EnvDamage2_Future struct{ *capnp.Future }

func (f EnvDamage2_Future) Struct() (EnvDamage2, error) {
	p, err := f.Future.Ptr()
	return EnvDamage2(p.Struct()), err
}

type BazaarWindowStart capnp.Struct

// BazaarWindowStart_TypeID is the unique identifier for the type BazaarWindowStart.
const BazaarWindowStart_TypeID = 0x86f0f1c44a113f21

func NewBazaarWindowStart(s *capnp.Segment) (BazaarWindowStart, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarWindowStart(st), err
}

func NewRootBazaarWindowStart(s *capnp.Segment) (BazaarWindowStart, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarWindowStart(st), err
}

func ReadRootBazaarWindowStart(msg *capnp.Message) (BazaarWindowStart, error) {
	root, err := msg.Root()
	return BazaarWindowStart(root.Struct()), err
}

func (s BazaarWindowStart) String() string {
	str, _ := text.Marshal(0x86f0f1c44a113f21, capnp.Struct(s))
	return str
}

func (s BazaarWindowStart) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarWindowStart) DecodeFromPtr(p capnp.Ptr) BazaarWindowStart {
	return BazaarWindowStart(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarWindowStart) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarWindowStart) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarWindowStart) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarWindowStart) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarWindowStart) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarWindowStart) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// BazaarWindowStart_List is a list of BazaarWindowStart.
type BazaarWindowStart_List = capnp.StructList[BazaarWindowStart]

// NewBazaarWindowStart creates a new list of BazaarWindowStart.
func NewBazaarWindowStart_List(s *capnp.Segment, sz int32) (BazaarWindowStart_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BazaarWindowStart](l), err
}

// BazaarWindowStart_Future is a wrapper for a BazaarWindowStart promised by a client call.
type BazaarWindowStart_Future struct{ *capnp.Future }

func (f BazaarWindowStart_Future) Struct() (BazaarWindowStart, error) {
	p, err := f.Future.Ptr()
	return BazaarWindowStart(p.Struct()), err
}

type BazaarWelcome capnp.Struct

// BazaarWelcome_TypeID is the unique identifier for the type BazaarWelcome.
const BazaarWelcome_TypeID = 0x9c85c1e6d68aa499

func NewBazaarWelcome(s *capnp.Segment) (BazaarWelcome, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarWelcome(st), err
}

func NewRootBazaarWelcome(s *capnp.Segment) (BazaarWelcome, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarWelcome(st), err
}

func ReadRootBazaarWelcome(msg *capnp.Message) (BazaarWelcome, error) {
	root, err := msg.Root()
	return BazaarWelcome(root.Struct()), err
}

func (s BazaarWelcome) String() string {
	str, _ := text.Marshal(0x9c85c1e6d68aa499, capnp.Struct(s))
	return str
}

func (s BazaarWelcome) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarWelcome) DecodeFromPtr(p capnp.Ptr) BazaarWelcome {
	return BazaarWelcome(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarWelcome) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarWelcome) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarWelcome) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarWelcome) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarWelcome) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarWelcome) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarWelcome) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarWelcome) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarWelcome) Traders() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarWelcome) SetTraders(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarWelcome) Items() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarWelcome) SetItems(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BazaarWelcome_List is a list of BazaarWelcome.
type BazaarWelcome_List = capnp.StructList[BazaarWelcome]

// NewBazaarWelcome creates a new list of BazaarWelcome.
func NewBazaarWelcome_List(s *capnp.Segment, sz int32) (BazaarWelcome_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BazaarWelcome](l), err
}

// BazaarWelcome_Future is a wrapper for a BazaarWelcome promised by a client call.
type BazaarWelcome_Future struct{ *capnp.Future }

func (f BazaarWelcome_Future) Struct() (BazaarWelcome, error) {
	p, err := f.Future.Ptr()
	return BazaarWelcome(p.Struct()), err
}
func (p BazaarWelcome_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type BazaarSearch capnp.Struct

// BazaarSearch_TypeID is the unique identifier for the type BazaarSearch.
const BazaarSearch_TypeID = 0x9292e90285848d8e

func NewBazaarSearch(s *capnp.Segment) (BazaarSearch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return BazaarSearch(st), err
}

func NewRootBazaarSearch(s *capnp.Segment) (BazaarSearch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return BazaarSearch(st), err
}

func ReadRootBazaarSearch(msg *capnp.Message) (BazaarSearch, error) {
	root, err := msg.Root()
	return BazaarSearch(root.Struct()), err
}

func (s BazaarSearch) String() string {
	str, _ := text.Marshal(0x9292e90285848d8e, capnp.Struct(s))
	return str
}

func (s BazaarSearch) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarSearch) DecodeFromPtr(p capnp.Ptr) BazaarSearch {
	return BazaarSearch(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarSearch) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarSearch) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarSearch) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarSearch) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarSearch) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarSearch) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarSearch) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarSearch) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarSearch) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarSearch) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarSearch) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarSearch) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BazaarSearch) Race() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BazaarSearch) SetRace(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BazaarSearch) Stat() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BazaarSearch) SetStat(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BazaarSearch) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BazaarSearch) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s BazaarSearch) Type() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s BazaarSearch) SetType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s BazaarSearch) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BazaarSearch) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BazaarSearch) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BazaarSearch) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BazaarSearch) Minprice() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s BazaarSearch) SetMinprice(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s BazaarSearch) Maxprice() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s BazaarSearch) SetMaxprice(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s BazaarSearch) Minlevel() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s BazaarSearch) SetMinlevel(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s BazaarSearch) Maxlevel() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s BazaarSearch) SetMaxlevel(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

// BazaarSearch_List is a list of BazaarSearch.
type BazaarSearch_List = capnp.StructList[BazaarSearch]

// NewBazaarSearch creates a new list of BazaarSearch.
func NewBazaarSearch_List(s *capnp.Segment, sz int32) (BazaarSearch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[BazaarSearch](l), err
}

// BazaarSearch_Future is a wrapper for a BazaarSearch promised by a client call.
type BazaarSearch_Future struct{ *capnp.Future }

func (f BazaarSearch_Future) Struct() (BazaarSearch, error) {
	p, err := f.Future.Ptr()
	return BazaarSearch(p.Struct()), err
}
func (p BazaarSearch_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type BazaarInspect capnp.Struct

// BazaarInspect_TypeID is the unique identifier for the type BazaarInspect.
const BazaarInspect_TypeID = 0x940ac0b117677519

func NewBazaarInspect(s *capnp.Segment) (BazaarInspect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarInspect(st), err
}

func NewRootBazaarInspect(s *capnp.Segment) (BazaarInspect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarInspect(st), err
}

func ReadRootBazaarInspect(msg *capnp.Message) (BazaarInspect, error) {
	root, err := msg.Root()
	return BazaarInspect(root.Struct()), err
}

func (s BazaarInspect) String() string {
	str, _ := text.Marshal(0x940ac0b117677519, capnp.Struct(s))
	return str
}

func (s BazaarInspect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarInspect) DecodeFromPtr(p capnp.Ptr) BazaarInspect {
	return BazaarInspect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarInspect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarInspect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarInspect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarInspect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarInspect) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarInspect) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarInspect) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BazaarInspect) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarInspect) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BazaarInspect) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BazaarInspect_List is a list of BazaarInspect.
type BazaarInspect_List = capnp.StructList[BazaarInspect]

// NewBazaarInspect creates a new list of BazaarInspect.
func NewBazaarInspect_List(s *capnp.Segment, sz int32) (BazaarInspect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BazaarInspect](l), err
}

// BazaarInspect_Future is a wrapper for a BazaarInspect promised by a client call.
type BazaarInspect_Future struct{ *capnp.Future }

func (f BazaarInspect_Future) Struct() (BazaarInspect, error) {
	p, err := f.Future.Ptr()
	return BazaarInspect(p.Struct()), err
}

type BazaarReturnDone capnp.Struct

// BazaarReturnDone_TypeID is the unique identifier for the type BazaarReturnDone.
const BazaarReturnDone_TypeID = 0xbde69a9238be5e37

func NewBazaarReturnDone(s *capnp.Segment) (BazaarReturnDone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarReturnDone(st), err
}

func NewRootBazaarReturnDone(s *capnp.Segment) (BazaarReturnDone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarReturnDone(st), err
}

func ReadRootBazaarReturnDone(msg *capnp.Message) (BazaarReturnDone, error) {
	root, err := msg.Root()
	return BazaarReturnDone(root.Struct()), err
}

func (s BazaarReturnDone) String() string {
	str, _ := text.Marshal(0xbde69a9238be5e37, capnp.Struct(s))
	return str
}

func (s BazaarReturnDone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarReturnDone) DecodeFromPtr(p capnp.Ptr) BazaarReturnDone {
	return BazaarReturnDone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarReturnDone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarReturnDone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarReturnDone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarReturnDone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarReturnDone) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarReturnDone) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarReturnDone) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarReturnDone) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BazaarReturnDone_List is a list of BazaarReturnDone.
type BazaarReturnDone_List = capnp.StructList[BazaarReturnDone]

// NewBazaarReturnDone creates a new list of BazaarReturnDone.
func NewBazaarReturnDone_List(s *capnp.Segment, sz int32) (BazaarReturnDone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BazaarReturnDone](l), err
}

// BazaarReturnDone_Future is a wrapper for a BazaarReturnDone promised by a client call.
type BazaarReturnDone_Future struct{ *capnp.Future }

func (f BazaarReturnDone_Future) Struct() (BazaarReturnDone, error) {
	p, err := f.Future.Ptr()
	return BazaarReturnDone(p.Struct()), err
}

type BazaarSearchResults capnp.Struct

// BazaarSearchResults_TypeID is the unique identifier for the type BazaarSearchResults.
const BazaarSearchResults_TypeID = 0xcd102105578e2465

func NewBazaarSearchResults(s *capnp.Segment) (BazaarSearchResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BazaarSearchResults(st), err
}

func NewRootBazaarSearchResults(s *capnp.Segment) (BazaarSearchResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BazaarSearchResults(st), err
}

func ReadRootBazaarSearchResults(msg *capnp.Message) (BazaarSearchResults, error) {
	root, err := msg.Root()
	return BazaarSearchResults(root.Struct()), err
}

func (s BazaarSearchResults) String() string {
	str, _ := text.Marshal(0xcd102105578e2465, capnp.Struct(s))
	return str
}

func (s BazaarSearchResults) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarSearchResults) DecodeFromPtr(p capnp.Ptr) BazaarSearchResults {
	return BazaarSearchResults(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarSearchResults) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarSearchResults) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarSearchResults) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarSearchResults) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarSearchResults) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarSearchResults) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarSearchResults) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarSearchResults) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarSearchResults) SellerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarSearchResults) SetSellerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarSearchResults) NumItems() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarSearchResults) SetNumItems(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BazaarSearchResults) SerialNumber() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BazaarSearchResults) SetSerialNumber(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BazaarSearchResults) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BazaarSearchResults) HasItemName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BazaarSearchResults) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BazaarSearchResults) SetItemName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BazaarSearchResults) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BazaarSearchResults) SetCost(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BazaarSearchResults) ItemStat() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BazaarSearchResults) SetItemStat(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// BazaarSearchResults_List is a list of BazaarSearchResults.
type BazaarSearchResults_List = capnp.StructList[BazaarSearchResults]

// NewBazaarSearchResults creates a new list of BazaarSearchResults.
func NewBazaarSearchResults_List(s *capnp.Segment, sz int32) (BazaarSearchResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[BazaarSearchResults](l), err
}

// BazaarSearchResults_Future is a wrapper for a BazaarSearchResults promised by a client call.
type BazaarSearchResults_Future struct{ *capnp.Future }

func (f BazaarSearchResults_Future) Struct() (BazaarSearchResults, error) {
	p, err := f.Future.Ptr()
	return BazaarSearchResults(p.Struct()), err
}
func (p BazaarSearchResults_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type ServerSideFilters capnp.Struct

// ServerSideFilters_TypeID is the unique identifier for the type ServerSideFilters.
const ServerSideFilters_TypeID = 0xc54135596f07c87b

func NewServerSideFilters(s *capnp.Segment) (ServerSideFilters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ServerSideFilters(st), err
}

func NewRootServerSideFilters(s *capnp.Segment) (ServerSideFilters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ServerSideFilters(st), err
}

func ReadRootServerSideFilters(msg *capnp.Message) (ServerSideFilters, error) {
	root, err := msg.Root()
	return ServerSideFilters(root.Struct()), err
}

func (s ServerSideFilters) String() string {
	str, _ := text.Marshal(0xc54135596f07c87b, capnp.Struct(s))
	return str
}

func (s ServerSideFilters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerSideFilters) DecodeFromPtr(p capnp.Ptr) ServerSideFilters {
	return ServerSideFilters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerSideFilters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerSideFilters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerSideFilters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerSideFilters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerSideFilters) Clientattackfilters() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ServerSideFilters) SetClientattackfilters(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ServerSideFilters) Npcattackfilters() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ServerSideFilters) SetNpcattackfilters(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ServerSideFilters) Clientcastfilters() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ServerSideFilters) SetClientcastfilters(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ServerSideFilters) Npccastfilters() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ServerSideFilters) SetNpccastfilters(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ServerSideFilters_List is a list of ServerSideFilters.
type ServerSideFilters_List = capnp.StructList[ServerSideFilters]

// NewServerSideFilters creates a new list of ServerSideFilters.
func NewServerSideFilters_List(s *capnp.Segment, sz int32) (ServerSideFilters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ServerSideFilters](l), err
}

// ServerSideFilters_Future is a wrapper for a ServerSideFilters promised by a client call.
type ServerSideFilters_Future struct{ *capnp.Future }

func (f ServerSideFilters_Future) Struct() (ServerSideFilters, error) {
	p, err := f.Future.Ptr()
	return ServerSideFilters(p.Struct()), err
}

type ItemViewRequest capnp.Struct

// ItemViewRequest_TypeID is the unique identifier for the type ItemViewRequest.
const ItemViewRequest_TypeID = 0xc2c16fce3e3aa7eb

func NewItemViewRequest(s *capnp.Segment) (ItemViewRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemViewRequest(st), err
}

func NewRootItemViewRequest(s *capnp.Segment) (ItemViewRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemViewRequest(st), err
}

func ReadRootItemViewRequest(msg *capnp.Message) (ItemViewRequest, error) {
	root, err := msg.Root()
	return ItemViewRequest(root.Struct()), err
}

func (s ItemViewRequest) String() string {
	str, _ := text.Marshal(0xc2c16fce3e3aa7eb, capnp.Struct(s))
	return str
}

func (s ItemViewRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemViewRequest) DecodeFromPtr(p capnp.Ptr) ItemViewRequest {
	return ItemViewRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemViewRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemViewRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemViewRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemViewRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemViewRequest) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemViewRequest) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ItemViewRequest) Augments() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ItemViewRequest) HasAugments() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ItemViewRequest) SetAugments(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAugments sets the augments field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ItemViewRequest) NewAugments(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ItemViewRequest) LinkHash() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ItemViewRequest) SetLinkHash(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ItemViewRequest_List is a list of ItemViewRequest.
type ItemViewRequest_List = capnp.StructList[ItemViewRequest]

// NewItemViewRequest creates a new list of ItemViewRequest.
func NewItemViewRequest_List(s *capnp.Segment, sz int32) (ItemViewRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ItemViewRequest](l), err
}

// ItemViewRequest_Future is a wrapper for a ItemViewRequest promised by a client call.
type ItemViewRequest_Future struct{ *capnp.Future }

func (f ItemViewRequest_Future) Struct() (ItemViewRequest, error) {
	p, err := f.Future.Ptr()
	return ItemViewRequest(p.Struct()), err
}

type PickPocket capnp.Struct

// PickPocket_TypeID is the unique identifier for the type PickPocket.
const PickPocket_TypeID = 0xc4aef0c4dc45bc83

func NewPickPocket(s *capnp.Segment) (PickPocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PickPocket(st), err
}

func NewRootPickPocket(s *capnp.Segment) (PickPocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PickPocket(st), err
}

func ReadRootPickPocket(msg *capnp.Message) (PickPocket, error) {
	root, err := msg.Root()
	return PickPocket(root.Struct()), err
}

func (s PickPocket) String() string {
	str, _ := text.Marshal(0xc4aef0c4dc45bc83, capnp.Struct(s))
	return str
}

func (s PickPocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PickPocket) DecodeFromPtr(p capnp.Ptr) PickPocket {
	return PickPocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PickPocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PickPocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PickPocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PickPocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PickPocket) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PickPocket) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PickPocket) From() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PickPocket) SetFrom(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PickPocket) Myskill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PickPocket) SetMyskill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PickPocket) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PickPocket) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PickPocket) Coin() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PickPocket) SetCoin(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PickPocket) Lastsix() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s PickPocket) HasLastsix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PickPocket) SetLastsix(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLastsix sets the lastsix field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s PickPocket) NewLastsix(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PickPocket_List is a list of PickPocket.
type PickPocket_List = capnp.StructList[PickPocket]

// NewPickPocket creates a new list of PickPocket.
func NewPickPocket_List(s *capnp.Segment, sz int32) (PickPocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[PickPocket](l), err
}

// PickPocket_Future is a wrapper for a PickPocket promised by a client call.
type PickPocket_Future struct{ *capnp.Future }

func (f PickPocket_Future) Struct() (PickPocket, error) {
	p, err := f.Future.Ptr()
	return PickPocket(p.Struct()), err
}

type ActionPickPocket capnp.Struct

// ActionPickPocket_TypeID is the unique identifier for the type ActionPickPocket.
const ActionPickPocket_TypeID = 0xbe54ea0b18470782

func NewActionPickPocket(s *capnp.Segment) (ActionPickPocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ActionPickPocket(st), err
}

func NewRootActionPickPocket(s *capnp.Segment) (ActionPickPocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ActionPickPocket(st), err
}

func ReadRootActionPickPocket(msg *capnp.Message) (ActionPickPocket, error) {
	root, err := msg.Root()
	return ActionPickPocket(root.Struct()), err
}

func (s ActionPickPocket) String() string {
	str, _ := text.Marshal(0xbe54ea0b18470782, capnp.Struct(s))
	return str
}

func (s ActionPickPocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ActionPickPocket) DecodeFromPtr(p capnp.Ptr) ActionPickPocket {
	return ActionPickPocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ActionPickPocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ActionPickPocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ActionPickPocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ActionPickPocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ActionPickPocket) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ActionPickPocket) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ActionPickPocket) From() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ActionPickPocket) SetFrom(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ActionPickPocket) Myskill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ActionPickPocket) SetMyskill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ActionPickPocket) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ActionPickPocket) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ActionPickPocket) Coin() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ActionPickPocket) SetCoin(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ActionPickPocket) Itemname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ActionPickPocket) HasItemname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ActionPickPocket) ItemnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ActionPickPocket) SetItemname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ActionPickPocket_List is a list of ActionPickPocket.
type ActionPickPocket_List = capnp.StructList[ActionPickPocket]

// NewActionPickPocket creates a new list of ActionPickPocket.
func NewActionPickPocket_List(s *capnp.Segment, sz int32) (ActionPickPocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ActionPickPocket](l), err
}

// ActionPickPocket_Future is a wrapper for a ActionPickPocket promised by a client call.
type ActionPickPocket_Future struct{ *capnp.Future }

func (f ActionPickPocket_Future) Struct() (ActionPickPocket, error) {
	p, err := f.Future.Ptr()
	return ActionPickPocket(p.Struct()), err
}

type LogServer capnp.Struct

// LogServer_TypeID is the unique identifier for the type LogServer.
const LogServer_TypeID = 0xb74f1e7519f6fd40

func NewLogServer(s *capnp.Segment) (LogServer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LogServer(st), err
}

func NewRootLogServer(s *capnp.Segment) (LogServer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LogServer(st), err
}

func ReadRootLogServer(msg *capnp.Message) (LogServer, error) {
	root, err := msg.Root()
	return LogServer(root.Struct()), err
}

func (s LogServer) String() string {
	str, _ := text.Marshal(0xb74f1e7519f6fd40, capnp.Struct(s))
	return str
}

func (s LogServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LogServer) DecodeFromPtr(p capnp.Ptr) LogServer {
	return LogServer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LogServer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LogServer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LogServer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LogServer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LogServer) Worldshortname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LogServer) HasWorldshortname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LogServer) WorldshortnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LogServer) SetWorldshortname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// LogServer_List is a list of LogServer.
type LogServer_List = capnp.StructList[LogServer]

// NewLogServer creates a new list of LogServer.
func NewLogServer_List(s *capnp.Segment, sz int32) (LogServer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LogServer](l), err
}

// LogServer_Future is a wrapper for a LogServer promised by a client call.
type LogServer_Future struct{ *capnp.Future }

func (f LogServer_Future) Struct() (LogServer, error) {
	p, err := f.Future.Ptr()
	return LogServer(p.Struct()), err
}

type ClientError capnp.Struct

// ClientError_TypeID is the unique identifier for the type ClientError.
const ClientError_TypeID = 0xcf7084fe71119d92

func NewClientError(s *capnp.Segment) (ClientError, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientError(st), err
}

func NewRootClientError(s *capnp.Segment) (ClientError, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientError(st), err
}

func ReadRootClientError(msg *capnp.Message) (ClientError, error) {
	root, err := msg.Root()
	return ClientError(root.Struct()), err
}

func (s ClientError) String() string {
	str, _ := text.Marshal(0xcf7084fe71119d92, capnp.Struct(s))
	return str
}

func (s ClientError) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientError) DecodeFromPtr(p capnp.Ptr) ClientError {
	return ClientError(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientError) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientError) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientError) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientError) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientError) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientError) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientError) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientError) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClientError) CharacterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ClientError) HasCharacterName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClientError) CharacterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ClientError) SetCharacterName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ClientError) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ClientError) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ClientError) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ClientError) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ClientError_List is a list of ClientError.
type ClientError_List = capnp.StructList[ClientError]

// NewClientError creates a new list of ClientError.
func NewClientError_List(s *capnp.Segment, sz int32) (ClientError_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ClientError](l), err
}

// ClientError_Future is a wrapper for a ClientError promised by a client call.
type ClientError_Future struct{ *capnp.Future }

func (f ClientError_Future) Struct() (ClientError, error) {
	p, err := f.Future.Ptr()
	return ClientError(p.Struct()), err
}

type MobHealth capnp.Struct

// MobHealth_TypeID is the unique identifier for the type MobHealth.
const MobHealth_TypeID = 0xb915e75dd5f36b13

func NewMobHealth(s *capnp.Segment) (MobHealth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MobHealth(st), err
}

func NewRootMobHealth(s *capnp.Segment) (MobHealth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MobHealth(st), err
}

func ReadRootMobHealth(msg *capnp.Message) (MobHealth, error) {
	root, err := msg.Root()
	return MobHealth(root.Struct()), err
}

func (s MobHealth) String() string {
	str, _ := text.Marshal(0xb915e75dd5f36b13, capnp.Struct(s))
	return str
}

func (s MobHealth) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MobHealth) DecodeFromPtr(p capnp.Ptr) MobHealth {
	return MobHealth(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MobHealth) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MobHealth) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MobHealth) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MobHealth) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MobHealth) Hp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MobHealth) SetHp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MobHealth) Id() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MobHealth) SetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// MobHealth_List is a list of MobHealth.
type MobHealth_List = capnp.StructList[MobHealth]

// NewMobHealth creates a new list of MobHealth.
func NewMobHealth_List(s *capnp.Segment, sz int32) (MobHealth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MobHealth](l), err
}

// MobHealth_Future is a wrapper for a MobHealth promised by a client call.
type MobHealth_Future struct{ *capnp.Future }

func (f MobHealth_Future) Struct() (MobHealth, error) {
	p, err := f.Future.Ptr()
	return MobHealth(p.Struct()), err
}

type Track capnp.Struct

// Track_TypeID is the unique identifier for the type Track.
const Track_TypeID = 0x8f371262d861f7d1

func NewTrack(s *capnp.Segment) (Track, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Track(st), err
}

func NewRootTrack(s *capnp.Segment) (Track, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Track(st), err
}

func ReadRootTrack(msg *capnp.Message) (Track, error) {
	root, err := msg.Root()
	return Track(root.Struct()), err
}

func (s Track) String() string {
	str, _ := text.Marshal(0x8f371262d861f7d1, capnp.Struct(s))
	return str
}

func (s Track) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Track) DecodeFromPtr(p capnp.Ptr) Track {
	return Track(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Track) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Track) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Track) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Track) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Track) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Track) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Track) Distance() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Track) SetDistance(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// Track_List is a list of Track.
type Track_List = capnp.StructList[Track]

// NewTrack creates a new list of Track.
func NewTrack_List(s *capnp.Segment, sz int32) (Track_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Track](l), err
}

// Track_Future is a wrapper for a Track promised by a client call.
type Track_Future struct{ *capnp.Future }

func (f Track_Future) Struct() (Track, error) {
	p, err := f.Future.Ptr()
	return Track(p.Struct()), err
}

type TrackTarget capnp.Struct

// TrackTarget_TypeID is the unique identifier for the type TrackTarget.
const TrackTarget_TypeID = 0x881a3fa8b6a21e65

func NewTrackTarget(s *capnp.Segment) (TrackTarget, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TrackTarget(st), err
}

func NewRootTrackTarget(s *capnp.Segment) (TrackTarget, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TrackTarget(st), err
}

func ReadRootTrackTarget(msg *capnp.Message) (TrackTarget, error) {
	root, err := msg.Root()
	return TrackTarget(root.Struct()), err
}

func (s TrackTarget) String() string {
	str, _ := text.Marshal(0x881a3fa8b6a21e65, capnp.Struct(s))
	return str
}

func (s TrackTarget) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrackTarget) DecodeFromPtr(p capnp.Ptr) TrackTarget {
	return TrackTarget(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrackTarget) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrackTarget) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrackTarget) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrackTarget) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrackTarget) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TrackTarget) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// TrackTarget_List is a list of TrackTarget.
type TrackTarget_List = capnp.StructList[TrackTarget]

// NewTrackTarget creates a new list of TrackTarget.
func NewTrackTarget_List(s *capnp.Segment, sz int32) (TrackTarget_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TrackTarget](l), err
}

// TrackTarget_Future is a wrapper for a TrackTarget promised by a client call.
type TrackTarget_Future struct{ *capnp.Future }

func (f TrackTarget_Future) Struct() (TrackTarget, error) {
	p, err := f.Future.Ptr()
	return TrackTarget(p.Struct()), err
}

type Tracking capnp.Struct

// Tracking_TypeID is the unique identifier for the type Tracking.
const Tracking_TypeID = 0x8929937be8c9e001

func NewTracking(s *capnp.Segment) (Tracking, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tracking(st), err
}

func NewRootTracking(s *capnp.Segment) (Tracking, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tracking(st), err
}

func ReadRootTracking(msg *capnp.Message) (Tracking, error) {
	root, err := msg.Root()
	return Tracking(root.Struct()), err
}

func (s Tracking) String() string {
	str, _ := text.Marshal(0x8929937be8c9e001, capnp.Struct(s))
	return str
}

func (s Tracking) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tracking) DecodeFromPtr(p capnp.Ptr) Tracking {
	return Tracking(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tracking) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tracking) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tracking) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tracking) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tracking) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Tracking) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Tracking) Entries() (Track_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Track_List(p.List()), err
}

func (s Tracking) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tracking) SetEntries(v Track_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Track_List, preferring placement in s's segment.
func (s Tracking) NewEntries(n int32) (Track_List, error) {
	l, err := NewTrack_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Track_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Tracking_List is a list of Tracking.
type Tracking_List = capnp.StructList[Tracking]

// NewTracking creates a new list of Tracking.
func NewTracking_List(s *capnp.Segment, sz int32) (Tracking_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Tracking](l), err
}

// Tracking_Future is a wrapper for a Tracking promised by a client call.
type Tracking_Future struct{ *capnp.Future }

func (f Tracking_Future) Struct() (Tracking, error) {
	p, err := f.Future.Ptr()
	return Tracking(p.Struct()), err
}

type ZoneServerInfo capnp.Struct

// ZoneServerInfo_TypeID is the unique identifier for the type ZoneServerInfo.
const ZoneServerInfo_TypeID = 0x94d039e60a812076

func NewZoneServerInfo(s *capnp.Segment) (ZoneServerInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZoneServerInfo(st), err
}

func NewRootZoneServerInfo(s *capnp.Segment) (ZoneServerInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZoneServerInfo(st), err
}

func ReadRootZoneServerInfo(msg *capnp.Message) (ZoneServerInfo, error) {
	root, err := msg.Root()
	return ZoneServerInfo(root.Struct()), err
}

func (s ZoneServerInfo) String() string {
	str, _ := text.Marshal(0x94d039e60a812076, capnp.Struct(s))
	return str
}

func (s ZoneServerInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneServerInfo) DecodeFromPtr(p capnp.Ptr) ZoneServerInfo {
	return ZoneServerInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneServerInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneServerInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneServerInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneServerInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneServerInfo) Ip() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneServerInfo) HasIp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneServerInfo) IpBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneServerInfo) SetIp(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ZoneServerInfo) Port() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ZoneServerInfo) SetPort(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ZoneServerInfo_List is a list of ZoneServerInfo.
type ZoneServerInfo_List = capnp.StructList[ZoneServerInfo]

// NewZoneServerInfo creates a new list of ZoneServerInfo.
func NewZoneServerInfo_List(s *capnp.Segment, sz int32) (ZoneServerInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ZoneServerInfo](l), err
}

// ZoneServerInfo_Future is a wrapper for a ZoneServerInfo promised by a client call.
type ZoneServerInfo_Future struct{ *capnp.Future }

func (f ZoneServerInfo_Future) Struct() (ZoneServerInfo, error) {
	p, err := f.Future.Ptr()
	return ZoneServerInfo(p.Struct()), err
}

type WhoAllPlayer capnp.Struct

// WhoAllPlayer_TypeID is the unique identifier for the type WhoAllPlayer.
const WhoAllPlayer_TypeID = 0xc20152b889987299

func NewWhoAllPlayer(s *capnp.Segment) (WhoAllPlayer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return WhoAllPlayer(st), err
}

func NewRootWhoAllPlayer(s *capnp.Segment) (WhoAllPlayer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return WhoAllPlayer(st), err
}

func ReadRootWhoAllPlayer(msg *capnp.Message) (WhoAllPlayer, error) {
	root, err := msg.Root()
	return WhoAllPlayer(root.Struct()), err
}

func (s WhoAllPlayer) String() string {
	str, _ := text.Marshal(0xc20152b889987299, capnp.Struct(s))
	return str
}

func (s WhoAllPlayer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAllPlayer) DecodeFromPtr(p capnp.Ptr) WhoAllPlayer {
	return WhoAllPlayer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAllPlayer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAllPlayer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAllPlayer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAllPlayer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAllPlayer) Formatstring() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAllPlayer) SetFormatstring(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAllPlayer) Pidstring() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAllPlayer) SetPidstring(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAllPlayer) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAllPlayer) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAllPlayer) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAllPlayer) Rankstring() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAllPlayer) SetRankstring(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAllPlayer) Guild() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WhoAllPlayer) HasGuild() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WhoAllPlayer) GuildBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetGuild(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WhoAllPlayer) Zonestring() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAllPlayer) SetZonestring(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAllPlayer) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s WhoAllPlayer) SetZone(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s WhoAllPlayer) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s WhoAllPlayer) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s WhoAllPlayer) Level() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s WhoAllPlayer) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s WhoAllPlayer) Race() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s WhoAllPlayer) SetRace(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s WhoAllPlayer) Account() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WhoAllPlayer) HasAccount() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WhoAllPlayer) AccountBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetAccount(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// WhoAllPlayer_List is a list of WhoAllPlayer.
type WhoAllPlayer_List = capnp.StructList[WhoAllPlayer]

// NewWhoAllPlayer creates a new list of WhoAllPlayer.
func NewWhoAllPlayer_List(s *capnp.Segment, sz int32) (WhoAllPlayer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[WhoAllPlayer](l), err
}

// WhoAllPlayer_Future is a wrapper for a WhoAllPlayer promised by a client call.
type WhoAllPlayer_Future struct{ *capnp.Future }

func (f WhoAllPlayer_Future) Struct() (WhoAllPlayer, error) {
	p, err := f.Future.Ptr()
	return WhoAllPlayer(p.Struct()), err
}

type WhoAllReturn capnp.Struct

// WhoAllReturn_TypeID is the unique identifier for the type WhoAllReturn.
const WhoAllReturn_TypeID = 0xa58428b610ebb10c

func NewWhoAllReturn(s *capnp.Segment) (WhoAllReturn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return WhoAllReturn(st), err
}

func NewRootWhoAllReturn(s *capnp.Segment) (WhoAllReturn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return WhoAllReturn(st), err
}

func ReadRootWhoAllReturn(msg *capnp.Message) (WhoAllReturn, error) {
	root, err := msg.Root()
	return WhoAllReturn(root.Struct()), err
}

func (s WhoAllReturn) String() string {
	str, _ := text.Marshal(0xa58428b610ebb10c, capnp.Struct(s))
	return str
}

func (s WhoAllReturn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAllReturn) DecodeFromPtr(p capnp.Ptr) WhoAllReturn {
	return WhoAllReturn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAllReturn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAllReturn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAllReturn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAllReturn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAllReturn) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAllReturn) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAllReturn) Playerineqstring() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAllReturn) SetPlayerineqstring(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAllReturn) Line() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAllReturn) HasLine() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAllReturn) LineBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAllReturn) SetLine(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAllReturn) Playersinzonestring() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAllReturn) SetPlayersinzonestring(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAllReturn) Count() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAllReturn) SetCount(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAllReturn) Player() (WhoAllPlayer_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WhoAllPlayer_List(p.List()), err
}

func (s WhoAllReturn) HasPlayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WhoAllReturn) SetPlayer(v WhoAllPlayer_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPlayer sets the player field to a newly
// allocated WhoAllPlayer_List, preferring placement in s's segment.
func (s WhoAllReturn) NewPlayer(n int32) (WhoAllPlayer_List, error) {
	l, err := NewWhoAllPlayer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WhoAllPlayer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// WhoAllReturn_List is a list of WhoAllReturn.
type WhoAllReturn_List = capnp.StructList[WhoAllReturn]

// NewWhoAllReturn creates a new list of WhoAllReturn.
func NewWhoAllReturn_List(s *capnp.Segment, sz int32) (WhoAllReturn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[WhoAllReturn](l), err
}

// WhoAllReturn_Future is a wrapper for a WhoAllReturn promised by a client call.
type WhoAllReturn_Future struct{ *capnp.Future }

func (f WhoAllReturn_Future) Struct() (WhoAllReturn, error) {
	p, err := f.Future.Ptr()
	return WhoAllReturn(p.Struct()), err
}

type Trader capnp.Struct

// Trader_TypeID is the unique identifier for the type Trader.
const Trader_TypeID = 0xd351f43ee97d7196

func NewTrader(s *capnp.Segment) (Trader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Trader(st), err
}

func NewRootTrader(s *capnp.Segment) (Trader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Trader(st), err
}

func ReadRootTrader(msg *capnp.Message) (Trader, error) {
	root, err := msg.Root()
	return Trader(root.Struct()), err
}

func (s Trader) String() string {
	str, _ := text.Marshal(0xd351f43ee97d7196, capnp.Struct(s))
	return str
}

func (s Trader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Trader) DecodeFromPtr(p capnp.Ptr) Trader {
	return Trader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Trader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Trader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Trader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Trader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Trader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Trader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Trader) Itemid() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Trader) HasItemid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Trader) SetItemid(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemid sets the itemid field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Trader) NewItemid(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Trader) Itemcost() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s Trader) HasItemcost() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Trader) SetItemcost(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItemcost sets the itemcost field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Trader) NewItemcost(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Trader_List is a list of Trader.
type Trader_List = capnp.StructList[Trader]

// NewTrader creates a new list of Trader.
func NewTrader_List(s *capnp.Segment, sz int32) (Trader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Trader](l), err
}

// Trader_Future is a wrapper for a Trader promised by a client call.
type Trader_Future struct{ *capnp.Future }

func (f Trader_Future) Struct() (Trader, error) {
	p, err := f.Future.Ptr()
	return Trader(p.Struct()), err
}

type ClickTrader capnp.Struct

// ClickTrader_TypeID is the unique identifier for the type ClickTrader.
const ClickTrader_TypeID = 0xf640e180eb6f7e34

func NewClickTrader(s *capnp.Segment) (ClickTrader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ClickTrader(st), err
}

func NewRootClickTrader(s *capnp.Segment) (ClickTrader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ClickTrader(st), err
}

func ReadRootClickTrader(msg *capnp.Message) (ClickTrader, error) {
	root, err := msg.Root()
	return ClickTrader(root.Struct()), err
}

func (s ClickTrader) String() string {
	str, _ := text.Marshal(0xf640e180eb6f7e34, capnp.Struct(s))
	return str
}

func (s ClickTrader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickTrader) DecodeFromPtr(p capnp.Ptr) ClickTrader {
	return ClickTrader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickTrader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickTrader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickTrader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickTrader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickTrader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickTrader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickTrader) Itemcost() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ClickTrader) HasItemcost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickTrader) SetItemcost(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemcost sets the itemcost field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ClickTrader) NewItemcost(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ClickTrader_List is a list of ClickTrader.
type ClickTrader_List = capnp.StructList[ClickTrader]

// NewClickTrader creates a new list of ClickTrader.
func NewClickTrader_List(s *capnp.Segment, sz int32) (ClickTrader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ClickTrader](l), err
}

// ClickTrader_Future is a wrapper for a ClickTrader promised by a client call.
type ClickTrader_Future struct{ *capnp.Future }

func (f ClickTrader_Future) Struct() (ClickTrader, error) {
	p, err := f.Future.Ptr()
	return ClickTrader(p.Struct()), err
}

type GetItems capnp.Struct

// GetItems_TypeID is the unique identifier for the type GetItems.
const GetItems_TypeID = 0xa796a4d827fc48b4

func NewGetItems(s *capnp.Segment) (GetItems, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetItems(st), err
}

func NewRootGetItems(s *capnp.Segment) (GetItems, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetItems(st), err
}

func ReadRootGetItems(msg *capnp.Message) (GetItems, error) {
	root, err := msg.Root()
	return GetItems(root.Struct()), err
}

func (s GetItems) String() string {
	str, _ := text.Marshal(0xa796a4d827fc48b4, capnp.Struct(s))
	return str
}

func (s GetItems) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetItems) DecodeFromPtr(p capnp.Ptr) GetItems {
	return GetItems(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetItems) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetItems) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetItems) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetItems) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetItems) Items() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s GetItems) HasItems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GetItems) SetItems(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s GetItems) NewItems(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GetItems_List is a list of GetItems.
type GetItems_List = capnp.StructList[GetItems]

// NewGetItems creates a new list of GetItems.
func NewGetItems_List(s *capnp.Segment, sz int32) (GetItems_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetItems](l), err
}

// GetItems_Future is a wrapper for a GetItems promised by a client call.
type GetItems_Future struct{ *capnp.Future }

func (f GetItems_Future) Struct() (GetItems, error) {
	p, err := f.Future.Ptr()
	return GetItems(p.Struct()), err
}

type BecomeTrader capnp.Struct

// BecomeTrader_TypeID is the unique identifier for the type BecomeTrader.
const BecomeTrader_TypeID = 0x9e7c63f7db1235ba

func NewBecomeTrader(s *capnp.Segment) (BecomeTrader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeTrader(st), err
}

func NewRootBecomeTrader(s *capnp.Segment) (BecomeTrader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeTrader(st), err
}

func ReadRootBecomeTrader(msg *capnp.Message) (BecomeTrader, error) {
	root, err := msg.Root()
	return BecomeTrader(root.Struct()), err
}

func (s BecomeTrader) String() string {
	str, _ := text.Marshal(0x9e7c63f7db1235ba, capnp.Struct(s))
	return str
}

func (s BecomeTrader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeTrader) DecodeFromPtr(p capnp.Ptr) BecomeTrader {
	return BecomeTrader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeTrader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeTrader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeTrader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeTrader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeTrader) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeTrader) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeTrader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BecomeTrader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BecomeTrader_List is a list of BecomeTrader.
type BecomeTrader_List = capnp.StructList[BecomeTrader]

// NewBecomeTrader creates a new list of BecomeTrader.
func NewBecomeTrader_List(s *capnp.Segment, sz int32) (BecomeTrader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BecomeTrader](l), err
}

// BecomeTrader_Future is a wrapper for a BecomeTrader promised by a client call.
type BecomeTrader_Future struct{ *capnp.Future }

func (f BecomeTrader_Future) Struct() (BecomeTrader, error) {
	p, err := f.Future.Ptr()
	return BecomeTrader(p.Struct()), err
}

type TraderShowItems capnp.Struct

// TraderShowItems_TypeID is the unique identifier for the type TraderShowItems.
const TraderShowItems_TypeID = 0xc008c1d71bacfa15

func NewTraderShowItems(s *capnp.Segment) (TraderShowItems, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderShowItems(st), err
}

func NewRootTraderShowItems(s *capnp.Segment) (TraderShowItems, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderShowItems(st), err
}

func ReadRootTraderShowItems(msg *capnp.Message) (TraderShowItems, error) {
	root, err := msg.Root()
	return TraderShowItems(root.Struct()), err
}

func (s TraderShowItems) String() string {
	str, _ := text.Marshal(0xc008c1d71bacfa15, capnp.Struct(s))
	return str
}

func (s TraderShowItems) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderShowItems) DecodeFromPtr(p capnp.Ptr) TraderShowItems {
	return TraderShowItems(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderShowItems) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderShowItems) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderShowItems) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderShowItems) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderShowItems) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderShowItems) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderShowItems) TraderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderShowItems) SetTraderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderShowItems_List is a list of TraderShowItems.
type TraderShowItems_List = capnp.StructList[TraderShowItems]

// NewTraderShowItems creates a new list of TraderShowItems.
func NewTraderShowItems_List(s *capnp.Segment, sz int32) (TraderShowItems_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderShowItems](l), err
}

// TraderShowItems_Future is a wrapper for a TraderShowItems promised by a client call.
type TraderShowItems_Future struct{ *capnp.Future }

func (f TraderShowItems_Future) Struct() (TraderShowItems, error) {
	p, err := f.Future.Ptr()
	return TraderShowItems(p.Struct()), err
}

type TraderBuy capnp.Struct

// TraderBuy_TypeID is the unique identifier for the type TraderBuy.
const TraderBuy_TypeID = 0x838b6e674280f93f

func NewTraderBuy(s *capnp.Segment) (TraderBuy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return TraderBuy(st), err
}

func NewRootTraderBuy(s *capnp.Segment) (TraderBuy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return TraderBuy(st), err
}

func ReadRootTraderBuy(msg *capnp.Message) (TraderBuy, error) {
	root, err := msg.Root()
	return TraderBuy(root.Struct()), err
}

func (s TraderBuy) String() string {
	str, _ := text.Marshal(0x838b6e674280f93f, capnp.Struct(s))
	return str
}

func (s TraderBuy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderBuy) DecodeFromPtr(p capnp.Ptr) TraderBuy {
	return TraderBuy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderBuy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderBuy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderBuy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderBuy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderBuy) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderBuy) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderBuy) Price() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderBuy) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TraderBuy) TraderId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TraderBuy) SetTraderId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TraderBuy) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TraderBuy) HasItemName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TraderBuy) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TraderBuy) SetItemName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TraderBuy) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TraderBuy) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TraderBuy) AlreadySold() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TraderBuy) SetAlreadySold(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TraderBuy) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TraderBuy) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// TraderBuy_List is a list of TraderBuy.
type TraderBuy_List = capnp.StructList[TraderBuy]

// NewTraderBuy creates a new list of TraderBuy.
func NewTraderBuy_List(s *capnp.Segment, sz int32) (TraderBuy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[TraderBuy](l), err
}

// TraderBuy_Future is a wrapper for a TraderBuy promised by a client call.
type TraderBuy_Future struct{ *capnp.Future }

func (f TraderBuy_Future) Struct() (TraderBuy, error) {
	p, err := f.Future.Ptr()
	return TraderBuy(p.Struct()), err
}

type TraderItemUpdate capnp.Struct

// TraderItemUpdate_TypeID is the unique identifier for the type TraderItemUpdate.
const TraderItemUpdate_TypeID = 0xc998874f2bcc5999

func NewTraderItemUpdate(s *capnp.Segment) (TraderItemUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TraderItemUpdate(st), err
}

func NewRootTraderItemUpdate(s *capnp.Segment) (TraderItemUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TraderItemUpdate(st), err
}

func ReadRootTraderItemUpdate(msg *capnp.Message) (TraderItemUpdate, error) {
	root, err := msg.Root()
	return TraderItemUpdate(root.Struct()), err
}

func (s TraderItemUpdate) String() string {
	str, _ := text.Marshal(0xc998874f2bcc5999, capnp.Struct(s))
	return str
}

func (s TraderItemUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderItemUpdate) DecodeFromPtr(p capnp.Ptr) TraderItemUpdate {
	return TraderItemUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderItemUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderItemUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderItemUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderItemUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderItemUpdate) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderItemUpdate) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderItemUpdate) Fromslot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderItemUpdate) SetFromslot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TraderItemUpdate) Toslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TraderItemUpdate) SetToslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TraderItemUpdate) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TraderItemUpdate) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// TraderItemUpdate_List is a list of TraderItemUpdate.
type TraderItemUpdate_List = capnp.StructList[TraderItemUpdate]

// NewTraderItemUpdate creates a new list of TraderItemUpdate.
func NewTraderItemUpdate_List(s *capnp.Segment, sz int32) (TraderItemUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TraderItemUpdate](l), err
}

// TraderItemUpdate_Future is a wrapper for a TraderItemUpdate promised by a client call.
type TraderItemUpdate_Future struct{ *capnp.Future }

func (f TraderItemUpdate_Future) Struct() (TraderItemUpdate, error) {
	p, err := f.Future.Ptr()
	return TraderItemUpdate(p.Struct()), err
}

type MoneyUpdate capnp.Struct

// MoneyUpdate_TypeID is the unique identifier for the type MoneyUpdate.
const MoneyUpdate_TypeID = 0xb26bddc14e66729a

func NewMoneyUpdate(s *capnp.Segment) (MoneyUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoneyUpdate(st), err
}

func NewRootMoneyUpdate(s *capnp.Segment) (MoneyUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoneyUpdate(st), err
}

func ReadRootMoneyUpdate(msg *capnp.Message) (MoneyUpdate, error) {
	root, err := msg.Root()
	return MoneyUpdate(root.Struct()), err
}

func (s MoneyUpdate) String() string {
	str, _ := text.Marshal(0xb26bddc14e66729a, capnp.Struct(s))
	return str
}

func (s MoneyUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoneyUpdate) DecodeFromPtr(p capnp.Ptr) MoneyUpdate {
	return MoneyUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoneyUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoneyUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoneyUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoneyUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoneyUpdate) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoneyUpdate) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoneyUpdate) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoneyUpdate) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoneyUpdate) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoneyUpdate) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoneyUpdate) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoneyUpdate) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MoneyUpdate_List is a list of MoneyUpdate.
type MoneyUpdate_List = capnp.StructList[MoneyUpdate]

// NewMoneyUpdate creates a new list of MoneyUpdate.
func NewMoneyUpdate_List(s *capnp.Segment, sz int32) (MoneyUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MoneyUpdate](l), err
}

// MoneyUpdate_Future is a wrapper for a MoneyUpdate promised by a client call.
type MoneyUpdate_Future struct{ *capnp.Future }

func (f MoneyUpdate_Future) Struct() (MoneyUpdate, error) {
	p, err := f.Future.Ptr()
	return MoneyUpdate(p.Struct()), err
}

type TraderDelItem capnp.Struct

// TraderDelItem_TypeID is the unique identifier for the type TraderDelItem.
const TraderDelItem_TypeID = 0xc73e9eb76d70ee0a

func NewTraderDelItem(s *capnp.Segment) (TraderDelItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderDelItem(st), err
}

func NewRootTraderDelItem(s *capnp.Segment) (TraderDelItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderDelItem(st), err
}

func ReadRootTraderDelItem(msg *capnp.Message) (TraderDelItem, error) {
	root, err := msg.Root()
	return TraderDelItem(root.Struct()), err
}

func (s TraderDelItem) String() string {
	str, _ := text.Marshal(0xc73e9eb76d70ee0a, capnp.Struct(s))
	return str
}

func (s TraderDelItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderDelItem) DecodeFromPtr(p capnp.Ptr) TraderDelItem {
	return TraderDelItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderDelItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderDelItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderDelItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderDelItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderDelItem) Slotid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderDelItem) SetSlotid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderDelItem) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderDelItem) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderDelItem_List is a list of TraderDelItem.
type TraderDelItem_List = capnp.StructList[TraderDelItem]

// NewTraderDelItem creates a new list of TraderDelItem.
func NewTraderDelItem_List(s *capnp.Segment, sz int32) (TraderDelItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderDelItem](l), err
}

// TraderDelItem_Future is a wrapper for a TraderDelItem promised by a client call.
type TraderDelItem_Future struct{ *capnp.Future }

func (f TraderDelItem_Future) Struct() (TraderDelItem, error) {
	p, err := f.Future.Ptr()
	return TraderDelItem(p.Struct()), err
}

type TraderClick capnp.Struct

// TraderClick_TypeID is the unique identifier for the type TraderClick.
const TraderClick_TypeID = 0xcac443c397628440

func NewTraderClick(s *capnp.Segment) (TraderClick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderClick(st), err
}

func NewRootTraderClick(s *capnp.Segment) (TraderClick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderClick(st), err
}

func ReadRootTraderClick(msg *capnp.Message) (TraderClick, error) {
	root, err := msg.Root()
	return TraderClick(root.Struct()), err
}

func (s TraderClick) String() string {
	str, _ := text.Marshal(0xcac443c397628440, capnp.Struct(s))
	return str
}

func (s TraderClick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderClick) DecodeFromPtr(p capnp.Ptr) TraderClick {
	return TraderClick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderClick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderClick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderClick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderClick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderClick) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderClick) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderClick) Approval() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderClick) SetApproval(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderClick_List is a list of TraderClick.
type TraderClick_List = capnp.StructList[TraderClick]

// NewTraderClick creates a new list of TraderClick.
func NewTraderClick_List(s *capnp.Segment, sz int32) (TraderClick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderClick](l), err
}

// TraderClick_Future is a wrapper for a TraderClick promised by a client call.
type TraderClick_Future struct{ *capnp.Future }

func (f TraderClick_Future) Struct() (TraderClick, error) {
	p, err := f.Future.Ptr()
	return TraderClick(p.Struct()), err
}

type FormattedMessage capnp.Struct

// FormattedMessage_TypeID is the unique identifier for the type FormattedMessage.
const FormattedMessage_TypeID = 0xfb596df65e062edf

func NewFormattedMessage(s *capnp.Segment) (FormattedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FormattedMessage(st), err
}

func NewRootFormattedMessage(s *capnp.Segment) (FormattedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FormattedMessage(st), err
}

func ReadRootFormattedMessage(msg *capnp.Message) (FormattedMessage, error) {
	root, err := msg.Root()
	return FormattedMessage(root.Struct()), err
}

func (s FormattedMessage) String() string {
	str, _ := text.Marshal(0xfb596df65e062edf, capnp.Struct(s))
	return str
}

func (s FormattedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FormattedMessage) DecodeFromPtr(p capnp.Ptr) FormattedMessage {
	return FormattedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FormattedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FormattedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FormattedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FormattedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FormattedMessage) StringId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FormattedMessage) SetStringId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FormattedMessage) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FormattedMessage) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s FormattedMessage) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s FormattedMessage) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FormattedMessage) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s FormattedMessage) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// FormattedMessage_List is a list of FormattedMessage.
type FormattedMessage_List = capnp.StructList[FormattedMessage]

// NewFormattedMessage creates a new list of FormattedMessage.
func NewFormattedMessage_List(s *capnp.Segment, sz int32) (FormattedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[FormattedMessage](l), err
}

// FormattedMessage_Future is a wrapper for a FormattedMessage promised by a client call.
type FormattedMessage_Future struct{ *capnp.Future }

func (f FormattedMessage_Future) Struct() (FormattedMessage, error) {
	p, err := f.Future.Ptr()
	return FormattedMessage(p.Struct()), err
}

type SimpleMessage capnp.Struct

// SimpleMessage_TypeID is the unique identifier for the type SimpleMessage.
const SimpleMessage_TypeID = 0x8552adf123d9b564

func NewSimpleMessage(s *capnp.Segment) (SimpleMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SimpleMessage(st), err
}

func NewRootSimpleMessage(s *capnp.Segment) (SimpleMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SimpleMessage(st), err
}

func ReadRootSimpleMessage(msg *capnp.Message) (SimpleMessage, error) {
	root, err := msg.Root()
	return SimpleMessage(root.Struct()), err
}

func (s SimpleMessage) String() string {
	str, _ := text.Marshal(0x8552adf123d9b564, capnp.Struct(s))
	return str
}

func (s SimpleMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimpleMessage) DecodeFromPtr(p capnp.Ptr) SimpleMessage {
	return SimpleMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimpleMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimpleMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimpleMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimpleMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimpleMessage) StringId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SimpleMessage) SetStringId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SimpleMessage) Color() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SimpleMessage) SetColor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SimpleMessage_List is a list of SimpleMessage.
type SimpleMessage_List = capnp.StructList[SimpleMessage]

// NewSimpleMessage creates a new list of SimpleMessage.
func NewSimpleMessage_List(s *capnp.Segment, sz int32) (SimpleMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SimpleMessage](l), err
}

// SimpleMessage_Future is a wrapper for a SimpleMessage promised by a client call.
type SimpleMessage_Future struct{ *capnp.Future }

func (f SimpleMessage_Future) Struct() (SimpleMessage, error) {
	p, err := f.Future.Ptr()
	return SimpleMessage(p.Struct()), err
}

type GuildMemberEntry capnp.Struct

// GuildMemberEntry_TypeID is the unique identifier for the type GuildMemberEntry.
const GuildMemberEntry_TypeID = 0x820db271715b4199

func NewGuildMemberEntry(s *capnp.Segment) (GuildMemberEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return GuildMemberEntry(st), err
}

func NewRootGuildMemberEntry(s *capnp.Segment) (GuildMemberEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return GuildMemberEntry(st), err
}

func ReadRootGuildMemberEntry(msg *capnp.Message) (GuildMemberEntry, error) {
	root, err := msg.Root()
	return GuildMemberEntry(root.Struct()), err
}

func (s GuildMemberEntry) String() string {
	str, _ := text.Marshal(0x820db271715b4199, capnp.Struct(s))
	return str
}

func (s GuildMemberEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMemberEntry) DecodeFromPtr(p capnp.Ptr) GuildMemberEntry {
	return GuildMemberEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMemberEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMemberEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMemberEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMemberEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMemberEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMemberEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMemberEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMemberEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMemberEntry) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMemberEntry) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMemberEntry) Banker() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildMemberEntry) SetBanker(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildMemberEntry) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildMemberEntry) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildMemberEntry) Rank() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GuildMemberEntry) SetRank(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GuildMemberEntry) TimeLastOn() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GuildMemberEntry) SetTimeLastOn(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GuildMemberEntry) TributeEnable() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GuildMemberEntry) SetTributeEnable(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s GuildMemberEntry) TotalTribute() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GuildMemberEntry) SetTotalTribute(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GuildMemberEntry) LastTribute() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GuildMemberEntry) SetLastTribute(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GuildMemberEntry) PublicNote() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMemberEntry) HasPublicNote() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMemberEntry) PublicNoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMemberEntry) SetPublicNote(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildMemberEntry) Zoneinstance() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GuildMemberEntry) SetZoneinstance(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s GuildMemberEntry) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s GuildMemberEntry) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

// GuildMemberEntry_List is a list of GuildMemberEntry.
type GuildMemberEntry_List = capnp.StructList[GuildMemberEntry]

// NewGuildMemberEntry creates a new list of GuildMemberEntry.
func NewGuildMemberEntry_List(s *capnp.Segment, sz int32) (GuildMemberEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[GuildMemberEntry](l), err
}

// GuildMemberEntry_Future is a wrapper for a GuildMemberEntry promised by a client call.
type GuildMemberEntry_Future struct{ *capnp.Future }

func (f GuildMemberEntry_Future) Struct() (GuildMemberEntry, error) {
	p, err := f.Future.Ptr()
	return GuildMemberEntry(p.Struct()), err
}

type GuildMembers capnp.Struct

// GuildMembers_TypeID is the unique identifier for the type GuildMembers.
const GuildMembers_TypeID = 0xca9a2c906b36a12e

func NewGuildMembers(s *capnp.Segment) (GuildMembers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildMembers(st), err
}

func NewRootGuildMembers(s *capnp.Segment) (GuildMembers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildMembers(st), err
}

func ReadRootGuildMembers(msg *capnp.Message) (GuildMembers, error) {
	root, err := msg.Root()
	return GuildMembers(root.Struct()), err
}

func (s GuildMembers) String() string {
	str, _ := text.Marshal(0xca9a2c906b36a12e, capnp.Struct(s))
	return str
}

func (s GuildMembers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMembers) DecodeFromPtr(p capnp.Ptr) GuildMembers {
	return GuildMembers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMembers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMembers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMembers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMembers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMembers) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMembers) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMembers) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMembers) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMembers) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMembers) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMembers) Member() (GuildMemberEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return GuildMemberEntry_List(p.List()), err
}

func (s GuildMembers) HasMember() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMembers) SetMember(v GuildMemberEntry_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMember sets the member field to a newly
// allocated GuildMemberEntry_List, preferring placement in s's segment.
func (s GuildMembers) NewMember(n int32) (GuildMemberEntry_List, error) {
	l, err := NewGuildMemberEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GuildMemberEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// GuildMembers_List is a list of GuildMembers.
type GuildMembers_List = capnp.StructList[GuildMembers]

// NewGuildMembers creates a new list of GuildMembers.
func NewGuildMembers_List(s *capnp.Segment, sz int32) (GuildMembers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildMembers](l), err
}

// GuildMembers_Future is a wrapper for a GuildMembers promised by a client call.
type GuildMembers_Future struct{ *capnp.Future }

func (f GuildMembers_Future) Struct() (GuildMembers, error) {
	p, err := f.Future.Ptr()
	return GuildMembers(p.Struct()), err
}

type GuildMOTD capnp.Struct

// GuildMOTD_TypeID is the unique identifier for the type GuildMOTD.
const GuildMOTD_TypeID = 0x9400994ae28f2ed6

func NewGuildMOTD(s *capnp.Segment) (GuildMOTD, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildMOTD(st), err
}

func NewRootGuildMOTD(s *capnp.Segment) (GuildMOTD, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildMOTD(st), err
}

func ReadRootGuildMOTD(msg *capnp.Message) (GuildMOTD, error) {
	root, err := msg.Root()
	return GuildMOTD(root.Struct()), err
}

func (s GuildMOTD) String() string {
	str, _ := text.Marshal(0x9400994ae28f2ed6, capnp.Struct(s))
	return str
}

func (s GuildMOTD) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMOTD) DecodeFromPtr(p capnp.Ptr) GuildMOTD {
	return GuildMOTD(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMOTD) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMOTD) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMOTD) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMOTD) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMOTD) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMOTD) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMOTD) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMOTD) SetbyName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMOTD) HasSetbyName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMOTD) SetbyNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetSetbyName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildMOTD) Motd() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GuildMOTD) HasMotd() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GuildMOTD) MotdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetMotd(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GuildMOTD_List is a list of GuildMOTD.
type GuildMOTD_List = capnp.StructList[GuildMOTD]

// NewGuildMOTD creates a new list of GuildMOTD.
func NewGuildMOTD_List(s *capnp.Segment, sz int32) (GuildMOTD_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GuildMOTD](l), err
}

// GuildMOTD_Future is a wrapper for a GuildMOTD promised by a client call.
type GuildMOTD_Future struct{ *capnp.Future }

func (f GuildMOTD_Future) Struct() (GuildMOTD, error) {
	p, err := f.Future.Ptr()
	return GuildMOTD(p.Struct()), err
}

type GuildUpdatePublicNote capnp.Struct

// GuildUpdatePublicNote_TypeID is the unique identifier for the type GuildUpdatePublicNote.
const GuildUpdatePublicNote_TypeID = 0xa2fef4c64b89cc83

func NewGuildUpdatePublicNote(s *capnp.Segment) (GuildUpdatePublicNote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildUpdatePublicNote(st), err
}

func NewRootGuildUpdatePublicNote(s *capnp.Segment) (GuildUpdatePublicNote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildUpdatePublicNote(st), err
}

func ReadRootGuildUpdatePublicNote(msg *capnp.Message) (GuildUpdatePublicNote, error) {
	root, err := msg.Root()
	return GuildUpdatePublicNote(root.Struct()), err
}

func (s GuildUpdatePublicNote) String() string {
	str, _ := text.Marshal(0xa2fef4c64b89cc83, capnp.Struct(s))
	return str
}

func (s GuildUpdatePublicNote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildUpdatePublicNote) DecodeFromPtr(p capnp.Ptr) GuildUpdatePublicNote {
	return GuildUpdatePublicNote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildUpdatePublicNote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildUpdatePublicNote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildUpdatePublicNote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildUpdatePublicNote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildUpdatePublicNote) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildUpdatePublicNote) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildUpdatePublicNote) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildUpdatePublicNote) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildUpdatePublicNote) Note() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasNote() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GuildUpdatePublicNote) NoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetNote(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GuildUpdatePublicNote_List is a list of GuildUpdatePublicNote.
type GuildUpdatePublicNote_List = capnp.StructList[GuildUpdatePublicNote]

// NewGuildUpdatePublicNote creates a new list of GuildUpdatePublicNote.
func NewGuildUpdatePublicNote_List(s *capnp.Segment, sz int32) (GuildUpdatePublicNote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GuildUpdatePublicNote](l), err
}

// GuildUpdatePublicNote_Future is a wrapper for a GuildUpdatePublicNote promised by a client call.
type GuildUpdatePublicNote_Future struct{ *capnp.Future }

func (f GuildUpdatePublicNote_Future) Struct() (GuildUpdatePublicNote, error) {
	p, err := f.Future.Ptr()
	return GuildUpdatePublicNote(p.Struct()), err
}

type GuildDemote capnp.Struct

// GuildDemote_TypeID is the unique identifier for the type GuildDemote.
const GuildDemote_TypeID = 0xa0ec151dfc4791ad

func NewGuildDemote(s *capnp.Segment) (GuildDemote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildDemote(st), err
}

func NewRootGuildDemote(s *capnp.Segment) (GuildDemote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildDemote(st), err
}

func ReadRootGuildDemote(msg *capnp.Message) (GuildDemote, error) {
	root, err := msg.Root()
	return GuildDemote(root.Struct()), err
}

func (s GuildDemote) String() string {
	str, _ := text.Marshal(0xa0ec151dfc4791ad, capnp.Struct(s))
	return str
}

func (s GuildDemote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildDemote) DecodeFromPtr(p capnp.Ptr) GuildDemote {
	return GuildDemote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildDemote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildDemote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildDemote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildDemote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildDemote) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildDemote) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildDemote) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildDemote) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildDemote) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildDemote) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildDemote) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildDemote) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GuildDemote_List is a list of GuildDemote.
type GuildDemote_List = capnp.StructList[GuildDemote]

// NewGuildDemote creates a new list of GuildDemote.
func NewGuildDemote_List(s *capnp.Segment, sz int32) (GuildDemote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GuildDemote](l), err
}

// GuildDemote_Future is a wrapper for a GuildDemote promised by a client call.
type GuildDemote_Future struct{ *capnp.Future }

func (f GuildDemote_Future) Struct() (GuildDemote, error) {
	p, err := f.Future.Ptr()
	return GuildDemote(p.Struct()), err
}

type GuildRemove capnp.Struct

// GuildRemove_TypeID is the unique identifier for the type GuildRemove.
const GuildRemove_TypeID = 0xd769b0a839cd2c2e

func NewGuildRemove(s *capnp.Segment) (GuildRemove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildRemove(st), err
}

func NewRootGuildRemove(s *capnp.Segment) (GuildRemove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildRemove(st), err
}

func ReadRootGuildRemove(msg *capnp.Message) (GuildRemove, error) {
	root, err := msg.Root()
	return GuildRemove(root.Struct()), err
}

func (s GuildRemove) String() string {
	str, _ := text.Marshal(0xd769b0a839cd2c2e, capnp.Struct(s))
	return str
}

func (s GuildRemove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildRemove) DecodeFromPtr(p capnp.Ptr) GuildRemove {
	return GuildRemove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildRemove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildRemove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildRemove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildRemove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildRemove) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildRemove) HasTarget() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildRemove) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildRemove) SetTarget(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildRemove) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildRemove) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildRemove) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildRemove) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildRemove) Leaderstatus() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildRemove) SetLeaderstatus(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GuildRemove_List is a list of GuildRemove.
type GuildRemove_List = capnp.StructList[GuildRemove]

// NewGuildRemove creates a new list of GuildRemove.
func NewGuildRemove_List(s *capnp.Segment, sz int32) (GuildRemove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildRemove](l), err
}

// GuildRemove_Future is a wrapper for a GuildRemove promised by a client call.
type GuildRemove_Future struct{ *capnp.Future }

func (f GuildRemove_Future) Struct() (GuildRemove, error) {
	p, err := f.Future.Ptr()
	return GuildRemove(p.Struct()), err
}

type GuildMakeLeader capnp.Struct

// GuildMakeLeader_TypeID is the unique identifier for the type GuildMakeLeader.
const GuildMakeLeader_TypeID = 0xdb92e7fa759f1894

func NewGuildMakeLeader(s *capnp.Segment) (GuildMakeLeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildMakeLeader(st), err
}

func NewRootGuildMakeLeader(s *capnp.Segment) (GuildMakeLeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildMakeLeader(st), err
}

func ReadRootGuildMakeLeader(msg *capnp.Message) (GuildMakeLeader, error) {
	root, err := msg.Root()
	return GuildMakeLeader(root.Struct()), err
}

func (s GuildMakeLeader) String() string {
	str, _ := text.Marshal(0xdb92e7fa759f1894, capnp.Struct(s))
	return str
}

func (s GuildMakeLeader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMakeLeader) DecodeFromPtr(p capnp.Ptr) GuildMakeLeader {
	return GuildMakeLeader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMakeLeader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMakeLeader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMakeLeader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMakeLeader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMakeLeader) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMakeLeader) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMakeLeader) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMakeLeader) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMakeLeader) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMakeLeader) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMakeLeader) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMakeLeader) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GuildMakeLeader_List is a list of GuildMakeLeader.
type GuildMakeLeader_List = capnp.StructList[GuildMakeLeader]

// NewGuildMakeLeader creates a new list of GuildMakeLeader.
func NewGuildMakeLeader_List(s *capnp.Segment, sz int32) (GuildMakeLeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GuildMakeLeader](l), err
}

// GuildMakeLeader_Future is a wrapper for a GuildMakeLeader promised by a client call.
type GuildMakeLeader_Future struct{ *capnp.Future }

func (f GuildMakeLeader_Future) Struct() (GuildMakeLeader, error) {
	p, err := f.Future.Ptr()
	return GuildMakeLeader(p.Struct()), err
}

type MakePet capnp.Struct

// MakePet_TypeID is the unique identifier for the type MakePet.
const MakePet_TypeID = 0x919eb8a95b9f8a07

func NewMakePet(s *capnp.Segment) (MakePet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return MakePet(st), err
}

func NewRootMakePet(s *capnp.Segment) (MakePet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return MakePet(st), err
}

func ReadRootMakePet(msg *capnp.Message) (MakePet, error) {
	root, err := msg.Root()
	return MakePet(root.Struct()), err
}

func (s MakePet) String() string {
	str, _ := text.Marshal(0x919eb8a95b9f8a07, capnp.Struct(s))
	return str
}

func (s MakePet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MakePet) DecodeFromPtr(p capnp.Ptr) MakePet {
	return MakePet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MakePet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MakePet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MakePet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MakePet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MakePet) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MakePet) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MakePet) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MakePet) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MakePet) Race() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MakePet) SetRace(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MakePet) Texture() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MakePet) SetTexture(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MakePet) Pettype() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MakePet) SetPettype(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s MakePet) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s MakePet) SetSize(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s MakePet) Type() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s MakePet) SetType(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s MakePet) MinDmg() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s MakePet) SetMinDmg(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s MakePet) MaxDmg() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s MakePet) SetMaxDmg(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// MakePet_List is a list of MakePet.
type MakePet_List = capnp.StructList[MakePet]

// NewMakePet creates a new list of MakePet.
func NewMakePet_List(s *capnp.Segment, sz int32) (MakePet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[MakePet](l), err
}

// MakePet_Future is a wrapper for a MakePet promised by a client call.
type MakePet_Future struct{ *capnp.Future }

func (f MakePet_Future) Struct() (MakePet, error) {
	p, err := f.Future.Ptr()
	return MakePet(p.Struct()), err
}

type GroundSpawn capnp.Struct

// GroundSpawn_TypeID is the unique identifier for the type GroundSpawn.
const GroundSpawn_TypeID = 0x88b187d6e94820bd

func NewGroundSpawn(s *capnp.Segment) (GroundSpawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return GroundSpawn(st), err
}

func NewRootGroundSpawn(s *capnp.Segment) (GroundSpawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return GroundSpawn(st), err
}

func ReadRootGroundSpawn(msg *capnp.Message) (GroundSpawn, error) {
	root, err := msg.Root()
	return GroundSpawn(root.Struct()), err
}

func (s GroundSpawn) String() string {
	str, _ := text.Marshal(0x88b187d6e94820bd, capnp.Struct(s))
	return str
}

func (s GroundSpawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroundSpawn) DecodeFromPtr(p capnp.Ptr) GroundSpawn {
	return GroundSpawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroundSpawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroundSpawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroundSpawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroundSpawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroundSpawn) MaxX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s GroundSpawn) SetMaxX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s GroundSpawn) MaxY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GroundSpawn) SetMaxY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GroundSpawn) MinX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s GroundSpawn) SetMinX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s GroundSpawn) MinY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s GroundSpawn) SetMinY(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s GroundSpawn) MaxZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s GroundSpawn) SetMaxZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s GroundSpawn) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s GroundSpawn) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s GroundSpawn) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroundSpawn) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroundSpawn) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroundSpawn) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroundSpawn) Item() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GroundSpawn) SetItem(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GroundSpawn) MaxAllowed() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GroundSpawn) SetMaxAllowed(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GroundSpawn) Respawntimer() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GroundSpawn) SetRespawntimer(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// GroundSpawn_List is a list of GroundSpawn.
type GroundSpawn_List = capnp.StructList[GroundSpawn]

// NewGroundSpawn creates a new list of GroundSpawn.
func NewGroundSpawn_List(s *capnp.Segment, sz int32) (GroundSpawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[GroundSpawn](l), err
}

// GroundSpawn_Future is a wrapper for a GroundSpawn promised by a client call.
type GroundSpawn_Future struct{ *capnp.Future }

func (f GroundSpawn_Future) Struct() (GroundSpawn, error) {
	p, err := f.Future.Ptr()
	return GroundSpawn(p.Struct()), err
}

type GroundSpawns capnp.Struct

// GroundSpawns_TypeID is the unique identifier for the type GroundSpawns.
const GroundSpawns_TypeID = 0xdf6b29c6f745a197

func NewGroundSpawns(s *capnp.Segment) (GroundSpawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GroundSpawns(st), err
}

func NewRootGroundSpawns(s *capnp.Segment) (GroundSpawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GroundSpawns(st), err
}

func ReadRootGroundSpawns(msg *capnp.Message) (GroundSpawns, error) {
	root, err := msg.Root()
	return GroundSpawns(root.Struct()), err
}

func (s GroundSpawns) String() string {
	str, _ := text.Marshal(0xdf6b29c6f745a197, capnp.Struct(s))
	return str
}

func (s GroundSpawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroundSpawns) DecodeFromPtr(p capnp.Ptr) GroundSpawns {
	return GroundSpawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroundSpawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroundSpawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroundSpawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroundSpawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroundSpawns) Spawn() (GroundSpawn_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GroundSpawn_List(p.List()), err
}

func (s GroundSpawns) HasSpawn() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroundSpawns) SetSpawn(v GroundSpawn_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpawn sets the spawn field to a newly
// allocated GroundSpawn_List, preferring placement in s's segment.
func (s GroundSpawns) NewSpawn(n int32) (GroundSpawn_List, error) {
	l, err := NewGroundSpawn_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GroundSpawn_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GroundSpawns_List is a list of GroundSpawns.
type GroundSpawns_List = capnp.StructList[GroundSpawns]

// NewGroundSpawns creates a new list of GroundSpawns.
func NewGroundSpawns_List(s *capnp.Segment, sz int32) (GroundSpawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GroundSpawns](l), err
}

// GroundSpawns_Future is a wrapper for a GroundSpawns promised by a client call.
type GroundSpawns_Future struct{ *capnp.Future }

func (f GroundSpawns_Future) Struct() (GroundSpawns, error) {
	p, err := f.Future.Ptr()
	return GroundSpawns(p.Struct()), err
}

type ApproveZone capnp.Struct

// ApproveZone_TypeID is the unique identifier for the type ApproveZone.
const ApproveZone_TypeID = 0xb6c8b8141b0acfa3

func NewApproveZone(s *capnp.Segment) (ApproveZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ApproveZone(st), err
}

func NewRootApproveZone(s *capnp.Segment) (ApproveZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ApproveZone(st), err
}

func ReadRootApproveZone(msg *capnp.Message) (ApproveZone, error) {
	root, err := msg.Root()
	return ApproveZone(root.Struct()), err
}

func (s ApproveZone) String() string {
	str, _ := text.Marshal(0xb6c8b8141b0acfa3, capnp.Struct(s))
	return str
}

func (s ApproveZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApproveZone) DecodeFromPtr(p capnp.Ptr) ApproveZone {
	return ApproveZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApproveZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApproveZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApproveZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApproveZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApproveZone) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ApproveZone) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ApproveZone) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ApproveZone) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ApproveZone) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ApproveZone) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ApproveZone) Approve() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ApproveZone) SetApprove(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ApproveZone_List is a list of ApproveZone.
type ApproveZone_List = capnp.StructList[ApproveZone]

// NewApproveZone creates a new list of ApproveZone.
func NewApproveZone_List(s *capnp.Segment, sz int32) (ApproveZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ApproveZone](l), err
}

// ApproveZone_Future is a wrapper for a ApproveZone promised by a client call.
type ApproveZone_Future struct{ *capnp.Future }

func (f ApproveZone_Future) Struct() (ApproveZone, error) {
	p, err := f.Future.Ptr()
	return ApproveZone(p.Struct()), err
}

type ZoneInSendName capnp.Struct

// ZoneInSendName_TypeID is the unique identifier for the type ZoneInSendName.
const ZoneInSendName_TypeID = 0xd75aa49a213b1c70

func NewZoneInSendName(s *capnp.Segment) (ZoneInSendName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZoneInSendName(st), err
}

func NewRootZoneInSendName(s *capnp.Segment) (ZoneInSendName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZoneInSendName(st), err
}

func ReadRootZoneInSendName(msg *capnp.Message) (ZoneInSendName, error) {
	root, err := msg.Root()
	return ZoneInSendName(root.Struct()), err
}

func (s ZoneInSendName) String() string {
	str, _ := text.Marshal(0xd75aa49a213b1c70, capnp.Struct(s))
	return str
}

func (s ZoneInSendName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneInSendName) DecodeFromPtr(p capnp.Ptr) ZoneInSendName {
	return ZoneInSendName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneInSendName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneInSendName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneInSendName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneInSendName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneInSendName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneInSendName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneInSendName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneInSendName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ZoneInSendName) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ZoneInSendName) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ZoneInSendName) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneInSendName) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ZoneInSendName_List is a list of ZoneInSendName.
type ZoneInSendName_List = capnp.StructList[ZoneInSendName]

// NewZoneInSendName creates a new list of ZoneInSendName.
func NewZoneInSendName_List(s *capnp.Segment, sz int32) (ZoneInSendName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ZoneInSendName](l), err
}

// ZoneInSendName_Future is a wrapper for a ZoneInSendName promised by a client call.
type ZoneInSendName_Future struct{ *capnp.Future }

func (f ZoneInSendName_Future) Struct() (ZoneInSendName, error) {
	p, err := f.Future.Ptr()
	return ZoneInSendName(p.Struct()), err
}

type ZoneInSendName2 capnp.Struct

// ZoneInSendName2_TypeID is the unique identifier for the type ZoneInSendName2.
const ZoneInSendName2_TypeID = 0xfb0629d3fd4188b0

func NewZoneInSendName2(s *capnp.Segment) (ZoneInSendName2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneInSendName2(st), err
}

func NewRootZoneInSendName2(s *capnp.Segment) (ZoneInSendName2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneInSendName2(st), err
}

func ReadRootZoneInSendName2(msg *capnp.Message) (ZoneInSendName2, error) {
	root, err := msg.Root()
	return ZoneInSendName2(root.Struct()), err
}

func (s ZoneInSendName2) String() string {
	str, _ := text.Marshal(0xfb0629d3fd4188b0, capnp.Struct(s))
	return str
}

func (s ZoneInSendName2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneInSendName2) DecodeFromPtr(p capnp.Ptr) ZoneInSendName2 {
	return ZoneInSendName2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneInSendName2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneInSendName2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneInSendName2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneInSendName2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneInSendName2) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneInSendName2) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneInSendName2) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneInSendName2) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ZoneInSendName2_List is a list of ZoneInSendName2.
type ZoneInSendName2_List = capnp.StructList[ZoneInSendName2]

// NewZoneInSendName2 creates a new list of ZoneInSendName2.
func NewZoneInSendName2_List(s *capnp.Segment, sz int32) (ZoneInSendName2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ZoneInSendName2](l), err
}

// ZoneInSendName2_Future is a wrapper for a ZoneInSendName2 promised by a client call.
type ZoneInSendName2_Future struct{ *capnp.Future }

func (f ZoneInSendName2_Future) Struct() (ZoneInSendName2, error) {
	p, err := f.Future.Ptr()
	return ZoneInSendName2(p.Struct()), err
}

type StartTribute capnp.Struct

// StartTribute_TypeID is the unique identifier for the type StartTribute.
const StartTribute_TypeID = 0xeabe3c2d8178a916

func NewStartTribute(s *capnp.Segment) (StartTribute, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return StartTribute(st), err
}

func NewRootStartTribute(s *capnp.Segment) (StartTribute, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return StartTribute(st), err
}

func ReadRootStartTribute(msg *capnp.Message) (StartTribute, error) {
	root, err := msg.Root()
	return StartTribute(root.Struct()), err
}

func (s StartTribute) String() string {
	str, _ := text.Marshal(0xeabe3c2d8178a916, capnp.Struct(s))
	return str
}

func (s StartTribute) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StartTribute) DecodeFromPtr(p capnp.Ptr) StartTribute {
	return StartTribute(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StartTribute) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StartTribute) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StartTribute) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StartTribute) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StartTribute) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s StartTribute) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s StartTribute) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s StartTribute) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s StartTribute) Response() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s StartTribute) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// StartTribute_List is a list of StartTribute.
type StartTribute_List = capnp.StructList[StartTribute]

// NewStartTribute creates a new list of StartTribute.
func NewStartTribute_List(s *capnp.Segment, sz int32) (StartTribute_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[StartTribute](l), err
}

// StartTribute_Future is a wrapper for a StartTribute promised by a client call.
type StartTribute_Future struct{ *capnp.Future }

func (f StartTribute_Future) Struct() (StartTribute, error) {
	p, err := f.Future.Ptr()
	return StartTribute(p.Struct()), err
}

type TributeLevel capnp.Struct

// TributeLevel_TypeID is the unique identifier for the type TributeLevel.
const TributeLevel_TypeID = 0xcab56e851899421c

func NewTributeLevel(s *capnp.Segment) (TributeLevel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeLevel(st), err
}

func NewRootTributeLevel(s *capnp.Segment) (TributeLevel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeLevel(st), err
}

func ReadRootTributeLevel(msg *capnp.Message) (TributeLevel, error) {
	root, err := msg.Root()
	return TributeLevel(root.Struct()), err
}

func (s TributeLevel) String() string {
	str, _ := text.Marshal(0xcab56e851899421c, capnp.Struct(s))
	return str
}

func (s TributeLevel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeLevel) DecodeFromPtr(p capnp.Ptr) TributeLevel {
	return TributeLevel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeLevel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeLevel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeLevel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeLevel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeLevel) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeLevel) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeLevel) TributeItemId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeLevel) SetTributeItemId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeLevel) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeLevel) SetCost(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TributeLevel_List is a list of TributeLevel.
type TributeLevel_List = capnp.StructList[TributeLevel]

// NewTributeLevel creates a new list of TributeLevel.
func NewTributeLevel_List(s *capnp.Segment, sz int32) (TributeLevel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeLevel](l), err
}

// TributeLevel_Future is a wrapper for a TributeLevel promised by a client call.
type TributeLevel_Future struct{ *capnp.Future }

func (f TributeLevel_Future) Struct() (TributeLevel, error) {
	p, err := f.Future.Ptr()
	return TributeLevel(p.Struct()), err
}

type TributeAbility capnp.Struct

// TributeAbility_TypeID is the unique identifier for the type TributeAbility.
const TributeAbility_TypeID = 0x9f29336af3ac4f9f

func NewTributeAbility(s *capnp.Segment) (TributeAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeAbility(st), err
}

func NewRootTributeAbility(s *capnp.Segment) (TributeAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeAbility(st), err
}

func ReadRootTributeAbility(msg *capnp.Message) (TributeAbility, error) {
	root, err := msg.Root()
	return TributeAbility(root.Struct()), err
}

func (s TributeAbility) String() string {
	str, _ := text.Marshal(0x9f29336af3ac4f9f, capnp.Struct(s))
	return str
}

func (s TributeAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeAbility) DecodeFromPtr(p capnp.Ptr) TributeAbility {
	return TributeAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeAbility) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeAbility) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeAbility) TierCount() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeAbility) SetTierCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeAbility) Tiers() (TributeLevel_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TributeLevel_List(p.List()), err
}

func (s TributeAbility) HasTiers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TributeAbility) SetTiers(v TributeLevel_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTiers sets the tiers field to a newly
// allocated TributeLevel_List, preferring placement in s's segment.
func (s TributeAbility) NewTiers(n int32) (TributeLevel_List, error) {
	l, err := NewTributeLevel_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TributeLevel_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TributeAbility) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TributeAbility) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TributeAbility) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TributeAbility) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// TributeAbility_List is a list of TributeAbility.
type TributeAbility_List = capnp.StructList[TributeAbility]

// NewTributeAbility creates a new list of TributeAbility.
func NewTributeAbility_List(s *capnp.Segment, sz int32) (TributeAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[TributeAbility](l), err
}

// TributeAbility_Future is a wrapper for a TributeAbility promised by a client call.
type TributeAbility_Future struct{ *capnp.Future }

func (f TributeAbility_Future) Struct() (TributeAbility, error) {
	p, err := f.Future.Ptr()
	return TributeAbility(p.Struct()), err
}

type GuildTributeAbility capnp.Struct

// GuildTributeAbility_TypeID is the unique identifier for the type GuildTributeAbility.
const GuildTributeAbility_TypeID = 0xf6ebf8b8d23d794f

func NewGuildTributeAbility(s *capnp.Segment) (GuildTributeAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildTributeAbility(st), err
}

func NewRootGuildTributeAbility(s *capnp.Segment) (GuildTributeAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildTributeAbility(st), err
}

func ReadRootGuildTributeAbility(msg *capnp.Message) (GuildTributeAbility, error) {
	root, err := msg.Root()
	return GuildTributeAbility(root.Struct()), err
}

func (s GuildTributeAbility) String() string {
	str, _ := text.Marshal(0xf6ebf8b8d23d794f, capnp.Struct(s))
	return str
}

func (s GuildTributeAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildTributeAbility) DecodeFromPtr(p capnp.Ptr) GuildTributeAbility {
	return GuildTributeAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildTributeAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildTributeAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildTributeAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildTributeAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildTributeAbility) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildTributeAbility) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildTributeAbility) Ability() (TributeAbility, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TributeAbility(p.Struct()), err
}

func (s GuildTributeAbility) HasAbility() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildTributeAbility) SetAbility(v TributeAbility) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbility sets the ability field to a newly
// allocated TributeAbility struct, preferring placement in s's segment.
func (s GuildTributeAbility) NewAbility() (TributeAbility, error) {
	ss, err := NewTributeAbility(capnp.Struct(s).Segment())
	if err != nil {
		return TributeAbility{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GuildTributeAbility_List is a list of GuildTributeAbility.
type GuildTributeAbility_List = capnp.StructList[GuildTributeAbility]

// NewGuildTributeAbility creates a new list of GuildTributeAbility.
func NewGuildTributeAbility_List(s *capnp.Segment, sz int32) (GuildTributeAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GuildTributeAbility](l), err
}

// GuildTributeAbility_Future is a wrapper for a GuildTributeAbility promised by a client call.
type GuildTributeAbility_Future struct{ *capnp.Future }

func (f GuildTributeAbility_Future) Struct() (GuildTributeAbility, error) {
	p, err := f.Future.Ptr()
	return GuildTributeAbility(p.Struct()), err
}
func (p GuildTributeAbility_Future) Ability() TributeAbility_Future {
	return TributeAbility_Future{Future: p.Future.Field(0, nil)}
}

type SelectTributeReq capnp.Struct

// SelectTributeReq_TypeID is the unique identifier for the type SelectTributeReq.
const SelectTributeReq_TypeID = 0xb3f8feecbb635492

func NewSelectTributeReq(s *capnp.Segment) (SelectTributeReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SelectTributeReq(st), err
}

func NewRootSelectTributeReq(s *capnp.Segment) (SelectTributeReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SelectTributeReq(st), err
}

func ReadRootSelectTributeReq(msg *capnp.Message) (SelectTributeReq, error) {
	root, err := msg.Root()
	return SelectTributeReq(root.Struct()), err
}

func (s SelectTributeReq) String() string {
	str, _ := text.Marshal(0xb3f8feecbb635492, capnp.Struct(s))
	return str
}

func (s SelectTributeReq) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SelectTributeReq) DecodeFromPtr(p capnp.Ptr) SelectTributeReq {
	return SelectTributeReq(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SelectTributeReq) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SelectTributeReq) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SelectTributeReq) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SelectTributeReq) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SelectTributeReq) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SelectTributeReq) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SelectTributeReq) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SelectTributeReq) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SelectTributeReq_List is a list of SelectTributeReq.
type SelectTributeReq_List = capnp.StructList[SelectTributeReq]

// NewSelectTributeReq creates a new list of SelectTributeReq.
func NewSelectTributeReq_List(s *capnp.Segment, sz int32) (SelectTributeReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SelectTributeReq](l), err
}

// SelectTributeReq_Future is a wrapper for a SelectTributeReq promised by a client call.
type SelectTributeReq_Future struct{ *capnp.Future }

func (f SelectTributeReq_Future) Struct() (SelectTributeReq, error) {
	p, err := f.Future.Ptr()
	return SelectTributeReq(p.Struct()), err
}

type SelectTributeReply capnp.Struct

// SelectTributeReply_TypeID is the unique identifier for the type SelectTributeReply.
const SelectTributeReply_TypeID = 0xb176d4b98cf5afa6

func NewSelectTributeReply(s *capnp.Segment) (SelectTributeReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SelectTributeReply(st), err
}

func NewRootSelectTributeReply(s *capnp.Segment) (SelectTributeReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SelectTributeReply(st), err
}

func ReadRootSelectTributeReply(msg *capnp.Message) (SelectTributeReply, error) {
	root, err := msg.Root()
	return SelectTributeReply(root.Struct()), err
}

func (s SelectTributeReply) String() string {
	str, _ := text.Marshal(0xb176d4b98cf5afa6, capnp.Struct(s))
	return str
}

func (s SelectTributeReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SelectTributeReply) DecodeFromPtr(p capnp.Ptr) SelectTributeReply {
	return SelectTributeReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SelectTributeReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SelectTributeReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SelectTributeReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SelectTributeReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SelectTributeReply) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SelectTributeReply) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SelectTributeReply) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SelectTributeReply) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SelectTributeReply) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SelectTributeReply) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SelectTributeReply) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SelectTributeReply) SetDesc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// SelectTributeReply_List is a list of SelectTributeReply.
type SelectTributeReply_List = capnp.StructList[SelectTributeReply]

// NewSelectTributeReply creates a new list of SelectTributeReply.
func NewSelectTributeReply_List(s *capnp.Segment, sz int32) (SelectTributeReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SelectTributeReply](l), err
}

// SelectTributeReply_Future is a wrapper for a SelectTributeReply promised by a client call.
type SelectTributeReply_Future struct{ *capnp.Future }

func (f SelectTributeReply_Future) Struct() (SelectTributeReply, error) {
	p, err := f.Future.Ptr()
	return SelectTributeReply(p.Struct()), err
}

type TributeInfo capnp.Struct

// TributeInfo_TypeID is the unique identifier for the type TributeInfo.
const TributeInfo_TypeID = 0xd5db12ce6b4738ee

func NewTributeInfo(s *capnp.Segment) (TributeInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeInfo(st), err
}

func NewRootTributeInfo(s *capnp.Segment) (TributeInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeInfo(st), err
}

func ReadRootTributeInfo(msg *capnp.Message) (TributeInfo, error) {
	root, err := msg.Root()
	return TributeInfo(root.Struct()), err
}

func (s TributeInfo) String() string {
	str, _ := text.Marshal(0xd5db12ce6b4738ee, capnp.Struct(s))
	return str
}

func (s TributeInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeInfo) DecodeFromPtr(p capnp.Ptr) TributeInfo {
	return TributeInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeInfo) Active() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeInfo) SetActive(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeInfo) Tributes() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s TributeInfo) HasTributes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TributeInfo) SetTributes(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTributes sets the tributes field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TributeInfo) NewTributes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TributeInfo) Tiers() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s TributeInfo) HasTiers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TributeInfo) SetTiers(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewTiers sets the tiers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TributeInfo) NewTiers(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s TributeInfo) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeInfo) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TributeInfo_List is a list of TributeInfo.
type TributeInfo_List = capnp.StructList[TributeInfo]

// NewTributeInfo creates a new list of TributeInfo.
func NewTributeInfo_List(s *capnp.Segment, sz int32) (TributeInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[TributeInfo](l), err
}

// TributeInfo_Future is a wrapper for a TributeInfo promised by a client call.
type TributeInfo_Future struct{ *capnp.Future }

func (f TributeInfo_Future) Struct() (TributeInfo, error) {
	p, err := f.Future.Ptr()
	return TributeInfo(p.Struct()), err
}

type TributeItem capnp.Struct

// TributeItem_TypeID is the unique identifier for the type TributeItem.
const TributeItem_TypeID = 0xb6db3a4bd35d7d66

func NewTributeItem(s *capnp.Segment) (TributeItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeItem(st), err
}

func NewRootTributeItem(s *capnp.Segment) (TributeItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeItem(st), err
}

func ReadRootTributeItem(msg *capnp.Message) (TributeItem, error) {
	root, err := msg.Root()
	return TributeItem(root.Struct()), err
}

func (s TributeItem) String() string {
	str, _ := text.Marshal(0xb6db3a4bd35d7d66, capnp.Struct(s))
	return str
}

func (s TributeItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeItem) DecodeFromPtr(p capnp.Ptr) TributeItem {
	return TributeItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeItem) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeItem) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeItem) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeItem) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeItem) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeItem) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TributeItem) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TributeItem) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// TributeItem_List is a list of TributeItem.
type TributeItem_List = capnp.StructList[TributeItem]

// NewTributeItem creates a new list of TributeItem.
func NewTributeItem_List(s *capnp.Segment, sz int32) (TributeItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeItem](l), err
}

// TributeItem_Future is a wrapper for a TributeItem promised by a client call.
type TributeItem_Future struct{ *capnp.Future }

func (f TributeItem_Future) Struct() (TributeItem, error) {
	p, err := f.Future.Ptr()
	return TributeItem(p.Struct()), err
}

type TributePoint capnp.Struct

// TributePoint_TypeID is the unique identifier for the type TributePoint.
const TributePoint_TypeID = 0xf1f7baa2935a0cd7

func NewTributePoint(s *capnp.Segment) (TributePoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TributePoint(st), err
}

func NewRootTributePoint(s *capnp.Segment) (TributePoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TributePoint(st), err
}

func ReadRootTributePoint(msg *capnp.Message) (TributePoint, error) {
	root, err := msg.Root()
	return TributePoint(root.Struct()), err
}

func (s TributePoint) String() string {
	str, _ := text.Marshal(0xf1f7baa2935a0cd7, capnp.Struct(s))
	return str
}

func (s TributePoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributePoint) DecodeFromPtr(p capnp.Ptr) TributePoint {
	return TributePoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributePoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributePoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributePoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributePoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributePoint) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributePoint) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributePoint) CareerTributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributePoint) SetCareerTributePoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TributePoint_List is a list of TributePoint.
type TributePoint_List = capnp.StructList[TributePoint]

// NewTributePoint creates a new list of TributePoint.
func NewTributePoint_List(s *capnp.Segment, sz int32) (TributePoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TributePoint](l), err
}

// TributePoint_Future is a wrapper for a TributePoint promised by a client call.
type TributePoint_Future struct{ *capnp.Future }

func (f TributePoint_Future) Struct() (TributePoint, error) {
	p, err := f.Future.Ptr()
	return TributePoint(p.Struct()), err
}

type TributeMoney capnp.Struct

// TributeMoney_TypeID is the unique identifier for the type TributeMoney.
const TributeMoney_TypeID = 0xb66a9193d2300649

func NewTributeMoney(s *capnp.Segment) (TributeMoney, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeMoney(st), err
}

func NewRootTributeMoney(s *capnp.Segment) (TributeMoney, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeMoney(st), err
}

func ReadRootTributeMoney(msg *capnp.Message) (TributeMoney, error) {
	root, err := msg.Root()
	return TributeMoney(root.Struct()), err
}

func (s TributeMoney) String() string {
	str, _ := text.Marshal(0xb66a9193d2300649, capnp.Struct(s))
	return str
}

func (s TributeMoney) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeMoney) DecodeFromPtr(p capnp.Ptr) TributeMoney {
	return TributeMoney(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeMoney) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeMoney) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeMoney) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeMoney) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeMoney) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeMoney) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeMoney) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeMoney) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeMoney) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeMoney) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TributeMoney_List is a list of TributeMoney.
type TributeMoney_List = capnp.StructList[TributeMoney]

// NewTributeMoney creates a new list of TributeMoney.
func NewTributeMoney_List(s *capnp.Segment, sz int32) (TributeMoney_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeMoney](l), err
}

// TributeMoney_Future is a wrapper for a TributeMoney promised by a client call.
type TributeMoney_Future struct{ *capnp.Future }

func (f TributeMoney_Future) Struct() (TributeMoney, error) {
	p, err := f.Future.Ptr()
	return TributeMoney(p.Struct()), err
}

type Split capnp.Struct

// Split_TypeID is the unique identifier for the type Split.
const Split_TypeID = 0xc2f958e3df4726c9

func NewSplit(s *capnp.Segment) (Split, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Split(st), err
}

func NewRootSplit(s *capnp.Segment) (Split, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Split(st), err
}

func ReadRootSplit(msg *capnp.Message) (Split, error) {
	root, err := msg.Root()
	return Split(root.Struct()), err
}

func (s Split) String() string {
	str, _ := text.Marshal(0xc2f958e3df4726c9, capnp.Struct(s))
	return str
}

func (s Split) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Split) DecodeFromPtr(p capnp.Ptr) Split {
	return Split(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Split) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Split) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Split) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Split) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Split) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Split) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Split) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Split) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Split) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Split) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Split) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Split) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// Split_List is a list of Split.
type Split_List = capnp.StructList[Split]

// NewSplit creates a new list of Split.
func NewSplit_List(s *capnp.Segment, sz int32) (Split_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Split](l), err
}

// Split_Future is a wrapper for a Split promised by a client call.
type Split_Future struct{ *capnp.Future }

func (f Split_Future) Struct() (Split, error) {
	p, err := f.Future.Ptr()
	return Split(p.Struct()), err
}

type NewCombine capnp.Struct

// NewCombine_TypeID is the unique identifier for the type NewCombine.
const NewCombine_TypeID = 0xf8dcc5cd22965ff5

func NewNewCombine(s *capnp.Segment) (NewCombine, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NewCombine(st), err
}

func NewRootNewCombine(s *capnp.Segment) (NewCombine, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NewCombine(st), err
}

func ReadRootNewCombine(msg *capnp.Message) (NewCombine, error) {
	root, err := msg.Root()
	return NewCombine(root.Struct()), err
}

func (s NewCombine) String() string {
	str, _ := text.Marshal(0xf8dcc5cd22965ff5, capnp.Struct(s))
	return str
}

func (s NewCombine) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NewCombine) DecodeFromPtr(p capnp.Ptr) NewCombine {
	return NewCombine(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NewCombine) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NewCombine) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NewCombine) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NewCombine) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NewCombine) ContainerSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NewCombine) SetContainerSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NewCombine) GuildtributeSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NewCombine) SetGuildtributeSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// NewCombine_List is a list of NewCombine.
type NewCombine_List = capnp.StructList[NewCombine]

// NewNewCombine creates a new list of NewCombine.
func NewNewCombine_List(s *capnp.Segment, sz int32) (NewCombine_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[NewCombine](l), err
}

// NewCombine_Future is a wrapper for a NewCombine promised by a client call.
type NewCombine_Future struct{ *capnp.Future }

func (f NewCombine_Future) Struct() (NewCombine, error) {
	p, err := f.Future.Ptr()
	return NewCombine(p.Struct()), err
}

type TradeskillFavorites capnp.Struct

// TradeskillFavorites_TypeID is the unique identifier for the type TradeskillFavorites.
const TradeskillFavorites_TypeID = 0xf42a44d24baf1780

func NewTradeskillFavorites(s *capnp.Segment) (TradeskillFavorites, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TradeskillFavorites(st), err
}

func NewRootTradeskillFavorites(s *capnp.Segment) (TradeskillFavorites, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TradeskillFavorites(st), err
}

func ReadRootTradeskillFavorites(msg *capnp.Message) (TradeskillFavorites, error) {
	root, err := msg.Root()
	return TradeskillFavorites(root.Struct()), err
}

func (s TradeskillFavorites) String() string {
	str, _ := text.Marshal(0xf42a44d24baf1780, capnp.Struct(s))
	return str
}

func (s TradeskillFavorites) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeskillFavorites) DecodeFromPtr(p capnp.Ptr) TradeskillFavorites {
	return TradeskillFavorites(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeskillFavorites) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeskillFavorites) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeskillFavorites) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeskillFavorites) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeskillFavorites) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeskillFavorites) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeskillFavorites) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeskillFavorites) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeskillFavorites) FavoriteRecipes() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s TradeskillFavorites) HasFavoriteRecipes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TradeskillFavorites) SetFavoriteRecipes(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFavoriteRecipes sets the favoriteRecipes field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TradeskillFavorites) NewFavoriteRecipes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TradeskillFavorites_List is a list of TradeskillFavorites.
type TradeskillFavorites_List = capnp.StructList[TradeskillFavorites]

// NewTradeskillFavorites creates a new list of TradeskillFavorites.
func NewTradeskillFavorites_List(s *capnp.Segment, sz int32) (TradeskillFavorites_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TradeskillFavorites](l), err
}

// TradeskillFavorites_Future is a wrapper for a TradeskillFavorites promised by a client call.
type TradeskillFavorites_Future struct{ *capnp.Future }

func (f TradeskillFavorites_Future) Struct() (TradeskillFavorites, error) {
	p, err := f.Future.Ptr()
	return TradeskillFavorites(p.Struct()), err
}

type RecipesSearch capnp.Struct

// RecipesSearch_TypeID is the unique identifier for the type RecipesSearch.
const RecipesSearch_TypeID = 0xe10a56be889c8d63

func NewRecipesSearch(s *capnp.Segment) (RecipesSearch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RecipesSearch(st), err
}

func NewRootRecipesSearch(s *capnp.Segment) (RecipesSearch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RecipesSearch(st), err
}

func ReadRootRecipesSearch(msg *capnp.Message) (RecipesSearch, error) {
	root, err := msg.Root()
	return RecipesSearch(root.Struct()), err
}

func (s RecipesSearch) String() string {
	str, _ := text.Marshal(0xe10a56be889c8d63, capnp.Struct(s))
	return str
}

func (s RecipesSearch) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipesSearch) DecodeFromPtr(p capnp.Ptr) RecipesSearch {
	return RecipesSearch(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipesSearch) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipesSearch) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipesSearch) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipesSearch) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipesSearch) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipesSearch) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipesSearch) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipesSearch) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipesSearch) Mintrivial() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipesSearch) SetMintrivial(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipesSearch) Maxtrivial() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipesSearch) SetMaxtrivial(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RecipesSearch) Query() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RecipesSearch) HasQuery() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RecipesSearch) QueryBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RecipesSearch) SetQuery(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RecipesSearch_List is a list of RecipesSearch.
type RecipesSearch_List = capnp.StructList[RecipesSearch]

// NewRecipesSearch creates a new list of RecipesSearch.
func NewRecipesSearch_List(s *capnp.Segment, sz int32) (RecipesSearch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RecipesSearch](l), err
}

// RecipesSearch_Future is a wrapper for a RecipesSearch promised by a client call.
type RecipesSearch_Future struct{ *capnp.Future }

func (f RecipesSearch_Future) Struct() (RecipesSearch, error) {
	p, err := f.Future.Ptr()
	return RecipesSearch(p.Struct()), err
}

type RecipeReply capnp.Struct

// RecipeReply_TypeID is the unique identifier for the type RecipeReply.
const RecipeReply_TypeID = 0xdd1f5357c25cc3b7

func NewRecipeReply(s *capnp.Segment) (RecipeReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RecipeReply(st), err
}

func NewRootRecipeReply(s *capnp.Segment) (RecipeReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RecipeReply(st), err
}

func ReadRootRecipeReply(msg *capnp.Message) (RecipeReply, error) {
	root, err := msg.Root()
	return RecipeReply(root.Struct()), err
}

func (s RecipeReply) String() string {
	str, _ := text.Marshal(0xdd1f5357c25cc3b7, capnp.Struct(s))
	return str
}

func (s RecipeReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipeReply) DecodeFromPtr(p capnp.Ptr) RecipeReply {
	return RecipeReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipeReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipeReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipeReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipeReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipeReply) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipeReply) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipeReply) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipeReply) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipeReply) ComponentCount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipeReply) SetComponentCount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipeReply) RecipeId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipeReply) SetRecipeId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RecipeReply) Trivial() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RecipeReply) SetTrivial(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RecipeReply) RecipeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RecipeReply) HasRecipeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RecipeReply) RecipeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RecipeReply) SetRecipeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RecipeReply_List is a list of RecipeReply.
type RecipeReply_List = capnp.StructList[RecipeReply]

// NewRecipeReply creates a new list of RecipeReply.
func NewRecipeReply_List(s *capnp.Segment, sz int32) (RecipeReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RecipeReply](l), err
}

// RecipeReply_Future is a wrapper for a RecipeReply promised by a client call.
type RecipeReply_Future struct{ *capnp.Future }

func (f RecipeReply_Future) Struct() (RecipeReply, error) {
	p, err := f.Future.Ptr()
	return RecipeReply(p.Struct()), err
}

type RecipeAutoCombine capnp.Struct

// RecipeAutoCombine_TypeID is the unique identifier for the type RecipeAutoCombine.
const RecipeAutoCombine_TypeID = 0xc49c789ac9b97fbe

func NewRecipeAutoCombine(s *capnp.Segment) (RecipeAutoCombine, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RecipeAutoCombine(st), err
}

func NewRootRecipeAutoCombine(s *capnp.Segment) (RecipeAutoCombine, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RecipeAutoCombine(st), err
}

func ReadRootRecipeAutoCombine(msg *capnp.Message) (RecipeAutoCombine, error) {
	root, err := msg.Root()
	return RecipeAutoCombine(root.Struct()), err
}

func (s RecipeAutoCombine) String() string {
	str, _ := text.Marshal(0xc49c789ac9b97fbe, capnp.Struct(s))
	return str
}

func (s RecipeAutoCombine) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipeAutoCombine) DecodeFromPtr(p capnp.Ptr) RecipeAutoCombine {
	return RecipeAutoCombine(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipeAutoCombine) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipeAutoCombine) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipeAutoCombine) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipeAutoCombine) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipeAutoCombine) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipeAutoCombine) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipeAutoCombine) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipeAutoCombine) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipeAutoCombine) RecipeId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipeAutoCombine) SetRecipeId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipeAutoCombine) ReplyCode() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipeAutoCombine) SetReplyCode(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// RecipeAutoCombine_List is a list of RecipeAutoCombine.
type RecipeAutoCombine_List = capnp.StructList[RecipeAutoCombine]

// NewRecipeAutoCombine creates a new list of RecipeAutoCombine.
func NewRecipeAutoCombine_List(s *capnp.Segment, sz int32) (RecipeAutoCombine_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[RecipeAutoCombine](l), err
}

// RecipeAutoCombine_Future is a wrapper for a RecipeAutoCombine promised by a client call.
type RecipeAutoCombine_Future struct{ *capnp.Future }

func (f RecipeAutoCombine_Future) Struct() (RecipeAutoCombine, error) {
	p, err := f.Future.Ptr()
	return RecipeAutoCombine(p.Struct()), err
}

type LevelAppearance capnp.Struct

// LevelAppearance_TypeID is the unique identifier for the type LevelAppearance.
const LevelAppearance_TypeID = 0xd74a1be2552282a4

func NewLevelAppearance(s *capnp.Segment) (LevelAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return LevelAppearance(st), err
}

func NewRootLevelAppearance(s *capnp.Segment) (LevelAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return LevelAppearance(st), err
}

func ReadRootLevelAppearance(msg *capnp.Message) (LevelAppearance, error) {
	root, err := msg.Root()
	return LevelAppearance(root.Struct()), err
}

func (s LevelAppearance) String() string {
	str, _ := text.Marshal(0xd74a1be2552282a4, capnp.Struct(s))
	return str
}

func (s LevelAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LevelAppearance) DecodeFromPtr(p capnp.Ptr) LevelAppearance {
	return LevelAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LevelAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LevelAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LevelAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LevelAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LevelAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LevelAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LevelAppearance) Parm1() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LevelAppearance) SetParm1(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LevelAppearance) Value1a() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LevelAppearance) SetValue1a(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LevelAppearance) Value1b() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LevelAppearance) SetValue1b(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LevelAppearance) Parm2() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LevelAppearance) SetParm2(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LevelAppearance) Value2a() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LevelAppearance) SetValue2a(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s LevelAppearance) Value2b() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s LevelAppearance) SetValue2b(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s LevelAppearance) Parm3() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s LevelAppearance) SetParm3(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s LevelAppearance) Value3a() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s LevelAppearance) SetValue3a(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s LevelAppearance) Value3b() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s LevelAppearance) SetValue3b(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s LevelAppearance) Parm4() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s LevelAppearance) SetParm4(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s LevelAppearance) Value4a() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s LevelAppearance) SetValue4a(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s LevelAppearance) Value4b() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s LevelAppearance) SetValue4b(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s LevelAppearance) Parm5() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s LevelAppearance) SetParm5(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s LevelAppearance) Value5a() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s LevelAppearance) SetValue5a(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s LevelAppearance) Value5b() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s LevelAppearance) SetValue5b(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// LevelAppearance_List is a list of LevelAppearance.
type LevelAppearance_List = capnp.StructList[LevelAppearance]

// NewLevelAppearance creates a new list of LevelAppearance.
func NewLevelAppearance_List(s *capnp.Segment, sz int32) (LevelAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[LevelAppearance](l), err
}

// LevelAppearance_Future is a wrapper for a LevelAppearance promised by a client call.
type LevelAppearance_Future struct{ *capnp.Future }

func (f LevelAppearance_Future) Struct() (LevelAppearance, error) {
	p, err := f.Future.Ptr()
	return LevelAppearance(p.Struct()), err
}

type MerchantList capnp.Struct

// MerchantList_TypeID is the unique identifier for the type MerchantList.
const MerchantList_TypeID = 0xd9cddf13c207ce2d

func NewMerchantList(s *capnp.Segment) (MerchantList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantList(st), err
}

func NewRootMerchantList(s *capnp.Segment) (MerchantList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantList(st), err
}

func ReadRootMerchantList(msg *capnp.Message) (MerchantList, error) {
	root, err := msg.Root()
	return MerchantList(root.Struct()), err
}

func (s MerchantList) String() string {
	str, _ := text.Marshal(0xd9cddf13c207ce2d, capnp.Struct(s))
	return str
}

func (s MerchantList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantList) DecodeFromPtr(p capnp.Ptr) MerchantList {
	return MerchantList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantList) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantList) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantList) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantList) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantList) Item() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantList) SetItem(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MerchantList_List is a list of MerchantList.
type MerchantList_List = capnp.StructList[MerchantList]

// NewMerchantList creates a new list of MerchantList.
func NewMerchantList_List(s *capnp.Segment, sz int32) (MerchantList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantList](l), err
}

// MerchantList_Future is a wrapper for a MerchantList promised by a client call.
type MerchantList_Future struct{ *capnp.Future }

func (f MerchantList_Future) Struct() (MerchantList, error) {
	p, err := f.Future.Ptr()
	return MerchantList(p.Struct()), err
}

type TempMerchantList capnp.Struct

// TempMerchantList_TypeID is the unique identifier for the type TempMerchantList.
const TempMerchantList_TypeID = 0xd6aded5b005488d5

func NewTempMerchantList(s *capnp.Segment) (TempMerchantList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TempMerchantList(st), err
}

func NewRootTempMerchantList(s *capnp.Segment) (TempMerchantList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TempMerchantList(st), err
}

func ReadRootTempMerchantList(msg *capnp.Message) (TempMerchantList, error) {
	root, err := msg.Root()
	return TempMerchantList(root.Struct()), err
}

func (s TempMerchantList) String() string {
	str, _ := text.Marshal(0xd6aded5b005488d5, capnp.Struct(s))
	return str
}

func (s TempMerchantList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TempMerchantList) DecodeFromPtr(p capnp.Ptr) TempMerchantList {
	return TempMerchantList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TempMerchantList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TempMerchantList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TempMerchantList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TempMerchantList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TempMerchantList) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TempMerchantList) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TempMerchantList) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TempMerchantList) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TempMerchantList) Item() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TempMerchantList) SetItem(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TempMerchantList) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TempMerchantList) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TempMerchantList) Origslot() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TempMerchantList) SetOrigslot(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// TempMerchantList_List is a list of TempMerchantList.
type TempMerchantList_List = capnp.StructList[TempMerchantList]

// NewTempMerchantList creates a new list of TempMerchantList.
func NewTempMerchantList_List(s *capnp.Segment, sz int32) (TempMerchantList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[TempMerchantList](l), err
}

// TempMerchantList_Future is a wrapper for a TempMerchantList promised by a client call.
type TempMerchantList_Future struct{ *capnp.Future }

func (f TempMerchantList_Future) Struct() (TempMerchantList, error) {
	p, err := f.Future.Ptr()
	return TempMerchantList(p.Struct()), err
}

type FindPersonPoint capnp.Struct

// FindPersonPoint_TypeID is the unique identifier for the type FindPersonPoint.
const FindPersonPoint_TypeID = 0xcddf6dbc366deb3e

func NewFindPersonPoint(s *capnp.Segment) (FindPersonPoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return FindPersonPoint(st), err
}

func NewRootFindPersonPoint(s *capnp.Segment) (FindPersonPoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return FindPersonPoint(st), err
}

func ReadRootFindPersonPoint(msg *capnp.Message) (FindPersonPoint, error) {
	root, err := msg.Root()
	return FindPersonPoint(root.Struct()), err
}

func (s FindPersonPoint) String() string {
	str, _ := text.Marshal(0xcddf6dbc366deb3e, capnp.Struct(s))
	return str
}

func (s FindPersonPoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonPoint) DecodeFromPtr(p capnp.Ptr) FindPersonPoint {
	return FindPersonPoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonPoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonPoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonPoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonPoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonPoint) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s FindPersonPoint) SetY(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s FindPersonPoint) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s FindPersonPoint) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s FindPersonPoint) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s FindPersonPoint) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// FindPersonPoint_List is a list of FindPersonPoint.
type FindPersonPoint_List = capnp.StructList[FindPersonPoint]

// NewFindPersonPoint creates a new list of FindPersonPoint.
func NewFindPersonPoint_List(s *capnp.Segment, sz int32) (FindPersonPoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[FindPersonPoint](l), err
}

// FindPersonPoint_Future is a wrapper for a FindPersonPoint promised by a client call.
type FindPersonPoint_Future struct{ *capnp.Future }

func (f FindPersonPoint_Future) Struct() (FindPersonPoint, error) {
	p, err := f.Future.Ptr()
	return FindPersonPoint(p.Struct()), err
}

type FindPersonRequest capnp.Struct

// FindPersonRequest_TypeID is the unique identifier for the type FindPersonRequest.
const FindPersonRequest_TypeID = 0xb976985727e64f4f

func NewFindPersonRequest(s *capnp.Segment) (FindPersonRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FindPersonRequest(st), err
}

func NewRootFindPersonRequest(s *capnp.Segment) (FindPersonRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FindPersonRequest(st), err
}

func ReadRootFindPersonRequest(msg *capnp.Message) (FindPersonRequest, error) {
	root, err := msg.Root()
	return FindPersonRequest(root.Struct()), err
}

func (s FindPersonRequest) String() string {
	str, _ := text.Marshal(0xb976985727e64f4f, capnp.Struct(s))
	return str
}

func (s FindPersonRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonRequest) DecodeFromPtr(p capnp.Ptr) FindPersonRequest {
	return FindPersonRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonRequest) NpcId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FindPersonRequest) SetNpcId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FindPersonRequest) ClientPos() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FindPersonRequest) SetClientPos(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// FindPersonRequest_List is a list of FindPersonRequest.
type FindPersonRequest_List = capnp.StructList[FindPersonRequest]

// NewFindPersonRequest creates a new list of FindPersonRequest.
func NewFindPersonRequest_List(s *capnp.Segment, sz int32) (FindPersonRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[FindPersonRequest](l), err
}

// FindPersonRequest_Future is a wrapper for a FindPersonRequest promised by a client call.
type FindPersonRequest_Future struct{ *capnp.Future }

func (f FindPersonRequest_Future) Struct() (FindPersonRequest, error) {
	p, err := f.Future.Ptr()
	return FindPersonRequest(p.Struct()), err
}

type FindPersonResult capnp.Struct

// FindPersonResult_TypeID is the unique identifier for the type FindPersonResult.
const FindPersonResult_TypeID = 0xe89b2535f3e88eb7

func NewFindPersonResult(s *capnp.Segment) (FindPersonResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FindPersonResult(st), err
}

func NewRootFindPersonResult(s *capnp.Segment) (FindPersonResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FindPersonResult(st), err
}

func ReadRootFindPersonResult(msg *capnp.Message) (FindPersonResult, error) {
	root, err := msg.Root()
	return FindPersonResult(root.Struct()), err
}

func (s FindPersonResult) String() string {
	str, _ := text.Marshal(0xe89b2535f3e88eb7, capnp.Struct(s))
	return str
}

func (s FindPersonResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonResult) DecodeFromPtr(p capnp.Ptr) FindPersonResult {
	return FindPersonResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonResult) Dest() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FindPersonResult) SetDest(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FindPersonResult) Path() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s FindPersonResult) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FindPersonResult) SetPath(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s FindPersonResult) NewPath(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// FindPersonResult_List is a list of FindPersonResult.
type FindPersonResult_List = capnp.StructList[FindPersonResult]

// NewFindPersonResult creates a new list of FindPersonResult.
func NewFindPersonResult_List(s *capnp.Segment, sz int32) (FindPersonResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[FindPersonResult](l), err
}

// FindPersonResult_Future is a wrapper for a FindPersonResult promised by a client call.
type FindPersonResult_Future struct{ *capnp.Future }

func (f FindPersonResult_Future) Struct() (FindPersonResult, error) {
	p, err := f.Future.Ptr()
	return FindPersonResult(p.Struct()), err
}

type MobRename capnp.Struct

// MobRename_TypeID is the unique identifier for the type MobRename.
const MobRename_TypeID = 0xb5a6abce79a6f063

func NewMobRename(s *capnp.Segment) (MobRename, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MobRename(st), err
}

func NewRootMobRename(s *capnp.Segment) (MobRename, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MobRename(st), err
}

func ReadRootMobRename(msg *capnp.Message) (MobRename, error) {
	root, err := msg.Root()
	return MobRename(root.Struct()), err
}

func (s MobRename) String() string {
	str, _ := text.Marshal(0xb5a6abce79a6f063, capnp.Struct(s))
	return str
}

func (s MobRename) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MobRename) DecodeFromPtr(p capnp.Ptr) MobRename {
	return MobRename(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MobRename) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MobRename) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MobRename) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MobRename) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MobRename) OldName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s MobRename) HasOldName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MobRename) OldNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s MobRename) SetOldName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s MobRename) OldNameAgain() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s MobRename) HasOldNameAgain() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MobRename) OldNameAgainBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s MobRename) SetOldNameAgain(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s MobRename) NewName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s MobRename) HasNewName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MobRename) NewNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s MobRename) SetNewName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// MobRename_List is a list of MobRename.
type MobRename_List = capnp.StructList[MobRename]

// NewMobRename creates a new list of MobRename.
func NewMobRename_List(s *capnp.Segment, sz int32) (MobRename_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[MobRename](l), err
}

// MobRename_Future is a wrapper for a MobRename promised by a client call.
type MobRename_Future struct{ *capnp.Future }

func (f MobRename_Future) Struct() (MobRename, error) {
	p, err := f.Future.Ptr()
	return MobRename(p.Struct()), err
}

type PlayMP3 capnp.Struct

// PlayMP3_TypeID is the unique identifier for the type PlayMP3.
const PlayMP3_TypeID = 0xde51be80c580aa82

func NewPlayMP3(s *capnp.Segment) (PlayMP3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayMP3(st), err
}

func NewRootPlayMP3(s *capnp.Segment) (PlayMP3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayMP3(st), err
}

func ReadRootPlayMP3(msg *capnp.Message) (PlayMP3, error) {
	root, err := msg.Root()
	return PlayMP3(root.Struct()), err
}

func (s PlayMP3) String() string {
	str, _ := text.Marshal(0xde51be80c580aa82, capnp.Struct(s))
	return str
}

func (s PlayMP3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayMP3) DecodeFromPtr(p capnp.Ptr) PlayMP3 {
	return PlayMP3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayMP3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayMP3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayMP3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayMP3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayMP3) Filename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PlayMP3) HasFilename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayMP3) FilenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PlayMP3) SetFilename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PlayMP3_List is a list of PlayMP3.
type PlayMP3_List = capnp.StructList[PlayMP3]

// NewPlayMP3 creates a new list of PlayMP3.
func NewPlayMP3_List(s *capnp.Segment, sz int32) (PlayMP3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PlayMP3](l), err
}

// PlayMP3_Future is a wrapper for a PlayMP3 promised by a client call.
type PlayMP3_Future struct{ *capnp.Future }

func (f PlayMP3_Future) Struct() (PlayMP3, error) {
	p, err := f.Future.Ptr()
	return PlayMP3(p.Struct()), err
}

type TitleEntry capnp.Struct

// TitleEntry_TypeID is the unique identifier for the type TitleEntry.
const TitleEntry_TypeID = 0x9e2a00f7ceea75bb

func NewTitleEntry(s *capnp.Segment) (TitleEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleEntry(st), err
}

func NewRootTitleEntry(s *capnp.Segment) (TitleEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleEntry(st), err
}

func ReadRootTitleEntry(msg *capnp.Message) (TitleEntry, error) {
	root, err := msg.Root()
	return TitleEntry(root.Struct()), err
}

func (s TitleEntry) String() string {
	str, _ := text.Marshal(0x9e2a00f7ceea75bb, capnp.Struct(s))
	return str
}

func (s TitleEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleEntry) DecodeFromPtr(p capnp.Ptr) TitleEntry {
	return TitleEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleEntry) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TitleEntry) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TitleEntry) SkillValue() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TitleEntry) SetSkillValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TitleEntry) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TitleEntry) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleEntry) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TitleEntry) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// TitleEntry_List is a list of TitleEntry.
type TitleEntry_List = capnp.StructList[TitleEntry]

// NewTitleEntry creates a new list of TitleEntry.
func NewTitleEntry_List(s *capnp.Segment, sz int32) (TitleEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TitleEntry](l), err
}

// TitleEntry_Future is a wrapper for a TitleEntry promised by a client call.
type TitleEntry_Future struct{ *capnp.Future }

func (f TitleEntry_Future) Struct() (TitleEntry, error) {
	p, err := f.Future.Ptr()
	return TitleEntry(p.Struct()), err
}

type Titles capnp.Struct

// Titles_TypeID is the unique identifier for the type Titles.
const Titles_TypeID = 0xa88d7dcd40961f55

func NewTitles(s *capnp.Segment) (Titles, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Titles(st), err
}

func NewRootTitles(s *capnp.Segment) (Titles, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Titles(st), err
}

func ReadRootTitles(msg *capnp.Message) (Titles, error) {
	root, err := msg.Root()
	return Titles(root.Struct()), err
}

func (s Titles) String() string {
	str, _ := text.Marshal(0xa88d7dcd40961f55, capnp.Struct(s))
	return str
}

func (s Titles) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Titles) DecodeFromPtr(p capnp.Ptr) Titles {
	return Titles(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Titles) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Titles) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Titles) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Titles) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Titles) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Titles) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Titles) Titles() (TitleEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TitleEntry_List(p.List()), err
}

func (s Titles) HasTitles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Titles) SetTitles(v TitleEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTitles sets the titles field to a newly
// allocated TitleEntry_List, preferring placement in s's segment.
func (s Titles) NewTitles(n int32) (TitleEntry_List, error) {
	l, err := NewTitleEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TitleEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Titles_List is a list of Titles.
type Titles_List = capnp.StructList[Titles]

// NewTitles creates a new list of Titles.
func NewTitles_List(s *capnp.Segment, sz int32) (Titles_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Titles](l), err
}

// Titles_Future is a wrapper for a Titles promised by a client call.
type Titles_Future struct{ *capnp.Future }

func (f Titles_Future) Struct() (Titles, error) {
	p, err := f.Future.Ptr()
	return Titles(p.Struct()), err
}

type TitleListEntry capnp.Struct

// TitleListEntry_TypeID is the unique identifier for the type TitleListEntry.
const TitleListEntry_TypeID = 0x9ce5c88efd68b310

func NewTitleListEntry(s *capnp.Segment) (TitleListEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TitleListEntry(st), err
}

func NewRootTitleListEntry(s *capnp.Segment) (TitleListEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TitleListEntry(st), err
}

func ReadRootTitleListEntry(msg *capnp.Message) (TitleListEntry, error) {
	root, err := msg.Root()
	return TitleListEntry(root.Struct()), err
}

func (s TitleListEntry) String() string {
	str, _ := text.Marshal(0x9ce5c88efd68b310, capnp.Struct(s))
	return str
}

func (s TitleListEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleListEntry) DecodeFromPtr(p capnp.Ptr) TitleListEntry {
	return TitleListEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleListEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleListEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleListEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleListEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleListEntry) Prefix() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TitleListEntry) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleListEntry) PrefixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TitleListEntry) SetPrefix(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TitleListEntry) Postfix() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TitleListEntry) HasPostfix() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TitleListEntry) PostfixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TitleListEntry) SetPostfix(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// TitleListEntry_List is a list of TitleListEntry.
type TitleListEntry_List = capnp.StructList[TitleListEntry]

// NewTitleListEntry creates a new list of TitleListEntry.
func NewTitleListEntry_List(s *capnp.Segment, sz int32) (TitleListEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TitleListEntry](l), err
}

// TitleListEntry_Future is a wrapper for a TitleListEntry promised by a client call.
type TitleListEntry_Future struct{ *capnp.Future }

func (f TitleListEntry_Future) Struct() (TitleListEntry, error) {
	p, err := f.Future.Ptr()
	return TitleListEntry(p.Struct()), err
}

type TitleList capnp.Struct

// TitleList_TypeID is the unique identifier for the type TitleList.
const TitleList_TypeID = 0x80b7b9a2597c4eed

func NewTitleList(s *capnp.Segment) (TitleList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleList(st), err
}

func NewRootTitleList(s *capnp.Segment) (TitleList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleList(st), err
}

func ReadRootTitleList(msg *capnp.Message) (TitleList, error) {
	root, err := msg.Root()
	return TitleList(root.Struct()), err
}

func (s TitleList) String() string {
	str, _ := text.Marshal(0x80b7b9a2597c4eed, capnp.Struct(s))
	return str
}

func (s TitleList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleList) DecodeFromPtr(p capnp.Ptr) TitleList {
	return TitleList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TitleList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TitleList) Titles() (TitleListEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TitleListEntry_List(p.List()), err
}

func (s TitleList) HasTitles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleList) SetTitles(v TitleListEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTitles sets the titles field to a newly
// allocated TitleListEntry_List, preferring placement in s's segment.
func (s TitleList) NewTitles(n int32) (TitleListEntry_List, error) {
	l, err := NewTitleListEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TitleListEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TitleList_List is a list of TitleList.
type TitleList_List = capnp.StructList[TitleList]

// NewTitleList creates a new list of TitleList.
func NewTitleList_List(s *capnp.Segment, sz int32) (TitleList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TitleList](l), err
}

// TitleList_Future is a wrapper for a TitleList promised by a client call.
type TitleList_Future struct{ *capnp.Future }

func (f TitleList_Future) Struct() (TitleList, error) {
	p, err := f.Future.Ptr()
	return TitleList(p.Struct()), err
}

type SetTitle capnp.Struct

// SetTitle_TypeID is the unique identifier for the type SetTitle.
const SetTitle_TypeID = 0x9217151fa71ac827

func NewSetTitle(s *capnp.Segment) (SetTitle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetTitle(st), err
}

func NewRootSetTitle(s *capnp.Segment) (SetTitle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetTitle(st), err
}

func ReadRootSetTitle(msg *capnp.Message) (SetTitle, error) {
	root, err := msg.Root()
	return SetTitle(root.Struct()), err
}

func (s SetTitle) String() string {
	str, _ := text.Marshal(0x9217151fa71ac827, capnp.Struct(s))
	return str
}

func (s SetTitle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetTitle) DecodeFromPtr(p capnp.Ptr) SetTitle {
	return SetTitle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetTitle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetTitle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetTitle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetTitle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetTitle) IsSuffix() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetTitle) SetIsSuffix(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SetTitle) TitleId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SetTitle) SetTitleId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SetTitle_List is a list of SetTitle.
type SetTitle_List = capnp.StructList[SetTitle]

// NewSetTitle creates a new list of SetTitle.
func NewSetTitle_List(s *capnp.Segment, sz int32) (SetTitle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetTitle](l), err
}

// SetTitle_Future is a wrapper for a SetTitle promised by a client call.
type SetTitle_Future struct{ *capnp.Future }

func (f SetTitle_Future) Struct() (SetTitle, error) {
	p, err := f.Future.Ptr()
	return SetTitle(p.Struct()), err
}

type SetTitleReply capnp.Struct

// SetTitleReply_TypeID is the unique identifier for the type SetTitleReply.
const SetTitleReply_TypeID = 0xbae3c3ae8a00e8a6

func NewSetTitleReply(s *capnp.Segment) (SetTitleReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetTitleReply(st), err
}

func NewRootSetTitleReply(s *capnp.Segment) (SetTitleReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetTitleReply(st), err
}

func ReadRootSetTitleReply(msg *capnp.Message) (SetTitleReply, error) {
	root, err := msg.Root()
	return SetTitleReply(root.Struct()), err
}

func (s SetTitleReply) String() string {
	str, _ := text.Marshal(0xbae3c3ae8a00e8a6, capnp.Struct(s))
	return str
}

func (s SetTitleReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetTitleReply) DecodeFromPtr(p capnp.Ptr) SetTitleReply {
	return SetTitleReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetTitleReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetTitleReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetTitleReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetTitleReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetTitleReply) IsSuffix() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetTitleReply) SetIsSuffix(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SetTitleReply) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SetTitleReply) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetTitleReply) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SetTitleReply) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SetTitleReply) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SetTitleReply) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SetTitleReply_List is a list of SetTitleReply.
type SetTitleReply_List = capnp.StructList[SetTitleReply]

// NewSetTitleReply creates a new list of SetTitleReply.
func NewSetTitleReply_List(s *capnp.Segment, sz int32) (SetTitleReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SetTitleReply](l), err
}

// SetTitleReply_Future is a wrapper for a SetTitleReply promised by a client call.
type SetTitleReply_Future struct{ *capnp.Future }

func (f SetTitleReply_Future) Struct() (SetTitleReply, error) {
	p, err := f.Future.Ptr()
	return SetTitleReply(p.Struct()), err
}

type TaskDescription capnp.Struct

// TaskDescription_TypeID is the unique identifier for the type TaskDescription.
const TaskDescription_TypeID = 0xa77cd936c64d6ed7

func NewTaskDescription(s *capnp.Segment) (TaskDescription, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return TaskDescription(st), err
}

func NewRootTaskDescription(s *capnp.Segment) (TaskDescription, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return TaskDescription(st), err
}

func ReadRootTaskDescription(msg *capnp.Message) (TaskDescription, error) {
	root, err := msg.Root()
	return TaskDescription(root.Struct()), err
}

func (s TaskDescription) String() string {
	str, _ := text.Marshal(0xa77cd936c64d6ed7, capnp.Struct(s))
	return str
}

func (s TaskDescription) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskDescription) DecodeFromPtr(p capnp.Ptr) TaskDescription {
	return TaskDescription(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskDescription) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskDescription) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskDescription) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskDescription) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskDescription) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskDescription) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskDescription) Taskid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskDescription) SetTaskid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskDescription) Unk() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TaskDescription) SetUnk(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TaskDescription) Id() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TaskDescription) SetId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TaskDescription) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskDescription) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskDescription) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskDescription) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskDescription) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TaskDescription) HasDesc() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TaskDescription) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TaskDescription) SetDesc(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s TaskDescription) RewardCount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TaskDescription) SetRewardCount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TaskDescription) RewardLink() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s TaskDescription) HasRewardLink() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TaskDescription) RewardLinkBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s TaskDescription) SetRewardLink(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// TaskDescription_List is a list of TaskDescription.
type TaskDescription_List = capnp.StructList[TaskDescription]

// NewTaskDescription creates a new list of TaskDescription.
func NewTaskDescription_List(s *capnp.Segment, sz int32) (TaskDescription_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[TaskDescription](l), err
}

// TaskDescription_Future is a wrapper for a TaskDescription promised by a client call.
type TaskDescription_Future struct{ *capnp.Future }

func (f TaskDescription_Future) Struct() (TaskDescription, error) {
	p, err := f.Future.Ptr()
	return TaskDescription(p.Struct()), err
}

type TaskMemberList capnp.Struct

// TaskMemberList_TypeID is the unique identifier for the type TaskMemberList.
const TaskMemberList_TypeID = 0x9910215bbf6992b3

func NewTaskMemberList(s *capnp.Segment) (TaskMemberList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskMemberList(st), err
}

func NewRootTaskMemberList(s *capnp.Segment) (TaskMemberList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskMemberList(st), err
}

func ReadRootTaskMemberList(msg *capnp.Message) (TaskMemberList, error) {
	root, err := msg.Root()
	return TaskMemberList(root.Struct()), err
}

func (s TaskMemberList) String() string {
	str, _ := text.Marshal(0x9910215bbf6992b3, capnp.Struct(s))
	return str
}

func (s TaskMemberList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskMemberList) DecodeFromPtr(p capnp.Ptr) TaskMemberList {
	return TaskMemberList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskMemberList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskMemberList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskMemberList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskMemberList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskMemberList) GopherId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskMemberList) SetGopherId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskMemberList) MemberCount() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskMemberList) SetMemberCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskMemberList) ListPointer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskMemberList) HasListPointer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskMemberList) ListPointerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskMemberList) SetListPointer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// TaskMemberList_List is a list of TaskMemberList.
type TaskMemberList_List = capnp.StructList[TaskMemberList]

// NewTaskMemberList creates a new list of TaskMemberList.
func NewTaskMemberList_List(s *capnp.Segment, sz int32) (TaskMemberList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskMemberList](l), err
}

// TaskMemberList_Future is a wrapper for a TaskMemberList promised by a client call.
type TaskMemberList_Future struct{ *capnp.Future }

func (f TaskMemberList_Future) Struct() (TaskMemberList, error) {
	p, err := f.Future.Ptr()
	return TaskMemberList(p.Struct()), err
}

type TaskActivity capnp.Struct

// TaskActivity_TypeID is the unique identifier for the type TaskActivity.
const TaskActivity_TypeID = 0xbdf104dd14c6c05e

func NewTaskActivity(s *capnp.Segment) (TaskActivity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return TaskActivity(st), err
}

func NewRootTaskActivity(s *capnp.Segment) (TaskActivity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return TaskActivity(st), err
}

func ReadRootTaskActivity(msg *capnp.Message) (TaskActivity, error) {
	root, err := msg.Root()
	return TaskActivity(root.Struct()), err
}

func (s TaskActivity) String() string {
	str, _ := text.Marshal(0xbdf104dd14c6c05e, capnp.Struct(s))
	return str
}

func (s TaskActivity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskActivity) DecodeFromPtr(p capnp.Ptr) TaskActivity {
	return TaskActivity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskActivity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskActivity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskActivity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskActivity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskActivity) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskActivity) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskActivity) Id() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskActivity) SetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskActivity) Taskid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TaskActivity) SetTaskid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TaskActivity) ActivityId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TaskActivity) SetActivityId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TaskActivity) ActivityType() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TaskActivity) SetActivityType(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TaskActivity) MobName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskActivity) HasMobName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskActivity) MobNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskActivity) SetMobName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskActivity) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TaskActivity) HasItemName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TaskActivity) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TaskActivity) SetItemName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s TaskActivity) GoalCount() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TaskActivity) SetGoalCount(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TaskActivity) ActivityName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s TaskActivity) HasActivityName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TaskActivity) ActivityNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s TaskActivity) SetActivityName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s TaskActivity) DoneCount() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TaskActivity) SetDoneCount(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// TaskActivity_List is a list of TaskActivity.
type TaskActivity_List = capnp.StructList[TaskActivity]

// NewTaskActivity creates a new list of TaskActivity.
func NewTaskActivity_List(s *capnp.Segment, sz int32) (TaskActivity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[TaskActivity](l), err
}

// TaskActivity_Future is a wrapper for a TaskActivity promised by a client call.
type TaskActivity_Future struct{ *capnp.Future }

func (f TaskActivity_Future) Struct() (TaskActivity, error) {
	p, err := f.Future.Ptr()
	return TaskActivity(p.Struct()), err
}

type TaskHistoryEntry capnp.Struct

// TaskHistoryEntry_TypeID is the unique identifier for the type TaskHistoryEntry.
const TaskHistoryEntry_TypeID = 0xf7b756860a5b5804

func NewTaskHistoryEntry(s *capnp.Segment) (TaskHistoryEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistoryEntry(st), err
}

func NewRootTaskHistoryEntry(s *capnp.Segment) (TaskHistoryEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistoryEntry(st), err
}

func ReadRootTaskHistoryEntry(msg *capnp.Message) (TaskHistoryEntry, error) {
	root, err := msg.Root()
	return TaskHistoryEntry(root.Struct()), err
}

func (s TaskHistoryEntry) String() string {
	str, _ := text.Marshal(0xf7b756860a5b5804, capnp.Struct(s))
	return str
}

func (s TaskHistoryEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskHistoryEntry) DecodeFromPtr(p capnp.Ptr) TaskHistoryEntry {
	return TaskHistoryEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskHistoryEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskHistoryEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskHistoryEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskHistoryEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskHistoryEntry) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskHistoryEntry) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskHistoryEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskHistoryEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskHistoryEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskHistoryEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskHistoryEntry) CompletedTime() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskHistoryEntry) SetCompletedTime(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TaskHistoryEntry_List is a list of TaskHistoryEntry.
type TaskHistoryEntry_List = capnp.StructList[TaskHistoryEntry]

// NewTaskHistoryEntry creates a new list of TaskHistoryEntry.
func NewTaskHistoryEntry_List(s *capnp.Segment, sz int32) (TaskHistoryEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskHistoryEntry](l), err
}

// TaskHistoryEntry_Future is a wrapper for a TaskHistoryEntry promised by a client call.
type TaskHistoryEntry_Future struct{ *capnp.Future }

func (f TaskHistoryEntry_Future) Struct() (TaskHistoryEntry, error) {
	p, err := f.Future.Ptr()
	return TaskHistoryEntry(p.Struct()), err
}

type TaskHistory capnp.Struct

// TaskHistory_TypeID is the unique identifier for the type TaskHistory.
const TaskHistory_TypeID = 0xd35ac5679adaf993

func NewTaskHistory(s *capnp.Segment) (TaskHistory, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistory(st), err
}

func NewRootTaskHistory(s *capnp.Segment) (TaskHistory, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistory(st), err
}

func ReadRootTaskHistory(msg *capnp.Message) (TaskHistory, error) {
	root, err := msg.Root()
	return TaskHistory(root.Struct()), err
}

func (s TaskHistory) String() string {
	str, _ := text.Marshal(0xd35ac5679adaf993, capnp.Struct(s))
	return str
}

func (s TaskHistory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskHistory) DecodeFromPtr(p capnp.Ptr) TaskHistory {
	return TaskHistory(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskHistory) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskHistory) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskHistory) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskHistory) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskHistory) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskHistory) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskHistory) Entries() (TaskHistoryEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TaskHistoryEntry_List(p.List()), err
}

func (s TaskHistory) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskHistory) SetEntries(v TaskHistoryEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated TaskHistoryEntry_List, preferring placement in s's segment.
func (s TaskHistory) NewEntries(n int32) (TaskHistoryEntry_List, error) {
	l, err := NewTaskHistoryEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TaskHistoryEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TaskHistory_List is a list of TaskHistory.
type TaskHistory_List = capnp.StructList[TaskHistory]

// NewTaskHistory creates a new list of TaskHistory.
func NewTaskHistory_List(s *capnp.Segment, sz int32) (TaskHistory_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskHistory](l), err
}

// TaskHistory_Future is a wrapper for a TaskHistory promised by a client call.
type TaskHistory_Future struct{ *capnp.Future }

func (f TaskHistory_Future) Struct() (TaskHistory, error) {
	p, err := f.Future.Ptr()
	return TaskHistory(p.Struct()), err
}

type AcceptNewTask capnp.Struct

// AcceptNewTask_TypeID is the unique identifier for the type AcceptNewTask.
const AcceptNewTask_TypeID = 0xbe5555051342f44e

func NewAcceptNewTask(s *capnp.Segment) (AcceptNewTask, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AcceptNewTask(st), err
}

func NewRootAcceptNewTask(s *capnp.Segment) (AcceptNewTask, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AcceptNewTask(st), err
}

func ReadRootAcceptNewTask(msg *capnp.Message) (AcceptNewTask, error) {
	root, err := msg.Root()
	return AcceptNewTask(root.Struct()), err
}

func (s AcceptNewTask) String() string {
	str, _ := text.Marshal(0xbe5555051342f44e, capnp.Struct(s))
	return str
}

func (s AcceptNewTask) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AcceptNewTask) DecodeFromPtr(p capnp.Ptr) AcceptNewTask {
	return AcceptNewTask(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AcceptNewTask) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AcceptNewTask) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AcceptNewTask) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AcceptNewTask) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AcceptNewTask) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AcceptNewTask) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AcceptNewTask) TaskMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AcceptNewTask) SetTaskMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AcceptNewTask_List is a list of AcceptNewTask.
type AcceptNewTask_List = capnp.StructList[AcceptNewTask]

// NewAcceptNewTask creates a new list of AcceptNewTask.
func NewAcceptNewTask_List(s *capnp.Segment, sz int32) (AcceptNewTask_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AcceptNewTask](l), err
}

// AcceptNewTask_Future is a wrapper for a AcceptNewTask promised by a client call.
type AcceptNewTask_Future struct{ *capnp.Future }

func (f AcceptNewTask_Future) Struct() (AcceptNewTask, error) {
	p, err := f.Future.Ptr()
	return AcceptNewTask(p.Struct()), err
}

type AvaliableTask capnp.Struct

// AvaliableTask_TypeID is the unique identifier for the type AvaliableTask.
const AvaliableTask_TypeID = 0xa86e0a28ffc1ad93

func NewAvaliableTask(s *capnp.Segment) (AvaliableTask, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return AvaliableTask(st), err
}

func NewRootAvaliableTask(s *capnp.Segment) (AvaliableTask, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return AvaliableTask(st), err
}

func ReadRootAvaliableTask(msg *capnp.Message) (AvaliableTask, error) {
	root, err := msg.Root()
	return AvaliableTask(root.Struct()), err
}

func (s AvaliableTask) String() string {
	str, _ := text.Marshal(0xa86e0a28ffc1ad93, capnp.Struct(s))
	return str
}

func (s AvaliableTask) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AvaliableTask) DecodeFromPtr(p capnp.Ptr) AvaliableTask {
	return AvaliableTask(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AvaliableTask) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AvaliableTask) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AvaliableTask) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AvaliableTask) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AvaliableTask) TaskIndex() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AvaliableTask) SetTaskIndex(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AvaliableTask) TaskMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AvaliableTask) SetTaskMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AvaliableTask) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AvaliableTask) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AvaliableTask) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AvaliableTask) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AvaliableTask) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AvaliableTask) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AvaliableTask) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AvaliableTask) SetDesc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AvaliableTask) RewardPlatinum() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AvaliableTask) SetRewardPlatinum(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AvaliableTask) RewardGold() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AvaliableTask) SetRewardGold(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s AvaliableTask) RewardSilver() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AvaliableTask) SetRewardSilver(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s AvaliableTask) RewardCopper() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s AvaliableTask) SetRewardCopper(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s AvaliableTask) SomeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AvaliableTask) HasSomeName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AvaliableTask) SomeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AvaliableTask) SetSomeName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// AvaliableTask_List is a list of AvaliableTask.
type AvaliableTask_List = capnp.StructList[AvaliableTask]

// NewAvaliableTask creates a new list of AvaliableTask.
func NewAvaliableTask_List(s *capnp.Segment, sz int32) (AvaliableTask_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[AvaliableTask](l), err
}

// AvaliableTask_Future is a wrapper for a AvaliableTask promised by a client call.
type AvaliableTask_Future struct{ *capnp.Future }

func (f AvaliableTask_Future) Struct() (AvaliableTask, error) {
	p, err := f.Future.Ptr()
	return AvaliableTask(p.Struct()), err
}

type BankerChange capnp.Struct

// BankerChange_TypeID is the unique identifier for the type BankerChange.
const BankerChange_TypeID = 0xa4fef5cca0eb8eaa

func NewBankerChange(s *capnp.Segment) (BankerChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return BankerChange(st), err
}

func NewRootBankerChange(s *capnp.Segment) (BankerChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return BankerChange(st), err
}

func ReadRootBankerChange(msg *capnp.Message) (BankerChange, error) {
	root, err := msg.Root()
	return BankerChange(root.Struct()), err
}

func (s BankerChange) String() string {
	str, _ := text.Marshal(0xa4fef5cca0eb8eaa, capnp.Struct(s))
	return str
}

func (s BankerChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BankerChange) DecodeFromPtr(p capnp.Ptr) BankerChange {
	return BankerChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BankerChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BankerChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BankerChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BankerChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BankerChange) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BankerChange) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BankerChange) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BankerChange) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BankerChange) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BankerChange) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BankerChange) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BankerChange) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BankerChange) PlatinumBank() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BankerChange) SetPlatinumBank(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s BankerChange) GoldBank() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s BankerChange) SetGoldBank(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s BankerChange) SilverBank() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s BankerChange) SetSilverBank(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s BankerChange) CopperBank() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s BankerChange) SetCopperBank(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

// BankerChange_List is a list of BankerChange.
type BankerChange_List = capnp.StructList[BankerChange]

// NewBankerChange creates a new list of BankerChange.
func NewBankerChange_List(s *capnp.Segment, sz int32) (BankerChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[BankerChange](l), err
}

// BankerChange_Future is a wrapper for a BankerChange promised by a client call.
type BankerChange_Future struct{ *capnp.Future }

func (f BankerChange_Future) Struct() (BankerChange, error) {
	p, err := f.Future.Ptr()
	return BankerChange(p.Struct()), err
}

type LeadershipExpUpdate capnp.Struct

// LeadershipExpUpdate_TypeID is the unique identifier for the type LeadershipExpUpdate.
const LeadershipExpUpdate_TypeID = 0x8534668f6850d8ba

func NewLeadershipExpUpdate(s *capnp.Segment) (LeadershipExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LeadershipExpUpdate(st), err
}

func NewRootLeadershipExpUpdate(s *capnp.Segment) (LeadershipExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LeadershipExpUpdate(st), err
}

func ReadRootLeadershipExpUpdate(msg *capnp.Message) (LeadershipExpUpdate, error) {
	root, err := msg.Root()
	return LeadershipExpUpdate(root.Struct()), err
}

func (s LeadershipExpUpdate) String() string {
	str, _ := text.Marshal(0x8534668f6850d8ba, capnp.Struct(s))
	return str
}

func (s LeadershipExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadershipExpUpdate) DecodeFromPtr(p capnp.Ptr) LeadershipExpUpdate {
	return LeadershipExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadershipExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadershipExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadershipExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadershipExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadershipExpUpdate) GroupLeadershipExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s LeadershipExpUpdate) SetGroupLeadershipExp(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s LeadershipExpUpdate) GroupLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LeadershipExpUpdate) SetGroupLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LeadershipExpUpdate) RaidLeadershipExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s LeadershipExpUpdate) SetRaidLeadershipExp(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s LeadershipExpUpdate) RaidLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LeadershipExpUpdate) SetRaidLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LeadershipExpUpdate_List is a list of LeadershipExpUpdate.
type LeadershipExpUpdate_List = capnp.StructList[LeadershipExpUpdate]

// NewLeadershipExpUpdate creates a new list of LeadershipExpUpdate.
func NewLeadershipExpUpdate_List(s *capnp.Segment, sz int32) (LeadershipExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LeadershipExpUpdate](l), err
}

// LeadershipExpUpdate_Future is a wrapper for a LeadershipExpUpdate promised by a client call.
type LeadershipExpUpdate_Future struct{ *capnp.Future }

func (f LeadershipExpUpdate_Future) Struct() (LeadershipExpUpdate, error) {
	p, err := f.Future.Ptr()
	return LeadershipExpUpdate(p.Struct()), err
}

type UpdateLeadershipAA capnp.Struct

// UpdateLeadershipAA_TypeID is the unique identifier for the type UpdateLeadershipAA.
const UpdateLeadershipAA_TypeID = 0x9726e35ff31ca532

func NewUpdateLeadershipAA(s *capnp.Segment) (UpdateLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UpdateLeadershipAA(st), err
}

func NewRootUpdateLeadershipAA(s *capnp.Segment) (UpdateLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UpdateLeadershipAA(st), err
}

func ReadRootUpdateLeadershipAA(msg *capnp.Message) (UpdateLeadershipAA, error) {
	root, err := msg.Root()
	return UpdateLeadershipAA(root.Struct()), err
}

func (s UpdateLeadershipAA) String() string {
	str, _ := text.Marshal(0x9726e35ff31ca532, capnp.Struct(s))
	return str
}

func (s UpdateLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateLeadershipAA) DecodeFromPtr(p capnp.Ptr) UpdateLeadershipAA {
	return UpdateLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateLeadershipAA) AbilityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s UpdateLeadershipAA) SetAbilityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s UpdateLeadershipAA) NewRank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s UpdateLeadershipAA) SetNewRank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s UpdateLeadershipAA) Pointsleft() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s UpdateLeadershipAA) SetPointsleft(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// UpdateLeadershipAA_List is a list of UpdateLeadershipAA.
type UpdateLeadershipAA_List = capnp.StructList[UpdateLeadershipAA]

// NewUpdateLeadershipAA creates a new list of UpdateLeadershipAA.
func NewUpdateLeadershipAA_List(s *capnp.Segment, sz int32) (UpdateLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[UpdateLeadershipAA](l), err
}

// UpdateLeadershipAA_Future is a wrapper for a UpdateLeadershipAA promised by a client call.
type UpdateLeadershipAA_Future struct{ *capnp.Future }

func (f UpdateLeadershipAA_Future) Struct() (UpdateLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return UpdateLeadershipAA(p.Struct()), err
}

type LeadExpUpdate capnp.Struct

// LeadExpUpdate_TypeID is the unique identifier for the type LeadExpUpdate.
const LeadExpUpdate_TypeID = 0xdea4ce0866a280a7

func NewLeadExpUpdate(s *capnp.Segment) (LeadExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LeadExpUpdate(st), err
}

func NewRootLeadExpUpdate(s *capnp.Segment) (LeadExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LeadExpUpdate(st), err
}

func ReadRootLeadExpUpdate(msg *capnp.Message) (LeadExpUpdate, error) {
	root, err := msg.Root()
	return LeadExpUpdate(root.Struct()), err
}

func (s LeadExpUpdate) String() string {
	str, _ := text.Marshal(0xdea4ce0866a280a7, capnp.Struct(s))
	return str
}

func (s LeadExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadExpUpdate) DecodeFromPtr(p capnp.Ptr) LeadExpUpdate {
	return LeadExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadExpUpdate) GroupLeadershipExp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LeadExpUpdate) SetGroupLeadershipExp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LeadExpUpdate) GroupLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LeadExpUpdate) SetGroupLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LeadExpUpdate) RaidLeadershipExp() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LeadExpUpdate) SetRaidLeadershipExp(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LeadExpUpdate) RaidLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LeadExpUpdate) SetRaidLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LeadExpUpdate_List is a list of LeadExpUpdate.
type LeadExpUpdate_List = capnp.StructList[LeadExpUpdate]

// NewLeadExpUpdate creates a new list of LeadExpUpdate.
func NewLeadExpUpdate_List(s *capnp.Segment, sz int32) (LeadExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LeadExpUpdate](l), err
}

// LeadExpUpdate_Future is a wrapper for a LeadExpUpdate promised by a client call.
type LeadExpUpdate_Future struct{ *capnp.Future }

func (f LeadExpUpdate_Future) Struct() (LeadExpUpdate, error) {
	p, err := f.Future.Ptr()
	return LeadExpUpdate(p.Struct()), err
}

type RaidGeneral capnp.Struct

// RaidGeneral_TypeID is the unique identifier for the type RaidGeneral.
const RaidGeneral_TypeID = 0xaba4e5389c6116b1

func NewRaidGeneral(s *capnp.Segment) (RaidGeneral, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidGeneral(st), err
}

func NewRootRaidGeneral(s *capnp.Segment) (RaidGeneral, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidGeneral(st), err
}

func ReadRootRaidGeneral(msg *capnp.Message) (RaidGeneral, error) {
	root, err := msg.Root()
	return RaidGeneral(root.Struct()), err
}

func (s RaidGeneral) String() string {
	str, _ := text.Marshal(0xaba4e5389c6116b1, capnp.Struct(s))
	return str
}

func (s RaidGeneral) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidGeneral) DecodeFromPtr(p capnp.Ptr) RaidGeneral {
	return RaidGeneral(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidGeneral) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidGeneral) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidGeneral) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidGeneral) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidGeneral) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidGeneral) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidGeneral) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidGeneral) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidGeneral) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidGeneral) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidGeneral) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidGeneral) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidGeneral) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidGeneral) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RaidGeneral) Parameter() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidGeneral) SetParameter(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidGeneral_List is a list of RaidGeneral.
type RaidGeneral_List = capnp.StructList[RaidGeneral]

// NewRaidGeneral creates a new list of RaidGeneral.
func NewRaidGeneral_List(s *capnp.Segment, sz int32) (RaidGeneral_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RaidGeneral](l), err
}

// RaidGeneral_Future is a wrapper for a RaidGeneral promised by a client call.
type RaidGeneral_Future struct{ *capnp.Future }

func (f RaidGeneral_Future) Struct() (RaidGeneral, error) {
	p, err := f.Future.Ptr()
	return RaidGeneral(p.Struct()), err
}

type RaidAddMember capnp.Struct

// RaidAddMember_TypeID is the unique identifier for the type RaidAddMember.
const RaidAddMember_TypeID = 0xdc9cd82121d86b8e

func NewRaidAddMember(s *capnp.Segment) (RaidAddMember, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaidAddMember(st), err
}

func NewRootRaidAddMember(s *capnp.Segment) (RaidAddMember, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaidAddMember(st), err
}

func ReadRootRaidAddMember(msg *capnp.Message) (RaidAddMember, error) {
	root, err := msg.Root()
	return RaidAddMember(root.Struct()), err
}

func (s RaidAddMember) String() string {
	str, _ := text.Marshal(0xdc9cd82121d86b8e, capnp.Struct(s))
	return str
}

func (s RaidAddMember) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidAddMember) DecodeFromPtr(p capnp.Ptr) RaidAddMember {
	return RaidAddMember(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidAddMember) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidAddMember) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidAddMember) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidAddMember) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidAddMember) RaidGen() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidAddMember) HasRaidGen() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidAddMember) SetRaidGen(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRaidGen sets the raidGen field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidAddMember) NewRaidGen() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidAddMember) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidAddMember) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidAddMember) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidAddMember) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidAddMember) IsGroupLeader() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidAddMember) SetIsGroupLeader(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// RaidAddMember_List is a list of RaidAddMember.
type RaidAddMember_List = capnp.StructList[RaidAddMember]

// NewRaidAddMember creates a new list of RaidAddMember.
func NewRaidAddMember_List(s *capnp.Segment, sz int32) (RaidAddMember_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RaidAddMember](l), err
}

// RaidAddMember_Future is a wrapper for a RaidAddMember promised by a client call.
type RaidAddMember_Future struct{ *capnp.Future }

func (f RaidAddMember_Future) Struct() (RaidAddMember, error) {
	p, err := f.Future.Ptr()
	return RaidAddMember(p.Struct()), err
}
func (p RaidAddMember_Future) RaidGen() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidNote capnp.Struct

// RaidNote_TypeID is the unique identifier for the type RaidNote.
const RaidNote_TypeID = 0xcc521ab8cc5e91c0

func NewRaidNote(s *capnp.Segment) (RaidNote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidNote(st), err
}

func NewRootRaidNote(s *capnp.Segment) (RaidNote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidNote(st), err
}

func ReadRootRaidNote(msg *capnp.Message) (RaidNote, error) {
	root, err := msg.Root()
	return RaidNote(root.Struct()), err
}

func (s RaidNote) String() string {
	str, _ := text.Marshal(0xcc521ab8cc5e91c0, capnp.Struct(s))
	return str
}

func (s RaidNote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidNote) DecodeFromPtr(p capnp.Ptr) RaidNote {
	return RaidNote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidNote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidNote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidNote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidNote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidNote) General() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidNote) HasGeneral() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidNote) SetGeneral(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGeneral sets the general field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidNote) NewGeneral() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidNote) Note() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidNote) HasNote() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidNote) NoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidNote) SetNote(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// RaidNote_List is a list of RaidNote.
type RaidNote_List = capnp.StructList[RaidNote]

// NewRaidNote creates a new list of RaidNote.
func NewRaidNote_List(s *capnp.Segment, sz int32) (RaidNote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[RaidNote](l), err
}

// RaidNote_Future is a wrapper for a RaidNote promised by a client call.
type RaidNote_Future struct{ *capnp.Future }

func (f RaidNote_Future) Struct() (RaidNote, error) {
	p, err := f.Future.Ptr()
	return RaidNote(p.Struct()), err
}
func (p RaidNote_Future) General() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidMOTD capnp.Struct

// RaidMOTD_TypeID is the unique identifier for the type RaidMOTD.
const RaidMOTD_TypeID = 0xbad2f81cd78e053a

func NewRaidMOTD(s *capnp.Segment) (RaidMOTD, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidMOTD(st), err
}

func NewRootRaidMOTD(s *capnp.Segment) (RaidMOTD, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidMOTD(st), err
}

func ReadRootRaidMOTD(msg *capnp.Message) (RaidMOTD, error) {
	root, err := msg.Root()
	return RaidMOTD(root.Struct()), err
}

func (s RaidMOTD) String() string {
	str, _ := text.Marshal(0xbad2f81cd78e053a, capnp.Struct(s))
	return str
}

func (s RaidMOTD) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMOTD) DecodeFromPtr(p capnp.Ptr) RaidMOTD {
	return RaidMOTD(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMOTD) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMOTD) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMOTD) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMOTD) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMOTD) General() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidMOTD) HasGeneral() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMOTD) SetGeneral(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGeneral sets the general field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidMOTD) NewGeneral() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidMOTD) Motd() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidMOTD) HasMotd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidMOTD) MotdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidMOTD) SetMotd(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// RaidMOTD_List is a list of RaidMOTD.
type RaidMOTD_List = capnp.StructList[RaidMOTD]

// NewRaidMOTD creates a new list of RaidMOTD.
func NewRaidMOTD_List(s *capnp.Segment, sz int32) (RaidMOTD_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[RaidMOTD](l), err
}

// RaidMOTD_Future is a wrapper for a RaidMOTD promised by a client call.
type RaidMOTD_Future struct{ *capnp.Future }

func (f RaidMOTD_Future) Struct() (RaidMOTD, error) {
	p, err := f.Future.Ptr()
	return RaidMOTD(p.Struct()), err
}
func (p RaidMOTD_Future) General() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidLeadershipUpdate capnp.Struct

// RaidLeadershipUpdate_TypeID is the unique identifier for the type RaidLeadershipUpdate.
const RaidLeadershipUpdate_TypeID = 0x9078ec69fd7d9560

func NewRaidLeadershipUpdate(s *capnp.Segment) (RaidLeadershipUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RaidLeadershipUpdate(st), err
}

func NewRootRaidLeadershipUpdate(s *capnp.Segment) (RaidLeadershipUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RaidLeadershipUpdate(st), err
}

func ReadRootRaidLeadershipUpdate(msg *capnp.Message) (RaidLeadershipUpdate, error) {
	root, err := msg.Root()
	return RaidLeadershipUpdate(root.Struct()), err
}

func (s RaidLeadershipUpdate) String() string {
	str, _ := text.Marshal(0x9078ec69fd7d9560, capnp.Struct(s))
	return str
}

func (s RaidLeadershipUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidLeadershipUpdate) DecodeFromPtr(p capnp.Ptr) RaidLeadershipUpdate {
	return RaidLeadershipUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidLeadershipUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidLeadershipUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidLeadershipUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidLeadershipUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidLeadershipUpdate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidLeadershipUpdate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidLeadershipUpdate) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidLeadershipUpdate) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidLeadershipUpdate) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidLeadershipUpdate) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidLeadershipUpdate) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidLeadershipUpdate) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidLeadershipUpdate) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidLeadershipUpdate) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RaidLeadershipUpdate) Group() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return GroupLeadershipAA(p.Struct()), err
}

func (s RaidLeadershipUpdate) HasGroup() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaidLeadershipUpdate) SetGroup(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewGroup sets the group field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s RaidLeadershipUpdate) NewGroup() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidLeadershipUpdate) Raid() (RaidLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return RaidLeadershipAA(p.Struct()), err
}

func (s RaidLeadershipUpdate) HasRaid() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RaidLeadershipUpdate) SetRaid(v RaidLeadershipAA) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewRaid sets the raid field to a newly
// allocated RaidLeadershipAA struct, preferring placement in s's segment.
func (s RaidLeadershipUpdate) NewRaid() (RaidLeadershipAA, error) {
	ss, err := NewRaidLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return RaidLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaidLeadershipUpdate_List is a list of RaidLeadershipUpdate.
type RaidLeadershipUpdate_List = capnp.StructList[RaidLeadershipUpdate]

// NewRaidLeadershipUpdate creates a new list of RaidLeadershipUpdate.
func NewRaidLeadershipUpdate_List(s *capnp.Segment, sz int32) (RaidLeadershipUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[RaidLeadershipUpdate](l), err
}

// RaidLeadershipUpdate_Future is a wrapper for a RaidLeadershipUpdate promised by a client call.
type RaidLeadershipUpdate_Future struct{ *capnp.Future }

func (f RaidLeadershipUpdate_Future) Struct() (RaidLeadershipUpdate, error) {
	p, err := f.Future.Ptr()
	return RaidLeadershipUpdate(p.Struct()), err
}
func (p RaidLeadershipUpdate_Future) Group() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(2, nil)}
}
func (p RaidLeadershipUpdate_Future) Raid() RaidLeadershipAA_Future {
	return RaidLeadershipAA_Future{Future: p.Future.Field(3, nil)}
}

type RaidCreate capnp.Struct

// RaidCreate_TypeID is the unique identifier for the type RaidCreate.
const RaidCreate_TypeID = 0xfa80583ce360de61

func NewRaidCreate(s *capnp.Segment) (RaidCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RaidCreate(st), err
}

func NewRootRaidCreate(s *capnp.Segment) (RaidCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RaidCreate(st), err
}

func ReadRootRaidCreate(msg *capnp.Message) (RaidCreate, error) {
	root, err := msg.Root()
	return RaidCreate(root.Struct()), err
}

func (s RaidCreate) String() string {
	str, _ := text.Marshal(0xfa80583ce360de61, capnp.Struct(s))
	return str
}

func (s RaidCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidCreate) DecodeFromPtr(p capnp.Ptr) RaidCreate {
	return RaidCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidCreate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidCreate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidCreate) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidCreate) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidCreate) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidCreate) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidCreate) LeaderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidCreate) SetLeaderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidCreate_List is a list of RaidCreate.
type RaidCreate_List = capnp.StructList[RaidCreate]

// NewRaidCreate creates a new list of RaidCreate.
func NewRaidCreate_List(s *capnp.Segment, sz int32) (RaidCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[RaidCreate](l), err
}

// RaidCreate_Future is a wrapper for a RaidCreate promised by a client call.
type RaidCreate_Future struct{ *capnp.Future }

func (f RaidCreate_Future) Struct() (RaidCreate, error) {
	p, err := f.Future.Ptr()
	return RaidCreate(p.Struct()), err
}

type RaidMemberInfo capnp.Struct

// RaidMemberInfo_TypeID is the unique identifier for the type RaidMemberInfo.
const RaidMemberInfo_TypeID = 0xf32339f8d6ffe524

func NewRaidMemberInfo(s *capnp.Segment) (RaidMemberInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaidMemberInfo(st), err
}

func NewRootRaidMemberInfo(s *capnp.Segment) (RaidMemberInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaidMemberInfo(st), err
}

func ReadRootRaidMemberInfo(msg *capnp.Message) (RaidMemberInfo, error) {
	root, err := msg.Root()
	return RaidMemberInfo(root.Struct()), err
}

func (s RaidMemberInfo) String() string {
	str, _ := text.Marshal(0xf32339f8d6ffe524, capnp.Struct(s))
	return str
}

func (s RaidMemberInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMemberInfo) DecodeFromPtr(p capnp.Ptr) RaidMemberInfo {
	return RaidMemberInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMemberInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMemberInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMemberInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMemberInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMemberInfo) GroupNumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidMemberInfo) SetGroupNumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidMemberInfo) MemberName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidMemberInfo) HasMemberName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMemberInfo) MemberNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidMemberInfo) SetMemberName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidMemberInfo) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidMemberInfo) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidMemberInfo) Level() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidMemberInfo) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RaidMemberInfo) IsRaidLeader() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RaidMemberInfo) SetIsRaidLeader(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RaidMemberInfo) IsGroupLeader() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RaidMemberInfo) SetIsGroupLeader(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RaidMemberInfo) MainTank() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s RaidMemberInfo) SetMainTank(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// RaidMemberInfo_List is a list of RaidMemberInfo.
type RaidMemberInfo_List = capnp.StructList[RaidMemberInfo]

// NewRaidMemberInfo creates a new list of RaidMemberInfo.
func NewRaidMemberInfo_List(s *capnp.Segment, sz int32) (RaidMemberInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RaidMemberInfo](l), err
}

// RaidMemberInfo_Future is a wrapper for a RaidMemberInfo promised by a client call.
type RaidMemberInfo_Future struct{ *capnp.Future }

func (f RaidMemberInfo_Future) Struct() (RaidMemberInfo, error) {
	p, err := f.Future.Ptr()
	return RaidMemberInfo(p.Struct()), err
}

type RaidDetails capnp.Struct

// RaidDetails_TypeID is the unique identifier for the type RaidDetails.
const RaidDetails_TypeID = 0xf87e75def99cdba4

func NewRaidDetails(s *capnp.Segment) (RaidDetails, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidDetails(st), err
}

func NewRootRaidDetails(s *capnp.Segment) (RaidDetails, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidDetails(st), err
}

func ReadRootRaidDetails(msg *capnp.Message) (RaidDetails, error) {
	root, err := msg.Root()
	return RaidDetails(root.Struct()), err
}

func (s RaidDetails) String() string {
	str, _ := text.Marshal(0xf87e75def99cdba4, capnp.Struct(s))
	return str
}

func (s RaidDetails) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidDetails) DecodeFromPtr(p capnp.Ptr) RaidDetails {
	return RaidDetails(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidDetails) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidDetails) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidDetails) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidDetails) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidDetails) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidDetails) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidDetails) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidDetails) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidDetails) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidDetails) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidDetails) Abilities() (LeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return LeadershipAA(p.Struct()), err
}

func (s RaidDetails) HasAbilities() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidDetails) SetAbilities(v LeadershipAA) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewAbilities sets the abilities field to a newly
// allocated LeadershipAA struct, preferring placement in s's segment.
func (s RaidDetails) NewAbilities() (LeadershipAA, error) {
	ss, err := NewLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return LeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidDetails) LeaderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidDetails) SetLeaderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidDetails_List is a list of RaidDetails.
type RaidDetails_List = capnp.StructList[RaidDetails]

// NewRaidDetails creates a new list of RaidDetails.
func NewRaidDetails_List(s *capnp.Segment, sz int32) (RaidDetails_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RaidDetails](l), err
}

// RaidDetails_Future is a wrapper for a RaidDetails promised by a client call.
type RaidDetails_Future struct{ *capnp.Future }

func (f RaidDetails_Future) Struct() (RaidDetails, error) {
	p, err := f.Future.Ptr()
	return RaidDetails(p.Struct()), err
}
func (p RaidDetails_Future) Abilities() LeadershipAA_Future {
	return LeadershipAA_Future{Future: p.Future.Field(1, nil)}
}

type RaidMembers capnp.Struct

// RaidMembers_TypeID is the unique identifier for the type RaidMembers.
const RaidMembers_TypeID = 0xa5a8b25550e0240d

func NewRaidMembers(s *capnp.Segment) (RaidMembers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RaidMembers(st), err
}

func NewRootRaidMembers(s *capnp.Segment) (RaidMembers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RaidMembers(st), err
}

func ReadRootRaidMembers(msg *capnp.Message) (RaidMembers, error) {
	root, err := msg.Root()
	return RaidMembers(root.Struct()), err
}

func (s RaidMembers) String() string {
	str, _ := text.Marshal(0xa5a8b25550e0240d, capnp.Struct(s))
	return str
}

func (s RaidMembers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMembers) DecodeFromPtr(p capnp.Ptr) RaidMembers {
	return RaidMembers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMembers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMembers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMembers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMembers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMembers) Details() (RaidDetails, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidDetails(p.Struct()), err
}

func (s RaidMembers) HasDetails() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMembers) SetDetails(v RaidDetails) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDetails sets the details field to a newly
// allocated RaidDetails struct, preferring placement in s's segment.
func (s RaidMembers) NewDetails() (RaidDetails, error) {
	ss, err := NewRaidDetails(capnp.Struct(s).Segment())
	if err != nil {
		return RaidDetails{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidMembers) MemberCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidMembers) SetMemberCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidMembers) Members() (RaidMemberInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RaidMemberInfo_List(p.List()), err
}

func (s RaidMembers) HasMembers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidMembers) SetMembers(v RaidMemberInfo_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated RaidMemberInfo_List, preferring placement in s's segment.
func (s RaidMembers) NewMembers(n int32) (RaidMemberInfo_List, error) {
	l, err := NewRaidMemberInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RaidMemberInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s RaidMembers) Empty() (RaidMemberInfo, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return RaidMemberInfo(p.Struct()), err
}

func (s RaidMembers) HasEmpty() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaidMembers) SetEmpty(v RaidMemberInfo) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEmpty sets the empty field to a newly
// allocated RaidMemberInfo struct, preferring placement in s's segment.
func (s RaidMembers) NewEmpty() (RaidMemberInfo, error) {
	ss, err := NewRaidMemberInfo(capnp.Struct(s).Segment())
	if err != nil {
		return RaidMemberInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaidMembers_List is a list of RaidMembers.
type RaidMembers_List = capnp.StructList[RaidMembers]

// NewRaidMembers creates a new list of RaidMembers.
func NewRaidMembers_List(s *capnp.Segment, sz int32) (RaidMembers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[RaidMembers](l), err
}

// RaidMembers_Future is a wrapper for a RaidMembers promised by a client call.
type RaidMembers_Future struct{ *capnp.Future }

func (f RaidMembers_Future) Struct() (RaidMembers, error) {
	p, err := f.Future.Ptr()
	return RaidMembers(p.Struct()), err
}
func (p RaidMembers_Future) Details() RaidDetails_Future {
	return RaidDetails_Future{Future: p.Future.Field(0, nil)}
}
func (p RaidMembers_Future) Empty() RaidMemberInfo_Future {
	return RaidMemberInfo_Future{Future: p.Future.Field(2, nil)}
}

type DynamicWall capnp.Struct

// DynamicWall_TypeID is the unique identifier for the type DynamicWall.
const DynamicWall_TypeID = 0xaf898798e12e23da

func NewDynamicWall(s *capnp.Segment) (DynamicWall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DynamicWall(st), err
}

func NewRootDynamicWall(s *capnp.Segment) (DynamicWall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DynamicWall(st), err
}

func ReadRootDynamicWall(msg *capnp.Message) (DynamicWall, error) {
	root, err := msg.Root()
	return DynamicWall(root.Struct()), err
}

func (s DynamicWall) String() string {
	str, _ := text.Marshal(0xaf898798e12e23da, capnp.Struct(s))
	return str
}

func (s DynamicWall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicWall) DecodeFromPtr(p capnp.Ptr) DynamicWall {
	return DynamicWall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicWall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicWall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicWall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicWall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicWall) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicWall) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicWall) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicWall) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicWall) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s DynamicWall) SetY(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s DynamicWall) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s DynamicWall) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s DynamicWall) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s DynamicWall) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s DynamicWall) OneHundred() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s DynamicWall) SetOneHundred(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// DynamicWall_List is a list of DynamicWall.
type DynamicWall_List = capnp.StructList[DynamicWall]

// NewDynamicWall creates a new list of DynamicWall.
func NewDynamicWall_List(s *capnp.Segment, sz int32) (DynamicWall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[DynamicWall](l), err
}

// DynamicWall_Future is a wrapper for a DynamicWall promised by a client call.
type DynamicWall_Future struct{ *capnp.Future }

func (f DynamicWall_Future) Struct() (DynamicWall, error) {
	p, err := f.Future.Ptr()
	return DynamicWall(p.Struct()), err
}

type BandolierCreate capnp.Struct

// BandolierCreate_TypeID is the unique identifier for the type BandolierCreate.
const BandolierCreate_TypeID = 0xedada67c810ba36d

func NewBandolierCreate(s *capnp.Segment) (BandolierCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierCreate(st), err
}

func NewRootBandolierCreate(s *capnp.Segment) (BandolierCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierCreate(st), err
}

func ReadRootBandolierCreate(msg *capnp.Message) (BandolierCreate, error) {
	root, err := msg.Root()
	return BandolierCreate(root.Struct()), err
}

func (s BandolierCreate) String() string {
	str, _ := text.Marshal(0xedada67c810ba36d, capnp.Struct(s))
	return str
}

func (s BandolierCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierCreate) DecodeFromPtr(p capnp.Ptr) BandolierCreate {
	return BandolierCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierCreate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierCreate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierCreate) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierCreate) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BandolierCreate) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BandolierCreate) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BandolierCreate) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BandolierCreate) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BandolierCreate_List is a list of BandolierCreate.
type BandolierCreate_List = capnp.StructList[BandolierCreate]

// NewBandolierCreate creates a new list of BandolierCreate.
func NewBandolierCreate_List(s *capnp.Segment, sz int32) (BandolierCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BandolierCreate](l), err
}

// BandolierCreate_Future is a wrapper for a BandolierCreate promised by a client call.
type BandolierCreate_Future struct{ *capnp.Future }

func (f BandolierCreate_Future) Struct() (BandolierCreate, error) {
	p, err := f.Future.Ptr()
	return BandolierCreate(p.Struct()), err
}

type BandolierDelete capnp.Struct

// BandolierDelete_TypeID is the unique identifier for the type BandolierDelete.
const BandolierDelete_TypeID = 0xa304ad602f730110

func NewBandolierDelete(s *capnp.Segment) (BandolierDelete, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierDelete(st), err
}

func NewRootBandolierDelete(s *capnp.Segment) (BandolierDelete, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierDelete(st), err
}

func ReadRootBandolierDelete(msg *capnp.Message) (BandolierDelete, error) {
	root, err := msg.Root()
	return BandolierDelete(root.Struct()), err
}

func (s BandolierDelete) String() string {
	str, _ := text.Marshal(0xa304ad602f730110, capnp.Struct(s))
	return str
}

func (s BandolierDelete) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierDelete) DecodeFromPtr(p capnp.Ptr) BandolierDelete {
	return BandolierDelete(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierDelete) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierDelete) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierDelete) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierDelete) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierDelete) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierDelete) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierDelete) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierDelete) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BandolierDelete_List is a list of BandolierDelete.
type BandolierDelete_List = capnp.StructList[BandolierDelete]

// NewBandolierDelete creates a new list of BandolierDelete.
func NewBandolierDelete_List(s *capnp.Segment, sz int32) (BandolierDelete_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BandolierDelete](l), err
}

// BandolierDelete_Future is a wrapper for a BandolierDelete promised by a client call.
type BandolierDelete_Future struct{ *capnp.Future }

func (f BandolierDelete_Future) Struct() (BandolierDelete, error) {
	p, err := f.Future.Ptr()
	return BandolierDelete(p.Struct()), err
}

type BandolierSet capnp.Struct

// BandolierSet_TypeID is the unique identifier for the type BandolierSet.
const BandolierSet_TypeID = 0xae87b106322248a8

func NewBandolierSet(s *capnp.Segment) (BandolierSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierSet(st), err
}

func NewRootBandolierSet(s *capnp.Segment) (BandolierSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierSet(st), err
}

func ReadRootBandolierSet(msg *capnp.Message) (BandolierSet, error) {
	root, err := msg.Root()
	return BandolierSet(root.Struct()), err
}

func (s BandolierSet) String() string {
	str, _ := text.Marshal(0xae87b106322248a8, capnp.Struct(s))
	return str
}

func (s BandolierSet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierSet) DecodeFromPtr(p capnp.Ptr) BandolierSet {
	return BandolierSet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierSet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierSet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierSet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierSet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierSet) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierSet) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierSet) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierSet) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BandolierSet_List is a list of BandolierSet.
type BandolierSet_List = capnp.StructList[BandolierSet]

// NewBandolierSet creates a new list of BandolierSet.
func NewBandolierSet_List(s *capnp.Segment, sz int32) (BandolierSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BandolierSet](l), err
}

// BandolierSet_Future is a wrapper for a BandolierSet promised by a client call.
type BandolierSet_Future struct{ *capnp.Future }

func (f BandolierSet_Future) Struct() (BandolierSet, error) {
	p, err := f.Future.Ptr()
	return BandolierSet(p.Struct()), err
}

type Arrow capnp.Struct

// Arrow_TypeID is the unique identifier for the type Arrow.
const Arrow_TypeID = 0x8f80c9fc8ead22c9

func NewArrow(s *capnp.Segment) (Arrow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Arrow(st), err
}

func NewRootArrow(s *capnp.Segment) (Arrow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Arrow(st), err
}

func ReadRootArrow(msg *capnp.Message) (Arrow, error) {
	root, err := msg.Root()
	return Arrow(root.Struct()), err
}

func (s Arrow) String() string {
	str, _ := text.Marshal(0x8f80c9fc8ead22c9, capnp.Struct(s))
	return str
}

func (s Arrow) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Arrow) DecodeFromPtr(p capnp.Ptr) Arrow {
	return Arrow(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Arrow) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Arrow) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Arrow) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Arrow) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Arrow) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Arrow) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Arrow) SrcY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Arrow) SetSrcY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Arrow) SrcX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Arrow) SetSrcX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Arrow) SrcZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Arrow) SetSrcZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Arrow) Velocity() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Arrow) SetVelocity(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Arrow) LaunchAngle() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Arrow) SetLaunchAngle(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Arrow) Tilt() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Arrow) SetTilt(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Arrow) Arc() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s Arrow) SetArc(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s Arrow) SourceId() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Arrow) SetSourceId(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Arrow) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Arrow) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Arrow) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Arrow) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s Arrow) ModelName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Arrow) HasModelName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Arrow) ModelNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Arrow) SetModelName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Arrow_List is a list of Arrow.
type Arrow_List = capnp.StructList[Arrow]

// NewArrow creates a new list of Arrow.
func NewArrow_List(s *capnp.Segment, sz int32) (Arrow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Arrow](l), err
}

// Arrow_Future is a wrapper for a Arrow promised by a client call.
type Arrow_Future struct{ *capnp.Future }

func (f Arrow_Future) Struct() (Arrow, error) {
	p, err := f.Future.Ptr()
	return Arrow(p.Struct()), err
}

type Consent capnp.Struct

// Consent_TypeID is the unique identifier for the type Consent.
const Consent_TypeID = 0xa66384177fb99486

func NewConsent(s *capnp.Segment) (Consent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Consent(st), err
}

func NewRootConsent(s *capnp.Segment) (Consent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Consent(st), err
}

func ReadRootConsent(msg *capnp.Message) (Consent, error) {
	root, err := msg.Root()
	return Consent(root.Struct()), err
}

func (s Consent) String() string {
	str, _ := text.Marshal(0xa66384177fb99486, capnp.Struct(s))
	return str
}

func (s Consent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consent) DecodeFromPtr(p capnp.Ptr) Consent {
	return Consent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consent) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Consent) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Consent) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Consent) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Consent_List is a list of Consent.
type Consent_List = capnp.StructList[Consent]

// NewConsent creates a new list of Consent.
func NewConsent_List(s *capnp.Segment, sz int32) (Consent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Consent](l), err
}

// Consent_Future is a wrapper for a Consent promised by a client call.
type Consent_Future struct{ *capnp.Future }

func (f Consent_Future) Struct() (Consent, error) {
	p, err := f.Future.Ptr()
	return Consent(p.Struct()), err
}

type AdventureMerchant capnp.Struct

// AdventureMerchant_TypeID is the unique identifier for the type AdventureMerchant.
const AdventureMerchant_TypeID = 0xf89cd60c9713ce58

func NewAdventureMerchant(s *capnp.Segment) (AdventureMerchant, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureMerchant(st), err
}

func NewRootAdventureMerchant(s *capnp.Segment) (AdventureMerchant, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureMerchant(st), err
}

func ReadRootAdventureMerchant(msg *capnp.Message) (AdventureMerchant, error) {
	root, err := msg.Root()
	return AdventureMerchant(root.Struct()), err
}

func (s AdventureMerchant) String() string {
	str, _ := text.Marshal(0xf89cd60c9713ce58, capnp.Struct(s))
	return str
}

func (s AdventureMerchant) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureMerchant) DecodeFromPtr(p capnp.Ptr) AdventureMerchant {
	return AdventureMerchant(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureMerchant) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureMerchant) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureMerchant) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureMerchant) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureMerchant) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureMerchant) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// AdventureMerchant_List is a list of AdventureMerchant.
type AdventureMerchant_List = capnp.StructList[AdventureMerchant]

// NewAdventureMerchant creates a new list of AdventureMerchant.
func NewAdventureMerchant_List(s *capnp.Segment, sz int32) (AdventureMerchant_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureMerchant](l), err
}

// AdventureMerchant_Future is a wrapper for a AdventureMerchant promised by a client call.
type AdventureMerchant_Future struct{ *capnp.Future }

func (f AdventureMerchant_Future) Struct() (AdventureMerchant, error) {
	p, err := f.Future.Ptr()
	return AdventureMerchant(p.Struct()), err
}

type GMtoggle capnp.Struct

// GMtoggle_TypeID is the unique identifier for the type GMtoggle.
const GMtoggle_TypeID = 0x82a7789fb5b3a028

func NewGMtoggle(s *capnp.Segment) (GMtoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMtoggle(st), err
}

func NewRootGMtoggle(s *capnp.Segment) (GMtoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMtoggle(st), err
}

func ReadRootGMtoggle(msg *capnp.Message) (GMtoggle, error) {
	root, err := msg.Root()
	return GMtoggle(root.Struct()), err
}

func (s GMtoggle) String() string {
	str, _ := text.Marshal(0x82a7789fb5b3a028, capnp.Struct(s))
	return str
}

func (s GMtoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMtoggle) DecodeFromPtr(p capnp.Ptr) GMtoggle {
	return GMtoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMtoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMtoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMtoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMtoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMtoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMtoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GMtoggle_List is a list of GMtoggle.
type GMtoggle_List = capnp.StructList[GMtoggle]

// NewGMtoggle creates a new list of GMtoggle.
func NewGMtoggle_List(s *capnp.Segment, sz int32) (GMtoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GMtoggle](l), err
}

// GMtoggle_Future is a wrapper for a GMtoggle promised by a client call.
type GMtoggle_Future struct{ *capnp.Future }

func (f GMtoggle_Future) Struct() (GMtoggle, error) {
	p, err := f.Future.Ptr()
	return GMtoggle(p.Struct()), err
}

type GroupInvite capnp.Struct

// GroupInvite_TypeID is the unique identifier for the type GroupInvite.
const GroupInvite_TypeID = 0x9b932a4905396044

func NewGroupInvite(s *capnp.Segment) (GroupInvite, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupInvite(st), err
}

func NewRootGroupInvite(s *capnp.Segment) (GroupInvite, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupInvite(st), err
}

func ReadRootGroupInvite(msg *capnp.Message) (GroupInvite, error) {
	root, err := msg.Root()
	return GroupInvite(root.Struct()), err
}

func (s GroupInvite) String() string {
	str, _ := text.Marshal(0x9b932a4905396044, capnp.Struct(s))
	return str
}

func (s GroupInvite) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupInvite) DecodeFromPtr(p capnp.Ptr) GroupInvite {
	return GroupInvite(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupInvite) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupInvite) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupInvite) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupInvite) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupInvite) InviteeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupInvite) HasInviteeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupInvite) InviteeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupInvite) SetInviteeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupInvite) InviterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupInvite) HasInviterName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupInvite) InviterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupInvite) SetInviterName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupInvite_List is a list of GroupInvite.
type GroupInvite_List = capnp.StructList[GroupInvite]

// NewGroupInvite creates a new list of GroupInvite.
func NewGroupInvite_List(s *capnp.Segment, sz int32) (GroupInvite_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GroupInvite](l), err
}

// GroupInvite_Future is a wrapper for a GroupInvite promised by a client call.
type GroupInvite_Future struct{ *capnp.Future }

func (f GroupInvite_Future) Struct() (GroupInvite, error) {
	p, err := f.Future.Ptr()
	return GroupInvite(p.Struct()), err
}

type ColoredText capnp.Struct

// ColoredText_TypeID is the unique identifier for the type ColoredText.
const ColoredText_TypeID = 0xf55818d39f2c0c72

func NewColoredText(s *capnp.Segment) (ColoredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColoredText(st), err
}

func NewRootColoredText(s *capnp.Segment) (ColoredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColoredText(st), err
}

func ReadRootColoredText(msg *capnp.Message) (ColoredText, error) {
	root, err := msg.Root()
	return ColoredText(root.Struct()), err
}

func (s ColoredText) String() string {
	str, _ := text.Marshal(0xf55818d39f2c0c72, capnp.Struct(s))
	return str
}

func (s ColoredText) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ColoredText) DecodeFromPtr(p capnp.Ptr) ColoredText {
	return ColoredText(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ColoredText) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ColoredText) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ColoredText) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ColoredText) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ColoredText) Color() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ColoredText) SetColor(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ColoredText) Msg() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ColoredText) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ColoredText) MsgBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ColoredText) SetMsg(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ColoredText_List is a list of ColoredText.
type ColoredText_List = capnp.StructList[ColoredText]

// NewColoredText creates a new list of ColoredText.
func NewColoredText_List(s *capnp.Segment, sz int32) (ColoredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ColoredText](l), err
}

// ColoredText_Future is a wrapper for a ColoredText promised by a client call.
type ColoredText_Future struct{ *capnp.Future }

func (f ColoredText_Future) Struct() (ColoredText, error) {
	p, err := f.Future.Ptr()
	return ColoredText(p.Struct()), err
}

type UseAA capnp.Struct

// UseAA_TypeID is the unique identifier for the type UseAA.
const UseAA_TypeID = 0xa377d9a07bd4d6d6

func NewUseAA(s *capnp.Segment) (UseAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UseAA(st), err
}

func NewRootUseAA(s *capnp.Segment) (UseAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UseAA(st), err
}

func ReadRootUseAA(msg *capnp.Message) (UseAA, error) {
	root, err := msg.Root()
	return UseAA(root.Struct()), err
}

func (s UseAA) String() string {
	str, _ := text.Marshal(0xa377d9a07bd4d6d6, capnp.Struct(s))
	return str
}

func (s UseAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UseAA) DecodeFromPtr(p capnp.Ptr) UseAA {
	return UseAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UseAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UseAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UseAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UseAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UseAA) Begin() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s UseAA) SetBegin(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s UseAA) Ability() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s UseAA) SetAbility(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s UseAA) End() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s UseAA) SetEnd(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// UseAA_List is a list of UseAA.
type UseAA_List = capnp.StructList[UseAA]

// NewUseAA creates a new list of UseAA.
func NewUseAA_List(s *capnp.Segment, sz int32) (UseAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[UseAA](l), err
}

// UseAA_Future is a wrapper for a UseAA promised by a client call.
type UseAA_Future struct{ *capnp.Future }

func (f UseAA_Future) Struct() (UseAA, error) {
	p, err := f.Future.Ptr()
	return UseAA(p.Struct()), err
}

type AAAbility capnp.Struct

// AAAbility_TypeID is the unique identifier for the type AAAbility.
const AAAbility_TypeID = 0x9598dccef1d83c38

func NewAAAbility(s *capnp.Segment) (AAAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAbility(st), err
}

func NewRootAAAbility(s *capnp.Segment) (AAAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAbility(st), err
}

func ReadRootAAAbility(msg *capnp.Message) (AAAbility, error) {
	root, err := msg.Root()
	return AAAbility(root.Struct()), err
}

func (s AAAbility) String() string {
	str, _ := text.Marshal(0x9598dccef1d83c38, capnp.Struct(s))
	return str
}

func (s AAAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAAbility) DecodeFromPtr(p capnp.Ptr) AAAbility {
	return AAAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAAbility) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAAbility) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAAbility) BaseValue() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAAbility) SetBaseValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AAAbility) LimitValue() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AAAbility) SetLimitValue(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AAAbility) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AAAbility) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AAAbility_List is a list of AAAbility.
type AAAbility_List = capnp.StructList[AAAbility]

// NewAAAbility creates a new list of AAAbility.
func NewAAAbility_List(s *capnp.Segment, sz int32) (AAAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AAAbility](l), err
}

// AAAbility_Future is a wrapper for a AAAbility promised by a client call.
type AAAbility_Future struct{ *capnp.Future }

func (f AAAbility_Future) Struct() (AAAbility, error) {
	p, err := f.Future.Ptr()
	return AAAbility(p.Struct()), err
}

type SendAA capnp.Struct

// SendAA_TypeID is the unique identifier for the type SendAA.
const SendAA_TypeID = 0xdacdaa0d69c497ba

func NewSendAA(s *capnp.Segment) (SendAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1})
	return SendAA(st), err
}

func NewRootSendAA(s *capnp.Segment) (SendAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1})
	return SendAA(st), err
}

func ReadRootSendAA(msg *capnp.Message) (SendAA, error) {
	root, err := msg.Root()
	return SendAA(root.Struct()), err
}

func (s SendAA) String() string {
	str, _ := text.Marshal(0xdacdaa0d69c497ba, capnp.Struct(s))
	return str
}

func (s SendAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SendAA) DecodeFromPtr(p capnp.Ptr) SendAA {
	return SendAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SendAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SendAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SendAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SendAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SendAA) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SendAA) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SendAA) HotkeySid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SendAA) SetHotkeySid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SendAA) HotkeySid2() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SendAA) SetHotkeySid2(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s SendAA) TitleSid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s SendAA) SetTitleSid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s SendAA) DescSid() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s SendAA) SetDescSid(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s SendAA) ClassType() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s SendAA) SetClassType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s SendAA) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s SendAA) SetCost(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s SendAA) Seq() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s SendAA) SetSeq(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s SendAA) CurrentLevel() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s SendAA) SetCurrentLevel(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s SendAA) PrereqSkill() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s SendAA) SetPrereqSkill(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s SendAA) PrereqMinpoints() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s SendAA) SetPrereqMinpoints(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s SendAA) Type() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s SendAA) SetType(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s SendAA) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s SendAA) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s SendAA) SpellType() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s SendAA) SetSpellType(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s SendAA) SpellRefresh() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s SendAA) SetSpellRefresh(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s SendAA) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s SendAA) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s SendAA) MaxLevel() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s SendAA) SetMaxLevel(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s SendAA) LastId() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s SendAA) SetLastId(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s SendAA) NextId() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s SendAA) SetNextId(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s SendAA) Cost2() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s SendAA) SetCost2(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s SendAA) Count() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s SendAA) SetCount(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s SendAA) Abilities() (AAAbility_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAAbility_List(p.List()), err
}

func (s SendAA) HasAbilities() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SendAA) SetAbilities(v AAAbility_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAbilities sets the abilities field to a newly
// allocated AAAbility_List, preferring placement in s's segment.
func (s SendAA) NewAbilities(n int32) (AAAbility_List, error) {
	l, err := NewAAAbility_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAAbility_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SendAA_List is a list of SendAA.
type SendAA_List = capnp.StructList[SendAA]

// NewSendAA creates a new list of SendAA.
func NewSendAA_List(s *capnp.Segment, sz int32) (SendAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1}, sz)
	return capnp.StructList[SendAA](l), err
}

// SendAA_Future is a wrapper for a SendAA promised by a client call.
type SendAA_Future struct{ *capnp.Future }

func (f SendAA_Future) Struct() (SendAA, error) {
	p, err := f.Future.Ptr()
	return SendAA(p.Struct()), err
}

type AAList capnp.Struct

// AAList_TypeID is the unique identifier for the type AAList.
const AAList_TypeID = 0xec5aa6bcd4fca2e4

func NewAAList(s *capnp.Segment) (AAList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AAList(st), err
}

func NewRootAAList(s *capnp.Segment) (AAList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AAList(st), err
}

func ReadRootAAList(msg *capnp.Message) (AAList, error) {
	root, err := msg.Root()
	return AAList(root.Struct()), err
}

func (s AAList) String() string {
	str, _ := text.Marshal(0xec5aa6bcd4fca2e4, capnp.Struct(s))
	return str
}

func (s AAList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAList) DecodeFromPtr(p capnp.Ptr) AAList {
	return AAList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAList) Aa() (SendAA_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SendAA_List(p.List()), err
}

func (s AAList) HasAa() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AAList) SetAa(v SendAA_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAa sets the aa field to a newly
// allocated SendAA_List, preferring placement in s's segment.
func (s AAList) NewAa(n int32) (SendAA_List, error) {
	l, err := NewSendAA_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SendAA_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AAList_List is a list of AAList.
type AAList_List = capnp.StructList[AAList]

// NewAAList creates a new list of AAList.
func NewAAList_List(s *capnp.Segment, sz int32) (AAList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AAList](l), err
}

// AAList_Future is a wrapper for a AAList promised by a client call.
type AAList_Future struct{ *capnp.Future }

func (f AAList_Future) Struct() (AAList, error) {
	p, err := f.Future.Ptr()
	return AAList(p.Struct()), err
}

type AAAction capnp.Struct

// AAAction_TypeID is the unique identifier for the type AAAction.
const AAAction_TypeID = 0xbb2eb4d03dfe2a7d

func NewAAAction(s *capnp.Segment) (AAAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAction(st), err
}

func NewRootAAAction(s *capnp.Segment) (AAAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAction(st), err
}

func ReadRootAAAction(msg *capnp.Message) (AAAction, error) {
	root, err := msg.Root()
	return AAAction(root.Struct()), err
}

func (s AAAction) String() string {
	str, _ := text.Marshal(0xbb2eb4d03dfe2a7d, capnp.Struct(s))
	return str
}

func (s AAAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAAction) DecodeFromPtr(p capnp.Ptr) AAAction {
	return AAAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAAction) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAAction) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAAction) Ability() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAAction) SetAbility(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AAAction) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AAAction) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AAAction) ExpValue() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AAAction) SetExpValue(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AAAction_List is a list of AAAction.
type AAAction_List = capnp.StructList[AAAction]

// NewAAAction creates a new list of AAAction.
func NewAAAction_List(s *capnp.Segment, sz int32) (AAAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AAAction](l), err
}

// AAAction_Future is a wrapper for a AAAction promised by a client call.
type AAAction_Future struct{ *capnp.Future }

func (f AAAction_Future) Struct() (AAAction, error) {
	p, err := f.Future.Ptr()
	return AAAction(p.Struct()), err
}

type AAExpUpdate capnp.Struct

// AAExpUpdate_TypeID is the unique identifier for the type AAExpUpdate.
const AAExpUpdate_TypeID = 0xb861bce5eec387bd

func NewAAExpUpdate(s *capnp.Segment) (AAExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAExpUpdate(st), err
}

func NewRootAAExpUpdate(s *capnp.Segment) (AAExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAExpUpdate(st), err
}

func ReadRootAAExpUpdate(msg *capnp.Message) (AAExpUpdate, error) {
	root, err := msg.Root()
	return AAExpUpdate(root.Struct()), err
}

func (s AAExpUpdate) String() string {
	str, _ := text.Marshal(0xb861bce5eec387bd, capnp.Struct(s))
	return str
}

func (s AAExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAExpUpdate) DecodeFromPtr(p capnp.Ptr) AAExpUpdate {
	return AAExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAExpUpdate) AapointsUnspent() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAExpUpdate) SetAapointsUnspent(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAExpUpdate) AaxpPercent() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAExpUpdate) SetAaxpPercent(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AAExpUpdate_List is a list of AAExpUpdate.
type AAExpUpdate_List = capnp.StructList[AAExpUpdate]

// NewAAExpUpdate creates a new list of AAExpUpdate.
func NewAAExpUpdate_List(s *capnp.Segment, sz int32) (AAExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AAExpUpdate](l), err
}

// AAExpUpdate_Future is a wrapper for a AAExpUpdate promised by a client call.
type AAExpUpdate_Future struct{ *capnp.Future }

func (f AAExpUpdate_Future) Struct() (AAExpUpdate, error) {
	p, err := f.Future.Ptr()
	return AAExpUpdate(p.Struct()), err
}

type AltAdvStats capnp.Struct

// AltAdvStats_TypeID is the unique identifier for the type AltAdvStats.
const AltAdvStats_TypeID = 0xb8ef2f123b9801df

func NewAltAdvStats(s *capnp.Segment) (AltAdvStats, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AltAdvStats(st), err
}

func NewRootAltAdvStats(s *capnp.Segment) (AltAdvStats, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AltAdvStats(st), err
}

func ReadRootAltAdvStats(msg *capnp.Message) (AltAdvStats, error) {
	root, err := msg.Root()
	return AltAdvStats(root.Struct()), err
}

func (s AltAdvStats) String() string {
	str, _ := text.Marshal(0xb8ef2f123b9801df, capnp.Struct(s))
	return str
}

func (s AltAdvStats) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AltAdvStats) DecodeFromPtr(p capnp.Ptr) AltAdvStats {
	return AltAdvStats(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AltAdvStats) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AltAdvStats) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AltAdvStats) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AltAdvStats) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AltAdvStats) Experience() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AltAdvStats) SetExperience(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AltAdvStats) Unspent() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AltAdvStats) SetUnspent(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AltAdvStats) Percentage() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AltAdvStats) SetPercentage(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// AltAdvStats_List is a list of AltAdvStats.
type AltAdvStats_List = capnp.StructList[AltAdvStats]

// NewAltAdvStats creates a new list of AltAdvStats.
func NewAltAdvStats_List(s *capnp.Segment, sz int32) (AltAdvStats_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AltAdvStats](l), err
}

// AltAdvStats_Future is a wrapper for a AltAdvStats promised by a client call.
type AltAdvStats_Future struct{ *capnp.Future }

func (f AltAdvStats_Future) Struct() (AltAdvStats, error) {
	p, err := f.Future.Ptr()
	return AltAdvStats(p.Struct()), err
}

type PlayerAA capnp.Struct

// PlayerAA_TypeID is the unique identifier for the type PlayerAA.
const PlayerAA_TypeID = 0x8cf4d94985ccea99

func NewPlayerAA(s *capnp.Segment) (PlayerAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayerAA(st), err
}

func NewRootPlayerAA(s *capnp.Segment) (PlayerAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayerAA(st), err
}

func ReadRootPlayerAA(msg *capnp.Message) (PlayerAA, error) {
	root, err := msg.Root()
	return PlayerAA(root.Struct()), err
}

func (s PlayerAA) String() string {
	str, _ := text.Marshal(0x8cf4d94985ccea99, capnp.Struct(s))
	return str
}

func (s PlayerAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerAA) DecodeFromPtr(p capnp.Ptr) PlayerAA {
	return PlayerAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerAA) AaList() (AAArray_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAArray_List(p.List()), err
}

func (s PlayerAA) HasAaList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerAA) SetAaList(v AAArray_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAaList sets the aaList field to a newly
// allocated AAArray_List, preferring placement in s's segment.
func (s PlayerAA) NewAaList(n int32) (AAArray_List, error) {
	l, err := NewAAArray_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAArray_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PlayerAA_List is a list of PlayerAA.
type PlayerAA_List = capnp.StructList[PlayerAA]

// NewPlayerAA creates a new list of PlayerAA.
func NewPlayerAA_List(s *capnp.Segment, sz int32) (PlayerAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PlayerAA](l), err
}

// PlayerAA_Future is a wrapper for a PlayerAA promised by a client call.
type PlayerAA_Future struct{ *capnp.Future }

func (f PlayerAA_Future) Struct() (PlayerAA, error) {
	p, err := f.Future.Ptr()
	return PlayerAA(p.Struct()), err
}

type AATable capnp.Struct

// AATable_TypeID is the unique identifier for the type AATable.
const AATable_TypeID = 0xd09020015ade2993

func NewAATable(s *capnp.Segment) (AATable, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AATable(st), err
}

func NewRootAATable(s *capnp.Segment) (AATable, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AATable(st), err
}

func ReadRootAATable(msg *capnp.Message) (AATable, error) {
	root, err := msg.Root()
	return AATable(root.Struct()), err
}

func (s AATable) String() string {
	str, _ := text.Marshal(0xd09020015ade2993, capnp.Struct(s))
	return str
}

func (s AATable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AATable) DecodeFromPtr(p capnp.Ptr) AATable {
	return AATable(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AATable) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AATable) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AATable) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AATable) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AATable) AaList() (AAArray_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAArray_List(p.List()), err
}

func (s AATable) HasAaList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AATable) SetAaList(v AAArray_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAaList sets the aaList field to a newly
// allocated AAArray_List, preferring placement in s's segment.
func (s AATable) NewAaList(n int32) (AAArray_List, error) {
	l, err := NewAAArray_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAArray_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AATable_List is a list of AATable.
type AATable_List = capnp.StructList[AATable]

// NewAATable creates a new list of AATable.
func NewAATable_List(s *capnp.Segment, sz int32) (AATable_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AATable](l), err
}

// AATable_Future is a wrapper for a AATable promised by a client call.
type AATable_Future struct{ *capnp.Future }

func (f AATable_Future) Struct() (AATable, error) {
	p, err := f.Future.Ptr()
	return AATable(p.Struct()), err
}

type Weather capnp.Struct

// Weather_TypeID is the unique identifier for the type Weather.
const Weather_TypeID = 0xe930a7e80f737844

func NewWeather(s *capnp.Segment) (Weather, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Weather(st), err
}

func NewRootWeather(s *capnp.Segment) (Weather, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Weather(st), err
}

func ReadRootWeather(msg *capnp.Message) (Weather, error) {
	root, err := msg.Root()
	return Weather(root.Struct()), err
}

func (s Weather) String() string {
	str, _ := text.Marshal(0xe930a7e80f737844, capnp.Struct(s))
	return str
}

func (s Weather) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Weather) DecodeFromPtr(p capnp.Ptr) Weather {
	return Weather(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Weather) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Weather) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Weather) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Weather) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Weather) Val() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Weather) SetVal(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Weather) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Weather) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Weather) Mode() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Weather) SetMode(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Weather_List is a list of Weather.
type Weather_List = capnp.StructList[Weather]

// NewWeather creates a new list of Weather.
func NewWeather_List(s *capnp.Segment, sz int32) (Weather_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Weather](l), err
}

// Weather_Future is a wrapper for a Weather promised by a client call.
type Weather_Future struct{ *capnp.Future }

func (f Weather_Future) Struct() (Weather, error) {
	p, err := f.Future.Ptr()
	return Weather(p.Struct()), err
}

type LoadSpellSet capnp.Struct

// LoadSpellSet_TypeID is the unique identifier for the type LoadSpellSet.
const LoadSpellSet_TypeID = 0xc854a2272dea6789

func NewLoadSpellSet(s *capnp.Segment) (LoadSpellSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LoadSpellSet(st), err
}

func NewRootLoadSpellSet(s *capnp.Segment) (LoadSpellSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LoadSpellSet(st), err
}

func ReadRootLoadSpellSet(msg *capnp.Message) (LoadSpellSet, error) {
	root, err := msg.Root()
	return LoadSpellSet(root.Struct()), err
}

func (s LoadSpellSet) String() string {
	str, _ := text.Marshal(0xc854a2272dea6789, capnp.Struct(s))
	return str
}

func (s LoadSpellSet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LoadSpellSet) DecodeFromPtr(p capnp.Ptr) LoadSpellSet {
	return LoadSpellSet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LoadSpellSet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LoadSpellSet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LoadSpellSet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LoadSpellSet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LoadSpellSet) Spell() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s LoadSpellSet) HasSpell() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LoadSpellSet) SetSpell(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpell sets the spell field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s LoadSpellSet) NewSpell(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// LoadSpellSet_List is a list of LoadSpellSet.
type LoadSpellSet_List = capnp.StructList[LoadSpellSet]

// NewLoadSpellSet creates a new list of LoadSpellSet.
func NewLoadSpellSet_List(s *capnp.Segment, sz int32) (LoadSpellSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LoadSpellSet](l), err
}

// LoadSpellSet_Future is a wrapper for a LoadSpellSet promised by a client call.
type LoadSpellSet_Future struct{ *capnp.Future }

func (f LoadSpellSet_Future) Struct() (LoadSpellSet, error) {
	p, err := f.Future.Ptr()
	return LoadSpellSet(p.Struct()), err
}

type ApplyPoison capnp.Struct

// ApplyPoison_TypeID is the unique identifier for the type ApplyPoison.
const ApplyPoison_TypeID = 0xdbae5e634d8e9ecd

func NewApplyPoison(s *capnp.Segment) (ApplyPoison, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ApplyPoison(st), err
}

func NewRootApplyPoison(s *capnp.Segment) (ApplyPoison, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ApplyPoison(st), err
}

func ReadRootApplyPoison(msg *capnp.Message) (ApplyPoison, error) {
	root, err := msg.Root()
	return ApplyPoison(root.Struct()), err
}

func (s ApplyPoison) String() string {
	str, _ := text.Marshal(0xdbae5e634d8e9ecd, capnp.Struct(s))
	return str
}

func (s ApplyPoison) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApplyPoison) DecodeFromPtr(p capnp.Ptr) ApplyPoison {
	return ApplyPoison(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApplyPoison) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApplyPoison) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApplyPoison) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApplyPoison) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApplyPoison) InventorySlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ApplyPoison) SetInventorySlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ApplyPoison) Success() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ApplyPoison) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ApplyPoison_List is a list of ApplyPoison.
type ApplyPoison_List = capnp.StructList[ApplyPoison]

// NewApplyPoison creates a new list of ApplyPoison.
func NewApplyPoison_List(s *capnp.Segment, sz int32) (ApplyPoison_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ApplyPoison](l), err
}

// ApplyPoison_Future is a wrapper for a ApplyPoison promised by a client call.
type ApplyPoison_Future struct{ *capnp.Future }

func (f ApplyPoison_Future) Struct() (ApplyPoison, error) {
	p, err := f.Future.Ptr()
	return ApplyPoison(p.Struct()), err
}

type GuildMemberUpdate capnp.Struct

// GuildMemberUpdate_TypeID is the unique identifier for the type GuildMemberUpdate.
const GuildMemberUpdate_TypeID = 0x917f02f6029babd0

func NewGuildMemberUpdate(s *capnp.Segment) (GuildMemberUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildMemberUpdate(st), err
}

func NewRootGuildMemberUpdate(s *capnp.Segment) (GuildMemberUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildMemberUpdate(st), err
}

func ReadRootGuildMemberUpdate(msg *capnp.Message) (GuildMemberUpdate, error) {
	root, err := msg.Root()
	return GuildMemberUpdate(root.Struct()), err
}

func (s GuildMemberUpdate) String() string {
	str, _ := text.Marshal(0x917f02f6029babd0, capnp.Struct(s))
	return str
}

func (s GuildMemberUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMemberUpdate) DecodeFromPtr(p capnp.Ptr) GuildMemberUpdate {
	return GuildMemberUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMemberUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMemberUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMemberUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMemberUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMemberUpdate) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMemberUpdate) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMemberUpdate) MemberName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMemberUpdate) HasMemberName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMemberUpdate) MemberNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMemberUpdate) SetMemberName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMemberUpdate) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildMemberUpdate) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildMemberUpdate) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildMemberUpdate) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// GuildMemberUpdate_List is a list of GuildMemberUpdate.
type GuildMemberUpdate_List = capnp.StructList[GuildMemberUpdate]

// NewGuildMemberUpdate creates a new list of GuildMemberUpdate.
func NewGuildMemberUpdate_List(s *capnp.Segment, sz int32) (GuildMemberUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[GuildMemberUpdate](l), err
}

// GuildMemberUpdate_Future is a wrapper for a GuildMemberUpdate promised by a client call.
type GuildMemberUpdate_Future struct{ *capnp.Future }

func (f GuildMemberUpdate_Future) Struct() (GuildMemberUpdate, error) {
	p, err := f.Future.Ptr()
	return GuildMemberUpdate(p.Struct()), err
}

type VeteranRewardItem capnp.Struct

// VeteranRewardItem_TypeID is the unique identifier for the type VeteranRewardItem.
const VeteranRewardItem_TypeID = 0xc5c8431019d453a8

func NewVeteranRewardItem(s *capnp.Segment) (VeteranRewardItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranRewardItem(st), err
}

func NewRootVeteranRewardItem(s *capnp.Segment) (VeteranRewardItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranRewardItem(st), err
}

func ReadRootVeteranRewardItem(msg *capnp.Message) (VeteranRewardItem, error) {
	root, err := msg.Root()
	return VeteranRewardItem(root.Struct()), err
}

func (s VeteranRewardItem) String() string {
	str, _ := text.Marshal(0xc5c8431019d453a8, capnp.Struct(s))
	return str
}

func (s VeteranRewardItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VeteranRewardItem) DecodeFromPtr(p capnp.Ptr) VeteranRewardItem {
	return VeteranRewardItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VeteranRewardItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VeteranRewardItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VeteranRewardItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VeteranRewardItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VeteranRewardItem) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s VeteranRewardItem) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s VeteranRewardItem) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s VeteranRewardItem) HasItemName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s VeteranRewardItem) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s VeteranRewardItem) SetItemName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// VeteranRewardItem_List is a list of VeteranRewardItem.
type VeteranRewardItem_List = capnp.StructList[VeteranRewardItem]

// NewVeteranRewardItem creates a new list of VeteranRewardItem.
func NewVeteranRewardItem_List(s *capnp.Segment, sz int32) (VeteranRewardItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[VeteranRewardItem](l), err
}

// VeteranRewardItem_Future is a wrapper for a VeteranRewardItem promised by a client call.
type VeteranRewardItem_Future struct{ *capnp.Future }

func (f VeteranRewardItem_Future) Struct() (VeteranRewardItem, error) {
	p, err := f.Future.Ptr()
	return VeteranRewardItem(p.Struct()), err
}

type VeteranReward capnp.Struct

// VeteranReward_TypeID is the unique identifier for the type VeteranReward.
const VeteranReward_TypeID = 0xa0a594ed993e78ca

func NewVeteranReward(s *capnp.Segment) (VeteranReward, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranReward(st), err
}

func NewRootVeteranReward(s *capnp.Segment) (VeteranReward, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranReward(st), err
}

func ReadRootVeteranReward(msg *capnp.Message) (VeteranReward, error) {
	root, err := msg.Root()
	return VeteranReward(root.Struct()), err
}

func (s VeteranReward) String() string {
	str, _ := text.Marshal(0xa0a594ed993e78ca, capnp.Struct(s))
	return str
}

func (s VeteranReward) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VeteranReward) DecodeFromPtr(p capnp.Ptr) VeteranReward {
	return VeteranReward(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VeteranReward) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VeteranReward) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VeteranReward) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VeteranReward) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VeteranReward) ClaimId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s VeteranReward) SetClaimId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s VeteranReward) Item() (VeteranRewardItem, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return VeteranRewardItem(p.Struct()), err
}

func (s VeteranReward) HasItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s VeteranReward) SetItem(v VeteranRewardItem) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewItem sets the item field to a newly
// allocated VeteranRewardItem struct, preferring placement in s's segment.
func (s VeteranReward) NewItem() (VeteranRewardItem, error) {
	ss, err := NewVeteranRewardItem(capnp.Struct(s).Segment())
	if err != nil {
		return VeteranRewardItem{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// VeteranReward_List is a list of VeteranReward.
type VeteranReward_List = capnp.StructList[VeteranReward]

// NewVeteranReward creates a new list of VeteranReward.
func NewVeteranReward_List(s *capnp.Segment, sz int32) (VeteranReward_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[VeteranReward](l), err
}

// VeteranReward_Future is a wrapper for a VeteranReward promised by a client call.
type VeteranReward_Future struct{ *capnp.Future }

func (f VeteranReward_Future) Struct() (VeteranReward, error) {
	p, err := f.Future.Ptr()
	return VeteranReward(p.Struct()), err
}
func (p VeteranReward_Future) Item() VeteranRewardItem_Future {
	return VeteranRewardItem_Future{Future: p.Future.Field(0, nil)}
}

type ExpeditionInvite capnp.Struct

// ExpeditionInvite_TypeID is the unique identifier for the type ExpeditionInvite.
const ExpeditionInvite_TypeID = 0xe79b0d006ef1331d

func NewExpeditionInvite(s *capnp.Segment) (ExpeditionInvite, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return ExpeditionInvite(st), err
}

func NewRootExpeditionInvite(s *capnp.Segment) (ExpeditionInvite, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return ExpeditionInvite(st), err
}

func ReadRootExpeditionInvite(msg *capnp.Message) (ExpeditionInvite, error) {
	root, err := msg.Root()
	return ExpeditionInvite(root.Struct()), err
}

func (s ExpeditionInvite) String() string {
	str, _ := text.Marshal(0xe79b0d006ef1331d, capnp.Struct(s))
	return str
}

func (s ExpeditionInvite) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionInvite) DecodeFromPtr(p capnp.Ptr) ExpeditionInvite {
	return ExpeditionInvite(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionInvite) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionInvite) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionInvite) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionInvite) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionInvite) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionInvite) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionInvite) InviterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionInvite) HasInviterName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionInvite) InviterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetInviterName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionInvite) ExpeditionName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionInvite) HasExpeditionName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionInvite) ExpeditionNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetExpeditionName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ExpeditionInvite) Swapping() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionInvite) SetSwapping(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionInvite) SwapName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ExpeditionInvite) HasSwapName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ExpeditionInvite) SwapNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetSwapName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ExpeditionInvite) Padding() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Int32List(p.List()), err
}

func (s ExpeditionInvite) HasPadding() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ExpeditionInvite) SetPadding(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPadding sets the padding field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ExpeditionInvite) NewPadding(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s ExpeditionInvite) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ExpeditionInvite) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ExpeditionInvite) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ExpeditionInvite) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ExpeditionInvite_List is a list of ExpeditionInvite.
type ExpeditionInvite_List = capnp.StructList[ExpeditionInvite]

// NewExpeditionInvite creates a new list of ExpeditionInvite.
func NewExpeditionInvite_List(s *capnp.Segment, sz int32) (ExpeditionInvite_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return capnp.StructList[ExpeditionInvite](l), err
}

// ExpeditionInvite_Future is a wrapper for a ExpeditionInvite promised by a client call.
type ExpeditionInvite_Future struct{ *capnp.Future }

func (f ExpeditionInvite_Future) Struct() (ExpeditionInvite, error) {
	p, err := f.Future.Ptr()
	return ExpeditionInvite(p.Struct()), err
}

type ExpeditionInviteResponse capnp.Struct

// ExpeditionInviteResponse_TypeID is the unique identifier for the type ExpeditionInviteResponse.
const ExpeditionInviteResponse_TypeID = 0xf7df715b4e24efb3

func NewExpeditionInviteResponse(s *capnp.Segment) (ExpeditionInviteResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ExpeditionInviteResponse(st), err
}

func NewRootExpeditionInviteResponse(s *capnp.Segment) (ExpeditionInviteResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ExpeditionInviteResponse(st), err
}

func ReadRootExpeditionInviteResponse(msg *capnp.Message) (ExpeditionInviteResponse, error) {
	root, err := msg.Root()
	return ExpeditionInviteResponse(root.Struct()), err
}

func (s ExpeditionInviteResponse) String() string {
	str, _ := text.Marshal(0xf7df715b4e24efb3, capnp.Struct(s))
	return str
}

func (s ExpeditionInviteResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionInviteResponse) DecodeFromPtr(p capnp.Ptr) ExpeditionInviteResponse {
	return ExpeditionInviteResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionInviteResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionInviteResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionInviteResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionInviteResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionInviteResponse) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionInviteResponse) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionInviteResponse) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionInviteResponse) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionInviteResponse) Accepted() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ExpeditionInviteResponse) SetAccepted(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ExpeditionInviteResponse) Swapping() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ExpeditionInviteResponse) SetSwapping(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ExpeditionInviteResponse) SwapName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionInviteResponse) HasSwapName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionInviteResponse) SwapNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionInviteResponse) SetSwapName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ExpeditionInviteResponse_List is a list of ExpeditionInviteResponse.
type ExpeditionInviteResponse_List = capnp.StructList[ExpeditionInviteResponse]

// NewExpeditionInviteResponse creates a new list of ExpeditionInviteResponse.
func NewExpeditionInviteResponse_List(s *capnp.Segment, sz int32) (ExpeditionInviteResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionInviteResponse](l), err
}

// ExpeditionInviteResponse_Future is a wrapper for a ExpeditionInviteResponse promised by a client call.
type ExpeditionInviteResponse_Future struct{ *capnp.Future }

func (f ExpeditionInviteResponse_Future) Struct() (ExpeditionInviteResponse, error) {
	p, err := f.Future.Ptr()
	return ExpeditionInviteResponse(p.Struct()), err
}

type DynamicZoneInfo capnp.Struct

// DynamicZoneInfo_TypeID is the unique identifier for the type DynamicZoneInfo.
const DynamicZoneInfo_TypeID = 0xe7469eaa174fdd9f

func NewDynamicZoneInfo(s *capnp.Segment) (DynamicZoneInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneInfo(st), err
}

func NewRootDynamicZoneInfo(s *capnp.Segment) (DynamicZoneInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneInfo(st), err
}

func ReadRootDynamicZoneInfo(msg *capnp.Message) (DynamicZoneInfo, error) {
	root, err := msg.Root()
	return DynamicZoneInfo(root.Struct()), err
}

func (s DynamicZoneInfo) String() string {
	str, _ := text.Marshal(0xe7469eaa174fdd9f, capnp.Struct(s))
	return str
}

func (s DynamicZoneInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneInfo) DecodeFromPtr(p capnp.Ptr) DynamicZoneInfo {
	return DynamicZoneInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneInfo) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneInfo) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneInfo) Assigned() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneInfo) SetAssigned(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneInfo) MaxPlayers() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneInfo) SetMaxPlayers(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneInfo) DzName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneInfo) HasDzName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneInfo) DzNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneInfo) SetDzName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneInfo) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DynamicZoneInfo) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DynamicZoneInfo) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DynamicZoneInfo) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// DynamicZoneInfo_List is a list of DynamicZoneInfo.
type DynamicZoneInfo_List = capnp.StructList[DynamicZoneInfo]

// NewDynamicZoneInfo creates a new list of DynamicZoneInfo.
func NewDynamicZoneInfo_List(s *capnp.Segment, sz int32) (DynamicZoneInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[DynamicZoneInfo](l), err
}

// DynamicZoneInfo_Future is a wrapper for a DynamicZoneInfo promised by a client call.
type DynamicZoneInfo_Future struct{ *capnp.Future }

func (f DynamicZoneInfo_Future) Struct() (DynamicZoneInfo, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneInfo(p.Struct()), err
}

type DynamicZoneMemberEntry capnp.Struct

// DynamicZoneMemberEntry_TypeID is the unique identifier for the type DynamicZoneMemberEntry.
const DynamicZoneMemberEntry_TypeID = 0xd65b5d6ec837db5d

func NewDynamicZoneMemberEntry(s *capnp.Segment) (DynamicZoneMemberEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberEntry(st), err
}

func NewRootDynamicZoneMemberEntry(s *capnp.Segment) (DynamicZoneMemberEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberEntry(st), err
}

func ReadRootDynamicZoneMemberEntry(msg *capnp.Message) (DynamicZoneMemberEntry, error) {
	root, err := msg.Root()
	return DynamicZoneMemberEntry(root.Struct()), err
}

func (s DynamicZoneMemberEntry) String() string {
	str, _ := text.Marshal(0xd65b5d6ec837db5d, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberEntry {
	return DynamicZoneMemberEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneMemberEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneMemberEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneMemberEntry) OnlineStatus() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberEntry) SetOnlineStatus(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// DynamicZoneMemberEntry_List is a list of DynamicZoneMemberEntry.
type DynamicZoneMemberEntry_List = capnp.StructList[DynamicZoneMemberEntry]

// NewDynamicZoneMemberEntry creates a new list of DynamicZoneMemberEntry.
func NewDynamicZoneMemberEntry_List(s *capnp.Segment, sz int32) (DynamicZoneMemberEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberEntry](l), err
}

// DynamicZoneMemberEntry_Future is a wrapper for a DynamicZoneMemberEntry promised by a client call.
type DynamicZoneMemberEntry_Future struct{ *capnp.Future }

func (f DynamicZoneMemberEntry_Future) Struct() (DynamicZoneMemberEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberEntry(p.Struct()), err
}

type DynamicZoneMemberList capnp.Struct

// DynamicZoneMemberList_TypeID is the unique identifier for the type DynamicZoneMemberList.
const DynamicZoneMemberList_TypeID = 0x9ed2b947650ba549

func NewDynamicZoneMemberList(s *capnp.Segment) (DynamicZoneMemberList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberList(st), err
}

func NewRootDynamicZoneMemberList(s *capnp.Segment) (DynamicZoneMemberList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberList(st), err
}

func ReadRootDynamicZoneMemberList(msg *capnp.Message) (DynamicZoneMemberList, error) {
	root, err := msg.Root()
	return DynamicZoneMemberList(root.Struct()), err
}

func (s DynamicZoneMemberList) String() string {
	str, _ := text.Marshal(0x9ed2b947650ba549, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberList) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberList {
	return DynamicZoneMemberList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberList) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberList) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneMemberList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneMemberList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneMemberList) Members() (DynamicZoneMemberEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneMemberEntry_List(p.List()), err
}

func (s DynamicZoneMemberList) HasMembers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberList) SetMembers(v DynamicZoneMemberEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated DynamicZoneMemberEntry_List, preferring placement in s's segment.
func (s DynamicZoneMemberList) NewMembers(n int32) (DynamicZoneMemberEntry_List, error) {
	l, err := NewDynamicZoneMemberEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneMemberEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneMemberList_List is a list of DynamicZoneMemberList.
type DynamicZoneMemberList_List = capnp.StructList[DynamicZoneMemberList]

// NewDynamicZoneMemberList creates a new list of DynamicZoneMemberList.
func NewDynamicZoneMemberList_List(s *capnp.Segment, sz int32) (DynamicZoneMemberList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberList](l), err
}

// DynamicZoneMemberList_Future is a wrapper for a DynamicZoneMemberList promised by a client call.
type DynamicZoneMemberList_Future struct{ *capnp.Future }

func (f DynamicZoneMemberList_Future) Struct() (DynamicZoneMemberList, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberList(p.Struct()), err
}

type DynamicZoneMemberListName capnp.Struct

// DynamicZoneMemberListName_TypeID is the unique identifier for the type DynamicZoneMemberListName.
const DynamicZoneMemberListName_TypeID = 0xc5955ef3c3c9e4b0

func NewDynamicZoneMemberListName(s *capnp.Segment) (DynamicZoneMemberListName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberListName(st), err
}

func NewRootDynamicZoneMemberListName(s *capnp.Segment) (DynamicZoneMemberListName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberListName(st), err
}

func ReadRootDynamicZoneMemberListName(msg *capnp.Message) (DynamicZoneMemberListName, error) {
	root, err := msg.Root()
	return DynamicZoneMemberListName(root.Struct()), err
}

func (s DynamicZoneMemberListName) String() string {
	str, _ := text.Marshal(0xc5955ef3c3c9e4b0, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberListName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberListName) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberListName {
	return DynamicZoneMemberListName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberListName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberListName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberListName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberListName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberListName) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberListName) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneMemberListName) AddName() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneMemberListName) SetAddName(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneMemberListName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneMemberListName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberListName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneMemberListName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DynamicZoneMemberListName_List is a list of DynamicZoneMemberListName.
type DynamicZoneMemberListName_List = capnp.StructList[DynamicZoneMemberListName]

// NewDynamicZoneMemberListName creates a new list of DynamicZoneMemberListName.
func NewDynamicZoneMemberListName_List(s *capnp.Segment, sz int32) (DynamicZoneMemberListName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberListName](l), err
}

// DynamicZoneMemberListName_Future is a wrapper for a DynamicZoneMemberListName promised by a client call.
type DynamicZoneMemberListName_Future struct{ *capnp.Future }

func (f DynamicZoneMemberListName_Future) Struct() (DynamicZoneMemberListName, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberListName(p.Struct()), err
}

type ExpeditionLockoutTimerEntry capnp.Struct

// ExpeditionLockoutTimerEntry_TypeID is the unique identifier for the type ExpeditionLockoutTimerEntry.
const ExpeditionLockoutTimerEntry_TypeID = 0x82bbe68570bc51c9

func NewExpeditionLockoutTimerEntry(s *capnp.Segment) (ExpeditionLockoutTimerEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ExpeditionLockoutTimerEntry(st), err
}

func NewRootExpeditionLockoutTimerEntry(s *capnp.Segment) (ExpeditionLockoutTimerEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ExpeditionLockoutTimerEntry(st), err
}

func ReadRootExpeditionLockoutTimerEntry(msg *capnp.Message) (ExpeditionLockoutTimerEntry, error) {
	root, err := msg.Root()
	return ExpeditionLockoutTimerEntry(root.Struct()), err
}

func (s ExpeditionLockoutTimerEntry) String() string {
	str, _ := text.Marshal(0x82bbe68570bc51c9, capnp.Struct(s))
	return str
}

func (s ExpeditionLockoutTimerEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionLockoutTimerEntry) DecodeFromPtr(p capnp.Ptr) ExpeditionLockoutTimerEntry {
	return ExpeditionLockoutTimerEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionLockoutTimerEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionLockoutTimerEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionLockoutTimerEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionLockoutTimerEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionLockoutTimerEntry) ExpeditionName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionLockoutTimerEntry) HasExpeditionName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionLockoutTimerEntry) ExpeditionNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionLockoutTimerEntry) SetExpeditionName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionLockoutTimerEntry) SecondsRemaining() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionLockoutTimerEntry) SetSecondsRemaining(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionLockoutTimerEntry) EventType() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionLockoutTimerEntry) SetEventType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionLockoutTimerEntry) EventName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionLockoutTimerEntry) HasEventName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionLockoutTimerEntry) EventNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionLockoutTimerEntry) SetEventName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExpeditionLockoutTimerEntry_List is a list of ExpeditionLockoutTimerEntry.
type ExpeditionLockoutTimerEntry_List = capnp.StructList[ExpeditionLockoutTimerEntry]

// NewExpeditionLockoutTimerEntry creates a new list of ExpeditionLockoutTimerEntry.
func NewExpeditionLockoutTimerEntry_List(s *capnp.Segment, sz int32) (ExpeditionLockoutTimerEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[ExpeditionLockoutTimerEntry](l), err
}

// ExpeditionLockoutTimerEntry_Future is a wrapper for a ExpeditionLockoutTimerEntry promised by a client call.
type ExpeditionLockoutTimerEntry_Future struct{ *capnp.Future }

func (f ExpeditionLockoutTimerEntry_Future) Struct() (ExpeditionLockoutTimerEntry, error) {
	p, err := f.Future.Ptr()
	return ExpeditionLockoutTimerEntry(p.Struct()), err
}

type ExpeditionLockoutTimers capnp.Struct

// ExpeditionLockoutTimers_TypeID is the unique identifier for the type ExpeditionLockoutTimers.
const ExpeditionLockoutTimers_TypeID = 0x944a2443abee2e54

func NewExpeditionLockoutTimers(s *capnp.Segment) (ExpeditionLockoutTimers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ExpeditionLockoutTimers(st), err
}

func NewRootExpeditionLockoutTimers(s *capnp.Segment) (ExpeditionLockoutTimers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ExpeditionLockoutTimers(st), err
}

func ReadRootExpeditionLockoutTimers(msg *capnp.Message) (ExpeditionLockoutTimers, error) {
	root, err := msg.Root()
	return ExpeditionLockoutTimers(root.Struct()), err
}

func (s ExpeditionLockoutTimers) String() string {
	str, _ := text.Marshal(0x944a2443abee2e54, capnp.Struct(s))
	return str
}

func (s ExpeditionLockoutTimers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionLockoutTimers) DecodeFromPtr(p capnp.Ptr) ExpeditionLockoutTimers {
	return ExpeditionLockoutTimers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionLockoutTimers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionLockoutTimers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionLockoutTimers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionLockoutTimers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionLockoutTimers) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionLockoutTimers) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionLockoutTimers) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionLockoutTimers) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionLockoutTimers) Timers() (ExpeditionLockoutTimerEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ExpeditionLockoutTimerEntry_List(p.List()), err
}

func (s ExpeditionLockoutTimers) HasTimers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionLockoutTimers) SetTimers(v ExpeditionLockoutTimerEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTimers sets the timers field to a newly
// allocated ExpeditionLockoutTimerEntry_List, preferring placement in s's segment.
func (s ExpeditionLockoutTimers) NewTimers(n int32) (ExpeditionLockoutTimerEntry_List, error) {
	l, err := NewExpeditionLockoutTimerEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ExpeditionLockoutTimerEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ExpeditionLockoutTimers_List is a list of ExpeditionLockoutTimers.
type ExpeditionLockoutTimers_List = capnp.StructList[ExpeditionLockoutTimers]

// NewExpeditionLockoutTimers creates a new list of ExpeditionLockoutTimers.
func NewExpeditionLockoutTimers_List(s *capnp.Segment, sz int32) (ExpeditionLockoutTimers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionLockoutTimers](l), err
}

// ExpeditionLockoutTimers_Future is a wrapper for a ExpeditionLockoutTimers promised by a client call.
type ExpeditionLockoutTimers_Future struct{ *capnp.Future }

func (f ExpeditionLockoutTimers_Future) Struct() (ExpeditionLockoutTimers, error) {
	p, err := f.Future.Ptr()
	return ExpeditionLockoutTimers(p.Struct()), err
}

type DynamicZoneLeaderName capnp.Struct

// DynamicZoneLeaderName_TypeID is the unique identifier for the type DynamicZoneLeaderName.
const DynamicZoneLeaderName_TypeID = 0xc33264acc8d4e592

func NewDynamicZoneLeaderName(s *capnp.Segment) (DynamicZoneLeaderName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneLeaderName(st), err
}

func NewRootDynamicZoneLeaderName(s *capnp.Segment) (DynamicZoneLeaderName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneLeaderName(st), err
}

func ReadRootDynamicZoneLeaderName(msg *capnp.Message) (DynamicZoneLeaderName, error) {
	root, err := msg.Root()
	return DynamicZoneLeaderName(root.Struct()), err
}

func (s DynamicZoneLeaderName) String() string {
	str, _ := text.Marshal(0xc33264acc8d4e592, capnp.Struct(s))
	return str
}

func (s DynamicZoneLeaderName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneLeaderName) DecodeFromPtr(p capnp.Ptr) DynamicZoneLeaderName {
	return DynamicZoneLeaderName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneLeaderName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneLeaderName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneLeaderName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneLeaderName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneLeaderName) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneLeaderName) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneLeaderName) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneLeaderName) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneLeaderName) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneLeaderName) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DynamicZoneLeaderName_List is a list of DynamicZoneLeaderName.
type DynamicZoneLeaderName_List = capnp.StructList[DynamicZoneLeaderName]

// NewDynamicZoneLeaderName creates a new list of DynamicZoneLeaderName.
func NewDynamicZoneLeaderName_List(s *capnp.Segment, sz int32) (DynamicZoneLeaderName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneLeaderName](l), err
}

// DynamicZoneLeaderName_Future is a wrapper for a DynamicZoneLeaderName promised by a client call.
type DynamicZoneLeaderName_Future struct{ *capnp.Future }

func (f DynamicZoneLeaderName_Future) Struct() (DynamicZoneLeaderName, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneLeaderName(p.Struct()), err
}

type ExpeditionCommand capnp.Struct

// ExpeditionCommand_TypeID is the unique identifier for the type ExpeditionCommand.
const ExpeditionCommand_TypeID = 0xf0eb3ae18581b267

func NewExpeditionCommand(s *capnp.Segment) (ExpeditionCommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExpeditionCommand(st), err
}

func NewRootExpeditionCommand(s *capnp.Segment) (ExpeditionCommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExpeditionCommand(st), err
}

func ReadRootExpeditionCommand(msg *capnp.Message) (ExpeditionCommand, error) {
	root, err := msg.Root()
	return ExpeditionCommand(root.Struct()), err
}

func (s ExpeditionCommand) String() string {
	str, _ := text.Marshal(0xf0eb3ae18581b267, capnp.Struct(s))
	return str
}

func (s ExpeditionCommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionCommand) DecodeFromPtr(p capnp.Ptr) ExpeditionCommand {
	return ExpeditionCommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionCommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionCommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionCommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionCommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionCommand) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionCommand) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionCommand) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionCommand) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ExpeditionCommand_List is a list of ExpeditionCommand.
type ExpeditionCommand_List = capnp.StructList[ExpeditionCommand]

// NewExpeditionCommand creates a new list of ExpeditionCommand.
func NewExpeditionCommand_List(s *capnp.Segment, sz int32) (ExpeditionCommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionCommand](l), err
}

// ExpeditionCommand_Future is a wrapper for a ExpeditionCommand promised by a client call.
type ExpeditionCommand_Future struct{ *capnp.Future }

func (f ExpeditionCommand_Future) Struct() (ExpeditionCommand, error) {
	p, err := f.Future.Ptr()
	return ExpeditionCommand(p.Struct()), err
}

type ExpeditionCommandSwap capnp.Struct

// ExpeditionCommandSwap_TypeID is the unique identifier for the type ExpeditionCommandSwap.
const ExpeditionCommandSwap_TypeID = 0xc2320321f84d3e6b

func NewExpeditionCommandSwap(s *capnp.Segment) (ExpeditionCommandSwap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExpeditionCommandSwap(st), err
}

func NewRootExpeditionCommandSwap(s *capnp.Segment) (ExpeditionCommandSwap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExpeditionCommandSwap(st), err
}

func ReadRootExpeditionCommandSwap(msg *capnp.Message) (ExpeditionCommandSwap, error) {
	root, err := msg.Root()
	return ExpeditionCommandSwap(root.Struct()), err
}

func (s ExpeditionCommandSwap) String() string {
	str, _ := text.Marshal(0xc2320321f84d3e6b, capnp.Struct(s))
	return str
}

func (s ExpeditionCommandSwap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionCommandSwap) DecodeFromPtr(p capnp.Ptr) ExpeditionCommandSwap {
	return ExpeditionCommandSwap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionCommandSwap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionCommandSwap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionCommandSwap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionCommandSwap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionCommandSwap) AddPlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionCommandSwap) HasAddPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionCommandSwap) AddPlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionCommandSwap) SetAddPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionCommandSwap) RemPlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionCommandSwap) HasRemPlayerName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionCommandSwap) RemPlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionCommandSwap) SetRemPlayerName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExpeditionCommandSwap_List is a list of ExpeditionCommandSwap.
type ExpeditionCommandSwap_List = capnp.StructList[ExpeditionCommandSwap]

// NewExpeditionCommandSwap creates a new list of ExpeditionCommandSwap.
func NewExpeditionCommandSwap_List(s *capnp.Segment, sz int32) (ExpeditionCommandSwap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ExpeditionCommandSwap](l), err
}

// ExpeditionCommandSwap_Future is a wrapper for a ExpeditionCommandSwap promised by a client call.
type ExpeditionCommandSwap_Future struct{ *capnp.Future }

func (f ExpeditionCommandSwap_Future) Struct() (ExpeditionCommandSwap, error) {
	p, err := f.Future.Ptr()
	return ExpeditionCommandSwap(p.Struct()), err
}

type ExpeditionExpireWarning capnp.Struct

// ExpeditionExpireWarning_TypeID is the unique identifier for the type ExpeditionExpireWarning.
const ExpeditionExpireWarning_TypeID = 0x9c02cc7a71f37f31

func NewExpeditionExpireWarning(s *capnp.Segment) (ExpeditionExpireWarning, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpeditionExpireWarning(st), err
}

func NewRootExpeditionExpireWarning(s *capnp.Segment) (ExpeditionExpireWarning, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpeditionExpireWarning(st), err
}

func ReadRootExpeditionExpireWarning(msg *capnp.Message) (ExpeditionExpireWarning, error) {
	root, err := msg.Root()
	return ExpeditionExpireWarning(root.Struct()), err
}

func (s ExpeditionExpireWarning) String() string {
	str, _ := text.Marshal(0x9c02cc7a71f37f31, capnp.Struct(s))
	return str
}

func (s ExpeditionExpireWarning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionExpireWarning) DecodeFromPtr(p capnp.Ptr) ExpeditionExpireWarning {
	return ExpeditionExpireWarning(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionExpireWarning) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionExpireWarning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionExpireWarning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionExpireWarning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionExpireWarning) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionExpireWarning) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionExpireWarning) MinutesRemaining() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionExpireWarning) SetMinutesRemaining(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ExpeditionExpireWarning_List is a list of ExpeditionExpireWarning.
type ExpeditionExpireWarning_List = capnp.StructList[ExpeditionExpireWarning]

// NewExpeditionExpireWarning creates a new list of ExpeditionExpireWarning.
func NewExpeditionExpireWarning_List(s *capnp.Segment, sz int32) (ExpeditionExpireWarning_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExpeditionExpireWarning](l), err
}

// ExpeditionExpireWarning_Future is a wrapper for a ExpeditionExpireWarning promised by a client call.
type ExpeditionExpireWarning_Future struct{ *capnp.Future }

func (f ExpeditionExpireWarning_Future) Struct() (ExpeditionExpireWarning, error) {
	p, err := f.Future.Ptr()
	return ExpeditionExpireWarning(p.Struct()), err
}

type DynamicZoneCompassEntry capnp.Struct

// DynamicZoneCompassEntry_TypeID is the unique identifier for the type DynamicZoneCompassEntry.
const DynamicZoneCompassEntry_TypeID = 0x837843dd5048c6d0

func NewDynamicZoneCompassEntry(s *capnp.Segment) (DynamicZoneCompassEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return DynamicZoneCompassEntry(st), err
}

func NewRootDynamicZoneCompassEntry(s *capnp.Segment) (DynamicZoneCompassEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return DynamicZoneCompassEntry(st), err
}

func ReadRootDynamicZoneCompassEntry(msg *capnp.Message) (DynamicZoneCompassEntry, error) {
	root, err := msg.Root()
	return DynamicZoneCompassEntry(root.Struct()), err
}

func (s DynamicZoneCompassEntry) String() string {
	str, _ := text.Marshal(0x837843dd5048c6d0, capnp.Struct(s))
	return str
}

func (s DynamicZoneCompassEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneCompassEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneCompassEntry {
	return DynamicZoneCompassEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneCompassEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneCompassEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneCompassEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneCompassEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneCompassEntry) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneCompassEntry) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneCompassEntry) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneCompassEntry) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneCompassEntry) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneCompassEntry) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneCompassEntry) DzSwitchId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s DynamicZoneCompassEntry) SetDzSwitchId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s DynamicZoneCompassEntry) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s DynamicZoneCompassEntry) SetY(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s DynamicZoneCompassEntry) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s DynamicZoneCompassEntry) SetX(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s DynamicZoneCompassEntry) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s DynamicZoneCompassEntry) SetZ(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

// DynamicZoneCompassEntry_List is a list of DynamicZoneCompassEntry.
type DynamicZoneCompassEntry_List = capnp.StructList[DynamicZoneCompassEntry]

// NewDynamicZoneCompassEntry creates a new list of DynamicZoneCompassEntry.
func NewDynamicZoneCompassEntry_List(s *capnp.Segment, sz int32) (DynamicZoneCompassEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[DynamicZoneCompassEntry](l), err
}

// DynamicZoneCompassEntry_Future is a wrapper for a DynamicZoneCompassEntry promised by a client call.
type DynamicZoneCompassEntry_Future struct{ *capnp.Future }

func (f DynamicZoneCompassEntry_Future) Struct() (DynamicZoneCompassEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneCompassEntry(p.Struct()), err
}

type DynamicZoneCompass capnp.Struct

// DynamicZoneCompass_TypeID is the unique identifier for the type DynamicZoneCompass.
const DynamicZoneCompass_TypeID = 0xb7b4735fc72e17de

func NewDynamicZoneCompass(s *capnp.Segment) (DynamicZoneCompass, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneCompass(st), err
}

func NewRootDynamicZoneCompass(s *capnp.Segment) (DynamicZoneCompass, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneCompass(st), err
}

func ReadRootDynamicZoneCompass(msg *capnp.Message) (DynamicZoneCompass, error) {
	root, err := msg.Root()
	return DynamicZoneCompass(root.Struct()), err
}

func (s DynamicZoneCompass) String() string {
	str, _ := text.Marshal(0xb7b4735fc72e17de, capnp.Struct(s))
	return str
}

func (s DynamicZoneCompass) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneCompass) DecodeFromPtr(p capnp.Ptr) DynamicZoneCompass {
	return DynamicZoneCompass(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneCompass) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneCompass) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneCompass) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneCompass) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneCompass) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneCompass) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneCompass) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneCompass) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneCompass) Entries() (DynamicZoneCompassEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneCompassEntry_List(p.List()), err
}

func (s DynamicZoneCompass) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneCompass) SetEntries(v DynamicZoneCompassEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated DynamicZoneCompassEntry_List, preferring placement in s's segment.
func (s DynamicZoneCompass) NewEntries(n int32) (DynamicZoneCompassEntry_List, error) {
	l, err := NewDynamicZoneCompassEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneCompassEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneCompass_List is a list of DynamicZoneCompass.
type DynamicZoneCompass_List = capnp.StructList[DynamicZoneCompass]

// NewDynamicZoneCompass creates a new list of DynamicZoneCompass.
func NewDynamicZoneCompass_List(s *capnp.Segment, sz int32) (DynamicZoneCompass_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneCompass](l), err
}

// DynamicZoneCompass_Future is a wrapper for a DynamicZoneCompass promised by a client call.
type DynamicZoneCompass_Future struct{ *capnp.Future }

func (f DynamicZoneCompass_Future) Struct() (DynamicZoneCompass, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneCompass(p.Struct()), err
}

type DynamicZoneChooseZoneEntry capnp.Struct

// DynamicZoneChooseZoneEntry_TypeID is the unique identifier for the type DynamicZoneChooseZoneEntry.
const DynamicZoneChooseZoneEntry_TypeID = 0xe8b71523b2ef78ed

func NewDynamicZoneChooseZoneEntry(s *capnp.Segment) (DynamicZoneChooseZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneChooseZoneEntry(st), err
}

func NewRootDynamicZoneChooseZoneEntry(s *capnp.Segment) (DynamicZoneChooseZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneChooseZoneEntry(st), err
}

func ReadRootDynamicZoneChooseZoneEntry(msg *capnp.Message) (DynamicZoneChooseZoneEntry, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZoneEntry(root.Struct()), err
}

func (s DynamicZoneChooseZoneEntry) String() string {
	str, _ := text.Marshal(0xe8b71523b2ef78ed, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZoneEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZoneEntry {
	return DynamicZoneChooseZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZoneEntry) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZoneEntry) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZoneEntry) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneChooseZoneEntry) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneChooseZoneEntry) HasDescription() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneChooseZoneEntry) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneChooseZoneEntry) SetDescription(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneChooseZoneEntry) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DynamicZoneChooseZoneEntry) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DynamicZoneChooseZoneEntry) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DynamicZoneChooseZoneEntry) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// DynamicZoneChooseZoneEntry_List is a list of DynamicZoneChooseZoneEntry.
type DynamicZoneChooseZoneEntry_List = capnp.StructList[DynamicZoneChooseZoneEntry]

// NewDynamicZoneChooseZoneEntry creates a new list of DynamicZoneChooseZoneEntry.
func NewDynamicZoneChooseZoneEntry_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[DynamicZoneChooseZoneEntry](l), err
}

// DynamicZoneChooseZoneEntry_Future is a wrapper for a DynamicZoneChooseZoneEntry promised by a client call.
type DynamicZoneChooseZoneEntry_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZoneEntry_Future) Struct() (DynamicZoneChooseZoneEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZoneEntry(p.Struct()), err
}

type DynamicZoneChooseZone capnp.Struct

// DynamicZoneChooseZone_TypeID is the unique identifier for the type DynamicZoneChooseZone.
const DynamicZoneChooseZone_TypeID = 0xbe9f101bff0dabed

func NewDynamicZoneChooseZone(s *capnp.Segment) (DynamicZoneChooseZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneChooseZone(st), err
}

func NewRootDynamicZoneChooseZone(s *capnp.Segment) (DynamicZoneChooseZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneChooseZone(st), err
}

func ReadRootDynamicZoneChooseZone(msg *capnp.Message) (DynamicZoneChooseZone, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZone(root.Struct()), err
}

func (s DynamicZoneChooseZone) String() string {
	str, _ := text.Marshal(0xbe9f101bff0dabed, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZone) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZone {
	return DynamicZoneChooseZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZone) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZone) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZone) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZone) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZone) Choices() (DynamicZoneChooseZoneEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneChooseZoneEntry_List(p.List()), err
}

func (s DynamicZoneChooseZone) HasChoices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneChooseZone) SetChoices(v DynamicZoneChooseZoneEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChoices sets the choices field to a newly
// allocated DynamicZoneChooseZoneEntry_List, preferring placement in s's segment.
func (s DynamicZoneChooseZone) NewChoices(n int32) (DynamicZoneChooseZoneEntry_List, error) {
	l, err := NewDynamicZoneChooseZoneEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneChooseZoneEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneChooseZone_List is a list of DynamicZoneChooseZone.
type DynamicZoneChooseZone_List = capnp.StructList[DynamicZoneChooseZone]

// NewDynamicZoneChooseZone creates a new list of DynamicZoneChooseZone.
func NewDynamicZoneChooseZone_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneChooseZone](l), err
}

// DynamicZoneChooseZone_Future is a wrapper for a DynamicZoneChooseZone promised by a client call.
type DynamicZoneChooseZone_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZone_Future) Struct() (DynamicZoneChooseZone, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZone(p.Struct()), err
}

type DynamicZoneChooseZoneReply capnp.Struct

// DynamicZoneChooseZoneReply_TypeID is the unique identifier for the type DynamicZoneChooseZoneReply.
const DynamicZoneChooseZoneReply_TypeID = 0x806a62bc2851fc01

func NewDynamicZoneChooseZoneReply(s *capnp.Segment) (DynamicZoneChooseZoneReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DynamicZoneChooseZoneReply(st), err
}

func NewRootDynamicZoneChooseZoneReply(s *capnp.Segment) (DynamicZoneChooseZoneReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DynamicZoneChooseZoneReply(st), err
}

func ReadRootDynamicZoneChooseZoneReply(msg *capnp.Message) (DynamicZoneChooseZoneReply, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZoneReply(root.Struct()), err
}

func (s DynamicZoneChooseZoneReply) String() string {
	str, _ := text.Marshal(0x806a62bc2851fc01, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZoneReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZoneReply) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZoneReply {
	return DynamicZoneChooseZoneReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZoneReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZoneReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZoneReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZoneReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZoneReply) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZoneReply) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZoneReply) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZoneReply) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZoneReply) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneChooseZoneReply) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// DynamicZoneChooseZoneReply_List is a list of DynamicZoneChooseZoneReply.
type DynamicZoneChooseZoneReply_List = capnp.StructList[DynamicZoneChooseZoneReply]

// NewDynamicZoneChooseZoneReply creates a new list of DynamicZoneChooseZoneReply.
func NewDynamicZoneChooseZoneReply_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZoneReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[DynamicZoneChooseZoneReply](l), err
}

// DynamicZoneChooseZoneReply_Future is a wrapper for a DynamicZoneChooseZoneReply promised by a client call.
type DynamicZoneChooseZoneReply_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZoneReply_Future) Struct() (DynamicZoneChooseZoneReply, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZoneReply(p.Struct()), err
}

type LFGuildSearchPlayer capnp.Struct

// LFGuildSearchPlayer_TypeID is the unique identifier for the type LFGuildSearchPlayer.
const LFGuildSearchPlayer_TypeID = 0x8a1df08ac17221fd

func NewLFGuildSearchPlayer(s *capnp.Segment) (LFGuildSearchPlayer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchPlayer(st), err
}

func NewRootLFGuildSearchPlayer(s *capnp.Segment) (LFGuildSearchPlayer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchPlayer(st), err
}

func ReadRootLFGuildSearchPlayer(msg *capnp.Message) (LFGuildSearchPlayer, error) {
	root, err := msg.Root()
	return LFGuildSearchPlayer(root.Struct()), err
}

func (s LFGuildSearchPlayer) String() string {
	str, _ := text.Marshal(0x8a1df08ac17221fd, capnp.Struct(s))
	return str
}

func (s LFGuildSearchPlayer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildSearchPlayer) DecodeFromPtr(p capnp.Ptr) LFGuildSearchPlayer {
	return LFGuildSearchPlayer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildSearchPlayer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildSearchPlayer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildSearchPlayer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildSearchPlayer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildSearchPlayer) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildSearchPlayer) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildSearchPlayer) FromLevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildSearchPlayer) SetFromLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildSearchPlayer) ToLevel() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildSearchPlayer) SetToLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildSearchPlayer) MinAa() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildSearchPlayer) SetMinAa(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildSearchPlayer) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildSearchPlayer) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LFGuildSearchPlayer) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LFGuildSearchPlayer) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// LFGuildSearchPlayer_List is a list of LFGuildSearchPlayer.
type LFGuildSearchPlayer_List = capnp.StructList[LFGuildSearchPlayer]

// NewLFGuildSearchPlayer creates a new list of LFGuildSearchPlayer.
func NewLFGuildSearchPlayer_List(s *capnp.Segment, sz int32) (LFGuildSearchPlayer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LFGuildSearchPlayer](l), err
}

// LFGuildSearchPlayer_Future is a wrapper for a LFGuildSearchPlayer promised by a client call.
type LFGuildSearchPlayer_Future struct{ *capnp.Future }

func (f LFGuildSearchPlayer_Future) Struct() (LFGuildSearchPlayer, error) {
	p, err := f.Future.Ptr()
	return LFGuildSearchPlayer(p.Struct()), err
}

type LFGuildSearchGuild capnp.Struct

// LFGuildSearchGuild_TypeID is the unique identifier for the type LFGuildSearchGuild.
const LFGuildSearchGuild_TypeID = 0x86b68baf94f42b99

func NewLFGuildSearchGuild(s *capnp.Segment) (LFGuildSearchGuild, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchGuild(st), err
}

func NewRootLFGuildSearchGuild(s *capnp.Segment) (LFGuildSearchGuild, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchGuild(st), err
}

func ReadRootLFGuildSearchGuild(msg *capnp.Message) (LFGuildSearchGuild, error) {
	root, err := msg.Root()
	return LFGuildSearchGuild(root.Struct()), err
}

func (s LFGuildSearchGuild) String() string {
	str, _ := text.Marshal(0x86b68baf94f42b99, capnp.Struct(s))
	return str
}

func (s LFGuildSearchGuild) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildSearchGuild) DecodeFromPtr(p capnp.Ptr) LFGuildSearchGuild {
	return LFGuildSearchGuild(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildSearchGuild) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildSearchGuild) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildSearchGuild) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildSearchGuild) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildSearchGuild) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildSearchGuild) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildSearchGuild) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildSearchGuild) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildSearchGuild) AaPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildSearchGuild) SetAaPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildSearchGuild) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildSearchGuild) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildSearchGuild) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildSearchGuild) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// LFGuildSearchGuild_List is a list of LFGuildSearchGuild.
type LFGuildSearchGuild_List = capnp.StructList[LFGuildSearchGuild]

// NewLFGuildSearchGuild creates a new list of LFGuildSearchGuild.
func NewLFGuildSearchGuild_List(s *capnp.Segment, sz int32) (LFGuildSearchGuild_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LFGuildSearchGuild](l), err
}

// LFGuildSearchGuild_Future is a wrapper for a LFGuildSearchGuild promised by a client call.
type LFGuildSearchGuild_Future struct{ *capnp.Future }

func (f LFGuildSearchGuild_Future) Struct() (LFGuildSearchGuild, error) {
	p, err := f.Future.Ptr()
	return LFGuildSearchGuild(p.Struct()), err
}

type LFGuildPlayertoggle capnp.Struct

// LFGuildPlayertoggle_TypeID is the unique identifier for the type LFGuildPlayertoggle.
const LFGuildPlayertoggle_TypeID = 0xba7cb4dbd62489d5

func NewLFGuildPlayertoggle(s *capnp.Segment) (LFGuildPlayertoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return LFGuildPlayertoggle(st), err
}

func NewRootLFGuildPlayertoggle(s *capnp.Segment) (LFGuildPlayertoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return LFGuildPlayertoggle(st), err
}

func ReadRootLFGuildPlayertoggle(msg *capnp.Message) (LFGuildPlayertoggle, error) {
	root, err := msg.Root()
	return LFGuildPlayertoggle(root.Struct()), err
}

func (s LFGuildPlayertoggle) String() string {
	str, _ := text.Marshal(0xba7cb4dbd62489d5, capnp.Struct(s))
	return str
}

func (s LFGuildPlayertoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildPlayertoggle) DecodeFromPtr(p capnp.Ptr) LFGuildPlayertoggle {
	return LFGuildPlayertoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildPlayertoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildPlayertoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildPlayertoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildPlayertoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildPlayertoggle) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildPlayertoggle) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildPlayertoggle) Comment() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFGuildPlayertoggle) HasComment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFGuildPlayertoggle) CommentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFGuildPlayertoggle) SetComment(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LFGuildPlayertoggle) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildPlayertoggle) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildPlayertoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildPlayertoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildPlayertoggle) Expires() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildPlayertoggle) SetExpires(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LFGuildPlayertoggle_List is a list of LFGuildPlayertoggle.
type LFGuildPlayertoggle_List = capnp.StructList[LFGuildPlayertoggle]

// NewLFGuildPlayertoggle creates a new list of LFGuildPlayertoggle.
func NewLFGuildPlayertoggle_List(s *capnp.Segment, sz int32) (LFGuildPlayertoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[LFGuildPlayertoggle](l), err
}

// LFGuildPlayertoggle_Future is a wrapper for a LFGuildPlayertoggle promised by a client call.
type LFGuildPlayertoggle_Future struct{ *capnp.Future }

func (f LFGuildPlayertoggle_Future) Struct() (LFGuildPlayertoggle, error) {
	p, err := f.Future.Ptr()
	return LFGuildPlayertoggle(p.Struct()), err
}

type LFGuildGuildtoggle capnp.Struct

// LFGuildGuildtoggle_TypeID is the unique identifier for the type LFGuildGuildtoggle.
const LFGuildGuildtoggle_TypeID = 0xdb56b83f3063105d

func NewLFGuildGuildtoggle(s *capnp.Segment) (LFGuildGuildtoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return LFGuildGuildtoggle(st), err
}

func NewRootLFGuildGuildtoggle(s *capnp.Segment) (LFGuildGuildtoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return LFGuildGuildtoggle(st), err
}

func ReadRootLFGuildGuildtoggle(msg *capnp.Message) (LFGuildGuildtoggle, error) {
	root, err := msg.Root()
	return LFGuildGuildtoggle(root.Struct()), err
}

func (s LFGuildGuildtoggle) String() string {
	str, _ := text.Marshal(0xdb56b83f3063105d, capnp.Struct(s))
	return str
}

func (s LFGuildGuildtoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildGuildtoggle) DecodeFromPtr(p capnp.Ptr) LFGuildGuildtoggle {
	return LFGuildGuildtoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildGuildtoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildGuildtoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildGuildtoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildGuildtoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildGuildtoggle) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildGuildtoggle) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildGuildtoggle) Comment() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFGuildGuildtoggle) HasComment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFGuildGuildtoggle) CommentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFGuildGuildtoggle) SetComment(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LFGuildGuildtoggle) FromLevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildGuildtoggle) SetFromLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildGuildtoggle) ToLevel() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildGuildtoggle) SetToLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildGuildtoggle) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildGuildtoggle) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildGuildtoggle) AaCount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildGuildtoggle) SetAaCount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LFGuildGuildtoggle) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LFGuildGuildtoggle) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s LFGuildGuildtoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s LFGuildGuildtoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s LFGuildGuildtoggle) Expires() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s LFGuildGuildtoggle) SetExpires(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s LFGuildGuildtoggle) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s LFGuildGuildtoggle) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LFGuildGuildtoggle) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s LFGuildGuildtoggle) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// LFGuildGuildtoggle_List is a list of LFGuildGuildtoggle.
type LFGuildGuildtoggle_List = capnp.StructList[LFGuildGuildtoggle]

// NewLFGuildGuildtoggle creates a new list of LFGuildGuildtoggle.
func NewLFGuildGuildtoggle_List(s *capnp.Segment, sz int32) (LFGuildGuildtoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[LFGuildGuildtoggle](l), err
}

// LFGuildGuildtoggle_Future is a wrapper for a LFGuildGuildtoggle promised by a client call.
type LFGuildGuildtoggle_Future struct{ *capnp.Future }

func (f LFGuildGuildtoggle_Future) Struct() (LFGuildGuildtoggle, error) {
	p, err := f.Future.Ptr()
	return LFGuildGuildtoggle(p.Struct()), err
}

type SayLinkBodyFrame capnp.Struct

// SayLinkBodyFrame_TypeID is the unique identifier for the type SayLinkBodyFrame.
const SayLinkBodyFrame_TypeID = 0x853ff72f8a1e3384

func NewSayLinkBodyFrame(s *capnp.Segment) (SayLinkBodyFrame, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11})
	return SayLinkBodyFrame(st), err
}

func NewRootSayLinkBodyFrame(s *capnp.Segment) (SayLinkBodyFrame, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11})
	return SayLinkBodyFrame(st), err
}

func ReadRootSayLinkBodyFrame(msg *capnp.Message) (SayLinkBodyFrame, error) {
	root, err := msg.Root()
	return SayLinkBodyFrame(root.Struct()), err
}

func (s SayLinkBodyFrame) String() string {
	str, _ := text.Marshal(0x853ff72f8a1e3384, capnp.Struct(s))
	return str
}

func (s SayLinkBodyFrame) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SayLinkBodyFrame) DecodeFromPtr(p capnp.Ptr) SayLinkBodyFrame {
	return SayLinkBodyFrame(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SayLinkBodyFrame) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SayLinkBodyFrame) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SayLinkBodyFrame) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SayLinkBodyFrame) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SayLinkBodyFrame) ActionId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasActionId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SayLinkBodyFrame) ActionIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetActionId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SayLinkBodyFrame) ItemId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasItemId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SayLinkBodyFrame) ItemIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetItemId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SayLinkBodyFrame) Augment1() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment1() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SayLinkBodyFrame) Augment1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment1(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s SayLinkBodyFrame) Augment2() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment2() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SayLinkBodyFrame) Augment2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment2(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s SayLinkBodyFrame) Augment3() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment3() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SayLinkBodyFrame) Augment3Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment3(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s SayLinkBodyFrame) Augment4() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment4() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SayLinkBodyFrame) Augment4Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment4(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s SayLinkBodyFrame) Augment5() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment5() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SayLinkBodyFrame) Augment5Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment5(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

func (s SayLinkBodyFrame) IsEvolving() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasIsEvolving() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SayLinkBodyFrame) IsEvolvingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetIsEvolving(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s SayLinkBodyFrame) EvolveGroup() (string, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasEvolveGroup() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SayLinkBodyFrame) EvolveGroupBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetEvolveGroup(v string) error {
	return capnp.Struct(s).SetText(8, v)
}

func (s SayLinkBodyFrame) EvolveLevel() (string, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasEvolveLevel() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SayLinkBodyFrame) EvolveLevelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetEvolveLevel(v string) error {
	return capnp.Struct(s).SetText(9, v)
}

func (s SayLinkBodyFrame) Hash() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasHash() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SayLinkBodyFrame) HashBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetHash(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

// SayLinkBodyFrame_List is a list of SayLinkBodyFrame.
type SayLinkBodyFrame_List = capnp.StructList[SayLinkBodyFrame]

// NewSayLinkBodyFrame creates a new list of SayLinkBodyFrame.
func NewSayLinkBodyFrame_List(s *capnp.Segment, sz int32) (SayLinkBodyFrame_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11}, sz)
	return capnp.StructList[SayLinkBodyFrame](l), err
}

// SayLinkBodyFrame_Future is a wrapper for a SayLinkBodyFrame promised by a client call.
type SayLinkBodyFrame_Future struct{ *capnp.Future }

func (f SayLinkBodyFrame_Future) Struct() (SayLinkBodyFrame, error) {
	p, err := f.Future.Ptr()
	return SayLinkBodyFrame(p.Struct()), err
}

type WebLogin capnp.Struct

// WebLogin_TypeID is the unique identifier for the type WebLogin.
const WebLogin_TypeID = 0xb80f94bef16dea20

func NewWebLogin(s *capnp.Segment) (WebLogin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebLogin(st), err
}

func NewRootWebLogin(s *capnp.Segment) (WebLogin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebLogin(st), err
}

func ReadRootWebLogin(msg *capnp.Message) (WebLogin, error) {
	root, err := msg.Root()
	return WebLogin(root.Struct()), err
}

func (s WebLogin) String() string {
	str, _ := text.Marshal(0xb80f94bef16dea20, capnp.Struct(s))
	return str
}

func (s WebLogin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLogin) DecodeFromPtr(p capnp.Ptr) WebLogin {
	return WebLogin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLogin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLogin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLogin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLogin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLogin) Username() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLogin) HasUsername() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLogin) UsernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLogin) SetUsername(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLogin) Password() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebLogin) HasPassword() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLogin) PasswordBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebLogin) SetPassword(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// WebLogin_List is a list of WebLogin.
type WebLogin_List = capnp.StructList[WebLogin]

// NewWebLogin creates a new list of WebLogin.
func NewWebLogin_List(s *capnp.Segment, sz int32) (WebLogin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebLogin](l), err
}

// WebLogin_Future is a wrapper for a WebLogin promised by a client call.
type WebLogin_Future struct{ *capnp.Future }

func (f WebLogin_Future) Struct() (WebLogin, error) {
	p, err := f.Future.Ptr()
	return WebLogin(p.Struct()), err
}

type WebLoginServerRequest capnp.Struct

// WebLoginServerRequest_TypeID is the unique identifier for the type WebLoginServerRequest.
const WebLoginServerRequest_TypeID = 0xf08bcfb76fcf5061

func NewWebLoginServerRequest(s *capnp.Segment) (WebLoginServerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebLoginServerRequest(st), err
}

func NewRootWebLoginServerRequest(s *capnp.Segment) (WebLoginServerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebLoginServerRequest(st), err
}

func ReadRootWebLoginServerRequest(msg *capnp.Message) (WebLoginServerRequest, error) {
	root, err := msg.Root()
	return WebLoginServerRequest(root.Struct()), err
}

func (s WebLoginServerRequest) String() string {
	str, _ := text.Marshal(0xf08bcfb76fcf5061, capnp.Struct(s))
	return str
}

func (s WebLoginServerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginServerRequest) DecodeFromPtr(p capnp.Ptr) WebLoginServerRequest {
	return WebLoginServerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginServerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginServerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginServerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginServerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginServerRequest) Sequence() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginServerRequest) SetSequence(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// WebLoginServerRequest_List is a list of WebLoginServerRequest.
type WebLoginServerRequest_List = capnp.StructList[WebLoginServerRequest]

// NewWebLoginServerRequest creates a new list of WebLoginServerRequest.
func NewWebLoginServerRequest_List(s *capnp.Segment, sz int32) (WebLoginServerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WebLoginServerRequest](l), err
}

// WebLoginServerRequest_Future is a wrapper for a WebLoginServerRequest promised by a client call.
type WebLoginServerRequest_Future struct{ *capnp.Future }

func (f WebLoginServerRequest_Future) Struct() (WebLoginServerRequest, error) {
	p, err := f.Future.Ptr()
	return WebLoginServerRequest(p.Struct()), err
}

type WebLoginReply capnp.Struct

// WebLoginReply_TypeID is the unique identifier for the type WebLoginReply.
const WebLoginReply_TypeID = 0xef71c6ada87eac4c

func NewWebLoginReply(s *capnp.Segment) (WebLoginReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebLoginReply(st), err
}

func NewRootWebLoginReply(s *capnp.Segment) (WebLoginReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebLoginReply(st), err
}

func ReadRootWebLoginReply(msg *capnp.Message) (WebLoginReply, error) {
	root, err := msg.Root()
	return WebLoginReply(root.Struct()), err
}

func (s WebLoginReply) String() string {
	str, _ := text.Marshal(0xef71c6ada87eac4c, capnp.Struct(s))
	return str
}

func (s WebLoginReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginReply) DecodeFromPtr(p capnp.Ptr) WebLoginReply {
	return WebLoginReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginReply) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLoginReply) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginReply) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLoginReply) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLoginReply) ErrorStrId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginReply) SetErrorStrId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginReply) FailedAttempts() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebLoginReply) SetFailedAttempts(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WebLoginReply) Lsid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WebLoginReply) SetLsid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WebLoginReply) Success() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Bool(p.Struct()), err
}

func (s WebLoginReply) HasSuccess() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLoginReply) SetSuccess(v Bool) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSuccess sets the success field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebLoginReply) NewSuccess() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebLoginReply) ShowPlayerCount() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Bool(p.Struct()), err
}

func (s WebLoginReply) HasShowPlayerCount() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebLoginReply) SetShowPlayerCount(v Bool) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewShowPlayerCount sets the showPlayerCount field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebLoginReply) NewShowPlayerCount() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebLoginReply_List is a list of WebLoginReply.
type WebLoginReply_List = capnp.StructList[WebLoginReply]

// NewWebLoginReply creates a new list of WebLoginReply.
func NewWebLoginReply_List(s *capnp.Segment, sz int32) (WebLoginReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[WebLoginReply](l), err
}

// WebLoginReply_Future is a wrapper for a WebLoginReply promised by a client call.
type WebLoginReply_Future struct{ *capnp.Future }

func (f WebLoginReply_Future) Struct() (WebLoginReply, error) {
	p, err := f.Future.Ptr()
	return WebLoginReply(p.Struct()), err
}
func (p WebLoginReply_Future) Success() Bool_Future {
	return Bool_Future{Future: p.Future.Field(1, nil)}
}
func (p WebLoginReply_Future) ShowPlayerCount() Bool_Future {
	return Bool_Future{Future: p.Future.Field(2, nil)}
}

type WebLoginWorldServer capnp.Struct

// WebLoginWorldServer_TypeID is the unique identifier for the type WebLoginWorldServer.
const WebLoginWorldServer_TypeID = 0xc5eb62ff00b0072f

func NewWebLoginWorldServer(s *capnp.Segment) (WebLoginWorldServer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return WebLoginWorldServer(st), err
}

func NewRootWebLoginWorldServer(s *capnp.Segment) (WebLoginWorldServer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return WebLoginWorldServer(st), err
}

func ReadRootWebLoginWorldServer(msg *capnp.Message) (WebLoginWorldServer, error) {
	root, err := msg.Root()
	return WebLoginWorldServer(root.Struct()), err
}

func (s WebLoginWorldServer) String() string {
	str, _ := text.Marshal(0xc5eb62ff00b0072f, capnp.Struct(s))
	return str
}

func (s WebLoginWorldServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginWorldServer) DecodeFromPtr(p capnp.Ptr) WebLoginWorldServer {
	return WebLoginWorldServer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginWorldServer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginWorldServer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginWorldServer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginWorldServer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginWorldServer) Buffer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasBuffer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginWorldServer) BufferBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetBuffer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLoginWorldServer) Ip() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasIp() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLoginWorldServer) IpBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetIp(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebLoginWorldServer) LongName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasLongName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebLoginWorldServer) LongNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetLongName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s WebLoginWorldServer) CountryCode() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasCountryCode() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebLoginWorldServer) CountryCodeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetCountryCode(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s WebLoginWorldServer) LanguageCode() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasLanguageCode() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s WebLoginWorldServer) LanguageCodeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetLanguageCode(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s WebLoginWorldServer) ServerType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginWorldServer) SetServerType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginWorldServer) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebLoginWorldServer) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WebLoginWorldServer) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WebLoginWorldServer) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WebLoginWorldServer) PlayersOnline() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WebLoginWorldServer) SetPlayersOnline(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// WebLoginWorldServer_List is a list of WebLoginWorldServer.
type WebLoginWorldServer_List = capnp.StructList[WebLoginWorldServer]

// NewWebLoginWorldServer creates a new list of WebLoginWorldServer.
func NewWebLoginWorldServer_List(s *capnp.Segment, sz int32) (WebLoginWorldServer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[WebLoginWorldServer](l), err
}

// WebLoginWorldServer_Future is a wrapper for a WebLoginWorldServer promised by a client call.
type WebLoginWorldServer_Future struct{ *capnp.Future }

func (f WebLoginWorldServer_Future) Struct() (WebLoginWorldServer, error) {
	p, err := f.Future.Ptr()
	return WebLoginWorldServer(p.Struct()), err
}

type WebLoginServerResponse capnp.Struct

// WebLoginServerResponse_TypeID is the unique identifier for the type WebLoginServerResponse.
const WebLoginServerResponse_TypeID = 0xefe5002d4e5acb87

func NewWebLoginServerResponse(s *capnp.Segment) (WebLoginServerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebLoginServerResponse(st), err
}

func NewRootWebLoginServerResponse(s *capnp.Segment) (WebLoginServerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebLoginServerResponse(st), err
}

func ReadRootWebLoginServerResponse(msg *capnp.Message) (WebLoginServerResponse, error) {
	root, err := msg.Root()
	return WebLoginServerResponse(root.Struct()), err
}

func (s WebLoginServerResponse) String() string {
	str, _ := text.Marshal(0xefe5002d4e5acb87, capnp.Struct(s))
	return str
}

func (s WebLoginServerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginServerResponse) DecodeFromPtr(p capnp.Ptr) WebLoginServerResponse {
	return WebLoginServerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginServerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginServerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginServerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginServerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginServerResponse) ServerCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginServerResponse) SetServerCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginServerResponse) Servers() (WebLoginWorldServer_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return WebLoginWorldServer_List(p.List()), err
}

func (s WebLoginServerResponse) HasServers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginServerResponse) SetServers(v WebLoginWorldServer_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewServers sets the servers field to a newly
// allocated WebLoginWorldServer_List, preferring placement in s's segment.
func (s WebLoginServerResponse) NewServers(n int32) (WebLoginWorldServer_List, error) {
	l, err := NewWebLoginWorldServer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebLoginWorldServer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebLoginServerResponse_List is a list of WebLoginServerResponse.
type WebLoginServerResponse_List = capnp.StructList[WebLoginServerResponse]

// NewWebLoginServerResponse creates a new list of WebLoginServerResponse.
func NewWebLoginServerResponse_List(s *capnp.Segment, sz int32) (WebLoginServerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebLoginServerResponse](l), err
}

// WebLoginServerResponse_Future is a wrapper for a WebLoginServerResponse promised by a client call.
type WebLoginServerResponse_Future struct{ *capnp.Future }

func (f WebLoginServerResponse_Future) Struct() (WebLoginServerResponse, error) {
	p, err := f.Future.Ptr()
	return WebLoginServerResponse(p.Struct()), err
}

type WebPlayEverquestRequest capnp.Struct

// WebPlayEverquestRequest_TypeID is the unique identifier for the type WebPlayEverquestRequest.
const WebPlayEverquestRequest_TypeID = 0x9f58a78be70b999b

func NewWebPlayEverquestRequest(s *capnp.Segment) (WebPlayEverquestRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebPlayEverquestRequest(st), err
}

func NewRootWebPlayEverquestRequest(s *capnp.Segment) (WebPlayEverquestRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebPlayEverquestRequest(st), err
}

func ReadRootWebPlayEverquestRequest(msg *capnp.Message) (WebPlayEverquestRequest, error) {
	root, err := msg.Root()
	return WebPlayEverquestRequest(root.Struct()), err
}

func (s WebPlayEverquestRequest) String() string {
	str, _ := text.Marshal(0x9f58a78be70b999b, capnp.Struct(s))
	return str
}

func (s WebPlayEverquestRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebPlayEverquestRequest) DecodeFromPtr(p capnp.Ptr) WebPlayEverquestRequest {
	return WebPlayEverquestRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebPlayEverquestRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebPlayEverquestRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebPlayEverquestRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebPlayEverquestRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebPlayEverquestRequest) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebPlayEverquestRequest) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// WebPlayEverquestRequest_List is a list of WebPlayEverquestRequest.
type WebPlayEverquestRequest_List = capnp.StructList[WebPlayEverquestRequest]

// NewWebPlayEverquestRequest creates a new list of WebPlayEverquestRequest.
func NewWebPlayEverquestRequest_List(s *capnp.Segment, sz int32) (WebPlayEverquestRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WebPlayEverquestRequest](l), err
}

// WebPlayEverquestRequest_Future is a wrapper for a WebPlayEverquestRequest promised by a client call.
type WebPlayEverquestRequest_Future struct{ *capnp.Future }

func (f WebPlayEverquestRequest_Future) Struct() (WebPlayEverquestRequest, error) {
	p, err := f.Future.Ptr()
	return WebPlayEverquestRequest(p.Struct()), err
}

type WebPlayEverquestResponse capnp.Struct

// WebPlayEverquestResponse_TypeID is the unique identifier for the type WebPlayEverquestResponse.
const WebPlayEverquestResponse_TypeID = 0xfa35d04887272ed9

func NewWebPlayEverquestResponse(s *capnp.Segment) (WebPlayEverquestResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebPlayEverquestResponse(st), err
}

func NewRootWebPlayEverquestResponse(s *capnp.Segment) (WebPlayEverquestResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebPlayEverquestResponse(st), err
}

func ReadRootWebPlayEverquestResponse(msg *capnp.Message) (WebPlayEverquestResponse, error) {
	root, err := msg.Root()
	return WebPlayEverquestResponse(root.Struct()), err
}

func (s WebPlayEverquestResponse) String() string {
	str, _ := text.Marshal(0xfa35d04887272ed9, capnp.Struct(s))
	return str
}

func (s WebPlayEverquestResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebPlayEverquestResponse) DecodeFromPtr(p capnp.Ptr) WebPlayEverquestResponse {
	return WebPlayEverquestResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebPlayEverquestResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebPlayEverquestResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebPlayEverquestResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebPlayEverquestResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebPlayEverquestResponse) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebPlayEverquestResponse) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebPlayEverquestResponse) Success() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s WebPlayEverquestResponse) HasSuccess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebPlayEverquestResponse) SetSuccess(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSuccess sets the success field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebPlayEverquestResponse) NewSuccess() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebPlayEverquestResponse) ErrorStrId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebPlayEverquestResponse) SetErrorStrId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// WebPlayEverquestResponse_List is a list of WebPlayEverquestResponse.
type WebPlayEverquestResponse_List = capnp.StructList[WebPlayEverquestResponse]

// NewWebPlayEverquestResponse creates a new list of WebPlayEverquestResponse.
func NewWebPlayEverquestResponse_List(s *capnp.Segment, sz int32) (WebPlayEverquestResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebPlayEverquestResponse](l), err
}

// WebPlayEverquestResponse_Future is a wrapper for a WebPlayEverquestResponse promised by a client call.
type WebPlayEverquestResponse_Future struct{ *capnp.Future }

func (f WebPlayEverquestResponse_Future) Struct() (WebPlayEverquestResponse, error) {
	p, err := f.Future.Ptr()
	return WebPlayEverquestResponse(p.Struct()), err
}
func (p WebPlayEverquestResponse_Future) Success() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}

type WebSession capnp.Struct

// WebSession_TypeID is the unique identifier for the type WebSession.
const WebSession_TypeID = 0xf613029b64a06aeb

func NewWebSession(s *capnp.Segment) (WebSession, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession(st), err
}

func NewRootWebSession(s *capnp.Segment) (WebSession, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession(st), err
}

func ReadRootWebSession(msg *capnp.Message) (WebSession, error) {
	root, err := msg.Root()
	return WebSession(root.Struct()), err
}

func (s WebSession) String() string {
	str, _ := text.Marshal(0xf613029b64a06aeb, capnp.Struct(s))
	return str
}

func (s WebSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession) DecodeFromPtr(p capnp.Ptr) WebSession {
	return WebSession(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession) RemoteAddr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession) HasRemoteAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession) RemoteAddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession) SetRemoteAddr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession) RemoteIp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebSession) SetRemoteIp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebSession) RemotePort() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebSession) SetRemotePort(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// WebSession_List is a list of WebSession.
type WebSession_List = capnp.StructList[WebSession]

// NewWebSession creates a new list of WebSession.
func NewWebSession_List(s *capnp.Segment, sz int32) (WebSession_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebSession](l), err
}

// WebSession_Future is a wrapper for a WebSession promised by a client call.
type WebSession_Future struct{ *capnp.Future }

func (f WebSession_Future) Struct() (WebSession, error) {
	p, err := f.Future.Ptr()
	return WebSession(p.Struct()), err
}

type Int capnp.Struct

// Int_TypeID is the unique identifier for the type Int.
const Int_TypeID = 0xbd94d13b8b1bcadf

func NewInt(s *capnp.Segment) (Int, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Int(st), err
}

func NewRootInt(s *capnp.Segment) (Int, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Int(st), err
}

func ReadRootInt(msg *capnp.Message) (Int, error) {
	root, err := msg.Root()
	return Int(root.Struct()), err
}

func (s Int) String() string {
	str, _ := text.Marshal(0xbd94d13b8b1bcadf, capnp.Struct(s))
	return str
}

func (s Int) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Int) DecodeFromPtr(p capnp.Ptr) Int {
	return Int(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Int) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Int) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Int) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Int) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Int) Value() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Int) SetValue(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Int_List is a list of Int.
type Int_List = capnp.StructList[Int]

// NewInt creates a new list of Int.
func NewInt_List(s *capnp.Segment, sz int32) (Int_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Int](l), err
}

// Int_Future is a wrapper for a Int promised by a client call.
type Int_Future struct{ *capnp.Future }

func (f Int_Future) Struct() (Int, error) {
	p, err := f.Future.Ptr()
	return Int(p.Struct()), err
}

type Bool capnp.Struct

// Bool_TypeID is the unique identifier for the type Bool.
const Bool_TypeID = 0xcc4575715bad9f24

func NewBool(s *capnp.Segment) (Bool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bool(st), err
}

func NewRootBool(s *capnp.Segment) (Bool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bool(st), err
}

func ReadRootBool(msg *capnp.Message) (Bool, error) {
	root, err := msg.Root()
	return Bool(root.Struct()), err
}

func (s Bool) String() string {
	str, _ := text.Marshal(0xcc4575715bad9f24, capnp.Struct(s))
	return str
}

func (s Bool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bool) DecodeFromPtr(p capnp.Ptr) Bool {
	return Bool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bool) Value() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s Bool) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Bool) SetValue(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s Bool) NewValue() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Bool_List is a list of Bool.
type Bool_List = capnp.StructList[Bool]

// NewBool creates a new list of Bool.
func NewBool_List(s *capnp.Segment, sz int32) (Bool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Bool](l), err
}

// Bool_Future is a wrapper for a Bool promised by a client call.
type Bool_Future struct{ *capnp.Future }

func (f Bool_Future) Struct() (Bool, error) {
	p, err := f.Future.Ptr()
	return Bool(p.Struct()), err
}
func (p Bool_Future) Value() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}

type String capnp.Struct

// String_TypeID is the unique identifier for the type String.
const String_TypeID = 0xf23307bee1ce0b8d

func NewString(s *capnp.Segment) (String, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return String(st), err
}

func NewRootString(s *capnp.Segment) (String, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return String(st), err
}

func ReadRootString(msg *capnp.Message) (String, error) {
	root, err := msg.Root()
	return String(root.Struct()), err
}

func (s String) String() string {
	str, _ := text.Marshal(0xf23307bee1ce0b8d, capnp.Struct(s))
	return str
}

func (s String) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (String) DecodeFromPtr(p capnp.Ptr) String {
	return String(capnp.Struct{}.DecodeFromPtr(p))
}

func (s String) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s String) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s String) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s String) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s String) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s String) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s String) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s String) SetValue(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// String_List is a list of String.
type String_List = capnp.StructList[String]

// NewString creates a new list of String.
func NewString_List(s *capnp.Segment, sz int32) (String_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[String](l), err
}

// String_Future is a wrapper for a String promised by a client call.
type String_Future struct{ *capnp.Future }

func (f String_Future) Struct() (String, error) {
	p, err := f.Future.Ptr()
	return String(p.Struct()), err
}

const schema_cdefabcdefabcdef = "x\xda\xe4\xbd\x0bt\x14U\xf67Z\xa7;!<\x12" +
	":I5\x13Q0\x82\xf8 \x03\x0a\x11D\"\x18\x12" +
	"\x12!1\x81tw\x10\x88\xa2V\xba+I\x91\xee\xaa" +
	"NuuH\x10&\x80 \x0fA\x01AEA\x1e\x82" +
	"\x80\x82\x02\x82\x82\x8a#*\x8e8\xe0\x88#\x0a\x0a\"" +
	"\xa3\x8c8\x8a\x82\xca(\x0a\xe6\xae\xbd\xab\xbb\xebt\xe5" +
	"$\xe9\xf8\xff\x7f\xdf]w\xdd\xb5\\K\xfa\x97]U" +
	"\xe7\xb1\xcf>\xfbu\xf6\xe9\xd7\xeb/\xc3\xe2\xfa'=" +
	"\xa4q\x16WQ||\xbb\xc6\x9b\xd3\xd6\xbe4\xa8\xa4" +
	"t\x1a\xe7\xb8\x82\x90\xc6\xef\x0f<\x8b\xffqq\x09\x1c" +
	"wC\xdf,'\xe1s\xb2\x128\x8e\x1f\x9a5\x89#" +
	"\x8d\xe4\x82\xe3\xdaW\xcb'\"\xb1\xc5D\xbc,\xeb\x13" +
	"\xc2\xef@\xe2\xadY\xcfs\xa4\xf1\xf4\xa8)\xe3\xd7\xec" +
	"z\xc9\xfc\xe6x\x02\xd4\x8e\x9b\x9d\x84\x17o\x06j\xe1" +
	"fx\xf5\x0a\xeb\xb1#O]\xbc{\xba\x99\xda\x02\xd4" +
	"\x07n\x9eG\xf8\x93H}\xe2fx\xf77_,V" +
	"\x1a\xd7\xbb\xa7\xb3Z=}\xc8D\xc2/\x1d\x02\xc4\x8b" +
	"\x86\xc0\xab\xeb\x87n\xb5e\xee\x92\x98\xc4\xe7\x86\xe4\x12" +
	">~(\x10\x93\xa1@l\xe9\xb3T.M\xf9u:" +
	"\x97rE\x93f\x88C\x9d\x84\xafG\xe2 \x12/\xcb" +
	"\xb9\xa3\xa6f[\xd2\x0cxs\xbc\x99\xfa\xc4\xd0y\x84" +
	"??\x14\xbf2t\xbd\x85#\x8d\xd7\xaeza\xc7\xca" +
	"\xba\xf53X\x0d\xd9;\xac\x90\xf0G\x86\xc1\xbb\x0f\x0d" +
	"\xcb\xe6H\xe3>\xc7\xab\xfeY\xff~e\x06s@\xce" +
	"\x0d\xfb\x17\xe1Sr\x80:)\xe7+\x8e4~\xf1\xf7" +
	"\xe0?\xd6\xde\xf7\xd6\x0c\xe6`\x9f\xcb)'|\x87\\" +
	"\xa0\x8e\xcf\x85\xe1\xfbn\xf1\xfe\x8eS\xdf>5\xc3\xd4" +
	"I$^\x91[N\xf8\xadH\xbc9\x17\x1a\xf2\xfe\xdb" +
	"#K\x8e\x0d\xaf\xbb\x0f^\x1dgj\xf5\x81\xdc7\x08" +
	"\x7f2\x17\xbb\x9b\xfb\x10\xe1Hc\xf6\xf9i\xb9\x95\xf2" +
	"\x03Hm5\xbf;\x98\xe7$\xfc\xdc<\xf8\xe7\xac<" +
	"$\x0f|\xf3\xc3\xec\xb1\x9f\x8e\x9e\xc9\x1a\x92\xee\xb7\x16" +
	"\x12\xbe\xff\xad\xd0\x92\xbe\xb7\xc2p\xff\xf0\xc3\xeeo\xbf" +
	"\xbd\xe193q\xbc\x15\xa8\xe7\xde\x9aE\xf8eH\xbd" +
	"\xf4V\x18\x92\xdf'\xdc\xf7\xc9\xc5\xcc\xc6\x99\xacNJ" +
	"#\xb2\x08_?\x02gr\x04t\xb2W\xc6\xbc\xce\x82" +
	"\xa5\xcf,\xe6\xf8\xad\x1b\xd1\x93\xf0;\x90z\xeb\x08h" +
	"\xc8\xcb\x87K\xaa\x1e\xaa\x180\xcb\xd4Ilu\xd2\xc8" +
	"5\x84\xbfj$\x10\xf7\x18\x09\xed\x98y\xc3\xe5\xf3\xae" +
	"\xff9{\x96\xa9\x1d\x9d\x80\xb8K\xc1<\xc2\xf7-\x80" +
	"\x7f\xf6.P\x80G<;\x8e\\yv\xb3s\x16\x93" +
	"GnS\x09\x7f\xe46\xe4\x91\xdb\xa0\x1d\x97\x1f\xad/" +
	"\xbf\xccf\xb9\x9fs\\N\x12\x1ao\x1f0\xfa.\xdf" +
	"\xfc{\x1f\xe7\xe2;\x03\xf5\xc0\xa2L\xc2\xe7\x17\xc1?" +
	"s\x8a\xaei\x07\xec\xfa\xe7\x9f\x96<\xff\xc0\x8b\xf7\xb3" +
	"\x9a\xbd\xc2\xf58\xe1w\xb8\xe0\x9f[]\xe905=" +
	"\xb2S\x0a\xdf:{\xe6~VK\x0e\x94.&\xfc\xc9" +
	"R\\\x90\xa50~\xeb\x9e\xb8\xfe\xf6\x0f\xaf\x19<\x9b" +
	"\xf5j2\xc6I\xf8.c\xe0\x9f)c\xf0\xd5S\x0b" +
	"~\x1e\xb46\xbdj6\x93\xb7{\xdc>\x91\xf0\x03o" +
	"\x87w\xf7\xbf\x1d\x06\xf0\xd8\xee\x87=?e|<\xdb" +
	"\xbc\xca\xe2q\xb8\xc7\x16\x12\xbe\xc7X\xe4\x97\xb1iV" +
	"\x8e\xfcu\xc9+\xb9_\x0c\xac\x9d\xc3h\xb5\xaf,\x83" +
	"\xf0S\xcb\xe0\xcd\xf5e\xd0\xea\xcf\xc7\xf1'w{m" +
	"s\x98\xedXQ\xe6$\xfcV\xa4\xde\\\x06\xabF\xbc" +
	"|\xcd\x8b\x1b\xb2/\x9d\xc3\x1a\x90\xe2;\xca\x09/\xdc" +
	"\x01\xc4\x13\xee\x80W\x8f\xa9\xba\xf8h\xf7\xbf\xccc\x12" +
	"O\x07\xe2\xa5H\xbc\xe8\x0e\x98\xc7\xddW\x8c\xfc\xfa\xa3" +
	"\xd9[\xe7\x98{\x88\xdcw\x16\xa8\xe3\xef\xc4\x91\xbcs" +
	"\x10\xf0HR\xde\xb1\xf1K^y\x9b\xf9\xee\xfc\xbbT" +
	"\xc2\x8f\xbf\x0b\xde=\xe6.\x94\xd9\x9f\xef;u\xef\xc3" +
	"\xbd\xe729{\xeb]\x85\x84\xdf\x8b\xd4{\x90z\xec" +
	"\x11\xf1\xb5\x017<9\x97\xb9\x1d\xdc\xbd\x8d\xf0\xf9w" +
	"\x03q\xce\xdd@\xdc\xae!\xaf\xe1\xf1\xd2\xb3sY\xb2" +
	"r\xf5\xdd\xb9\x84\xdf\x8a\xc4\x9b\x91\xf8b\x0fu\xcf\xbc" +
	"3\xdd\xe71\xd7\xcc=\xb0f\xee\xc1\xd9\xbfg,p" +
	"\xc8\xd1\x9f\xb2\xba\xfe]\xbaq\x1ep618\x1b\xa9" +
	"\x83\x02H\x11\x01^=K\x80W\xa7>\\Tx\xf8" +
	"\xea\x92y\x9c#\x9d\x90\xc6\xe4L\x9a\xf8\xa4PF\xf8" +
	"\xf3H|N\x80\x89\x99\x96\xbe\xfb\x92\xe9\xfb\xf7\xcfc" +
	"\x89\x85.\xe53\x08\xdf\xbb\x1c\x88\xaf*\x07\xe2\x01\xdb" +
	"\x07]*T\\\xfd\x00k\xc3\x1bS^Hx\x09\x89" +
	"\xc5r\xe0\x8fe\xff\xd9?\xab\xe0\xc8O\xf3Yo\x8e" +
	"w\x17\x12\xbe\xab\x1b\x88\xbb\xb8\xe1\xcd\x07\x7f\x16\x0e\x97" +
	"\xa7\x0ez\x889\x87\xeeL\xc2\x8fAb\x87\x1b:\xb8" +
	"\xaf\xe7\xe6\x07/\xec\x9b\x86\xc4\xed\xcc\xaf\xde\x01\xd4{" +
	"\x81\xfa\x86=n\xdcg\xba\xed\xfd\xe2xz\xbf'\x1e" +
	"bN\xf9\xdc\x0a\x95\xf0+*\xe0\xe5\xcb*\xa0\xd9\xf7" +
	",\x9dzQ\xfa\xb6n\xa1\x99\x1a\x9b2\xb0\xf2\x19\xc2" +
	"\x17W\xc2?\x0b*q\xed\xbe\xff\xec\x13\x96\xffZ\x1a" +
	"\x16\x99\x86D\x7f\xb9P\xb5\x98\xf0\xf5U(W\xab`" +
	"\xed&\xcc[y\xc7\xc6\x9dO.2q6\xbe\xdb!" +
	"\xe5\x12^\x90\xe0\x9f\x13\xa4Fx\xb7rY\x9f\xe5\xdf" +
	"\xd6>\xbb\x885(B\xf5\x0c\xc2\x07\xab\xe1\xd55\xd5" +
	"0(\xdf-Oz2\xe9\xab\xbf/b\xcd\xcd\x01 " +
	">\x81\xc4\xc7\xaa\xa1\x93\xd7\xbcs\xe9\xfa\xf4.i\x8b" +
	"Yo\x9e\xea-$\xfc\"/\x10/\xf0\xc2\x9b\x1f\\" +
	"0s\x96\xe5\xeb\xc5\x8b\x99\xdb\xfai\xefD\xc2\x13\x1f" +
	"\xfc\xf3\xa2\x17\x87;\xe3\xd5o\xefz\xe5\xbf\x7f}\x98" +
	"5\xef\x07\x94g\x08\x7fRAA\xa9\xc0\xbc/\xbc\xc1" +
	"\xf3\xcen\xdbg\x0f3\xf7\xc7\x14\xffd\xc2_\xe5\xc7" +
	"u\xe0\x87u\xf0\xd7\x8f\xae{\xe8_\x85\xcb\x96D\xbf" +
	"\x19\xf7\xbb`\x0d\xac\x82\x1a\\\x055\xd0\xc5\xae\xc1\xca" +
	"\xb4\xad\xafw\\\xc2\x9c\xf5\x1e\xaaJ\xf8\x81*\x0aU" +
	"\x15\xfaXz\xddw\xcf\x0e\xefU\xc8\xa6^\xa0\xbeA" +
	"\xf8uH\xbdZ\x85w\xd7^1\xbd\xe3\xbf\x07\xbf\xcf" +
	"\xa6.\x0eL&\xbc\x10@\xd9\x17\x80w\xdf4\xe4\xf0" +
	"\xd9\xf7\x8e>\xb6\x9453\xbb\x02N\xc2\x1f@\xe2}" +
	"\x01\xe0\x90\xe1wL\xfds\xd7\x11\xef.5\xf16\x12" +
	"\xaf\xd3\xb2\x08\xbfCCI\xa5\xe1\xf6\xa8\x15\xf1Ot" +
	"\xe8\x9f\xfc(s\xf8\x86Nz\x86\xf0c&!oM" +
	"B1\x92\xb9\xae\xdb\x8fw\x7fq\xf5\xa3\xac\x96\xac\xab" +
	"{\x9c\xf0\xbb\xeb\xa0%\xbb\xea\xa0\x93/,\x96\xfez" +
	"G\x8f\xe4e\xccN\x8e\xaf\x9fLx_=PK\xf5" +
	"@]\xdd\xf3\xba\x93\xe3\xd7\xcd_\xc6lI\xd2\xe4\xc5" +
	"\x84\xbfj2\x8e\xfcdl\xc9o=\xbe\xbd\xea\xf6\xef" +
	",Op)\xe9\x94\x88\x0a\xa9E\xf7\xe6\x12~\xd6\xbd" +
	"\xf0\xee\xe9\xf7\x02\x93t\xf9\xe9\xcd\xb8\x97*G<\xc1" +
	"\xdc\x97V\xdf[N\xf8\x1dH\xbd\xf5^hI\xde=" +
	"\x83\xe3\x0b2\x1e~\x82%\x86\x0b\xa6\x94\x13~\xc2\x14" +
	" \x1e?\x05\xe6\xa6\x7f\xc3\x8f5\x93\xf7[\x96\xb3\x16" +
	"\xc2\xee)o\x10\xfe\x10\x12\x1fD\xe2G\x9e\xdaS\xf7" +
	"\xdd\x90\xfb\x963\x17\xc2\xe0\xa9Y\x84/\x98\x8a\x02k" +
	"*N\xce\xb2\xb5\xf3>\xfa\xf7\x9eY\xcb\x99\x03x\xac" +
	"A%\xfc\xd9\x06x\xf9\xe9\x06h\xf6\xcd\xef.ye" +
	"T\xc2\xca\xe5,\xbdr\xee4'\xe1WLC\xbbb" +
	"\x1a*\x8a\x9f>0\x7f\xdd\x933W/g\x0e\xf7\xc0" +
	"\x19*\xe1\x0bf`Sf y\xf2\x0bU\x17\x1f|" +
	"\xe7\xe4r\xd6\x98\x1c\xbco2\xe1O\xde\x87k\xf2>" +
	"\xe8\xe6uw^{\xd5\x0f\x1df\xaf`\x8d\xc9\xd0\x99" +
	"N\xc2;f\x02q\xf1\xccI\x1c9\xfeJ\xf0?\xef" +
	"\xfd\x9c\xf1$\xab\x8b\x1bg\x96\x11~7\xd2\xee\x9a\x09" +
	"]\x9cz\xf5\xe3w\x96\xec\xfa\xf3\x93\xb0\x8b\xc5\x99v" +
	"\xb11\xb3\xb6\x11\xde7\x0b\xb5\xd1Y\xd8\xe6\x97\x07\xa6" +
	"~\xfa\xb3{\xca\x93L;\xe5\xfe\x89\x84\xef0\x1bU" +
	"\xf8\xd9\xd0\xe6\x82u\x9d\xc4\x11\xbb>x\x929\xd6\xc2" +
	"\xecm\x84\xafG\xea\xe0lh\xc8\xca\xd1\x9b~\x9cx" +
	"C\xef\x95l\x85k\xced\xc2\x0f\x9c\x83\xb2a\x0e," +
	"I\x97SI\x1806s%S\xcf\xee>w\x06\xe1" +
	"\xfb\xcfE\x85`.\xee\x08O,\xeb\xf4\xd5\x03\xeb\xc7" +
	"\xadd\xb5\xdb7\xef\x0d\xc2\xcf\x9a\x87\xac=\x0fX\xfb" +
	"\xbd\xfa\xee\x1df\xba\x96\xafd\xce\xe3\xbay\xdb\x08\xbf" +
	"{\x1e\xca\x89y8&\xb7\xd5\x7f\xf5\xcc\x82\xf7\x0f\xaf" +
	"d-\xe0\xe9\xf3\xcb\x08\xbft>\xaaQ\xf3\xa1\xdd\xe7" +
	"\x1d9}\x16\xfd\x94\xba\x8aE\xec[\xe0$\xfc\xf4\x05" +
	"@<u\x01\x10\xbf[w\xcb\xb2\xd3K\xd6\xadb\xaf" +
	"\xf6\x07U\xc2\xfb\x1e\xc4\xd5\xfe \x0c\xf7\xe6E#." +
	"t\xef\xf2\xed*\x16?\xed}\xb0\x9c\xf0G\x90\xf8\x10" +
	"\x12\xe7M\xb9<\xae\xfd\xb0E\xabY\x03\xd2\xff\xa1\x89" +
	"\x84\xcf\x7f\x08\x95\xa8\x87`@\xb6<P\xffE\xd5\xfc" +
	"!k\xcc\xfb)\x0e\xb6\xf8\xd0d\xc2\xd7?\x84B\xe2" +
	"!\x94#\xf7\xed\x9f{\xdb\xdb?\xfd\xbe\x86cl\x09" +
	"\x07\x16n#\xfc\xc9\x85\xc8\xd8\x0ba\xda\x93I\xe0\xfa" +
	"{6\xc7=\xc5jH\xfd\xa2\x19\x84_\xb0\x08\x88\xe7" +
	".\x82V\x7f\xf4\xd1\x87\xf7\xae:2\xe9)\xd6\xe8\x9d" +
	"\\\x94I\xf8sH|v\x11\xbc9\xa9\xef\x87\xc7&" +
	"\xce8\xcf|\xf3\xdc\xc5e\x84_\xb1\x185\x8c\xc5\xf0" +
	"\xe6\xfb*\xbbv\xe6\xb5\xe4\xb5:\xf1\x807\xa2\x8d\xd3" +
	"\xc53\x08\xdf\xe1a\xe4\xec\x87\x81\xfa\x99\x07\xbfY\xb5" +
	"\xff\xdc\xefkYrA|x\"\xe1\xeb\x1f\xc6\xf1x" +
	"\xf8o0\x1e\xefz/\xfd\xb5\xef\xf2n\xeb\x98\xbcZ" +
	"\xbc\xf4]\xc2KK\xf1\xc9\xa5\xc8\xab\x7f\xfb\xfe\xdd^" +
	"]\xb7k\xeb8G\xb7\xf8\xf6\x8ds\xbc\xc7~wt" +
	"\xcb8\xc8q\xe4\x86\xe9\x8fX\x08\xbf\xe0\x91\x04\x8es" +
	"\xcdy\xc4\x0a\xb4\x89[\xbfI~\xf1\xda\x99\xeb\xcc3" +
	"\x83\x93^\xff\xc8\xc4\x10\xf9\x0ds\x1f\xc1\x99I\xea\xf5" +
	"y\xc9\x98m\x1b\xd8-9\xf7(\x98\xe0\x8fa/\x1f" +
	"\x03\xf6\xbb\x7f\xc9\xae\x86\xb4\x99\xee\xa7YJ\xc3\xe9\xc7" +
	"r\x09\x7f\x11\x89\xcf?\x06<\xf2\xb1\\\xfc\xf6\x8dG" +
	"\xa6\xac7/\x1a|u\xd7e3\x08\xdfw\x19\xda\x90" +
	"\xcbpL\xb6\x8f\xbcp\xcd\xe1\xb5\x8f\xacg\xbd\xfb\xfc" +
	"\xe3\x85\x84Oz\x02\xde\xdd\xe1\x09x\xf7\x95W\x0ex" +
	"\xe7\xd5??\xbb\x9e\xa9\xcf\x0d~\xa2\x8c\xf0\xc5O\xe0" +
	"N\xf2\x04\x0e\xe0\xe6\xc7\xaa{J\xfe\x7f\xadg\xae\xb1" +
	"\xe5*\xe1\xa7/\xc75\xb6\x1c:\xf9\xf0\xe6=\x8d\xd7" +
	"v\x947\x98\xa6R\x1f\xc1\xf1+`\x8d\xad@\x01\xb8" +
	"\x02\xed\x9a1\xe9\x8f\x0c;0u\xc1\x06\xe6\x92\xdc\xbb" +
	"2\x8b\xf0\x87V\xe2\xe6\xb4\x125\x98\xc7\xb7/\xff\xfe" +
	"\xf9?mdJ\xedU \xb5W\xa1\xd4^\x05\xbd\xb4" +
	"\x8fv\x8a\x0f\x7f9s#\xf3\xd55\xab&\x13~\x16" +
	"RO_\x05\xdc\xfd\xe6\xc8\xbb;\xa5m\x9a\xbd\x91\xd5" +
	"\xc9\xae\xab\x9d\x84\xef\xbb\x1a\x88{\xaf\x86Nn\x1c\xf2" +
	"\xe1\xec[^\xbd\xfcY\xe6\xab\xe3\xd7\xa8\x84\xef\xba\x06" +
	"\xf5\xfe5\xd0\xea\xad\x7f\x12\x96\xdftr\xed\xb3LI" +
	"<}\x0d\x18\x86H\xbdh\x0d\xfa0f>\xda\xe1@" +
	"\xbb\x0f6\x9b6\x90P\xb3\x9f*$\xfc\xac\xa7\xf0\xc1" +
	"\xa7p\xe27\x8c\xec\x99\xd9n\xeb\xec\xe7XC\xe2X" +
	"7\x91\xf0\xe2:\xf4\xb8\xad\x83\x96t\xef;\xa2\xdd\xd2" +
	"g\x17<\xc7Zg\xbb\xd7e\x12\xfe\x00\x10\xdf\xb0o" +
	"\x1d\x0a\xe2\xcbz\xdd\xad^/\xbe\xf8\x1ckH\x84\xf5" +
	"*\xe1\x83\xebQ5_\xff<G.^\xbbb\xd6\xcc" +
	"\xbb\xc9\xf3\x8cVt\xd8PN\xf8\xee\x1b\x80\xb4\xeb\x06" +
	"\x98\x98O\xae\xbc\xee\xc4c\xb3\xe7>\xcff?\xa0." +
	"\xde\x80\xec\xb7\x01\xd9o\xce\xce\xdb\xbf\x1b)h[X" +
	"\xac=a\xe3\x0c\xc2\xd7l\x84w\xfb6\xc2\xbb{w" +
	")v?y\xf9\xc7[Xm^\xb4Q%\xfc:$" +
	"^\xbd\x11\xe6\xfc\xe9\xe7\xcf\xcd\xdf\xf5a\xedV\xe64" +
	"\x0e}\xe6q\xc2\x8fy\x06-\xb2g\x80\xfaq\xb5b" +
	"\xd4\x9ec\xd5\xdbX\xaf>\xfb\x0c\x18\xec\xcf\xa2O\xf1" +
	"Y\xdcjFn\x8fK\xbb\xf7?\xdbX\x8d>\xf2\xec" +
	"\xe3\x84?\x8b\xc4\xa7\x9f\x85F\xff\xb2\xff\xa9\xc7\xd7\x9e" +
	"\xdf\xf0\x02\x8b\xb8\xfb\xa62\xc2\xf7\xdf\x84\x1e\xb1M@" +
	"\xbc\xb8\xd4\xfd\xca\xb7\xbf\xff\xf2\x02k\xc2'l\x9aG" +
	"\xf8 \x12\xd7l\x82\x09\x17R\xac\xed\xbf\xcb\xc8\xdf\xce" +
	"\">\xb4\xc9I\xf8\xaf\x91\xf8$\x12\x0fx*uL" +
	"q-\xbf\x83\xb9O\xe7o\xce\"\xfc\x98\xcd\xc8V\x9b" +
	"A\xf8\xfd\xf6\xd9\xf1\xa4;\x8e\xf6\xd9\xc1\x12}\xab\x9f" +
	"\x9bA\xf8\x1d\xcf\xa1\xbe\xfa\x1c\x0c\x87\xfb\xcc\xd3\xf5\xef" +
	"=\xfb\xf4\x0e\xd6\x16\xb6\xf4y'\xe17>\x0f\xc4\xeb" +
	"\x9e\x87\x81.h\xd7\xef\x83\x87\x17M|\x915\xd09" +
	"[&\x12~\xcc\x16\x9c\x95-@\xfc\xd4?:^f" +
	"\xdf\xf9\xce\x8bl/\xe8\x16\x10\xc1[Q\x04o\x05\xea" +
	"\x8a\xa9\x13\xfey[\xd6\xa7\xccW\xaf\xd8ZN\xf8\xad" +
	"H\xbcy+4\xfa\xab\x9f\x97\xd7?r\xe0\xba\x97X" +
	"\x83\xb7`[\x19\xe1Wo\x03\xe2\x15\xdb`\xf0\x16-" +
	"z\xf3\xeb\xa9\xcf\xe43\x89/n\xcb |\xd2\x0b(" +
	"\x80_\x00\xe2a\x17\xff\xdb5x\xf9\xe8\x97X\x13\xee" +
	"{\x01\xb4\x16$\x9e\xfa\x02L\xf8gi\xd7\xfd\xed\xee" +
	"\xc0\xf6\x97\x98=\\\xfd\xc2\xe3\x84\xdf\x85\xd4;^\x80" +
	"\x1e\x0e\xf2=\xf3\xe0\xcd\x0f\xfd\xed%\x96\xd6\"l\xcf" +
	"\"|\xcdv\\-\xdb\xa1\x1d_\xab\xed\x9f\xcc\xfd\xe4" +
	"<\xb3\xd1\xfb\xb6\x97\x13\xfe\x18\x12\x1fA\xe2+\xfe\xe3" +
	";\xfb\xda\x12\xdbN\xd6\x9b\x07\xee($|\xc1\x0e " +
	"\xce\xdf\x01\xc4C\x86]S\xddp\xf7\xa0\x9d\xf0\xe6L" +
	"j\xff\xe7Qi\xde\xa1\x12~\xf7\x0e\xd4\xf9vTv" +
	"\xe5H\xa3\xfc\xcf\xfc\x0d%;Kw2\xfbx\xe4\x83" +
	"B\xc2\x9f\xfe\x00^\xfe\xf5\x07\xd0\xc7\xdd\xb3\xdf\xfc\xee" +
	"\xe4\xab\xc2NV\xb3g\xfd\xb3\x9c\xf0\xcb\xfe\x89>\xe1" +
	"\x7fBK\xd2z\x9d<\xf1\xf6\x8b\xdb\xd9\xaf>\x0f\xd4" +
	"I\x1f\xe2\xcc|\x08\xaf>N\x1e\xbb9\xf5\xfa\xefw" +
	"\xb2\x18d\xf5\x87`\x85!\xf1V$\xe6\xab\x7f<4" +
	"\xe1\xab.\xbb\x98\xb2\xf7\x90\x93\xf0\xe2!\x94\xbd\x87\xa0" +
	"\x1d\xa3G\xff\xfb\x9a\xb1\x8f\xd52\x89w\x1fZL\xf8" +
	"CH|\x10\x89\x0f\xcd\xed\xf5\xd1\xa7\xdb\xa7\xbc\xcc\x14" +
	"\x91\xfd?ZC\xf8\x82\x8fpU~\x84\"\xf2\xc6q" +
	"[\x0f}\xb8\xf3\xa1\x97YS3\xfe\xe3\x89\x84\xf7}" +
	"\x8cz\xed\xc7\xf0\xee\xac\xf8\x07?\xee\xf6\xcb\x07L\xe2" +
	"\xbd\x1f\x17\x12\xfe\x08\x12\x1fB\xe2\x9a\xdf\xc7\x9e*\xfe" +
	"\xfd\x93\x97\x99\xa3\xd7\xff\xb0\x93\xf0\xf9\x87Q\xb1=\xfc" +
	"<G~{\xfa\xd4\xbc\xe7\xde\xfc\xe2e\x16\xed\xe9\xc3" +
	"*\xe1\xc9\x11\xa0\xbdx\x18\x0d\xa5\x8c\xdf\x87\xbe\xbf\xfd" +
	"\xbaW\x98K\xf1H!\xe1\xb7\"\xf1\xe6#\xb0\x14K" +
	"\xbe|g\xc9\x9e\xe4\x97_e\x1a\x8e\x9fL$\xfc\x8a" +
	"O\xd0p\xfc\x04\xf7\xc4\xe3\xef^\xf6\xc0\xcd\x07\x97\xec" +
	"f\x0d\xb5x\xb4'\xe1\x83GQD\x1e\x85\xe55\xe8" +
	"\xae\xd7nZ\xfc\xf8\xbf\x99\xc4\x8b\x8e\xce#\xfcF$" +
	"^w\x14\x86\xe3\xae\xd7\xdf\xb6\x1f\x8b;\xbb\xdb\xac\xdd" +
	"\xa0 \x8b?6\x91\xf0]\x8f\xa1W\xf1\x18j7\x9f" +
	"\xfcv\xee\x86\x0f\xbf\xf9y7\x97r\xb9\xc5\xd8\xca9" +
	"r\x83\xef\xf8D\xc2O?\x8e\x8b\xfc\xf8 \x8e4\xce" +
	"H\x18qI\xa7\xff\x94\xbe\xc6\x94\xbds\x8f\xcf#\xfc" +
	"\xea\xe382\xc7Q\xf1\x1c\xf5S.\x1f?f\xcck" +
	"\xacF\x9f\xfe\x1cF\xfa\x04\x8e\xf4\xe7\xd0\xe8\xd3\xcf&" +
	"5^\x96\xbc\xf25\xe6\x1cN8\xb1\x8d\xf0A\xa4\xae" +
	"9\x01\xf3\xf2\xf9\x9f\xeb\xafLn\xd8\xf8\x1a\xa8\xcb$" +
	"J]\xee\xfe\xaf\x9e\x84\xef\xfb/P\x97\xaf\xfd\x17\xaa" +
	"\xcb7\xfb\xf6\xba\x1f{\xf6\x83\xd7\x98\xear\xd7\x7fM" +
	"\x0e\x91\xdf\xd0\xfb_\xc8\xa6\x8e\x1b*\xe6\xef\xe9S\xf6" +
	"W ooV\xdf\xbe\x98G\xf81_\xe0\xd2\xf9b" +
	"\xb6\x95#\x8d]~\xddt\xd9\xc7{\xda\xbf\xce\xdc\xe8" +
	"\xbe\x82}\xff+\x94d_\xa1f\xd8e\xd8\xbfo{" +
	"r\xd8\x1ef\xe4\xe2\xab2\xc2\x9f@\xe2c_\xc1\x94" +
	"\xdfP\xf4\xa8\xf2\xe6\xc6\xfb\xf7\xb0v\xa3\x8b@\x9cr" +
	"\x0a\xc3l\xa7\xd0\xc5\xab>6w\xa7\x93\xbc\xc1\x9c\xf2" +
	"\x8d\xa7&\x12~\xf7)\x94d\xa7\xd0!R}K\xf1" +
	"/=\xac\x99o\xb0VW\xfe7\xdb\x08?\xe1\x1b\xf4" +
	"\xcc|\x03\xad>\xbb\xe0\xfa\xb4\xd4{v\xbd\xc1\x1d\xec" +
	"\x16\xff\xbb-j\xb0w\x7f\xd3\x91\xf0\x07\x80\xd6\xf5\xce" +
	"78\xd8\xdf\xac\xcf\xba\xe5=e\xcf\x1b\xcci\xdc\xf5" +
	"\xcd\x8c\x109\xbf\xef\x1bh\xf6\xbe\xabG\x1c\xffb\xdc" +
	"\xf97X\xcb\xab\xfe\xdbL\xc2\xcf\xfd\x16\xfd\x88\xdf\xc2" +
	"\xf2Z|\xf2\xc3w6y2\xdfds\xc8i\xe0\x90" +
	"\xd3\xc8!\xa7\xa1\xd5\xaf5\xec\xda\xf7x\xdd\xf2\xb7X" +
	"\xaf>tz1\xe1O#\xf1\xd7\xa7\xe1\xd5\xf7\xbd\x9a" +
	"\x7f\xf4\xad3\xcf\xbd\xc5d\xec}\xdf\x95\x11\xfe\xd8w" +
	"(\xe4\xbfC\xc6\xfe\xb8w\xad\xfa\xcb\x0b\xa9{Y\xf3" +
	"8\xf0\xccd\xc2\x17\x9c\xc1M\xe6\x0c4\xe4\xdew\x12" +
	"\x94\xf1\x03s\xf62\x85\xf5\x99\xc5\x84\xdf\x85\xc4;\xce" +
	"@C\xd2\x9c\xf7\xa7\xb9o\xa8e\x12\xaf;\xeb$\xfc" +
	"\xae\xb3H|\x16F\xef\xae\x87W:v\x7f4o/" +
	",\x82\x01Q\xf32\xe6\x07\x0b\xe1\x85\x1f`^\xee\xfc" +
	"\x01\xe7e\xcb\x97\xfb\xde\xfc\xf1\xae\xa5{\xd9\x8e\xd2\x1f" +
	"> \xbc\xf4\x03F\x0c~\x807op}\xd85y" +
	"\xf8;lj\xf2\xe3b\xc2w\xfd\x11M\x87\x1fq\xcf" +
	"\xbdq\xdd\x807\xfa\xfc\x939\x1c\xc1\x1fs\x09?\x0b" +
	"\x89\xa7\x03\xf1\xcf\xd7'li,\xfff\xafi-b" +
	"\xc8\xec\xd8\x8fk\x08\x7f\xeeGTU\x7fD\xbf\xfb\xdf" +
	";\x1c;Z\xb6'\xefm03\xda\x99\xfcT\x1d\xfe" +
	"\x9bK\xf8\xae\xffEA\xf6_\xe0\xea\x8bcf\xddy" +
	"x\xe7?\xdef\xe9zK\x7f)'\xfc\xc6_PF" +
	"\xfe\x02\x03\xdd\xf1;\xbf\xef\xa5'o\xf9\x1b\xab\xcdK" +
	"\xcf\xab\x84\xdfx\x1e\x89\xcfC\x07\xd5\x0b\xab\xff\xb4r" +
	"\xca\xb8\xbf\xb1f%\xfe\xd7\\\xc2w\xf9\x15\x88S~" +
	"\x85\xb1+\x1de\x91\x97\xfd2\x91\xf9\xe6\xcd\xbf:\x09" +
	"\xbf\x07\x89w\xff\x0ao~\xe2\xa9\xba\xc1\xef\xff5\xed" +
	"\x1d\xa6A\xf7\x1b\xd8\xcf\xbf\xa1A\xf7\x1b\xbcyn\xe5" +
	"\x7f\xfa^\xb3\xa6\xf4\x1d\x96B\xb6\xf7\xb7\x89\x84?\x82" +
	"\xc4\x87~\x03\xf1\x91\xfa\xb9\xf3\xdb\xfa\xfbk\xdfi\xea" +
	"P\x88\xbf\x90J\xf8.\x17\x809\x92/ s4\x8c" +
	"\xfca\xf9_\xa5\xf7\x99\xad \x17\xe6\x11\xbe\xeb\x05\x9c" +
	"\xed\x0b0r\xcb\xc6\xef\xff\xf3\xe8\xd9\x8f\xedcZ\x18" +
	"@\xdc\xe1\"\xaa\xb2\x17\x81x\xf7m\x07\xaa?{\xa8" +
	"\xea] \xeehn\xf3\x89\x8be\x84?w\x11\x1f\xbc" +
	"\xb82\x8e#\x8d\xd7\xad\xbe\xb1za\x9f\xc7\xdfe\x19" +
	"\xa1\x83NX\xc8D\x92v\xce\x02\xcf\xa6\x9d\xb5\x10\x18" +
	"\x92q\xef\x0e\xfd\xbd\xf0\xd2'\xf1\x81\x04J\x83\xc3\x07" +
	"VX\xc93$m\x87\x15\x1e\x18\xb4\xd5JF\x83\xc0" +
	"\xee\x96\xbb\xec\x92Y\xf2\x8ew\x19\xcd\x1f44\x01\xbe" +
	"\xe0H\xc0/\x14'\xe0\x17\x86\xcd,\x7f\xf4\xcd\xe1o" +
	"\xbd\xcb\x98\xceA_'\x90r\x92vQ\xa7?\x9f@" +
	"`F\x97\xf7\xfe\xee\xca\xdd\xc5\xbf\xbd\xcb\x98\xa4A\x13" +
	"\xda\x03}M{\xa4\xf7\xb5'\x18\xe0_\xb9\xf9\x8e\x9a" +
	"`\xfe~\x16\xfd\xa2\xf6$\x83\xa4\xad\xd6\xe9W\xe8\xf4" +
	"\xaf/\xbak\xff\xceK\x9d\xfb\x19\xa2{\xd0\xee\xf6\xa4" +
	"\x90\xa4\x1d\xd4\xe9\x0f\xb4\xc7\xf6\x88\xbd\x1e\x1c\x1b\xdf#" +
	"\xf9\x80Y\xb4\xe1\x03\xbd;\x905$-\xa7\x03~m" +
	"h\x07\x82\x16\xf5-\xdf\xf8n|\xd5w\xfc\x00k\x84" +
	"\x8eu$3H\xda\xd9\x8e\xf8\x85\xd3\x1dq\x84\xb6l" +
	"\xb2\xdf\x9d\xf3\xd0M\xef\xb1\x84\xe7\xa0Y\x9d\x88\x93\xa4" +
	"-\xeb\x84?\x96v\"(?\x8b%\xe5\xf3O\x1a\xc7" +
	"\xbc\xc7\xea\xf3\xc9DRF\xd2\xce'\xe2\x17\xce%b" +
	"\x9f\x8f/M\xec\xbe\xe7\xae\x1b\xff\xc1R4\x07]\x95" +
	"D\x16\x93\xb4\xa1I\xf8\xc0\xe0$\x82[\xc5\x8a\x94\x9a" +
	"\xdfg\xfa\xff\xc1\xd8;\x07%u\x86I\xe8\xd1\x19\xe9" +
	"\xbbw\xc6.T\xdf\xa2\xee\xfa\xee\xd2/\xfe\xc1\xea\xf2" +
	"\xae\xceD%i\x07t\xfa}\x9d\xf1\xfd\xf7<v\xa4" +
	"\xd7\x81\xedg\xfe\xc1\xea\xc0j\x1b\xc9$i[mH" +
	"\xbf\xd9\x86\x1d\xe8}./\xb3\xc6#\xbe\x0fr\xcc\xd5" +
	"x\xe5\x1eZ\xec\x0d:`#=I\xda1|`\xd0" +
	"\x11\x1bi\xec\xc5\x91\xc6\x87{\x7fVF\xaeX\xf8>" +
	"\xeb\x0b}\x07\x93\\\x926t\xb0\xde\xe3\xc1\xf8\x85\xd1" +
	"]\xcf\xc5}\x9ar\xee}\xe6\x10I\x83a\xd6\xa6\xea" +
	"\x0f\xd4\x0f\xc6.$\xdd\xf5\x83'\xbeo\xfcAVt" +
	"u\xd0\x98,X\x08R\x16>-f\x11T\x8c6\xde" +
	"\xb2|i\xc2\xec\xda\x0f\x98\x9c\xb4\xf4f`\xbd\x8d7" +
	"\xe3\x13\xebn\xd69\xe9\x91\x9a\xa9_\xdf\xf2\x93\xe3\x9f" +
	"\xcc\xe5\xdc\x7f(\xc9\"i9C\xb1QC\x87\xe2<" +
	"<|\xfe\x93\xc7+\xf7\x96\xfd\x93\xb5\xef\x0c:?\x14" +
	"&.\xe9\x16|\xa0\xc3-\xc8\xdd\xdb\xa7\xae\xffq\xca" +
	"\xf5\xaf\xfc\x93\x11\xbc\x1f\x14\xbc\x05:1\xf7\x16\x9d\x0f" +
	"o\xd1;\xf1\xd5\x9f\xf6WN\x9b\xbe\xf9\x10k\xa6W" +
	"g\xc3\x03;\xb2\xf1\x03[\xb3q\x98\xbe\xbbiD\xf5" +
	"{\xa9\x9f\x1ebva\xd60h\xd1\xb2a\xf8\xc0\xd2" +
	"a\xf8\xc0\x9b\xfb\x06h\x15\x03\xed\x1f\xb1\xe4\xc5\xa2\x1c" +
	"2\x8f\xa4m\xccA\xfau9\xd8\x83\x09\x9f\x0ezG" +
	"\x9ep\xc7G\xcc.\xc7\xe7\x92\x97IZ\xf7\\|\xa0" +
	"k.>P\xf0F\xd2[{;\xcc\xf8\x88\xa5\xea\x0d" +
	"\xaa\xcf\x85\xe5\xb6\x00\x1f\x1847\x97\x80\x82\xff\xf3\xa1" +
	"9\xa5w\x9c\xde\xfc\x11c\x88\x0e\xe5A\x83N\xe7!" +
	"\xf9\xd7y\xfa\x10\xad\x9d\xd1s\xcc\xbf.+\xfc\x98\xa1" +
	"\x00\x0f\xba\x98\x0f\x9c\x94r+>\x90t+A\x1d\xd8" +
	"\xdf\xed\xe6\x1e\x8f\xaf-\xfb\x98%\x92\xb6\x16\x90\xc9$" +
	"mo\x01\xf6`O\x01\xf6\xe0\xba>\x07\x06o\xd8\"" +
	"}\xcc\x1c\xd3\xee\x850\xa6\xfd\x0b\xf1\x81\xbe\x85\xc8\x16" +
	"\xbf\xac\xad\xcd\xba\xe4\x9a/>f\x8e\xd1\xbeBX\x9f" +
	"\xc7\xf4\x07\x8e\xe8\x0f\xdc\x9c\xb6\xf7\xd8\xca\xe9\xe4\xb0y" +
	"\x8c\xf0\x81\x9a\xdb\xc8\xbb$m\xc1m\xfa\x18\xddF\xc0" +
	"\x1a\xfb\xbd\xbe:\xff\xca\xe3\xfe\xc3,\x116\xbe\x18>" +
	"\xe0+\xd6\x97R\xb1\xce\xda\xfb\xc7^6\xf3\x9b\xfa\xc7" +
	"\x0e\xb3\x18\xef\xdc(x\xa0\xc3h}\x0aG\xe3\xa8\xfe" +
	"f\xadzh\xdd\x8c\xf5\x87\xd1_j\x08\x00\xbd\xcb%" +
	" \xf2\xfa\x97\xe8\x8b\xbb\x84\xa0\xea\xb3\xe6\xda\xdf+\xbb" +
	"?\xb0\xeb0\xc3\x98\x1c4\xd0\x09\x0f\x148\xf1\x81|" +
	"\xa7\xde\xa2\xbf\xdd\xba\xf4\xbd;\xfe\xf1+>p\x99I" +
	"\xb5\x1at\xc2\x05B\xe9\xac\x0b\x9f8\xed\"/%r" +
	"\xa4\xf1B\xfb\xfe\x83\xc6mp\x1fa.\xe8=\x02," +
	"\xcf\x83\x02>q@\xd0\xbf\xd1\xf7\xbd\x847\xf8\xe3\x07" +
	"\x8e\xb0V\xcfx7\xac\x1e\x9f\x1b\xe7Ar\xe3<\xd8" +
	"\xe4\xb7\x87\x9dJ\xbd\xf4\x13\x16=\xf1\x00\xefu\xf5 " +
	"}\x17\x0f\xd2\x1f\xdf\xfe\xc9\x83\xe3K7}\xc2Z<" +
	"\x9b=\xc0\x18{t\xfa\xdd\x1e\xe4\xa4\x97\x1f}KJ" +
	"z\xe6\x00\xd2w2\xcf[W\x11z\xd0[\xd4w\x09" +
	"\x91|\x0c\x1a\xc6\x84dw\xbf\xec\x9d\xb7\x7f\xca\xf2\xfc" +
	"\x0f\xf2M$\x8f\x93\xb4Y\x13\xf1\x89\xe9\x13q\xf54" +
	".\x18y\xe6l\\\xba\xf8)\xabM{\xbd \x89\x0f" +
	"y\xb1M\x07\xbd\xd8\xa6k^T\xff\xedI\x9d\xfe)" +
	"Sr\xfb\xa0\x0f9>]\xe6\xf9Pr/\xb9de" +
	"\xf0\xd7\xaf\x16\x7f\xcaZ=>\x1f,\xb7\xe9:\xfdT" +
	"\x1f\xbe\xff\xc0\x93\x0f\x16\xbb\xefz\x8e\xd9\x9e#\xf8\xfe" +
	"\xd3:\xfd\xd7:\xfd\xe9\xea\x09q\x97w\xdc\xc3\xa4/" +
	"\x90a\xce&\xc8H?^F\xfa\x07\xab\x0f\xf7\xe8q" +
	"x\xf9Q\xe6N\xb2K\xc6\xcdP\x7f`\x9f\x8c\x12\xef" +
	"\xf6U\x03\x8a\xee\x7f\xf6\xc2Q\xe6\xea\\\xa7\xc0\xfa\xdf" +
	"\xa5\xe0\x03;\x14\x9c\xe5\x97\xde\xbc\xf3\x8d\xb1\xae\xf4c" +
	"L\x85\xa1\xd8\x0f]\x10\xfc\xba\xc2\xe4\xd7\x15\x86\xd5\xbb" +
	"\xfe3\xe8Cu\xe11V\x1fv\xd5\xc0\xces\xa0F" +
	"oR\x0d\x8e\xe9\x8cg\xa6\xed\x9d\xf6\x9a\xe33\xd6\x1c" +
	"\x9c\xae\x819\xbb\xa8\xd3\x9f\xd7\xe9\x0b\xfe:\xf8n\xb2" +
	"m\xc5g,>\xed\xae\xe2\xeaTu\x81\xa4b\x0f\xd6" +
	"O[S\xd1\xfe\xbd\xb5L\xfa\x03*\x0c\xd1\x09\x9d\xfe" +
	"\x98\x0aCtqs\xe7}W\xa7&\x1e\x8fN\x03\xd3" +
	"\x9bs0\x00\x12\xfbd\x00\xc9O\x04\xf0\xf5K\xa7?" +
	"\xf3\xb7\xdf\x82\xc2q\xe6\x88N\xd7\x80'\x96j\xf8\xc0" +
	"\"\x0d\xe7\xec\xd1\xd5\xf9?\xbf\xdd\xbb\xfa8\xab\xbfg" +
	"5\x98\xe3\xf8 \xd2\x93 \xf6\xf7\xd9\xb33.\xdc\xbf" +
	"\xd3\xf69k<\xfb\x07a\xc6\xf2u\xfa\x1c\x9d\xfe\xd5" +
	"\x1f>\xbc\xf2{\xad\x17\x93^\x08\xc2x\xd6\xe8\xf4\xbe" +
	" \xb6'\x7f\xfd\xe1\xc7\xceM\xdb\xf89[`\x07A" +
	"a;\xa1?pL\x7f`\xfe\xf6\xae\xa9\xdd?\xd8\xf2" +
	"9+F9hh-\xb0\x84\xa3V\xe7\x8fZ}\x97" +
	"*x\xf8\x91W&/|\xefsV\xecv\x900\x09" +
	"\xc6(8\x09?Q3\x09?\xe1^\xb0|\xcek\xb7" +
	"w<\xc1\xe4\xeb\x93\x93`\xd2\xce\xe3\x03\x83\xceM\xd2" +
	"?\xb1#\xaf\xf3\xd5\xe4\xc5~'\x9a8\x99\x06\xa5\xd4" +
	"\x93KIZ\x8fz \x1f\xdb\xad\x9e\xa0\x15\xd5\x8f\xcc" +
	"\x9az\xef\xaf\xfd\xbed\xa4\x94\x0dJ\xaa\x87A\xd5\x1f" +
	"\x18\xd4\xbd^\x17\xf1\xbfl\xfd\xe6\xe6m\xdf}\xf5%" +
	"kT{\xdc\x0bl1\xf0^\xecA\xff{\xb1\x07\x9f" +
	"ey\xde\x1b3\xfe\x8a\x93L\xd5\xe2^\x18\xa3u:" +
	"\xfdj\x9d\xfe'\xcb\xeb\xe3\xb7\xbeu\xf4$K\xb2\xc4" +
	"O\x01\xae\xe8:E\x97\xbeS\x90\xfe\xec\xae\xdf\xebJ" +
	"\xdd\x7f\xfe7\x8b\xabk\xa6\xc0\x062]\xa7\x9f:\x05" +
	"\xd9\xf4\xa2\xfa\xcb\x84_\x17\xe7\xfe\x9b\xc5u]\xa6\xc2" +
	"\x0c\xf4\x9e\x8a\xf4WME.\x9a\xb4\xffsa\xd5+" +
	"\xed\xbfb\xbd?\x7f*p\xd1\x18\x9d\xde1\x15\xdf\xbf" +
	"a\xfe\xca\xb2\x9eW_\xc3\xa4\xffz*\x9a^:\xfd" +
	"y\x9d~\xea\xc9\xfa\x83\xee+\xae\xfb\x8a\x91n9h" +
	"\xe9_\xc0\x16\xdc\xfc\x17\xa4\xdf\xf8\x17l\xcf\xcac\xa3" +
	"\xd3\x9ey\xf2\xd6\xafX\x8e\xc1A\xfb\xfe\x02\x1d8\xf6" +
	"\x17]+\xff\x0br\xc4\xf7\xddo8+'=\xf1\x95" +
	"\x89\x1e?p\xbe\x01\xb6\xb3\x94i\xbaf4\x0d\xb5\x8a" +
	"\xc6\x9e]\xb6\x1c}\xf5\xbbo\xbfbi\x09\x17\xa7\x83" +
	"\xdcJ\x99\xa1?0Cg\xb9\x99\xc27\xb9\xef~w" +
	"\xcb)\xbdI\x11\xae\xc6\x07z\xdf\x07\xd6\xe0\xe0\xfb\xb0" +
	"\x0b\x03\xefC\xd9\xfb\xd2\x83\xa7~\x1cx\xd5\x13\xa7\x98" +
	"\x0b\xad\xc3LhR\x8f\x99\xba\xa53S\xdf\x0d\xea\xbe" +
	"\xdfve\x97\x97N1\xfb<w&\xf9\x84\xa4\xad\x9b" +
	"\xa9\xdb13\xf5&\xddT\xfai\xb7\xa3\x13\x8e\x9eb" +
	"q\xdd\x9eY0\x0b\x87f\xe9\xfb\xdf,\x1c\xd5\xbc\xba" +
	"\x80\xed\xd4\xfa~_\xb3f\xed\xdc,\x98\xe5\xf8\xfbu" +
	"Yt?\xce\xda%\xce\xba\xc1I\xa3V1\xe9\x97\xdd" +
	"\x0f\xcbr\xb3N\xbfQ\xa7\xff\xd3\xc6\xba\xe9}\x87\xbc" +
	"\xf6\x1f&\x17\xcd\x06\xae\x1e?\x1b\xe9\xc7\xccF\xfa\x1d" +
	";\xde:\xba\xf7\xa7\xdf\xff\xc3Z\x05\xe7g\xa3I1" +
	"G7)\xe6\xe0\x08}\xb9\xe6\xc2\x87\xaf>]\xf6-" +
	"sH\xa59\xa0S\xd4\xeb\x0f\x04\xf5\x07fN\xad9" +
	"\x98p\xef\x9d\xdf\xb2\x1atb\x0el\x1e\xe7t\xfa\xb3" +
	"sp\xce\xae\x9d\xe8{\xe9\xc0\xa2\xdd\xdf\xb24\xbb}" +
	"s\x81)\x8e\xcd\xd5\xb9n\xae\xaeu\xbd\xa0\xfdp\xf0" +
	"\xde\xdeSO\xb3> =\x00rb\xea\x03\xbai\xf7" +
	"\x00\xf6\xd8\xf7T\xa7\xe9S\x9e\xde|\x9a\xd9\x83\x94\xf9" +
	"\xc0\xd7W\xcd\xc7\x07z\xcc\xc7\x07j\xc7\xcd\x98\x99\xb5" +
	"\xe29\xe6\x07v\xcd\x07i}P\xa7?0\x1f{\xb0" +
	"\xf2\xfb\xee\xdf|\x7f\xfc\xa7\xefX\xf4\x1b\x17@\x0fv" +
	"/@\xfa]\x0b\x90\xbeh\xd3_6l~\xbb\xe6{" +
	"V*\xd1\xa0\x15\x0f\xc2\x1co}\x10[\xb7\xf9A\xdc" +
	"\xf0\x8f\xcf\xfe{\xd9\xa8\xbe'\xbfg\xdaD\x0b\xd1&" +
	"Z\xa8\xdbD\x0bq\x0a\x96}9u\xcd\xf2T\xfb\x19" +
	"\x16\x8f\xce]\x08#\xb4B\xa7_\xa6\xd3wzgu" +
	"\xff9\xab\x87\x9e1\xe7-c\x83\xce/\x84\x06%-" +
	"\xd2\xd7\xd0\"\xddm\xd4]{ox\x8f\xba\x11gX" +
	"\\4}\x090\xc5\xa2%\xf8\x85\x05Kt\xc3T\xe8" +
	"}\xf1\xd3\x95\xb7\x9fa\xca\xae%(\xbbt\xfa\xf3K" +
	"p\x88\x84\x92\x7f(/\xfd\xe3\x01f\x0f\x0e.%\xdb" +
	"H\xda\xd7K\x91\xfe\xe4R\\e\x95\xdb\xa6\xcf:\x91" +
	"\xf5\xcd\x19\x96\xec\xed\xf0\x08LY\x8fG\xf4u\xff\x08" +
	"\xd2?\xfd\xe3\xf8\x87\x8a\xce\xac8\xcbt{=\x02\x1d" +
	"v\xe8\xf4\xc5\x8f`{\x0e'=\xff\x95\xe5\xef\xfb\x91" +
	">\xd1D\x7f\xd5\xa3\xb0\xca\x06?\x8a\x1f\x1b\xf8(\x19" +
	"\x11\xcf\x91\xc6^O=\xf4Y\xb7\x9a/\xce\xb2D\xdd" +
	"\xee\xe5 \xb9\x0e,\xd7\xb7\xff\xe5\xba\\\xf98\xb1\xec" +
	"\xe15/\xff|\x96\xa9\xc7\xae\x80/\x9c^\xa1\xeb\xb1" +
	"+pD\x17tz\xef\xc4k\x097\xfc\xc0\xea\xb1\xe3" +
	"I\x98\x01\xe1I\xa4\x9f\xf0$\xf6\xb8\xe1\xea\xe7\xdf\xb4" +
	"M\x8b\xfb\x91\xb9\x0a\xa6>\x09\xebr\x91\xfe\xc0\x82'" +
	"\xf1\x03\xbdN6~\xf4\xcb\xe0+\x7fd\xaa\xa5\xe7\x9f" +
	"\x84\x0d<i\xa5>\xc0+\xf5\x859\xe4\xe6\xd2\x0d\xc2" +
	"\x81K~bY\xca\x1bW\xc1$\xecY\x85\x0f\xec^" +
	"\xa5[\xca\xd3\xd2\x9e\xbf\xed\x83\xbc\x8c\x9f\x98m:\xb1" +
	"\x96\xac!i\xe7\xd7\xea\x9e\xaf\xb5\xb82\x1b\xea\x8bn" +
	"\xbc\xf1\xd8\xd4\x9fX\xd3\xb6n\x1d\x0c\xd2\xaeu\xbaj" +
	"\xbd\x0e\xe9\xaf}4\xf3\x1f\x0b\xfa\xbf\xc9\xfe@\xf1\xd3" +
	"\xd0\x07\xe1i}\x94\x9e\xc6\x07\xd4\xc4>+\xffy\xc9" +
	"\xb8s\xcc\x07\xce=\x0d\x8c\xdaa=>\x10\xbf\x1eG" +
	"i\xf5\xfb\x8b\x87\xafj\xd8p\x8e\xa5\xe5\x08\xeb\x81>" +
	"\xb8^7\xb3\xd7\xebZ\xce7\x13Wy\x9e\xb0\xf0\xff" +
	"e~!\xb8\x11\xe6a\xeeF\xfc\xc2\xac\x8d\xd8\xa4\x01" +
	"\x7fQ\xbe\x99vb\x18\xfb\x81\xde\xcf\xc0'\x86>\xa3" +
	"\xfb\xbe\x9e\xc1&\x8d\xae\x1f\xfa\xc1\xce_\xbea?\xb0" +
	"\xf1\x19\x18\xd5=\xfa\x03\xbb\xf5\x07>>\xfa\xc4\x07\x8b" +
	"\xd5\xba\x9f\x99\x0e\x88\xae\xcf\xc2\xc4\xf5\x7fV\xd7\xf7\x9f" +
	"\xc5\xd5\xb0Wxw\xe3}\x1d\x9e\xff\x99\xc5\xabI\x9b" +
	"\xd0\x9f\xb8I_m\x9b\xf0\x03q\xe3\xee\xe8x\xff\xed" +
	"/\xfd\xcc\xe6\xbdM\xb0-/\xd5\x1fX\xb4\x09\xfb\xfc" +
	"\xc2\xf7\xbdF\xddQs\xfcg\xa6r\xdaw3y\x97" +
	"\xa4\x15l\xd6\xcd\xfd\xcd!/\xcd\xa7\xcb\xcf\x7f\x16\xfc" +
	"\xcb/\xcc>H\xcfA\x9b\xa6>\xa7\xef\x0a\xcfa\x1f" +
	"\xc6\xbd\xc7?\x9a\xf8\xd1\xf2_X}\x18\xff<\xf4\xb9" +
	"\xe6y]\x87\x7f\x1e\xd7\xcf\xb9\xbb\x1f\xe9y`\xefQ" +
	"&\xfd\xa2\xe7a\xda\xd6\xe9\xf4\xab\x9f\xc7>\xbf\xb1\xfa" +
	"\x1ao\xf6\xf2\xc4\xf3,V\xed\xb0\x05\xe8\xbbo\xd1e" +
	"\xf6\x16l\x8f\xd4ik\xea\xfd\xa3\xf2\xcf\xb3\xce\x8e\x0c" +
	":\xbd\x05$\xc6\xc5-\xfa\xda\xdbB\xf0<\xc3\xc3W" +
	"\\\xff\xf9\xe3b\xf2\xaf\xa0\x8f_\x11\xa5\x8f\xef~\x01" +
	"\xd6\xff\x81\x17P\x1f\x7f\xe7\x05]\x1f?r\xdd5\xb3" +
	"G\xbe?\xf0W\xe6$\xecz\x01\xc6\xf4\xd0\x0b\xba\xe6" +
	"\xf2\x02NB\xca\xdb\xd7l\x9a?\xb1\xf8W\xa6\xfe\xbb" +
	"\x1dd\xe4\xac\xedH?};\xd2\xdf\xf6\xe1\xd1]/" +
	"]}\xfb\xaf\xac\x11\xea\xba\x03f\xa0\xef\x0e\xa4\xef\xbd" +
	"\x03GT\xf8\xec\x9e/\x86\x8c\x9b\xc6nP\xf1\x0e\x18" +
	"\"A\x7f`\xc2\x0e\xfc@\xb0\xe1\x86\xee\xb65;~" +
	"e\xa5W\x0e\xba\xb8\x03Vs\xca\x8b\xba\xfe\xf8\xa2\xae" +
	"pn\x99\x93s\xf1\x9f\xbd\xdb\xfd\xc6\x12\x92_\xbf\x04" +
	";\xff\xc5\x97\xf4m\xe7%l\xd2\xd6]\x87gx7" +
	"\\\xc6\xa4\xef\xba\x13>\xd0w\xa7\xde\x85\x9d\xba'\xfe" +
	"\xbavw\xfd\xd77\xfe7v\x17v\x02c\x8b\xfa\x03" +
	"\xc2N\xec\xc2\xcf\xb6%\x0b\xf2\xbcy\x17\x98\x8c}q" +
	"'\x0cR\xca.| i\x17\xb2\xc5\xb9/?:\xf3" +
	"\xb7\x89\xb5\x17X-:\xb1\x0b\xb5)\x9d\xfe\xec.l" +
	"\xd1\xbf\x1e\xb1\x14.Z3\xee\"k\xd2R^\x86\x1e" +
	"\\\xf5\xb2\xae\xeb\xbc\x8c\x0d\xfa\x88O\x9e\xd4\xf7\xca9" +
	"\xbf\x83\x91`1\x1b\xe3\xbb_\x86\x06\x1d\xd4\x1f8\xf0" +
	"26h\xc3\xa9\x0d\xf1i\x97=\xfc;S\x04\xbf\x02" +
	"\xba\xc5\xaeWt\x11\xfc\x0a~\xa0\xfd\xea\x95\xb3wx" +
	"/42\xf9\xba\xf8U\xd0\x8e\x84Wu\xef\xc6\xab\xc0" +
	"\xd7\xc3\x1b%Y\x13UY\xf0\xc6]/\xf8\xa5\xeb\xdd" +
	"\x82_\xf6_\xefV|>E\xbe\x0e\x7fd\xe5\xd7\xf9" +
	"\xc7\xf8=\x82F\xc4\x12B\x1c\xed\xadq\x1c\x17G8" +
	".\xa5wO\x8es\xf4\xb2\x12G?\x0bI!\xc4N" +
	"\x00\xec\x9b\xc1q\x8ek\xad\xc41\xc0B\x12\xc4:?" +
	"\x89\xe3,$\x8e#6A0~D\xbe\xd9\xae\xb9o" +
	"\xe6\xd5\xcb\x82Or\x97)\xb28\xbcJQ\x02\"\xfc" +
	"\xcb)\xfa\xad\xdezhDb\xa4\x11\xf9\x85\x1c\xe7\xc8" +
	"\xb3\x12G\x09\xd5\x88\xe2\x89\x1c\xe7(\xb2\x12\xc78\x0b" +
	"I\xb1X\xec\xc4\xc2q)c\xb28\xceQb%\x8e" +
	";-\xa4\xd13\x19^X\xe0\xe18.\xd2(\xcf\xe4" +
	"\x029\xa0\x092gs\x8b\x05\x9e0\x9c\xed\x99\\Z" +
	"\xef\x17\x9b4\xbd\xd9\xe1*\x954\xafX$\x05\x88f" +
	"\x1a\xaeLc\xb8\"\xa3\x95\x15\x1a\xad<\x0bIw+" +
	"AY\x8b|V\x83\xd7\x04Hg\x8e\x94X\x09I6" +
	"\x8enp\x04\xc0H;\xe2\x9bkGq\xd0\xabI\xc5" +
	"J\xadX\xa0\x89>W\xb0\x9c\xe3\x9a\x1f\xb9\xc8\xc0\xa9" +
	"\xf4\xc0\x11\xc6\xc0U\xa8\x8a\xcf\xe5U4\x18\xb8d\xc3" +
	"z\xe2\x08I\xe6H\xa3\x1c\xf4\x95\x8bj\x81\xcc\xa5\xbb" +
	"4\xc1]mtF\x81g\x18\x0f\xb4:\x9ayA\xd1" +
	"\xeb\x14\x03~\x9b\"\x07\xcc\xfcWh\xb0Zd\xea\xfb" +
	"\x03\xd8\xcfJ\x1cC,\xa4Q\x13\xd4JQ\x8b\x9ee" +
	"Q\xd6$\xad>\x1ak\xb5\x15\x05r\xc0/\xba5\xee" +
	"\x7f\xa3\x01~\xafP/\xaaml@\xae {\x14\xaf" +
	"$\x12\xd5\xd4\x84\x0c\xd6\x1a\xcc4\xb8\xca&\x0b>\x91" +
	"$r\x16\x92\xc8\x91tI\x13}\x14OE\"\x1b\xb1" +
	"\xf2\xd4\x88\xa0\xe4\xf5\x14\x8b0\xc9\xf9\xb2\xa6\xd6\xeb<" +
	"\xd5/\xdc\x1c>\x87dp\x9ck\x08\xb1\x12\xd7H\x12" +
	"a+>\x9fdr\x9ck\x18\xc0E\xc4\xe0,\xbe\x80" +
	"dq\x9c+\x0f\xf0\x12\xc0\xad\x16;\xb1r\x1c_L" +
	"\x9c\x1c\xe7*\x02|\x1c\xe0qV;\x89\xe38~\x0c" +
	"\xbe\xbe\x04\xf0;\x01\x8f\x8f\xb3\x93x\x8e\xe3\xc7\x932" +
	"\x8es\x8d\x03\xdc\x03x\xbbx;i\xc7q\xbc@T" +
	"\x8es\xdd\x03\xb8\x17\xf0\x84vv\x82I~d\"\xc7" +
	"\xb9\xaa\x00\xd7\x00o\x9f`'\xed9\x8e\xaf!\xe5\x1c" +
	"\xe7\xf2\x03>\x05\xf0\x0e\xc4N:p\x1c_\x8f\xef\xaf" +
	"\x03|&\xe0\x1d\xdb\xdbIG\x8e\xe3\xa7\xe3{\xa6\x01" +
	">\x1f\xf0N\x1d\xec\xa4\x13\xc7\xf1s\xb1_3\x01_" +
	"H\xccs\xe0\x15kEode\x94\x0br\xb5\xa8F" +
	"\x18\xc1]%\xa8\xc3\xbdB\x80#\x81\x88\xe4T\x059" +
	"\xb2\x92\x1a5\xc9'\x16\x09\x01\x8d\xb3\x8e\x96\x0dP\x95" +
	"\xca\x83\x9a\x98\xcf\xa5\xcbB\xb9\xd7\x90U\x9a\xa2\x09\xde" +
	"RU\xe2l\xf0\xe7\x08\xec\x15\x02Z\xa9*\x95s\x09" +
	"4\xea\x0f\x96{%\xf7(\x85\xb3j\x91\xc66NV" +
	"dQ\x92\x03\x1ag\x13dw\x846{2\x0a\xcf\xd8" +
	"\xd9wD\xb1\xa6TVzE\x9d_\xe2\"\xec\x9b\x04" +
	"\xa2\xa5\xbd\x958\xec\x16\x10\x12@\x12\xfb\x1e\x91_\xe7" +
	"\x17=\x92&)r\x91\xe2\xaeV\x82Z\xa9\xe4\x03\xbe" +
	"L\xd0T\xdc$\x92#\x9f\x11&s\x9c\xe3\x1e+q" +
	"x\x0dQ'\xcd\xe38\x87\xd7J\x1cu\x94\xa8\x0b:" +
	"9\xce\xa1Y\x89c\x1ap#AnL\x99\x0a\xe0\x14" +
	"+q\xcc\xb1\x90F1\xf4Q.[\x91GQ\xd3\xda" +
	"\x18\x10\xdd\x8a\xec\x098\x89\xe8\x13$Y\x92+i\x99" +
	"S+\xcaZi\xbd\x9f#b46J\xf0\x01\x16~" +
	"G\xebb@Q\xaa\x9dbM0A\x0ch&i\x0e" +
	"#9\xccJ\x1cE\x94 (\xc8\xa0D|h\x1b," +
	"\xce\xe58\xc7H+q\x94ZH\xf6$I\xf6(\x93" +
	"\"\x9c\xa6Q\x1b]\x83V\xa7UH\xde64nD" +
	"q\xbeO\xd1\xc4\xb2\x04E\x16M\xd3\x9caL\xb3M" +
	"\x13\xeb\xb4&/\x8dI\x11P|~!\x10\xd0\x05\x0f" +
	"|\xa0[\xe4\x03;@\xe8n\xb7\x12\xc7\xebT\xefw" +
	"\x83\x16\xf0\xaa\x958\xde\xa1\xb4\x80\xbd0N\xaf[\x89" +
	"c?\xcc\xb0U\x9f\xe1}e\x1c\xe7x\xc7J\x1c\x1f" +
	"\x82\xb0\x89Ca\x93r0\x95\xe3\x1c\xfb\xad\xc4q\x18" +
	"$M<J\x9a\x94C\x00\xbeo%\x8e\xa3 f\xda" +
	"\xa1\x98I9\x02\xe0\x87V\xe2\xf8\xfc\x7f\xa4Yx&" +
	"\xbb&I\x9a\xbb\x8a\xb3\x1a4\xa4\x9et\xe4,\xa4#" +
	"GH]\xe4_\x93\xc3\xff\x8aA\x19Q\x05\x8f\xa8\xe6" +
	"\x06I\xbdi\xc0`\x18\xb6X\x89\xe3Uj\xc0ve" +
	"R\xa3\x18\x1e\xb0\xdd\x85\xc6(\x92\xd0x\xed\x05\xec-" +
	"+q\xbco\x08\xe7\x94\x03Y\xd4 \x86$s\xca\xc1" +
	"rz\xbc\xe2C\xe3\x05\x8f\x1f\xb6\x12\xc7\x97\x16\x92-" +
	"\xb8a\x05\x87\xfb\x9b\xeeW%7%\xc0\xb0\xf9\xa6\xbd" +
	"R\x13}\xb0\xf2\x00\x0b\xb1Q6`\x94<\x12\xbc\xaa" +
	"(x\xea]\\\x82\xe25\xd0\x9a\xa0\x80{\x7f\x9b6" +
	"^P\xa0\xf2\x14E\xe5\xcc{\x7f\x16k\xe3\xcd2\x14" +
	"\x82l\x8f\xa2\xa8\x921\xd9\xd1\xfd\x8c|\xd8\xda\xdc\x87" +
	"\xb3G\x14C/M\x82\x0c\x16\xef\x9dV\xe2\xa8\xa2\xbe" +
	"*f\x19\xd2-2m\x12Pz\xac\xc4\xe17\xa6\xcd" +
	"\x07X\x95\x9584\x0biP\xbc\x1ez[\xca\xae\xf4" +
	"\xd1?\x1bdqR\xd4\xefrA'\x8f\xbd\xfd.\xbf" +
	"0I\x0e4#\xef{YHv\x00\x09\x0cm$\x92" +
	"B`\xd2F\x9a\xfdDB\xd1\xad#b\xd0\xb1)\x8b" +
	"$\xbdV\xf0\x06#\x9d\x88\xda\x97[W~\x8aD`" +
	"\xc6@\x95\xe4\xd7-\xa2\x04A3O\xcf\xe3\xc6\xa0\xa7" +
	"\x80\xc0\x05\xd0\xb7\x8d\xe3\x1c~+qL\xa1\xa6\xa7~" +
	"\xb1\xb1\xa7D\xc4\xd0\xacg8\xce1\xc7J\x1cK," +
	"\xa4\xb1RU\x82\xfe\"Q \xe1oZ\xeb\xfc\xa4\x13" +
	"g!\x9d\xb8\xa6\x7f,IW$Y\x8b\xa8\x0c\x8d\xaa" +
	" y\xa0\xb9$\xdc^b<k\xfa[\x89b\x8bz" +
	"\xb4\xd5ap\x09\xf5E\x92\\\x9d\xabx\xeaoUq" +
	"\x1d\xc2 \xf4\x89\xe8\x80W\x91B\x8es\xf5\x02\xe5\xa7" +
	"\x1f1\xd8\x94\xef\x8bJ\xd1\xb5\x80\x0f \xc6P\xf0\xfd" +
	"\x91\xbe\x1f\xe0C\x881\x1a\xfc`\xc4o\x02<\x8f\x18" +
	"r\x99\xcfA\xdcP&C\xa2\x99/@|$\xe0\xa5" +
	"\xc4\x90\xce\xbc\x03qCiLH\xd0\x95@\xb3\xd2\xd8" +
	"\xbe\xbd\xae\x04\x0a\xa8\x04\x1aJc\x87\x0e\xba\x12(!" +
	"n(\x8d\x1d;\xeaJ`\x0d*\xa5^\xc0\xeb\x88\x85" +
	"4\xea\x0b]\x97Y&\xf9\x14f5!X\xe9\x13e" +
	"\xad?E\x12\xc62\x19\xd8\x0d\x0cl\x00\x03\x1bHc" +
	"R \xbfV\xf1\xd6J\x9cU\xae\x8c\x80\"@\xe2\x08" +
	"\x95KP\x82~\x13Z$r\x09\xa0\x99\x86P[\x95" +
	"\x10\xa8\x8a}\xf3wI>\xbfW,\x16\xd3\x03\x01\xa1" +
	"2&C\x0d\x96j\x1f+q\xdcd!\x8d\x01M\x95" +
	"\xe4\xca(9\x9f\xeeV\xbc\x8a\xda\xa2\xbc\x01-4\xf4" +
	"\xf9Qb\xfa\xa4\xb2\x90\xde\xe1\x8f\xb0\"\xb1\x16r\x9c" +
	"\xd3j%\xaeD+\xc5\x89\x1d\xac`^\xb4\x07\xdcn" +
	"\xa581\x05\xc8]\xc9\x80w\xb3F\xc4&\xdf\xd5\x0a" +
	"\xd6\x8b\x1d\xe0+\xac\x945\xd2\xdd\x0a\x0c}\x09\xe0\x03" +
	"\xac\x945\xd2\x1f_\xd3\x0f\xf0\"+e\x8d\x14Xs" +
	"\xc1\xda\x01\xfc\x1e+e\x8dL\xb0\x02#\xde\x09x\x9d" +
	"\x95\xb2F\x82\x88k\x80/\xb4R\xd6\xc8\x02|\xcf\x1c" +
	"\xc0\x97\x00\xde\xd1\xa23\xe2\"\xfc\xeeB\xc0\x97\x03\xde" +
	"\xa9\xbdn\x8d,\xc3\xf7<\x06\xf8v\xc0\x13;\xd8I" +
	"\"\xc7\xf1[\xad`\xbdl\x01|?\xe0I\x1d\xed$" +
	"\x89\xe3\xf8}H\xff\x0e\xe0_\x02\xde\xb9\x93\x9dt\xe6" +
	"8\xfe\x04\xd2\x7f\x0e\xf8\x05\xc0mV;\xb1q\x1c\x7f" +
	"\xde\xda\x93\xe3\\?Y\xad\xc4\x19g!)\xc9qv" +
	"\x92\xccq\xfcE\xebb\x8es\xc6\xc1\xe0\x03\x9c\x12o" +
	"')0\xf8q0\x9aq\x80'\x03\x9e\xda\xceNR" +
	"9\x8eOB\xbc=\xe0v\xc0\xf9\x04;\xe1aR\x10" +
	"O\x04\xfc\x12\xc0\xed\xed\xed\xc4\xceq|\x978Xv" +
	"\xc9\x80w\x03\xbcK\x07;\xe9\x02\xb3\x15\x07\xad\xbf\x04" +
	"\xf0^\x80\xff\xa9\xa3\x9d\xfc\x89\xe3\xf8\x1eq0j\xdd" +
	"\x00\xbf\x16\xf0\xb4Nv\x92\x06\xe2\x0a\xf1+\x00\xef\x03" +
	"\xf8%\x89vr\x09\xc7\xf1\xbd\xe3&\x83\xb8\x02|\x00" +
	"\xe0]\x13\xed\xa4+\xccn\x1c\x8cB?\xc0\x87\x00~" +
	"i\x92\x9d\\\x0a\xe2\x0a\xf1\x9b\x00\xcf\x03\xfc\xb2$;" +
	"\xb9\x0c\xc4\x15\xb6g\x18\xe0w\xc6Yt\x0b\xcf\xa4\xbe" +
	"4\x06\xaa\x14\xd5l\x0bx\x15\xb9\xd2D\x97>\x99V" +
	"\xd0\xb3+\x94J\xa7\xe8\x09\xef\x9f\x80\xc2\xaeY\xa1T" +
	"\x8ePEQ\x86\xe7\xa2\xff\xd4P\xa1T\xe6\xc2\xf6\xd7" +
	"\xf4\x89bIv{9\xab\xe4\x0f\xff\xad#\xf57\xa1" +
	"\x8e\xf9\xb7\x86JU\xa8\x95\xb4\x88\x82\x8a\xa6)(\xb4" +
	"\xb4~\xa5\x0a\x92<\xbcJ\x909\xab\xbb\xc9w\xe1o" +
	"yAU\xe0l\xa8\x19\x99\xfe\x1a\x90\x95I\xcd=\x09" +
	"\x7fk\xf6\xc9\x84@u}\xe4\xfb \"\xf2\xeb\xfc\xc5" +
	"$\xe8\xd5$?:P\xc2\xedM\x0f\x08\x15\xe2\xf8\xa8" +
	"_\xe3\xa2~\x95\x85\x7f\xd9|B]\xe4GcP\xf6" +
	"\x88\xea$E\xe5\xac^O\x18l\xf0\xc1\x00J~\xe3" +
	"7\x0c\x9a\xf1\x1b\xdb\xe1\xaaRT.\x1b\xe6Y\xcc\x8c" +
	"2\xb0\x0b<\xa3\x82\x9c\xcdWN\xf9\x01\x10nbw" +
	"#\\\xa2H2g\xd5(\xc5)rN%V7N" +
	"\xd1\xad\xe8\xc8q\x89\x82\xea\xae\x1a\x11\x94\xac^\x0f\x08" +
	"N{DbO\x05M\xb1\xceJ\x1c3)\x89==" +
	"\x93\xd2Y\xc2\x8a\xcc,\x90\xed3\xad\xc4\xb1\x90Rd" +
	"\x16\x008\xdfJ\x1c\x8fQ\xf6\xd4R0\xa3\x97X\x89" +
	"c\x95\x854@s\x049\xa2\x1dG;E\x1a\x05\xa1" +
	"\x04\xf5\x19\x9a\x93\x80\xbb@\xc2\xd3\x18\xc3[\xd2z\xe7" +
	"s\x85\xc9\x82\xa0\x8eE\xcb\xd7\xa5\x09\xaa\xee\xa7m\xc6" +
	"'\xd1\x8c\xd6\xde\x82\xf3\xd7'\x8e\xae\xc8\x13t{\x8b" +
	"\x1a\xd0\x0c\xd6\x80f\xb1\x06\xb4'\xc79\xa6Y\x89c" +
	">5\xa0s3\xa9Q\x0e\x0f\xe8\x82\x0cC]\xb4U" +
	")\xc1\x08\xf7d\xfb$\x99\xf2\xec$x\x84\xc8\x82H" +
	"\xf7)\xb2V\x15Q\x80\xebEAm\x83\x17\x07\x98\xc6" +
	"\xad\xf8l0u&\xcd\xd7I\xd9 \x11\x17K\x16e" +
	"\x83\x84\xba\xe7sRn\x97\xb0\x87%\x98k\xa8\xc8\x8d" +
	"\x8aV\x05\xcd\xa0\x85a\xb6\xaf>JU\xaf\x84\x86\x88" +
	"5\x12G\"\x1c\xd4\xa0TTHn\xb1\x0d\xbd)\x11" +
	"5t\x1e\xe9\xfa\xebM\x11\xa5\xa1\x1e\x9d\x8f\x86\xb3/" +
	"\xac5L'\xb0QL\x01|\x0e\x89t\x88\x9f\x85\xe4" +
	"\x11__\xb8O\xfc\x02Tw\xe7\x00\xbe\x04\xd5W\x8b" +
	"\xae5,Buq>\xe0\x8f\xa1\xfaj\xd1\xb5\x86\xa5" +
	"\xa8\xa6.\x01|\x15\xaa\xafV]kX\x81\xef_\x0e" +
	"\xf8\x06T_\xe3t\xada\x1d\xe2k\x01\xdf\x82\xeak" +
	"\xbc\xae5l\xc6\xf7l\x02|'\xaa\xaf\xedt\xada" +
	"\x07\xd2o\x07\xfcuT_\x13t\xada7vk'" +
	"\xe0o\x11Jk\xd8\x83\xefy\x1d\xf0\xfd\x80'Zu" +
	"\xada\x1f\xfa<\xdf\x01\xfcC\xc0\x93\xe2t\xad\xe1 " +
	"\xf6w?\xe0\x87A\x0d\xf6\x8b\x1aF\x038\x12\x99\x93" +
	"\x86\xa0Z)\xcanC:\x0bn\x8cy\xe0<\x86\xa7" +
	"\xda+\x04\xb4J_D\x0b\x05\x89\x17\xb5\xdee\xd3\xde" +
	"\x09\x18H\x0f\x8ex\xa3\xe8\xdc&\xb9\x00\x98*\xb8M" +
	"\xf2CD\xc7!E\xd7\x10\x94\x85ZA2\xde\x15\x10" +
	"e\x0ddO\x94\x0b?\xcc:Q\xce\xac\xecJ\x1f\xd3" +
	"\xb7\xd5\xac\xfdjsiA\xd9$|@r&Z\x89" +
	"\xe3\x12\x0bi\xf4\x04UA\xe7\xd068,F\x80i" +
	"X\xa8HDn\xdeA\x18\xf1\x0f\x16\x1a\xbe\xc0\x88\x0f" +
	"\xd4Qf\x84{\xcc\xf2\xaf^\x096\x99\x00\x1f\x86\x03" +
	"d\x81\xb3\xfa\xda\xe0,,U\x05wu\xa9\xa0&T" +
	"\x8aZ\x0bC\xa0Gk\xa4\xb6\x05K\xf2D\xaf\xa8\x89" +
	".\x7f\x82\xe8\xf5\x9a,\x11'\xcb\x12\xc9\xa5-\x11\xbf" +
	"\xe8\xf5\xba\xbc\x0aG\"\xa1\xb8\x86@\xd0\xed\x16\x03\x81" +
	"\xb6\xcd\x81\xecq\xf9\x13\x84I8\x0b\xd7F\x84K\x07" +
	"\\\xfdq\xb0J\x92i\xe1\x92\x84x{\xc0\xed\xb4q" +
	"\x9c\x82x\"\xe0\x97\xd0\xc6q\x17\xc4\x93\x01\xefF\x1b" +
	"\xc7]\x11\xb7\x03~\x05m\x1cw\xc7U~\x09\xe0\xbd" +
	"@x\x85l\xe3\x1eH\xde\x0d\xe0k\xe9\x00\xc9U\x88" +
	"_\x01x\x1f:@\xd2\x1bmf\xc3\x86\xef\xd0^\x17" +
	".\xfdQ(DlxP\x98\xc6\xd1\xda\xd3x\xe3\x87" +
	"$\x8f\xa3\x7f\x8cg*Y\x0dU\xa2\xe0\x91\xe4\xca\xc8" +
	"\x1fi\xf1o\x03k:2\x19>\xa1.\xc7\xebU&" +
	"qV\xd1p\xf5\xa9\":\x974\xce&\xf9\xda\xb2'" +
	"\x14\xdd:\"\xc7\xef\x17\x85t\x15\xd4.\x13\xef\xe4\xb2" +
	"<~=\x0d\x86j\xc0o\x1an\xc8\x04oEe\x1b" +
	"4\x07X\x10\x186\x88\xc1\xa5\x95\xdb\\\xd8\xb8A\x94" +
	"5U\xa2\xe3\xc6\x91\x8a\xaa\xb1*\x87\xa0\xc2{\xc5@" +
	"\xa0@\xae\x15eMQ\xd3\xeb]^E\x8b%\xecX" +
	"h\xac#[\xc0\xabh\x86\x0c\x0d\x96\x17\xc8\x1e\xb1\xae" +
	"M\xab\xd8\x15\x125m\xfdr\x94\xa6\x00\xbb\x89Y`" +
	"\xb5M=.\xf1\x0a\x09\xf5\"\x86]/\x89\xb4bY" +
	"\xae\xa1\xcbFZ\xb1\x02\x84\xcbr+ql\xa0\xd4\xb9" +
	"u@\xb9\xcaJ\x1c\x9b(un#\xcc\xe9Z+q" +
	"l\xa1\xd4\xb9\xcd\xd0\x89MV\xe2\xd8I\xc5\x1bv\xe4" +
	"\x1a~z\xb3\xd2\x8c\xb1\xf8\xa2\xe8\xad\xafAS\x8ah" +
	"U:\xdd'\xc99BKJt\x03l\x94\x01\xb1e" +
	"\xe9FyZ\xe0q\x97\x18\x08H\x8a\xbe\xc3\xb4\xe6\x12" +
	"/3\xa6\xa6i\xd80\xa0\xc1:\xa3\x03\x1e\xcc\xcfO" +
	"RT\xaf'\xf4\xfd\xc2\xb1\xa5N1\xe0Wdk@" +
	"lAq\x0fh\x82\x16l\x8bWS\xd4\\\xa2Z+" +
	"\xaa\xb7J^MT\xcdq\xca\\\xc3o\xddP\x81\x14" +
	"\x01\xb3Q\x1aS(\xa1@\x13}-%b\x18)," +
	"Y\xf4\xd6\x1cb&\x87\xdaL&\x86)\xcf\"\xdc\xeb" +
	"f\xd21b\xd0\x8d1G!'\xa7\xd9xm/\xd0" +
	"\x0d\x84\")\xa0\x19\x92&R\x88!V\xff}:\xca" +
	"\xbc\xb6\xe6T\xb0T\x02\x8f\x14\xe2$\x8ek\x12\x1bk" +
	"\xfe\xf39\xaa\xaaLj1\x81!\xc5\xc8`\xc8\x88\xce" +
	"`\xb0\x843\x182\xa23\x18\xac\xe1\x0c\x86\x8c(g" +
	"tx\x7f6;\xa3\xc3\xfb\xf3xt.S\x19\x0c\xed" +
	"\xc2\x19\x0c\xf0\x9e;\x01\xaf\xa2\x9d\xd7\"\xe9\x19\xe5\xa4" +
	"\x0e;\xaf%|\xbf\xe1\xa4\x0e;\xafk\x1072\x1b" +
	"\xc2\xce\xebz\xd4\xda5\xc0\xa7\x81^\xd0IW\xfe\xa7" +
	"\xa2\xb1\x10\xb1u\xa2\x02\xc3\xb6\x80\xea6v\xed\x80\xea" +
	"\x1eG\xff0\xfc$\xb5\xa2Wq\x87\xc2ma\xcc+" +
	"\x04ewU\x8e\xcc%Tz\xc5\xc8c\x9a\xe4\xd5\xc2" +
	"?\x12\x04\xd5\x1d!\x0f(A\xd5m\x8a\xa52Rj" +
	"\xcc\xe1?\x9f\xe2\x11\xbdm\x0d\xad\x17\x00\x81\x1a\xf4\xa7" +
	"k\xc3\x85&\xc1\xf5\\Vp\xddi\xac\xd0\xb0u\xeb" +
	"\xc85\xf2\xa7tu@\xa2\x9a%\xa2o<\xcaj\x0d" +
	"a\xb1\xefM\xceP\xf4F\x0f\xde\x8c\xf1\xdb<\xa1(" +
	"\x14\xe5k\xc82|\x0d\x11WC\x19\xe5U\x08k\xfa" +
	"s\xcb\x0c\x07B8\xf7&eQ&\xed\xbb\x09\xc5v" +
	"\x97\xc2\xae\xbb\xd0J\x1c\xcb\x9b\xda\x04z>\xd3\xa8h" +
	"\xfd\xdf\x8bM\x8c\x06\xd31jE\x92\x8d\xc4u=\x09" +
	"\xcc\xa6\x0a\x92\x87$\x1b\xa5\x8fL\xb9a\xb1d#Q" +
	"\x09\x8a\xechi$XZF\x85\xe8\xc2\x03\xe1\xcb2" +
	"\x02\xa3\x91\x81\xa8)3\x9c\x12\x0d\xe8q\xa0Y\x0c\xbf" +
	"\x1a\xdd\xbf?\xbc\xbdE\xef\x12B\xb5X\"\xea\xa9f" +
	"\xbd\"]9\x0d\xb3r\xcaJ\x1c?Q\x1cx\x168" +
	"\xf0\x8c\x958.P{\xc4y\x98\xaa\x9f\xac\xc4I\x89" +
	"\xa3\x94\x8b0\x12\xbfX\x89+\x8e\x16F\x04\x8c\x02\xc7" +
	"\x05+q\xb5\xa7eQ<\xc8\x1c'\xac\xfdDZ\x14" +
	"\x99M\x97\xb0(JB\x11b\x98.aQ\x94\x82x" +
	"\xc4t1\xb9\xf8\xd8\x89Nn*\xfdD\xac\xd3\x82\xaa" +
	"\xf1\xdb/j\xd1RH\x9aLI\x10\xda/\xee\x93\xe4" +
	"<_\xa5\xf1S\xa8\xa3~\xb6\xceU9\x1e\xd0{\x83" +
	"\xaax\xab$K\x81*.\x16+\x80\x8a\xfb7L\x92" +
	"\xe4\"%`4\xc7\xaf\xb4-\xbeZ,\xaa\xee*A" +
	"\xd6\xf2D/j\x0b&Q\x94\xc9\x12E\x85,e\xa1" +
	"\xd0P\x16\xd2e\xbf\x9b\x92D\xfa\x92\x95\x9a\xa4U\x04" +
	"\xa2\xd5\x89\x18ttQ\xc3tW.\xa6\xccH\xda\xce" +
	"\x96\x02\xae`E\x85D\x9b\x04\x0d\x98\xf2\xda\x96\xb5\xa2" +
	"\xbbr]\xa2\x0d\x15u\xd3F\xee\xa47\xec\xf0>n" +
	"\x0e\x12\x873\x11\x1dHn\xec\xcb\xe1L\xc4\xf1\xc8\xf4" +
	"\xa5\x80\xdfCg\"N@\xdc\xd8\xaf\xc3\xb1?\xf3~" +
	"\x1d\x8e\xfd\x89\x88S\x99\x88$\x9c\x89\x08\xb8\x07p?" +
	".\x9ev\xfa\xe2\xf1a;#A\xe5\x94\x0e\x09\xfa>" +
	"\x1eD<\xb2_G2\x11\xa7\"\x1e\xd9\xb0#\x99\x88" +
	"\xb3\x10\x8fx'\x1b\xcb\xc5JI\x96%\x99#\x95$" +
	"\xd9\xb8\xcb&$q\xf5t\x9bh\xbehm\xa1\xda@" +
	"\xd36~P\xeag\xb4\xd6\x10e\x96\xf9$\x19\x13}" +
	"\xe8\x0f\xf9\x84\xba\xa6\x98$\xa3\xd80\xd15\xc1Z]" +
	"T\xf9\xa84\x96(\x01\xf4\xdbQ\xdbf3:~\x10" +
	"\xf6\x13\xda\x8c\x8e\x14\xd46)\xb7\xcd\xf2\xe6p\xaf\xe4" +
	"\xae\x1e]>1[tk9\xba\x96K\xd9\x8f\xb0>" +
	"\x1e\xb3\x12\xc7Zj}\xac\xceb\xd9\x8f\x19,\xfb1" +
	"\x83e?\x02\xb8\xc1J\x1c\xdb-\x84\x84\xcc\xc7\xade" +
	"\x86\xf9\xc8J<\xce\xf6\xa8\x8a\xdfXq6\xc5/\xca" +
	"\xec\xe9\x93\xdc\xd4\x96\xaf\x94O\x14\xdd\xda\xa86\xba\xfc" +
	"\xf4\xedzt)\xc93\x89\xb4\x8cV\xb4+C\xa4e" +
	"\x18\xeaU4C\x05D\xad\xbc>Z\xe5\xb3\xf9\x14\xcd" +
	"\xd3\x86\xd4J\x94%\x05r:fz7o\xd9\xb2\xd2" +
	"\x8aL\x0a(;\xaf\xa8\x8dy\xac\x81\x98\xac\xc4L\x86" +
	"\x0e\x9a\x15\x1a\xa4*\x0bit{%Q\xd6\xcc\x89\x15" +
	"\xd1\xe7\x0c|\x941\x9bl\\\xb0\x16+\xa3\xeb\x0e\x01" +
	"\xb56\x1b,\xcd\x0a\xc54r\x97\xb6<rV)\x92" +
	"\x86b\xf3+\xaa\x16\xbb\xec\xcf\xc9\xc9)\x97\xbc\x92F" +
	"\xeacI\x91s\xd2Z_8\x14UF\x87\xa2BK" +
	"+\x98Ai}\x81j\xc9\xeb\xa56\xa4r! \xde" +
	".x\x83t\x1e\xafW\xf2I\xda\xed\x82\x97\xb3R\x89" +
	"eQ\xde\xaf\xd6S\xe5rP\xa36\xa7QeE\xb9" +
	"`\xc3;Xo\xc4\x8d\xf4\xaa\xb0%\xda\x17s\xec\x0d" +
	"\xd7l\xd8\x12\xed\x8f9\xf0FzUX\xf9\x1b\x8c\xf4" +
	"\x03\x00\x1fFk\x7fC\xd1\xc5kX\xc0a\xf5/\x1f" +
	"w\x12\xc3\xd2\x0d\xab\x7ffK7\xac\xfe9\xf0\xfdF" +
	"\x0e\x7f\xd8\x12\x1d\x83\xef7v\xd4\xb0%:\x01\xf1\xc8" +
	"\xce\x99\xad\xdby\x116\xd5M\xc1f\xe2\xc5\xa0i\xab" +
	"A\x9f\xc8\xa5\xcbZ\xb1bD\x95+\x14x&lM" +
	"VI\xdaHQ\xf0\xe8\x19Q\x14X\x82I\xb7\x86\x95" +
	"\x1a%\xf8\xd21 `x2\xe1W\x91X\xcbY\xa9" +
	"\xcf\x8b\x15\x15\xa2[\xbb\xd5\xcbY\x856\xe8\x99\xc3q" +
	"i2\xb6\xa4\xd6\xb6\x89T\xd66\x91\xca\xda&RY" +
	"\xdbD.c\x9bpR\xdb\x04CdP\xb9\xc7\xf5M" +
	"\xb3\x90\xcd\xce\xfaFA\x96|\x82&)\x1c\x91c7" +
	"l\xd1\x82\x13\x0d\xd3\xd6\x9a\x93c\x12\x80N\x96\x00\xcc" +
	"em\x13T\x04\xabQ@)Q_@[\xdd\xb28" +
	"\xc9I\x1f\xaa\xd0Ut\xaf\xc8Y+\xda \x81J\x85" +
	"@5X\x9f\xd9\xa2Z$5q\x190\xc5u\xb9\xb1" +
	"\x7f\x85\xc5\xf5\x18\xc0J\xad\xc4q\x8f\x854V*\xfe" +
	"*s\xbe\xb3nj\x0eW\xb8\x04Jl7z\xe1\x8b" +
	"\x8a$s\x09\x9a\xa8\xc6>\xcaa\xad\x04\x95\x12-\xec" +
	"\xc3\xfd\xff\x9fbb\xf2(\x17)\x95\x92l\xf6uf" +
	"\x1a\xee\xe4tM\xa9\x16\xe56\xa8:\xaa\x12\xf4\x0f\x17" +
	"\xe4\x04\xb7\xe8\x8d\xc5~\xcbd\x9c\xd3\xa0\x1c\xc0\xe9\xa0" +
	"P\xf4\x8f\xf8Qd:\x83\xa8\xb9c3-\xb7\xad@" +
	"\xaeM\x904s\x84\xab\x9ce\xb5\x95S\xbeWI\xae" +
	"\x954Q\x1c\xc5%Dk8\x80\xaaM\xd0\x98\xf5\x9e" +
	"\xfc:\xbf\xa4\x8ac\x05\x15\xcf\xcd\xc4bJ\xce\xe38" +
	"\xc7\x00+q\x0cc\x0b\xacF=\x03\x86}\x1a\xa7\xf5" +
	"\xfdX_ \xe6\xfdxrx\xdf\x1dF\x19\x94Cq" +
	";6\xb2\x94\xc3\x06e\x0e\xe2\xc66\x1a6(\xf31" +
	"Rjl\xa3a\x83\xb2\x18\x03\xb4\xc66\x1a6(\x1d" +
	"$5j\x1b\x0d\x1b\x94c\x10\xa7\xb2\x9a\xdb\x85\xb3\x9a" +
	"S\xa3\xb6\xd7\xf6D\xdf\x8eM\xdbk\xc4\xa0\x14\x117" +
	"\x0c\xd0\xb0A\xe9\xc3\xf6D\x1c\xc9\x8d^I\xae\x16=" +
	"E\x12\x97\x1d\xd0r<\x1e\xd5\x14\xfd0\xadW\xb3+" +
	"\x8c\x9d\xcef\xde8\x8c-\x85\xb5\xe1\xb0\x17\xb7\x0e\x96" +
	"\xd6sV\xea\xe8\x92)\x10\x1b\xab\xf2?VL\xf7\xba" +
	"\x15\xfd\xcc\x05{\xdfao;\xe1\xc4\x89LC\xba\xb7" +
	"lh7\xe8\x86v\xc4\xa0\x0e\x9d\xcb\x8c\xdd\xed\x02Z" +
	"Hn\xb0\x82T\x98N\xf5\x94\xb1\x8eAA\xb3vZ" +
	"\x89\xe3-Jz\xef\x99\xc8:\x06\x95K\x1f\xeb\x09I" +
	"\xef\x03\x85\xaccP\x85\xc6\x89\xa7\xc81\xa8c\x00\x1e" +
	"\xb5\x12\xc7)KX'\x8a\x9e\x17\x93\xd6V.\xa8\x9e" +
	"b\xc5#q\xb6\x0a\xc9\x08\xd27\xa0\x8aE9\xabX" +
	"Y0h\xc2\x80\x8d\xf4?=W[r{\x89K\x13" +
	"\xb4@:\x9e*3\x8df\x86\xb1G\xb1\x8fH\x85&" +
	"~w\x065\xc2a\xf7\xf1\x1e'5\xc2a?\xfa\xbe" +
	"\x0cj\x84\xc3g\xa4\x0edP\x07\xa7\xc2g\xa4\x0ef" +
	"\x19\xc3\xde\xc2\xf9\xd1(W\x0c\xd3WC'P\xd9\xc0" +
	"\xd8k\xcd1\xd9\xea\xc1\xf6l-2X\xad\x05\x7fs" +
	")\x1b\xd9\xaf\x8a\x15R]\xe4@\x91_\x09h\xd4\xef" +
	"\x18\xd6\xa8${\xc6*A\x99x\x9a71\x99e\x08" +
	"\xac\x9a\xc2T\x1db\xecq\xbe\xacY\xd5\xfaX\x02B" +
	"e\x0cc<\x93\x0e\x08\x99\xccI\xfcm2\x1d\xd3\xd1" +
	"\x09\xda\xa2BG\x05\xe3\x9dbMP\x0ch\xba)\x81" +
	"g$\xd3\xab\x04Y?\x7f\xd1\xdaa\xbf2\x96XH" +
	"\xa5\x8eL\x86\xc5\xc2\xdeT\x9a\x93Cba_*\xcd" +
	"\xc9!\xb1p \x97\xe6\xe4\xc4\x10'g\x18\x9c\x1cK" +
	"\x88\xa4\xe5#\x8fM2\x83pFm\xc65\"\x1c!" +
	"\xb6\x98\xd8I\x04Q_\xaa\xda@\x12\xb7\x95\xa3\x0c\xf1" +
	"ds+\x1e1v\xa3\x8f:\xce\x8a\x81\xab\xf4\x98M" +
	"\x87\xcc\x16\xa2\x8d1yz\x1atC\x82r\xf5D\x8a" +
	"?\xc7\xea\xea)\xd5\xcf\x99\xe7d\xeb6U,)\xc0" +
	"N#\xb2\x16nvMf\xc8\xef2\x87J\x01\x9e\x95" +
	"a\x04(\xc3\xe7\xd9i\x9b\xadQ\x93\xc0\x08\x0a\xcaT" +
	"b^:`T\x7f\"\xc5\xf5\xf5\xfe\xb4\xf1x_\xa8" +
	"\xc6\x83\x9e\\\x12\xd0\xf3\x8e\xa8\xa0j!\x95\xab\x1d\xee" +
	"\x1d\x9d\xfc\x1e\xee\xdd\x02g(~\xba\x81\xea\xdd:g" +
	"\xc8.z\xdd\xc8\x04\x8e\xda6Z\xa8\x14\xd14L\x83" +
	"\x09M\x84\xeax\xa4jMx\"5\xd1\x07v\x11E" +
	"\x14\xd2\xd3\xdax\xfaz\xacX^\xe2\x15\xea\xf3kE" +
	"\x15\x05MH\xdep-dl\x060\x8b\x86\xbd\x0d\xb7" +
	"\x1es\xd3\xf3\xfe\xc7\xa4\xfb\xc3\xce\x10J\x8a\xad1\x86" +
	"+<\x01\x91M\xf6(\xb5\x1d\x1fQ\x8d\xe3\xc5\x91\xed" +
	"\xf8\xc4b\x8es|i%\x8e3\xd4v|z\x0d\x15" +
	"@\x0do\xc7\xe7\xd7\xd0A\xd1\xb0\xbe\x1dO\xe6\xd1Q" +
	"\xceF\xafG\x91sj\x05\x89x\x85r/4;\x81" +
	"\xdeK\x83r\xb52I\xce\xf1s$hN\x13\x82\x07" +
	"G\x04\xabK8\xd3\x91M\xc0\x8b%5H*\x05/" +
	"\x8e\x021\xff-\xa0\x11\x9f\xa2\xa8M>\x06\x7fu\x06" +
	"'\x0aD\xad\x96\x04\x99\xf5\xd7R\xa1Z\"\x81\xaa\xf0" +
	"\xa1\x8a\xd87\xc0\xb1\xa2\xa0\x0e\xaf\x12dkeL\x07" +
	"\x91\x0bY^\xd6L:\xb6ne\xc4\xd6\xcd\xda\xbaO" +
	"\xd0DU\x12\xbc\xcd\x1f\x06\x9c$\x0a*\xa6>\xb5)" +
	"\xb2\x8e\xbe\x8f<E\xd1k\xa8P}\xc9b\xf5Ee" +
	"\xf5%\x8b\xd5\x97B\xa3/\xa6C\xdf\x8d~\xc9]\xed" +
	"U\xdc\xd5\\:\xee\xf5\xcd%\xac\xfc!\xd5\xf5vQ" +
	"\x13UAv\xa6\x8b\x93\x04\xd5\xd3|\x94\x9a\xb5\x815" +
	"\xb8\xbd\x82DG,0\xa56\xd9\xb8y'\xd6\xf2<" +
	"\x18\xd3\xc9\x13}\x09J\x13gBF+\x81\xf2(\xf1" +
	"\x1cv\xf7\xc6\xac\x0d\xea*O\xa9`S\x9b&\x90;" +
	")q$\x8b\x93J\xe1\xd5\xd4\xb6\x11\xc3\xcb\xab\x04Y" +
	"\x16\xbd\xc5\xd9b\xe44+\xe5\"+k\xc5E\x16\xde" +
	"\x09\xd6\x15R\xce\xb0\xf0N@\xbb_#;\xc1\xd6\x19" +
	"\x94\x82\x16:\x10\x92\xb2+\xd705B\xdbCt\x92" +
	"}v@\x94=\x94\xf3\xcf+\xc8\x95A\xa12:\xb9" +
	"\xb3J\x90G\x05}\xd1*g\x81\\D\xc2\xb4\x7f<" +
	"\x13\x09\xa7^\xf7\xda\x96\x04\xcb\xbdR\xba{T\x88\x09" +
	"Z\x0b\xedeQ\xfaMxi\x15g\x18\xfaMK\x9c" +
	"a\x93\x15\xad\x0d\x8d\x0c\xd7MR\xf53\x01m.\xe2" +
	"\x10\x9d\xeb\x94\xad'T\xc6\xeeIJ\x1f\x13\x10\x9b\xf8" +
	"\xb1\x99\x1e\xc0\\\xd6\x98\xf4\xa4\\\x80\xe8P\x88\xccV" +
	"\xc8\xab\x1dI5\x17eO\x9bN>\x0dW|>\xc1" +
	"*{\xda\x9a\xdcbJA6Ei\x98\xf3\xa1\x0b7" +
	"ce\xa9.\xd1+\xba\xb5\xfc\x9a\xa0\xe4o\xc1\xd7\xc7" +
	"<'\xde\xfc\xd6\x90l\x14\xaf\x8eUv\xe5b\xe9\xa5" +
	"\xe1U\xb6\xb0\xc5tE\xa4!\x07\x0b\xa9\xb2%\xe1\x96" +
	"\x1c\xc9\xa0\x9c\x1e\xe19:\x96E+\x1b\xa1-\xe1D" +
	"\x96\xe1\x09\x89XL''R\x1aH\xd8b:\x0d\x1f" +
	"\xfa\xd6J\x1c\xbfP\x8e\x94seT\x0aW(\xce\x96" +
	"r\xb1\x8cRK`\xc7\xd0$9\xe8\xa3\x06\xc2VI" +
	"\x15;\xc9\x0eH\xdeZ\x83S\xb3\xdd\x8a\xdfO1n" +
	"\xe4q[.\x1d\x07\x817\x00@\xefC\xfa\x8br\x05" +
	"\xceJ\x11\xea\xaf3\x81\xad;|MI\x18 :r" +
	"\x85@({\x88}\xfa4\x92\xc0X\xc8J`,\xa4" +
	"\x13\x18C\x12vQ.\x9d\xc0ha\x1c>5+\x1c" +
	"\xfeP\x8b\xf4\x9av\x91:\xf1!>\xa2\xf3X\x9b\xfc" +
	"\xb5M\xb1/ZLT*\xa1A\xd1\x04\xf4x\x03q" +
	"\x0c\xfaX\x95\x92\xe3\xf5:E\x9b\x16T\xcd\x91\x9bK" +
	"YG\x12\xe6\x19A\x9a\xf0\xb6\x14\x15\xa3\x09\xab\xc7\x9b" +
	"\xd7P;PX=\x8erv\xc5\x13\x9dcwg\x85" +
	"\xd4\xf0\x0f\xa3\xec\xe0\xb0\xb1\"\x13\xb1F\xaf\xe6@q" +
	"\xa6W\x92\x0d\x99\xad\x13\x06$\"OVd1\xa0\xa9" +
	"\x090~\xec\xe4\x04\x9d\xd60t\"\x17M\xc6j\xb1" +
	":\x05\x093D\x13D5\x10Crh9+94" +
	"\\5g&5^\xf4Y\xe8\x06\x8f\xa8\x09\x927@" +
	"\x92\x8d\xb2\xb8!\xdea\xc6\xee\x9a\x1a\xe2\x91\xda\xcfz" +
	"\xb7\xd2E\x9f_\xab7\xe11\x89\xb4\xe1`\xb9\xcaM" +
	"\xec3\xba\xfcV\xdb\x8c\xe2R!P\x9d'\x06\xdc\xaa" +
	"\xe4\xc7\x15b\x12\x93*KLf\xb1\xc4dO\x96\x98" +
	"\xbc\xd4\x10\x93$,%\xa1\xad\x9f[\x89\xe3[\x8a\xe7" +
	"\xbe\xce\xa0Dg\xbb8]J\x9e.\xa7Dg\x82E" +
	"\x97\x92\xb4\xe8\xc4J,\xb5\xb0r\xd3\x87G\xa7\xbc\x08" +
	"\x81j\x83s\x13\x82\x86\x0c\xa3\x1d;QG\xce<b" +
	"\xc0\x1d\x195\x155nsDVG\x8b$\x94\x89\xb1" +
	"G\x0aE\xad@\x13}\x01\xae\xb9\xe8c/\x8b\xa9l" +
	"c\xec\xe7M\x04Y\xa0\x8c\xb7\xd6N\xf7\xe7\xb2\x0e\xa3" +
	"\xe7\xb2\x0e\xa3\x97\x1bR7<m\x11\xa1\xbb\xc1\x82\xe1" +
	"u\xf8\xb6\xe1\xd1\xd7\x04\x9fD\xff\xf6\x8bQ~\xd0j" +
	"Q\xf4\xbb\x85\x80\xc6\xd1\x92\xa0\xc1/xP\xb2\xb6\xb9" +
	"\xdb\xa2OQ\xa5\xc9b:FIL\x8b>\x83e\xea" +
	"\xe5\xb2\xeag\x15\xb2L=\xa7a\xeaE\xe5\xf84\xe9" +
	"\x12\xac\x98r\x14\x82T-\x0c\xd1\x13t\x87\xb6\x86\xd8" +
	"\xd3\x9cj\x05\xaf$\x94{\xd3EX\x8a\xe6\xc3\xa4\xce" +
	"\xa8\xcc\xebpL2\x05c\x8c\xc6\xe1\xd0p\x8aPW" +
	"\x8cI\x1a\x87C\xc3)B\xdd1E(r\x0a44" +
	"\xa7M\x0e\x81\x86C\x92\xbd1\x12jd\x1a\x85]$" +
	"\xfd1\x94hd\x1a\x85C\x92\x83\xb19F\x884|" +
	"\x984\x07q\xe3LM\xb8\xbe\x8d)G\xb7\x11\x96k" +
	"\x81\xec\x119RG\x9d\x02\x09T\x17\x03\xcb\xd8\xc0n" +
	"\x8eZ\xd9t\x1d8\xb6\x00`\xad\xe6\x12/\x97\xad\xeb" +
	"D\xa6\x05=B\xc1B\x1f\xd1\xa0K\xe2l\xb4~e" +
	"\x88\x04[\x94\x9e\x15P|\xe2\xa8f\x8e\x1f6\x1f~" +
	"\xc6\xb0C\xe0\x7f\xb3z\xf0\xf1W\x82\xffy\xef\xe7\x8c" +
	"'c\xdd6]U\x92\xe8\xf5H2\xa9l\xc1\xd3\xc7" +
	"rY\xb6\xfaf\x18\x8d\x11\xa2,f\xebA\xbd6\x9a" +
	"\x8b\x84e-\xd2!\xb0\xecJ\xdd&n1\x13\xb3\xf9" +
	"\xedS\x08h 5\xc8\x1f\x17\x1bj+\x1e\xa2\x96\xc5" +
	"\x86\x14:s\xcb\xa5\xd7G\xa5\x10\xfe\xa1\xa1\x0e\x17\x80" +
	"N\xc7S\x871\xb0Sfs\xec\x94\xeeSj\xe9d" +
	"\xe8\x15\xd6cG\x9e\xbax\xf7\xf46\xa9a0\xeb\x09" +
	"\xaa\xe0m\xde\xf9\xd6\xf2\x19\x9d2V\xe1\x10\xaa^\xeb" +
	"\x1f>\x97\xd4\xe8\x17T\xc1'jt\xa9\x8aXN\xc1" +
	"\x0e\xc7P\x1b\xc75o:\xb2U\xa2P\x87\x8e\x95Q" +
	"FbX\xaf<\x99J\xa9?a=\xfc\xebT\xdar" +
	"\x0c\xb9\xa9O\xa7R'\x82\xc2Q\xe3\xb3e\x94C;" +
	"$\x7fS\xce\xe7R:\x11\xa3\xfc\xd4\xff<(\x87\xf9" +
	"\x1dNQ\x08pVc\x02\xda^6!\xec\xac\xb1\xa9" +
	".Q\xfb\xbf\xed\xa9\xc9\x13\x05\xad\xca\x14q\xc8e\xc5" +
	"M\x0bYq\xd3BV:E9\xab\xaal.+\x9d" +
	"\xa2\x8c\x95NAy\x16\x9a\x98\xac\xd5\x92\xd7k\xf6\x18" +
	"\xbb\x15\xd5\x1f\x10\xa3\xc3E\x82\xa6\x09\xeejW5\x97" +
	"@\xb9\x9f\x9b\x88\x9drI\xf6\xc0\x14r\x94\xfe\x9b\xed" +
	"\x11|Be\x1b\x82\xe5\xc3\x15_\xb9\xa0\xe5\x94\xa7G" +
	"b\x83\xad\xc5\xcb3X>/*\xed\xad\xc1W\x1a\xe5" +
	"^\xb2\xf9r4\xa3\xa6\xbc\xcfE\xbb\xd4\xdbP\x15$" +
	"T\x94\x83q\xf2\xc3n\xf9\x03\xb9C\xa1\x90\xee\xd8\x04" +
	"A\xd76\xd9E\x9f\"jv*\xadf\x87D\xc1\xac" +
	"TZ\xcd\x0e\x89\x82\xb9\xa9t\xcd\xa7\x90(XPf" +
	"87\xa26\xb7V\x16\xa8\"\x8b#\x83\xb2G\x8d\xaa" +
	"\x92\x11c\x8a2\xc8:\xa3\xe8r3\xca\x00\xab\xac]" +
	"\x0c\x15\xa3q\x0e\xa9\xa4\x85\xd6\xdc\xa4\xccS!\xd4\xa1" +
	"[\xd3A7tw\x97\x0b2G\xaa\x0d\xe67ea" +
	"\xc4P\x1a\xc0+\xba\xb5P\xec;\xf6;(\x9c\x8c\\" +
	"\xdf\x0c*1\x99\x95\xb6\xc8\x08|G+\xab1\x14\x19" +
	"\x90\xc5zvq\xdaBV|>#\xe60W\x96\xb1" +
	"\xff\xfeO\xdd\x8fm\xad\xc6\x90c\xd5\x0fP5c\x1e" +
	"\x97{\x05\xb9\xba\xcdv\"\xc6/\x02E\x925\xa0\xb5" +
	"P\xe4\x00\x0f\xfe\xb6\x14jo#\xf7\xd4\xc4vT\xd2" +
	"I%\xdd\xc6\xc8(\xb1\xa6\xbc\x8c*!\xc3c\xc9w" +
	"\xa1j\xaa\xd0~\xbe\x96\x8e\xdf5o\xd2\xe8\x8eK\x93" +
	"\xc72\xc3\xf0XF\x1c\x96\x99Tp-,\x1e\xa3\xf2" +
	"\xcf\xc3\xe2q]\x16\x95\x7f\x1e\x16\x8f\x1bs)\xdff" +
	"XS\xa2\x0b\xab\xd8&U)\x91\xe2b\xe9\x93\xa2L" +
	"\x87IX\x09%\xf2\xd3[\xeb\xf5\x1a\xb5\xf1\x1b\xbc\xb5" +
	"\xde*\xa9\xb2\xca\xf0\x95\xfb\xbc\x8aR\x1d\xf4\xb7)\xcf" +
	"!\xe4\x9f\x8b\xca1\xf9#\x194T\xf8<2 \xf5" +
	"\x85\xc6n\xd3X\xa9\x0a\xb2\x16]D\xafQ\x99$\x9b" +
	"\x0b\xeb5\xfaE\xd5'\x05\x02\x12\xad\xb8\xa16'\xb7" +
	"U\x96\x17+\xe5Nx\x8a\x88\xb1l\xfd\x13[\x91\xe3" +
	"\x0d\x8a\xd7\x13u\xbdB\xe8w\x0eg\xab\x14$\x99." +
	"S>Jh[\xdd1\\8\xc56\x90\x93\xb1\x88\xf1" +
	"\x19\xac\xab\x84T\xea\xcc\x06C\x16\x86\x97g1\x11\x02" +
	"\x1a\xaai\xe6\xbf4I\xffh\xdd\x11\xe4\xf7\xabJ\xad" +
	"q\xbb\x02\xdbjf\xc7XI\xd3\xab\x1f\xa2c\xacx" +
	"\xcd\x87q>F\xd0\xbf\xd5\x96\xe2U\xba8J\x08\x19" +
	"\x9a\xad\x99\xce\xccD\x91\x19\xac\xe3x\xaaa\xe0E\x9f" +
	"\xaacU\xf3\xff?0\xec#\x8aKUA\x92\xf3\x9b" +
	"\xc6J3[\x11\x9a\xb1\x9c\xb9o\xb5B`^P4" +
	"\x97\xb0SY\xfbE\x19\xb5_x\x82\xa2\xb7@\x964" +
	".]\x124*k\x06pP\xa89\xab\xd8\x86\\\x88" +
	"\"\xa5\x12\xb7b=k\x86\xda%'S\xda\x1f\x1e\xa7" +
	"\x09T)\\\xb6\xaa\xb5-\xc0`\xbe\xdf\xc3\x1a\x08\xfc" +
	"\xdf\xc9\x86lR(\xed\xfd\xb7G\x96\x1c\x1b^w_" +
	"\xcc\xe5\x8b\xb2G\x14\xdf&5\xa9_\xd4\xb6\xb4\x97\xe8" +
	"[\x17b\xf1P\xc9n\xd1[\xaa&\x08\x1e\xb1\xad\x16" +
	"r\x85\xaa\xf8Z\xbf\x90\xa2\x85\\\xb0r\xfd\x98T\x9b" +
	"o\xc1\x0a\x06\xc4&U#\xfdB 0IQ=\xad" +
	"\xed1Q\xd9\x03zY\xaa\x125]\xa9\x90\xbc\xd0\x7f" +
	"\xd7\xfb$\xe2\x0d_\x9d\x98\xc5q\xae\xe5\x89V\xe2\xda" +
	"\x90Hy\xc3\xd7%fp\x9ck\x15\xe0\x9b\x12)o" +
	"\xf8\xc6D'\xc7\xb96\x00\xbe=\x91\xf2\x86oM\xcc" +
	"\xe48\xd7&\xc0w&\x1a\xde\xf0\x1d\x08o\x01x\x7f" +
	"\"\xe5\x0d\xdf\x87\xf8[\x80\xbf\x9fHy\xc3\x0f$N" +
	"\xe48\xd7~\xc0\x0f'R\x15\x1f\x0e%\xce\xe38\xd7" +
	"a\xc0\x7fJ\xa4*>\x9cM|\x9c\xe3\\?%Z" +
	"\x893\xc9BR:Xtg\xf8E|\xcd\x05 o" +
	"\x9fD\x95m\x8d\x07\xeb\xcb\x15\x97d%\xaed\xc0;" +
	"Y\xf5\x82\x0fI`\xcc\xba\xda\x03\xde\x0b\xf0\xc4\xf6z" +
	"\xd9\xd6\x1e\xa0\xd5\xba\xba\x01~-\xe0I\x1d\xf4\xb2\xad" +
	"W%\xa1\x93\x1f\xf0>\x80w\xee\xa8\x17{\xef\x0d\x1a" +
	"\xb6\xab\x17\xe0\xfd\x00\xb7u\xd2\x8b\xbd\xf7M\xea\xc9q" +
	"\xaek\x01\x1f\x00xr\xa2^\xed\xbd?\xe2}\x00\xbf" +
	"\x09\xf0\x94$\xbd\xdc\xfb@\xc4\xfb\x01>\x04\xf0\xd4\xce" +
	"z\xb9\xf7\xc1\x88\x0f\x00|\x18\xe0\xbcM/\xf7>\x14" +
	"\xbf{\x13\xe0y\x80\xdb\x93\xf5r\xef9H?\x04\xf0" +
	"\x91\x80wI\xd1\xcb\xbd\xe7#>\x0c\xf0\"\xc0\xff\x94" +
	"\xaa\x97{/\xc0~\xe5\x01^\x02xZ\x9c^\xee\xbd" +
	"8\x09\xaf\x16\x03\xbc\x0a\xf0K\xe2\xf5r\xef\"\xe2\x1e" +
	"\xc0\xa7\x01\xde\x95\xd7\xcb\xbdO\xc5q\x9e\x02\xf8\x1c\xc0" +
	"/\xb5\xeb\xe5\xdeg\xe1\xfb\xa7\x01>\x1f\xf0\xcb\xba\xe8" +
	"\xe5\xde\xe7\xe28\xcf\x04|!\xe0\xdd\xfed'\xdd8" +
	"\x8e_\x80\xf8\x1c\xc0\x97\x00\xde=\xcdN\xbas\x1c\xbf" +
	"\x08\xe4\xa8k!\xe0\xcb\x01\xbf\xfc\x12;\xb9\x9c\xe3\xf8" +
	"eIX\xb4\x1f\xf0\xb5\x80\xa7w\xb5\x93t\xe0\xf2$" +
	"\xe0\x87U\x80o\x02\xfc\x8aK\xed\xe4\x0a\xe0f\xc47" +
	"\x00\xbe\x1d\xf0\x1e\xed\xec\xa4\x07p3~w\x13\xe0\xef" +
	"\x00\xde3\xc1Nzr\x1c\xbf\x17\xe9\xdf\x02\xfcs\xc0" +
	"\xaf\xbc\xccN\xae\xe48\xfe\x18\xf6\xf7(\xe0\xa7\x00\xef" +
	"\xd5\xcdNzq\x1c\x7f2\xa9\x9c\xe3\\_\x02~\x06" +
	"\xf0\xab\xba\xdb\xc9U\x1c\xc7\x9fF\xfc[\xc0\x7f\x01\xfc" +
	"\xea\xf6vr5\xc7\xf1\xe7p\x1e\xcf\x00\x9e\xd8\xd9B" +
	"R\xae\xe9`'\xd7p\x1c\xdf\xa13\xd0\xb7\xefl%" +
	".;\xe0\xd7v\xb4\x93k9\x8eO\xe9\x8c1+\xc0" +
	"\xfb\x00\xde\xfbr;\xe9\x0d|\xd8\x19\xe6\xe5Z\xc0\x07" +
	"\x00\x9e\x91n'\x19\xc0o\x9d\xf1X;\xe0C\x00\xff" +
	"\xf3\x15v\xf2g\xe0\xab\xcexk\x08\xe0y\x80\xf7\xe9" +
	"d'}\x80\x7f:c\x19~\xc0\xef\x04\xbco\xa2\x9d" +
	"\xf4\xe58~<\xe2\xe3\x00\xf7\x00~]\x0f;\xb9\x8e" +
	"\xe3x\xa13\xcc\xcb=\x80{\x01\xbf>\xc9N\xae\xe7" +
	"8^\xea\x8c\x05[\x00\xf7\x03\xde\xaf\xb3\x9d\xf4\xe38" +
	"\xde\x87\xdf\xf5\x02^\x07x\xff\x9ev\xd2\x9f\xe3\xf8`" +
	"gX\x8f~\xc0\xa7\x00\x9ey\xa5\x9ddr\x1c_\x8f" +
	"\xf4u\x80\xcf\x04\xfc\x86^vr\x03\xc7\xf1\xd3\xb1\xbf" +
	"\xd3\x00\x9f\x0f\xf8\x80\xab\xecd\x00\xf0\x15\xf6w\x0e\xe0" +
	"K\x00\x1fx\xb5\x9d\x0c\x04\xfe\xe9\x0c\xfc?\x1f\xf0\xc7" +
	"\x00\xbf\xf1\x1a;\xb9\x91\xe3\xf8\xa5\xd8\xce\x85\x80/\x07" +
	"|\xd0\xb5v2\x08\xf8\xaa\xf3\xa5\x1c\xe7Z\x02\xf8*" +
	"\xc0o\xeam'7q\x1c\xbf\x02\xbf\xbb\x1c\xf0\x0d\x80" +
	"\x0f\xce\xb0\x93\xc1 =q\xbe\xd6\x02\xbe\x05\xf0\xac?" +
	"\xdbI\x16\xc7\xf1\x9b\xf1\xbb\x1b\x00\xdf\x0e\xf8\xcd}\xec" +
	"\xe4f\xe0\xb7\xce\xdb8\xce\xb5\x1d\xf0\xd7\x01\x1fb\xb3" +
	"\x93!\x1c\xc7\xef\xc6\xf7\xbf\x0a\xf8a\xc0\x87\xf6\xb5\x93" +
	"\xa1 \x0e;\xa7r\x9c\xeb}\xc0\x8f\x02~\xcbuv" +
	"r\x0b\xc7\xf1G\x10\xff\x10\xf0\xcf\x01\xcf\xbe\xdeN\xb2" +
	"\x81?\x11?\x0c\xf8\x97\x80\x0f\xebg'\xc38\x8e?" +
	"\x81\xe3|\x14\xf0S\x80\xe7\xf4\xb7\x93\x1c\xe0[\xe4\xab" +
	"/\x01?\x03xn\xa6\x9d\xe4\x02\xdf\xe2\xf8\x7f\x0b\xf8" +
	"/\x80\x0f\xbf\xc1N\x86\x03\xdf\"?\xfc\xd4\xd9J\x9c" +
	"6\x0bI\xc9\x1b`'y \x86\x11\xbe\x00\xe4\xed\x01" +
	"\xcf\x1fh'\xf9 \x86m\xc0&q6\x10\xc3\x80\xdf" +
	"z\xa3\x9d\xdc\x0ab\xd8\x06\xf4\x89\x80_\x02\xf8\x88A" +
	"v2\x82\xe3\xf8.6\x18\x06;\xe0W\x00>\xf2&" +
	";\x19\xc9q|w\x1b\xde%\x02x/\xc0\x0b\x06\xdb" +
	"I\x01\x88m\x1b4\xff\x0a\xc0\xfb\x00^\x98l'\x85" +
	"\xb0,\x10\xbf\x16\xf0<\xc0oK\xb1\x93\xdb\x80\xcdm" +
	"0]\xc3\x00/\x02\xbc(\xcbN\x8a@\x1c\xda0\xa6" +
	"\x0ax)\xe0\xc57\xdbI1\xc7\xf1\x0e|O\x09\xe0" +
	"w\x02>j\x88\x9d\x8c\x82e\x81\xf88\xc0=\x80\x8f" +
	"\x1ej'\xa3aY\xd8`Y\xdf\x09x\x15\xe0%\xb7" +
	"\xd8I\x09\x88O\x1b\xecjU\x80k\x80;\xb2\xed\xc4" +
	"\xc1q|\x8dm\x06\xb0?\xe0S\x00w\x0e\xb3\x13'" +
	"\xb0?\xd2O\x01|\x0e\xe0\xae\x1c;q\x81X\xc5v" +
	"\xce\x04|!\xe0\xa5\xa9vR\x0a\xe2\x13\xc7y>\xe0" +
	"\x1b\x00\x1f\x93k'c\x80=m0\xed\xab\x00\xdf\x04" +
	"\xf8\xed\xc3\xed\xe4v\x10\x878\x9ek\x01\xdf\x02\xf8\xd8" +
	"<;\x19\x0bl\x8b\xef\xdf\x04\xf8N\xc0\xc7\xe5\xdb\xc9" +
	"8\xd8\xddm\xb0,\xb6\x00\xfe*\xe0\xe3o\xb5\x93\xf1" +
	"\x1c\xc7\xef\xc2\xf1\xdc\x09\xf8[\x80\x97\x8d\xb0\x932\x8e" +
	"\xe3\xf7\xe0\xfc\xbe\x0e\xf8~\xc0\xef\x18i'w\x806" +
	"\x80\xf8;\x80\x7f\x08\xf8\x9d\x05vr'\xc7\xf1\x07q" +
	"<\xdf\x07\xfc(\xe0\x13\x0a\xedd\x02\xb0\xb9\x0d\x96\xf5" +
	"a\xc0\xbf\x04\xfc\xae\xdb\xec\xe4.`g\x1c\xe7\xa3\x80" +
	"\x9f\x02\xfc\xee\";\xb9\x1b\xd8\x19\xdb\xff%\xe0g\x00" +
	"\xbf\xa7\xd8N\xee\x01v\xc6\xfe\x9e\x02\xfc'\xc0\x85Q" +
	"v\"\x80V\x81\xfcv\x06\xf0\x0b\x80\x97\x8f\xb6\x93r" +
	"\x8e\xe3\xcfc{~\x01<.\xd9BR\xdc%v\xe2" +
	"\xe68\x9e$\xab\x1c\xe7L\x06\xa9\x0d\xb0\xc7a'\x1e" +
	"\x90\xda\xc9/\x03;\x03~\x09\xe0\xa2\xd3ND`\xe7" +
	"dx\x8d\x1d\xf0+\x00\xafp\xd9I\x05\xb03\xe2\xdd" +
	"\x00\xbf\x16\xf0\xcaR;\xa9\x04m#\x19/[\x01\xbc" +
	"\x0f\xe0Uc\xec\xa4\x0a\xd89\x19\xa5<\xe0\x03\x00\x97" +
	"n\xb7\x13\x09\xa4|2L{?\xc0\x87\x00>q\xac" +
	"\x9dL\x04)\x8f\xf47\x01\x9e\x07x\xf58;\xa9\x06" +
	"\xf6OF\xf6\x07\xbc\x08p\xefx;\xf1\x02\xfb\xe3{" +
	"F\x02^\x0a\xb8\xaf\xccN|\xc0\xfe\xd0]W\x09\xe0" +
	"w\x02.\xdfa'2\xb0\x7f2\xee\x0a\x80{\x00W" +
	"\xee\xb4\x13\x05\xd8?\x19\x86\xff\x1e\xc0\xbd\x80\xfb'\xd8" +
	"\x89\x1fv\x05\xec\x97\x07p?\xe05\xd7\xdbI\x0d\xec" +
	"\x0a\xc90\x8dU\x80k\x80\xab\xfd\xecD\x85e\x81\xf4" +
	"^\xc0\xeb\x00\x0f\xf4\xb7\x93\x00\xec\x168n\x1a\xe0\xd3" +
	"\x92-M\xa2\xd9\xad\x1d\xf6\x8c>\x1b\x9a^.\xc9\xb4" +
	"\xeb\xb2\xd7S\x0f}\xd6\xad\xe6\x8b\xb3\xe1,3\x8fH" +
	"e\x10\x83\xf2\xad\xd4I\xee\xf0\x9d*Q\x05O\\^" +
	"\x85hN\xb1B\x15\x03UM\xae\x95\x09W\xd8p\x11" +
	"\xaf\xa2\x13Y\x03UQ\xe7\x95\x8a\x05M\xe4l\xaa$" +
	"xIrc?2k\xea\xbd\xbf\xf6\xfb2\x92\xd3\xa6" +
	"\x89\xbeRI\xa6\xeb\xce5\x08B\x8e\xaa\x0a\xf5\xcd\x96" +
	"\x965\x1d]\xb5\xf9\xa8l\xa3twP\x1d\x19\xb9i" +
	":!\xa0\xa9\xd4\xbf#T\x09\xee*\xe3\xdf\x1e\xb1\xce" +
	"8\x89-k\xc6\x08&\x08\x95R\xe4\xdf\x93$\xe3\x83" +
	"\x15\xf4D\xe0\x10\xe5*\x0aG\x9a8\xa1}\xa2\x0f\xb3" +
	"\x90\x9a\x1e\xc4\xfa_\xcb\xe0\xcd\x1e\x1eT\x03\x94\x95\x0f" +
	"\xef\x00\x88\xb3R\xa0\xfe\xae\xe1A\xce\x16E\xab\xbf\xd3" +
	"\x0cgc\x84\x84\x91o&\x0b\x9a\xe8\xaa\xe6l\xac\xbf" +
	"\"\xf3\x98\xdd1U\x92\x1a\xd0\xc2\xf7\x8a\x85\xd1\xaa\xa0" +
	"\\)\xaa&4\xbd<XQA\xf1\xea\xcd\xef.y" +
	"eT\xc2\xca\xc8m\xd7\x1e)\xe0\x96\xfc^\x89K\x90" +
	"\xc5\x00In\xbc\xe6E\xf5\xdf\x9e\xd4\xe9\x9f\x86\xb9H" +
	"\x15\xddB@+\x958\x9b\x8fQ\x9aY\x94=AU" +
	"\x90\xddt\xdd&A\xd0\x99\x88Kw\xf9E*\x8d/" +
	"\x82S\x1d)\x0f\x05\xa69+\x9d\xb5i\xe9\xb3T." +
	"M\xf95\x92\x05\xe1W`\xe5\x94\x8b\x9c\xd5\xab\x91\xe4" +
	"\xc6bI\xf9\xfc\x93\xc61\xef\x85\x9b\x88\xd7J\x08\xe5" +
	"^.[ty\x15\x8a{\x9b\x14,7\xc5\xd1\x9a\x14" +
	"\x1f-\x97T\xad\xca#D\x8d5<\xe7U*%:" +
	"\xb9L\x93|\"\x98\xcc\\\xba\xe8)6\x0e\x0f$\xf8" +
	"k\xa9k\xd9ec\xb1[+\x8d\xe4'\xfc\xa6\x1a\x15" +
	"9\xd3\xb1rA\xe6\x12\xa8+\x8b\xe9K\xde\xf1\x8b\xa2" +
	"\xacID\xf3\x8a\x1eE\x16\xdc\xd1N\x17\xe3\x88J\x93" +
	"\xf5\xd0\xc6\x12C\xffG\x12\xd8\x8d5\xe5\xaa\x12T*" +
	"P*\xd6\xf9\x059 )\x9cU6\\\x87BPS" +
	"\x02\xc0\x92\xc6\xc9\xa2\xd8\xca^\xe8\xb77\x16\x8b>\xce" +
	"\x16\x9d\x06l\x8e-\x85oy\xe4\x12\xe8c>\xac\xfa" +
	"\xd7^Q\xf0\xe4\x089n\x10\xde\x94\xdfV\x90T\xa7" +
	"\xe8\x13$\xce&\xd39\xd6b\x9d\x9f\xaa\x09\x8f_\xc9" +
	"\x09jDq\x87\xb2\x87\xa3\xae\xef\xf2\xe4\x045\x85\x84" +
	"\xff\x14\xcd\x0b\xcd<\x15\xa8R&U\x89^_\xb4\xab" +
	"3\x94\xd9\x94]_\x10u\x09\xf9o\xd6\xaa\x87\xd6\xcd" +
	"X\x7fX\xef\xb39\xfcn\xae\xe3\xce\xb8\x19\xca*\xb8" +
	"\xa9\xe0T\xa5\xe4v\x8a\x01.A\x0a\x18\\W!\xa9" +
	"\xa2S\x0cH\x9c\x95\x02\xdd\x8a\xd7\xd3\x04\xf4+R@" +
	"\x91\x9d\"g\x0b\xd0/\xf0H\x01Q\x08\x88N.]" +
	"\xa4\xf1\xf4*!@]\xa0-\xb8\xddAUp\xd3\xcb" +
	"2[\xcf\xbf0Hj\x15\xc9c\x12Dn\xaf \xa9" +
	"\xb5J\xbd\x89I\xdc\x98N\x91_\xc1\xa5W\x88n\xca" +
	"c\xad\xa7e\xb8\xaa\x88$z=\xc5\x92&eW\x0a" +
	"Q;v\x98\x80\xb3\x01\x85\x01+\x1af\xf5q6\x0f" +
	"\x9de[\xe5w\x8a\x95Fm\xa5F\xd8J\x01\xa1\xe5" +
	"HD|f\x8b\xd1\xc4\x81P\x9a G*\xa3w\xc3" +
	"<\xc1\xc7%\xd0\xd9#\xba\x1aQ%q\xd9\xf8\x00E" +
	"\xae\xa9R\xb5\xa8Uq\xe9\xaa\x12\xa4\xc2k\x01-(" +
	"7\x99\x9er\xc1]\x1d\xd0\x84\xf2(]\xc1\xebV\xaa" +
	"\x14\xea\xc2\x03\xa1n\xa4\x9f\xc4s\x16\x12\xaf\xdf\xc3\x86" +
	"\xa9\xc8\xa1\xdf\x8d>\xa1.\x1fz\x13\x1a\xec0\x1c\xd3" +
	"\xc5\xdb\xa5b\x9d\xd6\xa4v\x7f\xcc\xd7n\x17\x1aq\xa4" +
	"\x96\xae\xddn,W\x94j\x0d\xbf\xd4\x86\xe0[NN" +
	"\xf4\x95\xb4\x94wvFk5\x9d\xc2\x1b\x1e\x19#\x07" +
	"\xfcQk\\\x10\xea\xfc%\xa2\xea\xe6\x12\xe8\x0d2\xa6" +
	"\x14\xcf\x1c\xbf_MPjc\x89Te\xb0\"UY" +
	"\xcdD\xaaZJ\xf6\x8ca\x98\xbcZ\x8e\xa7\xd6\xa5%" +
	"\x08\x9a9\xcaP\xf6\x87\x8a\xcb\x89u~Q\x95D\xfd" +
	"\x92B\xe3\x06\xa9@\x94F\xe1\x17U\xb7(k\x02g" +
	"mK:U\xb1R>R\x14\xbc\x1a\xa9\x8a%X\x7f" +
	")U\x9c\xa2\xca\xcf8\xce\xd0z$\xe6VI\xf6\x94" +
	"\x88*\xca\xbf\x9a\xa0\x18 Z,\x01/gt\xc0\x8b" +
	"\xda\xfc\xdc\xa1\xfa\x86m\xba\x9c/t\xf5\x8a\xee\xe8\xd7" +
	"\x94\xca\x84J\xaf\x18\xc3\xe1\xb0\\VRU\xd4\xcd\x84" +
	"\xa1 \xf9\x82,\xea\xc4X8k\x80>1f>\xe1" +
	"\x88\xbfa6\xc3k\x91q\x85\x8a\xa9\x04[\x83\x88\xe5" +
	"\xcc\xdax_\x94\x7f\x84(\xdbDUr\xc72\xea\x99" +
	"\xd4\x95\xd6-\xd4\x86\x8b\xf1|\xd4\xe8\xd2<.\xa62" +
	"\xe7\xf4\x09\xf2JQ\x16U\xb4\xe8\xb6\xfeIX~\xd3" +
	"\xc9\xb5\xcf\x86\xcb\xf9\xb7\xad\xeen(\xc0*\x12\xb1\x8d" +
	"\x85\xceY\xf5n[\x8f\xb96k\xdc\xc4X\xe9<\xdd" +
	")\xfa[\xca\xffbE(\x8d\x0aaTIvV\x05" +
	"tS\xf1\x1f]\xd3kc\xd6wN\x8e^M\x96\xe3" +
	"b\xa9r\x10\xfb\xd1\x17\xba\xcaAt\xe8\xd0|\x18\x99" +
	"\x99\xad.\xd6\xf9o\x17\xbcA\xb1M}\xd1SJ\xf3" +
	"\x04\x9bOhrB\x97\xaa\x8f\x15\xe9\xce\xa1,\xea<" +
	"Z\xb8;Q\xc7v\xc3\xdd9\x96K\x9dG\x0b\xe7\xe6" +
	"F\x1d\xdb\x0d\xe7\xe6\x9e\xcc\xa42\xb2\xc3\xb9\xb9_\x97" +
	"Q\xc9\xd7\xe1\x13\xbag\x0b\x8d\xe4\xeb\x96\xcb\xd7F\xed" +
	"\xf8\xe6\x82g\xa6\xc4\xdb?X\xc46\x86\xdb\xf3\x0bd" +
	"\xad\x85\x8a\x97Q7\xe5\xc7z\xab\xaaS\xd4\x82\xaa\x9c" +
	"\x87\xe2\xb1\xad\xf7vEiA\xacJ\xf41\x15d\x05" +
	"\xe6\xb7\xd5\x86\x12\x90\xe9\xa3Rj3G\xa5.\x8d\xba" +
	"_/\x1c\x1c\xee\x82G\xa5\x8c#T\xe1\xe0pW<" +
	"\xe3\x14\xb9G/RM\xb9\x07\x9ee\x8a\x9c\x95\x0a\x95" +
	"9\xe5{c\x15E\xa3Xs;\xa2\x07\x87\xfb\xe2\x11" +
	"\xa7>\x80\xdf\x84G\xa5\xe2\xf5\xe0\xf0@<\xd1e\x14" +
	"eno\xd1\x83\xc3C\xf1\xf5F5\xc9\xf0\xa5\x9e\xf9" +
	"H\x1f\xa9&\xd9\xdc\x81':\xad;\xfa\xf0\xa3\xf1\x84" +
	"\x95un\xcaVJ3\xaaO)\x8fN\xb6\xd2D\x9f" +
	"9\xe7\xb7R\x11\xbc\xa62M\xd4\xeb\xa2\x1e\xf7`\xce" +
	"G4i\xcc\xc7.\xb0e\xc8b\xb8\xc8S\x9c\xb0\xfb" +
	"`J2^\x8c5VQ\xbd\x1c\xf1\xe0\xbfC\xbbu" +
	"\x0cU\x88\xf42\xdc\x92\xbb\xbaDqW\x8b!e\xbf" +
	"\xb5#\xd6\x19t\xc6bH\xe6\xac\xce\xa53\x16C2" +
	"'\xaabnX\xe6\xd0\xa7\xb1\xc3\xc5q\xe9\x84E\xba" +
	"x\x1dt\xc6\x98\x8c\xfa\xa8\x922\xd1Eq\xdd\x8a$" +
	"7-\x19\xd5&\x8b\xc2\xed\x16\xfd\xda(1}R\xf8" +
	"\xdcak\xa9&\x13\xa9\x8b\xdeL\xe7\xf0\xd8\xa7\xf5\xda" +
	"\x96\x1cT\xa5(\x81t\xb1\xaci\xf6\xdb\xff\xa1\xfc " +
	"w\x95\"\xb9\xe9\xfc\xa0\xd3u\xdfo\xbb\xb2\xcbK\xa7" +
	"Z\xca\x0f\x8a\x9c\xea\xf7\x0b\xee\xea\x04}\xd3\x8a\xedd" +
	"\xffh\x19\xef\xed\xa3K\xceP:o&\xeb\xc0n\x86" +
	"\xa1\xf4\x12\xe6y\xdd\xd0!\xa9\xa8*\x09\xe1\x82\x08\xb4" +
	"\xce\x1b\xadvD\x95\x08k(\x0fj\x9aBy\xbd\x18" +
	"\xd58\x1b\xfc\x8a?\xe8o\xcb\xbcF_b\x15\xbef" +
	"nXDZoEi\xbd\x05\xc4\xda\xab\xb4\xb4\xdeE" +
	"fD\xddU\x1c\x96\xd6{\xc8\xbbQw\x12\x87\xa5\xf5" +
	"A\xb2\x8d\xe3\\\x1f\x02\xfe9-\xad\x8f\xa1X>\x0c" +
	"\xf8\x97t\xed\xfb\x13\x88\x1f\x05\xfc\x14]\xfb\xfe$\xe2" +
	"\x9f\x03\xfe-]\xfb\xfek\xf2\x0c\xc7\xb9\xbe\x05\xfc\x17" +
	"\xba\xf6\xfd9l\xcf\x05\xc0\xdb[\xa8\xda\xf7\xf1\x16h" +
	"O{\x0b\xecB\x16\xaa\xf6}\x8a\xe5\x0d\x8es\xd9\x01" +
	"\xbf\x02\xf0N\xa1k\xd8\xba[\xe0=\xbd\x00\xef\x07x" +
	"b\xa2\x9e\xcc\xd3\xd7\xf28\xc7\xb9\xfa\x01>\x04\xf0\xa4" +
	"$=\x99g\xb0\xe5_\x1c\xe7\x1a\x06x\x11\xe0\x9d;" +
	"\xeb\xc9<\x05\x16\x8c\xfe\x02^\x0a\xb8\xcd\xa6'\xf38" +
	"\x10/\x01\xfcN\x8b%\xe4\xee\x13\x8a\x05.]\xad\x1e" +
	"\xe5wG\xbb\x01\x05\xd9O\xdch\x92V\x99\x1c\x84B" +
	"\x9eh\xf1\x8a\x95\x82&\x16\x0b\x92\x9c\x13\x08H\x81&" +
	"ND!O$a\x9a\xe8\xb77\xe8\x7f\x1f`\xfa=" +
	"\xd0\xf4\xfbF\xd3\xfb\\~\"z\xbd9\x93\x04U\xb4" +
	"\xc9\xf413\xfd\xcf\xa3+,\x15\xa2\x1c\x10\xf3\xe5*" +
	"Av\x8b>\x86_S(\x16\x88,\xe8\x04\xe9Ha" +
	"\xfa\xfbH\xd1\x02\xbd\xa5_\xc1\xa6@\xaf\x98\x18^\x18" +
	"&\x9a[%\"{J\x04\xad\xaaT\xb1\x96\xb8\xd9/" +
	"\x18]\xa1\x9ft\x0a\x84nD6Q\xf5\x1f\xc05y" +
	"m\xff\x81m\xca</E\x85\xcaU\xa5L\xd2\xcb\x0d" +
	"\xb4U;\x8b*s\xa9kgm4L\\\xa2\xe6\x0c" +
	"\xca\xc5\x8a\xd5#\xb6P\x9e\xc2\xc7*\xa7\xd9\x82\xf1X" +
	"\x84\xf1\x12\xab\xef\x8f\x17\x9e*l\xe6N\x19snf" +
	"KW\xc9\xb6R\xb0\xa5\xc4k\x13Bw\xc8\xd2\x05\xc5" +
	"'F\xe9\x86a!\xd7\x17u\xba\x88n\x18\xbeg~" +
	" \x9e\xc67N\xd7\x87\x0b\x8a\x0fF\x8d\xd48]\x1f" +
	"Gt\x19\x97\x83\xf7o\x18*c\xbcU\x97q\xf9H" +
	"o\x14 \x0f\x95\xd3hr\x8fGX%5\xdf\x8c\x15" +
	"\xceW\x1c\x8f\xef7\x0a\x8d\x87\x0b\x8a\x9bo\xc6\xeah" +
	"\xd1e\x9c\x8024R\x80\xbc\xb1BQ}\x82\x06:" +
	"\x81J\xfb\x83\xfd\x92\x07\xcb\xc7P.\xe5\xe8\x00\x99*" +
	"\xc8\xd5@\x81\x06Px\xeb\xc6hD\x84$TW&" +
	"\x8a\xa4\xe9E\xf2-\xc6\xce\xa3\xef\xa2\x0b\xddS\x1f{" +
	"V\xb3Q\xda\x1e\x0bm\xc9\xe9\x1e\xd7$\xc1\x1fK\"" +
	"\xb7J{f=\xba#\x8cKW\xa3\x14gU\xf41" +
	"\xf1\x165\x12\x9du\xcd\xfaH\xf3\xd5P5\xd1w\xbb" +
	"$N\xa2+~\xc6x\x99\xbc\x87\xf2x\xd0\x87\xce\xcc" +
	"U\x0f\x85`%\xc8T\x8c\xe5\x98\x8bdJr\xf5H" +
	"!P\xd5\xa6d\xf9t\x97\xdf+i\xff\xdf=\xf4F" +
	"i\xbb\xa8\x1c\xe9\xb3\x1bC\x85\xb4\xb2V\x0e\x8b1\x0f" +
	"\xbd\xb7\xae\xa4\x89n\xc9/\xe6\x045e\xb8\xe2+\x97" +
	"\xe4&\xb7k\x96\xb1\x866\x8b5\xb4\x85\xac\x93\x1d\xd4" +
	"\xd1}f\x15\xff\xec\x80\xe2\xa3\x83\xa9*\xb6'\xbag" +
	"\xaa\xe8\xf7\xd6\x0fW<t<\xad\xf5\xf2w!\x03\xcf" +
	"\xaa\x1f2\xff\x7f\xc1\xbe\x0b\xd7\x80|\xeb\x7f\xc3\xbek" +
	"\x80\x8d) \xd5\xb5\xdd\xa5\xe9\x17&\xc9#K\xc6d" +
	"c!\xb6\xccX\x1c\xc0\x976\x7f\xdb=\x15v\x88\xe5" +
	"P\xa4Z+\xaa.\xc9#\xea\x07<\x89\xb98\xd7\x1a" +
	"\x8a\x8d\xc2_\xf7\xcd\xa3N\xbd\x85g\xa2~1\xe5\xfa" +
	"\x0f\xcf\xc4\xac\xc9\x86\xeb?\xb4\"\x04\x8dh\x82\xbb\xba" +
	"B\xf2j\x09\xd4\xcd\x0b\x8d\xb2\xdf\x8d1ZR\x1d\xba" +
	"\xd6\x9b>P\x8fO\xba\x05\x12\xd0*B\xcd\xa4\x9fs" +
	"\x0b\x01\xad\x82\xcb\x0e\xdd\x06\xde\x86S\x98\x95\x92<\\" +
	"\x08\xc5WZ3ds[\xb9\xd9\xb3\xd1\x1d>\xebD" +
	"\x19d\xe6\xf3\xfdzn\x8cOlM\x9cF6\x0b\x8f" +
	"\xe2n\xb2U\xb4\x8b\xb5\xa69\x964\x1f\xc58\x09\xd8" +
	"Z\x07\x09\xe3\x9a?\x96@k\x10<\xfa\xe1\xc0\x16\xab" +
	"\xbc\xc4\xb7V8\x17K\xf6\x14h\"\xf1\xc5p\xdb\x1f" +
	"\xa5\x0b\x9b\xf71\x96\x1b,\x167\xbd\xaa\x0a\xf5\\," +
	"\xc1=*\xdac\x15\x8cD\xb76zh\xc3\xe7w\xc6" +
	"*\xaa\xd7\xe3\x12\xd5\x84Z]#\xa5.\x19\xceb]" +
	"2|)Uf-\xcc\x81\xe7\x0aY\x97\x0c\x97\xd3\x85" +
	"\xb3\xc3\xb6v<\xaa\xb9\x91k\x83\xc3\x9e\xd1$TC" +
	"\x0d\xc7k\xd83\xda\x05=\xa3F\x8d\xaaPa7\xbe" +
	";:d\x0d\xc7k{\xab\xae\x86\xf6@WA\xc4\xf1" +
	"\x9a]\x1e\xac\xa80\x92e\xa8\xeb\x05\x1b\xbd\x8a\\i" +
	"\x9e&T\xeb\xd4\xfa\xe1\\\x02\x98\x1dM\x0a\xe9\xda\x86" +
	"\xd3\xb0^\xd9<z\x93b\x95;7\xe7\xac\x84\x0a\x1e" +
	"\x8e\xe6\xd2e,\x84\xd8\x06_'&\xbbpf\xbb\xa1" +
	"\xb0\x19\xbb!5\xaa,W\xd89\xd2\x1fq\xc3\xd7\x1c" +
	"v\x8e\x0cD\x9cu1`n3\x17\x03F\xdft\x14" +
	"v\x8e\x98\xcbx\x85\x9d#\x05Ho\x18\x1aa\xe7\x88" +
	"\xf9\xa6\xa3\xb0s\xc4\x81\xb8q\xd3Q\xd892\x06\xf1" +
	"\x88\x01\x02\xcbM\x154E\xfd\xc3\xf7\xd3\xc5\x96\xa5e" +
	"\xaa \xd3\xa0\x07t\"w\xdd\x87~\x8f7\xfd.k" +
	"\x12\x7fi9\xe8\xcb\xae\xd4\xc0\xaa\x89T\xd8RM\xa4" +
	"9T\x88{V\xb9\xb1\xf9\x99\x0f\xf9\xd5+\xc1&'" +
	"\xf1\xf4j\x94\xa1\xd2\xd2\xcd\xe6\xa2\xe9:d@f\xdf" +
	"\xf1\x15\xd7\xb2\xdb!OL\xf72jPe\xb5\xe2t" +
	"\xc8\x0ex\x15\x8d\x8aU\xb0\x8e\xfc\xc6T\x123\xe8\x13" +
	"\xb9X\xfc\x03\x13[\xbbs6\xea\x04\xb2\x80\xaa\xb1\x1c" +
	"\xe0lA\x9f\x91,\xd8\xc6+f\x9c\x82\xecQ|N" +
	"\x91\xd4\x98\x06\xa7g+\x01\xf8\x04\xaa8\x81-\xaa2" +
	"A\xeb\xda\x17hn9~\xbf(\xa8X\xe7\xe9\x0f\xd7" +
	"\xeaq\xd2\x97\xdbD\xab\x83\xd1\xc3\x10k\x85-\xd3\xc9" +
	"c\xc1\xe3\xf2\x8b^\x9b\xd7%j-\x94\xff\xd0o\xe8" +
	"lF\xfbe\xdb\xc2\x8a&`i;\xce\x1a\xfb}\xec" +
	"%A\xf8\x7f\xb8Z1\xb5Z3c>\xe1\xce\xb4\x83" +
	"2\x0d\xad\xd6\x94\xbe\xc0\xba\x92\x9d\xb1\x06\xd2\xf1\xda\xec" +
	"\xb6\xba\x02a=\xea%\x98\x9bt\x88i3\xd3I\x01" +
	"\xe1\x0e\xd1\xe6\xb1\xd1\xa1\\\xa3C\xcc8.\x989\xa6" +
	"nekJT]<w\x15H\xd3@\x9b*\xf6\xab" +
	"\xc3UQ\xb0\xea\xb2\xb44\xb2[\x0e\xb589\xce5" +
	"\xc4b%\xae\x91\x16j\xb7\xccG<\x0f\xf0\x12\x0b\xb5" +
	"[\x16[@/)\x02|\x9c\x85\xda-\xc7X2i" +
	"Wyd\xb7\x1co\x81]\xae\x14\xf0{,\xd4n9" +
	"\xc1\x82n0\xc0=\x16j\xb7\x14\xf0\xbb\xf7\x00\xee\xb5" +
	"P\xbb\xa5\x84x\x15\xe0\x9a\x85\xda-k\xf0\xbb^\xc0" +
	"\xeb\xe8PB\xd0\xd2\x93\xe3\\~\xc0\xa7\xd0\xa1\x84z" +
	"\xc45\xc0\xa7\xd1\xa1\x84\xa9\x88\xd7\x01>\x93\x0e%L" +
	"G|\x0a\xe0s\xe8P\xc2,\xc4\xa7\x01>\x9f\x0e%" +
	"\xcc\xc5\xf6\xcc\x04|!\x1dJX\x80\xf4s\x00_\x02" +
	"xr\xb2~.x\x11\x8e\xc3|\xc0\x1f\x03<%E" +
	"?\x17\xbc\x14\xfb\xbb\x04\xf0U\x80\xa7\xa6\xea\xe7\x82W" +
	" \xbe\x1c\xf0\x0d\x80\xf3\xbc~.x\x1d\x86*\xd6\x02" +
	"\xbe\xc5b!\xc4\xae\x1f\x0b\xde\x8c\xaf\xdf\x00\xf0v\x8b" +
	"\x85\xe9\xd8k\xac\x12$\xd5\xadx\x15Z\xf8\x94\x8b\x82" +
	"\xeaq+^\xfa\x94D:\x82\xcdU\x92\x8c:{\x13" +
	"\xd0\x04U+Sd\xda\xef\x00\x9f\x09h\xf5^\x0a\x8b" +
	">b\xd3\xecY\x14\xfa\x94\x09u\x16\x85>qb:" +
	"\x97B\x9d^\x89>\x8b\"\xd6\x8bX\x0f\x9f#\xfd\x19" +
	"X\xa6\xe1\xc1\x0fj\x8a\xa9\x90~\x1bke\xea\xb7\xb9" +
	"\x8b>\xccao>\x99\xb2\xe5|(\xfa\xaarV\xbd" +
	"FSUS]U\xa1\xca\x81\xe7\xdcQS\xb3-i" +
	"FK\xc5\x98\x9a\\? \xb851|\x07\x81-|" +
	"\x91\xdd\x90\x88\xc0X\x8a\xfe\xeb\x85\xa0n.\xa7\xee\xf9" +
	"\\\x86n\xf0\xc7\x00^K\xdf\xf3\xb9\x1a\xc9\x97\x03\xbe" +
	"\x81v\xcb\xafC\xf7\xf8*\xc07\xd1\xf7|nD\xfa" +
	"\xb5\x80o\xa1\x8b\xeanF\xad~\x13\xe0;\xe9\xa2\xba" +
	";P\x8b6B\xa1\xe1\xa2\xba\xbb\xf0=\xdb\x01\x7f\x9d" +
	"\xbe\xe7s7~wg$\x14\x1av\xcb\x1fD|?" +
	"\xe0\x87\xe9{>\x0f\xa1\xfdd\x84H;u\xd0\xe5\xc5" +
	"1\x0c\xb5\x1a\xa1\xd0\xc4\x8e\xba\xbc8\x89\xed1B\xa1" +
	"I\x9dty\xf15j\xe9_\x02~\x06\xf0\xce\x89\xba" +
	"\xbc8\x8d\xe3\x16\x09\x91F3\x19\xeb\xbeBz\x9d\x99" +
	"|\xf2Q.\xfcH\x95Jj\x171-YzeD" +
	"\xd7\xd06\x9d:0\x1d\x85\xf3\xab\x92OP\xeb\x0b\xb8" +
	"t\xcf\xad\x92\x97\xb6\xf5\xdc\x8a\xec\x11TR_\x80\x7f" +
	"\xa0>\xac\x8cT|T\x02\xa8,\x94{\xa9\xf3#^" +
	"!\xa0\x15\x99\x0e\xe7\xc4ZS\xa7\xc8\x06c\x10Kn" +
	"\xa4\xda\x8a\xf6j\xba~3RB,=\xca\x9das" +
	"+\x81\xb6\\\x82\x8d\x1b\xfcpoB\xd3J(\xad\xd6" +
	"\x05a)\x07z\xe9!\xc1\xdb&\x1d\x1fL\xe51\xb2" +
	"P\x9b H\xde\x16j\x14\xb6T\xd7\xaa\xf9\x12<\xb9" +
	"\x8a\xe2m5O.\xb9\xb1\xd7\xca\xcdw\xd4\x04\xf3\xf7" +
	"\xc7\\\xab\xdf)H\x9eQ\x8a&\xfeo\xa6\xde\xb6\xf5" +
	"r\x9c\xc9\x82\xa0\xbaDAuW9\xc5@0\xc1\xab" +
	"\xa7\xc5S\x15P\x9d\xc6\x0d\x10\x91\xfbd\x0b\xa9;\"" +
	"\xc3\x92|o!u\x1dd\xd8\x12=0\x91\xca\xd1\x0c" +
	"\xc5%\xa3\xaf\x8e\x0d\x05%S\x8eeP\xe9\x98\xe1\x02" +
	"\xff'\x0a\x8d\xcc\xcb\x96\xef\xd3m\x0c\x88M\xcb\xa1\xca" +
	"A_\xa8\xb2>G{k$\xc1;*\xc8\xd9\xa2\xab" +
	"\xc36\xf5\xe0\x99\x96\x81&\xfa\\\x9a\xa0\xb5)\xe4n" +
	"$\xd4\x1bn\x1cj\x0d\xa7\xb2\xd6p*\xcb\xccJ\xa5" +
	"\\\xa4-\x97\xf9\x8cm\xd7.T\xa4&\xf7\xbe\xe7\xb2" +
	"B\x1f\x99\xac\xd0\x873\xe6{\xdf\xb3\x18\xf7\xbeg\x18" +
	"\xa9m\xfa\xb9F\xc3\xde1\xc9'\xf6\xe6`\x1c\xd73" +
	"\x15-k\xa3\xfaR\x82\x875sE\xabW\x8b\xf5\xe2" +
	"\x85\xe4\xc6\xdbW\x0d(\xba\xff\xd9\x0bGc.\xfe\xa8" +
	"+I\x82,T\x8a\xc0>A\x12\x88\xe5\x1a=fR" +
	"v\xaeaP\x92\xd0\xa8\xfb2\x0c\x9b\xcc<\x98\x0d\x0a" +
	"\x1e\xdf4\xca\x9e\xca\xe2$\xfaw[+\xa3\xa3\x17>" +
	"_MP\x155\x16O\x8a\xdaJ}?\xdd=@\xeb" +
	"\x01\xa0\x96\x99\x02\xda\xcd\xdeI\x16\xd7\xda=\x92\xe9\xa2" +
	"\xab\xe9\xdd\x0fL;=\xa3\x95\xb1\x8e\xb0\xb8\xcfi\xd8" +
	"\xba\xd1v\xba\xadE\xd3\x15DS\x89*\xb9Y!\xca" +
	"\xe6C\xd9\xf9\xbe\xd0]j\xcdT)nnd\xe87" +
	"\x02\xf3F\xa2\xf9\x09\xa2\x0fx\x0f,\xa8\xb0\xa6\xebK" +
	"\xbd\x14L\xceT09S)\xd3\xb8&\x15T6?" +
	"\xe0SR\x8d\x04\x94\xfaT\xd085\x80\xa7\xa5R\x9a" +
	"\xeeT\xc4\xeb\x00\x9f\x99Ji\xba\xd3\xf1\xf5S\x00\x9f" +
	"\x93Ji\xba\xb3R\xb1\xc4\x07\xe0\x0bS)Mw\x01" +
	"\xbeg\x0e\xe0KR)Mw\x11\xe2\xf3\x01\x7f,\x95" +
	"\xba>b)\xe2\x0b\x01_\x0ex\x87\xf6\xba\xa6\xbb," +
	"u\"h\xea\x80\xaf\x05\xbcc\x07]\xd3]\x8d\xf4\xcb" +
	"\x01\xdf\x00x\xa7\x8e\xba\xa6\xbb\x0e\xf1U\x80o\x02<" +
	"\xb1\x93\xae\xe9nL\xc5\x12\"\x80o\x01<)\xf1\xff" +
	"a\xef}c\xe4\xa8\xce=\xff\xaan\xbb\x9b\x04H\xdb" +
	"\xe3\x9e\x09pI\x1a\x1c\x93\x98\x89I\xf0x\x9c\xc0\xc4" +
	"\xdc\xf6\x8c\xc7\xe0\x99\xcc\xc0xz\x1c\xec\x89\xb9\xd7\xd5" +
	"]\xa7g\x8a\xa9\xaejWU\xcf\xbf\x98\x8c!&1" +
	"\x09$8\xb1\x13\x93@b\x13s\xafs\xe5Hp\x05" +
	"\xfa\xc1\x95\xd1\xcfH\xb6\x16\"\xfb\xaeY\xe1\x95Y\x19" +
	"\x09$\x90\xcc.\x91@KtaEvV\xcfs\xba" +
	"\xea<U]=]\xedd\xf7\xbe\xd8}c\xb9?s" +
	"\xfatuu\x9d\xff\xdf\xe7\xfb\xf0\x99\xee\xef[\xf20" +
	"S\x07\xfe<\xf0\xcf\\\xc9g\xba\xcf\xe1\xe7>\x0b\xfc" +
	"\x04\xf0\xd4g\xf8\xca\xf8\xc5\x16\x98I\x1f\x07\xfe2\xf0" +
	"%)\xbe2>\x85\xe5O\x02?\x0b|\xe9\x12\xbe2" +
	">\x83\xe5O\x03?\x0f\xbce)_\x19\x9f\xc3\xf2\xaf" +
	"\x01\x7f\x13\xf8\xb2\x16\xbe2~\x03\xcb_\x00~\x11x" +
	"z\x19_\x1a\xbf\x83\xe5\xdf\x06\xfe>\xf0\xd64w\xcc" +
	"\xfa#\x96\x7f\x0f\xf8G\xc0\xdbZ\xb9c\xd6\x9f\xb0\xfc" +
	"\x87-qyxYL^\xfa\xd96n\x98\xf5g," +
	"\xfe\x09\x14\xbf\x0c\xf8U\x9f\xe5\x86Y\x8b\x97\xe1\xb9\xce" +
	"\xb2\xb8\x9c[\x02\xfc\xea\xab\xb8a\xd6\x95\xcb\xa0\xfc\x15" +
	"\xc0\xaf\x02~\xcd\xd5\xdc0\xabu\x19,\x10\x96\x00\xbf" +
	"\x16\xf8\xdf\\\xc3\x0d\xb3\xae^\x06O\xdbU\xc0W\x00" +
	"\xbf\xf6o\xb8a\xd6\xf5\xcb\xe0g\xb9\x16\xf8J\xe0\x9f" +
	"\xbb\x96\x1bf\xdd\x80\xf5\\\x07|\x15\xf0\xcf\x7f\x8e\x1b" +
	"f\xdd\xb8\x0c\x1e\xab\x95\xc0;\x81g>\xcf\x0d\xb3V" +
	"c\xf9U\xc0o\x01~]\x86\x1bf\xad]\x06\x0b\xa2" +
	"\x9b\x81\xaf\x03~\xfdu\xdc0\xeb\xd6e\xa8\xa7\x02\xde" +
	"\x0b|\xf9\xf5\xdc0\xab{\xd9\xac$\xe5\xd6\x03\x1f\x00" +
	"\xfe\x85\xe5\xdc0\xabo\x19<\x0e\x9b\x80\x8f\x00_\xf1" +
	"\x05n\x98\xb5\x19\xf9\x10\xf0\xed\xc0oX\xc1\x0d\xb3\xb6" +
	"\xe1un\x05\xae\x02\xff\xe2\x0d\xdc0K\xc1\xfb\xb0\x03" +
	"\xb8\x0e\xfcK_\xe4\x86Y\x1a\xde\x07\x15x\x19\xf8\xca" +
	"/q\xc3\xac\x12\xd6\xa3\x03\x9f\x06~\xe3Jn\x98U" +
	"\xc1z\x1c\xe0\xbb\x81\xb7\xdf\xc8\x0d\xb3\xee\xc3\xfb0\x0d" +
	"|\x0f\xf0/\xb7s\xc3\xac\xfb\xf1>\xec\x02\xbe\x17\xf8" +
	"*\x99\x1bf=\xb8\x0c\x16\x86{\x80?\x0a\xfc\xa6/" +
	"s\xc3\xacG\x90?\x0c\xfc \xf0\xaf\xac\xe2\x86Y\x07" +
	"\xf0\xfb\xee\x07~\x08\xf8Wo\xe2\x86YO`\xfd\x07" +
	"\x81\x1f\x01~\xf3W\xb8a\xd6\xe1e\xd0=<\x0e\xfc" +
	"(\xf0\xd5_\xe5\x86YO-\x83fw\x08\xf81\xe0" +
	"\x1d7s\xc3\xac\xdf\xe1\xf3v\x14\xf8\xb3\xc0\xd7\xac\xe6" +
	"\x86Y\xcf`\xfd\xc7\x80?\x0f\xbc\xb3\x83\x1bf=\x87" +
	"\xfci\xe0\xc7\x81\xaf]\xc3\x0d\xb3^\xc0z\x9e\x07~" +
	"\x12\xf8\xd7:\xb9a\xd6K\xc8O\x00?\x0d\xfc\xebk" +
	"\xb9a\xd6+x\x9d'\x81\x9f\x05~\xcb\xd7\xb8a\xd6" +
	"\x19\xbc\xcf\xa7\x81\x9f\x07~\xeb\xd7\xb9a\xd69\xbc\x0f" +
	"\xaf\x01\x7f\x13x\xd7-\xdc0\xeb\x0d\xe4\x17\x80_\x04" +
	"\xfe\x8d[\xb9a\xd6;\xf8\xbc\xbd\x0d\xfc}\xe0\xeb\xba" +
	"\xb8a\xd6\x1f\xf1\xfa/\x02\xff\x10\xf8m\xdf\xe0\x86Y" +
	"\x1f`=\xef\x03\xff\x04\xf8\xdf\xae\xe3\x86Y\x1f#\xff" +
	"\x08\xf8\xa2tL^\x9a\xbd\x8d\x1bf\xc9\xe9\xbc$\x0d" +
	"\xa7\xe3r\xee\x0a\xc0\xeb\xff\x96\xfbe}*\x8d>l" +
	"\xc0\xd3\xc0\xbb\xb3\xdc/k)\xf2%\xc0\xaf\x05\xde\xb3" +
	"\x9e\xfbe]\x8d\xfc*\xe0+\x80o\xe8\xe6~Y\xd7" +
	"#\xbf\x0e\xf8*\xe0\xbd=\xdc0\xebF\xe4+\x81w" +
	"\x02\xdf\xb8\x81\x1bf\xadF~3\xf0u\xc0o\xef\xe5" +
	"\x86Y\xb7\xa6\xe16w\x02_\x0f\xfc\x8e\x8d\xdc0\xeb" +
	"\xb64<\xe6\xeb\x80o\x02\xbe\xe9vn\x98\xb51\x0d" +
	"\xb7g=\xf0\x01\xe0}wp\xc3\xac\xbe4\xdc\xceM" +
	"\xc0G\x80\xf7o\xe2\x86Y\x9b\xb1\xfe\x01\xe0[\x81\x7f" +
	"\xb3\x8f\x1bfm\xc1z\x86\x80o\x07>\xd0\xcf\x0d\xb3" +
	"\xb6\xa5\xa1\xd9\x8d\x00\xdf\x01|0\xc6\x0d\xb3\xeeI\xc3" +
	"\xe3\xb9\x15\xb8\x0a\xfc\xceor\xc3,%\x8d\xcd\x17\xb8" +
	"\x0e\xfc\xae\x01n\x98\xa5\xe1\xf5\x8f\x03w\x80\x0f\x0dr" +
	"\xc3\xac\x9d\xf8\xb9:\xf0i\xe0\x9b\xe3\xdc0\xab\x82\x9f" +
	"[\x06\xbe\x0b\xf8\xf0\x9dU\xc3,\xac\x7f\x1a\xf8\x1e\xe0" +
	"\xb9\xbb\xb8a\xd6\xfdX\xcf.\xe0{\x81\x8f\x0cq\xc3" +
	"\xac\x07\xb1\x9e\xdd\xc0\x1f\x06\xbee37\xccz\x08\xeb" +
	"\xd9\x0b|?\xf0o\x0ds\xc3\xac}i\xf4!\x04\xfe" +
	"8\xf0\xbbs\xdc0\xeb1\xbc\xfe\x83\xc0\x8f\x00\xdf:" +
	"\xc2\x0d\xb3\x0e\xa7\xa1\x9b?\x04\xfc\x18\xf0m[\xb8a" +
	"\xd6\xef\xf0\xfe\x1f\x05\xfe,\xf0\xd1oq\xc3\xacg\xf0" +
	"\xfe\x1f\x03\xfe<\xf0o\xdf\xcd\x0d\xb3\x9e\xc3\xfb\xf94" +
	"\xf0\xe3\xc0\xb7o\xe5\x86Y/ \x7f\x16\xf8\x09\xe0\xf7" +
	"l\xe3\x86Y/\xe2\xe7\x1e\x07\xfe2\xf0\xbf\x1b\xe5\x86" +
	"Y\xa7\xb0\xfe\x13\xc0O\x03\xff\xfbos\xc3\xacW\xf0" +
	"\xfa_\x06\xfe\x1a\xf0\x1d\xdb\xb9a\xd6\xabx\xdfN\x03" +
	"?\x0f\\\xb9\x87\x1bf\x9dC~\x16\xf8\x05\xe0\xf9\xbf" +
	"\xe3\x86Y\xafc=\xe7\x81\xbf\x0d\xbc\xf0\xf7\xdc0\xeb" +
	"-\xe4o\x02\x7f\x0f\xb8\xba\x83;f\xbd\x8b\xfc\"\xf0" +
	"\x0f\x81\xb3\xd5\xdc1\xeb\x03\xe4\xef\x03\xff\x04xQ\xe1" +
	"\x8eY\x1f\xe3\xef\xf2\x11\xf0E\xad1y\xe9\x98\xca\x1d" +
	"\xb3\xe4V\xf8\x1d?\x01~\x19\xf0q\xc6\x1d\xb3\x16\xb7" +
	"\xe2\xf0\xdb\x0a\xc3/p\xad\xc8\x1d\xb3\xael\x85\xee\xf9" +
	"\x0a\xe0W\x01\xbfw\x8c;f\xb5\xb6\xc2\xf7Z\x02\xfc" +
	"Z\xe0\x13\xe3\xdc1\xeb\xeaVl\xd7\xc0W\x00\xd75" +
	"\xee\x98u=\xf2\xeb\x80\xaf\x02^\xba\x97;f\xdd\x88" +
	"\xf5\xaf\x04\xde\x09\xdc\x98\xe0\x8eY\xab[1\xf9\x17\xf0" +
	"u\xc0M\x9d;f\xdd\x8a\xd7y\x0b\xf0^\xe0\xe5\x12" +
	"w\xcc\xea\xc6\xfa\xd7\x03\x1f\x00\xbe\xd3\xe0\x8eY}x" +
	"\x9d\xbd\xc0\x87\x80[&w\xcc\x1al\x85\xe7a\x13\xf0" +
	"\x11\xe0v\x99;fm\xc6z\x86\x80o\x07\xee\xecL" +
	"\xcb\x0e\xb4\xdfV\x1cf\x81\xab\xc0+VZ\xae@;" +
	"\xc5\xf2;\x80\xeb\xc0'\xed\xb4<\x09\xed\x14\xaf\x7f\x1c" +
	"\xb8\x03|\xcaI\xcbS\xd0N\x91\x97\x81\xef\x02>]" +
	"I\xcb\xd3\xd0\x1e\x91O\x03\xdf\x03|f2-\xcf@" +
	"{\xc4\xeb\xdf\x05|/\xf0\xd9Eiy\x16\xdac+" +
	"\x0c\xbf\xbb\x81?\x0c\xfc;Si\xf9;\xd0\x1e[\xb1" +
	"=\x02\xdf\x0f|\xd7tZ\xde\x05\xed\x11\xeb\x7f\x14\xf8" +
	"\xe3\xc0\xef\x9bI\xcb\xf7A{l\x85\xe7\xff \xf0#" +
	"\xc0\xbf;\x9b\x96\xbf\x0b\xed\x11\xeb9\x04\xfc\x18\xf0\xb9" +
	"\xef\xa4\xe59h\x8fX\xcfQ\xe0\xcf\x02\xdf\xbd+-" +
	"\xef\x86\xf6\x88\xe5\x9f\x06~\x1c\xf8\xfd\xf7\xa5\xe5\xfb\xa1" +
	"\xdda\xf9\xe7\x81\x9f\x04\xfe\xc0w\xd3\xf2\x030<\xe2" +
	"\xfd<\x01\xfc4\xf0\xef\xcd\xa5\xe5\xefA\xfb\xc2\xf2/" +
	"\x03\x7f\x0d\xf8\x9e\xddiy\x0f\xb4/\xac\xff,\xf0\x0b" +
	"\xc0\x1f\xbc?-?\x08\xed\x08\xcb\x9f\x07\xfe6\xf0\xef" +
	"?\x90\x96\xbf\x0f\xed\x08\xeb\x7f\x13\xf8{\xc0\x7f\xf0\xbd" +
	"\xb4\xfc\x03hGX\xfe\"\xf0\x0f\x81\xef\xdd\x93\x96\xf7" +
	"B;\xc2\xfa\xdf\x07\xfe\x09\xf0\x87\x1eL\xcb\x0fA;" +
	"B\xfe\x11\xf0Em1y\xe9\x0f\xbf\x9f\x96\x7f\x08\xed" +
	"\xa8\x0d\x86\xc16\x18\x06\x01\xff\xe8\x07i\xf9G0\x0c" +
	"\xb6A\xf5\x97\x01O\x03\x7fxoZ~\x18\x86\xc16" +
	"\xb4#\x05~-\xf0G\x1eJ\xcb\x8f@s\xc1\xf2W" +
	"\x01_\x01\xfc\xc7?L\xcb?\x86\xe6\x82\xe5\xaf\x03\xbe" +
	"\x0a\xf8O~\x94\x96\x7f\x02\xcd\xa5\x0d\x87A\xe0\x9d\xc0" +
	"\x1f}8-?\x0a\xcd\x05\xcb\xdf\x0c|\x1d\xf0}\x8f" +
	"\xa4\xe5}\xd0\\\xb0\xfc-\xc0{\x81\xff\xf4\xc7i\xf9" +
	"\xa7\xd0\\\xda\xa0\xd9\xad\x07>\x00\xfcg?I\xcb?" +
	"\x83\xe6\xd2\x86\"\x1b\xe0C\xc0\xf7?\x9a\x96\xf7Cs" +
	"iC\x91\x0d\xf0\x11\xe0\x07\xf6\xa5\xe5\x03\xd0\\\xda\xe0" +
	"\xf1\x1c\x00\xbe\x15\xf8\xcf\x7f\x9a\x96\x7f\x0e\xc3 \xd6?" +
	"\x02|\x07\xf0_\xfc,-\xff\x02\x86;\xac\x7f+p" +
	"\x15\xf8\xc1\xfdi\xf9 4#\xbc\xfe\x1d\xc0u\xe0\x8f" +
	"\x1dH\xcb\x8fA3\xc2\xcfU\x81\x97\x81\xff\xf2\xe7i" +
	"\xf9\x970[m\xc3\xd9*\xf0i\xe0\xbf\xfaEZ\xfe" +
	"\x15\x0cwX\x8f\x03|7\xf0\xc7\x0f\xa6\xe5\xc7a\xb6" +
	"\x8a\xf7a\x17\xf0\xbd\xc0\x9fx,-?\x01\xcd\x08\xaf" +
	"s\x0f\xf0G\x81\xff\xfa\x97i\xf9\xd70+\xc5z\x1e" +
	"\x06~\x10\xf8o~\x95\x96\x7f\x03\xb3\xd26h.\xfb" +
	"\x81\x1f\x02~\xe8\xf1\xb4|\x08f\xa5mOBs\x01" +
	"~\x0c\xf8\xe1'\xd2\xf2ah.\xf8\xfb\x1e\x05\xfe," +
	"\xf0'\x7f\x9d\x96\x9f\x84\xe6\xd2\x06\xc3\xe3\xd3\xc0\x8f\x03" +
	"\xff\xedo\xd2\xf2o\xa1\xb9`\xf9\xe7\x81\x9f\x04~\xe4" +
	"PZ>\x02\xcd\xa5\x0d\x1e\xc3\x13\xc0O\x03\x7f\xeap" +
	"Z~\x0a\x9a\x0b\xde\x9f\x93\xc0\xcf\x02\xff\x87'\xd3\xf2" +
	"?\xc0l\x12\xef\xcfi\xe0\xe7\x81\xff\xe3o\xd3\xf2?" +
	"\xc2p\x84\xf5\xbc\x06\xfcM\xe0G\x8f\xa4\xe5\xa30\x9b" +
	"\xc4\xf2\x17\x80_l\x0b$\xe8\xc0\x93\x11\xa7B\xf7\xcd" +
	"|\x16*\x0a9o\xa4\xe6I!\xfeE)\x85\x9e4" +
	"*\xe4p2\xa5h\xd44\xcdr\xb4\xa2Rp\xa4T" +
	"QW\xc6\xe4\xcb\xa4\x98|\x19\x94!\xa7\x9c\xf0\xc2\xaa" +
	"\xeb\x8bT\x19\xb3\x98\xedXRR+P\x81\xcd\x98\xad" +
	"\x9b\xcej\xc9/&q\xb1<\xa9\xd9Z\x9e\x1c\xc3\xb8" +
	"\x7f\xe9\x08\x7fCG\xdd7\xac\x09\x7f\xc3\x9a\xbao\xe8" +
	"\x0c\x7fCg\xdd7\xac\x0d\x7f\xc3\xda\xbao\xf8Z\xf8" +
	"\x1b\xbeV\xf3\x869\xa52\xe6/Y\xeb1\x95R\xc8" +
	"Q\xf2\\^\x19\xb3\xb5Y\xe28\xa4`\xd5t\xa3\x1c" +
	"\xca\xd0J3yel\xca\xa2~xL-\x8d)R" +
	"\xbc\xe4\x04\xa1%e\x95\x02Sj\xff\x90\x97\x92\xa6:" +
	"S[<I\xcf\xaf\xf3\x8a\xa5\xc2\x07\xfb\xdd\xf7,u" +
	"R\xd1+\xf4\x0b\xe5Ms\xc2'ov\x02\xf2f\x8f" +
	"\x89C\xef9\xcc\xef\"\xb6\xe6\xaa\x99\xe3\xab\x0fk\xd5" +
	"p\x8by\x86[\x9e\x0b\xc7\xb4c)jiL\xca\xf8" +
	"\x04\xf9\x82'\xc9\x97\xf5kq\xe2\x05\xab^:5\xfe" +
	"\xd2\x0e\xb8t\xf9\x0f\"3*\xd3\x95\x19\xfa\x08\xa8\x9a" +
	"\xedhRJ\xd7\x99\xb8n\xd5t\xecZc\xaf\xb8j" +
	"Q\x1d{a\xc2\x99)\xfb]\xc7\xb4\xc2\x84\xce&\xa5" +
	"$\xd3\x85,\x80\xe9\xac\xa4\x96\xc6\x1c)I\x9f\xa8*" +
	"\xf5\xfd\xdc\x194\x05\x13\x9a\x1e.4T\xa4d\xc9Y" +
	"\x1dJ;B\xe9\x9aP\xda\x19\xa4%xvV\x87\xd2" +
	"\x8eP\xba&\x94\x92z\xcdB\xc5f\xc5\xa2\x94d\xa2" +
	"\xc3\x89\x17\xc9\x17\x9a4L\xd52iz\x9f\x80\xdd\x9b" +
	"w\x07\xe3\xe2\xd0\x82\x04Ad,j\x95\x96\xd2\x0a$" +
	"9\xa1\xa6\x165\xdd\xef\xa3P\x08\x88V\x80\x05\x1aB" +
	"F\xd7\xc6\xc6E2<\xdd\xb4\x88d\xd9\xb4\xd8\x98e" +
	"V$\xb9L\x9c\xd0\xc6\xb4B\xa8G*\xba\xbcY\xf5" +
	"]\xde\xac\x80%\x9c\xc3\x02Z\x91\xf9qf\x99v\xd1" +
	"\xb4\xe41V2U\xa6K4?\x14n\x81Kq\xd1" +
	"\xd2\xe2%\xd1\x0e\xf8m%/-\xbfW\x96\x01O\xb1" +
	".\x9b\x16\x83\xa1Dr\x1f\xf3x\x99x\x9fZf\xc1" +
	"B\xe1\x9a\xb87\x96R -\xdbR\x0c\xd2\xd6,V" +
	"\xa8IYe\xb1\x026g?\xdbYS\xcef\xba\xee" +
	"~\xd6\xe5RL\xbe<\xdc\xf6.\xe5\xebQ\xb1\xe6\x92" +
	"\xa9\x06\xfap\x0f\xfb\xa5\xfb\x19\x9b\xda\x81\xf2\xe7*\xf8" +
	"hr\x03={\\\x83\xf6\xaaFr\xcf\xb3\x82\xeey" +
	"v\xa5T2\x0d\xa6\xfa\x07i~\x0aoOhRR" +
	"\xd7\xc5\x1d,*\x93\xc4\x11v\x8a\xd1Go>\xcf\x0c" +
	"V\xd4\x9c\xa2\x94\x84\x8a|\xceu\x81\xbe\x9b\xfb\xb2\xaa" +
	"\x0cJ\xce\x04\xa8\xe3W\xd2\xe3\x01VQ\x99\xf4\x19\xd7" +
	"*\x8eS1\x98\x92\x97\xe2B\x87\x911\xcc\xb2\x08\x91" +
	"\x9e\xab\xa0\x88QD\x7f\xa2\x9b]\xa0\xb7\xf3Y\xb3\x06" +
	"\xa1\xac;|\xfc\xa3\xf2\xae\xc2\x84\xad\xcd\xd2*\x0c\xd3" +
	"\xb1\x14\xc3.Jq\x9a\xdf\x19\x0a*y\xdd\xf7Y\x96" +
	"Y`\xc5\"\x93\xe2\xe4\xe7\x03\x18\xbc7\xc0\xe0y\x93" +
	"\xe2\xa4\x07\xf6\xa0,F\x9a)\xd32jj\x04\x18\xac" +
	"\x11XM\x8d\x1e$5b\xf7\x17\xb8G\xc8jF\x04" +
	"\x8f\x92^n\xde.X\xa6\xae\xb3\xa2\x94*\xfa\x9eQ" +
	"\xc4\x81\x9f\x95C\x9dI\xa9IZ\xaf\x87}\xde\xc0\xf6" +
	"d\xc1\xb4\xacJ9hB\xed6\x9cdI\x99&R" +
	"Xf;\x9a\xc3\xa4L\xa9H\x9e\xc3l\xb9b\x91A" +
	"t\x8eM\x9a\xd0\x99\x8a\x81\x0b\xe6G\xa2\xd7\x9b4\xf5" +
	"I\xcd\x18\x93\xfc\xa7\xcfY6i\xd2\xcfR\xed\x92\xe6" +
	"hc\x01w\xec\xb9q\xa6\xe8t\xaa\x83\xad\x14\xe6\x04" +
	"\xbe(\xb2P\x7fO\xcf\xcb2\xa9\x96\xc6\xc8P\x0b\xd7" +
	"\xaa8R\x06\xbb\\_>\xf9\xb2S\x84\xb1\x9fi>" +
	"cZf\xa8J^\xd6\x99bY\xe6\x14y\xb8\xcc)" +
	"f\xd9fE\xb6\x0a\xac\xa0\x94\x95B\x92*\x9c`J" +
	"U\xf3Dy0[p\xfc\x96\x94\x8a\xa5\xd6<V\x1e" +
	"\x94I^\xd9J\xde\xf7\xc6q\xa6Y\xbai\xfa\x8c`" +
	"\xcb:L\x0f\xfdM\x86\x95\xb5\x02|\xef&\x8d\xceF" +
	"\x14\x98\x08/\x90\xbcQQ\x064\xdb\xa9k#\x1eE" +
	")\xcft\xbd\xa7R,\x0e)h\x08T_(\x1d\x1e" +
	"[,\x87\xc5\x16\xc7j\x1d\xd5\xc2L}S\xf9J\xb1" +
	"\x18\xb0\xc2^\"\xd5\x04E@\xa9\xa2\xa26g\xac\xe6" +
	"\xc6\x9e\xa4\xdc\xc0O\xe25\xd3\x15\xe2\xaf\xd8Ole" +
	"\xdc/\xf5\xd0h\xd5V\xe6\x08\xf9R\x87\xf3aY\x19" +
	"\x87\x85\x10\xe4\x7fwD\x0a\xa7\xdd\x0a\xcc\xa5\x96\xcc\xaf" +
	"\xfb\xc6\xc8Q\xe5\xccU\x1fF\x16e\xdd1\x98\xc3Q" +
	"\x92\x8b\xb2\x88\x10\xaa_\x08\xa1<\xf1\xc0\x8b]\"\x15" +
	"\xb4\x1b\xbb\xf8R\x0fQG\xb9\x0e<\xa7\xbaHzh" +
	"\xd7\x81\xe7\x95\x16\"\x99r\x85PgZH\xcehW" +
	"\x08\xf5j\x8b\xd0Q\xa1V\"p\xc3\x02N\x15\xc1\xc4" +
	"\xdb\x81x'y\x86\x84M\xb9\xff\x9bm\"\x97'\x97" +
	"\xfc5\x91\x83p\x07yj\xee\xe9\xaf\xaa0\xa6\x03\xa6" +
	"\"\x18U\xa9\xa95q\x1c076m'\xc4$ " +
	"\x92\x1f\xdc&\xcdv\x92&\x17\xf96H\x7f\xdfS/" +
	"\xfd}m\xae\xb8E[\xbf\xfd\xe9\xef\x7f\xeb\xff\xfb\xb7" +
	"\xc8\x09\xf0\xdd \x92\x94\xabKid\xee\xe4kq\xd5" +
	"g\xcbg\xe4\xe4\xeaR\xf6\x01|4.o~\x9cH" +
	"\xaf\x1e\xeb\x10r\xae(y\x08\xff\xa2@\x93\x06\xf9f" +
	"7\x98)\xabl\xb3(\xc2\xa7\x9601NK\x98\x18" +
	"\xa7\x85(\x9f\x02\x91G\x7f\xa9D\xce\xcbei\x14\xcd" +
	"&\xe2\xf2v\x93\x87\xdc\xfbI\xf7\x93N`\xdf\x03\xe2" +
	"\x87\xc2^p\x92\x05\xb5\xb8!V\x18\x19G\x0bIh" +
	"P?\xd1ec\x93\xbb\xaaD\x8a\xb9\xce\x1eM[\x01" +
	"Y\x9a=AV\x8d\xf5=J\x17G\x8d\x18\xcfZ\x1b" +
	"]!~\xf8\x85\x84\x99\xcc\xf9\x15l&\xc6\xd6\xe6\x1c" +
	")\xe5\x8b\xbdm\xac\xc2ev\xc5\xb2X\x81G\xe3S" +
	"\xc3\xc8.\x1a\xb6\xec\x89\xa3\x82q\xcb\xc20\xb2\xa5\x8e" +
	"ad\x8b/\x9e\xd9\x8d\x1b\xfa\x1cr/\x9e\xd9\x0d\x8b" +
	"\xbe\x1e\xc3\x00\xbcpf/,\xfaF\xfcX\x11\xdc\xeb" +
	"\xba\xf3\xacF\xd9\xbd\x08\xeeu\x0d#\xd7by\x11\xc4" +
	"\xeb\x1aF\x06\x82x\x83\xa1\xb0\x9e\xa8>\x1e\xb9=\xc1" +
	"\x00\x1e\x0c\xab\xb6\xd8\xecl0\x94#hs:_0" +
	"\xa1[\xf0\x17\xaa\x97\x94\xb2~,\x1b+\x95\xdd\xbeu" +
	"@s\x9f\xe6&\x9c\xf3\xbc~\xe6\xc1vj\x9dW\xed" +
	"g\x1e\xea\xa19\xf8\xab\x9d\xeb#\xfd\xc4:\xaf\xbe\x12" +
	"0EW\x1d5\xb2@\xd3\xd2\xc6\x82]ncwl" +
	"X\xa2\x04\x027\xa9k^\x8f/\x84\xc4}d\x9f\xc3" +
	"\xd0\x0f\x11B\xe2>\xb2/`y\x11B\xe2>\xb2/" +
	"\"\x17.{\xee#\xfb\x12\xd6s\x1c\xf8\xcb40\xfc" +
	"\x14\x96?\x01\xfc4\x0d\x0c\x7f\x05\xf9I\xe0gi`" +
	"\xf8\x19\xacG\xb8\xf5\xb9\xa1n\xafby\x11\xa2\xe2\x86" +
	"\xba\x9dC~\x16\xf8\x05\x1a\x18\xfe:\xd6CBW." +
	"wCW\xfc\xee~n\xa8[\xd0\xdd\xcf\x0du{\x07" +
	"\xeb\x11!-n\xa8[0\xa4\xc5\x0du\xfb#\xf2\x8b" +
	"\xc0?\x94k\xc7\x9fLY\xb1J\xde^\xe5\x1cn\xf5" +
	"\xacV\x02\xaf\xf3\xbe\xd2\x1d\xfe\xbfv\x04Jw\xf8K" +
	"\xaf\xf1\xffuM\xa0\xf4\x1a\x7f\xe9N\xff_;\x03\xa5" +
	";\xfd\xa5\xd7\xfa\xff\xba6Pzm\xbe\xb9\xa0\x8c>" +
	"#\xc7\xb2\x86\x1a\xe2c\xd4\xde\xc0\xe8\xc2\xd7\xbb7\xeb" +
	"j\x8e\xb2\xebaV\x0a\xc9@\x109_\xc3\xbd$_" +
	"C\xd5\xcc\xd9=@3j\x17\x1cv\xd3\x03OO5" +
	"\xa7P\xc6r#\xe3\xc9U^\x13\xf5*\xdb\x85\xce\x9a" +
	"\x9c\x01\xfav\x9b\xc3\x95\xde\x89\xa8\xf3\x03/W\xbd\x14" +
	"0\xe0n\x17\x8b\x12\xcf\x7f;Ob;\xdc\xc9\xd0\x1b" +
	"\xfd\xc4U\xdb]'\xbe\xd3N\\\xb5\xddu\xe2\xbb0" +
	"\xab{;.o~\x9fd\xef\xffc\x0b1%\xa9j" +
	"\x85\x97~\xd0BLI\xaaB\xe1\xa5\x7f\xca\x0bS\x12" +
	"\x9f\x89)z\xf6;&3\xa4\xa4C6\xef\x80\xea\xac" +
	"H\xbb`\xdf\xdcfaW\x09\xccrS0Ke)" +
	"\xa9\xd8M%\x14\x87\x861\xcc2xw\xeb\xaf2\xc3" +
	"\x16\x99\xde=}\xa9\x85\xae2\xab\xf7\xf4T\x0b]e" +
	"\xc6\xc3V\x99\xd5{z\xa6\x87\xae2\xab\xf7\xf4\xd5\x9e" +
	"\x06\xab\xcc\xc02\xb2)\xcf\x8d\xe0\x9a4J\xfe\x0b\x83" +
	"\xcd\xdcel\xc8\x98\xee\xea\x81\x8c\xea\xfdd\x00wo" +
	"\x94/\xdf\x83;\xaa?\xd2\x1e\xb6d\xea\x12\x03\xb87" +
	"\xaa\x1f\xe8\x12\xd3\xf3y\xcb{\xe8\xa5\xda\xecP\x7f\x99" +
	"\xfd\xdb\xa2z\x0a}V\xea\xc3\xd9W\xbc\xc0\x02\xb6<" +
	"\xd7\x84\xd9\xf2t\x89\x16\xe0\xf6\x06\x7fj\x17\x06\xf4\xde" +
	"S\xf1q\x0f\xb1\xeaq\x9f\x8a?\xf7S\xab\x1eW\x99" +
	"\xbf\x18\x06\xb6a\x18\xd7\xae\xa0!\xa8\x9f\xc2\x10N\xe1" +
	"\x9d\xee\x0a\xf3\x97b\x08\xaa\x98\x0a\xbb!\xa8\xad\xc8\xbd" +
	"\xa905\x1f\xf7;'\xa5J\xa6\xea\x9d\xb3z3$" +
	"\xf7\\\x82.@\xabl\xce\x9c2\xd0A\xda-\x83\xaf" +
	"G|\xfb\xd8!s\xb0%\xf37\xfe\xa9\xb7c\xa7\xca" +
	"\xceF\xde\x07\xba])\xa0\xd1x\x9c[1\x87G\xc4" +
	"\x89\x8d\xa0Q\x1a\x12W\xfd5N\x0d\xd3\x90\xb8\xea\xa3" +
	"wf\x98\x86\xc4U\x1f\xbds\xc34$\xae\x1a)\xf5" +
	"F\x07\x0d\x89\xab\xe6\x1dx\xab]\xf4\xa5\x91\xe3\xda#" +
	"\x07\x85\x87E\xb0\xfbb\xe2\xfd\xb1\xe6Q\x0c\x19\x95)" +
	"\x0c4\xbb\xe8MR\xfb\x12\xd7HR\xae7\x11\x97s" +
	"C\x092I\x1dL\xa0\xbe\x0f\xf8H\x82LR7'" +
	"\xe0a\x1a\x00\xbe5A\xfd\x18\x90\x0f\x01\xdf\x9e\x10Y" +
	"\xda\xb7!\x1e\x01\xbc#A\x1e\xed{\x120\xc7\xdb\x0a" +
	"\\M\x90g[\xc1\xf2\xdb\x81\x8f'\xc8\xb3\xcd\x12\xcb" +
	"%)\xb7\x03\xb8\x9e A'\x1a\xd6\xa3\x02/'H" +
	"\xd0I)\x01mD\x07>\x9d A'\x15,_\x06" +
	"\xbe+A\x82Nf\x90;\xc0w'H\xd0\xc9}\x09" +
	"L7\x0e|o\x82\x04\x9d<\x98\xb8W\x92r{\x80" +
	"?\x9a A'\x8f$`\x19\xb9\x17\xf8\xfe\x04\x09:" +
	"\xd9\x87\xfca\xe0\x07\x13$\xe8\xe4\x00^\xe7~\xe0\x87" +
	"\x12$\xe8\xe4\x09,\x7f\x10\xf8\x91\x04\x09:9\x8c?" +
	"\xcb\xe3\xc0\x8f&H\xd0\xc9S\xc8\x0f\x01?\x96 A" +
	"'\xbfK\xc0\xdc\xf8\x08\xf0\xa7\x13$\xe8\xe4\xf7X\xfe" +
	"(\xf0g\x13$\xe8\xe4\x19\xbc\x9e\xa7\x81\x1fO\x90\xa8" +
	"\x93\x17\xf0><\x0f\xfcd\x82D\x9d\xbc\x84\xf7\xed8" +
	"\xf0\x97\x13$\xea\xe4\x14\xd6s\x12\xf8\xd9\x04\x89:9" +
	"\x93\x80u\xf0i\xe0\xe7\x13$\xea\xe4\x1c\xd6s\x16\xf8" +
	"\x85\x04\x89:y=\x91\x87\xb5\x03\xf0\xb7\x13$\xea\xe4" +
	"-,\x7f\x01\xf8E\xe0\x9f\x97y\xd4\xc9;\xf8\xbd\xde" +
	"\x04\xfe\x1e\xf0\xcc\xe7x\xd4\xc9\xbb\xf8\xb9\x17\x81\x7f\x08" +
	"\xfc\xba\xcf\xf3\xa8\x93\x0f\xf0:\xdf\x07\xfe\x09\xf0\xebc" +
	"<\xea\xe4c\xe4\x1f\x01_\x94\x8c\xc9K\x97gx\xd4" +
	"\x89\x9c\xec\x97\xa4\xe1$t\xc9\x80\xbfp\x1d\x0f:\xf9" +
	"T\x12\x1e\xcfE\xc0\x97\x00_q=\x0f:\xb92\x89" +
	"\xd9\xff\x81\xa7\x81\xdf\x10\xe7A'K\x93p\xf9W\x00" +
	"\xbf\x0a\xf8\x17\x97\xf3\xa0\x93\xd6$v\xd5\xc0\xaf\x05\xfe" +
	"\xa5/\xf0\xa0\x93\xab\x91\xa7\x81_\x07|\xe5\"\x1et" +
	"\xf29\xb8\x9c\xdc\xb5\xc0W\x02\xbfq\x05\x0f:\xb9!" +
	"\x09\x97\xbf\x02\xf8\xcd\xc0\xdbo\xe0A'7\xe1\xe7\xae" +
	"\x04\xde\x09\xfc\xcb_\xe4A'\xab\x91\xaf\x02~\x0b\xf0" +
	"U_\xe2A'k\xb1\x9eN\xe0\xeb\x81\xdf\xb4\x92\x07" +
	"\x9d\xdc\x86|\x1d\xf0M\xc0\xbfr#\x0f:\xd9\x88\xdf" +
	"w=\xf0\x01\xe0_m\xe7A'}I\x94E\x02\x1f" +
	"\x02~\xf3\x97y\xd0\xc9 ^\xff\x00\xf0\xad\xc0W\xaf" +
	"\xe2A'[\x92\xf0s\x8d\x00\xdf\x01\xbc\xe3&\x1et" +
	"r\x0f\xf2\xed\xc0\xc7\x81\xaf\xf9\x0a\x0f:a\xf8\xb9;" +
	"\x80\xeb\xc0;\xbf\xca\x83N\xb4\xe4\xac$\xe5\xc6\x81;" +
	"\xc0\xd7\xde\xcc\x83Nv&-\xe8\x06\x80\xef\x02\xfe\xb5" +
	"\xd5<\xe8d\x06\x7fG\x07\xf8n\xe0_\xef\xe0A'" +
	"\xf7\xe1\xfd\x99\x06\xbe\x07\xf8-kx\xd0\xc9\xfd\xc8w" +
	"\x01\xdf\x0b\xfc\xd6N\x1et\xf2 \xf2\xdd\xc0\x1fN\xc6" +
	"h\"\xcf\xac\xa2\xa0\xb9\x7fX\xbeO_w\xee_p" +
	"\xf9tH\\\xdcP\x9d\xc9%\x0da\xdd\x9e\xd1\x8cI" +
	"mA\xa3\x15\x7f6\xdejr>\x91\x97\xd1P\xf1\x08" +
	"\x8f\xcc\xb2T\xa6;\xca&\xa6\xf8\xd5L\xe4\xa4\x82\xe8" +
	"\xa1\x0c\xad\xa48\x9aID,\xe2\x1c#\x8b\x15m\xf3" +
	"\xbf\xdcJ\x0fni\xfd\xfc\xcf\xa3\x0b\x8e\x98!Y-" +
	"3\x9aMm\xf2C\xc6\xcfp\xa3\x19\x7f\xa03\xdf\x91" +
	"\xcf9RRq\xea\x0c\xbcY\x1bSE\x09\x8d\x03s" +
	"\xee\x82\xa9\x8f/kKX\xcaV\xb6\xb3\xa2\x95K\x0c" +
	"s\xac\xd4\xe6^\xb60U\x1dSI\xde\xa0\xa4R\x14" +
	"1\xc3\x81\xc4\xb3\x81<\x11p3\xc2\xedqB\x92\xd8" +
	"\xceO)\xfa\x04|\x98$\xab\xeege4{H\x08" +
	"9\xfc\xf2\xa6P'\x9f\x90I\xcb\\Q\x9f\xa1\x9e\xf1" +
	"\xc1\x9c\x80yS\x9d\x09\xca$\xf0\xa6l\x18g>u" +
	"L\xc9\xac\x18\xce\x06\xff\x0f\x15\xdc\xda\x99\xcf\x9b\x15\xd4" +
	"'I\xd9aE\xd5*\xb6\xb7\x18\xf4\xees\xc6\x19!" +
	"\xc2\xd8\xa4^\x14&\xe5\x05\xa6\xeb[}\xaf\xb6\xf9^" +
	"\x8d6q\x06w\xc7\xe0\x1d\xa6c\xfe\xdf~F\xd9\xf8" +
	"\xb8m@\xb3\x9d&\xf7V\x84\xefB\x9d\xcd\x95\xba\x9b" +
	"\xbc\x11\xad\xd7peK\xad\xd7\x9a\xd8\x9e\x12\x17G2" +
	"df\xb9\x91J\xa8\xf5^V)\xf9207v\x85" +
	"\x9e\xd0t=<\x95hO\x83=\xbb9\xd4\xe9\x90\xfe" +
	"\"\xdc\xa1\xb6\xfeS\x9dc\x86\xda\xdd\x0d\x9f\xba\xd5[" +
	"0l\x8b]\xe33Xs\x17\x0c\xf7\xa0Q\xd8v\xe0" +
	"\xe3\xd4\xc0\x8d\xa1\x81\x9b\x0a\xbcL\x0d\xdcJh &" +
	"\x8c\xd4\xdc]\xedJ\xac\xc7g\xa4\xe6\xeej\xcf`\xfd" +
	"\xc20\xcd\xdd\xd5\xbe\x1f\x1d\xc7\x84a\x9a\xbb\xab\x1d4" +
	"Lsw\xb5\x1f\x8a\xdd\xeb3Fsw\xb5\xf7\xc5`" +
	"\xa6\xf9(\xf0\xc7\xa9\x81\xdbc1\x0c\xf0\x01~\x84\x1a" +
	"\xb8\x1d\xc6\xcf\x15\xc6h\xee\xae\xf6Sx\xfd\x87\x80\x1f" +
	"\xa3\x06n\xbf\xc3\xeb\xf7\x9c\xd1\xbc]\xedg\xf0z\x9e" +
	"\x06~\x9c\x1a\xb8\xbd\x80\xf5<\x0b\xfc\x045p{\x11" +
	"\xef\xdbq\xe0/S\x03\xb7Sh|w\x02\xf8ij" +
	"\xe0\xf6\x0a\xf2\x93\xc0\xcfR\x03\xb73h\x1c\xf72\xf0" +
	"\xd7\x80\xa7\xab\x0en\xaf\"?\x0d\xfc|,&\xcb\xad" +
	"|\xc1p\x0e/\xff5\xc0\xef\xc7\xfc\x01\x0e\xe3\xa63" +
	"\xc1fr\x1a\x8c$5,N\x04\xc18\\\xe5|G" +
	"\xdds*\xb3\x0b9z\x0a\xa5+\xb6\x1d\xd8A\xa0\xd6" +
	"/I\x9b\xed\x14\x85+\x96\xc5\x0cg@J\xf9\x07p" +
	"\x8bYlgnBJR}8\xa7\x83\x9alT\x13" +
	"\xcaG\xca\xfe\xc7%d\xfe\x0b\xe2l\x98\x15\xa5\x94\xc5" +
	"\xec\xf1zz\xf6\xf9\x922=\x10\xd0\xaffa(&" +
	"\xe9\xb4\x0d6M^f\xe0\x9bv\x84'\xc0\x9a\xe7Y" +
	"\x1d5\x9a\xab}\xc9\xfc-\xeb\xce\x7f\xf0\xaf\x17\x0e\x1e" +
	"\x88\xac\xa0\xaa&t\xc5\x7f\x1csl,\xce\xf3\xb9\xd2" +
	"\x83\xd6\x1e\x9f?\xb4w\xce\xda\xe3\xdbtr\xfd\xd6\x96" +
	"\xe2f\x149g\x8d\xb9\xe7\xac=\xfes\xd6\xb8{\xce" +
	"\xda\xe3\xf3\x8dv7\x04\xaeG~-\xf0\x95t\xb3+" +
	"\xe8\xae\xecn\x08\xdc\x84\x07\xa7\xe2\x00\xd6\xdd\x10\x08\x1e" +
	"\xc0~J\xe6\xcd;\x90\xae\xa5aZ\xd9\xa2e\x96\x06" +
	"\x02r:\xc7\x1c\xa0\xcfY\xf0\xf7\x9eS\x14_\x96\xbf" +
	"KHM\xdb\xa4\x0bL\xceQJ\x9a\xa1H\xcd\x9e\xe5" +
	"\x14MS<sS\x8a\xd3L\xce\xe6^\xcd.he" +
	"]K\x1a\xcc^@\xea\x87CM\xdd\xb4\xae\x8d\x0cz" +
	"&x\xc6\x0d+\xd27\xeb\xaasJ\x158&\x8a\xa0" +
	"`,\x97\xf5\x99!SK\xda\xa6\x11%7L\x8f\x10" +
	"?\x88|\xfa\x99\x99\x1c\xb5\x9fiz\x9f\x1d\xa7$\xc3" +
	"lg\xca=\x8eh4\xe0\x93\x8c\xcfs\x8e9h\xe6" +
	"\xc9\xfc\x18\x9eb \xb4k\x8ed\x84\xd6\xad\xaa\x83\x19" +
	"\x94\xfd\xd5\xd7\x09y\x92\x9b\xe10\x89eG\x98\xc4\xd2" +
	"\x12\x12KL#v\x073j]\xd3\x1ag\x03\x9a\xd7" +
	"lTL\x0eH\x19\xa64\x95q\xdc\xb5\x99\xca\xea\xce" +
	"\xbf\xcb1\xdf\xa2\x85\xb3\xbb\x0c\xb3d5\x9b1\xb1\x02" +
	"\x1b%\xae_\xeeU\x1d\xee\"\x09O\xdc9\xe8S\xb3" +
	"\xc4\xf5\xcb\xdd\xe1\xa6\xc9+\xbd\x1d\xee\xe7\xe0g|:" +
	".o>.\xac\xc0^\x18\x15+\x93H\x09`\x0af" +
	"\xa9l\x1a\xcc\x90\xb2\x8e\xbf\xdf\x0b\xc9\x0c3\xe7X\xda" +
	"$\x15P\xf32ur\xe0\xd4\xbdK\x1b=u\xd3\x02" +
	"\xb6\x82\x97\x94\xa6yHWf\x06\x87\xd6,ToQ" +
	"\xd3Y\xd3\x09\xc7z\x99\xce\x1c\xd6\xe7\xc4k\x1e\xb6\xd0" +
	"\xec\x1b]a>]\x16I/\x02-:Wc\xd6L" +
	"\xbb\x9cyn\x94\xdfgH\x99\x9c/\xa8\xb3\xb1\xc17" +
	"S\xd4\x8d\xd3\xe5-\x19\\\x0b\x05\x1a\xfe/\xc32\xc0" +
	"\xfcs\xe4\x0c0\xff$\xce\xfd\xe6\xc7\xb0\xed2E\xae" +
	"&\x9c\xdc\x18\x9f\x16\x9bP\xc1?\x0eep\xb6\xe6\xcb" +
	"\xb6\x07\x17*W\xdf;-\"\xac\x82\x7f\x1b2S\xbe" +
	"\xb7\x86\xdd\x80)\xd3\xd2U\xf1t1\xebn\xd3\xd2e" +
	"5\x82\x9a\xb6?\xcc@wT\xfcT\xfe\x0e \xc4\xe0" +
	"w\xde\xc2\xec\xcc\x9bLl\x03\x91\xd7\xac\xbc\x0dtW" +
	"7\xdb\x8c\x05\xdc*C\x87\x88\xe0\x16\x0a\xdd\xb5\x8b." +
	"\xe8\xb0\xcc\x8a\xa1\xe6\xca)e\xca\xb0\x17\xb4\x82W\xa6" +
	"\x0c1[}\xf1\xbaM\xef\xfe\xe7\x1f<\xb37\xb2L" +
	"\x17\xfbh\xcb,g\x99\xe5h5\xf3\x0dj\xc0\xd6\xb4" +
	"CyUV\xda\xb4\xd9gU\xea)\x16\x0fZ39" +
	"\xc5\x88\x01\xe10+\x99\x93rpM?\x1c\x92O\xac" +
	"\x8b\xcc3p\x0b\x90\xed\xa4\x8b-\xd7\x869\xfa\xb4\xb1" +
	"\xcc\x0a\x9a\xa2\x0f&\x99=\x16!\xd8\xa0\x87\xaa\xf3\xaa" +
	"\x0f\xfa\x83\x169\xdcw\xb7\xac\x1e\xe9h\x90\xd86;" +
	"\xce\x87k\xcfO\xd0\x1e\x1b\xf1e\x19\xc7\x09[\xae," +
	"e\xfc\x0a.[\x99\xa1\xef\xaa\xe3\xb5\x17\xd5e:\xf8" +
	"\x93\xcf.\x90\xc2m F\xdc\x10\xb3\x96\x7f\x9c\xf3\xfe" +
	"\x10\xb7\xc8\x92l\xeb\x1fn\xfb\x9f\xfd\xd7\xfc\xfa\x0f\x91" +
	"\x1fr>\xf4\xdb\xb9\x0c\x1a\xbf\x06~\x90\xd10eE" +
	"W\x98\x18}4LY1*D\x14r\x88\x16=\xd2" +
	"8_\xd2\x0c\x1c\xbd\xa58\x19\xbfK\xcat\x0d\xcc\xec" +
	"\xac0k&Z\xfaC\xadT6\xe3\x96\x139\x1f\xf3" +
	"\x08\x9bv*\x16\x1b\xcaZ&\x8c\xc3\x01EF{\x98" +
	"\"\xa3#,Q\x92O\x92Q\xbdK\x1fwPIF" +
	"\xf56\xfd\x19\xe0Gq9\xb7\x88j+eXF\x0a" +
	"\xa5\x86\xbb\x09\xb5\x18\xb0Pj\xb8{P\x81\xb5\xb4\xb7" +
	"\x07u%.\x9a=\xa5F\x0a\x9a\x85X\xf5\x8f3\xb1" +
	"\xdd\x91R\xac\x92\x98\x04OY\x9a\xf8Sf\\1T" +
	"\xb1r\xd4\xd9\x98xQd$ \xb3j\x9f]c\x9b" +
	"-\x91\xb3\x9b\xc6}\xc6\x94R\xce\x95\x99.\xebQ\\" +
	"\xa5i\x8f\x15a\xc6\xd2xe\xc6SS\xf6%k\x93" +
	"\xd6\x84\xae\xcc\xf24\x03\xa3i8\x8af0)c\xe5" +
	"\xfc\xe9b\xb0\xce\x9c\x94l\xeaR\xdc<\xd9)\xad\xcc" +
	"\xb7F\xc3\xa3XB\x07\x8f\x0cNnj\xe3\xa0R0" +
	"q\x91\x97\xcco^S|\xf8\xa5U\xa3\xff\x7fP\x16" +
	"S_\xd1\x01][)J\xbe\x98\x8e\xb0=k\x92\xeb" +
	"\xcd\x93\xf2x\xeaSF6\xa6\x82\xdb%Q3\x0a\x8e" +
	"\x9a\x06\xc3P\x82zQ\x81\xe9\x98\x9c\xe5}\xb5\xbcd" +
	"\xfe?\xdc~\xe0_\xbf\xfd\x1f\xff\xc7\xf9\xc8\xaa\xa0o" +
	"\xb1\x82cZk\xfe:N\xce\x0b\xab\x0b#<\x17\x93" +
	"\x8c\xee\xd37r\x87\xef\x0f\x9b\xe9/\xaf\xeb\x0e\x8f\xaf" +
	"\xee\xd2\xe9\xa2&\xc9\xa6\x17N\xf1H\xe7\xb6w\xb3|" +
	"\x9f\xa19\x9a\xe2\xb0\x0d\xa6a\xb0\x02\x06\xce.\xe0\xa3" +
	"\xae\x9bc\x9a!\xcbRL\x96\x9b\x0c!\xe93\x8a\xa6" +
	"t\xc9\x02\xc1Q1]p}\x95\xa9\x14\xd0\xf3-\xa7" +
	"\xcb\xe2\xd0,\xab\x8amkc\x06\xf3\xb1\x922\xcd3" +
	"\xf5\xc6E\x86\xc8\xac:{g\xad\x80\xb8\xd9\xec\xac\"" +
	"\xc3p\x9f1\xa99\xb5\xf2\\\xf8\xb2g\xe3\xf2\xe6\x0b" +
	"b\x96\xf1z\x9eH\xca\xdc\x99\xd5[\xb3D\x89\xeb\xce" +
	"\xac\xde\xed'\x03\x9c;\xb3\xfa\xa0\x9f\x8ce\xeea\xa0" +
	"+/\xe4\x03N\"\xc6\xc7\xa7+q\x17UH\x03\x93" +
	"q>@\xb5b\xae8o\x976\xf4>j\xf8}\xac" +
	";\xfdq\x9d\xac\xfa}\xa5\xaci\xf8n\x9f=\xa5\x94" +
	"\xcb\x9a\xe1\x0b\xb9\x06\x168\x7f\x9e++*\x9e\xf8\x07" +
	"v\x08\xd5Y|\x84|W\xa0\xcer%\xa6\x94*\xf8" +
	"\x83c\x1aJV'\xd9\x06S3\xa4HOc\xe8\xa4" +
	"j8lR5\x1c\x16\xe1\xd7EfU\x11\x86\xbc\x02" +
	"\xacjg\xca\x8c*\x1a\x04\xebht\\\x18\xaf7\xd7" +
	"M\x8dhF0\xe7r{Xl_Gd\xa3\xed\x1e" +
	"\xb1\x93\x97\xcaS\x9f\x8c1\x8b\x09[\x929\x8b\xa9\xaa" +
	"2#v\xc3+6\xa3G\xef\xcd\xf8\xf3\x0f3\xbb\xa2" +
	"/\x18\x09W3\xba\xf6\xc6\xe4\x94J'Ne\xc5\x19" +
	"\xaf\xb7\xfd\x1c%u\xea\x86q\xd3\xb4Yu\x00\x8b\xf3" +
	"`\xb8F\x8f\xd0\xbda\x1dZ\x97x\x84\xdc\x0em_" +
	"\xbeQ\x87\x16\xbd\x19d\xd5Y\xdf\x1aJe\xdc\x9b@" +
	"Jj\xa6\x11\xadS\xab?\xe9cN\xaf\xe2(\xc3\xee" +
	"\x98F\x86\x8a<\xd9\x183\xd8\x94\xaa8\x8a\xc5\x053" +
	"\x91G\xcc\xbb\x99\xe2\x8cW\xf7\xf8\xc9h\xb9\xfcR\xf4" +
	"\x00\xc9I\xa5Njf*F\x89\xb0\xe1P\xdd\xc6\xe7" +
	"\xbb\xf8Q\x9c\xf5C\xaf\xac?\xe8\xac\x1f\xa6U\x98\xb7" +
	"+\xf9>Ce\xd3MmT\xe6\x1c\xc5rF,-" +
	"\x95\xaf8\x91\x12\xfa> \xae\xc5\xbb\xc0-Pr\x84" +
	"\x87\x82\x87v\xfa\xf5\x03Z\xc3\xa4\xf8\x11\x82,z\x99" +
	"\xbe\xc1\xb4\x92\xd5\xd0\x01\xd2\xa8G\x1b\xad\x1fx\\\xa2" +
	"\xe1\x8fK\xf4\xabW\"H\x19\xba\xbb]\xe9I\x83\xa8" +
	"\xf3k\xeaE\x9d\xc7\x15E,\xf2\xff\xe5\x17'\xb5+" +
	"\xff\xe9\xcc\x7f\x89\xbc\xc8\xdfhL\xf6*%e,\xce" +
	"\xfd\x1dH\xef|MX\xef\xdc\x15\xb9w&9\x0c\xa9" +
	"\xb2\xdfoo6\xa7\x96\xfc\xa6t\x05\x13\xbb\x12\xa7\xe9" +
	"\xd4\x9d\x9a\xca\xachf\x0c\xfda\x1a\xfc\x1e\"jr" +
	"\xbf\xc2+\x1dD\xd4\xe4\x8e\xa7g:\x88\xa8\xc9\xd5\xe0" +
	"\xbf\xdaA\xd4\xfa\xae\x06\xff\\\x97\x98Y\x85F\xd3\xf3" +
	"]%\xbf\xec\xa0\xe8\x0fl\xf5O\xb6\x17\x12If\xcb" +
	"\x93\xe5\x82i4y\x9e\xb7\xc1\xcd\xf0\xf2\xd7\x96\x16\xd1" +
	"\xfe\xa4\xde\\aq\xa3\x907\xcc\xd4\xe8\xb0H\xda\xa7" +
	"\xae\x85O\xc3\x02\x01\xc3\x81\xa4\xbdM&\x06\xf7B\xdf" +
	"\xaa\xa9>e\x16%1fGX\xa6O\x9f\xe1K<" +
	"\xc4\xf0\xc56K\xecv]\xa1\xd3V\x7f,\xb1\xeb\x87" +
	"\xe1\xde\xddI\xc5\xd2\x82b\xd9\xc6\xfd\xa06\xc9\xfa\xd0" +
	"X'\xca7\xc9\x87\xa5\xf8\x1c%G.\xee7\x99\xb1" +
	"\xc4\xb6\xed\xbccn\xac\xc9\xca\xeb\x98\x1bwV\xb4r" +
	"`\xaf\x03\xa6\xa9PV\x8a\x13+\"\x84;+\x9a\x94" +
	")7\xb7G\xe3\xe63\xcf\x0c\xb3\xda3\xcc\xe5bv" +
	"\xece3\x1a\xa5G\x98r\xd8\x11f\xf5\xd8\xf8\xf7\xed" +
	"\xc2\xaf\xc6\x9b.=\xd3C\xce5\x17\xc7x\x07\xf1\xdc" +
	"\x03\xa2'JN0\xb1\x17\xc9,\xcb\xb4r\x8e_\xa0" +
	"[T4\x9d\xa9\xdd\x8e\x94uX\xa9\xec\x90\xbd4\x9b" +
	"$\xeeqO\xf0kS\x8a\xd9\xe3\xe6\x14,'e\xc6" +
	"7\x86\xa5\x05\xd2\x8e5L\x03\xcf7L\x86Y\x96\x0f" +
	"\xaf\x81\x91*\x1f\xb2G\xed\xca\x0f6\xc5\xdc\xb4\xe7\x1b" +
	"L)I}R8\x15{\xd3\xff\xf6\xd5\xe4\xd3\xf3\xf9" +
	"\xffv*\xea\xa0\x85}WO\xc5\x96g\xfe]\x84\x08" +
	"\"{P_\xd5\xfb\x83\xa6\x85\xec\xa1i!\x97\x8a\xbc" +
	"\x90\x1d\x92\x94\xdb\x0f\xfc\x90,\x92\xe5<\x81X\xa4\x8b" +
	"teJ\x87QF$\xd2EV\x9f\xaeeO\xc9y" +
	"\x7fZ\xc8x\x9d\xb4\x90\x8b\xdc\xb4\x90\x96/v\xdfM" +
	"\x93\xff\"\xca\x8eD\xec\xfee\x8b\xf9\x0e\xf0K\xc8E" +
	"\xec\xbe\xeb\x07\x11\x8c\xdd\xfft\x92\xab\x10_\xc1\xeb\x14" +
	"\xb1\xfb\x97_\xc6U\x88g\xd0\xb6B\xc4\xee_\xf1)" +
	"\xaeB|\x15\xb9\x88\xdd\xbf\xf2\xd3\\\x85x\x0e\xeb\x11" +
	"\xb1\xfb\x9f\xb9\x9c\xab\x10_\xc7\xeb\xf7b\xf4\xe70\x18" +
	"\x96\xec\x06\x1a\xe5\x02y\xa5\x19[\xec\x90\x1c{\xc1D" +
	"\xfb\xd0>6x\x11\xb9\xb5m\xc3\xcc\xdf\xcb\x1cm\xd2" +
	"\xd7\x85z,\xf3-*V\xf5\xc5\x0f\xfb\x05{%\xcd" +
	"\xa88\xe2\xe4/[\xf6\x9d\x17\x87m\xeb\x052\x95a" +
	"\x1eB\xb5b\x8cI\x19f\x1a\x9a\xda\x94\xec\xfb\x9b\x9a" +
	"\xae\xffE\"\xa5:3\xd9\x05\xb2p\x9b\x8ef\x8cy" +
	"[\xe1\xe1v8\x0df\x92]\x0df\x92Y\xdd4\x1d" +
	"&N\x84\xf0\xa5\x08\xa5\x85Y\x07=B\xae8&\\" +
	"VS\xde\x19\xc1~O\xc4_\xd7\x91_\xd8lg\x85" +
	"\xf9\x13\x8c6\xb3-\xb7\x01w\xb0\xf9\xc9>\xf9\x84v" +
	"\xb1\xe5\xd9\xa4b\xc7\xd5\xb4g6\xe8\xd5\\\x9b\x97\x94" +
	"\x83\xbc'lf\xd2^/\xb7Y\xd8\x047\xb89\x9f" +
	"\xb2\x9aZ\x86\xf7\x19\x05\x8b)6K\xe5\x1c\x05\xef\xff" +
	"\x0e\xaf\x93\xdd\x87\x1aj\x91,\xda\xedd\x0f \x17Z" +
	"iW\xeb\xfd\x18r\x91D\xda\xd5z?\x81\\h\xa8" +
	"]\xad\xf7a\xe4BC\xed\x9e\xb2=\x85\\h\xa8\xdd" +
	"c\xb6\xdf!\xf7\x92N{\xe7l\x81\xac\xd3\xde9\xdb" +
	"3\xc8\x8f\x01\x7f\x9ej\xbd\x9fC\x8d\xb3\xd0\\\xbbZ" +
	"\xef\x17P+-4\xd7\xae\xd6\xfbE\xd4b?\x0f\xfc" +
	"$\xd5z\xbf\x84\xf5\x0b-\xb6\xab\xf5>\x85\\h\xb1" +
	"]\xad\xf7+\xc8\x85\x16\xdb\xd5z\x9fA.\xb4\xd8\xae" +
	"\xd6\xfbU\xe4\x9e\x16\xdb\xd3z\x9fC~\x16\xf8\x05\xaa" +
	"\xf5~\x1d9\x8a\xb4\xdf\xa4Z\xef7\xf0\xfb\x9e\x07\xfe" +
	"6\xd5z\xbf\x85\xfc\x02\xf0\x8b\xc0[\xabb\xefw\xf0" +
	">\xbc\x09\xfc=\xe0mm<:\xf4]\xbc\x0fo\xbb" +
	"\"\xf0\xa5\x9f\xfd,\x8f\x0e\xfd#j\xd2\xdf\x03\xfeQ" +
	",\xd6|bm\x1a\xa1C\x9c\xd1\xfdi\xb55\x8b*" +
	"\xc2\x89G\xb7\xcfW\x19\xba\x7f\x9b8\x82\xaa\x9a\x0d\x0f" +
	"\xb7X09V\x07y\xa1\x88\x17\xca\x98&^\xa8l" +
	"Z\xbc\xd0\x0c!\xcaNMi\xb6xQ\x18\x17\x15d" +
	"\xe0\x0a\xa9x[\x17\xd2\xf7,^\xa3\x08\x92\xe2\x17)" +
	"\x94\xf1\xd5\xab\xec\x08\xeb\xdb\x16\xc8\x84\xab\x19j}\xfd" +
	"\x86\xb0Wj\x09\xb3Wj\x09\xb3Wj\x09\xb3W\xea" +
	"\x11\x1b\x98\x7f\x91\xe7DdM\xceP\xca\xacnb7" +
	":\xe7}R\x926w\xc6\xe5\xcd\xebc\xde\x96\xd5\x90" +
	"\x14\x10\x8c\x15\x14\x8b1k\xc4\x92\xf9\x9fM-\x19\xa6" +
	"\x09[ \x08\xc6\xb14c\xaca\xc6\xe1\xe8\x8a@\xd3" +
	"\xb4ree*\xce\x95S\x0d\xb6\xa3:\xeamGe" +
	"T\xd3\xa4\xb2\x13\xed\xf2gZ\xbe\x7f\xe7\xc6\x8f\xa3\xcb" +
	"N\x14M\x1dd\xa5|\x96Y\xee\xf4\x9al\xe9\xe4C" +
	"\x9cOF\xc3\x12\x0d\x0f\x87%\x1a\xa6\x9b7\xae\xc7\xc5" +
	"\xab\xf7\x8a}\x1a\xcf\xf9\xe4u\x8b\xba*,\x0eI4" +
	"\x8cG\xe6wVJR\x92f\x08\xe6\x92\xa7\xc0~v" +
	"\x14\xdd\xf00J\x04\xa5\x94_6\\GN\\R4" +
	"cD1&\x9a\x9ar\xdcQ\x150V\xf5\x8b\xddr" +
	"w\xd0\x16l\xd6g\xff\xe5\x0e\xaa/\xc8?\xf4-\x09" +
	"\xdcA\xf5\x94\xfc\x9f|SywP='\xff\x8b\xcf" +
	"V\xcb\x1dT\xdf\xc2%\x8a\xb0\xcfr\x07\xd5w\x91{" +
	"6Y\xde\xa0\xfa\x81\xfc\xa4$\xe5>\x94\xe3\xf20\x1d" +
	"S\xff\x8c\xc5?\x81\xe2\x97\xd11uq\xec\x9f%)" +
	"w\x19\xf4\xf5i:\xa6.\x8d\xc1e^\x05|\x05\x1d" +
	"S\xaf\x8f\xc1e\xae\x00~3\x1dSo\x8a\xfdA\x92" +
	"r\x9d\xc0\xd7\xd31\xf56\xac\xa7\x17\xf8\x10\x1dS\x07" +
	"cp\x99C\xc0\xb7\xd31u[\xec\xbfJRn\x07" +
	"p\x9d\x8e\xa9\x1a\x06,\x8d\x03wb\xees\xd4\xad\x0c" +
	"JY\xc5\x9a\xa0Q\xc2\xd5?\x18r\xb9\xb0\x89)\xba" +
	"3N~\xec\xea\xdfzcLgc\x8a\xc3\x06\x15\xcd" +
	"\xe8\xb6m\xcd\x96\x9d\x9a2\xb2[\xa6\xce\x07tJ\xb5" +
	"\x15\xaf\x0da}\xb2a\x97Y\xc1\xe9\xa9$\x8bE;" +
	"\xf8\xd7\xaf\x87\xbc#'\x97\x99\xaewO)V\x86\x19" +
	"4\xd8\xa0\xfa\xf7\xbbb\xc5\"3l\xb6\xd1\x18W\x8c" +
	"\x02+1\xa3\xf6\xf2\x07e\xc5P\xb0@\x16K\xd4\x14" +
	"\xd8\x14\xc3\x9b#\xeapj/\xa4Zf\x98\xf1\x8c\xe8" +
	"\x8ef\x92|\x06\xd52\xb7\xcb0j)\xce\xf8H\xd2" +
	"\x1c*\xd4\xa9\xe1\xae\xe2\x08n\xda\xda#J\x0ac8" +
	"\x02\xc5VK\xf2\xda&\xa3<1\x16\xf2ve\xd2\xb4" +
	"\xb4\xa4\xc3\xa5\xa4d\xafs\xb4\x81\x18\xdb\xdd\xeb\xdc\xfc" +
	"@U\xe0\xabG\x14\xcf\xa1o\xbf\xe60\xb9\xaa\xf2k" +
	"\xde5\xb7\xcf\xb0\x1dM\xd7{Sf%\xef\\\xf2Y" +
	"Y\x079+\xd3\x88\xe5\x8f\xd6\xedL\x88u\xbd\xef$" +
	"1\x92:\xf7N\xa5\xc4\xb2\xdc\x8d\xfb\xaf\xb1}\xec7" +
	"$\xcaV\x8c\x09s\xeaRC*6\x98\xbai1u" +
	"$\xc9\xa6\xa3\x1c\xfc,':-\x9e\x89\xc6\x9d\x86\x96" +
	"\xec\xb1\xe8\x9f\x8a\xe7\xef\x96YL\xfe?\x95\xe2\xffy" +
	"\x95\xe2\xdd,\x9fc\xb6\xad\xc5M\xa3~\x03\xf7\xdaw" +
	"?=\x19\xad\xceg\xb6\x8c\x92\x93Q\x8b\x95L\x87u" +
	"\xabR\\\xb5\x88\x99*\xc0\xbe\xb2_\xc9\x8f\xf9\xc1M" +
	")n5\xb1c\x8e\x1b\x07#\x96\x92\xac\xdaw7\x90" +
	":\xf4\x8b\xfd^\x9fSw\x14O\xee\x85\x05\xe9\xd5y" +
	"ww^\xd3\x93\x9a3\x13!\xa2\xa0\x87(\xe2\x03\xae" +
	"\x14s<PuF^2\xff\x9b\xbb\x8e\xfd\xf7{\xd7" +
	"\xdc\xf8\x9b\xc8\x9b\xe1x5\\@\xd5](\xb0\xb2\xec" +
	"D\xb1\xa9&\xf1gn\xa7B7\xb3<\x15U\x05\x0a" +
	":\xdc\x1bz\xae*k\xf2~V\x83M\xe1\xa4R\x92" +
	"\xe9O]{\xd6\x1d\"\xc0\x8f\xf8K\xdf\x95\xbf7\xc9" +
	"\x0a\xc1\xae\xa8\xab\x81\xbdsV\xb5\xccr_p\x03\xa8" +
	"I\x83g\xd7y\xdd\xb4f\xb8\x1cs\x81\xb3\xbe\xf0q" +
	"\xa4\xda<\x06-\x9f\x0d\xa7=A\x86\x12_\xef\\0" +
	"Ke\x9d9L\xca\xa8#ZHxK\"\xaa\x90\xce" +
	"\xefwyI\x0a\x1c\xe2\x0f\xec\xf5\xa6\x07\xfa\xc9\x89T" +
	"\xb53}\xa2_\x9cH5#DS\xe0Qu\xfcJ" +
	"\xc3\x882\xb8h\xcb\xb4^\xe6(IM\xb7#\xd8\x9f" +
	"\x8f\x86\xc5b\x0e\x875\x86~\xd1\x18\x826\xcf\xa1j" +
	"!\x1a\x7f\xbed\xfe\xc3\xd8\x89m\xcf\x9c\xbc\xf0\x8e\xdb" +
	"\xb4\xf9[\x9a|,\xbd\x03\xde\xea^\xaa\xec\xfc\xb5\xc3" +
	"\xfa\xeedS\x1b\xccR^\x8b\x1b,\xca~\xc2\x0f\xc9" +
	"~B=\xdd8v\x00\x8e\xa5\xc9\xd0er\x95_\xf4" +
	"\xeb\xd9b\xa8\xcc\x9a2\xad\xb8\xaeF\xd91\xbe$\x03" +
	"\xfe\x0cz\x08\x85\xec\xcc,d\xbf_\x7f\x97\xa9\xd74" +
	"qt\xba\xd9[\xc1v\xe3\xe1\xd5:\x98\x18l\"\x16" +
	"\x01\x1b\x11\xaf\x07<@-\x02\xfa\x90\xf7\x02\x1f\xa2g" +
	"o\x83\xc87\x01\x1f\xa1\x16\x01\x9bq>2\x00|+" +
	"\xb5\x08\xd8\x82|\x08\xf8vj\x11\xb0\x0d\xeb\x19\x01\xbe" +
	"\x83Z\x04\xdc\x83g][\x81\xab\xd4\"@\xc1\x95\xed" +
	"\x0e\xe0\xbaL<\x035\x14\xc3\x8e\x03wd\xe2\x19\xb8" +
	"\x13\xcf\x02\xcb\xc0w\xc9\xd43\x10\xe7G\xd3\xc0\xf7\xc8" +
	"\x81\xe3\x83\xd4\xcc\x90\xe9\xb9\x11\xa5\xa6\xe9\x8bY\xf2\xa2" +
	"\xc6\x96U3\x0a\xbaf\xb0\xd04fY\xd54\x89B" +
	"\x7f\xde,\xb3\x9a\x8cS\xb6\xa38\xac\xdb\xc9I)\x8c" +
	"\xbc#\x1a^f9\x01K\xaby\xa8oH\xb1\x14I" +
	".-\xb8\x1f\xe6\x05\xed\x14*\xb6\x9351\x0f^0" +
	"p'\xb1\xc0\x94lHWf6N2+\xc4\xbf8" +
	"\\\xbc\xe6\xcd\xd0z\x1a\xc4XV\xcf\xbd\xfd\xa1\xc6\xf5" +
	"\x0f\xecCU\x00\x11\xc2\xe5\x94)c\xd3\x10\x09\x8bm" +
	"\xa4\xedo\x14l\xb1\x90\xc0\xa8&@3\xda)}w" +
	"\xa1\x90d\xe5`\xff9L\xc3\x97/\xd5\x0b`\x83\xc5" +
	"\x94\xb8\xc3\"\xcc\x18F\xc3~\xae~\xf1sE\x1ag" +
	"\x16\x1aI\xea\x87o3\x07\xe7\x0c\xd9-\xde\x8fD\xb4" +
	"\xf7\xc3d\xe7\xd1\x13\xdfwPo\xec\xea\x8f\xf4F\x17" +
	"\xd9\x8et\xfbV\xba\x1d\xe9N\x15\xde\x1d&k\xb9\xc5" +
	"2\xdf\xcc\xfc`\x98,\xdb\\#\xae\x8f\xfb\xe9\x0a\xcd" +
	"\xd5\x05\xc8\xd0\x07yK\xb1\xf92sP)\xe5s\xea" +
	"\xa3k\xd0\x9a\xa3uf\xd4\xa4XU\x0a\xb8A\x8c3" +
	"S\xf7f\x8e\x95\xb0\xa4)\xc9\xa6\xc7vV\x98c:" +
	"\xfeP\xe4\x10\x87\xb0\xc6\xc3\xb7\xeb(\xcf\x0d\xe5;\xa4" +
	"\xbf\xda\xd1jOE\x9f\xe8sX\x89l,\x90zg" +
	"}\x87\xc2\x96\xa6\xe8\xda\xac\x94e*\xbc#\xfa\xc5\xdf" +
	"nZ%\xc5q\x98:\xc8\xc3I\x17\xea\x8f\xc4\x96P" +
	"{\xc8\x96P\x8f\x98\x12c\x02Hc\xcc\xf7\xf0\x06\xd4" +
	"\x0au\x82W\x17h\x81\x86j\x96\x841\x04\x992," +
	"\x0f\x9b2\xb478\xefw5\xe8\xa5v1cH\xea" +
	"\xe6\x94w\xb9\xe3\x9aH\\\x99\xb5P\x89\x7f\xc9\xf64" +
	"p3\x06\xb4x\xcd\xb9\xfer\xf1h\xe0aa\xf4=" +
	"\x1d\xdd\xb4\xd9\x06\xd3\xc8\xe2\xd4\xcc\xbadK\x85v\xf2" +
	"\x9b\x85\xac\xa8\x02\x8b\xae\x14\x0c\xb5\x91m\x04\xa01t" +
	"\x97\xcb\x96\x99\x9cT\xf4\xfa\xa1\x18\xe1\xbfX\xb5\xd7\xd4" +
	"\x86\xc3\xecS:\xc4<\xde?\xdb\xf0\xb9=\x86\x1d\x83" +
	"\xf8\xfcC#(\xaf\xaa\xa6\x005\xa2\xd5\xe8\xb1\x85\xe4" +
	"\xb6\xf3!M#\xf1\xdc8A\xf5d\xab\xe19f\xea" +
	"o;\xeaz\xc5\xd6\xdc\x9cptZ\xda\x13>-\xed" +
	"\xf7M?\xddiip\xfa\xe9NK7\xe3\xb4QL" +
	"?\xddiip\xfa\xe9NK\xb7\xe1\xf4PL3=" +
	"+k\xac\x7f;\xf0q:-e8mT\x81\x97\xe9" +
	"\xb4\xb4\x84\\\x07>M\xa7\xa5\x15\x94\xae\x89\xe9\xa7;" +
	"-\x9d\xc1\x94B\xde\xf4\xd3\x9b\x96\xde\x8f\x9f\xbb\x0b\xf8" +
	"^\xb9\xf6\xe6\x87u\xf5\xbe\xe7'\xe0\xd89\xe7\xf0\xc8" +
	"k\x92DR/\x01\x93\x92\x84\xfa\x9d\xc8\xc3\x8cW\xc3" +
	"\xcch}\x9e\xaa\xa1\xd6\xac>\xab\xdb\xff\x15\x00\x00\xff" +
	"\xff\xd9c/\xe2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_cdefabcdefabcdef,
		Nodes: []uint64{
			0x80545037b7a4173b,
			0x806a62bc2851fc01,
			0x80b7b9a2597c4eed,
			0x815ffda3d9dd039d,
			0x8163a7ff6f92e3eb,
			0x8169b9320fb13d79,
			0x81fa11546e952c02,
			0x820db271715b4199,
			0x82a7789fb5b3a028,
			0x82bbe68570bc51c9,
			0x82c483a4cf75cbe3,
			0x82e8c67d0acc92ee,
			0x837843dd5048c6d0,
			0x838b6e674280f93f,
			0x844fdb5787f2eb73,
			0x84ae33ececbdf2f2,
			0x84ff32fdda835dfe,
			0x852c02610e8a2a24,
			0x8534668f6850d8ba,
			0x853ff72f8a1e3384,
			0x8552adf123d9b564,
			0x86020f1b6279dc1e,
			0x86b68baf94f42b99,
			0x86f0f1c44a113f21,
			0x873927d4562f9ba5,
			0x87681fa437f7497d,
			0x87d72af46493bddd,
			0x88007635e342bb94,
			0x880f6cbde51358e0,
			0x881a3fa8b6a21e65,
			0x888a7e1d97fd6855,
			0x88b187d6e94820bd,
			0x88c6bb9459dd440d,
			0x8929937be8c9e001,
			0x899e3334be65d957,
			0x89f1549a7f447f06,
			0x8a1df08ac17221fd,
			0x8a3669cb193af4dc,
			0x8a5026d84a4c9312,
			0x8acccc8118bd1f80,
			0x8b2666611a37b434,
			0x8cf4d94985ccea99,
			0x8f371262d861f7d1,
			0x8f80c9fc8ead22c9,
			0x8f9b301fdfe3c51c,
			0x9078ec69fd7d9560,
			0x917f02f6029babd0,
			0x919eb8a95b9f8a07,
			0x91ab76ec9c2c1b6f,
			0x91cbe70d9e0d9cee,
			0x9217151fa71ac827,
			0x9292e90285848d8e,
			0x93bff6bb5eecbc2a,
			0x93de0fbdc8643390,
			0x9400994ae28f2ed6,
			0x940ac0b117677519,
			0x944a2443abee2e54,
			0x94d039e60a812076,
			0x9598dccef1d83c38,
			0x95ca47192b7d5b43,
			0x971031099b134c74,
			0x9726e35ff31ca532,
			0x9910215bbf6992b3,
			0x998ca559e52e226b,
			0x9b02ee5625ec21fb,
			0x9b4767b704c3f415,
			0x9b932a4905396044,
			0x9c02cc7a71f37f31,
			0x9c833cee78c1a396,
			0x9c85c1e6d68aa499,
			0x9c9f074ebb94ca3b,
			0x9ca1849ea58c8bdb,
			0x9ce5c88efd68b310,
			0x9d8709f225285c2e,
			0x9e2a00f7ceea75bb,
			0x9e2bb9505c9a267d,
			0x9e7c63f7db1235ba,
			0x9ed2b947650ba549,
			0x9f29336af3ac4f9f,
			0x9f325734076f5253,
			0x9f58a78be70b999b,
			0x9f9c5384091d79ce,
			0x9fd8d08daae7794b,
			0xa012f4912c4151f9,
			0xa0a594ed993e78ca,
			0xa0ec151dfc4791ad,
			0xa1914008041e7c44,
			0xa23c8c68e3798bb0,
			0xa2fef4c64b89cc83,
			0xa304ad602f730110,
			0xa377d9a07bd4d6d6,
			0xa3f9826addd42d0d,
			0xa41074130e196783,
			0xa4fef5cca0eb8eaa,
			0xa51c9c2dfa1a6cca,
			0xa574b41924caefc7,
			0xa58428b610ebb10c,
			0xa5a8b25550e0240d,
			0xa66384177fb99486,
			0xa77cd936c64d6ed7,
			0xa796a4d827fc48b4,
			0xa7ab2bbcc8342323,
			0xa7e27069226b98ad,
			0xa86e0a28ffc1ad93,
			0xa88d7dcd40961f55,
			0xa916afef9cb49a54,
			0xa984e49365524f14,
			0xa987ac170b5f48c3,
			0xab1ebc3e87d43ca9,
			0xaba4e5389c6116b1,
			0xadd206cd099784fe,
			0xae87b106322248a8,
			0xae8dab9506472d1d,
			0xaeb6652f725f241b,
			0xaf015f84859d0028,
			0xaf898798e12e23da,
			0xb0746148ee56b888,
			0xb0d71e9e634d1529,
			0xb176d4b98cf5afa6,
			0xb26bddc14e66729a,
			0xb2ea7b1704b448ca,
			0xb3a8f9a49aa3ccf8,
			0xb3f8feecbb635492,
			0xb4452aee08031161,
			0xb513764d5512a334,
			0xb52cdc5b0d00dfde,
			0xb5a6abce79a6f063,
			0xb66a9193d2300649,
			0xb6c8b8141b0acfa3,
			0xb6db3a4bd35d7d66,
			0xb72ecd96799cf7e7,
			0xb745aa7de9c39191,
			0xb74f1e7519f6fd40,
			0xb7b4735fc72e17de,
			0xb7c78f3b8eaa6d37,
			0xb7f9da429e0872e9,
			0xb80f94bef16dea20,
			0xb8375f7f6b27403c,
			0xb854b850a845d36e,
			0xb861bce5eec387bd,
			0xb8b4b6c6e1e52417,
			0xb8ef2f123b9801df,
			0xb915e75dd5f36b13,
			0xb976985727e64f4f,
			0xba7cb4dbd62489d5,
			0xba8fb8d4d5b15836,
			0xbad2f81cd78e053a,
			0xbadafe4de857fe71,
			0xbae3c3ae8a00e8a6,
			0xbb2eb4d03dfe2a7d,
			0xbcba10c194c8e450,
			0xbd94d13b8b1bcadf,
			0xbde69a9238be5e37,
			0xbdf104dd14c6c05e,
			0xbdf7ebd433f5fbda,
			0xbe54ea0b18470782,
			0xbe5555051342f44e,
			0xbe9f101bff0dabed,
			0xbea97f1023792be0,
			0xbed2ab9863c56d3b,
			0xbf5a2cc18c663351,
			0xc008c1d71bacfa15,
			0xc1409e4be6401554,
			0xc186a9c36f974c33,
			0xc20152b889987299,
			0xc2320321f84d3e6b,
			0xc2b96012172f8df1,
			0xc2c16fce3e3aa7eb,
			0xc2f958e3df4726c9,
			0xc33264acc8d4e592,
			0xc49c789ac9b97fbe,
			0xc4aef0c4dc45bc83,
			0xc512b3f8727629d7,
			0xc54135596f07c87b,
			0xc576336317865217,
			0xc58ad6bd519f935e,
			0xc5955ef3c3c9e4b0,
			0xc5c8431019d453a8,
			0xc5d32cc234a53620,
			0xc5eb62ff00b0072f,
			0xc644c15adcdd09cb,
			0xc6cfb8d85c850055,
			0xc73e9eb76d70ee0a,
			0xc7587c9f16a1fc72,
			0xc76af8996e024e54,
			0xc817bfd03978a39b,
			0xc854a2272dea6789,
			0xc8768679ec52e012,
			0xc8d069bf9cf2487f,
			0xc998874f2bcc5999,
			0xca688fde6bcd4bbd,
			0xca9a2c906b36a12e,
			0xca9e1a4afe3dca58,
			0xcab56e851899421c,
			0xcac443c397628440,
			0xcafb4dbd23ee299c,
			0xcc4575715bad9f24,
			0xcc521ab8cc5e91c0,
			0xcd102105578e2465,
			0xcddf6dbc366deb3e,
			0xce388f415f14acb0,
			0xce55ffdae06f694d,
			0xcf365ec11d0c95df,
			0xcf7084fe71119d92,
			0xcfe31aeeb9723e6b,
			0xcff0b4cd24d99860,
			0xd06564713244f529,
			0xd09020015ade2993,
			0xd0f511db04f5194f,
			0xd1052d0564f25e0d,
			0xd2768707959c3ea9,
			0xd351f43ee97d7196,
			0xd35ac5679adaf993,
			0xd3bb2f7cf3a77db4,
			0xd5ad818067cc16e7,
			0xd5db12ce6b4738ee,
			0xd61435667434c9c3,
			0xd65b5d6ec837db5d,
			0xd68209c5c40dc249,
			0xd6aded5b005488d5,
			0xd74a1be2552282a4,
			0xd75aa49a213b1c70,
			0xd769b0a839cd2c2e,
			0xd7e327183a76a4f8,
			0xd801819fddc5173b,
			0xd870df23456b7900,
			0xd89879eb841b57cc,
			0xd8a782a58f006803,
			0xd8b98b1d67fe28a2,
			0xd8facf5bce9546c7,
			0xd963a858373108fc,
			0xd9cddf13c207ce2d,
			0xda1a12e840c66e0f,
			0xdaac54598edab4df,
			0xdacdaa0d69c497ba,
			0xdb56b83f3063105d,
			0xdb651f04f1f0488d,
			0xdb811264e672b627,
			0xdb92e7fa759f1894,
			0xdbae5e634d8e9ecd,
			0xdbc10a1e045d6bed,
			0xdc9cd82121d86b8e,
			0xdcfcab864c34a056,
			0xdd1f5357c25cc3b7,
			0xdd9072d437eab9a1,
			0xde51be80c580aa82,
			0xde9db2015f39bf49,
			0xdea4ce0866a280a7,
			0xdf0c1226c90e00ad,
			0xdf6175fbc7aa8195,
			0xdf6b29c6f745a197,
			0xe00fb886fc82f1ab,
			0xe02474ef23d4f2bc,
			0xe0a980f598d8a745,
			0xe0b0d21d1219b48c,
			0xe0ce907abb969349,
			0xe10a56be889c8d63,
			0xe130b601260e44b5,
			0xe430fa7b7d850130,
			0xe4e7eeb23bebb1f8,
			0xe5205955ce643ade,
			0xe5dcc4b159c002f4,
			0xe62b635478feb9f1,
			0xe64292fa5df872fd,
			0xe708bba061e0cc77,
			0xe72726225a9f8ca8,
			0xe72e2063d179e57d,
			0xe7469eaa174fdd9f,
			0xe79b0d006ef1331d,
			0xe7eceebcdcb01522,
			0xe83eeeca42eb6184,
			0xe89b2535f3e88eb7,
			0xe8b71523b2ef78ed,
			0xe8dc5ddc1cdb5438,
			0xe930a7e80f737844,
			0xe9a04e0d39785218,
			0xeabe3c2d8178a916,
			0xeafef4c5dcc4b5b5,
			0xec5aa6bcd4fca2e4,
			0xec5c7b07d1717d84,
			0xecbd91cdb76d6a28,
			0xed7d297bd1f274b3,
			0xedada67c810ba36d,
			0xedae9d3a84825876,
			0xeef4dfefeb1def9f,
			0xef71c6ada87eac4c,
			0xefe5002d4e5acb87,
			0xf014129ca27de499,
			0xf03da18831a1c80b,
			0xf047782143ce741d,
			0xf0569fdbfd2961b4,
			0xf08bcfb76fcf5061,
			0xf0eb3ae18581b267,
			0xf19df04c8f59f3a6,
			0xf1cccb02e7af0dd8,
			0xf1e3711cde8fa324,
			0xf1f7baa2935a0cd7,
			0xf23307bee1ce0b8d,
			0xf304800fc3af267f,
			0xf32339f8d6ffe524,
			0xf418cd61a8543b3c,
			0xf42a44d24baf1780,
			0xf47ddd36364c797f,
			0xf4c3318dcf329728,
			0xf55818d39f2c0c72,
			0xf5a87fa04392d0a1,
			0xf613029b64a06aeb,
			0xf640e180eb6f7e34,
			0xf6ebf8b8d23d794f,
			0xf7787292d29bdcd7,
			0xf7af0983a9ca61c5,
			0xf7b756860a5b5804,
			0xf7df715b4e24efb3,
			0xf87e75def99cdba4,
			0xf89cd60c9713ce58,
			0xf8dcc5cd22965ff5,
			0xf90c9c3f6c27a1c2,
			0xf9454e8612b10b69,
			0xfa10659ae02f2093,
			0xfa35d04887272ed9,
			0xfa4d6a8cac27c611,
			0xfa5626b7b9dcd44b,
			0xfa80583ce360de61,
			0xfab5a20f1d337f75,
			0xfb0629d3fd4188b0,
			0xfb1ba86c82d8b9b1,
			0xfb596df65e062edf,
			0xfc446c448d940ff7,
			0xfc766ac7f0d6e4f5,
			0xfd58a2914a0296e2,
			0xfe88232d771013d6,
			0xfe931b1705a8e8a8,
			0xfffc6cb5879fa108,
		},
		Compressed: true,
	})
}
