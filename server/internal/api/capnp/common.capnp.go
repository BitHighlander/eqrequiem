// Code generated by capnpc-go. DO NOT EDIT.

package net

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type InventorySlot capnp.Struct

// InventorySlot_TypeID is the unique identifier for the type InventorySlot.
const InventorySlot_TypeID = 0xe9a04e0d39785218

func NewInventorySlot(s *capnp.Segment) (InventorySlot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InventorySlot(st), err
}

func NewRootInventorySlot(s *capnp.Segment) (InventorySlot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InventorySlot(st), err
}

func ReadRootInventorySlot(msg *capnp.Message) (InventorySlot, error) {
	root, err := msg.Root()
	return InventorySlot(root.Struct()), err
}

func (s InventorySlot) String() string {
	str, _ := text.Marshal(0xe9a04e0d39785218, capnp.Struct(s))
	return str
}

func (s InventorySlot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InventorySlot) DecodeFromPtr(p capnp.Ptr) InventorySlot {
	return InventorySlot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InventorySlot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InventorySlot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InventorySlot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InventorySlot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InventorySlot) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InventorySlot) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InventorySlot) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InventorySlot) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InventorySlot) SubIndex() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s InventorySlot) SetSubIndex(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// InventorySlot_List is a list of InventorySlot.
type InventorySlot_List = capnp.StructList[InventorySlot]

// NewInventorySlot creates a new list of InventorySlot.
func NewInventorySlot_List(s *capnp.Segment, sz int32) (InventorySlot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[InventorySlot](l), err
}

// InventorySlot_Future is a wrapper for a InventorySlot promised by a client call.
type InventorySlot_Future struct{ *capnp.Future }

func (f InventorySlot_Future) Struct() (InventorySlot, error) {
	p, err := f.Future.Ptr()
	return InventorySlot(p.Struct()), err
}

type TypelessInventorySlot capnp.Struct

// TypelessInventorySlot_TypeID is the unique identifier for the type TypelessInventorySlot.
const TypelessInventorySlot_TypeID = 0x899e3334be65d957

func NewTypelessInventorySlot(s *capnp.Segment) (TypelessInventorySlot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TypelessInventorySlot(st), err
}

func NewRootTypelessInventorySlot(s *capnp.Segment) (TypelessInventorySlot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TypelessInventorySlot(st), err
}

func ReadRootTypelessInventorySlot(msg *capnp.Message) (TypelessInventorySlot, error) {
	root, err := msg.Root()
	return TypelessInventorySlot(root.Struct()), err
}

func (s TypelessInventorySlot) String() string {
	str, _ := text.Marshal(0x899e3334be65d957, capnp.Struct(s))
	return str
}

func (s TypelessInventorySlot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TypelessInventorySlot) DecodeFromPtr(p capnp.Ptr) TypelessInventorySlot {
	return TypelessInventorySlot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TypelessInventorySlot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TypelessInventorySlot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TypelessInventorySlot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TypelessInventorySlot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TypelessInventorySlot) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TypelessInventorySlot) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TypelessInventorySlot) SubIndex() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TypelessInventorySlot) SetSubIndex(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TypelessInventorySlot_List is a list of TypelessInventorySlot.
type TypelessInventorySlot_List = capnp.StructList[TypelessInventorySlot]

// NewTypelessInventorySlot creates a new list of TypelessInventorySlot.
func NewTypelessInventorySlot_List(s *capnp.Segment, sz int32) (TypelessInventorySlot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TypelessInventorySlot](l), err
}

// TypelessInventorySlot_Future is a wrapper for a TypelessInventorySlot promised by a client call.
type TypelessInventorySlot_Future struct{ *capnp.Future }

func (f TypelessInventorySlot_Future) Struct() (TypelessInventorySlot, error) {
	p, err := f.Future.Ptr()
	return TypelessInventorySlot(p.Struct()), err
}

type EntityId capnp.Struct

// EntityId_TypeID is the unique identifier for the type EntityId.
const EntityId_TypeID = 0xdd9072d437eab9a1

func NewEntityId(s *capnp.Segment) (EntityId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityId(st), err
}

func NewRootEntityId(s *capnp.Segment) (EntityId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EntityId(st), err
}

func ReadRootEntityId(msg *capnp.Message) (EntityId, error) {
	root, err := msg.Root()
	return EntityId(root.Struct()), err
}

func (s EntityId) String() string {
	str, _ := text.Marshal(0xdd9072d437eab9a1, capnp.Struct(s))
	return str
}

func (s EntityId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntityId) DecodeFromPtr(p capnp.Ptr) EntityId {
	return EntityId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntityId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntityId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntityId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntityId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntityId) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EntityId) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// EntityId_List is a list of EntityId.
type EntityId_List = capnp.StructList[EntityId]

// NewEntityId creates a new list of EntityId.
func NewEntityId_List(s *capnp.Segment, sz int32) (EntityId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EntityId](l), err
}

// EntityId_Future is a wrapper for a EntityId promised by a client call.
type EntityId_Future struct{ *capnp.Future }

func (f EntityId_Future) Struct() (EntityId, error) {
	p, err := f.Future.Ptr()
	return EntityId(p.Struct()), err
}

type Duel capnp.Struct

// Duel_TypeID is the unique identifier for the type Duel.
const Duel_TypeID = 0xb745aa7de9c39191

func NewDuel(s *capnp.Segment) (Duel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Duel(st), err
}

func NewRootDuel(s *capnp.Segment) (Duel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Duel(st), err
}

func ReadRootDuel(msg *capnp.Message) (Duel, error) {
	root, err := msg.Root()
	return Duel(root.Struct()), err
}

func (s Duel) String() string {
	str, _ := text.Marshal(0xb745aa7de9c39191, capnp.Struct(s))
	return str
}

func (s Duel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Duel) DecodeFromPtr(p capnp.Ptr) Duel {
	return Duel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Duel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Duel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Duel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Duel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Duel) DuelInitiator() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Duel) SetDuelInitiator(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Duel) DuelTarget() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Duel) SetDuelTarget(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Duel_List is a list of Duel.
type Duel_List = capnp.StructList[Duel]

// NewDuel creates a new list of Duel.
func NewDuel_List(s *capnp.Segment, sz int32) (Duel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Duel](l), err
}

// Duel_Future is a wrapper for a Duel promised by a client call.
type Duel_Future struct{ *capnp.Future }

func (f Duel_Future) Struct() (Duel, error) {
	p, err := f.Future.Ptr()
	return Duel(p.Struct()), err
}

type DuelResponse capnp.Struct

// DuelResponse_TypeID is the unique identifier for the type DuelResponse.
const DuelResponse_TypeID = 0x8163a7ff6f92e3eb

func NewDuelResponse(s *capnp.Segment) (DuelResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DuelResponse(st), err
}

func NewRootDuelResponse(s *capnp.Segment) (DuelResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DuelResponse(st), err
}

func ReadRootDuelResponse(msg *capnp.Message) (DuelResponse, error) {
	root, err := msg.Root()
	return DuelResponse(root.Struct()), err
}

func (s DuelResponse) String() string {
	str, _ := text.Marshal(0x8163a7ff6f92e3eb, capnp.Struct(s))
	return str
}

func (s DuelResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DuelResponse) DecodeFromPtr(p capnp.Ptr) DuelResponse {
	return DuelResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DuelResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DuelResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DuelResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DuelResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DuelResponse) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DuelResponse) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DuelResponse) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DuelResponse) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// DuelResponse_List is a list of DuelResponse.
type DuelResponse_List = capnp.StructList[DuelResponse]

// NewDuelResponse creates a new list of DuelResponse.
func NewDuelResponse_List(s *capnp.Segment, sz int32) (DuelResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DuelResponse](l), err
}

// DuelResponse_Future is a wrapper for a DuelResponse promised by a client call.
type DuelResponse_Future struct{ *capnp.Future }

func (f DuelResponse_Future) Struct() (DuelResponse, error) {
	p, err := f.Future.Ptr()
	return DuelResponse(p.Struct()), err
}

type AdventureInfo capnp.Struct

// AdventureInfo_TypeID is the unique identifier for the type AdventureInfo.
const AdventureInfo_TypeID = 0xf03da18831a1c80b

func NewAdventureInfo(s *capnp.Segment) (AdventureInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3})
	return AdventureInfo(st), err
}

func NewRootAdventureInfo(s *capnp.Segment) (AdventureInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3})
	return AdventureInfo(st), err
}

func ReadRootAdventureInfo(msg *capnp.Message) (AdventureInfo, error) {
	root, err := msg.Root()
	return AdventureInfo(root.Struct()), err
}

func (s AdventureInfo) String() string {
	str, _ := text.Marshal(0xf03da18831a1c80b, capnp.Struct(s))
	return str
}

func (s AdventureInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureInfo) DecodeFromPtr(p capnp.Ptr) AdventureInfo {
	return AdventureInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureInfo) QuestId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureInfo) SetQuestId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureInfo) NpcId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureInfo) SetNpcId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureInfo) InUse() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s AdventureInfo) HasInUse() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventureInfo) SetInUse(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInUse sets the inUse field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s AdventureInfo) NewInUse() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AdventureInfo) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureInfo) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureInfo) ShowCompass() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Bool(p.Struct()), err
}

func (s AdventureInfo) HasShowCompass() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AdventureInfo) SetShowCompass(v Bool) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewShowCompass sets the showCompass field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s AdventureInfo) NewShowCompass() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AdventureInfo) Objetive() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventureInfo) SetObjetive(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AdventureInfo) ObjetiveValue() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AdventureInfo) SetObjetiveValue(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AdventureInfo) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s AdventureInfo) HasText() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s AdventureInfo) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s AdventureInfo) SetText(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s AdventureInfo) Type() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AdventureInfo) SetType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s AdventureInfo) Minutes() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AdventureInfo) SetMinutes(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s AdventureInfo) Points() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s AdventureInfo) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s AdventureInfo) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s AdventureInfo) SetX(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s AdventureInfo) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s AdventureInfo) SetY(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s AdventureInfo) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s AdventureInfo) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s AdventureInfo) Zonedungeonid() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s AdventureInfo) SetZonedungeonid(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

// AdventureInfo_List is a list of AdventureInfo.
type AdventureInfo_List = capnp.StructList[AdventureInfo]

// NewAdventureInfo creates a new list of AdventureInfo.
func NewAdventureInfo_List(s *capnp.Segment, sz int32) (AdventureInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3}, sz)
	return capnp.StructList[AdventureInfo](l), err
}

// AdventureInfo_Future is a wrapper for a AdventureInfo promised by a client call.
type AdventureInfo_Future struct{ *capnp.Future }

func (f AdventureInfo_Future) Struct() (AdventureInfo, error) {
	p, err := f.Future.Ptr()
	return AdventureInfo(p.Struct()), err
}
func (p AdventureInfo_Future) InUse() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}
func (p AdventureInfo_Future) ShowCompass() Bool_Future {
	return Bool_Future{Future: p.Future.Field(1, nil)}
}

type TextureProfile capnp.Struct

// TextureProfile_TypeID is the unique identifier for the type TextureProfile.
const TextureProfile_TypeID = 0xe430fa7b7d850130

func NewTextureProfile(s *capnp.Segment) (TextureProfile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TextureProfile(st), err
}

func NewRootTextureProfile(s *capnp.Segment) (TextureProfile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TextureProfile(st), err
}

func ReadRootTextureProfile(msg *capnp.Message) (TextureProfile, error) {
	root, err := msg.Root()
	return TextureProfile(root.Struct()), err
}

func (s TextureProfile) String() string {
	str, _ := text.Marshal(0xe430fa7b7d850130, capnp.Struct(s))
	return str
}

func (s TextureProfile) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TextureProfile) DecodeFromPtr(p capnp.Ptr) TextureProfile {
	return TextureProfile(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TextureProfile) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TextureProfile) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TextureProfile) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TextureProfile) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TextureProfile) Head() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TextureProfile) SetHead(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TextureProfile) Chest() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TextureProfile) SetChest(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TextureProfile) Arms() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TextureProfile) SetArms(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TextureProfile) Wrist() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TextureProfile) SetWrist(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TextureProfile) Hands() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TextureProfile) SetHands(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TextureProfile) Legs() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TextureProfile) SetLegs(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TextureProfile) Feet() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TextureProfile) SetFeet(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s TextureProfile) Primary() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s TextureProfile) SetPrimary(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s TextureProfile) Secondary() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s TextureProfile) SetSecondary(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// TextureProfile_List is a list of TextureProfile.
type TextureProfile_List = capnp.StructList[TextureProfile]

// NewTextureProfile creates a new list of TextureProfile.
func NewTextureProfile_List(s *capnp.Segment, sz int32) (TextureProfile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[TextureProfile](l), err
}

// TextureProfile_Future is a wrapper for a TextureProfile promised by a client call.
type TextureProfile_Future struct{ *capnp.Future }

func (f TextureProfile_Future) Struct() (TextureProfile, error) {
	p, err := f.Future.Ptr()
	return TextureProfile(p.Struct()), err
}

type TintProfile capnp.Struct

// TintProfile_TypeID is the unique identifier for the type TintProfile.
const TintProfile_TypeID = 0xf5a87fa04392d0a1

func NewTintProfile(s *capnp.Segment) (TintProfile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TintProfile(st), err
}

func NewRootTintProfile(s *capnp.Segment) (TintProfile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return TintProfile(st), err
}

func ReadRootTintProfile(msg *capnp.Message) (TintProfile, error) {
	root, err := msg.Root()
	return TintProfile(root.Struct()), err
}

func (s TintProfile) String() string {
	str, _ := text.Marshal(0xf5a87fa04392d0a1, capnp.Struct(s))
	return str
}

func (s TintProfile) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TintProfile) DecodeFromPtr(p capnp.Ptr) TintProfile {
	return TintProfile(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TintProfile) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TintProfile) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TintProfile) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TintProfile) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TintProfile) Head() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TintProfile) SetHead(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TintProfile) Chest() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TintProfile) SetChest(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TintProfile) Arms() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TintProfile) SetArms(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TintProfile) Wrist() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TintProfile) SetWrist(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TintProfile) Hands() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TintProfile) SetHands(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TintProfile) Legs() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TintProfile) SetLegs(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TintProfile) Feet() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TintProfile) SetFeet(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s TintProfile) Primary() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s TintProfile) SetPrimary(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s TintProfile) Secondary() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s TintProfile) SetSecondary(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// TintProfile_List is a list of TintProfile.
type TintProfile_List = capnp.StructList[TintProfile]

// NewTintProfile creates a new list of TintProfile.
func NewTintProfile_List(s *capnp.Segment, sz int32) (TintProfile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[TintProfile](l), err
}

// TintProfile_Future is a wrapper for a TintProfile promised by a client call.
type TintProfile_Future struct{ *capnp.Future }

func (f TintProfile_Future) Struct() (TintProfile, error) {
	p, err := f.Future.Ptr()
	return TintProfile(p.Struct()), err
}

type Spawns capnp.Struct

// Spawns_TypeID is the unique identifier for the type Spawns.
const Spawns_TypeID = 0x84ff32fdda835dfe

func NewSpawns(s *capnp.Segment) (Spawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Spawns(st), err
}

func NewRootSpawns(s *capnp.Segment) (Spawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Spawns(st), err
}

func ReadRootSpawns(msg *capnp.Message) (Spawns, error) {
	root, err := msg.Root()
	return Spawns(root.Struct()), err
}

func (s Spawns) String() string {
	str, _ := text.Marshal(0x84ff32fdda835dfe, capnp.Struct(s))
	return str
}

func (s Spawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Spawns) DecodeFromPtr(p capnp.Ptr) Spawns {
	return Spawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Spawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Spawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Spawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Spawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Spawns) Spawns() (Spawn_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Spawn_List(p.List()), err
}

func (s Spawns) HasSpawns() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Spawns) SetSpawns(v Spawn_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpawns sets the spawns field to a newly
// allocated Spawn_List, preferring placement in s's segment.
func (s Spawns) NewSpawns(n int32) (Spawn_List, error) {
	l, err := NewSpawn_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Spawn_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Spawns_List is a list of Spawns.
type Spawns_List = capnp.StructList[Spawns]

// NewSpawns creates a new list of Spawns.
func NewSpawns_List(s *capnp.Segment, sz int32) (Spawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Spawns](l), err
}

// Spawns_Future is a wrapper for a Spawns promised by a client call.
type Spawns_Future struct{ *capnp.Future }

func (f Spawns_Future) Struct() (Spawns, error) {
	p, err := f.Future.Ptr()
	return Spawns(p.Struct()), err
}

type Spawn capnp.Struct

// Spawn_TypeID is the unique identifier for the type Spawn.
const Spawn_TypeID = 0xd8facf5bce9546c7

func NewSpawn(s *capnp.Segment) (Spawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 200, PointerCount: 5})
	return Spawn(st), err
}

func NewRootSpawn(s *capnp.Segment) (Spawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 200, PointerCount: 5})
	return Spawn(st), err
}

func ReadRootSpawn(msg *capnp.Message) (Spawn, error) {
	root, err := msg.Root()
	return Spawn(root.Struct()), err
}

func (s Spawn) String() string {
	str, _ := text.Marshal(0xd8facf5bce9546c7, capnp.Struct(s))
	return str
}

func (s Spawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Spawn) DecodeFromPtr(p capnp.Ptr) Spawn {
	return Spawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Spawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Spawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Spawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Spawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Spawn) Gm() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Spawn) SetGm(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Spawn) Aaitle() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Spawn) SetAaitle(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Spawn) Anon() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Spawn) SetAnon(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Spawn) Face() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Spawn) SetFace(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Spawn) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Spawn) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Spawn) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Spawn) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Spawn) Deity() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Spawn) SetDeity(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Spawn) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Spawn) SetSize(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Spawn) Npc() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Spawn) SetNpc(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Spawn) Invis() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Spawn) SetInvis(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Spawn) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Spawn) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Spawn) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Spawn) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Spawn) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Spawn) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s Spawn) Findable() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s Spawn) SetFindable(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s Spawn) DeltaHeading() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s Spawn) SetDeltaHeading(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s Spawn) X() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s Spawn) SetX(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s Spawn) Y() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s Spawn) SetY(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s Spawn) Animation() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s Spawn) SetAnimation(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s Spawn) Z() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s Spawn) SetZ(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s Spawn) DeltaY() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s Spawn) SetDeltaY(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s Spawn) DeltaX() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s Spawn) SetDeltaX(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s Spawn) Heading() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s Spawn) SetHeading(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s Spawn) DeltaZ() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s Spawn) SetDeltaZ(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s Spawn) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(84))
}

func (s Spawn) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(84, uint32(v))
}

func (s Spawn) Showhelm() int32 {
	return int32(capnp.Struct(s).Uint32(88))
}

func (s Spawn) SetShowhelm(v int32) {
	capnp.Struct(s).SetUint32(88, uint32(v))
}

func (s Spawn) IsNpc() int32 {
	return int32(capnp.Struct(s).Uint32(92))
}

func (s Spawn) SetIsNpc(v int32) {
	capnp.Struct(s).SetUint32(92, uint32(v))
}

func (s Spawn) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(96))
}

func (s Spawn) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(96, uint32(v))
}

func (s Spawn) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(100))
}

func (s Spawn) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(100, uint32(v))
}

func (s Spawn) Level() int32 {
	return int32(capnp.Struct(s).Uint32(104))
}

func (s Spawn) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(104, uint32(v))
}

func (s Spawn) PlayerState() int32 {
	return int32(capnp.Struct(s).Uint32(108))
}

func (s Spawn) SetPlayerState(v int32) {
	capnp.Struct(s).SetUint32(108, uint32(v))
}

func (s Spawn) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(112))
}

func (s Spawn) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(112, uint32(v))
}

func (s Spawn) Suffix() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Spawn) HasSuffix() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Spawn) SuffixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Spawn) SetSuffix(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Spawn) PetOwnerId() int32 {
	return int32(capnp.Struct(s).Uint32(116))
}

func (s Spawn) SetPetOwnerId(v int32) {
	capnp.Struct(s).SetUint32(116, uint32(v))
}

func (s Spawn) Guildrank() int32 {
	return int32(capnp.Struct(s).Uint32(120))
}

func (s Spawn) SetGuildrank(v int32) {
	capnp.Struct(s).SetUint32(120, uint32(v))
}

func (s Spawn) Equipment() (TextureProfile, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return TextureProfile(p.Struct()), err
}

func (s Spawn) HasEquipment() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Spawn) SetEquipment(v TextureProfile) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEquipment sets the equipment field to a newly
// allocated TextureProfile struct, preferring placement in s's segment.
func (s Spawn) NewEquipment() (TextureProfile, error) {
	ss, err := NewTextureProfile(capnp.Struct(s).Segment())
	if err != nil {
		return TextureProfile{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Spawn) Runspeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(124))
}

func (s Spawn) SetRunspeed(v float32) {
	capnp.Struct(s).SetUint32(124, math.Float32bits(v))
}

func (s Spawn) Afk() int32 {
	return int32(capnp.Struct(s).Uint32(128))
}

func (s Spawn) SetAfk(v int32) {
	capnp.Struct(s).SetUint32(128, uint32(v))
}

func (s Spawn) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(132))
}

func (s Spawn) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(132, uint32(v))
}

func (s Spawn) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Spawn) HasTitle() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Spawn) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Spawn) SetTitle(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Spawn) Helm() int32 {
	return int32(capnp.Struct(s).Uint32(136))
}

func (s Spawn) SetHelm(v int32) {
	capnp.Struct(s).SetUint32(136, uint32(v))
}

func (s Spawn) Race() int32 {
	return int32(capnp.Struct(s).Uint32(140))
}

func (s Spawn) SetRace(v int32) {
	capnp.Struct(s).SetUint32(140, uint32(v))
}

func (s Spawn) LastName() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Spawn) HasLastName() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Spawn) LastNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Spawn) SetLastName(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Spawn) Walkspeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(144))
}

func (s Spawn) SetWalkspeed(v float32) {
	capnp.Struct(s).SetUint32(144, math.Float32bits(v))
}

func (s Spawn) IsPet() int32 {
	return int32(capnp.Struct(s).Uint32(148))
}

func (s Spawn) SetIsPet(v int32) {
	capnp.Struct(s).SetUint32(148, uint32(v))
}

func (s Spawn) Light() int32 {
	return int32(capnp.Struct(s).Uint32(152))
}

func (s Spawn) SetLight(v int32) {
	capnp.Struct(s).SetUint32(152, uint32(v))
}

func (s Spawn) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(156))
}

func (s Spawn) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(156, uint32(v))
}

func (s Spawn) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(160))
}

func (s Spawn) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(160, uint32(v))
}

func (s Spawn) Flymode() int32 {
	return int32(capnp.Struct(s).Uint32(164))
}

func (s Spawn) SetFlymode(v int32) {
	capnp.Struct(s).SetUint32(164, uint32(v))
}

func (s Spawn) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(168))
}

func (s Spawn) SetGender(v int32) {
	capnp.Struct(s).SetUint32(168, uint32(v))
}

func (s Spawn) Bodytype() int32 {
	return int32(capnp.Struct(s).Uint32(172))
}

func (s Spawn) SetBodytype(v int32) {
	capnp.Struct(s).SetUint32(172, uint32(v))
}

func (s Spawn) EquipChest() int32 {
	return int32(capnp.Struct(s).Uint32(176))
}

func (s Spawn) SetEquipChest(v int32) {
	capnp.Struct(s).SetUint32(176, uint32(v))
}

func (s Spawn) MountColor() int32 {
	return int32(capnp.Struct(s).Uint32(180))
}

func (s Spawn) SetMountColor(v int32) {
	capnp.Struct(s).SetUint32(180, uint32(v))
}

func (s Spawn) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(184))
}

func (s Spawn) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(184, uint32(v))
}

func (s Spawn) BoundingRadius() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(188))
}

func (s Spawn) SetBoundingRadius(v float32) {
	capnp.Struct(s).SetUint32(188, math.Float32bits(v))
}

func (s Spawn) EquipmentTint() int32 {
	return int32(capnp.Struct(s).Uint32(192))
}

func (s Spawn) SetEquipmentTint(v int32) {
	capnp.Struct(s).SetUint32(192, uint32(v))
}

func (s Spawn) Lfg() int32 {
	return int32(capnp.Struct(s).Uint32(196))
}

func (s Spawn) SetLfg(v int32) {
	capnp.Struct(s).SetUint32(196, uint32(v))
}

// Spawn_List is a list of Spawn.
type Spawn_List = capnp.StructList[Spawn]

// NewSpawn creates a new list of Spawn.
func NewSpawn_List(s *capnp.Segment, sz int32) (Spawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 200, PointerCount: 5}, sz)
	return capnp.StructList[Spawn](l), err
}

// Spawn_Future is a wrapper for a Spawn promised by a client call.
type Spawn_Future struct{ *capnp.Future }

func (f Spawn_Future) Struct() (Spawn, error) {
	p, err := f.Future.Ptr()
	return Spawn(p.Struct()), err
}
func (p Spawn_Future) Equipment() TextureProfile_Future {
	return TextureProfile_Future{Future: p.Future.Field(2, nil)}
}

type ClientZoneEntry capnp.Struct

// ClientZoneEntry_TypeID is the unique identifier for the type ClientZoneEntry.
const ClientZoneEntry_TypeID = 0xb0746148ee56b888

func NewClientZoneEntry(s *capnp.Segment) (ClientZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientZoneEntry(st), err
}

func NewRootClientZoneEntry(s *capnp.Segment) (ClientZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClientZoneEntry(st), err
}

func ReadRootClientZoneEntry(msg *capnp.Message) (ClientZoneEntry, error) {
	root, err := msg.Root()
	return ClientZoneEntry(root.Struct()), err
}

func (s ClientZoneEntry) String() string {
	str, _ := text.Marshal(0xb0746148ee56b888, capnp.Struct(s))
	return str
}

func (s ClientZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientZoneEntry) DecodeFromPtr(p capnp.Ptr) ClientZoneEntry {
	return ClientZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientZoneEntry) CharName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientZoneEntry) HasCharName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientZoneEntry) CharNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientZoneEntry) SetCharName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClientZoneEntry_List is a list of ClientZoneEntry.
type ClientZoneEntry_List = capnp.StructList[ClientZoneEntry]

// NewClientZoneEntry creates a new list of ClientZoneEntry.
func NewClientZoneEntry_List(s *capnp.Segment, sz int32) (ClientZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClientZoneEntry](l), err
}

// ClientZoneEntry_Future is a wrapper for a ClientZoneEntry promised by a client call.
type ClientZoneEntry_Future struct{ *capnp.Future }

func (f ClientZoneEntry_Future) Struct() (ClientZoneEntry, error) {
	p, err := f.Future.Ptr()
	return ClientZoneEntry(p.Struct()), err
}

type ServerZoneEntry capnp.Struct

// ServerZoneEntry_TypeID is the unique identifier for the type ServerZoneEntry.
const ServerZoneEntry_TypeID = 0xe64292fa5df872fd

func NewServerZoneEntry(s *capnp.Segment) (ServerZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerZoneEntry(st), err
}

func NewRootServerZoneEntry(s *capnp.Segment) (ServerZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServerZoneEntry(st), err
}

func ReadRootServerZoneEntry(msg *capnp.Message) (ServerZoneEntry, error) {
	root, err := msg.Root()
	return ServerZoneEntry(root.Struct()), err
}

func (s ServerZoneEntry) String() string {
	str, _ := text.Marshal(0xe64292fa5df872fd, capnp.Struct(s))
	return str
}

func (s ServerZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerZoneEntry) DecodeFromPtr(p capnp.Ptr) ServerZoneEntry {
	return ServerZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerZoneEntry) Player() (Spawn, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Spawn(p.Struct()), err
}

func (s ServerZoneEntry) HasPlayer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServerZoneEntry) SetPlayer(v Spawn) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPlayer sets the player field to a newly
// allocated Spawn struct, preferring placement in s's segment.
func (s ServerZoneEntry) NewPlayer() (Spawn, error) {
	ss, err := NewSpawn(capnp.Struct(s).Segment())
	if err != nil {
		return Spawn{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServerZoneEntry_List is a list of ServerZoneEntry.
type ServerZoneEntry_List = capnp.StructList[ServerZoneEntry]

// NewServerZoneEntry creates a new list of ServerZoneEntry.
func NewServerZoneEntry_List(s *capnp.Segment, sz int32) (ServerZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServerZoneEntry](l), err
}

// ServerZoneEntry_Future is a wrapper for a ServerZoneEntry promised by a client call.
type ServerZoneEntry_Future struct{ *capnp.Future }

func (f ServerZoneEntry_Future) Struct() (ServerZoneEntry, error) {
	p, err := f.Future.Ptr()
	return ServerZoneEntry(p.Struct()), err
}
func (p ServerZoneEntry_Future) Player() Spawn_Future {
	return Spawn_Future{Future: p.Future.Field(0, nil)}
}

type MemorizeSpell capnp.Struct

// MemorizeSpell_TypeID is the unique identifier for the type MemorizeSpell.
const MemorizeSpell_TypeID = 0xa7e27069226b98ad

func NewMemorizeSpell(s *capnp.Segment) (MemorizeSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MemorizeSpell(st), err
}

func NewRootMemorizeSpell(s *capnp.Segment) (MemorizeSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MemorizeSpell(st), err
}

func ReadRootMemorizeSpell(msg *capnp.Message) (MemorizeSpell, error) {
	root, err := msg.Root()
	return MemorizeSpell(root.Struct()), err
}

func (s MemorizeSpell) String() string {
	str, _ := text.Marshal(0xa7e27069226b98ad, capnp.Struct(s))
	return str
}

func (s MemorizeSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MemorizeSpell) DecodeFromPtr(p capnp.Ptr) MemorizeSpell {
	return MemorizeSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MemorizeSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MemorizeSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MemorizeSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MemorizeSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MemorizeSpell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MemorizeSpell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MemorizeSpell) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MemorizeSpell) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MemorizeSpell) Scribing() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MemorizeSpell) SetScribing(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MemorizeSpell) Reduction() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MemorizeSpell) SetReduction(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MemorizeSpell_List is a list of MemorizeSpell.
type MemorizeSpell_List = capnp.StructList[MemorizeSpell]

// NewMemorizeSpell creates a new list of MemorizeSpell.
func NewMemorizeSpell_List(s *capnp.Segment, sz int32) (MemorizeSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MemorizeSpell](l), err
}

// MemorizeSpell_Future is a wrapper for a MemorizeSpell promised by a client call.
type MemorizeSpell_Future struct{ *capnp.Future }

func (f MemorizeSpell_Future) Struct() (MemorizeSpell, error) {
	p, err := f.Future.Ptr()
	return MemorizeSpell(p.Struct()), err
}

type Charm capnp.Struct

// Charm_TypeID is the unique identifier for the type Charm.
const Charm_TypeID = 0xe62b635478feb9f1

func NewCharm(s *capnp.Segment) (Charm, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Charm(st), err
}

func NewRootCharm(s *capnp.Segment) (Charm, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Charm(st), err
}

func ReadRootCharm(msg *capnp.Message) (Charm, error) {
	root, err := msg.Root()
	return Charm(root.Struct()), err
}

func (s Charm) String() string {
	str, _ := text.Marshal(0xe62b635478feb9f1, capnp.Struct(s))
	return str
}

func (s Charm) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Charm) DecodeFromPtr(p capnp.Ptr) Charm {
	return Charm(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Charm) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Charm) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Charm) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Charm) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Charm) OwnerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Charm) SetOwnerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Charm) PetId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Charm) SetPetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Charm) Command() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Charm) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Charm_List is a list of Charm.
type Charm_List = capnp.StructList[Charm]

// NewCharm creates a new list of Charm.
func NewCharm_List(s *capnp.Segment, sz int32) (Charm_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Charm](l), err
}

// Charm_Future is a wrapper for a Charm promised by a client call.
type Charm_Future struct{ *capnp.Future }

func (f Charm_Future) Struct() (Charm, error) {
	p, err := f.Future.Ptr()
	return Charm(p.Struct()), err
}

type InterruptCast capnp.Struct

// InterruptCast_TypeID is the unique identifier for the type InterruptCast.
const InterruptCast_TypeID = 0x8f9b301fdfe3c51c

func NewInterruptCast(s *capnp.Segment) (InterruptCast, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return InterruptCast(st), err
}

func NewRootInterruptCast(s *capnp.Segment) (InterruptCast, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return InterruptCast(st), err
}

func ReadRootInterruptCast(msg *capnp.Message) (InterruptCast, error) {
	root, err := msg.Root()
	return InterruptCast(root.Struct()), err
}

func (s InterruptCast) String() string {
	str, _ := text.Marshal(0x8f9b301fdfe3c51c, capnp.Struct(s))
	return str
}

func (s InterruptCast) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InterruptCast) DecodeFromPtr(p capnp.Ptr) InterruptCast {
	return InterruptCast(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InterruptCast) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InterruptCast) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InterruptCast) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InterruptCast) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InterruptCast) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InterruptCast) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InterruptCast) Messageid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InterruptCast) SetMessageid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InterruptCast) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s InterruptCast) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InterruptCast) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s InterruptCast) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// InterruptCast_List is a list of InterruptCast.
type InterruptCast_List = capnp.StructList[InterruptCast]

// NewInterruptCast creates a new list of InterruptCast.
func NewInterruptCast_List(s *capnp.Segment, sz int32) (InterruptCast_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[InterruptCast](l), err
}

// InterruptCast_Future is a wrapper for a InterruptCast promised by a client call.
type InterruptCast_Future struct{ *capnp.Future }

func (f InterruptCast_Future) Struct() (InterruptCast, error) {
	p, err := f.Future.Ptr()
	return InterruptCast(p.Struct()), err
}

type DeleteSpell capnp.Struct

// DeleteSpell_TypeID is the unique identifier for the type DeleteSpell.
const DeleteSpell_TypeID = 0x888a7e1d97fd6855

func NewDeleteSpell(s *capnp.Segment) (DeleteSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpell(st), err
}

func NewRootDeleteSpell(s *capnp.Segment) (DeleteSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpell(st), err
}

func ReadRootDeleteSpell(msg *capnp.Message) (DeleteSpell, error) {
	root, err := msg.Root()
	return DeleteSpell(root.Struct()), err
}

func (s DeleteSpell) String() string {
	str, _ := text.Marshal(0x888a7e1d97fd6855, capnp.Struct(s))
	return str
}

func (s DeleteSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteSpell) DecodeFromPtr(p capnp.Ptr) DeleteSpell {
	return DeleteSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteSpell) SpellSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteSpell) SetSpellSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DeleteSpell) Success() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DeleteSpell) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// DeleteSpell_List is a list of DeleteSpell.
type DeleteSpell_List = capnp.StructList[DeleteSpell]

// NewDeleteSpell creates a new list of DeleteSpell.
func NewDeleteSpell_List(s *capnp.Segment, sz int32) (DeleteSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DeleteSpell](l), err
}

// DeleteSpell_Future is a wrapper for a DeleteSpell promised by a client call.
type DeleteSpell_Future struct{ *capnp.Future }

func (f DeleteSpell_Future) Struct() (DeleteSpell, error) {
	p, err := f.Future.Ptr()
	return DeleteSpell(p.Struct()), err
}

type ManaChange capnp.Struct

// ManaChange_TypeID is the unique identifier for the type ManaChange.
const ManaChange_TypeID = 0xa7ab2bbcc8342323

func NewManaChange(s *capnp.Segment) (ManaChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ManaChange(st), err
}

func NewRootManaChange(s *capnp.Segment) (ManaChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ManaChange(st), err
}

func ReadRootManaChange(msg *capnp.Message) (ManaChange, error) {
	root, err := msg.Root()
	return ManaChange(root.Struct()), err
}

func (s ManaChange) String() string {
	str, _ := text.Marshal(0xa7ab2bbcc8342323, capnp.Struct(s))
	return str
}

func (s ManaChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ManaChange) DecodeFromPtr(p capnp.Ptr) ManaChange {
	return ManaChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ManaChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ManaChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ManaChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ManaChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ManaChange) NewMana() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ManaChange) SetNewMana(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ManaChange) Stamina() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ManaChange) SetStamina(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ManaChange) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ManaChange) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ManaChange) Keepcasting() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ManaChange) SetKeepcasting(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ManaChange) Padding() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ManaChange) HasPadding() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ManaChange) SetPadding(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPadding sets the padding field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ManaChange) NewPadding(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ManaChange_List is a list of ManaChange.
type ManaChange_List = capnp.StructList[ManaChange]

// NewManaChange creates a new list of ManaChange.
func NewManaChange_List(s *capnp.Segment, sz int32) (ManaChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[ManaChange](l), err
}

// ManaChange_Future is a wrapper for a ManaChange promised by a client call.
type ManaChange_Future struct{ *capnp.Future }

func (f ManaChange_Future) Struct() (ManaChange, error) {
	p, err := f.Future.Ptr()
	return ManaChange(p.Struct()), err
}

type SwapSpell capnp.Struct

// SwapSpell_TypeID is the unique identifier for the type SwapSpell.
const SwapSpell_TypeID = 0xe4e7eeb23bebb1f8

func NewSwapSpell(s *capnp.Segment) (SwapSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SwapSpell(st), err
}

func NewRootSwapSpell(s *capnp.Segment) (SwapSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SwapSpell(st), err
}

func ReadRootSwapSpell(msg *capnp.Message) (SwapSpell, error) {
	root, err := msg.Root()
	return SwapSpell(root.Struct()), err
}

func (s SwapSpell) String() string {
	str, _ := text.Marshal(0xe4e7eeb23bebb1f8, capnp.Struct(s))
	return str
}

func (s SwapSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SwapSpell) DecodeFromPtr(p capnp.Ptr) SwapSpell {
	return SwapSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SwapSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SwapSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SwapSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SwapSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SwapSpell) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SwapSpell) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SwapSpell) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SwapSpell) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SwapSpell_List is a list of SwapSpell.
type SwapSpell_List = capnp.StructList[SwapSpell]

// NewSwapSpell creates a new list of SwapSpell.
func NewSwapSpell_List(s *capnp.Segment, sz int32) (SwapSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SwapSpell](l), err
}

// SwapSpell_Future is a wrapper for a SwapSpell promised by a client call.
type SwapSpell_Future struct{ *capnp.Future }

func (f SwapSpell_Future) Struct() (SwapSpell, error) {
	p, err := f.Future.Ptr()
	return SwapSpell(p.Struct()), err
}

type BeginCast capnp.Struct

// BeginCast_TypeID is the unique identifier for the type BeginCast.
const BeginCast_TypeID = 0xc576336317865217

func NewBeginCast(s *capnp.Segment) (BeginCast, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BeginCast(st), err
}

func NewRootBeginCast(s *capnp.Segment) (BeginCast, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BeginCast(st), err
}

func ReadRootBeginCast(msg *capnp.Message) (BeginCast, error) {
	root, err := msg.Root()
	return BeginCast(root.Struct()), err
}

func (s BeginCast) String() string {
	str, _ := text.Marshal(0xc576336317865217, capnp.Struct(s))
	return str
}

func (s BeginCast) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BeginCast) DecodeFromPtr(p capnp.Ptr) BeginCast {
	return BeginCast(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BeginCast) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BeginCast) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BeginCast) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BeginCast) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BeginCast) CasterId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BeginCast) SetCasterId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BeginCast) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BeginCast) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BeginCast) CastTime() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BeginCast) SetCastTime(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// BeginCast_List is a list of BeginCast.
type BeginCast_List = capnp.StructList[BeginCast]

// NewBeginCast creates a new list of BeginCast.
func NewBeginCast_List(s *capnp.Segment, sz int32) (BeginCast_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[BeginCast](l), err
}

// BeginCast_Future is a wrapper for a BeginCast promised by a client call.
type BeginCast_Future struct{ *capnp.Future }

func (f BeginCast_Future) Struct() (BeginCast, error) {
	p, err := f.Future.Ptr()
	return BeginCast(p.Struct()), err
}

type CastSpell capnp.Struct

// CastSpell_TypeID is the unique identifier for the type CastSpell.
const CastSpell_TypeID = 0xa987ac170b5f48c3

func NewCastSpell(s *capnp.Segment) (CastSpell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CastSpell(st), err
}

func NewRootCastSpell(s *capnp.Segment) (CastSpell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CastSpell(st), err
}

func ReadRootCastSpell(msg *capnp.Message) (CastSpell, error) {
	root, err := msg.Root()
	return CastSpell(root.Struct()), err
}

func (s CastSpell) String() string {
	str, _ := text.Marshal(0xa987ac170b5f48c3, capnp.Struct(s))
	return str
}

func (s CastSpell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CastSpell) DecodeFromPtr(p capnp.Ptr) CastSpell {
	return CastSpell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CastSpell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CastSpell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CastSpell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CastSpell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CastSpell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CastSpell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CastSpell) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CastSpell) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CastSpell) Inventoryslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CastSpell) SetInventoryslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CastSpell) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CastSpell) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// CastSpell_List is a list of CastSpell.
type CastSpell_List = capnp.StructList[CastSpell]

// NewCastSpell creates a new list of CastSpell.
func NewCastSpell_List(s *capnp.Segment, sz int32) (CastSpell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CastSpell](l), err
}

// CastSpell_Future is a wrapper for a CastSpell promised by a client call.
type CastSpell_Future struct{ *capnp.Future }

func (f CastSpell_Future) Struct() (CastSpell, error) {
	p, err := f.Future.Ptr()
	return CastSpell(p.Struct()), err
}

type SpawnAppearance capnp.Struct

// SpawnAppearance_TypeID is the unique identifier for the type SpawnAppearance.
const SpawnAppearance_TypeID = 0xc817bfd03978a39b

func NewSpawnAppearance(s *capnp.Segment) (SpawnAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnAppearance(st), err
}

func NewRootSpawnAppearance(s *capnp.Segment) (SpawnAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnAppearance(st), err
}

func ReadRootSpawnAppearance(msg *capnp.Message) (SpawnAppearance, error) {
	root, err := msg.Root()
	return SpawnAppearance(root.Struct()), err
}

func (s SpawnAppearance) String() string {
	str, _ := text.Marshal(0xc817bfd03978a39b, capnp.Struct(s))
	return str
}

func (s SpawnAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnAppearance) DecodeFromPtr(p capnp.Ptr) SpawnAppearance {
	return SpawnAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnAppearance) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnAppearance) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpawnAppearance) Parameter() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpawnAppearance) SetParameter(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpawnAppearance_List is a list of SpawnAppearance.
type SpawnAppearance_List = capnp.StructList[SpawnAppearance]

// NewSpawnAppearance creates a new list of SpawnAppearance.
func NewSpawnAppearance_List(s *capnp.Segment, sz int32) (SpawnAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[SpawnAppearance](l), err
}

// SpawnAppearance_Future is a wrapper for a SpawnAppearance promised by a client call.
type SpawnAppearance_Future struct{ *capnp.Future }

func (f SpawnAppearance_Future) Struct() (SpawnAppearance, error) {
	p, err := f.Future.Ptr()
	return SpawnAppearance(p.Struct()), err
}

type SpellBuff capnp.Struct

// SpellBuff_TypeID is the unique identifier for the type SpellBuff.
const SpellBuff_TypeID = 0x9c9f074ebb94ca3b

func NewSpellBuff(s *capnp.Segment) (SpellBuff, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SpellBuff(st), err
}

func NewRootSpellBuff(s *capnp.Segment) (SpellBuff, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SpellBuff(st), err
}

func ReadRootSpellBuff(msg *capnp.Message) (SpellBuff, error) {
	root, err := msg.Root()
	return SpellBuff(root.Struct()), err
}

func (s SpellBuff) String() string {
	str, _ := text.Marshal(0x9c9f074ebb94ca3b, capnp.Struct(s))
	return str
}

func (s SpellBuff) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpellBuff) DecodeFromPtr(p capnp.Ptr) SpellBuff {
	return SpellBuff(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpellBuff) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpellBuff) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpellBuff) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpellBuff) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpellBuff) EffectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpellBuff) SetEffectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpellBuff) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpellBuff) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpellBuff) BardModifier() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpellBuff) SetBardModifier(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s SpellBuff) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s SpellBuff) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s SpellBuff) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s SpellBuff) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s SpellBuff) Counters() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s SpellBuff) SetCounters(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s SpellBuff) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s SpellBuff) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// SpellBuff_List is a list of SpellBuff.
type SpellBuff_List = capnp.StructList[SpellBuff]

// NewSpellBuff creates a new list of SpellBuff.
func NewSpellBuff_List(s *capnp.Segment, sz int32) (SpellBuff_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[SpellBuff](l), err
}

// SpellBuff_Future is a wrapper for a SpellBuff promised by a client call.
type SpellBuff_Future struct{ *capnp.Future }

func (f SpellBuff_Future) Struct() (SpellBuff, error) {
	p, err := f.Future.Ptr()
	return SpellBuff(p.Struct()), err
}

type SpellBuffPacket capnp.Struct

// SpellBuffPacket_TypeID is the unique identifier for the type SpellBuffPacket.
const SpellBuffPacket_TypeID = 0xd0f511db04f5194f

func NewSpellBuffPacket(s *capnp.Segment) (SpellBuffPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SpellBuffPacket(st), err
}

func NewRootSpellBuffPacket(s *capnp.Segment) (SpellBuffPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return SpellBuffPacket(st), err
}

func ReadRootSpellBuffPacket(msg *capnp.Message) (SpellBuffPacket, error) {
	root, err := msg.Root()
	return SpellBuffPacket(root.Struct()), err
}

func (s SpellBuffPacket) String() string {
	str, _ := text.Marshal(0xd0f511db04f5194f, capnp.Struct(s))
	return str
}

func (s SpellBuffPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpellBuffPacket) DecodeFromPtr(p capnp.Ptr) SpellBuffPacket {
	return SpellBuffPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpellBuffPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpellBuffPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpellBuffPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpellBuffPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpellBuffPacket) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpellBuffPacket) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpellBuffPacket) Buff() (SpellBuff, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SpellBuff(p.Struct()), err
}

func (s SpellBuffPacket) HasBuff() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpellBuffPacket) SetBuff(v SpellBuff) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBuff sets the buff field to a newly
// allocated SpellBuff struct, preferring placement in s's segment.
func (s SpellBuffPacket) NewBuff() (SpellBuff, error) {
	ss, err := NewSpellBuff(capnp.Struct(s).Segment())
	if err != nil {
		return SpellBuff{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SpellBuffPacket) Slotid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpellBuffPacket) SetSlotid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpellBuffPacket) Bufffade() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpellBuffPacket) SetBufffade(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpellBuffPacket_List is a list of SpellBuffPacket.
type SpellBuffPacket_List = capnp.StructList[SpellBuffPacket]

// NewSpellBuffPacket creates a new list of SpellBuffPacket.
func NewSpellBuffPacket_List(s *capnp.Segment, sz int32) (SpellBuffPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[SpellBuffPacket](l), err
}

// SpellBuffPacket_Future is a wrapper for a SpellBuffPacket promised by a client call.
type SpellBuffPacket_Future struct{ *capnp.Future }

func (f SpellBuffPacket_Future) Struct() (SpellBuffPacket, error) {
	p, err := f.Future.Ptr()
	return SpellBuffPacket(p.Struct()), err
}
func (p SpellBuffPacket_Future) Buff() SpellBuff_Future {
	return SpellBuff_Future{Future: p.Future.Field(0, nil)}
}

type ItemNamePacket capnp.Struct

// ItemNamePacket_TypeID is the unique identifier for the type ItemNamePacket.
const ItemNamePacket_TypeID = 0xf4c3318dcf329728

func NewItemNamePacket(s *capnp.Segment) (ItemNamePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemNamePacket(st), err
}

func NewRootItemNamePacket(s *capnp.Segment) (ItemNamePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemNamePacket(st), err
}

func ReadRootItemNamePacket(msg *capnp.Message) (ItemNamePacket, error) {
	root, err := msg.Root()
	return ItemNamePacket(root.Struct()), err
}

func (s ItemNamePacket) String() string {
	str, _ := text.Marshal(0xf4c3318dcf329728, capnp.Struct(s))
	return str
}

func (s ItemNamePacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemNamePacket) DecodeFromPtr(p capnp.Ptr) ItemNamePacket {
	return ItemNamePacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemNamePacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemNamePacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemNamePacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemNamePacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemNamePacket) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemNamePacket) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ItemNamePacket) Unkown() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ItemNamePacket) SetUnkown(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ItemNamePacket) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ItemNamePacket) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ItemNamePacket) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ItemNamePacket) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ItemNamePacket_List is a list of ItemNamePacket.
type ItemNamePacket_List = capnp.StructList[ItemNamePacket]

// NewItemNamePacket creates a new list of ItemNamePacket.
func NewItemNamePacket_List(s *capnp.Segment, sz int32) (ItemNamePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ItemNamePacket](l), err
}

// ItemNamePacket_Future is a wrapper for a ItemNamePacket promised by a client call.
type ItemNamePacket_Future struct{ *capnp.Future }

func (f ItemNamePacket_Future) Struct() (ItemNamePacket, error) {
	p, err := f.Future.Ptr()
	return ItemNamePacket(p.Struct()), err
}

type ItemProperties capnp.Struct

// ItemProperties_TypeID is the unique identifier for the type ItemProperties.
const ItemProperties_TypeID = 0xe00fb886fc82f1ab

func NewItemProperties(s *capnp.Segment) (ItemProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ItemProperties(st), err
}

func NewRootItemProperties(s *capnp.Segment) (ItemProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ItemProperties(st), err
}

func ReadRootItemProperties(msg *capnp.Message) (ItemProperties, error) {
	root, err := msg.Root()
	return ItemProperties(root.Struct()), err
}

func (s ItemProperties) String() string {
	str, _ := text.Marshal(0xe00fb886fc82f1ab, capnp.Struct(s))
	return str
}

func (s ItemProperties) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemProperties) DecodeFromPtr(p capnp.Ptr) ItemProperties {
	return ItemProperties(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemProperties) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemProperties) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemProperties) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemProperties) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemProperties) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemProperties) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ItemProperties_List is a list of ItemProperties.
type ItemProperties_List = capnp.StructList[ItemProperties]

// NewItemProperties creates a new list of ItemProperties.
func NewItemProperties_List(s *capnp.Segment, sz int32) (ItemProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ItemProperties](l), err
}

// ItemProperties_Future is a wrapper for a ItemProperties promised by a client call.
type ItemProperties_Future struct{ *capnp.Future }

func (f ItemProperties_Future) Struct() (ItemProperties, error) {
	p, err := f.Future.Ptr()
	return ItemProperties(p.Struct()), err
}

type GMTrainee capnp.Struct

// GMTrainee_TypeID is the unique identifier for the type GMTrainee.
const GMTrainee_TypeID = 0xbadafe4de857fe71

func NewGMTrainee(s *capnp.Segment) (GMTrainee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GMTrainee(st), err
}

func NewRootGMTrainee(s *capnp.Segment) (GMTrainee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GMTrainee(st), err
}

func ReadRootGMTrainee(msg *capnp.Message) (GMTrainee, error) {
	root, err := msg.Root()
	return GMTrainee(root.Struct()), err
}

func (s GMTrainee) String() string {
	str, _ := text.Marshal(0xbadafe4de857fe71, capnp.Struct(s))
	return str
}

func (s GMTrainee) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMTrainee) DecodeFromPtr(p capnp.Ptr) GMTrainee {
	return GMTrainee(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMTrainee) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMTrainee) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMTrainee) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMTrainee) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMTrainee) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMTrainee) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMTrainee) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMTrainee) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMTrainee) Skills() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s GMTrainee) HasSkills() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMTrainee) SetSkills(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSkills sets the skills field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s GMTrainee) NewSkills(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GMTrainee_List is a list of GMTrainee.
type GMTrainee_List = capnp.StructList[GMTrainee]

// NewGMTrainee creates a new list of GMTrainee.
func NewGMTrainee_List(s *capnp.Segment, sz int32) (GMTrainee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GMTrainee](l), err
}

// GMTrainee_Future is a wrapper for a GMTrainee promised by a client call.
type GMTrainee_Future struct{ *capnp.Future }

func (f GMTrainee_Future) Struct() (GMTrainee, error) {
	p, err := f.Future.Ptr()
	return GMTrainee(p.Struct()), err
}

type GMTrainEnd capnp.Struct

// GMTrainEnd_TypeID is the unique identifier for the type GMTrainEnd.
const GMTrainEnd_TypeID = 0xb72ecd96799cf7e7

func NewGMTrainEnd(s *capnp.Segment) (GMTrainEnd, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMTrainEnd(st), err
}

func NewRootGMTrainEnd(s *capnp.Segment) (GMTrainEnd, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMTrainEnd(st), err
}

func ReadRootGMTrainEnd(msg *capnp.Message) (GMTrainEnd, error) {
	root, err := msg.Root()
	return GMTrainEnd(root.Struct()), err
}

func (s GMTrainEnd) String() string {
	str, _ := text.Marshal(0xb72ecd96799cf7e7, capnp.Struct(s))
	return str
}

func (s GMTrainEnd) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMTrainEnd) DecodeFromPtr(p capnp.Ptr) GMTrainEnd {
	return GMTrainEnd(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMTrainEnd) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMTrainEnd) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMTrainEnd) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMTrainEnd) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMTrainEnd) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMTrainEnd) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMTrainEnd) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMTrainEnd) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// GMTrainEnd_List is a list of GMTrainEnd.
type GMTrainEnd_List = capnp.StructList[GMTrainEnd]

// NewGMTrainEnd creates a new list of GMTrainEnd.
func NewGMTrainEnd_List(s *capnp.Segment, sz int32) (GMTrainEnd_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GMTrainEnd](l), err
}

// GMTrainEnd_Future is a wrapper for a GMTrainEnd promised by a client call.
type GMTrainEnd_Future struct{ *capnp.Future }

func (f GMTrainEnd_Future) Struct() (GMTrainEnd, error) {
	p, err := f.Future.Ptr()
	return GMTrainEnd(p.Struct()), err
}

type GMSkillChange capnp.Struct

// GMSkillChange_TypeID is the unique identifier for the type GMSkillChange.
const GMSkillChange_TypeID = 0xb0d71e9e634d1529

func NewGMSkillChange(s *capnp.Segment) (GMSkillChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GMSkillChange(st), err
}

func NewRootGMSkillChange(s *capnp.Segment) (GMSkillChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GMSkillChange(st), err
}

func ReadRootGMSkillChange(msg *capnp.Message) (GMSkillChange, error) {
	root, err := msg.Root()
	return GMSkillChange(root.Struct()), err
}

func (s GMSkillChange) String() string {
	str, _ := text.Marshal(0xb0d71e9e634d1529, capnp.Struct(s))
	return str
}

func (s GMSkillChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMSkillChange) DecodeFromPtr(p capnp.Ptr) GMSkillChange {
	return GMSkillChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMSkillChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMSkillChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMSkillChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMSkillChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMSkillChange) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMSkillChange) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMSkillChange) Skillbank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMSkillChange) SetSkillbank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMSkillChange) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMSkillChange) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// GMSkillChange_List is a list of GMSkillChange.
type GMSkillChange_List = capnp.StructList[GMSkillChange]

// NewGMSkillChange creates a new list of GMSkillChange.
func NewGMSkillChange_List(s *capnp.Segment, sz int32) (GMSkillChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[GMSkillChange](l), err
}

// GMSkillChange_Future is a wrapper for a GMSkillChange promised by a client call.
type GMSkillChange_Future struct{ *capnp.Future }

func (f GMSkillChange_Future) Struct() (GMSkillChange, error) {
	p, err := f.Future.Ptr()
	return GMSkillChange(p.Struct()), err
}

type ConsentResponse capnp.Struct

// ConsentResponse_TypeID is the unique identifier for the type ConsentResponse.
const ConsentResponse_TypeID = 0xb52cdc5b0d00dfde

func NewConsentResponse(s *capnp.Segment) (ConsentResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ConsentResponse(st), err
}

func NewRootConsentResponse(s *capnp.Segment) (ConsentResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ConsentResponse(st), err
}

func ReadRootConsentResponse(msg *capnp.Message) (ConsentResponse, error) {
	root, err := msg.Root()
	return ConsentResponse(root.Struct()), err
}

func (s ConsentResponse) String() string {
	str, _ := text.Marshal(0xb52cdc5b0d00dfde, capnp.Struct(s))
	return str
}

func (s ConsentResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ConsentResponse) DecodeFromPtr(p capnp.Ptr) ConsentResponse {
	return ConsentResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ConsentResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ConsentResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ConsentResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ConsentResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ConsentResponse) Grantname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ConsentResponse) HasGrantname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ConsentResponse) GrantnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetGrantname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ConsentResponse) Ownername() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ConsentResponse) HasOwnername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ConsentResponse) OwnernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetOwnername(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ConsentResponse) Permission() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ConsentResponse) SetPermission(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ConsentResponse) Zonename() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ConsentResponse) HasZonename() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ConsentResponse) ZonenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ConsentResponse) SetZonename(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ConsentResponse_List is a list of ConsentResponse.
type ConsentResponse_List = capnp.StructList[ConsentResponse]

// NewConsentResponse creates a new list of ConsentResponse.
func NewConsentResponse_List(s *capnp.Segment, sz int32) (ConsentResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[ConsentResponse](l), err
}

// ConsentResponse_Future is a wrapper for a ConsentResponse promised by a client call.
type ConsentResponse_Future struct{ *capnp.Future }

func (f ConsentResponse_Future) Struct() (ConsentResponse, error) {
	p, err := f.Future.Ptr()
	return ConsentResponse(p.Struct()), err
}

type NameGeneration capnp.Struct

// NameGeneration_TypeID is the unique identifier for the type NameGeneration.
const NameGeneration_TypeID = 0xa984e49365524f14

func NewNameGeneration(s *capnp.Segment) (NameGeneration, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameGeneration(st), err
}

func NewRootNameGeneration(s *capnp.Segment) (NameGeneration, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameGeneration(st), err
}

func ReadRootNameGeneration(msg *capnp.Message) (NameGeneration, error) {
	root, err := msg.Root()
	return NameGeneration(root.Struct()), err
}

func (s NameGeneration) String() string {
	str, _ := text.Marshal(0xa984e49365524f14, capnp.Struct(s))
	return str
}

func (s NameGeneration) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NameGeneration) DecodeFromPtr(p capnp.Ptr) NameGeneration {
	return NameGeneration(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NameGeneration) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NameGeneration) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NameGeneration) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NameGeneration) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NameGeneration) Race() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NameGeneration) SetRace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NameGeneration) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NameGeneration) SetGender(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s NameGeneration) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NameGeneration) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NameGeneration) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NameGeneration) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// NameGeneration_List is a list of NameGeneration.
type NameGeneration_List = capnp.StructList[NameGeneration]

// NewNameGeneration creates a new list of NameGeneration.
func NewNameGeneration_List(s *capnp.Segment, sz int32) (NameGeneration_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NameGeneration](l), err
}

// NameGeneration_Future is a wrapper for a NameGeneration promised by a client call.
type NameGeneration_Future struct{ *capnp.Future }

func (f NameGeneration_Future) Struct() (NameGeneration, error) {
	p, err := f.Future.Ptr()
	return NameGeneration(p.Struct()), err
}

type NameApprove capnp.Struct

// NameApprove_TypeID is the unique identifier for the type NameApprove.
const NameApprove_TypeID = 0xb8b4b6c6e1e52417

func NewNameApprove(s *capnp.Segment) (NameApprove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameApprove(st), err
}

func NewRootNameApprove(s *capnp.Segment) (NameApprove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NameApprove(st), err
}

func ReadRootNameApprove(msg *capnp.Message) (NameApprove, error) {
	root, err := msg.Root()
	return NameApprove(root.Struct()), err
}

func (s NameApprove) String() string {
	str, _ := text.Marshal(0xb8b4b6c6e1e52417, capnp.Struct(s))
	return str
}

func (s NameApprove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NameApprove) DecodeFromPtr(p capnp.Ptr) NameApprove {
	return NameApprove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NameApprove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NameApprove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NameApprove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NameApprove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NameApprove) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NameApprove) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NameApprove) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NameApprove) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NameApprove) Race() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NameApprove) SetRace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NameApprove) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NameApprove) SetGender(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// NameApprove_List is a list of NameApprove.
type NameApprove_List = capnp.StructList[NameApprove]

// NewNameApprove creates a new list of NameApprove.
func NewNameApprove_List(s *capnp.Segment, sz int32) (NameApprove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NameApprove](l), err
}

// NameApprove_Future is a wrapper for a NameApprove promised by a client call.
type NameApprove_Future struct{ *capnp.Future }

func (f NameApprove_Future) Struct() (NameApprove, error) {
	p, err := f.Future.Ptr()
	return NameApprove(p.Struct()), err
}

type CharCreate capnp.Struct

// CharCreate_TypeID is the unique identifier for the type CharCreate.
const CharCreate_TypeID = 0xca688fde6bcd4bbd

func NewCharCreate(s *capnp.Segment) (CharCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return CharCreate(st), err
}

func NewRootCharCreate(s *capnp.Segment) (CharCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return CharCreate(st), err
}

func ReadRootCharCreate(msg *capnp.Message) (CharCreate, error) {
	root, err := msg.Root()
	return CharCreate(root.Struct()), err
}

func (s CharCreate) String() string {
	str, _ := text.Marshal(0xca688fde6bcd4bbd, capnp.Struct(s))
	return str
}

func (s CharCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CharCreate) DecodeFromPtr(p capnp.Ptr) CharCreate {
	return CharCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CharCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CharCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CharCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CharCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CharCreate) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CharCreate) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CharCreate) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CharCreate) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CharCreate) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CharCreate) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CharCreate) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CharCreate) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s CharCreate) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s CharCreate) SetGender(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s CharCreate) Race() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s CharCreate) SetRace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s CharCreate) StartZone() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s CharCreate) SetStartZone(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s CharCreate) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s CharCreate) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s CharCreate) Deity() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s CharCreate) SetDeity(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s CharCreate) Str() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s CharCreate) SetStr(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s CharCreate) Sta() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s CharCreate) SetSta(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s CharCreate) Agi() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s CharCreate) SetAgi(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s CharCreate) Dex() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s CharCreate) SetDex(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s CharCreate) Wis() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s CharCreate) SetWis(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s CharCreate) Intel() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s CharCreate) SetIntel(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s CharCreate) Cha() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s CharCreate) SetCha(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s CharCreate) Face() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s CharCreate) SetFace(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s CharCreate) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s CharCreate) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s CharCreate) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s CharCreate) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s CharCreate) Tutorial() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s CharCreate) SetTutorial(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s CharCreate) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CharCreate) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CharCreate) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CharCreate) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CharCreate_List is a list of CharCreate.
type CharCreate_List = capnp.StructList[CharCreate]

// NewCharCreate creates a new list of CharCreate.
func NewCharCreate_List(s *capnp.Segment, sz int32) (CharCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[CharCreate](l), err
}

// CharCreate_Future is a wrapper for a CharCreate promised by a client call.
type CharCreate_Future struct{ *capnp.Future }

func (f CharCreate_Future) Struct() (CharCreate, error) {
	p, err := f.Future.Ptr()
	return CharCreate(p.Struct()), err
}

type AAArray capnp.Struct

// AAArray_TypeID is the unique identifier for the type AAArray.
const AAArray_TypeID = 0xc5d32cc234a53620

func NewAAArray(s *capnp.Segment) (AAArray, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAArray(st), err
}

func NewRootAAArray(s *capnp.Segment) (AAArray, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAArray(st), err
}

func ReadRootAAArray(msg *capnp.Message) (AAArray, error) {
	root, err := msg.Root()
	return AAArray(root.Struct()), err
}

func (s AAArray) String() string {
	str, _ := text.Marshal(0xc5d32cc234a53620, capnp.Struct(s))
	return str
}

func (s AAArray) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAArray) DecodeFromPtr(p capnp.Ptr) AAArray {
	return AAArray(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAArray) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAArray) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAArray) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAArray) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAArray) Aa() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAArray) SetAa(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAArray) Value() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAArray) SetValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AAArray_List is a list of AAArray.
type AAArray_List = capnp.StructList[AAArray]

// NewAAArray creates a new list of AAArray.
func NewAAArray_List(s *capnp.Segment, sz int32) (AAArray_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AAArray](l), err
}

// AAArray_Future is a wrapper for a AAArray promised by a client call.
type AAArray_Future struct{ *capnp.Future }

func (f AAArray_Future) Struct() (AAArray, error) {
	p, err := f.Future.Ptr()
	return AAArray(p.Struct()), err
}

type Disciplines capnp.Struct

// Disciplines_TypeID is the unique identifier for the type Disciplines.
const Disciplines_TypeID = 0xdb811264e672b627

func NewDisciplines(s *capnp.Segment) (Disciplines, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Disciplines(st), err
}

func NewRootDisciplines(s *capnp.Segment) (Disciplines, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Disciplines(st), err
}

func ReadRootDisciplines(msg *capnp.Message) (Disciplines, error) {
	root, err := msg.Root()
	return Disciplines(root.Struct()), err
}

func (s Disciplines) String() string {
	str, _ := text.Marshal(0xdb811264e672b627, capnp.Struct(s))
	return str
}

func (s Disciplines) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Disciplines) DecodeFromPtr(p capnp.Ptr) Disciplines {
	return Disciplines(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Disciplines) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Disciplines) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Disciplines) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Disciplines) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Disciplines) Values() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Disciplines) HasValues() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Disciplines) SetValues(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValues sets the values field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Disciplines) NewValues(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Disciplines_List is a list of Disciplines.
type Disciplines_List = capnp.StructList[Disciplines]

// NewDisciplines creates a new list of Disciplines.
func NewDisciplines_List(s *capnp.Segment, sz int32) (Disciplines_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Disciplines](l), err
}

// Disciplines_Future is a wrapper for a Disciplines promised by a client call.
type Disciplines_Future struct{ *capnp.Future }

func (f Disciplines_Future) Struct() (Disciplines, error) {
	p, err := f.Future.Ptr()
	return Disciplines(p.Struct()), err
}

type Tribute capnp.Struct

// Tribute_TypeID is the unique identifier for the type Tribute.
const Tribute_TypeID = 0xe02474ef23d4f2bc

func NewTribute(s *capnp.Segment) (Tribute, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Tribute(st), err
}

func NewRootTribute(s *capnp.Segment) (Tribute, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Tribute(st), err
}

func ReadRootTribute(msg *capnp.Message) (Tribute, error) {
	root, err := msg.Root()
	return Tribute(root.Struct()), err
}

func (s Tribute) String() string {
	str, _ := text.Marshal(0xe02474ef23d4f2bc, capnp.Struct(s))
	return str
}

func (s Tribute) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tribute) DecodeFromPtr(p capnp.Ptr) Tribute {
	return Tribute(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tribute) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tribute) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tribute) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tribute) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tribute) Tribute() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Tribute) SetTribute(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Tribute) Tier() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Tribute) SetTier(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Tribute_List is a list of Tribute.
type Tribute_List = capnp.StructList[Tribute]

// NewTribute creates a new list of Tribute.
func NewTribute_List(s *capnp.Segment, sz int32) (Tribute_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Tribute](l), err
}

// Tribute_Future is a wrapper for a Tribute promised by a client call.
type Tribute_Future struct{ *capnp.Future }

func (f Tribute_Future) Struct() (Tribute, error) {
	p, err := f.Future.Ptr()
	return Tribute(p.Struct()), err
}

type BandolierItem capnp.Struct

// BandolierItem_TypeID is the unique identifier for the type BandolierItem.
const BandolierItem_TypeID = 0xd7e327183a76a4f8

func NewBandolierItem(s *capnp.Segment) (BandolierItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierItem(st), err
}

func NewRootBandolierItem(s *capnp.Segment) (BandolierItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierItem(st), err
}

func ReadRootBandolierItem(msg *capnp.Message) (BandolierItem, error) {
	root, err := msg.Root()
	return BandolierItem(root.Struct()), err
}

func (s BandolierItem) String() string {
	str, _ := text.Marshal(0xd7e327183a76a4f8, capnp.Struct(s))
	return str
}

func (s BandolierItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierItem) DecodeFromPtr(p capnp.Ptr) BandolierItem {
	return BandolierItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierItem) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierItem) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierItem) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierItem) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BandolierItem) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BandolierItem) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BandolierItem) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BandolierItem) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BandolierItem_List is a list of BandolierItem.
type BandolierItem_List = capnp.StructList[BandolierItem]

// NewBandolierItem creates a new list of BandolierItem.
func NewBandolierItem_List(s *capnp.Segment, sz int32) (BandolierItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BandolierItem](l), err
}

// BandolierItem_Future is a wrapper for a BandolierItem promised by a client call.
type BandolierItem_Future struct{ *capnp.Future }

func (f BandolierItem_Future) Struct() (BandolierItem, error) {
	p, err := f.Future.Ptr()
	return BandolierItem(p.Struct()), err
}

type Bandolier capnp.Struct

// Bandolier_TypeID is the unique identifier for the type Bandolier.
const Bandolier_TypeID = 0x81fa11546e952c02

func NewBandolier(s *capnp.Segment) (Bandolier, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Bandolier(st), err
}

func NewRootBandolier(s *capnp.Segment) (Bandolier, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Bandolier(st), err
}

func ReadRootBandolier(msg *capnp.Message) (Bandolier, error) {
	root, err := msg.Root()
	return Bandolier(root.Struct()), err
}

func (s Bandolier) String() string {
	str, _ := text.Marshal(0x81fa11546e952c02, capnp.Struct(s))
	return str
}

func (s Bandolier) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bandolier) DecodeFromPtr(p capnp.Ptr) Bandolier {
	return Bandolier(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bandolier) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bandolier) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bandolier) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bandolier) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bandolier) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Bandolier) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Bandolier) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Bandolier) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Bandolier) Items() (BandolierItem_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return BandolierItem_List(p.List()), err
}

func (s Bandolier) HasItems() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Bandolier) SetItems(v BandolierItem_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated BandolierItem_List, preferring placement in s's segment.
func (s Bandolier) NewItems(n int32) (BandolierItem_List, error) {
	l, err := NewBandolierItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return BandolierItem_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Bandolier_List is a list of Bandolier.
type Bandolier_List = capnp.StructList[Bandolier]

// NewBandolier creates a new list of Bandolier.
func NewBandolier_List(s *capnp.Segment, sz int32) (Bandolier_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Bandolier](l), err
}

// Bandolier_Future is a wrapper for a Bandolier promised by a client call.
type Bandolier_Future struct{ *capnp.Future }

func (f Bandolier_Future) Struct() (Bandolier, error) {
	p, err := f.Future.Ptr()
	return Bandolier(p.Struct()), err
}

type PotionBeltItem capnp.Struct

// PotionBeltItem_TypeID is the unique identifier for the type PotionBeltItem.
const PotionBeltItem_TypeID = 0xdcfcab864c34a056

func NewPotionBeltItem(s *capnp.Segment) (PotionBeltItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PotionBeltItem(st), err
}

func NewRootPotionBeltItem(s *capnp.Segment) (PotionBeltItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PotionBeltItem(st), err
}

func ReadRootPotionBeltItem(msg *capnp.Message) (PotionBeltItem, error) {
	root, err := msg.Root()
	return PotionBeltItem(root.Struct()), err
}

func (s PotionBeltItem) String() string {
	str, _ := text.Marshal(0xdcfcab864c34a056, capnp.Struct(s))
	return str
}

func (s PotionBeltItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PotionBeltItem) DecodeFromPtr(p capnp.Ptr) PotionBeltItem {
	return PotionBeltItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PotionBeltItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PotionBeltItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PotionBeltItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PotionBeltItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PotionBeltItem) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PotionBeltItem) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PotionBeltItem) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PotionBeltItem) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PotionBeltItem) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PotionBeltItem) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PotionBeltItem) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PotionBeltItem) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PotionBeltItem_List is a list of PotionBeltItem.
type PotionBeltItem_List = capnp.StructList[PotionBeltItem]

// NewPotionBeltItem creates a new list of PotionBeltItem.
func NewPotionBeltItem_List(s *capnp.Segment, sz int32) (PotionBeltItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[PotionBeltItem](l), err
}

// PotionBeltItem_Future is a wrapper for a PotionBeltItem promised by a client call.
type PotionBeltItem_Future struct{ *capnp.Future }

func (f PotionBeltItem_Future) Struct() (PotionBeltItem, error) {
	p, err := f.Future.Ptr()
	return PotionBeltItem(p.Struct()), err
}

type PotionBelt capnp.Struct

// PotionBelt_TypeID is the unique identifier for the type PotionBelt.
const PotionBelt_TypeID = 0xce55ffdae06f694d

func NewPotionBelt(s *capnp.Segment) (PotionBelt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PotionBelt(st), err
}

func NewRootPotionBelt(s *capnp.Segment) (PotionBelt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PotionBelt(st), err
}

func ReadRootPotionBelt(msg *capnp.Message) (PotionBelt, error) {
	root, err := msg.Root()
	return PotionBelt(root.Struct()), err
}

func (s PotionBelt) String() string {
	str, _ := text.Marshal(0xce55ffdae06f694d, capnp.Struct(s))
	return str
}

func (s PotionBelt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PotionBelt) DecodeFromPtr(p capnp.Ptr) PotionBelt {
	return PotionBelt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PotionBelt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PotionBelt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PotionBelt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PotionBelt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PotionBelt) Items() (PotionBeltItem_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PotionBeltItem_List(p.List()), err
}

func (s PotionBelt) HasItems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PotionBelt) SetItems(v PotionBeltItem_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated PotionBeltItem_List, preferring placement in s's segment.
func (s PotionBelt) NewItems(n int32) (PotionBeltItem_List, error) {
	l, err := NewPotionBeltItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PotionBeltItem_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PotionBelt_List is a list of PotionBelt.
type PotionBelt_List = capnp.StructList[PotionBelt]

// NewPotionBelt creates a new list of PotionBelt.
func NewPotionBelt_List(s *capnp.Segment, sz int32) (PotionBelt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PotionBelt](l), err
}

// PotionBelt_Future is a wrapper for a PotionBelt promised by a client call.
type PotionBelt_Future struct{ *capnp.Future }

func (f PotionBelt_Future) Struct() (PotionBelt, error) {
	p, err := f.Future.Ptr()
	return PotionBelt(p.Struct()), err
}

type StringList capnp.Struct

// StringList_TypeID is the unique identifier for the type StringList.
const StringList_TypeID = 0xfc766ac7f0d6e4f5

func NewStringList(s *capnp.Segment) (StringList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringList(st), err
}

func NewRootStringList(s *capnp.Segment) (StringList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StringList(st), err
}

func ReadRootStringList(msg *capnp.Message) (StringList, error) {
	root, err := msg.Root()
	return StringList(root.Struct()), err
}

func (s StringList) String() string {
	str, _ := text.Marshal(0xfc766ac7f0d6e4f5, capnp.Struct(s))
	return str
}

func (s StringList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StringList) DecodeFromPtr(p capnp.Ptr) StringList {
	return StringList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StringList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StringList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StringList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StringList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StringList) Str() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StringList) HasStr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StringList) StrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StringList) SetStr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StringList_List is a list of StringList.
type StringList_List = capnp.StructList[StringList]

// NewStringList creates a new list of StringList.
func NewStringList_List(s *capnp.Segment, sz int32) (StringList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StringList](l), err
}

// StringList_Future is a wrapper for a StringList promised by a client call.
type StringList_Future struct{ *capnp.Future }

func (f StringList_Future) Struct() (StringList, error) {
	p, err := f.Future.Ptr()
	return StringList(p.Struct()), err
}

type GroupLeadershipAA capnp.Struct

// GroupLeadershipAA_TypeID is the unique identifier for the type GroupLeadershipAA.
const GroupLeadershipAA_TypeID = 0xf418cd61a8543b3c

func NewGroupLeadershipAA(s *capnp.Segment) (GroupLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return GroupLeadershipAA(st), err
}

func NewRootGroupLeadershipAA(s *capnp.Segment) (GroupLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return GroupLeadershipAA(st), err
}

func ReadRootGroupLeadershipAA(msg *capnp.Message) (GroupLeadershipAA, error) {
	root, err := msg.Root()
	return GroupLeadershipAA(root.Struct()), err
}

func (s GroupLeadershipAA) String() string {
	str, _ := text.Marshal(0xf418cd61a8543b3c, capnp.Struct(s))
	return str
}

func (s GroupLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupLeadershipAA) DecodeFromPtr(p capnp.Ptr) GroupLeadershipAA {
	return GroupLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupLeadershipAA) GroupAaMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupLeadershipAA) SetGroupAaMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupLeadershipAA) GroupAanpcHealth() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GroupLeadershipAA) SetGroupAanpcHealth(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GroupLeadershipAA) GroupAaDelegateMainAssist() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GroupLeadershipAA) SetGroupAaDelegateMainAssist(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GroupLeadershipAA) GroupAaDelegateMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GroupLeadershipAA) SetGroupAaDelegateMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GroupLeadershipAA) GroupAa4() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GroupLeadershipAA) SetGroupAa4(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GroupLeadershipAA) GroupAa5() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GroupLeadershipAA) SetGroupAa5(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s GroupLeadershipAA) GroupAaInspectBuffs() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GroupLeadershipAA) SetGroupAaInspectBuffs(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GroupLeadershipAA) GroupAa7() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GroupLeadershipAA) SetGroupAa7(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GroupLeadershipAA) GroupAaSpellAwareness() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GroupLeadershipAA) SetGroupAaSpellAwareness(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s GroupLeadershipAA) GroupAaOffenseEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s GroupLeadershipAA) SetGroupAaOffenseEnhancement(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s GroupLeadershipAA) GroupAaManaEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s GroupLeadershipAA) SetGroupAaManaEnhancement(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s GroupLeadershipAA) SetGroupAaHealthEnhancement(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthRegeneration() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s GroupLeadershipAA) SetGroupAaHealthRegeneration(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s GroupLeadershipAA) GroupAaFindPathToPc() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s GroupLeadershipAA) SetGroupAaFindPathToPc(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s GroupLeadershipAA) GroupAaHealthOfTargetsTarget() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s GroupLeadershipAA) SetGroupAaHealthOfTargetsTarget(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s GroupLeadershipAA) GroupAa15() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s GroupLeadershipAA) SetGroupAa15(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// GroupLeadershipAA_List is a list of GroupLeadershipAA.
type GroupLeadershipAA_List = capnp.StructList[GroupLeadershipAA]

// NewGroupLeadershipAA creates a new list of GroupLeadershipAA.
func NewGroupLeadershipAA_List(s *capnp.Segment, sz int32) (GroupLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[GroupLeadershipAA](l), err
}

// GroupLeadershipAA_Future is a wrapper for a GroupLeadershipAA promised by a client call.
type GroupLeadershipAA_Future struct{ *capnp.Future }

func (f GroupLeadershipAA_Future) Struct() (GroupLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return GroupLeadershipAA(p.Struct()), err
}

type RaidLeadershipAA capnp.Struct

// RaidLeadershipAA_TypeID is the unique identifier for the type RaidLeadershipAA.
const RaidLeadershipAA_TypeID = 0xbf5a2cc18c663351

func NewRaidLeadershipAA(s *capnp.Segment) (RaidLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return RaidLeadershipAA(st), err
}

func NewRootRaidLeadershipAA(s *capnp.Segment) (RaidLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return RaidLeadershipAA(st), err
}

func ReadRootRaidLeadershipAA(msg *capnp.Message) (RaidLeadershipAA, error) {
	root, err := msg.Root()
	return RaidLeadershipAA(root.Struct()), err
}

func (s RaidLeadershipAA) String() string {
	str, _ := text.Marshal(0xbf5a2cc18c663351, capnp.Struct(s))
	return str
}

func (s RaidLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidLeadershipAA) DecodeFromPtr(p capnp.Ptr) RaidLeadershipAA {
	return RaidLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidLeadershipAA) RaidAaMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidLeadershipAA) SetRaidAaMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidLeadershipAA) RaidAanpcHealth() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidLeadershipAA) SetRaidAanpcHealth(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidLeadershipAA) RaidAaDelegateMainAssist() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidLeadershipAA) SetRaidAaDelegateMainAssist(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RaidLeadershipAA) RaidAaDelegateMarkNpc() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RaidLeadershipAA) SetRaidAaDelegateMarkNpc(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RaidLeadershipAA) RaidAa4() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RaidLeadershipAA) SetRaidAa4(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RaidLeadershipAA) RaidAa5() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s RaidLeadershipAA) SetRaidAa5(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s RaidLeadershipAA) RaidAa6() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s RaidLeadershipAA) SetRaidAa6(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s RaidLeadershipAA) RaidAaSpellAwareness() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s RaidLeadershipAA) SetRaidAaSpellAwareness(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s RaidLeadershipAA) RaidAaOffenseEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s RaidLeadershipAA) SetRaidAaOffenseEnhancement(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s RaidLeadershipAA) RaidAaManaEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s RaidLeadershipAA) SetRaidAaManaEnhancement(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthEnhancement() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s RaidLeadershipAA) SetRaidAaHealthEnhancement(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthRegeneration() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s RaidLeadershipAA) SetRaidAaHealthRegeneration(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s RaidLeadershipAA) RaidAaFindPathToPc() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s RaidLeadershipAA) SetRaidAaFindPathToPc(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s RaidLeadershipAA) RaidAaHealthOfTargetsTarget() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s RaidLeadershipAA) SetRaidAaHealthOfTargetsTarget(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s RaidLeadershipAA) RaidAa14() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s RaidLeadershipAA) SetRaidAa14(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s RaidLeadershipAA) RaidAa15() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s RaidLeadershipAA) SetRaidAa15(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// RaidLeadershipAA_List is a list of RaidLeadershipAA.
type RaidLeadershipAA_List = capnp.StructList[RaidLeadershipAA]

// NewRaidLeadershipAA creates a new list of RaidLeadershipAA.
func NewRaidLeadershipAA_List(s *capnp.Segment, sz int32) (RaidLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[RaidLeadershipAA](l), err
}

// RaidLeadershipAA_Future is a wrapper for a RaidLeadershipAA promised by a client call.
type RaidLeadershipAA_Future struct{ *capnp.Future }

func (f RaidLeadershipAA_Future) Struct() (RaidLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return RaidLeadershipAA(p.Struct()), err
}

type LeadershipAA capnp.Struct

// LeadershipAA_TypeID is the unique identifier for the type LeadershipAA.
const LeadershipAA_TypeID = 0xe5dcc4b159c002f4

func NewLeadershipAA(s *capnp.Segment) (LeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LeadershipAA(st), err
}

func NewRootLeadershipAA(s *capnp.Segment) (LeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LeadershipAA(st), err
}

func ReadRootLeadershipAA(msg *capnp.Message) (LeadershipAA, error) {
	root, err := msg.Root()
	return LeadershipAA(root.Struct()), err
}

func (s LeadershipAA) String() string {
	str, _ := text.Marshal(0xe5dcc4b159c002f4, capnp.Struct(s))
	return str
}

func (s LeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadershipAA) DecodeFromPtr(p capnp.Ptr) LeadershipAA {
	return LeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadershipAA) Group() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GroupLeadershipAA(p.Struct()), err
}

func (s LeadershipAA) HasGroup() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LeadershipAA) SetGroup(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGroup sets the group field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s LeadershipAA) NewGroup() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LeadershipAA) Raid() (RaidLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RaidLeadershipAA(p.Struct()), err
}

func (s LeadershipAA) HasRaid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LeadershipAA) SetRaid(v RaidLeadershipAA) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewRaid sets the raid field to a newly
// allocated RaidLeadershipAA struct, preferring placement in s's segment.
func (s LeadershipAA) NewRaid() (RaidLeadershipAA, error) {
	ss, err := NewRaidLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return RaidLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// LeadershipAA_List is a list of LeadershipAA.
type LeadershipAA_List = capnp.StructList[LeadershipAA]

// NewLeadershipAA creates a new list of LeadershipAA.
func NewLeadershipAA_List(s *capnp.Segment, sz int32) (LeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[LeadershipAA](l), err
}

// LeadershipAA_Future is a wrapper for a LeadershipAA promised by a client call.
type LeadershipAA_Future struct{ *capnp.Future }

func (f LeadershipAA_Future) Struct() (LeadershipAA, error) {
	p, err := f.Future.Ptr()
	return LeadershipAA(p.Struct()), err
}
func (p LeadershipAA_Future) Group() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(0, nil)}
}
func (p LeadershipAA_Future) Raid() RaidLeadershipAA_Future {
	return RaidLeadershipAA_Future{Future: p.Future.Field(1, nil)}
}

type Bind capnp.Struct

// Bind_TypeID is the unique identifier for the type Bind.
const Bind_TypeID = 0xf1e3711cde8fa324

func NewBind(s *capnp.Segment) (Bind, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Bind(st), err
}

func NewRootBind(s *capnp.Segment) (Bind, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Bind(st), err
}

func ReadRootBind(msg *capnp.Message) (Bind, error) {
	root, err := msg.Root()
	return Bind(root.Struct()), err
}

func (s Bind) String() string {
	str, _ := text.Marshal(0xf1e3711cde8fa324, capnp.Struct(s))
	return str
}

func (s Bind) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bind) DecodeFromPtr(p capnp.Ptr) Bind {
	return Bind(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bind) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bind) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bind) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bind) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bind) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Bind) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Bind) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Bind) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Bind) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Bind) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Bind) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Bind) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Bind) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Bind) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

// Bind_List is a list of Bind.
type Bind_List = capnp.StructList[Bind]

// NewBind creates a new list of Bind.
func NewBind_List(s *capnp.Segment, sz int32) (Bind_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Bind](l), err
}

// Bind_Future is a wrapper for a Bind promised by a client call.
type Bind_Future struct{ *capnp.Future }

func (f Bind_Future) Struct() (Bind, error) {
	p, err := f.Future.Ptr()
	return Bind(p.Struct()), err
}

type PVPStatsEntry capnp.Struct

// PVPStatsEntry_TypeID is the unique identifier for the type PVPStatsEntry.
const PVPStatsEntry_TypeID = 0x9ca1849ea58c8bdb

func NewPVPStatsEntry(s *capnp.Segment) (PVPStatsEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PVPStatsEntry(st), err
}

func NewRootPVPStatsEntry(s *capnp.Segment) (PVPStatsEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PVPStatsEntry(st), err
}

func ReadRootPVPStatsEntry(msg *capnp.Message) (PVPStatsEntry, error) {
	root, err := msg.Root()
	return PVPStatsEntry(root.Struct()), err
}

func (s PVPStatsEntry) String() string {
	str, _ := text.Marshal(0x9ca1849ea58c8bdb, capnp.Struct(s))
	return str
}

func (s PVPStatsEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PVPStatsEntry) DecodeFromPtr(p capnp.Ptr) PVPStatsEntry {
	return PVPStatsEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PVPStatsEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PVPStatsEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PVPStatsEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PVPStatsEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PVPStatsEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PVPStatsEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PVPStatsEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PVPStatsEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PVPStatsEntry) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PVPStatsEntry) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PVPStatsEntry) Race() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PVPStatsEntry) SetRace(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PVPStatsEntry) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PVPStatsEntry) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PVPStatsEntry) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PVPStatsEntry) SetZone(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PVPStatsEntry) Time() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PVPStatsEntry) SetTime(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PVPStatsEntry) Points() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s PVPStatsEntry) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// PVPStatsEntry_List is a list of PVPStatsEntry.
type PVPStatsEntry_List = capnp.StructList[PVPStatsEntry]

// NewPVPStatsEntry creates a new list of PVPStatsEntry.
func NewPVPStatsEntry_List(s *capnp.Segment, sz int32) (PVPStatsEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[PVPStatsEntry](l), err
}

// PVPStatsEntry_Future is a wrapper for a PVPStatsEntry promised by a client call.
type PVPStatsEntry_Future struct{ *capnp.Future }

func (f PVPStatsEntry_Future) Struct() (PVPStatsEntry, error) {
	p, err := f.Future.Ptr()
	return PVPStatsEntry(p.Struct()), err
}

type ClientTarget capnp.Struct

// ClientTarget_TypeID is the unique identifier for the type ClientTarget.
const ClientTarget_TypeID = 0xa1914008041e7c44

func NewClientTarget(s *capnp.Segment) (ClientTarget, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClientTarget(st), err
}

func NewRootClientTarget(s *capnp.Segment) (ClientTarget, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClientTarget(st), err
}

func ReadRootClientTarget(msg *capnp.Message) (ClientTarget, error) {
	root, err := msg.Root()
	return ClientTarget(root.Struct()), err
}

func (s ClientTarget) String() string {
	str, _ := text.Marshal(0xa1914008041e7c44, capnp.Struct(s))
	return str
}

func (s ClientTarget) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientTarget) DecodeFromPtr(p capnp.Ptr) ClientTarget {
	return ClientTarget(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientTarget) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientTarget) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientTarget) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientTarget) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientTarget) NewTarget() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClientTarget) SetNewTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ClientTarget_List is a list of ClientTarget.
type ClientTarget_List = capnp.StructList[ClientTarget]

// NewClientTarget creates a new list of ClientTarget.
func NewClientTarget_List(s *capnp.Segment, sz int32) (ClientTarget_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ClientTarget](l), err
}

// ClientTarget_Future is a wrapper for a ClientTarget promised by a client call.
type ClientTarget_Future struct{ *capnp.Future }

func (f ClientTarget_Future) Struct() (ClientTarget, error) {
	p, err := f.Future.Ptr()
	return ClientTarget(p.Struct()), err
}

type PetCommand capnp.Struct

// PetCommand_TypeID is the unique identifier for the type PetCommand.
const PetCommand_TypeID = 0xa3f9826addd42d0d

func NewPetCommand(s *capnp.Segment) (PetCommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PetCommand(st), err
}

func NewRootPetCommand(s *capnp.Segment) (PetCommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return PetCommand(st), err
}

func ReadRootPetCommand(msg *capnp.Message) (PetCommand, error) {
	root, err := msg.Root()
	return PetCommand(root.Struct()), err
}

func (s PetCommand) String() string {
	str, _ := text.Marshal(0xa3f9826addd42d0d, capnp.Struct(s))
	return str
}

func (s PetCommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PetCommand) DecodeFromPtr(p capnp.Ptr) PetCommand {
	return PetCommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PetCommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PetCommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PetCommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PetCommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PetCommand) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PetCommand) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PetCommand) Target() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PetCommand) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// PetCommand_List is a list of PetCommand.
type PetCommand_List = capnp.StructList[PetCommand]

// NewPetCommand creates a new list of PetCommand.
func NewPetCommand_List(s *capnp.Segment, sz int32) (PetCommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[PetCommand](l), err
}

// PetCommand_Future is a wrapper for a PetCommand promised by a client call.
type PetCommand_Future struct{ *capnp.Future }

func (f PetCommand_Future) Struct() (PetCommand, error) {
	p, err := f.Future.Ptr()
	return PetCommand(p.Struct()), err
}

type DeleteSpawn capnp.Struct

// DeleteSpawn_TypeID is the unique identifier for the type DeleteSpawn.
const DeleteSpawn_TypeID = 0xaf015f84859d0028

func NewDeleteSpawn(s *capnp.Segment) (DeleteSpawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpawn(st), err
}

func NewRootDeleteSpawn(s *capnp.Segment) (DeleteSpawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return DeleteSpawn(st), err
}

func ReadRootDeleteSpawn(msg *capnp.Message) (DeleteSpawn, error) {
	root, err := msg.Root()
	return DeleteSpawn(root.Struct()), err
}

func (s DeleteSpawn) String() string {
	str, _ := text.Marshal(0xaf015f84859d0028, capnp.Struct(s))
	return str
}

func (s DeleteSpawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteSpawn) DecodeFromPtr(p capnp.Ptr) DeleteSpawn {
	return DeleteSpawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteSpawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteSpawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteSpawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteSpawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteSpawn) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteSpawn) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// DeleteSpawn_List is a list of DeleteSpawn.
type DeleteSpawn_List = capnp.StructList[DeleteSpawn]

// NewDeleteSpawn creates a new list of DeleteSpawn.
func NewDeleteSpawn_List(s *capnp.Segment, sz int32) (DeleteSpawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[DeleteSpawn](l), err
}

// DeleteSpawn_Future is a wrapper for a DeleteSpawn promised by a client call.
type DeleteSpawn_Future struct{ *capnp.Future }

func (f DeleteSpawn_Future) Struct() (DeleteSpawn, error) {
	p, err := f.Future.Ptr()
	return DeleteSpawn(p.Struct()), err
}

type ChannelMessage capnp.Struct

// ChannelMessage_TypeID is the unique identifier for the type ChannelMessage.
const ChannelMessage_TypeID = 0xa23c8c68e3798bb0

func NewChannelMessage(s *capnp.Segment) (ChannelMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return ChannelMessage(st), err
}

func NewRootChannelMessage(s *capnp.Segment) (ChannelMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return ChannelMessage(st), err
}

func ReadRootChannelMessage(msg *capnp.Message) (ChannelMessage, error) {
	root, err := msg.Root()
	return ChannelMessage(root.Struct()), err
}

func (s ChannelMessage) String() string {
	str, _ := text.Marshal(0xa23c8c68e3798bb0, capnp.Struct(s))
	return str
}

func (s ChannelMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChannelMessage) DecodeFromPtr(p capnp.Ptr) ChannelMessage {
	return ChannelMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChannelMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChannelMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChannelMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChannelMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChannelMessage) Targetname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChannelMessage) HasTargetname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChannelMessage) TargetnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetTargetname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ChannelMessage) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ChannelMessage) HasSender() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ChannelMessage) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetSender(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ChannelMessage) Language() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ChannelMessage) SetLanguage(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ChannelMessage) ChanNum() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ChannelMessage) SetChanNum(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ChannelMessage) SkillInLanguage() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ChannelMessage) SetSkillInLanguage(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ChannelMessage) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ChannelMessage) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ChannelMessage) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ChannelMessage) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ChannelMessage_List is a list of ChannelMessage.
type ChannelMessage_List = capnp.StructList[ChannelMessage]

// NewChannelMessage creates a new list of ChannelMessage.
func NewChannelMessage_List(s *capnp.Segment, sz int32) (ChannelMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[ChannelMessage](l), err
}

// ChannelMessage_Future is a wrapper for a ChannelMessage promised by a client call.
type ChannelMessage_Future struct{ *capnp.Future }

func (f ChannelMessage_Future) Struct() (ChannelMessage, error) {
	p, err := f.Future.Ptr()
	return ChannelMessage(p.Struct()), err
}

type SpecialMesg capnp.Struct

// SpecialMesg_TypeID is the unique identifier for the type SpecialMesg.
const SpecialMesg_TypeID = 0xe0b0d21d1219b48c

func NewSpecialMesg(s *capnp.Segment) (SpecialMesg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SpecialMesg(st), err
}

func NewRootSpecialMesg(s *capnp.Segment) (SpecialMesg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SpecialMesg(st), err
}

func ReadRootSpecialMesg(msg *capnp.Message) (SpecialMesg, error) {
	root, err := msg.Root()
	return SpecialMesg(root.Struct()), err
}

func (s SpecialMesg) String() string {
	str, _ := text.Marshal(0xe0b0d21d1219b48c, capnp.Struct(s))
	return str
}

func (s SpecialMesg) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpecialMesg) DecodeFromPtr(p capnp.Ptr) SpecialMesg {
	return SpecialMesg(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpecialMesg) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpecialMesg) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpecialMesg) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpecialMesg) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpecialMesg) Header() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SpecialMesg) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpecialMesg) HeaderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetHeader(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SpecialMesg) MsgType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpecialMesg) SetMsgType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpecialMesg) TargetSpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpecialMesg) SetTargetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpecialMesg) Sayer() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SpecialMesg) HasSayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SpecialMesg) SayerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetSayer(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SpecialMesg) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SpecialMesg) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SpecialMesg) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SpecialMesg) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// SpecialMesg_List is a list of SpecialMesg.
type SpecialMesg_List = capnp.StructList[SpecialMesg]

// NewSpecialMesg creates a new list of SpecialMesg.
func NewSpecialMesg_List(s *capnp.Segment, sz int32) (SpecialMesg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[SpecialMesg](l), err
}

// SpecialMesg_Future is a wrapper for a SpecialMesg promised by a client call.
type SpecialMesg_Future struct{ *capnp.Future }

func (f SpecialMesg_Future) Struct() (SpecialMesg, error) {
	p, err := f.Future.Ptr()
	return SpecialMesg(p.Struct()), err
}

type WearChange capnp.Struct

// WearChange_TypeID is the unique identifier for the type WearChange.
const WearChange_TypeID = 0x9fd8d08daae7794b

func NewWearChange(s *capnp.Segment) (WearChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return WearChange(st), err
}

func NewRootWearChange(s *capnp.Segment) (WearChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return WearChange(st), err
}

func ReadRootWearChange(msg *capnp.Message) (WearChange, error) {
	root, err := msg.Root()
	return WearChange(root.Struct()), err
}

func (s WearChange) String() string {
	str, _ := text.Marshal(0x9fd8d08daae7794b, capnp.Struct(s))
	return str
}

func (s WearChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WearChange) DecodeFromPtr(p capnp.Ptr) WearChange {
	return WearChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WearChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WearChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WearChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WearChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WearChange) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WearChange) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WearChange) Material() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WearChange) SetMaterial(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WearChange) Color() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WearChange) SetColor(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WearChange) WearSlotId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WearChange) SetWearSlotId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// WearChange_List is a list of WearChange.
type WearChange_List = capnp.StructList[WearChange]

// NewWearChange creates a new list of WearChange.
func NewWearChange_List(s *capnp.Segment, sz int32) (WearChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[WearChange](l), err
}

// WearChange_Future is a wrapper for a WearChange promised by a client call.
type WearChange_Future struct{ *capnp.Future }

func (f WearChange_Future) Struct() (WearChange, error) {
	p, err := f.Future.Ptr()
	return WearChange(p.Struct()), err
}

type BindWound capnp.Struct

// BindWound_TypeID is the unique identifier for the type BindWound.
const BindWound_TypeID = 0x9d8709f225285c2e

func NewBindWound(s *capnp.Segment) (BindWound, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BindWound(st), err
}

func NewRootBindWound(s *capnp.Segment) (BindWound, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BindWound(st), err
}

func ReadRootBindWound(msg *capnp.Message) (BindWound, error) {
	root, err := msg.Root()
	return BindWound(root.Struct()), err
}

func (s BindWound) String() string {
	str, _ := text.Marshal(0x9d8709f225285c2e, capnp.Struct(s))
	return str
}

func (s BindWound) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BindWound) DecodeFromPtr(p capnp.Ptr) BindWound {
	return BindWound(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BindWound) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BindWound) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BindWound) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BindWound) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BindWound) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BindWound) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BindWound) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BindWound) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BindWound_List is a list of BindWound.
type BindWound_List = capnp.StructList[BindWound]

// NewBindWound creates a new list of BindWound.
func NewBindWound_List(s *capnp.Segment, sz int32) (BindWound_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BindWound](l), err
}

// BindWound_Future is a wrapper for a BindWound promised by a client call.
type BindWound_Future struct{ *capnp.Future }

func (f BindWound_Future) Struct() (BindWound, error) {
	p, err := f.Future.Ptr()
	return BindWound(p.Struct()), err
}

type Animation capnp.Struct

// Animation_TypeID is the unique identifier for the type Animation.
const Animation_TypeID = 0xfe931b1705a8e8a8

func NewAnimation(s *capnp.Segment) (Animation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Animation(st), err
}

func NewRootAnimation(s *capnp.Segment) (Animation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Animation(st), err
}

func ReadRootAnimation(msg *capnp.Message) (Animation, error) {
	root, err := msg.Root()
	return Animation(root.Struct()), err
}

func (s Animation) String() string {
	str, _ := text.Marshal(0xfe931b1705a8e8a8, capnp.Struct(s))
	return str
}

func (s Animation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Animation) DecodeFromPtr(p capnp.Ptr) Animation {
	return Animation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Animation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Animation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Animation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Animation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Animation) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Animation) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Animation) Speed() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Animation) SetSpeed(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Animation) Action() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Animation) SetAction(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Animation_List is a list of Animation.
type Animation_List = capnp.StructList[Animation]

// NewAnimation creates a new list of Animation.
func NewAnimation_List(s *capnp.Segment, sz int32) (Animation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Animation](l), err
}

// Animation_Future is a wrapper for a Animation promised by a client call.
type Animation_Future struct{ *capnp.Future }

func (f Animation_Future) Struct() (Animation, error) {
	p, err := f.Future.Ptr()
	return Animation(p.Struct()), err
}

type Action capnp.Struct

// Action_TypeID is the unique identifier for the type Action.
const Action_TypeID = 0x95ca47192b7d5b43

func NewAction(s *capnp.Segment) (Action, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return Action(st), err
}

func NewRootAction(s *capnp.Segment) (Action, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return Action(st), err
}

func ReadRootAction(msg *capnp.Message) (Action, error) {
	root, err := msg.Root()
	return Action(root.Struct()), err
}

func (s Action) String() string {
	str, _ := text.Marshal(0x95ca47192b7d5b43, capnp.Struct(s))
	return str
}

func (s Action) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Action) DecodeFromPtr(p capnp.Ptr) Action {
	return Action(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Action) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Action) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Action) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Action) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Action) Target() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Action) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Action) Source() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Action) SetSource(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Action) Level() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Action) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Action) InstrumentMod() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Action) SetInstrumentMod(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Action) Force() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Action) SetForce(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Action) HitHeading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Action) SetHitHeading(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Action) HitPitch() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Action) SetHitPitch(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Action) Type() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Action) SetType(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Action) Spell() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Action) SetSpell(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Action) SpellLevel() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Action) SetSpellLevel(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Action) EffectFlag() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Action) SetEffectFlag(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

// Action_List is a list of Action.
type Action_List = capnp.StructList[Action]

// NewAction creates a new list of Action.
func NewAction_List(s *capnp.Segment, sz int32) (Action_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0}, sz)
	return capnp.StructList[Action](l), err
}

// Action_Future is a wrapper for a Action promised by a client call.
type Action_Future struct{ *capnp.Future }

func (f Action_Future) Struct() (Action, error) {
	p, err := f.Future.Ptr()
	return Action(p.Struct()), err
}

type CombatDamage capnp.Struct

// CombatDamage_TypeID is the unique identifier for the type CombatDamage.
const CombatDamage_TypeID = 0xbcba10c194c8e450

func NewCombatDamage(s *capnp.Segment) (CombatDamage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return CombatDamage(st), err
}

func NewRootCombatDamage(s *capnp.Segment) (CombatDamage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return CombatDamage(st), err
}

func ReadRootCombatDamage(msg *capnp.Message) (CombatDamage, error) {
	root, err := msg.Root()
	return CombatDamage(root.Struct()), err
}

func (s CombatDamage) String() string {
	str, _ := text.Marshal(0xbcba10c194c8e450, capnp.Struct(s))
	return str
}

func (s CombatDamage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CombatDamage) DecodeFromPtr(p capnp.Ptr) CombatDamage {
	return CombatDamage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CombatDamage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CombatDamage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CombatDamage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CombatDamage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CombatDamage) Target() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CombatDamage) SetTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CombatDamage) Source() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CombatDamage) SetSource(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CombatDamage) Type() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CombatDamage) SetType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s CombatDamage) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s CombatDamage) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s CombatDamage) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s CombatDamage) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s CombatDamage) Force() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s CombatDamage) SetForce(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s CombatDamage) HitHeading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s CombatDamage) SetHitHeading(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s CombatDamage) HitPitch() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s CombatDamage) SetHitPitch(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

// CombatDamage_List is a list of CombatDamage.
type CombatDamage_List = capnp.StructList[CombatDamage]

// NewCombatDamage creates a new list of CombatDamage.
func NewCombatDamage_List(s *capnp.Segment, sz int32) (CombatDamage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[CombatDamage](l), err
}

// CombatDamage_Future is a wrapper for a CombatDamage promised by a client call.
type CombatDamage_Future struct{ *capnp.Future }

func (f CombatDamage_Future) Struct() (CombatDamage, error) {
	p, err := f.Future.Ptr()
	return CombatDamage(p.Struct()), err
}

type Consider capnp.Struct

// Consider_TypeID is the unique identifier for the type Consider.
const Consider_TypeID = 0xecbd91cdb76d6a28

func NewConsider(s *capnp.Segment) (Consider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Consider(st), err
}

func NewRootConsider(s *capnp.Segment) (Consider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Consider(st), err
}

func ReadRootConsider(msg *capnp.Message) (Consider, error) {
	root, err := msg.Root()
	return Consider(root.Struct()), err
}

func (s Consider) String() string {
	str, _ := text.Marshal(0xecbd91cdb76d6a28, capnp.Struct(s))
	return str
}

func (s Consider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consider) DecodeFromPtr(p capnp.Ptr) Consider {
	return Consider(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consider) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consider) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consider) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consider) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consider) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Consider) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Consider) Targetid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Consider) SetTargetid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Consider) Faction() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Consider) SetFaction(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Consider) Level() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Consider) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Consider) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Consider) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Consider) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Consider) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Consider) Pvpcon() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Consider) SetPvpcon(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Consider_List is a list of Consider.
type Consider_List = capnp.StructList[Consider]

// NewConsider creates a new list of Consider.
func NewConsider_List(s *capnp.Segment, sz int32) (Consider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[Consider](l), err
}

// Consider_Future is a wrapper for a Consider promised by a client call.
type Consider_Future struct{ *capnp.Future }

func (f Consider_Future) Struct() (Consider, error) {
	p, err := f.Future.Ptr()
	return Consider(p.Struct()), err
}

type Death capnp.Struct

// Death_TypeID is the unique identifier for the type Death.
const Death_TypeID = 0xae8dab9506472d1d

func NewDeath(s *capnp.Segment) (Death, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Death(st), err
}

func NewRootDeath(s *capnp.Segment) (Death, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Death(st), err
}

func ReadRootDeath(msg *capnp.Message) (Death, error) {
	root, err := msg.Root()
	return Death(root.Struct()), err
}

func (s Death) String() string {
	str, _ := text.Marshal(0xae8dab9506472d1d, capnp.Struct(s))
	return str
}

func (s Death) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Death) DecodeFromPtr(p capnp.Ptr) Death {
	return Death(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Death) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Death) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Death) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Death) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Death) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Death) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Death) KillerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Death) SetKillerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Death) Corpseid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Death) SetCorpseid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Death) AttackSkill() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Death) SetAttackSkill(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Death) SpellId() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Death) SetSpellId(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Death) Bindzoneid() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Death) SetBindzoneid(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Death) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Death) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Death_List is a list of Death.
type Death_List = capnp.StructList[Death]

// NewDeath creates a new list of Death.
func NewDeath_List(s *capnp.Segment, sz int32) (Death_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[Death](l), err
}

// Death_Future is a wrapper for a Death promised by a client call.
type Death_Future struct{ *capnp.Future }

func (f Death_Future) Struct() (Death, error) {
	p, err := f.Future.Ptr()
	return Death(p.Struct()), err
}

type BecomeCorpse capnp.Struct

// BecomeCorpse_TypeID is the unique identifier for the type BecomeCorpse.
const BecomeCorpse_TypeID = 0xd5ad818067cc16e7

func NewBecomeCorpse(s *capnp.Segment) (BecomeCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BecomeCorpse(st), err
}

func NewRootBecomeCorpse(s *capnp.Segment) (BecomeCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return BecomeCorpse(st), err
}

func ReadRootBecomeCorpse(msg *capnp.Message) (BecomeCorpse, error) {
	root, err := msg.Root()
	return BecomeCorpse(root.Struct()), err
}

func (s BecomeCorpse) String() string {
	str, _ := text.Marshal(0xd5ad818067cc16e7, capnp.Struct(s))
	return str
}

func (s BecomeCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeCorpse) DecodeFromPtr(p capnp.Ptr) BecomeCorpse {
	return BecomeCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeCorpse) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeCorpse) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeCorpse) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s BecomeCorpse) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s BecomeCorpse) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s BecomeCorpse) SetX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s BecomeCorpse) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s BecomeCorpse) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// BecomeCorpse_List is a list of BecomeCorpse.
type BecomeCorpse_List = capnp.StructList[BecomeCorpse]

// NewBecomeCorpse creates a new list of BecomeCorpse.
func NewBecomeCorpse_List(s *capnp.Segment, sz int32) (BecomeCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[BecomeCorpse](l), err
}

// BecomeCorpse_Future is a wrapper for a BecomeCorpse promised by a client call.
type BecomeCorpse_Future struct{ *capnp.Future }

func (f BecomeCorpse_Future) Struct() (BecomeCorpse, error) {
	p, err := f.Future.Ptr()
	return BecomeCorpse(p.Struct()), err
}

type PlayerPositionUpdateServer capnp.Struct

// PlayerPositionUpdateServer_TypeID is the unique identifier for the type PlayerPositionUpdateServer.
const PlayerPositionUpdateServer_TypeID = 0xab456691cd8fec03

func NewPlayerPositionUpdateServer(s *capnp.Segment) (PlayerPositionUpdateServer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return PlayerPositionUpdateServer(st), err
}

func NewRootPlayerPositionUpdateServer(s *capnp.Segment) (PlayerPositionUpdateServer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return PlayerPositionUpdateServer(st), err
}

func ReadRootPlayerPositionUpdateServer(msg *capnp.Message) (PlayerPositionUpdateServer, error) {
	root, err := msg.Root()
	return PlayerPositionUpdateServer(root.Struct()), err
}

func (s PlayerPositionUpdateServer) String() string {
	str, _ := text.Marshal(0xab456691cd8fec03, capnp.Struct(s))
	return str
}

func (s PlayerPositionUpdateServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerPositionUpdateServer) DecodeFromPtr(p capnp.Ptr) PlayerPositionUpdateServer {
	return PlayerPositionUpdateServer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerPositionUpdateServer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerPositionUpdateServer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerPositionUpdateServer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerPositionUpdateServer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerPositionUpdateServer) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerPositionUpdateServer) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerPositionUpdateServer) DeltaHeading() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PlayerPositionUpdateServer) SetDeltaHeading(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PlayerPositionUpdateServer) XPos() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PlayerPositionUpdateServer) SetXPos(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PlayerPositionUpdateServer) YPos() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PlayerPositionUpdateServer) SetYPos(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PlayerPositionUpdateServer) Animation() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PlayerPositionUpdateServer) SetAnimation(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PlayerPositionUpdateServer) ZPos() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s PlayerPositionUpdateServer) SetZPos(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s PlayerPositionUpdateServer) DeltaY() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s PlayerPositionUpdateServer) SetDeltaY(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s PlayerPositionUpdateServer) DeltaX() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s PlayerPositionUpdateServer) SetDeltaX(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s PlayerPositionUpdateServer) Heading() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s PlayerPositionUpdateServer) SetHeading(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s PlayerPositionUpdateServer) DeltaZ() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s PlayerPositionUpdateServer) SetDeltaZ(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

// PlayerPositionUpdateServer_List is a list of PlayerPositionUpdateServer.
type PlayerPositionUpdateServer_List = capnp.StructList[PlayerPositionUpdateServer]

// NewPlayerPositionUpdateServer creates a new list of PlayerPositionUpdateServer.
func NewPlayerPositionUpdateServer_List(s *capnp.Segment, sz int32) (PlayerPositionUpdateServer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[PlayerPositionUpdateServer](l), err
}

// PlayerPositionUpdateServer_Future is a wrapper for a PlayerPositionUpdateServer promised by a client call.
type PlayerPositionUpdateServer_Future struct{ *capnp.Future }

func (f PlayerPositionUpdateServer_Future) Struct() (PlayerPositionUpdateServer, error) {
	p, err := f.Future.Ptr()
	return PlayerPositionUpdateServer(p.Struct()), err
}

type PlayerPositionUpdateClient capnp.Struct

// PlayerPositionUpdateClient_TypeID is the unique identifier for the type PlayerPositionUpdateClient.
const PlayerPositionUpdateClient_TypeID = 0xc3cb1662234dd3f3

func NewPlayerPositionUpdateClient(s *capnp.Segment) (PlayerPositionUpdateClient, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return PlayerPositionUpdateClient(st), err
}

func NewRootPlayerPositionUpdateClient(s *capnp.Segment) (PlayerPositionUpdateClient, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return PlayerPositionUpdateClient(st), err
}

func ReadRootPlayerPositionUpdateClient(msg *capnp.Message) (PlayerPositionUpdateClient, error) {
	root, err := msg.Root()
	return PlayerPositionUpdateClient(root.Struct()), err
}

func (s PlayerPositionUpdateClient) String() string {
	str, _ := text.Marshal(0xc3cb1662234dd3f3, capnp.Struct(s))
	return str
}

func (s PlayerPositionUpdateClient) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerPositionUpdateClient) DecodeFromPtr(p capnp.Ptr) PlayerPositionUpdateClient {
	return PlayerPositionUpdateClient(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerPositionUpdateClient) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerPositionUpdateClient) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerPositionUpdateClient) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerPositionUpdateClient) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerPositionUpdateClient) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PlayerPositionUpdateClient) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PlayerPositionUpdateClient) Sequence() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PlayerPositionUpdateClient) SetSequence(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PlayerPositionUpdateClient) YPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s PlayerPositionUpdateClient) SetYPos(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s PlayerPositionUpdateClient) DeltaZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s PlayerPositionUpdateClient) SetDeltaZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s PlayerPositionUpdateClient) DeltaX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s PlayerPositionUpdateClient) SetDeltaX(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s PlayerPositionUpdateClient) DeltaY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s PlayerPositionUpdateClient) SetDeltaY(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s PlayerPositionUpdateClient) Animation() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s PlayerPositionUpdateClient) SetAnimation(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s PlayerPositionUpdateClient) DeltaHeading() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s PlayerPositionUpdateClient) SetDeltaHeading(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s PlayerPositionUpdateClient) XPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s PlayerPositionUpdateClient) SetXPos(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s PlayerPositionUpdateClient) ZPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s PlayerPositionUpdateClient) SetZPos(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s PlayerPositionUpdateClient) Heading() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s PlayerPositionUpdateClient) SetHeading(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

// PlayerPositionUpdateClient_List is a list of PlayerPositionUpdateClient.
type PlayerPositionUpdateClient_List = capnp.StructList[PlayerPositionUpdateClient]

// NewPlayerPositionUpdateClient creates a new list of PlayerPositionUpdateClient.
func NewPlayerPositionUpdateClient_List(s *capnp.Segment, sz int32) (PlayerPositionUpdateClient_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0}, sz)
	return capnp.StructList[PlayerPositionUpdateClient](l), err
}

// PlayerPositionUpdateClient_Future is a wrapper for a PlayerPositionUpdateClient promised by a client call.
type PlayerPositionUpdateClient_Future struct{ *capnp.Future }

func (f PlayerPositionUpdateClient_Future) Struct() (PlayerPositionUpdateClient, error) {
	p, err := f.Future.Ptr()
	return PlayerPositionUpdateClient(p.Struct()), err
}

type SpawnHPUpdate capnp.Struct

// SpawnHPUpdate_TypeID is the unique identifier for the type SpawnHPUpdate.
const SpawnHPUpdate_TypeID = 0xfa4d6a8cac27c611

func NewSpawnHPUpdate(s *capnp.Segment) (SpawnHPUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnHPUpdate(st), err
}

func NewRootSpawnHPUpdate(s *capnp.Segment) (SpawnHPUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SpawnHPUpdate(st), err
}

func ReadRootSpawnHPUpdate(msg *capnp.Message) (SpawnHPUpdate, error) {
	root, err := msg.Root()
	return SpawnHPUpdate(root.Struct()), err
}

func (s SpawnHPUpdate) String() string {
	str, _ := text.Marshal(0xfa4d6a8cac27c611, capnp.Struct(s))
	return str
}

func (s SpawnHPUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnHPUpdate) DecodeFromPtr(p capnp.Ptr) SpawnHPUpdate {
	return SpawnHPUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnHPUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnHPUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnHPUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnHPUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnHPUpdate) CurHp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnHPUpdate) SetCurHp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnHPUpdate) MaxHp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnHPUpdate) SetMaxHp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SpawnHPUpdate) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SpawnHPUpdate) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// SpawnHPUpdate_List is a list of SpawnHPUpdate.
type SpawnHPUpdate_List = capnp.StructList[SpawnHPUpdate]

// NewSpawnHPUpdate creates a new list of SpawnHPUpdate.
func NewSpawnHPUpdate_List(s *capnp.Segment, sz int32) (SpawnHPUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[SpawnHPUpdate](l), err
}

// SpawnHPUpdate_Future is a wrapper for a SpawnHPUpdate promised by a client call.
type SpawnHPUpdate_Future struct{ *capnp.Future }

func (f SpawnHPUpdate_Future) Struct() (SpawnHPUpdate, error) {
	p, err := f.Future.Ptr()
	return SpawnHPUpdate(p.Struct()), err
}

type SpawnHPUpdate2 capnp.Struct

// SpawnHPUpdate2_TypeID is the unique identifier for the type SpawnHPUpdate2.
const SpawnHPUpdate2_TypeID = 0xc512b3f8727629d7

func NewSpawnHPUpdate2(s *capnp.Segment) (SpawnHPUpdate2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SpawnHPUpdate2(st), err
}

func NewRootSpawnHPUpdate2(s *capnp.Segment) (SpawnHPUpdate2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SpawnHPUpdate2(st), err
}

func ReadRootSpawnHPUpdate2(msg *capnp.Message) (SpawnHPUpdate2, error) {
	root, err := msg.Root()
	return SpawnHPUpdate2(root.Struct()), err
}

func (s SpawnHPUpdate2) String() string {
	str, _ := text.Marshal(0xc512b3f8727629d7, capnp.Struct(s))
	return str
}

func (s SpawnHPUpdate2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpawnHPUpdate2) DecodeFromPtr(p capnp.Ptr) SpawnHPUpdate2 {
	return SpawnHPUpdate2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpawnHPUpdate2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpawnHPUpdate2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpawnHPUpdate2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpawnHPUpdate2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpawnHPUpdate2) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SpawnHPUpdate2) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SpawnHPUpdate2) Hp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SpawnHPUpdate2) SetHp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SpawnHPUpdate2_List is a list of SpawnHPUpdate2.
type SpawnHPUpdate2_List = capnp.StructList[SpawnHPUpdate2]

// NewSpawnHPUpdate2 creates a new list of SpawnHPUpdate2.
func NewSpawnHPUpdate2_List(s *capnp.Segment, sz int32) (SpawnHPUpdate2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SpawnHPUpdate2](l), err
}

// SpawnHPUpdate2_Future is a wrapper for a SpawnHPUpdate2 promised by a client call.
type SpawnHPUpdate2_Future struct{ *capnp.Future }

func (f SpawnHPUpdate2_Future) Struct() (SpawnHPUpdate2, error) {
	p, err := f.Future.Ptr()
	return SpawnHPUpdate2(p.Struct()), err
}

type Stamina capnp.Struct

// Stamina_TypeID is the unique identifier for the type Stamina.
const Stamina_TypeID = 0xdb651f04f1f0488d

func NewStamina(s *capnp.Segment) (Stamina, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stamina(st), err
}

func NewRootStamina(s *capnp.Segment) (Stamina, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stamina(st), err
}

func ReadRootStamina(msg *capnp.Message) (Stamina, error) {
	root, err := msg.Root()
	return Stamina(root.Struct()), err
}

func (s Stamina) String() string {
	str, _ := text.Marshal(0xdb651f04f1f0488d, capnp.Struct(s))
	return str
}

func (s Stamina) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stamina) DecodeFromPtr(p capnp.Ptr) Stamina {
	return Stamina(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stamina) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stamina) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stamina) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stamina) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stamina) Food() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Stamina) SetFood(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Stamina) Water() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Stamina) SetWater(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Stamina_List is a list of Stamina.
type Stamina_List = capnp.StructList[Stamina]

// NewStamina creates a new list of Stamina.
func NewStamina_List(s *capnp.Segment, sz int32) (Stamina_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Stamina](l), err
}

// Stamina_Future is a wrapper for a Stamina promised by a client call.
type Stamina_Future struct{ *capnp.Future }

func (f Stamina_Future) Struct() (Stamina, error) {
	p, err := f.Future.Ptr()
	return Stamina(p.Struct()), err
}

type LevelUpdate capnp.Struct

// LevelUpdate_TypeID is the unique identifier for the type LevelUpdate.
const LevelUpdate_TypeID = 0xe72726225a9f8ca8

func NewLevelUpdate(s *capnp.Segment) (LevelUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LevelUpdate(st), err
}

func NewRootLevelUpdate(s *capnp.Segment) (LevelUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LevelUpdate(st), err
}

func ReadRootLevelUpdate(msg *capnp.Message) (LevelUpdate, error) {
	root, err := msg.Root()
	return LevelUpdate(root.Struct()), err
}

func (s LevelUpdate) String() string {
	str, _ := text.Marshal(0xe72726225a9f8ca8, capnp.Struct(s))
	return str
}

func (s LevelUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LevelUpdate) DecodeFromPtr(p capnp.Ptr) LevelUpdate {
	return LevelUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LevelUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LevelUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LevelUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LevelUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LevelUpdate) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LevelUpdate) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LevelUpdate) LevelOld() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LevelUpdate) SetLevelOld(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LevelUpdate) Exp() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LevelUpdate) SetExp(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// LevelUpdate_List is a list of LevelUpdate.
type LevelUpdate_List = capnp.StructList[LevelUpdate]

// NewLevelUpdate creates a new list of LevelUpdate.
func NewLevelUpdate_List(s *capnp.Segment, sz int32) (LevelUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LevelUpdate](l), err
}

// LevelUpdate_Future is a wrapper for a LevelUpdate promised by a client call.
type LevelUpdate_Future struct{ *capnp.Future }

func (f LevelUpdate_Future) Struct() (LevelUpdate, error) {
	p, err := f.Future.Ptr()
	return LevelUpdate(p.Struct()), err
}

type ExpUpdate capnp.Struct

// ExpUpdate_TypeID is the unique identifier for the type ExpUpdate.
const ExpUpdate_TypeID = 0x80545037b7a4173b

func NewExpUpdate(s *capnp.Segment) (ExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpUpdate(st), err
}

func NewRootExpUpdate(s *capnp.Segment) (ExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpUpdate(st), err
}

func ReadRootExpUpdate(msg *capnp.Message) (ExpUpdate, error) {
	root, err := msg.Root()
	return ExpUpdate(root.Struct()), err
}

func (s ExpUpdate) String() string {
	str, _ := text.Marshal(0x80545037b7a4173b, capnp.Struct(s))
	return str
}

func (s ExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpUpdate) DecodeFromPtr(p capnp.Ptr) ExpUpdate {
	return ExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpUpdate) Exp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpUpdate) SetExp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpUpdate) Aaxp() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpUpdate) SetAaxp(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ExpUpdate_List is a list of ExpUpdate.
type ExpUpdate_List = capnp.StructList[ExpUpdate]

// NewExpUpdate creates a new list of ExpUpdate.
func NewExpUpdate_List(s *capnp.Segment, sz int32) (ExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExpUpdate](l), err
}

// ExpUpdate_Future is a wrapper for a ExpUpdate promised by a client call.
type ExpUpdate_Future struct{ *capnp.Future }

func (f ExpUpdate_Future) Struct() (ExpUpdate, error) {
	p, err := f.Future.Ptr()
	return ExpUpdate(p.Struct()), err
}

type BulkItemPacket capnp.Struct

// BulkItemPacket_TypeID is the unique identifier for the type BulkItemPacket.
const BulkItemPacket_TypeID = 0xfb1ba86c82d8b9b1

func NewBulkItemPacket(s *capnp.Segment) (BulkItemPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BulkItemPacket(st), err
}

func NewRootBulkItemPacket(s *capnp.Segment) (BulkItemPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BulkItemPacket(st), err
}

func ReadRootBulkItemPacket(msg *capnp.Message) (BulkItemPacket, error) {
	root, err := msg.Root()
	return BulkItemPacket(root.Struct()), err
}

func (s BulkItemPacket) String() string {
	str, _ := text.Marshal(0xfb1ba86c82d8b9b1, capnp.Struct(s))
	return str
}

func (s BulkItemPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BulkItemPacket) DecodeFromPtr(p capnp.Ptr) BulkItemPacket {
	return BulkItemPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BulkItemPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BulkItemPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BulkItemPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BulkItemPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BulkItemPacket) SerializedItem() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BulkItemPacket) HasSerializedItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BulkItemPacket) SerializedItemBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BulkItemPacket) SetSerializedItem(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BulkItemPacket_List is a list of BulkItemPacket.
type BulkItemPacket_List = capnp.StructList[BulkItemPacket]

// NewBulkItemPacket creates a new list of BulkItemPacket.
func NewBulkItemPacket_List(s *capnp.Segment, sz int32) (BulkItemPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BulkItemPacket](l), err
}

// BulkItemPacket_Future is a wrapper for a BulkItemPacket promised by a client call.
type BulkItemPacket_Future struct{ *capnp.Future }

func (f BulkItemPacket_Future) Struct() (BulkItemPacket, error) {
	p, err := f.Future.Ptr()
	return BulkItemPacket(p.Struct()), err
}

type Consume capnp.Struct

// Consume_TypeID is the unique identifier for the type Consume.
const Consume_TypeID = 0xc7587c9f16a1fc72

func NewConsume(s *capnp.Segment) (Consume, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Consume(st), err
}

func NewRootConsume(s *capnp.Segment) (Consume, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Consume(st), err
}

func ReadRootConsume(msg *capnp.Message) (Consume, error) {
	root, err := msg.Root()
	return Consume(root.Struct()), err
}

func (s Consume) String() string {
	str, _ := text.Marshal(0xc7587c9f16a1fc72, capnp.Struct(s))
	return str
}

func (s Consume) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consume) DecodeFromPtr(p capnp.Ptr) Consume {
	return Consume(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consume) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consume) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consume) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consume) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consume) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Consume) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Consume) AutoConsumed() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Consume) SetAutoConsumed(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Consume) Type() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Consume) SetType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Consume_List is a list of Consume.
type Consume_List = capnp.StructList[Consume]

// NewConsume creates a new list of Consume.
func NewConsume_List(s *capnp.Segment, sz int32) (Consume_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Consume](l), err
}

// Consume_Future is a wrapper for a Consume promised by a client call.
type Consume_Future struct{ *capnp.Future }

func (f Consume_Future) Struct() (Consume, error) {
	p, err := f.Future.Ptr()
	return Consume(p.Struct()), err
}

type DeleteItem capnp.Struct

// DeleteItem_TypeID is the unique identifier for the type DeleteItem.
const DeleteItem_TypeID = 0xde9db2015f39bf49

func NewDeleteItem(s *capnp.Segment) (DeleteItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DeleteItem(st), err
}

func NewRootDeleteItem(s *capnp.Segment) (DeleteItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DeleteItem(st), err
}

func ReadRootDeleteItem(msg *capnp.Message) (DeleteItem, error) {
	root, err := msg.Root()
	return DeleteItem(root.Struct()), err
}

func (s DeleteItem) String() string {
	str, _ := text.Marshal(0xde9db2015f39bf49, capnp.Struct(s))
	return str
}

func (s DeleteItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeleteItem) DecodeFromPtr(p capnp.Ptr) DeleteItem {
	return DeleteItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeleteItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeleteItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeleteItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeleteItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeleteItem) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DeleteItem) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DeleteItem) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DeleteItem) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DeleteItem) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DeleteItem) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// DeleteItem_List is a list of DeleteItem.
type DeleteItem_List = capnp.StructList[DeleteItem]

// NewDeleteItem creates a new list of DeleteItem.
func NewDeleteItem_List(s *capnp.Segment, sz int32) (DeleteItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[DeleteItem](l), err
}

// DeleteItem_Future is a wrapper for a DeleteItem promised by a client call.
type DeleteItem_Future struct{ *capnp.Future }

func (f DeleteItem_Future) Struct() (DeleteItem, error) {
	p, err := f.Future.Ptr()
	return DeleteItem(p.Struct()), err
}

type MoveItem capnp.Struct

// MoveItem_TypeID is the unique identifier for the type MoveItem.
const MoveItem_TypeID = 0x8b2666611a37b434

func NewMoveItem(s *capnp.Segment) (MoveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoveItem(st), err
}

func NewRootMoveItem(s *capnp.Segment) (MoveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoveItem(st), err
}

func ReadRootMoveItem(msg *capnp.Message) (MoveItem, error) {
	root, err := msg.Root()
	return MoveItem(root.Struct()), err
}

func (s MoveItem) String() string {
	str, _ := text.Marshal(0x8b2666611a37b434, capnp.Struct(s))
	return str
}

func (s MoveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveItem) DecodeFromPtr(p capnp.Ptr) MoveItem {
	return MoveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveItem) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveItem) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveItem) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveItem) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoveItem) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoveItem) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MoveItem_List is a list of MoveItem.
type MoveItem_List = capnp.StructList[MoveItem]

// NewMoveItem creates a new list of MoveItem.
func NewMoveItem_List(s *capnp.Segment, sz int32) (MoveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MoveItem](l), err
}

// MoveItem_Future is a wrapper for a MoveItem promised by a client call.
type MoveItem_Future struct{ *capnp.Future }

func (f MoveItem_Future) Struct() (MoveItem, error) {
	p, err := f.Future.Ptr()
	return MoveItem(p.Struct()), err
}

type MultiMoveItemSub capnp.Struct

// MultiMoveItemSub_TypeID is the unique identifier for the type MultiMoveItemSub.
const MultiMoveItemSub_TypeID = 0x815ffda3d9dd039d

func NewMultiMoveItemSub(s *capnp.Segment) (MultiMoveItemSub, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MultiMoveItemSub(st), err
}

func NewRootMultiMoveItemSub(s *capnp.Segment) (MultiMoveItemSub, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MultiMoveItemSub(st), err
}

func ReadRootMultiMoveItemSub(msg *capnp.Message) (MultiMoveItemSub, error) {
	root, err := msg.Root()
	return MultiMoveItemSub(root.Struct()), err
}

func (s MultiMoveItemSub) String() string {
	str, _ := text.Marshal(0x815ffda3d9dd039d, capnp.Struct(s))
	return str
}

func (s MultiMoveItemSub) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiMoveItemSub) DecodeFromPtr(p capnp.Ptr) MultiMoveItemSub {
	return MultiMoveItemSub(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiMoveItemSub) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiMoveItemSub) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiMoveItemSub) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiMoveItemSub) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiMoveItemSub) FromSlot() (InventorySlot, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return InventorySlot(p.Struct()), err
}

func (s MultiMoveItemSub) HasFromSlot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiMoveItemSub) SetFromSlot(v InventorySlot) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFromSlot sets the fromSlot field to a newly
// allocated InventorySlot struct, preferring placement in s's segment.
func (s MultiMoveItemSub) NewFromSlot() (InventorySlot, error) {
	ss, err := NewInventorySlot(capnp.Struct(s).Segment())
	if err != nil {
		return InventorySlot{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MultiMoveItemSub) NumberInStack() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MultiMoveItemSub) SetNumberInStack(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MultiMoveItemSub) ToSlot() (InventorySlot, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return InventorySlot(p.Struct()), err
}

func (s MultiMoveItemSub) HasToSlot() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MultiMoveItemSub) SetToSlot(v InventorySlot) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewToSlot sets the toSlot field to a newly
// allocated InventorySlot struct, preferring placement in s's segment.
func (s MultiMoveItemSub) NewToSlot() (InventorySlot, error) {
	ss, err := NewInventorySlot(capnp.Struct(s).Segment())
	if err != nil {
		return InventorySlot{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MultiMoveItemSub_List is a list of MultiMoveItemSub.
type MultiMoveItemSub_List = capnp.StructList[MultiMoveItemSub]

// NewMultiMoveItemSub creates a new list of MultiMoveItemSub.
func NewMultiMoveItemSub_List(s *capnp.Segment, sz int32) (MultiMoveItemSub_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[MultiMoveItemSub](l), err
}

// MultiMoveItemSub_Future is a wrapper for a MultiMoveItemSub promised by a client call.
type MultiMoveItemSub_Future struct{ *capnp.Future }

func (f MultiMoveItemSub_Future) Struct() (MultiMoveItemSub, error) {
	p, err := f.Future.Ptr()
	return MultiMoveItemSub(p.Struct()), err
}
func (p MultiMoveItemSub_Future) FromSlot() InventorySlot_Future {
	return InventorySlot_Future{Future: p.Future.Field(0, nil)}
}
func (p MultiMoveItemSub_Future) ToSlot() InventorySlot_Future {
	return InventorySlot_Future{Future: p.Future.Field(1, nil)}
}

type MultiMoveItem capnp.Struct

// MultiMoveItem_TypeID is the unique identifier for the type MultiMoveItem.
const MultiMoveItem_TypeID = 0xab1ebc3e87d43ca9

func NewMultiMoveItem(s *capnp.Segment) (MultiMoveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiMoveItem(st), err
}

func NewRootMultiMoveItem(s *capnp.Segment) (MultiMoveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MultiMoveItem(st), err
}

func ReadRootMultiMoveItem(msg *capnp.Message) (MultiMoveItem, error) {
	root, err := msg.Root()
	return MultiMoveItem(root.Struct()), err
}

func (s MultiMoveItem) String() string {
	str, _ := text.Marshal(0xab1ebc3e87d43ca9, capnp.Struct(s))
	return str
}

func (s MultiMoveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MultiMoveItem) DecodeFromPtr(p capnp.Ptr) MultiMoveItem {
	return MultiMoveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MultiMoveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MultiMoveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MultiMoveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MultiMoveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MultiMoveItem) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MultiMoveItem) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MultiMoveItem) Moves() (MultiMoveItemSub_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MultiMoveItemSub_List(p.List()), err
}

func (s MultiMoveItem) HasMoves() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MultiMoveItem) SetMoves(v MultiMoveItemSub_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMoves sets the moves field to a newly
// allocated MultiMoveItemSub_List, preferring placement in s's segment.
func (s MultiMoveItem) NewMoves(n int32) (MultiMoveItemSub_List, error) {
	l, err := NewMultiMoveItemSub_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MultiMoveItemSub_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MultiMoveItem_List is a list of MultiMoveItem.
type MultiMoveItem_List = capnp.StructList[MultiMoveItem]

// NewMultiMoveItem creates a new list of MultiMoveItem.
func NewMultiMoveItem_List(s *capnp.Segment, sz int32) (MultiMoveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MultiMoveItem](l), err
}

// MultiMoveItem_Future is a wrapper for a MultiMoveItem promised by a client call.
type MultiMoveItem_Future struct{ *capnp.Future }

func (f MultiMoveItem_Future) Struct() (MultiMoveItem, error) {
	p, err := f.Future.Ptr()
	return MultiMoveItem(p.Struct()), err
}

type MoveCoin capnp.Struct

// MoveCoin_TypeID is the unique identifier for the type MoveCoin.
const MoveCoin_TypeID = 0xe7eceebcdcb01522

func NewMoveCoin(s *capnp.Segment) (MoveCoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoveCoin(st), err
}

func NewRootMoveCoin(s *capnp.Segment) (MoveCoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoveCoin(st), err
}

func ReadRootMoveCoin(msg *capnp.Message) (MoveCoin, error) {
	root, err := msg.Root()
	return MoveCoin(root.Struct()), err
}

func (s MoveCoin) String() string {
	str, _ := text.Marshal(0xe7eceebcdcb01522, capnp.Struct(s))
	return str
}

func (s MoveCoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveCoin) DecodeFromPtr(p capnp.Ptr) MoveCoin {
	return MoveCoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveCoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveCoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveCoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveCoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveCoin) FromSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveCoin) SetFromSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveCoin) ToSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveCoin) SetToSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoveCoin) Cointype1() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoveCoin) SetCointype1(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoveCoin) Cointype2() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoveCoin) SetCointype2(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MoveCoin) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MoveCoin) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MoveCoin_List is a list of MoveCoin.
type MoveCoin_List = capnp.StructList[MoveCoin]

// NewMoveCoin creates a new list of MoveCoin.
func NewMoveCoin_List(s *capnp.Segment, sz int32) (MoveCoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MoveCoin](l), err
}

// MoveCoin_Future is a wrapper for a MoveCoin promised by a client call.
type MoveCoin_Future struct{ *capnp.Future }

func (f MoveCoin_Future) Struct() (MoveCoin, error) {
	p, err := f.Future.Ptr()
	return MoveCoin(p.Struct()), err
}

type TradeBusy capnp.Struct

// TradeBusy_TypeID is the unique identifier for the type TradeBusy.
const TradeBusy_TypeID = 0xf014129ca27de499

func NewTradeBusy(s *capnp.Segment) (TradeBusy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeBusy(st), err
}

func NewRootTradeBusy(s *capnp.Segment) (TradeBusy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeBusy(st), err
}

func ReadRootTradeBusy(msg *capnp.Message) (TradeBusy, error) {
	root, err := msg.Root()
	return TradeBusy(root.Struct()), err
}

func (s TradeBusy) String() string {
	str, _ := text.Marshal(0xf014129ca27de499, capnp.Struct(s))
	return str
}

func (s TradeBusy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeBusy) DecodeFromPtr(p capnp.Ptr) TradeBusy {
	return TradeBusy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeBusy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeBusy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeBusy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeBusy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeBusy) ToMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeBusy) SetToMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeBusy) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeBusy) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TradeBusy_List is a list of TradeBusy.
type TradeBusy_List = capnp.StructList[TradeBusy]

// NewTradeBusy creates a new list of TradeBusy.
func NewTradeBusy_List(s *capnp.Segment, sz int32) (TradeBusy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeBusy](l), err
}

// TradeBusy_Future is a wrapper for a TradeBusy promised by a client call.
type TradeBusy_Future struct{ *capnp.Future }

func (f TradeBusy_Future) Struct() (TradeBusy, error) {
	p, err := f.Future.Ptr()
	return TradeBusy(p.Struct()), err
}

type TradeCoin capnp.Struct

// TradeCoin_TypeID is the unique identifier for the type TradeCoin.
const TradeCoin_TypeID = 0xed7d297bd1f274b3

func NewTradeCoin(s *capnp.Segment) (TradeCoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeCoin(st), err
}

func NewRootTradeCoin(s *capnp.Segment) (TradeCoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeCoin(st), err
}

func ReadRootTradeCoin(msg *capnp.Message) (TradeCoin, error) {
	root, err := msg.Root()
	return TradeCoin(root.Struct()), err
}

func (s TradeCoin) String() string {
	str, _ := text.Marshal(0xed7d297bd1f274b3, capnp.Struct(s))
	return str
}

func (s TradeCoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeCoin) DecodeFromPtr(p capnp.Ptr) TradeCoin {
	return TradeCoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeCoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeCoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeCoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeCoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeCoin) Trader() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeCoin) SetTrader(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeCoin) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeCoin) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeCoin) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TradeCoin) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TradeCoin_List is a list of TradeCoin.
type TradeCoin_List = capnp.StructList[TradeCoin]

// NewTradeCoin creates a new list of TradeCoin.
func NewTradeCoin_List(s *capnp.Segment, sz int32) (TradeCoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TradeCoin](l), err
}

// TradeCoin_Future is a wrapper for a TradeCoin promised by a client call.
type TradeCoin_Future struct{ *capnp.Future }

func (f TradeCoin_Future) Struct() (TradeCoin, error) {
	p, err := f.Future.Ptr()
	return TradeCoin(p.Struct()), err
}

type TradeMoneyUpdate capnp.Struct

// TradeMoneyUpdate_TypeID is the unique identifier for the type TradeMoneyUpdate.
const TradeMoneyUpdate_TypeID = 0xda1a12e840c66e0f

func NewTradeMoneyUpdate(s *capnp.Segment) (TradeMoneyUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeMoneyUpdate(st), err
}

func NewRootTradeMoneyUpdate(s *capnp.Segment) (TradeMoneyUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TradeMoneyUpdate(st), err
}

func ReadRootTradeMoneyUpdate(msg *capnp.Message) (TradeMoneyUpdate, error) {
	root, err := msg.Root()
	return TradeMoneyUpdate(root.Struct()), err
}

func (s TradeMoneyUpdate) String() string {
	str, _ := text.Marshal(0xda1a12e840c66e0f, capnp.Struct(s))
	return str
}

func (s TradeMoneyUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeMoneyUpdate) DecodeFromPtr(p capnp.Ptr) TradeMoneyUpdate {
	return TradeMoneyUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeMoneyUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeMoneyUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeMoneyUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeMoneyUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeMoneyUpdate) Trader() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeMoneyUpdate) SetTrader(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeMoneyUpdate) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeMoneyUpdate) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeMoneyUpdate) Amount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TradeMoneyUpdate) SetAmount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TradeMoneyUpdate_List is a list of TradeMoneyUpdate.
type TradeMoneyUpdate_List = capnp.StructList[TradeMoneyUpdate]

// NewTradeMoneyUpdate creates a new list of TradeMoneyUpdate.
func NewTradeMoneyUpdate_List(s *capnp.Segment, sz int32) (TradeMoneyUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TradeMoneyUpdate](l), err
}

// TradeMoneyUpdate_Future is a wrapper for a TradeMoneyUpdate promised by a client call.
type TradeMoneyUpdate_Future struct{ *capnp.Future }

func (f TradeMoneyUpdate_Future) Struct() (TradeMoneyUpdate, error) {
	p, err := f.Future.Ptr()
	return TradeMoneyUpdate(p.Struct()), err
}

type Surname capnp.Struct

// Surname_TypeID is the unique identifier for the type Surname.
const Surname_TypeID = 0x89f1549a7f447f06

func NewSurname(s *capnp.Segment) (Surname, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Surname(st), err
}

func NewRootSurname(s *capnp.Segment) (Surname, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Surname(st), err
}

func ReadRootSurname(msg *capnp.Message) (Surname, error) {
	root, err := msg.Root()
	return Surname(root.Struct()), err
}

func (s Surname) String() string {
	str, _ := text.Marshal(0x89f1549a7f447f06, capnp.Struct(s))
	return str
}

func (s Surname) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Surname) DecodeFromPtr(p capnp.Ptr) Surname {
	return Surname(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Surname) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Surname) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Surname) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Surname) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Surname) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Surname) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Surname) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Surname) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Surname) Lastname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Surname) HasLastname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Surname) LastnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Surname) SetLastname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Surname_List is a list of Surname.
type Surname_List = capnp.StructList[Surname]

// NewSurname creates a new list of Surname.
func NewSurname_List(s *capnp.Segment, sz int32) (Surname_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Surname](l), err
}

// Surname_Future is a wrapper for a Surname promised by a client call.
type Surname_Future struct{ *capnp.Future }

func (f Surname_Future) Struct() (Surname, error) {
	p, err := f.Future.Ptr()
	return Surname(p.Struct()), err
}

type GuildsList capnp.Struct

// GuildsList_TypeID is the unique identifier for the type GuildsList.
const GuildsList_TypeID = 0xb3a8f9a49aa3ccf8

func NewGuildsList(s *capnp.Segment) (GuildsList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GuildsList(st), err
}

func NewRootGuildsList(s *capnp.Segment) (GuildsList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GuildsList(st), err
}

func ReadRootGuildsList(msg *capnp.Message) (GuildsList, error) {
	root, err := msg.Root()
	return GuildsList(root.Struct()), err
}

func (s GuildsList) String() string {
	str, _ := text.Marshal(0xb3a8f9a49aa3ccf8, capnp.Struct(s))
	return str
}

func (s GuildsList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildsList) DecodeFromPtr(p capnp.Ptr) GuildsList {
	return GuildsList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildsList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildsList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildsList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildsList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildsList) Guilds() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return StringList_List(p.List()), err
}

func (s GuildsList) HasGuilds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildsList) SetGuilds(v StringList_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewGuilds sets the guilds field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GuildsList) NewGuilds(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GuildsList_List is a list of GuildsList.
type GuildsList_List = capnp.StructList[GuildsList]

// NewGuildsList creates a new list of GuildsList.
func NewGuildsList_List(s *capnp.Segment, sz int32) (GuildsList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GuildsList](l), err
}

// GuildsList_Future is a wrapper for a GuildsList promised by a client call.
type GuildsList_Future struct{ *capnp.Future }

func (f GuildsList_Future) Struct() (GuildsList, error) {
	p, err := f.Future.Ptr()
	return GuildsList(p.Struct()), err
}

type MoneyOnCorpse capnp.Struct

// MoneyOnCorpse_TypeID is the unique identifier for the type MoneyOnCorpse.
const MoneyOnCorpse_TypeID = 0xd89879eb841b57cc

func NewMoneyOnCorpse(s *capnp.Segment) (MoneyOnCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoneyOnCorpse(st), err
}

func NewRootMoneyOnCorpse(s *capnp.Segment) (MoneyOnCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MoneyOnCorpse(st), err
}

func ReadRootMoneyOnCorpse(msg *capnp.Message) (MoneyOnCorpse, error) {
	root, err := msg.Root()
	return MoneyOnCorpse(root.Struct()), err
}

func (s MoneyOnCorpse) String() string {
	str, _ := text.Marshal(0xd89879eb841b57cc, capnp.Struct(s))
	return str
}

func (s MoneyOnCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoneyOnCorpse) DecodeFromPtr(p capnp.Ptr) MoneyOnCorpse {
	return MoneyOnCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoneyOnCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoneyOnCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoneyOnCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoneyOnCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoneyOnCorpse) Response() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoneyOnCorpse) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoneyOnCorpse) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoneyOnCorpse) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoneyOnCorpse) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoneyOnCorpse) SetGold(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoneyOnCorpse) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoneyOnCorpse) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MoneyOnCorpse) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MoneyOnCorpse) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MoneyOnCorpse_List is a list of MoneyOnCorpse.
type MoneyOnCorpse_List = capnp.StructList[MoneyOnCorpse]

// NewMoneyOnCorpse creates a new list of MoneyOnCorpse.
func NewMoneyOnCorpse_List(s *capnp.Segment, sz int32) (MoneyOnCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MoneyOnCorpse](l), err
}

// MoneyOnCorpse_Future is a wrapper for a MoneyOnCorpse promised by a client call.
type MoneyOnCorpse_Future struct{ *capnp.Future }

func (f MoneyOnCorpse_Future) Struct() (MoneyOnCorpse, error) {
	p, err := f.Future.Ptr()
	return MoneyOnCorpse(p.Struct()), err
}

type LootingItem capnp.Struct

// LootingItem_TypeID is the unique identifier for the type LootingItem.
const LootingItem_TypeID = 0xf0569fdbfd2961b4

func NewLootingItem(s *capnp.Segment) (LootingItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LootingItem(st), err
}

func NewRootLootingItem(s *capnp.Segment) (LootingItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LootingItem(st), err
}

func ReadRootLootingItem(msg *capnp.Message) (LootingItem, error) {
	root, err := msg.Root()
	return LootingItem(root.Struct()), err
}

func (s LootingItem) String() string {
	str, _ := text.Marshal(0xf0569fdbfd2961b4, capnp.Struct(s))
	return str
}

func (s LootingItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LootingItem) DecodeFromPtr(p capnp.Ptr) LootingItem {
	return LootingItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LootingItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LootingItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LootingItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LootingItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LootingItem) Lootee() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LootingItem) SetLootee(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LootingItem) Looter() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LootingItem) SetLooter(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LootingItem) SlotId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LootingItem) SetSlotId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LootingItem) AutoLoot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LootingItem) SetAutoLoot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LootingItem_List is a list of LootingItem.
type LootingItem_List = capnp.StructList[LootingItem]

// NewLootingItem creates a new list of LootingItem.
func NewLootingItem_List(s *capnp.Segment, sz int32) (LootingItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LootingItem](l), err
}

// LootingItem_Future is a wrapper for a LootingItem promised by a client call.
type LootingItem_Future struct{ *capnp.Future }

func (f LootingItem_Future) Struct() (LootingItem, error) {
	p, err := f.Future.Ptr()
	return LootingItem(p.Struct()), err
}

type GuildManageStatus capnp.Struct

// GuildManageStatus_TypeID is the unique identifier for the type GuildManageStatus.
const GuildManageStatus_TypeID = 0xcf365ec11d0c95df

func NewGuildManageStatus(s *capnp.Segment) (GuildManageStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildManageStatus(st), err
}

func NewRootGuildManageStatus(s *capnp.Segment) (GuildManageStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildManageStatus(st), err
}

func ReadRootGuildManageStatus(msg *capnp.Message) (GuildManageStatus, error) {
	root, err := msg.Root()
	return GuildManageStatus(root.Struct()), err
}

func (s GuildManageStatus) String() string {
	str, _ := text.Marshal(0xcf365ec11d0c95df, capnp.Struct(s))
	return str
}

func (s GuildManageStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildManageStatus) DecodeFromPtr(p capnp.Ptr) GuildManageStatus {
	return GuildManageStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildManageStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildManageStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildManageStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildManageStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildManageStatus) Guildid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildManageStatus) SetGuildid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildManageStatus) Oldrank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildManageStatus) SetOldrank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildManageStatus) Newrank() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildManageStatus) SetNewrank(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildManageStatus) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildManageStatus) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildManageStatus) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildManageStatus) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildManageStatus_List is a list of GuildManageStatus.
type GuildManageStatus_List = capnp.StructList[GuildManageStatus]

// NewGuildManageStatus creates a new list of GuildManageStatus.
func NewGuildManageStatus_List(s *capnp.Segment, sz int32) (GuildManageStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[GuildManageStatus](l), err
}

// GuildManageStatus_Future is a wrapper for a GuildManageStatus promised by a client call.
type GuildManageStatus_Future struct{ *capnp.Future }

func (f GuildManageStatus_Future) Struct() (GuildManageStatus, error) {
	p, err := f.Future.Ptr()
	return GuildManageStatus(p.Struct()), err
}

type GuildJoin capnp.Struct

// GuildJoin_TypeID is the unique identifier for the type GuildJoin.
const GuildJoin_TypeID = 0xce388f415f14acb0

func NewGuildJoin(s *capnp.Segment) (GuildJoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GuildJoin(st), err
}

func NewRootGuildJoin(s *capnp.Segment) (GuildJoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GuildJoin(st), err
}

func ReadRootGuildJoin(msg *capnp.Message) (GuildJoin, error) {
	root, err := msg.Root()
	return GuildJoin(root.Struct()), err
}

func (s GuildJoin) String() string {
	str, _ := text.Marshal(0xce388f415f14acb0, capnp.Struct(s))
	return str
}

func (s GuildJoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildJoin) DecodeFromPtr(p capnp.Ptr) GuildJoin {
	return GuildJoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildJoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildJoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildJoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildJoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildJoin) Guildid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildJoin) SetGuildid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildJoin) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildJoin) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildJoin) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildJoin) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildJoin) Rank() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GuildJoin) SetRank(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GuildJoin) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GuildJoin) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GuildJoin) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildJoin) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildJoin) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildJoin) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildJoin_List is a list of GuildJoin.
type GuildJoin_List = capnp.StructList[GuildJoin]

// NewGuildJoin creates a new list of GuildJoin.
func NewGuildJoin_List(s *capnp.Segment, sz int32) (GuildJoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[GuildJoin](l), err
}

// GuildJoin_Future is a wrapper for a GuildJoin promised by a client call.
type GuildJoin_Future struct{ *capnp.Future }

func (f GuildJoin_Future) Struct() (GuildJoin, error) {
	p, err := f.Future.Ptr()
	return GuildJoin(p.Struct()), err
}

type GuildInviteAccept capnp.Struct

// GuildInviteAccept_TypeID is the unique identifier for the type GuildInviteAccept.
const GuildInviteAccept_TypeID = 0xf7787292d29bdcd7

func NewGuildInviteAccept(s *capnp.Segment) (GuildInviteAccept, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildInviteAccept(st), err
}

func NewRootGuildInviteAccept(s *capnp.Segment) (GuildInviteAccept, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildInviteAccept(st), err
}

func ReadRootGuildInviteAccept(msg *capnp.Message) (GuildInviteAccept, error) {
	root, err := msg.Root()
	return GuildInviteAccept(root.Struct()), err
}

func (s GuildInviteAccept) String() string {
	str, _ := text.Marshal(0xf7787292d29bdcd7, capnp.Struct(s))
	return str
}

func (s GuildInviteAccept) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildInviteAccept) DecodeFromPtr(p capnp.Ptr) GuildInviteAccept {
	return GuildInviteAccept(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildInviteAccept) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildInviteAccept) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildInviteAccept) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildInviteAccept) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildInviteAccept) Inviter() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildInviteAccept) HasInviter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildInviteAccept) InviterBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildInviteAccept) SetInviter(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildInviteAccept) Newmember() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildInviteAccept) HasNewmember() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildInviteAccept) NewmemberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildInviteAccept) SetNewmember(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildInviteAccept) Response() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildInviteAccept) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildInviteAccept) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildInviteAccept) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// GuildInviteAccept_List is a list of GuildInviteAccept.
type GuildInviteAccept_List = capnp.StructList[GuildInviteAccept]

// NewGuildInviteAccept creates a new list of GuildInviteAccept.
func NewGuildInviteAccept_List(s *capnp.Segment, sz int32) (GuildInviteAccept_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildInviteAccept](l), err
}

// GuildInviteAccept_Future is a wrapper for a GuildInviteAccept promised by a client call.
type GuildInviteAccept_Future struct{ *capnp.Future }

func (f GuildInviteAccept_Future) Struct() (GuildInviteAccept, error) {
	p, err := f.Future.Ptr()
	return GuildInviteAccept(p.Struct()), err
}

type GuildManageRemove capnp.Struct

// GuildManageRemove_TypeID is the unique identifier for the type GuildManageRemove.
const GuildManageRemove_TypeID = 0xe0a980f598d8a745

func NewGuildManageRemove(s *capnp.Segment) (GuildManageRemove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildManageRemove(st), err
}

func NewRootGuildManageRemove(s *capnp.Segment) (GuildManageRemove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildManageRemove(st), err
}

func ReadRootGuildManageRemove(msg *capnp.Message) (GuildManageRemove, error) {
	root, err := msg.Root()
	return GuildManageRemove(root.Struct()), err
}

func (s GuildManageRemove) String() string {
	str, _ := text.Marshal(0xe0a980f598d8a745, capnp.Struct(s))
	return str
}

func (s GuildManageRemove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildManageRemove) DecodeFromPtr(p capnp.Ptr) GuildManageRemove {
	return GuildManageRemove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildManageRemove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildManageRemove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildManageRemove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildManageRemove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildManageRemove) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildManageRemove) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildManageRemove) Member() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildManageRemove) HasMember() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildManageRemove) MemberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildManageRemove) SetMember(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GuildManageRemove_List is a list of GuildManageRemove.
type GuildManageRemove_List = capnp.StructList[GuildManageRemove]

// NewGuildManageRemove creates a new list of GuildManageRemove.
func NewGuildManageRemove_List(s *capnp.Segment, sz int32) (GuildManageRemove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GuildManageRemove](l), err
}

// GuildManageRemove_Future is a wrapper for a GuildManageRemove promised by a client call.
type GuildManageRemove_Future struct{ *capnp.Future }

func (f GuildManageRemove_Future) Struct() (GuildManageRemove, error) {
	p, err := f.Future.Ptr()
	return GuildManageRemove(p.Struct()), err
}

type Guildcommand capnp.Struct

// Guildcommand_TypeID is the unique identifier for the type Guildcommand.
const Guildcommand_TypeID = 0x87681fa437f7497d

func NewGuildcommand(s *capnp.Segment) (Guildcommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Guildcommand(st), err
}

func NewRootGuildcommand(s *capnp.Segment) (Guildcommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Guildcommand(st), err
}

func ReadRootGuildcommand(msg *capnp.Message) (Guildcommand, error) {
	root, err := msg.Root()
	return Guildcommand(root.Struct()), err
}

func (s Guildcommand) String() string {
	str, _ := text.Marshal(0x87681fa437f7497d, capnp.Struct(s))
	return str
}

func (s Guildcommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Guildcommand) DecodeFromPtr(p capnp.Ptr) Guildcommand {
	return Guildcommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Guildcommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Guildcommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Guildcommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Guildcommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Guildcommand) Othername() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Guildcommand) HasOthername() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Guildcommand) OthernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Guildcommand) SetOthername(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Guildcommand) Myname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Guildcommand) HasMyname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Guildcommand) MynameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Guildcommand) SetMyname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Guildcommand) Guildeqid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Guildcommand) SetGuildeqid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Guildcommand) Officer() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Guildcommand) SetOfficer(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Guildcommand_List is a list of Guildcommand.
type Guildcommand_List = capnp.StructList[Guildcommand]

// NewGuildcommand creates a new list of Guildcommand.
func NewGuildcommand_List(s *capnp.Segment, sz int32) (Guildcommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Guildcommand](l), err
}

// Guildcommand_Future is a wrapper for a Guildcommand promised by a client call.
type Guildcommand_Future struct{ *capnp.Future }

func (f Guildcommand_Future) Struct() (Guildcommand, error) {
	p, err := f.Future.Ptr()
	return Guildcommand(p.Struct()), err
}

type OnLevelMessage capnp.Struct

// OnLevelMessage_TypeID is the unique identifier for the type OnLevelMessage.
const OnLevelMessage_TypeID = 0xbed2ab9863c56d3b

func NewOnLevelMessage(s *capnp.Segment) (OnLevelMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return OnLevelMessage(st), err
}

func NewRootOnLevelMessage(s *capnp.Segment) (OnLevelMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return OnLevelMessage(st), err
}

func ReadRootOnLevelMessage(msg *capnp.Message) (OnLevelMessage, error) {
	root, err := msg.Root()
	return OnLevelMessage(root.Struct()), err
}

func (s OnLevelMessage) String() string {
	str, _ := text.Marshal(0xbed2ab9863c56d3b, capnp.Struct(s))
	return str
}

func (s OnLevelMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OnLevelMessage) DecodeFromPtr(p capnp.Ptr) OnLevelMessage {
	return OnLevelMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OnLevelMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OnLevelMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OnLevelMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OnLevelMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OnLevelMessage) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s OnLevelMessage) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OnLevelMessage) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s OnLevelMessage) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s OnLevelMessage) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s OnLevelMessage) HasText() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OnLevelMessage) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s OnLevelMessage) SetText(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s OnLevelMessage) Buttons() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s OnLevelMessage) SetButtons(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s OnLevelMessage) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s OnLevelMessage) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s OnLevelMessage) PopupId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s OnLevelMessage) SetPopupId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// OnLevelMessage_List is a list of OnLevelMessage.
type OnLevelMessage_List = capnp.StructList[OnLevelMessage]

// NewOnLevelMessage creates a new list of OnLevelMessage.
func NewOnLevelMessage_List(s *capnp.Segment, sz int32) (OnLevelMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[OnLevelMessage](l), err
}

// OnLevelMessage_Future is a wrapper for a OnLevelMessage promised by a client call.
type OnLevelMessage_Future struct{ *capnp.Future }

func (f OnLevelMessage_Future) Struct() (OnLevelMessage, error) {
	p, err := f.Future.Ptr()
	return OnLevelMessage(p.Struct()), err
}

type GMZoneRequest capnp.Struct

// GMZoneRequest_TypeID is the unique identifier for the type GMZoneRequest.
const GMZoneRequest_TypeID = 0xd870df23456b7900

func NewGMZoneRequest(s *capnp.Segment) (GMZoneRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GMZoneRequest(st), err
}

func NewRootGMZoneRequest(s *capnp.Segment) (GMZoneRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return GMZoneRequest(st), err
}

func ReadRootGMZoneRequest(msg *capnp.Message) (GMZoneRequest, error) {
	root, err := msg.Root()
	return GMZoneRequest(root.Struct()), err
}

func (s GMZoneRequest) String() string {
	str, _ := text.Marshal(0xd870df23456b7900, capnp.Struct(s))
	return str
}

func (s GMZoneRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMZoneRequest) DecodeFromPtr(p capnp.Ptr) GMZoneRequest {
	return GMZoneRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMZoneRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMZoneRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMZoneRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMZoneRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMZoneRequest) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMZoneRequest) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMZoneRequest) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMZoneRequest) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMZoneRequest) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMZoneRequest) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMZoneRequest) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GMZoneRequest) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GMZoneRequest) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s GMZoneRequest) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s GMZoneRequest) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s GMZoneRequest) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s GMZoneRequest) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s GMZoneRequest) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s GMZoneRequest) Success() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GMZoneRequest) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// GMZoneRequest_List is a list of GMZoneRequest.
type GMZoneRequest_List = capnp.StructList[GMZoneRequest]

// NewGMZoneRequest creates a new list of GMZoneRequest.
func NewGMZoneRequest_List(s *capnp.Segment, sz int32) (GMZoneRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[GMZoneRequest](l), err
}

// GMZoneRequest_Future is a wrapper for a GMZoneRequest promised by a client call.
type GMZoneRequest_Future struct{ *capnp.Future }

func (f GMZoneRequest_Future) Struct() (GMZoneRequest, error) {
	p, err := f.Future.Ptr()
	return GMZoneRequest(p.Struct()), err
}

type GMSummon capnp.Struct

// GMSummon_TypeID is the unique identifier for the type GMSummon.
const GMSummon_TypeID = 0xd2768707959c3ea9

func NewGMSummon(s *capnp.Segment) (GMSummon, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMSummon(st), err
}

func NewRootGMSummon(s *capnp.Segment) (GMSummon, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMSummon(st), err
}

func ReadRootGMSummon(msg *capnp.Message) (GMSummon, error) {
	root, err := msg.Root()
	return GMSummon(root.Struct()), err
}

func (s GMSummon) String() string {
	str, _ := text.Marshal(0xd2768707959c3ea9, capnp.Struct(s))
	return str
}

func (s GMSummon) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMSummon) DecodeFromPtr(p capnp.Ptr) GMSummon {
	return GMSummon(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMSummon) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMSummon) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMSummon) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMSummon) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMSummon) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMSummon) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMSummon) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMSummon) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMSummon) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMSummon) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMSummon) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMSummon) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMSummon) Success() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMSummon) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMSummon) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMSummon) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMSummon) Y() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMSummon) SetY(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GMSummon) X() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GMSummon) SetX(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GMSummon) Z() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GMSummon) SetZ(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// GMSummon_List is a list of GMSummon.
type GMSummon_List = capnp.StructList[GMSummon]

// NewGMSummon creates a new list of GMSummon.
func NewGMSummon_List(s *capnp.Segment, sz int32) (GMSummon_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[GMSummon](l), err
}

// GMSummon_Future is a wrapper for a GMSummon promised by a client call.
type GMSummon_Future struct{ *capnp.Future }

func (f GMSummon_Future) Struct() (GMSummon, error) {
	p, err := f.Future.Ptr()
	return GMSummon(p.Struct()), err
}

type GMGoto capnp.Struct

// GMGoto_TypeID is the unique identifier for the type GMGoto.
const GMGoto_TypeID = 0xd963a858373108fc

func NewGMGoto(s *capnp.Segment) (GMGoto, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMGoto(st), err
}

func NewRootGMGoto(s *capnp.Segment) (GMGoto, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return GMGoto(st), err
}

func ReadRootGMGoto(msg *capnp.Message) (GMGoto, error) {
	root, err := msg.Root()
	return GMGoto(root.Struct()), err
}

func (s GMGoto) String() string {
	str, _ := text.Marshal(0xd963a858373108fc, capnp.Struct(s))
	return str
}

func (s GMGoto) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMGoto) DecodeFromPtr(p capnp.Ptr) GMGoto {
	return GMGoto(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMGoto) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMGoto) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMGoto) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMGoto) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMGoto) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMGoto) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMGoto) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMGoto) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMGoto) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMGoto) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMGoto) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMGoto) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMGoto) Success() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMGoto) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GMGoto) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GMGoto) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GMGoto) Y() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GMGoto) SetY(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GMGoto) X() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GMGoto) SetX(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GMGoto) Z() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GMGoto) SetZ(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// GMGoto_List is a list of GMGoto.
type GMGoto_List = capnp.StructList[GMGoto]

// NewGMGoto creates a new list of GMGoto.
func NewGMGoto_List(s *capnp.Segment, sz int32) (GMGoto_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[GMGoto](l), err
}

// GMGoto_Future is a wrapper for a GMGoto promised by a client call.
type GMGoto_Future struct{ *capnp.Future }

func (f GMGoto_Future) Struct() (GMGoto, error) {
	p, err := f.Future.Ptr()
	return GMGoto(p.Struct()), err
}

type GMLastName capnp.Struct

// GMLastName_TypeID is the unique identifier for the type GMLastName.
const GMLastName_TypeID = 0xc186a9c36f974c33

func NewGMLastName(s *capnp.Segment) (GMLastName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GMLastName(st), err
}

func NewRootGMLastName(s *capnp.Segment) (GMLastName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GMLastName(st), err
}

func ReadRootGMLastName(msg *capnp.Message) (GMLastName, error) {
	root, err := msg.Root()
	return GMLastName(root.Struct()), err
}

func (s GMLastName) String() string {
	str, _ := text.Marshal(0xc186a9c36f974c33, capnp.Struct(s))
	return str
}

func (s GMLastName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMLastName) DecodeFromPtr(p capnp.Ptr) GMLastName {
	return GMLastName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMLastName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMLastName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMLastName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMLastName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMLastName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMLastName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMLastName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMLastName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMLastName) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMLastName) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMLastName) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMLastName) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMLastName) Lastname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GMLastName) HasLastname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GMLastName) LastnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GMLastName) SetLastname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GMLastName_List is a list of GMLastName.
type GMLastName_List = capnp.StructList[GMLastName]

// NewGMLastName creates a new list of GMLastName.
func NewGMLastName_List(s *capnp.Segment, sz int32) (GMLastName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GMLastName](l), err
}

// GMLastName_Future is a wrapper for a GMLastName promised by a client call.
type GMLastName_Future struct{ *capnp.Future }

func (f GMLastName_Future) Struct() (GMLastName, error) {
	p, err := f.Future.Ptr()
	return GMLastName(p.Struct()), err
}

type CombatAbility capnp.Struct

// CombatAbility_TypeID is the unique identifier for the type CombatAbility.
const CombatAbility_TypeID = 0xaeb6652f725f241b

func NewCombatAbility(s *capnp.Segment) (CombatAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CombatAbility(st), err
}

func NewRootCombatAbility(s *capnp.Segment) (CombatAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CombatAbility(st), err
}

func ReadRootCombatAbility(msg *capnp.Message) (CombatAbility, error) {
	root, err := msg.Root()
	return CombatAbility(root.Struct()), err
}

func (s CombatAbility) String() string {
	str, _ := text.Marshal(0xaeb6652f725f241b, capnp.Struct(s))
	return str
}

func (s CombatAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CombatAbility) DecodeFromPtr(p capnp.Ptr) CombatAbility {
	return CombatAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CombatAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CombatAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CombatAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CombatAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CombatAbility) MTarget() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CombatAbility) SetMTarget(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CombatAbility) MAtk() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CombatAbility) SetMAtk(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CombatAbility) MSkill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CombatAbility) SetMSkill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// CombatAbility_List is a list of CombatAbility.
type CombatAbility_List = capnp.StructList[CombatAbility]

// NewCombatAbility creates a new list of CombatAbility.
func NewCombatAbility_List(s *capnp.Segment, sz int32) (CombatAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CombatAbility](l), err
}

// CombatAbility_Future is a wrapper for a CombatAbility promised by a client call.
type CombatAbility_Future struct{ *capnp.Future }

func (f CombatAbility_Future) Struct() (CombatAbility, error) {
	p, err := f.Future.Ptr()
	return CombatAbility(p.Struct()), err
}

type InstillDoubt capnp.Struct

// InstillDoubt_TypeID is the unique identifier for the type InstillDoubt.
const InstillDoubt_TypeID = 0xf47ddd36364c797f

func NewInstillDoubt(s *capnp.Segment) (InstillDoubt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InstillDoubt(st), err
}

func NewRootInstillDoubt(s *capnp.Segment) (InstillDoubt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return InstillDoubt(st), err
}

func ReadRootInstillDoubt(msg *capnp.Message) (InstillDoubt, error) {
	root, err := msg.Root()
	return InstillDoubt(root.Struct()), err
}

func (s InstillDoubt) String() string {
	str, _ := text.Marshal(0xf47ddd36364c797f, capnp.Struct(s))
	return str
}

func (s InstillDoubt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InstillDoubt) DecodeFromPtr(p capnp.Ptr) InstillDoubt {
	return InstillDoubt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InstillDoubt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InstillDoubt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InstillDoubt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InstillDoubt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InstillDoubt) IId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InstillDoubt) SetIId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InstillDoubt) IAtk() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InstillDoubt) SetIAtk(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InstillDoubt) IType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s InstillDoubt) SetIType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// InstillDoubt_List is a list of InstillDoubt.
type InstillDoubt_List = capnp.StructList[InstillDoubt]

// NewInstillDoubt creates a new list of InstillDoubt.
func NewInstillDoubt_List(s *capnp.Segment, sz int32) (InstillDoubt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[InstillDoubt](l), err
}

// InstillDoubt_Future is a wrapper for a InstillDoubt promised by a client call.
type InstillDoubt_Future struct{ *capnp.Future }

func (f InstillDoubt_Future) Struct() (InstillDoubt, error) {
	p, err := f.Future.Ptr()
	return InstillDoubt(p.Struct()), err
}

type GiveItem capnp.Struct

// GiveItem_TypeID is the unique identifier for the type GiveItem.
const GiveItem_TypeID = 0xeef4dfefeb1def9f

func NewGiveItem(s *capnp.Segment) (GiveItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GiveItem(st), err
}

func NewRootGiveItem(s *capnp.Segment) (GiveItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return GiveItem(st), err
}

func ReadRootGiveItem(msg *capnp.Message) (GiveItem, error) {
	root, err := msg.Root()
	return GiveItem(root.Struct()), err
}

func (s GiveItem) String() string {
	str, _ := text.Marshal(0xeef4dfefeb1def9f, capnp.Struct(s))
	return str
}

func (s GiveItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GiveItem) DecodeFromPtr(p capnp.Ptr) GiveItem {
	return GiveItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GiveItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GiveItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GiveItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GiveItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GiveItem) ToEntity() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GiveItem) SetToEntity(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GiveItem) ToEquipSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GiveItem) SetToEquipSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GiveItem) FromEntity() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GiveItem) SetFromEntity(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GiveItem) FromEquipSlot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GiveItem) SetFromEquipSlot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// GiveItem_List is a list of GiveItem.
type GiveItem_List = capnp.StructList[GiveItem]

// NewGiveItem creates a new list of GiveItem.
func NewGiveItem_List(s *capnp.Segment, sz int32) (GiveItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[GiveItem](l), err
}

// GiveItem_Future is a wrapper for a GiveItem promised by a client call.
type GiveItem_Future struct{ *capnp.Future }

func (f GiveItem_Future) Struct() (GiveItem, error) {
	p, err := f.Future.Ptr()
	return GiveItem(p.Struct()), err
}

type RandomReq capnp.Struct

// RandomReq_TypeID is the unique identifier for the type RandomReq.
const RandomReq_TypeID = 0xc76af8996e024e54

func NewRandomReq(s *capnp.Segment) (RandomReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RandomReq(st), err
}

func NewRootRandomReq(s *capnp.Segment) (RandomReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RandomReq(st), err
}

func ReadRootRandomReq(msg *capnp.Message) (RandomReq, error) {
	root, err := msg.Root()
	return RandomReq(root.Struct()), err
}

func (s RandomReq) String() string {
	str, _ := text.Marshal(0xc76af8996e024e54, capnp.Struct(s))
	return str
}

func (s RandomReq) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RandomReq) DecodeFromPtr(p capnp.Ptr) RandomReq {
	return RandomReq(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RandomReq) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RandomReq) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RandomReq) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RandomReq) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RandomReq) Low() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RandomReq) SetLow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RandomReq) High() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RandomReq) SetHigh(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RandomReq_List is a list of RandomReq.
type RandomReq_List = capnp.StructList[RandomReq]

// NewRandomReq creates a new list of RandomReq.
func NewRandomReq_List(s *capnp.Segment, sz int32) (RandomReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[RandomReq](l), err
}

// RandomReq_Future is a wrapper for a RandomReq promised by a client call.
type RandomReq_Future struct{ *capnp.Future }

func (f RandomReq_Future) Struct() (RandomReq, error) {
	p, err := f.Future.Ptr()
	return RandomReq(p.Struct()), err
}

type RandomReply capnp.Struct

// RandomReply_TypeID is the unique identifier for the type RandomReply.
const RandomReply_TypeID = 0xfc446c448d940ff7

func NewRandomReply(s *capnp.Segment) (RandomReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RandomReply(st), err
}

func NewRootRandomReply(s *capnp.Segment) (RandomReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RandomReply(st), err
}

func ReadRootRandomReply(msg *capnp.Message) (RandomReply, error) {
	root, err := msg.Root()
	return RandomReply(root.Struct()), err
}

func (s RandomReply) String() string {
	str, _ := text.Marshal(0xfc446c448d940ff7, capnp.Struct(s))
	return str
}

func (s RandomReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RandomReply) DecodeFromPtr(p capnp.Ptr) RandomReply {
	return RandomReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RandomReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RandomReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RandomReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RandomReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RandomReply) Low() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RandomReply) SetLow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RandomReply) High() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RandomReply) SetHigh(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RandomReply) Result() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RandomReply) SetResult(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RandomReply) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RandomReply) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RandomReply) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RandomReply) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RandomReply_List is a list of RandomReply.
type RandomReply_List = capnp.StructList[RandomReply]

// NewRandomReply creates a new list of RandomReply.
func NewRandomReply_List(s *capnp.Segment, sz int32) (RandomReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RandomReply](l), err
}

// RandomReply_Future is a wrapper for a RandomReply promised by a client call.
type RandomReply_Future struct{ *capnp.Future }

func (f RandomReply_Future) Struct() (RandomReply, error) {
	p, err := f.Future.Ptr()
	return RandomReply(p.Struct()), err
}

type LFG capnp.Struct

// LFG_TypeID is the unique identifier for the type LFG.
const LFG_TypeID = 0x852c02610e8a2a24

func NewLFG(s *capnp.Segment) (LFG, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LFG(st), err
}

func NewRootLFG(s *capnp.Segment) (LFG, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LFG(st), err
}

func ReadRootLFG(msg *capnp.Message) (LFG, error) {
	root, err := msg.Root()
	return LFG(root.Struct()), err
}

func (s LFG) String() string {
	str, _ := text.Marshal(0x852c02610e8a2a24, capnp.Struct(s))
	return str
}

func (s LFG) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFG) DecodeFromPtr(p capnp.Ptr) LFG {
	return LFG(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFG) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFG) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFG) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFG) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFG) Value() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFG) SetValue(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFG) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFG) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFG) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFG) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// LFG_List is a list of LFG.
type LFG_List = capnp.StructList[LFG]

// NewLFG creates a new list of LFG.
func NewLFG_List(s *capnp.Segment, sz int32) (LFG_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[LFG](l), err
}

// LFG_Future is a wrapper for a LFG promised by a client call.
type LFG_Future struct{ *capnp.Future }

func (f LFG_Future) Struct() (LFG, error) {
	p, err := f.Future.Ptr()
	return LFG(p.Struct()), err
}

type LFGAppearance capnp.Struct

// LFGAppearance_TypeID is the unique identifier for the type LFGAppearance.
const LFGAppearance_TypeID = 0x88c6bb9459dd440d

func NewLFGAppearance(s *capnp.Segment) (LFGAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LFGAppearance(st), err
}

func NewRootLFGAppearance(s *capnp.Segment) (LFGAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return LFGAppearance(st), err
}

func ReadRootLFGAppearance(msg *capnp.Message) (LFGAppearance, error) {
	root, err := msg.Root()
	return LFGAppearance(root.Struct()), err
}

func (s LFGAppearance) String() string {
	str, _ := text.Marshal(0x88c6bb9459dd440d, capnp.Struct(s))
	return str
}

func (s LFGAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGAppearance) DecodeFromPtr(p capnp.Ptr) LFGAppearance {
	return LFGAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGAppearance) Lfg() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGAppearance) SetLfg(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// LFGAppearance_List is a list of LFGAppearance.
type LFGAppearance_List = capnp.StructList[LFGAppearance]

// NewLFGAppearance creates a new list of LFGAppearance.
func NewLFGAppearance_List(s *capnp.Segment, sz int32) (LFGAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[LFGAppearance](l), err
}

// LFGAppearance_Future is a wrapper for a LFGAppearance promised by a client call.
type LFGAppearance_Future struct{ *capnp.Future }

func (f LFGAppearance_Future) Struct() (LFGAppearance, error) {
	p, err := f.Future.Ptr()
	return LFGAppearance(p.Struct()), err
}

type TimeOfDay capnp.Struct

// TimeOfDay_TypeID is the unique identifier for the type TimeOfDay.
const TimeOfDay_TypeID = 0x873927d4562f9ba5

func NewTimeOfDay(s *capnp.Segment) (TimeOfDay, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TimeOfDay(st), err
}

func NewRootTimeOfDay(s *capnp.Segment) (TimeOfDay, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TimeOfDay(st), err
}

func ReadRootTimeOfDay(msg *capnp.Message) (TimeOfDay, error) {
	root, err := msg.Root()
	return TimeOfDay(root.Struct()), err
}

func (s TimeOfDay) String() string {
	str, _ := text.Marshal(0x873927d4562f9ba5, capnp.Struct(s))
	return str
}

func (s TimeOfDay) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeOfDay) DecodeFromPtr(p capnp.Ptr) TimeOfDay {
	return TimeOfDay(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeOfDay) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeOfDay) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeOfDay) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeOfDay) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeOfDay) Hour() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TimeOfDay) SetHour(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TimeOfDay) Minute() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TimeOfDay) SetMinute(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TimeOfDay) Day() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TimeOfDay) SetDay(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TimeOfDay) Month() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TimeOfDay) SetMonth(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TimeOfDay) Year() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TimeOfDay) SetYear(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// TimeOfDay_List is a list of TimeOfDay.
type TimeOfDay_List = capnp.StructList[TimeOfDay]

// NewTimeOfDay creates a new list of TimeOfDay.
func NewTimeOfDay_List(s *capnp.Segment, sz int32) (TimeOfDay_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[TimeOfDay](l), err
}

// TimeOfDay_Future is a wrapper for a TimeOfDay promised by a client call.
type TimeOfDay_Future struct{ *capnp.Future }

func (f TimeOfDay_Future) Struct() (TimeOfDay, error) {
	p, err := f.Future.Ptr()
	return TimeOfDay(p.Struct()), err
}

type MerchantClick capnp.Struct

// MerchantClick_TypeID is the unique identifier for the type MerchantClick.
const MerchantClick_TypeID = 0xf19df04c8f59f3a6

func NewMerchantClick(s *capnp.Segment) (MerchantClick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantClick(st), err
}

func NewRootMerchantClick(s *capnp.Segment) (MerchantClick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantClick(st), err
}

func ReadRootMerchantClick(msg *capnp.Message) (MerchantClick, error) {
	root, err := msg.Root()
	return MerchantClick(root.Struct()), err
}

func (s MerchantClick) String() string {
	str, _ := text.Marshal(0xf19df04c8f59f3a6, capnp.Struct(s))
	return str
}

func (s MerchantClick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantClick) DecodeFromPtr(p capnp.Ptr) MerchantClick {
	return MerchantClick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantClick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantClick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantClick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantClick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantClick) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantClick) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantClick) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantClick) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantClick) Command() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantClick) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantClick) Rate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s MerchantClick) SetRate(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// MerchantClick_List is a list of MerchantClick.
type MerchantClick_List = capnp.StructList[MerchantClick]

// NewMerchantClick creates a new list of MerchantClick.
func NewMerchantClick_List(s *capnp.Segment, sz int32) (MerchantClick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantClick](l), err
}

// MerchantClick_Future is a wrapper for a MerchantClick promised by a client call.
type MerchantClick_Future struct{ *capnp.Future }

func (f MerchantClick_Future) Struct() (MerchantClick, error) {
	p, err := f.Future.Ptr()
	return MerchantClick(p.Struct()), err
}

type MerchantSell capnp.Struct

// MerchantSell_TypeID is the unique identifier for the type MerchantSell.
const MerchantSell_TypeID = 0xd3bb2f7cf3a77db4

func NewMerchantSell(s *capnp.Segment) (MerchantSell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MerchantSell(st), err
}

func NewRootMerchantSell(s *capnp.Segment) (MerchantSell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return MerchantSell(st), err
}

func ReadRootMerchantSell(msg *capnp.Message) (MerchantSell, error) {
	root, err := msg.Root()
	return MerchantSell(root.Struct()), err
}

func (s MerchantSell) String() string {
	str, _ := text.Marshal(0xd3bb2f7cf3a77db4, capnp.Struct(s))
	return str
}

func (s MerchantSell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantSell) DecodeFromPtr(p capnp.Ptr) MerchantSell {
	return MerchantSell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantSell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantSell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantSell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantSell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantSell) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantSell) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantSell) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantSell) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantSell) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantSell) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantSell) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MerchantSell) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MerchantSell) Price() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MerchantSell) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// MerchantSell_List is a list of MerchantSell.
type MerchantSell_List = capnp.StructList[MerchantSell]

// NewMerchantSell creates a new list of MerchantSell.
func NewMerchantSell_List(s *capnp.Segment, sz int32) (MerchantSell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[MerchantSell](l), err
}

// MerchantSell_Future is a wrapper for a MerchantSell promised by a client call.
type MerchantSell_Future struct{ *capnp.Future }

func (f MerchantSell_Future) Struct() (MerchantSell, error) {
	p, err := f.Future.Ptr()
	return MerchantSell(p.Struct()), err
}

type MerchantPurchase capnp.Struct

// MerchantPurchase_TypeID is the unique identifier for the type MerchantPurchase.
const MerchantPurchase_TypeID = 0xc8d069bf9cf2487f

func NewMerchantPurchase(s *capnp.Segment) (MerchantPurchase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantPurchase(st), err
}

func NewRootMerchantPurchase(s *capnp.Segment) (MerchantPurchase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantPurchase(st), err
}

func ReadRootMerchantPurchase(msg *capnp.Message) (MerchantPurchase, error) {
	root, err := msg.Root()
	return MerchantPurchase(root.Struct()), err
}

func (s MerchantPurchase) String() string {
	str, _ := text.Marshal(0xc8d069bf9cf2487f, capnp.Struct(s))
	return str
}

func (s MerchantPurchase) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantPurchase) DecodeFromPtr(p capnp.Ptr) MerchantPurchase {
	return MerchantPurchase(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantPurchase) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantPurchase) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantPurchase) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantPurchase) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantPurchase) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantPurchase) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantPurchase) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantPurchase) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantPurchase) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantPurchase) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MerchantPurchase) Price() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MerchantPurchase) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MerchantPurchase_List is a list of MerchantPurchase.
type MerchantPurchase_List = capnp.StructList[MerchantPurchase]

// NewMerchantPurchase creates a new list of MerchantPurchase.
func NewMerchantPurchase_List(s *capnp.Segment, sz int32) (MerchantPurchase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantPurchase](l), err
}

// MerchantPurchase_Future is a wrapper for a MerchantPurchase promised by a client call.
type MerchantPurchase_Future struct{ *capnp.Future }

func (f MerchantPurchase_Future) Struct() (MerchantPurchase, error) {
	p, err := f.Future.Ptr()
	return MerchantPurchase(p.Struct()), err
}

type MerchantDelItem capnp.Struct

// MerchantDelItem_TypeID is the unique identifier for the type MerchantDelItem.
const MerchantDelItem_TypeID = 0x91cbe70d9e0d9cee

func NewMerchantDelItem(s *capnp.Segment) (MerchantDelItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantDelItem(st), err
}

func NewRootMerchantDelItem(s *capnp.Segment) (MerchantDelItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantDelItem(st), err
}

func ReadRootMerchantDelItem(msg *capnp.Message) (MerchantDelItem, error) {
	root, err := msg.Root()
	return MerchantDelItem(root.Struct()), err
}

func (s MerchantDelItem) String() string {
	str, _ := text.Marshal(0x91cbe70d9e0d9cee, capnp.Struct(s))
	return str
}

func (s MerchantDelItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantDelItem) DecodeFromPtr(p capnp.Ptr) MerchantDelItem {
	return MerchantDelItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantDelItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantDelItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantDelItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantDelItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantDelItem) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantDelItem) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantDelItem) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantDelItem) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantDelItem) Itemslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantDelItem) SetItemslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MerchantDelItem_List is a list of MerchantDelItem.
type MerchantDelItem_List = capnp.StructList[MerchantDelItem]

// NewMerchantDelItem creates a new list of MerchantDelItem.
func NewMerchantDelItem_List(s *capnp.Segment, sz int32) (MerchantDelItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantDelItem](l), err
}

// MerchantDelItem_Future is a wrapper for a MerchantDelItem promised by a client call.
type MerchantDelItem_Future struct{ *capnp.Future }

func (f MerchantDelItem_Future) Struct() (MerchantDelItem, error) {
	p, err := f.Future.Ptr()
	return MerchantDelItem(p.Struct()), err
}

type AdventurePurchase capnp.Struct

// AdventurePurchase_TypeID is the unique identifier for the type AdventurePurchase.
const AdventurePurchase_TypeID = 0xedae9d3a84825876

func NewAdventurePurchase(s *capnp.Segment) (AdventurePurchase, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventurePurchase(st), err
}

func NewRootAdventurePurchase(s *capnp.Segment) (AdventurePurchase, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventurePurchase(st), err
}

func ReadRootAdventurePurchase(msg *capnp.Message) (AdventurePurchase, error) {
	root, err := msg.Root()
	return AdventurePurchase(root.Struct()), err
}

func (s AdventurePurchase) String() string {
	str, _ := text.Marshal(0xedae9d3a84825876, capnp.Struct(s))
	return str
}

func (s AdventurePurchase) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventurePurchase) DecodeFromPtr(p capnp.Ptr) AdventurePurchase {
	return AdventurePurchase(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventurePurchase) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventurePurchase) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventurePurchase) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventurePurchase) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventurePurchase) SomeFlag() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventurePurchase) SetSomeFlag(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventurePurchase) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventurePurchase) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventurePurchase) Itemid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventurePurchase) SetItemid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventurePurchase) Variable() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventurePurchase) SetVariable(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AdventurePurchase_List is a list of AdventurePurchase.
type AdventurePurchase_List = capnp.StructList[AdventurePurchase]

// NewAdventurePurchase creates a new list of AdventurePurchase.
func NewAdventurePurchase_List(s *capnp.Segment, sz int32) (AdventurePurchase_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AdventurePurchase](l), err
}

// AdventurePurchase_Future is a wrapper for a AdventurePurchase promised by a client call.
type AdventurePurchase_Future struct{ *capnp.Future }

func (f AdventurePurchase_Future) Struct() (AdventurePurchase, error) {
	p, err := f.Future.Ptr()
	return AdventurePurchase(p.Struct()), err
}

type AdventureSell capnp.Struct

// AdventureSell_TypeID is the unique identifier for the type AdventureSell.
const AdventureSell_TypeID = 0xcfe31aeeb9723e6b

func NewAdventureSell(s *capnp.Segment) (AdventureSell, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventureSell(st), err
}

func NewRootAdventureSell(s *capnp.Segment) (AdventureSell, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AdventureSell(st), err
}

func ReadRootAdventureSell(msg *capnp.Message) (AdventureSell, error) {
	root, err := msg.Root()
	return AdventureSell(root.Struct()), err
}

func (s AdventureSell) String() string {
	str, _ := text.Marshal(0xcfe31aeeb9723e6b, capnp.Struct(s))
	return str
}

func (s AdventureSell) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureSell) DecodeFromPtr(p capnp.Ptr) AdventureSell {
	return AdventureSell(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureSell) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureSell) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureSell) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureSell) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureSell) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureSell) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureSell) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureSell) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureSell) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureSell) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureSell) SellPrice() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventureSell) SetSellPrice(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AdventureSell_List is a list of AdventureSell.
type AdventureSell_List = capnp.StructList[AdventureSell]

// NewAdventureSell creates a new list of AdventureSell.
func NewAdventureSell_List(s *capnp.Segment, sz int32) (AdventureSell_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AdventureSell](l), err
}

// AdventureSell_Future is a wrapper for a AdventureSell promised by a client call.
type AdventureSell_Future struct{ *capnp.Future }

func (f AdventureSell_Future) Struct() (AdventureSell, error) {
	p, err := f.Future.Ptr()
	return AdventureSell(p.Struct()), err
}

type AdventurePointsUpdate capnp.Struct

// AdventurePointsUpdate_TypeID is the unique identifier for the type AdventurePointsUpdate.
const AdventurePointsUpdate_TypeID = 0x9f9c5384091d79ce

func NewAdventurePointsUpdate(s *capnp.Segment) (AdventurePointsUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return AdventurePointsUpdate(st), err
}

func NewRootAdventurePointsUpdate(s *capnp.Segment) (AdventurePointsUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return AdventurePointsUpdate(st), err
}

func ReadRootAdventurePointsUpdate(msg *capnp.Message) (AdventurePointsUpdate, error) {
	root, err := msg.Root()
	return AdventurePointsUpdate(root.Struct()), err
}

func (s AdventurePointsUpdate) String() string {
	str, _ := text.Marshal(0x9f9c5384091d79ce, capnp.Struct(s))
	return str
}

func (s AdventurePointsUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventurePointsUpdate) DecodeFromPtr(p capnp.Ptr) AdventurePointsUpdate {
	return AdventurePointsUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventurePointsUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventurePointsUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventurePointsUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventurePointsUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventurePointsUpdate) LdonAvailablePoints() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventurePointsUpdate) SetLdonAvailablePoints(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventurePointsUpdate) UnkownApu() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s AdventurePointsUpdate) HasUnkownApu() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventurePointsUpdate) SetUnkownApu(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUnkownApu sets the unkownApu field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AdventurePointsUpdate) NewUnkownApu(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s AdventurePointsUpdate) LdonGukPoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventurePointsUpdate) SetLdonGukPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventurePointsUpdate) LdonMirugalPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventurePointsUpdate) SetLdonMirugalPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventurePointsUpdate) LdonMistmoorePoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AdventurePointsUpdate) SetLdonMistmoorePoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AdventurePointsUpdate) LdonRujarkianPoints() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AdventurePointsUpdate) SetLdonRujarkianPoints(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AdventurePointsUpdate) LdonTakishPoints() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AdventurePointsUpdate) SetLdonTakishPoints(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// AdventurePointsUpdate_List is a list of AdventurePointsUpdate.
type AdventurePointsUpdate_List = capnp.StructList[AdventurePointsUpdate]

// NewAdventurePointsUpdate creates a new list of AdventurePointsUpdate.
func NewAdventurePointsUpdate_List(s *capnp.Segment, sz int32) (AdventurePointsUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[AdventurePointsUpdate](l), err
}

// AdventurePointsUpdate_Future is a wrapper for a AdventurePointsUpdate promised by a client call.
type AdventurePointsUpdate_Future struct{ *capnp.Future }

func (f AdventurePointsUpdate_Future) Struct() (AdventurePointsUpdate, error) {
	p, err := f.Future.Ptr()
	return AdventurePointsUpdate(p.Struct()), err
}

type AdventureFinish capnp.Struct

// AdventureFinish_TypeID is the unique identifier for the type AdventureFinish.
const AdventureFinish_TypeID = 0x91ab76ec9c2c1b6f

func NewAdventureFinish(s *capnp.Segment) (AdventureFinish, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureFinish(st), err
}

func NewRootAdventureFinish(s *capnp.Segment) (AdventureFinish, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureFinish(st), err
}

func ReadRootAdventureFinish(msg *capnp.Message) (AdventureFinish, error) {
	root, err := msg.Root()
	return AdventureFinish(root.Struct()), err
}

func (s AdventureFinish) String() string {
	str, _ := text.Marshal(0x91ab76ec9c2c1b6f, capnp.Struct(s))
	return str
}

func (s AdventureFinish) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureFinish) DecodeFromPtr(p capnp.Ptr) AdventureFinish {
	return AdventureFinish(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureFinish) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureFinish) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureFinish) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureFinish) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureFinish) WinLose() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureFinish) SetWinLose(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureFinish) Points() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureFinish) SetPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AdventureFinish_List is a list of AdventureFinish.
type AdventureFinish_List = capnp.StructList[AdventureFinish]

// NewAdventureFinish creates a new list of AdventureFinish.
func NewAdventureFinish_List(s *capnp.Segment, sz int32) (AdventureFinish_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureFinish](l), err
}

// AdventureFinish_Future is a wrapper for a AdventureFinish promised by a client call.
type AdventureFinish_Future struct{ *capnp.Future }

func (f AdventureFinish_Future) Struct() (AdventureFinish, error) {
	p, err := f.Future.Ptr()
	return AdventureFinish(p.Struct()), err
}

type AdventureRequest capnp.Struct

// AdventureRequest_TypeID is the unique identifier for the type AdventureRequest.
const AdventureRequest_TypeID = 0xd61435667434c9c3

func NewAdventureRequest(s *capnp.Segment) (AdventureRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureRequest(st), err
}

func NewRootAdventureRequest(s *capnp.Segment) (AdventureRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureRequest(st), err
}

func ReadRootAdventureRequest(msg *capnp.Message) (AdventureRequest, error) {
	root, err := msg.Root()
	return AdventureRequest(root.Struct()), err
}

func (s AdventureRequest) String() string {
	str, _ := text.Marshal(0xd61435667434c9c3, capnp.Struct(s))
	return str
}

func (s AdventureRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureRequest) DecodeFromPtr(p capnp.Ptr) AdventureRequest {
	return AdventureRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureRequest) Risk() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureRequest) SetRisk(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureRequest) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureRequest) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AdventureRequest_List is a list of AdventureRequest.
type AdventureRequest_List = capnp.StructList[AdventureRequest]

// NewAdventureRequest creates a new list of AdventureRequest.
func NewAdventureRequest_List(s *capnp.Segment, sz int32) (AdventureRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureRequest](l), err
}

// AdventureRequest_Future is a wrapper for a AdventureRequest promised by a client call.
type AdventureRequest_Future struct{ *capnp.Future }

func (f AdventureRequest_Future) Struct() (AdventureRequest, error) {
	p, err := f.Future.Ptr()
	return AdventureRequest(p.Struct()), err
}

type AdventureRequestResponse capnp.Struct

// AdventureRequestResponse_TypeID is the unique identifier for the type AdventureRequestResponse.
const AdventureRequestResponse_TypeID = 0xd801819fddc5173b

func NewAdventureRequestResponse(s *capnp.Segment) (AdventureRequestResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return AdventureRequestResponse(st), err
}

func NewRootAdventureRequestResponse(s *capnp.Segment) (AdventureRequestResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return AdventureRequestResponse(st), err
}

func ReadRootAdventureRequestResponse(msg *capnp.Message) (AdventureRequestResponse, error) {
	root, err := msg.Root()
	return AdventureRequestResponse(root.Struct()), err
}

func (s AdventureRequestResponse) String() string {
	str, _ := text.Marshal(0xd801819fddc5173b, capnp.Struct(s))
	return str
}

func (s AdventureRequestResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureRequestResponse) DecodeFromPtr(p capnp.Ptr) AdventureRequestResponse {
	return AdventureRequestResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureRequestResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureRequestResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureRequestResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureRequestResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureRequestResponse) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AdventureRequestResponse) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AdventureRequestResponse) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AdventureRequestResponse) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AdventureRequestResponse) Timetoenter() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureRequestResponse) SetTimetoenter(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AdventureRequestResponse) Timeleft() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AdventureRequestResponse) SetTimeleft(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AdventureRequestResponse) Risk() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AdventureRequestResponse) SetRisk(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AdventureRequestResponse) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s AdventureRequestResponse) SetX(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s AdventureRequestResponse) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s AdventureRequestResponse) SetY(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s AdventureRequestResponse) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s AdventureRequestResponse) SetZ(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s AdventureRequestResponse) Showcompass() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AdventureRequestResponse) SetShowcompass(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// AdventureRequestResponse_List is a list of AdventureRequestResponse.
type AdventureRequestResponse_List = capnp.StructList[AdventureRequestResponse]

// NewAdventureRequestResponse creates a new list of AdventureRequestResponse.
func NewAdventureRequestResponse_List(s *capnp.Segment, sz int32) (AdventureRequestResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return capnp.StructList[AdventureRequestResponse](l), err
}

// AdventureRequestResponse_Future is a wrapper for a AdventureRequestResponse promised by a client call.
type AdventureRequestResponse_Future struct{ *capnp.Future }

func (f AdventureRequestResponse_Future) Struct() (AdventureRequestResponse, error) {
	p, err := f.Future.Ptr()
	return AdventureRequestResponse(p.Struct()), err
}

type Illusion capnp.Struct

// Illusion_TypeID is the unique identifier for the type Illusion.
const Illusion_TypeID = 0xfffc6cb5879fa108

func NewIllusion(s *capnp.Segment) (Illusion, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Illusion(st), err
}

func NewRootIllusion(s *capnp.Segment) (Illusion, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Illusion(st), err
}

func ReadRootIllusion(msg *capnp.Message) (Illusion, error) {
	root, err := msg.Root()
	return Illusion(root.Struct()), err
}

func (s Illusion) String() string {
	str, _ := text.Marshal(0xfffc6cb5879fa108, capnp.Struct(s))
	return str
}

func (s Illusion) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Illusion) DecodeFromPtr(p capnp.Ptr) Illusion {
	return Illusion(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Illusion) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Illusion) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Illusion) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Illusion) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Illusion) Spawnid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Illusion) SetSpawnid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Illusion) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Illusion) HasCharname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Illusion) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Illusion) SetCharname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Illusion) Race() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Illusion) SetRace(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Illusion) Gender() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Illusion) SetGender(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Illusion) Texture() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Illusion) SetTexture(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Illusion) Helmtexture() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Illusion) SetHelmtexture(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Illusion) Face() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Illusion) SetFace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Illusion) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Illusion) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Illusion) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Illusion) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Illusion) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Illusion) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Illusion) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Illusion) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Illusion) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s Illusion) SetSize(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

// Illusion_List is a list of Illusion.
type Illusion_List = capnp.StructList[Illusion]

// NewIllusion creates a new list of Illusion.
func NewIllusion_List(s *capnp.Segment, sz int32) (Illusion_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Illusion](l), err
}

// Illusion_Future is a wrapper for a Illusion promised by a client call.
type Illusion_Future struct{ *capnp.Future }

func (f Illusion_Future) Struct() (Illusion, error) {
	p, err := f.Future.Ptr()
	return Illusion(p.Struct()), err
}

type SkillUpdate capnp.Struct

// SkillUpdate_TypeID is the unique identifier for the type SkillUpdate.
const SkillUpdate_TypeID = 0xdaac54598edab4df

func NewSkillUpdate(s *capnp.Segment) (SkillUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SkillUpdate(st), err
}

func NewRootSkillUpdate(s *capnp.Segment) (SkillUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SkillUpdate(st), err
}

func ReadRootSkillUpdate(msg *capnp.Message) (SkillUpdate, error) {
	root, err := msg.Root()
	return SkillUpdate(root.Struct()), err
}

func (s SkillUpdate) String() string {
	str, _ := text.Marshal(0xdaac54598edab4df, capnp.Struct(s))
	return str
}

func (s SkillUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SkillUpdate) DecodeFromPtr(p capnp.Ptr) SkillUpdate {
	return SkillUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SkillUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SkillUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SkillUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SkillUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SkillUpdate) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SkillUpdate) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SkillUpdate) Value() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SkillUpdate) SetValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SkillUpdate_List is a list of SkillUpdate.
type SkillUpdate_List = capnp.StructList[SkillUpdate]

// NewSkillUpdate creates a new list of SkillUpdate.
func NewSkillUpdate_List(s *capnp.Segment, sz int32) (SkillUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SkillUpdate](l), err
}

// SkillUpdate_Future is a wrapper for a SkillUpdate promised by a client call.
type SkillUpdate_Future struct{ *capnp.Future }

func (f SkillUpdate_Future) Struct() (SkillUpdate, error) {
	p, err := f.Future.Ptr()
	return SkillUpdate(p.Struct()), err
}

type ZoneUnavail capnp.Struct

// ZoneUnavail_TypeID is the unique identifier for the type ZoneUnavail.
const ZoneUnavail_TypeID = 0xcafb4dbd23ee299c

func NewZoneUnavail(s *capnp.Segment) (ZoneUnavail, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneUnavail(st), err
}

func NewRootZoneUnavail(s *capnp.Segment) (ZoneUnavail, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneUnavail(st), err
}

func ReadRootZoneUnavail(msg *capnp.Message) (ZoneUnavail, error) {
	root, err := msg.Root()
	return ZoneUnavail(root.Struct()), err
}

func (s ZoneUnavail) String() string {
	str, _ := text.Marshal(0xcafb4dbd23ee299c, capnp.Struct(s))
	return str
}

func (s ZoneUnavail) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneUnavail) DecodeFromPtr(p capnp.Ptr) ZoneUnavail {
	return ZoneUnavail(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneUnavail) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneUnavail) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneUnavail) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneUnavail) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneUnavail) Zonename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneUnavail) HasZonename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneUnavail) ZonenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneUnavail) SetZonename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ZoneUnavail_List is a list of ZoneUnavail.
type ZoneUnavail_List = capnp.StructList[ZoneUnavail]

// NewZoneUnavail creates a new list of ZoneUnavail.
func NewZoneUnavail_List(s *capnp.Segment, sz int32) (ZoneUnavail_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ZoneUnavail](l), err
}

// ZoneUnavail_Future is a wrapper for a ZoneUnavail promised by a client call.
type ZoneUnavail_Future struct{ *capnp.Future }

func (f ZoneUnavail_Future) Struct() (ZoneUnavail, error) {
	p, err := f.Future.Ptr()
	return ZoneUnavail(p.Struct()), err
}

type GroupGeneric capnp.Struct

// GroupGeneric_TypeID is the unique identifier for the type GroupGeneric.
const GroupGeneric_TypeID = 0xba8fb8d4d5b15836

func NewGroupGeneric(s *capnp.Segment) (GroupGeneric, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupGeneric(st), err
}

func NewRootGroupGeneric(s *capnp.Segment) (GroupGeneric, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupGeneric(st), err
}

func ReadRootGroupGeneric(msg *capnp.Message) (GroupGeneric, error) {
	root, err := msg.Root()
	return GroupGeneric(root.Struct()), err
}

func (s GroupGeneric) String() string {
	str, _ := text.Marshal(0xba8fb8d4d5b15836, capnp.Struct(s))
	return str
}

func (s GroupGeneric) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupGeneric) DecodeFromPtr(p capnp.Ptr) GroupGeneric {
	return GroupGeneric(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupGeneric) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupGeneric) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupGeneric) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupGeneric) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupGeneric) Name1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupGeneric) HasName1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupGeneric) Name1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupGeneric) SetName1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupGeneric) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupGeneric) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupGeneric) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupGeneric) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupGeneric_List is a list of GroupGeneric.
type GroupGeneric_List = capnp.StructList[GroupGeneric]

// NewGroupGeneric creates a new list of GroupGeneric.
func NewGroupGeneric_List(s *capnp.Segment, sz int32) (GroupGeneric_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GroupGeneric](l), err
}

// GroupGeneric_Future is a wrapper for a GroupGeneric promised by a client call.
type GroupGeneric_Future struct{ *capnp.Future }

func (f GroupGeneric_Future) Struct() (GroupGeneric, error) {
	p, err := f.Future.Ptr()
	return GroupGeneric(p.Struct()), err
}

type GroupCancel capnp.Struct

// GroupCancel_TypeID is the unique identifier for the type GroupCancel.
const GroupCancel_TypeID = 0x9b4767b704c3f415

func NewGroupCancel(s *capnp.Segment) (GroupCancel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupCancel(st), err
}

func NewRootGroupCancel(s *capnp.Segment) (GroupCancel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupCancel(st), err
}

func ReadRootGroupCancel(msg *capnp.Message) (GroupCancel, error) {
	root, err := msg.Root()
	return GroupCancel(root.Struct()), err
}

func (s GroupCancel) String() string {
	str, _ := text.Marshal(0x9b4767b704c3f415, capnp.Struct(s))
	return str
}

func (s GroupCancel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupCancel) DecodeFromPtr(p capnp.Ptr) GroupCancel {
	return GroupCancel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupCancel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupCancel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupCancel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupCancel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupCancel) Name1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupCancel) HasName1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupCancel) Name1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupCancel) SetName1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupCancel) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupCancel) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupCancel) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupCancel) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GroupCancel) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupCancel) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GroupCancel_List is a list of GroupCancel.
type GroupCancel_List = capnp.StructList[GroupCancel]

// NewGroupCancel creates a new list of GroupCancel.
func NewGroupCancel_List(s *capnp.Segment, sz int32) (GroupCancel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GroupCancel](l), err
}

// GroupCancel_Future is a wrapper for a GroupCancel promised by a client call.
type GroupCancel_Future struct{ *capnp.Future }

func (f GroupCancel_Future) Struct() (GroupCancel, error) {
	p, err := f.Future.Ptr()
	return GroupCancel(p.Struct()), err
}

type GroupUpdate capnp.Struct

// GroupUpdate_TypeID is the unique identifier for the type GroupUpdate.
const GroupUpdate_TypeID = 0xc6cfb8d85c850055

func NewGroupUpdate(s *capnp.Segment) (GroupUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GroupUpdate(st), err
}

func NewRootGroupUpdate(s *capnp.Segment) (GroupUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GroupUpdate(st), err
}

func ReadRootGroupUpdate(msg *capnp.Message) (GroupUpdate, error) {
	root, err := msg.Root()
	return GroupUpdate(root.Struct()), err
}

func (s GroupUpdate) String() string {
	str, _ := text.Marshal(0xc6cfb8d85c850055, capnp.Struct(s))
	return str
}

func (s GroupUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupUpdate) DecodeFromPtr(p capnp.Ptr) GroupUpdate {
	return GroupUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupUpdate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupUpdate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupUpdate) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupUpdate) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupUpdate) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupUpdate) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupUpdate) Membername() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return StringList_List(p.List()), err
}

func (s GroupUpdate) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupUpdate) SetMembername(v StringList_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembername sets the membername field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GroupUpdate) NewMembername(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GroupUpdate) Leadersname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GroupUpdate) HasLeadersname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GroupUpdate) LeadersnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GroupUpdate) SetLeadersname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GroupUpdate_List is a list of GroupUpdate.
type GroupUpdate_List = capnp.StructList[GroupUpdate]

// NewGroupUpdate creates a new list of GroupUpdate.
func NewGroupUpdate_List(s *capnp.Segment, sz int32) (GroupUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[GroupUpdate](l), err
}

// GroupUpdate_Future is a wrapper for a GroupUpdate promised by a client call.
type GroupUpdate_Future struct{ *capnp.Future }

func (f GroupUpdate_Future) Struct() (GroupUpdate, error) {
	p, err := f.Future.Ptr()
	return GroupUpdate(p.Struct()), err
}

type GroupUpdate2 capnp.Struct

// GroupUpdate2_TypeID is the unique identifier for the type GroupUpdate2.
const GroupUpdate2_TypeID = 0xd1052d0564f25e0d

func NewGroupUpdate2(s *capnp.Segment) (GroupUpdate2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return GroupUpdate2(st), err
}

func NewRootGroupUpdate2(s *capnp.Segment) (GroupUpdate2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return GroupUpdate2(st), err
}

func ReadRootGroupUpdate2(msg *capnp.Message) (GroupUpdate2, error) {
	root, err := msg.Root()
	return GroupUpdate2(root.Struct()), err
}

func (s GroupUpdate2) String() string {
	str, _ := text.Marshal(0xd1052d0564f25e0d, capnp.Struct(s))
	return str
}

func (s GroupUpdate2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupUpdate2) DecodeFromPtr(p capnp.Ptr) GroupUpdate2 {
	return GroupUpdate2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupUpdate2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupUpdate2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupUpdate2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupUpdate2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupUpdate2) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupUpdate2) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupUpdate2) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupUpdate2) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupUpdate2) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupUpdate2) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupUpdate2) Membername() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return StringList_List(p.List()), err
}

func (s GroupUpdate2) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupUpdate2) SetMembername(v StringList_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembername sets the membername field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s GroupUpdate2) NewMembername(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GroupUpdate2) Leadersname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GroupUpdate2) HasLeadersname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GroupUpdate2) LeadersnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GroupUpdate2) SetLeadersname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GroupUpdate2) LeaderAas() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return GroupLeadershipAA(p.Struct()), err
}

func (s GroupUpdate2) HasLeaderAas() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GroupUpdate2) SetLeaderAas(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewLeaderAas sets the leaderAas field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s GroupUpdate2) NewLeaderAas() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GroupUpdate2_List is a list of GroupUpdate2.
type GroupUpdate2_List = capnp.StructList[GroupUpdate2]

// NewGroupUpdate2 creates a new list of GroupUpdate2.
func NewGroupUpdate2_List(s *capnp.Segment, sz int32) (GroupUpdate2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[GroupUpdate2](l), err
}

// GroupUpdate2_Future is a wrapper for a GroupUpdate2 promised by a client call.
type GroupUpdate2_Future struct{ *capnp.Future }

func (f GroupUpdate2_Future) Struct() (GroupUpdate2, error) {
	p, err := f.Future.Ptr()
	return GroupUpdate2(p.Struct()), err
}
func (p GroupUpdate2_Future) LeaderAas() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(3, nil)}
}

type GroupJoin capnp.Struct

// GroupJoin_TypeID is the unique identifier for the type GroupJoin.
const GroupJoin_TypeID = 0x880f6cbde51358e0

func NewGroupJoin(s *capnp.Segment) (GroupJoin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupJoin(st), err
}

func NewRootGroupJoin(s *capnp.Segment) (GroupJoin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GroupJoin(st), err
}

func ReadRootGroupJoin(msg *capnp.Message) (GroupJoin, error) {
	root, err := msg.Root()
	return GroupJoin(root.Struct()), err
}

func (s GroupJoin) String() string {
	str, _ := text.Marshal(0x880f6cbde51358e0, capnp.Struct(s))
	return str
}

func (s GroupJoin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupJoin) DecodeFromPtr(p capnp.Ptr) GroupJoin {
	return GroupJoin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupJoin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupJoin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupJoin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupJoin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupJoin) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GroupJoin) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GroupJoin) Yourname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupJoin) HasYourname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupJoin) YournameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupJoin) SetYourname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupJoin) Membername() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupJoin) HasMembername() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupJoin) MembernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupJoin) SetMembername(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupJoin_List is a list of GroupJoin.
type GroupJoin_List = capnp.StructList[GroupJoin]

// NewGroupJoin creates a new list of GroupJoin.
func NewGroupJoin_List(s *capnp.Segment, sz int32) (GroupJoin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GroupJoin](l), err
}

// GroupJoin_Future is a wrapper for a GroupJoin promised by a client call.
type GroupJoin_Future struct{ *capnp.Future }

func (f GroupJoin_Future) Struct() (GroupJoin, error) {
	p, err := f.Future.Ptr()
	return GroupJoin(p.Struct()), err
}

type FaceChange capnp.Struct

// FaceChange_TypeID is the unique identifier for the type FaceChange.
const FaceChange_TypeID = 0xd8b98b1d67fe28a2

func NewFaceChange(s *capnp.Segment) (FaceChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return FaceChange(st), err
}

func NewRootFaceChange(s *capnp.Segment) (FaceChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return FaceChange(st), err
}

func ReadRootFaceChange(msg *capnp.Message) (FaceChange, error) {
	root, err := msg.Root()
	return FaceChange(root.Struct()), err
}

func (s FaceChange) String() string {
	str, _ := text.Marshal(0xd8b98b1d67fe28a2, capnp.Struct(s))
	return str
}

func (s FaceChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FaceChange) DecodeFromPtr(p capnp.Ptr) FaceChange {
	return FaceChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FaceChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FaceChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FaceChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FaceChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FaceChange) Haircolor() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FaceChange) SetHaircolor(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FaceChange) Beardcolor() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FaceChange) SetBeardcolor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s FaceChange) Eyecolor1() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s FaceChange) SetEyecolor1(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s FaceChange) Eyecolor2() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s FaceChange) SetEyecolor2(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s FaceChange) Hairstyle() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s FaceChange) SetHairstyle(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s FaceChange) Beard() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s FaceChange) SetBeard(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s FaceChange) Face() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s FaceChange) SetFace(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// FaceChange_List is a list of FaceChange.
type FaceChange_List = capnp.StructList[FaceChange]

// NewFaceChange creates a new list of FaceChange.
func NewFaceChange_List(s *capnp.Segment, sz int32) (FaceChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[FaceChange](l), err
}

// FaceChange_Future is a wrapper for a FaceChange promised by a client call.
type FaceChange_Future struct{ *capnp.Future }

func (f FaceChange_Future) Struct() (FaceChange, error) {
	p, err := f.Future.Ptr()
	return FaceChange(p.Struct()), err
}

type TradeRequest capnp.Struct

// TradeRequest_TypeID is the unique identifier for the type TradeRequest.
const TradeRequest_TypeID = 0xdbc10a1e045d6bed

func NewTradeRequest(s *capnp.Segment) (TradeRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeRequest(st), err
}

func NewRootTradeRequest(s *capnp.Segment) (TradeRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeRequest(st), err
}

func ReadRootTradeRequest(msg *capnp.Message) (TradeRequest, error) {
	root, err := msg.Root()
	return TradeRequest(root.Struct()), err
}

func (s TradeRequest) String() string {
	str, _ := text.Marshal(0xdbc10a1e045d6bed, capnp.Struct(s))
	return str
}

func (s TradeRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeRequest) DecodeFromPtr(p capnp.Ptr) TradeRequest {
	return TradeRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeRequest) ToMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeRequest) SetToMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeRequest) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeRequest) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TradeRequest_List is a list of TradeRequest.
type TradeRequest_List = capnp.StructList[TradeRequest]

// NewTradeRequest creates a new list of TradeRequest.
func NewTradeRequest_List(s *capnp.Segment, sz int32) (TradeRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeRequest](l), err
}

// TradeRequest_Future is a wrapper for a TradeRequest promised by a client call.
type TradeRequest_Future struct{ *capnp.Future }

func (f TradeRequest_Future) Struct() (TradeRequest, error) {
	p, err := f.Future.Ptr()
	return TradeRequest(p.Struct()), err
}

type TradeAccept capnp.Struct

// TradeAccept_TypeID is the unique identifier for the type TradeAccept.
const TradeAccept_TypeID = 0xfa5626b7b9dcd44b

func NewTradeAccept(s *capnp.Segment) (TradeAccept, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeAccept(st), err
}

func NewRootTradeAccept(s *capnp.Segment) (TradeAccept, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TradeAccept(st), err
}

func ReadRootTradeAccept(msg *capnp.Message) (TradeAccept, error) {
	root, err := msg.Root()
	return TradeAccept(root.Struct()), err
}

func (s TradeAccept) String() string {
	str, _ := text.Marshal(0xfa5626b7b9dcd44b, capnp.Struct(s))
	return str
}

func (s TradeAccept) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeAccept) DecodeFromPtr(p capnp.Ptr) TradeAccept {
	return TradeAccept(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeAccept) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeAccept) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeAccept) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeAccept) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeAccept) FromMobId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeAccept) SetFromMobId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// TradeAccept_List is a list of TradeAccept.
type TradeAccept_List = capnp.StructList[TradeAccept]

// NewTradeAccept creates a new list of TradeAccept.
func NewTradeAccept_List(s *capnp.Segment, sz int32) (TradeAccept_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TradeAccept](l), err
}

// TradeAccept_Future is a wrapper for a TradeAccept promised by a client call.
type TradeAccept_Future struct{ *capnp.Future }

func (f TradeAccept_Future) Struct() (TradeAccept, error) {
	p, err := f.Future.Ptr()
	return TradeAccept(p.Struct()), err
}

type CancelTrade capnp.Struct

// CancelTrade_TypeID is the unique identifier for the type CancelTrade.
const CancelTrade_TypeID = 0xb7f9da429e0872e9

func NewCancelTrade(s *capnp.Segment) (CancelTrade, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CancelTrade(st), err
}

func NewRootCancelTrade(s *capnp.Segment) (CancelTrade, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CancelTrade(st), err
}

func ReadRootCancelTrade(msg *capnp.Message) (CancelTrade, error) {
	root, err := msg.Root()
	return CancelTrade(root.Struct()), err
}

func (s CancelTrade) String() string {
	str, _ := text.Marshal(0xb7f9da429e0872e9, capnp.Struct(s))
	return str
}

func (s CancelTrade) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CancelTrade) DecodeFromPtr(p capnp.Ptr) CancelTrade {
	return CancelTrade(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CancelTrade) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CancelTrade) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CancelTrade) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CancelTrade) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CancelTrade) Fromid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CancelTrade) SetFromid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CancelTrade) Action() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CancelTrade) SetAction(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// CancelTrade_List is a list of CancelTrade.
type CancelTrade_List = capnp.StructList[CancelTrade]

// NewCancelTrade creates a new list of CancelTrade.
func NewCancelTrade_List(s *capnp.Segment, sz int32) (CancelTrade_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CancelTrade](l), err
}

// CancelTrade_Future is a wrapper for a CancelTrade promised by a client call.
type CancelTrade_Future struct{ *capnp.Future }

func (f CancelTrade_Future) Struct() (CancelTrade, error) {
	p, err := f.Future.Ptr()
	return CancelTrade(p.Struct()), err
}

type PetitionUpdate capnp.Struct

// PetitionUpdate_TypeID is the unique identifier for the type PetitionUpdate.
const PetitionUpdate_TypeID = 0xfab5a20f1d337f75

func NewPetitionUpdate(s *capnp.Segment) (PetitionUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return PetitionUpdate(st), err
}

func NewRootPetitionUpdate(s *capnp.Segment) (PetitionUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return PetitionUpdate(st), err
}

func ReadRootPetitionUpdate(msg *capnp.Message) (PetitionUpdate, error) {
	root, err := msg.Root()
	return PetitionUpdate(root.Struct()), err
}

func (s PetitionUpdate) String() string {
	str, _ := text.Marshal(0xfab5a20f1d337f75, capnp.Struct(s))
	return str
}

func (s PetitionUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PetitionUpdate) DecodeFromPtr(p capnp.Ptr) PetitionUpdate {
	return PetitionUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PetitionUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PetitionUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PetitionUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PetitionUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PetitionUpdate) Petnumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PetitionUpdate) SetPetnumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PetitionUpdate) Color() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PetitionUpdate) SetColor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PetitionUpdate) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PetitionUpdate) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PetitionUpdate) Senttime() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PetitionUpdate) SetSenttime(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PetitionUpdate) Accountid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PetitionUpdate) HasAccountid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PetitionUpdate) AccountidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetAccountid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s PetitionUpdate) Gmsenttoo() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s PetitionUpdate) HasGmsenttoo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PetitionUpdate) GmsenttooBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetGmsenttoo(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s PetitionUpdate) Quetotal() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PetitionUpdate) SetQuetotal(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PetitionUpdate) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s PetitionUpdate) HasCharname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s PetitionUpdate) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s PetitionUpdate) SetCharname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// PetitionUpdate_List is a list of PetitionUpdate.
type PetitionUpdate_List = capnp.StructList[PetitionUpdate]

// NewPetitionUpdate creates a new list of PetitionUpdate.
func NewPetitionUpdate_List(s *capnp.Segment, sz int32) (PetitionUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[PetitionUpdate](l), err
}

// PetitionUpdate_Future is a wrapper for a PetitionUpdate promised by a client call.
type PetitionUpdate_Future struct{ *capnp.Future }

func (f PetitionUpdate_Future) Struct() (PetitionUpdate, error) {
	p, err := f.Future.Ptr()
	return PetitionUpdate(p.Struct()), err
}

type Petition capnp.Struct

// Petition_TypeID is the unique identifier for the type Petition.
const Petition_TypeID = 0x87d72af46493bddd

func NewPetition(s *capnp.Segment) (Petition, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return Petition(st), err
}

func NewRootPetition(s *capnp.Segment) (Petition, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return Petition(st), err
}

func ReadRootPetition(msg *capnp.Message) (Petition, error) {
	root, err := msg.Root()
	return Petition(root.Struct()), err
}

func (s Petition) String() string {
	str, _ := text.Marshal(0x87d72af46493bddd, capnp.Struct(s))
	return str
}

func (s Petition) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Petition) DecodeFromPtr(p capnp.Ptr) Petition {
	return Petition(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Petition) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Petition) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Petition) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Petition) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Petition) Petnumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Petition) SetPetnumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Petition) Urgency() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Petition) SetUrgency(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Petition) Accountid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Petition) HasAccountid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Petition) AccountidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Petition) SetAccountid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Petition) Lastgm() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Petition) HasLastgm() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Petition) LastgmBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Petition) SetLastgm(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Petition) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Petition) SetZone(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Petition) Charname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Petition) HasCharname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Petition) CharnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Petition) SetCharname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Petition) Charlevel() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Petition) SetCharlevel(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s Petition) Charclass() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Petition) SetCharclass(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Petition) Charrace() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Petition) SetCharrace(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Petition) Checkouts() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Petition) SetCheckouts(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Petition) Unavail() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Petition) SetUnavail(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Petition) Senttime() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Petition) SetSenttime(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Petition) Petitiontext() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Petition) HasPetitiontext() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Petition) PetitiontextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Petition) SetPetitiontext(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Petition) Gmtext() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Petition) HasGmtext() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Petition) GmtextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Petition) SetGmtext(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// Petition_List is a list of Petition.
type Petition_List = capnp.StructList[Petition]

// NewPetition creates a new list of Petition.
func NewPetition_List(s *capnp.Segment, sz int32) (Petition_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5}, sz)
	return capnp.StructList[Petition](l), err
}

// Petition_Future is a wrapper for a Petition promised by a client call.
type Petition_Future struct{ *capnp.Future }

func (f Petition_Future) Struct() (Petition, error) {
	p, err := f.Future.Ptr()
	return Petition(p.Struct()), err
}

type WhoAll capnp.Struct

// WhoAll_TypeID is the unique identifier for the type WhoAll.
const WhoAll_TypeID = 0xb513764d5512a334

func NewWhoAll(s *capnp.Segment) (WhoAll, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return WhoAll(st), err
}

func NewRootWhoAll(s *capnp.Segment) (WhoAll, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return WhoAll(st), err
}

func ReadRootWhoAll(msg *capnp.Message) (WhoAll, error) {
	root, err := msg.Root()
	return WhoAll(root.Struct()), err
}

func (s WhoAll) String() string {
	str, _ := text.Marshal(0xb513764d5512a334, capnp.Struct(s))
	return str
}

func (s WhoAll) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAll) DecodeFromPtr(p capnp.Ptr) WhoAll {
	return WhoAll(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAll) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAll) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAll) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAll) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAll) Whom() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAll) HasWhom() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAll) WhomBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAll) SetWhom(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAll) Wrace() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAll) SetWrace(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAll) Wclass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAll) SetWclass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAll) Lvllow() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAll) SetLvllow(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAll) Lvlhigh() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAll) SetLvlhigh(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAll) Gmlookup() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s WhoAll) SetGmlookup(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// WhoAll_List is a list of WhoAll.
type WhoAll_List = capnp.StructList[WhoAll]

// NewWhoAll creates a new list of WhoAll.
func NewWhoAll_List(s *capnp.Segment, sz int32) (WhoAll_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[WhoAll](l), err
}

// WhoAll_Future is a wrapper for a WhoAll promised by a client call.
type WhoAll_Future struct{ *capnp.Future }

func (f WhoAll_Future) Struct() (WhoAll, error) {
	p, err := f.Future.Ptr()
	return WhoAll(p.Struct()), err
}

type Stun capnp.Struct

// Stun_TypeID is the unique identifier for the type Stun.
const Stun_TypeID = 0x88007635e342bb94

func NewStun(s *capnp.Segment) (Stun, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stun(st), err
}

func NewRootStun(s *capnp.Segment) (Stun, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Stun(st), err
}

func ReadRootStun(msg *capnp.Message) (Stun, error) {
	root, err := msg.Root()
	return Stun(root.Struct()), err
}

func (s Stun) String() string {
	str, _ := text.Marshal(0x88007635e342bb94, capnp.Struct(s))
	return str
}

func (s Stun) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stun) DecodeFromPtr(p capnp.Ptr) Stun {
	return Stun(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stun) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stun) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stun) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stun) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stun) Duration() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Stun) SetDuration(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Stun_List is a list of Stun.
type Stun_List = capnp.StructList[Stun]

// NewStun creates a new list of Stun.
func NewStun_List(s *capnp.Segment, sz int32) (Stun_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Stun](l), err
}

// Stun_Future is a wrapper for a Stun promised by a client call.
type Stun_Future struct{ *capnp.Future }

func (f Stun_Future) Struct() (Stun, error) {
	p, err := f.Future.Ptr()
	return Stun(p.Struct()), err
}

type AugmentItem capnp.Struct

// AugmentItem_TypeID is the unique identifier for the type AugmentItem.
const AugmentItem_TypeID = 0xe5205955ce643ade

func NewAugmentItem(s *capnp.Segment) (AugmentItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AugmentItem(st), err
}

func NewRootAugmentItem(s *capnp.Segment) (AugmentItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AugmentItem(st), err
}

func ReadRootAugmentItem(msg *capnp.Message) (AugmentItem, error) {
	root, err := msg.Root()
	return AugmentItem(root.Struct()), err
}

func (s AugmentItem) String() string {
	str, _ := text.Marshal(0xe5205955ce643ade, capnp.Struct(s))
	return str
}

func (s AugmentItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AugmentItem) DecodeFromPtr(p capnp.Ptr) AugmentItem {
	return AugmentItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AugmentItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AugmentItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AugmentItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AugmentItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AugmentItem) ContainerSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AugmentItem) SetContainerSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AugmentItem) AugmentSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AugmentItem) SetAugmentSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AugmentItem_List is a list of AugmentItem.
type AugmentItem_List = capnp.StructList[AugmentItem]

// NewAugmentItem creates a new list of AugmentItem.
func NewAugmentItem_List(s *capnp.Segment, sz int32) (AugmentItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AugmentItem](l), err
}

// AugmentItem_Future is a wrapper for a AugmentItem promised by a client call.
type AugmentItem_Future struct{ *capnp.Future }

func (f AugmentItem_Future) Struct() (AugmentItem, error) {
	p, err := f.Future.Ptr()
	return AugmentItem(p.Struct()), err
}

type Emote capnp.Struct

// Emote_TypeID is the unique identifier for the type Emote.
const Emote_TypeID = 0xcff0b4cd24d99860

func NewEmote(s *capnp.Segment) (Emote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Emote(st), err
}

func NewRootEmote(s *capnp.Segment) (Emote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Emote(st), err
}

func ReadRootEmote(msg *capnp.Message) (Emote, error) {
	root, err := msg.Root()
	return Emote(root.Struct()), err
}

func (s Emote) String() string {
	str, _ := text.Marshal(0xcff0b4cd24d99860, capnp.Struct(s))
	return str
}

func (s Emote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Emote) DecodeFromPtr(p capnp.Ptr) Emote {
	return Emote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Emote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Emote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Emote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Emote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Emote) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Emote) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Emote) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Emote) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Emote_List is a list of Emote.
type Emote_List = capnp.StructList[Emote]

// NewEmote creates a new list of Emote.
func NewEmote_List(s *capnp.Segment, sz int32) (Emote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Emote](l), err
}

// Emote_Future is a wrapper for a Emote promised by a client call.
type Emote_Future struct{ *capnp.Future }

func (f Emote_Future) Struct() (Emote, error) {
	p, err := f.Future.Ptr()
	return Emote(p.Struct()), err
}

type Inspect capnp.Struct

// Inspect_TypeID is the unique identifier for the type Inspect.
const Inspect_TypeID = 0x8169b9320fb13d79

func NewInspect(s *capnp.Segment) (Inspect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Inspect(st), err
}

func NewRootInspect(s *capnp.Segment) (Inspect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Inspect(st), err
}

func ReadRootInspect(msg *capnp.Message) (Inspect, error) {
	root, err := msg.Root()
	return Inspect(root.Struct()), err
}

func (s Inspect) String() string {
	str, _ := text.Marshal(0x8169b9320fb13d79, capnp.Struct(s))
	return str
}

func (s Inspect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Inspect) DecodeFromPtr(p capnp.Ptr) Inspect {
	return Inspect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Inspect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Inspect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Inspect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Inspect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Inspect) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Inspect) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Inspect) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Inspect) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Inspect_List is a list of Inspect.
type Inspect_List = capnp.StructList[Inspect]

// NewInspect creates a new list of Inspect.
func NewInspect_List(s *capnp.Segment, sz int32) (Inspect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Inspect](l), err
}

// Inspect_Future is a wrapper for a Inspect promised by a client call.
type Inspect_Future struct{ *capnp.Future }

func (f Inspect_Future) Struct() (Inspect, error) {
	p, err := f.Future.Ptr()
	return Inspect(p.Struct()), err
}

type InspectResponse capnp.Struct

// InspectResponse_TypeID is the unique identifier for the type InspectResponse.
const InspectResponse_TypeID = 0x9f325734076f5253

func NewInspectResponse(s *capnp.Segment) (InspectResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InspectResponse(st), err
}

func NewRootInspectResponse(s *capnp.Segment) (InspectResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InspectResponse(st), err
}

func ReadRootInspectResponse(msg *capnp.Message) (InspectResponse, error) {
	root, err := msg.Root()
	return InspectResponse(root.Struct()), err
}

func (s InspectResponse) String() string {
	str, _ := text.Marshal(0x9f325734076f5253, capnp.Struct(s))
	return str
}

func (s InspectResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InspectResponse) DecodeFromPtr(p capnp.Ptr) InspectResponse {
	return InspectResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InspectResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InspectResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InspectResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InspectResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InspectResponse) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InspectResponse) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InspectResponse) Playerid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InspectResponse) SetPlayerid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InspectResponse) Itemnames() (StringList_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return StringList_List(p.List()), err
}

func (s InspectResponse) HasItemnames() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InspectResponse) SetItemnames(v StringList_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemnames sets the itemnames field to a newly
// allocated StringList_List, preferring placement in s's segment.
func (s InspectResponse) NewItemnames(n int32) (StringList_List, error) {
	l, err := NewStringList_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StringList_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s InspectResponse) Itemicons() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s InspectResponse) HasItemicons() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InspectResponse) SetItemicons(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItemicons sets the itemicons field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s InspectResponse) NewItemicons(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s InspectResponse) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s InspectResponse) HasText() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InspectResponse) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s InspectResponse) SetText(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// InspectResponse_List is a list of InspectResponse.
type InspectResponse_List = capnp.StructList[InspectResponse]

// NewInspectResponse creates a new list of InspectResponse.
func NewInspectResponse_List(s *capnp.Segment, sz int32) (InspectResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[InspectResponse](l), err
}

// InspectResponse_Future is a wrapper for a InspectResponse promised by a client call.
type InspectResponse_Future struct{ *capnp.Future }

func (f InspectResponse_Future) Struct() (InspectResponse, error) {
	p, err := f.Future.Ptr()
	return InspectResponse(p.Struct()), err
}

type SetDataRate capnp.Struct

// SetDataRate_TypeID is the unique identifier for the type SetDataRate.
const SetDataRate_TypeID = 0xe8dc5ddc1cdb5438

func NewSetDataRate(s *capnp.Segment) (SetDataRate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetDataRate(st), err
}

func NewRootSetDataRate(s *capnp.Segment) (SetDataRate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetDataRate(st), err
}

func ReadRootSetDataRate(msg *capnp.Message) (SetDataRate, error) {
	root, err := msg.Root()
	return SetDataRate(root.Struct()), err
}

func (s SetDataRate) String() string {
	str, _ := text.Marshal(0xe8dc5ddc1cdb5438, capnp.Struct(s))
	return str
}

func (s SetDataRate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetDataRate) DecodeFromPtr(p capnp.Ptr) SetDataRate {
	return SetDataRate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetDataRate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetDataRate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetDataRate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetDataRate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetDataRate) Newdatarate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s SetDataRate) SetNewdatarate(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// SetDataRate_List is a list of SetDataRate.
type SetDataRate_List = capnp.StructList[SetDataRate]

// NewSetDataRate creates a new list of SetDataRate.
func NewSetDataRate_List(s *capnp.Segment, sz int32) (SetDataRate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetDataRate](l), err
}

// SetDataRate_Future is a wrapper for a SetDataRate promised by a client call.
type SetDataRate_Future struct{ *capnp.Future }

func (f SetDataRate_Future) Struct() (SetDataRate, error) {
	p, err := f.Future.Ptr()
	return SetDataRate(p.Struct()), err
}

type SetServerFilter capnp.Struct

// SetServerFilter_TypeID is the unique identifier for the type SetServerFilter.
const SetServerFilter_TypeID = 0x8acccc8118bd1f80

func NewSetServerFilter(s *capnp.Segment) (SetServerFilter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilter(st), err
}

func NewRootSetServerFilter(s *capnp.Segment) (SetServerFilter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilter(st), err
}

func ReadRootSetServerFilter(msg *capnp.Message) (SetServerFilter, error) {
	root, err := msg.Root()
	return SetServerFilter(root.Struct()), err
}

func (s SetServerFilter) String() string {
	str, _ := text.Marshal(0x8acccc8118bd1f80, capnp.Struct(s))
	return str
}

func (s SetServerFilter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetServerFilter) DecodeFromPtr(p capnp.Ptr) SetServerFilter {
	return SetServerFilter(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetServerFilter) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetServerFilter) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetServerFilter) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetServerFilter) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetServerFilter) Filters() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s SetServerFilter) HasFilters() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetServerFilter) SetFilters(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFilters sets the filters field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s SetServerFilter) NewFilters(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SetServerFilter_List is a list of SetServerFilter.
type SetServerFilter_List = capnp.StructList[SetServerFilter]

// NewSetServerFilter creates a new list of SetServerFilter.
func NewSetServerFilter_List(s *capnp.Segment, sz int32) (SetServerFilter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SetServerFilter](l), err
}

// SetServerFilter_Future is a wrapper for a SetServerFilter promised by a client call.
type SetServerFilter_Future struct{ *capnp.Future }

func (f SetServerFilter_Future) Struct() (SetServerFilter, error) {
	p, err := f.Future.Ptr()
	return SetServerFilter(p.Struct()), err
}

type SetServerFilterAck capnp.Struct

// SetServerFilterAck_TypeID is the unique identifier for the type SetServerFilterAck.
const SetServerFilterAck_TypeID = 0xb2ea7b1704b448ca

func NewSetServerFilterAck(s *capnp.Segment) (SetServerFilterAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilterAck(st), err
}

func NewRootSetServerFilterAck(s *capnp.Segment) (SetServerFilterAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SetServerFilterAck(st), err
}

func ReadRootSetServerFilterAck(msg *capnp.Message) (SetServerFilterAck, error) {
	root, err := msg.Root()
	return SetServerFilterAck(root.Struct()), err
}

func (s SetServerFilterAck) String() string {
	str, _ := text.Marshal(0xb2ea7b1704b448ca, capnp.Struct(s))
	return str
}

func (s SetServerFilterAck) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetServerFilterAck) DecodeFromPtr(p capnp.Ptr) SetServerFilterAck {
	return SetServerFilterAck(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetServerFilterAck) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetServerFilterAck) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetServerFilterAck) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetServerFilterAck) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetServerFilterAck) Blank() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s SetServerFilterAck) HasBlank() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetServerFilterAck) SetBlank(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBlank sets the blank field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s SetServerFilterAck) NewBlank(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SetServerFilterAck_List is a list of SetServerFilterAck.
type SetServerFilterAck_List = capnp.StructList[SetServerFilterAck]

// NewSetServerFilterAck creates a new list of SetServerFilterAck.
func NewSetServerFilterAck_List(s *capnp.Segment, sz int32) (SetServerFilterAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SetServerFilterAck](l), err
}

// SetServerFilterAck_Future is a wrapper for a SetServerFilterAck promised by a client call.
type SetServerFilterAck_Future struct{ *capnp.Future }

func (f SetServerFilterAck_Future) Struct() (SetServerFilterAck, error) {
	p, err := f.Future.Ptr()
	return SetServerFilterAck(p.Struct()), err
}

type IncreaseStat capnp.Struct

// IncreaseStat_TypeID is the unique identifier for the type IncreaseStat.
const IncreaseStat_TypeID = 0xf1cccb02e7af0dd8

func NewIncreaseStat(s *capnp.Segment) (IncreaseStat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0})
	return IncreaseStat(st), err
}

func NewRootIncreaseStat(s *capnp.Segment) (IncreaseStat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0})
	return IncreaseStat(st), err
}

func ReadRootIncreaseStat(msg *capnp.Message) (IncreaseStat, error) {
	root, err := msg.Root()
	return IncreaseStat(root.Struct()), err
}

func (s IncreaseStat) String() string {
	str, _ := text.Marshal(0xf1cccb02e7af0dd8, capnp.Struct(s))
	return str
}

func (s IncreaseStat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (IncreaseStat) DecodeFromPtr(p capnp.Ptr) IncreaseStat {
	return IncreaseStat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s IncreaseStat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s IncreaseStat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s IncreaseStat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s IncreaseStat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s IncreaseStat) Str() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s IncreaseStat) SetStr(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s IncreaseStat) Sta() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s IncreaseStat) SetSta(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s IncreaseStat) Agi() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s IncreaseStat) SetAgi(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s IncreaseStat) Dex() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s IncreaseStat) SetDex(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s IncreaseStat) Int() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s IncreaseStat) SetInt(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s IncreaseStat) Wis() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s IncreaseStat) SetWis(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s IncreaseStat) Cha() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s IncreaseStat) SetCha(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s IncreaseStat) Fire() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s IncreaseStat) SetFire(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s IncreaseStat) Cold() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s IncreaseStat) SetCold(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s IncreaseStat) Magic() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s IncreaseStat) SetMagic(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s IncreaseStat) Poison() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s IncreaseStat) SetPoison(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s IncreaseStat) Disease() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s IncreaseStat) SetDisease(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s IncreaseStat) Str2() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s IncreaseStat) SetStr2(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s IncreaseStat) Sta2() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s IncreaseStat) SetSta2(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s IncreaseStat) Agi2() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s IncreaseStat) SetAgi2(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s IncreaseStat) Dex2() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s IncreaseStat) SetDex2(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s IncreaseStat) Int2() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s IncreaseStat) SetInt2(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s IncreaseStat) Wis2() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s IncreaseStat) SetWis2(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s IncreaseStat) Cha2() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s IncreaseStat) SetCha2(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s IncreaseStat) Fire2() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s IncreaseStat) SetFire2(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s IncreaseStat) Cold2() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s IncreaseStat) SetCold2(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s IncreaseStat) Magic2() int32 {
	return int32(capnp.Struct(s).Uint32(84))
}

func (s IncreaseStat) SetMagic2(v int32) {
	capnp.Struct(s).SetUint32(84, uint32(v))
}

func (s IncreaseStat) Poison2() int32 {
	return int32(capnp.Struct(s).Uint32(88))
}

func (s IncreaseStat) SetPoison2(v int32) {
	capnp.Struct(s).SetUint32(88, uint32(v))
}

func (s IncreaseStat) Disease2() int32 {
	return int32(capnp.Struct(s).Uint32(92))
}

func (s IncreaseStat) SetDisease2(v int32) {
	capnp.Struct(s).SetUint32(92, uint32(v))
}

// IncreaseStat_List is a list of IncreaseStat.
type IncreaseStat_List = capnp.StructList[IncreaseStat]

// NewIncreaseStat creates a new list of IncreaseStat.
func NewIncreaseStat_List(s *capnp.Segment, sz int32) (IncreaseStat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 96, PointerCount: 0}, sz)
	return capnp.StructList[IncreaseStat](l), err
}

// IncreaseStat_Future is a wrapper for a IncreaseStat promised by a client call.
type IncreaseStat_Future struct{ *capnp.Future }

func (f IncreaseStat_Future) Struct() (IncreaseStat, error) {
	p, err := f.Future.Ptr()
	return IncreaseStat(p.Struct()), err
}

type GMName capnp.Struct

// GMName_TypeID is the unique identifier for the type GMName.
const GMName_TypeID = 0x84ae33ececbdf2f2

func NewGMName(s *capnp.Segment) (GMName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GMName(st), err
}

func NewRootGMName(s *capnp.Segment) (GMName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return GMName(st), err
}

func ReadRootGMName(msg *capnp.Message) (GMName, error) {
	root, err := msg.Root()
	return GMName(root.Struct()), err
}

func (s GMName) String() string {
	str, _ := text.Marshal(0x84ae33ececbdf2f2, capnp.Struct(s))
	return str
}

func (s GMName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMName) DecodeFromPtr(p capnp.Ptr) GMName {
	return GMName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMName) Oldname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMName) HasOldname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMName) OldnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMName) SetOldname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMName) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMName) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMName) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMName) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GMName) Newname() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GMName) HasNewname() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GMName) NewnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GMName) SetNewname(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GMName) Badname() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMName) SetBadname(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GMName_List is a list of GMName.
type GMName_List = capnp.StructList[GMName]

// NewGMName creates a new list of GMName.
func NewGMName_List(s *capnp.Segment, sz int32) (GMName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[GMName](l), err
}

// GMName_Future is a wrapper for a GMName promised by a client call.
type GMName_Future struct{ *capnp.Future }

func (f GMName_Future) Struct() (GMName, error) {
	p, err := f.Future.Ptr()
	return GMName(p.Struct()), err
}

type GMDelCorpse capnp.Struct

// GMDelCorpse_TypeID is the unique identifier for the type GMDelCorpse.
const GMDelCorpse_TypeID = 0xeafef4c5dcc4b5b5

func NewGMDelCorpse(s *capnp.Segment) (GMDelCorpse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMDelCorpse(st), err
}

func NewRootGMDelCorpse(s *capnp.Segment) (GMDelCorpse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMDelCorpse(st), err
}

func ReadRootGMDelCorpse(msg *capnp.Message) (GMDelCorpse, error) {
	root, err := msg.Root()
	return GMDelCorpse(root.Struct()), err
}

func (s GMDelCorpse) String() string {
	str, _ := text.Marshal(0xeafef4c5dcc4b5b5, capnp.Struct(s))
	return str
}

func (s GMDelCorpse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMDelCorpse) DecodeFromPtr(p capnp.Ptr) GMDelCorpse {
	return GMDelCorpse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMDelCorpse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMDelCorpse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMDelCorpse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMDelCorpse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMDelCorpse) Corpsename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMDelCorpse) HasCorpsename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMDelCorpse) CorpsenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMDelCorpse) SetCorpsename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMDelCorpse) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMDelCorpse) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMDelCorpse) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMDelCorpse) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMDelCorpse_List is a list of GMDelCorpse.
type GMDelCorpse_List = capnp.StructList[GMDelCorpse]

// NewGMDelCorpse creates a new list of GMDelCorpse.
func NewGMDelCorpse_List(s *capnp.Segment, sz int32) (GMDelCorpse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMDelCorpse](l), err
}

// GMDelCorpse_Future is a wrapper for a GMDelCorpse promised by a client call.
type GMDelCorpse_Future struct{ *capnp.Future }

func (f GMDelCorpse_Future) Struct() (GMDelCorpse, error) {
	p, err := f.Future.Ptr()
	return GMDelCorpse(p.Struct()), err
}

type GMKick capnp.Struct

// GMKick_TypeID is the unique identifier for the type GMKick.
const GMKick_TypeID = 0xb7c78f3b8eaa6d37

func NewGMKick(s *capnp.Segment) (GMKick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKick(st), err
}

func NewRootGMKick(s *capnp.Segment) (GMKick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKick(st), err
}

func ReadRootGMKick(msg *capnp.Message) (GMKick, error) {
	root, err := msg.Root()
	return GMKick(root.Struct()), err
}

func (s GMKick) String() string {
	str, _ := text.Marshal(0xb7c78f3b8eaa6d37, capnp.Struct(s))
	return str
}

func (s GMKick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMKick) DecodeFromPtr(p capnp.Ptr) GMKick {
	return GMKick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMKick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMKick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMKick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMKick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMKick) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMKick) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMKick) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMKick) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMKick) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMKick) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMKick) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMKick) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMKick_List is a list of GMKick.
type GMKick_List = capnp.StructList[GMKick]

// NewGMKick creates a new list of GMKick.
func NewGMKick_List(s *capnp.Segment, sz int32) (GMKick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMKick](l), err
}

// GMKick_Future is a wrapper for a GMKick promised by a client call.
type GMKick_Future struct{ *capnp.Future }

func (f GMKick_Future) Struct() (GMKick, error) {
	p, err := f.Future.Ptr()
	return GMKick(p.Struct()), err
}

type GMKill capnp.Struct

// GMKill_TypeID is the unique identifier for the type GMKill.
const GMKill_TypeID = 0xf047782143ce741d

func NewGMKill(s *capnp.Segment) (GMKill, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKill(st), err
}

func NewRootGMKill(s *capnp.Segment) (GMKill, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GMKill(st), err
}

func ReadRootGMKill(msg *capnp.Message) (GMKill, error) {
	root, err := msg.Root()
	return GMKill(root.Struct()), err
}

func (s GMKill) String() string {
	str, _ := text.Marshal(0xf047782143ce741d, capnp.Struct(s))
	return str
}

func (s GMKill) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMKill) DecodeFromPtr(p capnp.Ptr) GMKill {
	return GMKill(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMKill) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMKill) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMKill) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMKill) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMKill) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMKill) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMKill) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMKill) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GMKill) Gmname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GMKill) HasGmname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GMKill) GmnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GMKill) SetGmname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GMKill_List is a list of GMKill.
type GMKill_List = capnp.StructList[GMKill]

// NewGMKill creates a new list of GMKill.
func NewGMKill_List(s *capnp.Segment, sz int32) (GMKill_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GMKill](l), err
}

// GMKill_Future is a wrapper for a GMKill promised by a client call.
type GMKill_Future struct{ *capnp.Future }

func (f GMKill_Future) Struct() (GMKill, error) {
	p, err := f.Future.Ptr()
	return GMKill(p.Struct()), err
}

type GMEmoteZone capnp.Struct

// GMEmoteZone_TypeID is the unique identifier for the type GMEmoteZone.
const GMEmoteZone_TypeID = 0x82e8c67d0acc92ee

func NewGMEmoteZone(s *capnp.Segment) (GMEmoteZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GMEmoteZone(st), err
}

func NewRootGMEmoteZone(s *capnp.Segment) (GMEmoteZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GMEmoteZone(st), err
}

func ReadRootGMEmoteZone(msg *capnp.Message) (GMEmoteZone, error) {
	root, err := msg.Root()
	return GMEmoteZone(root.Struct()), err
}

func (s GMEmoteZone) String() string {
	str, _ := text.Marshal(0x82e8c67d0acc92ee, capnp.Struct(s))
	return str
}

func (s GMEmoteZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMEmoteZone) DecodeFromPtr(p capnp.Ptr) GMEmoteZone {
	return GMEmoteZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMEmoteZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMEmoteZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMEmoteZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMEmoteZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMEmoteZone) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GMEmoteZone) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GMEmoteZone) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GMEmoteZone) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GMEmoteZone_List is a list of GMEmoteZone.
type GMEmoteZone_List = capnp.StructList[GMEmoteZone]

// NewGMEmoteZone creates a new list of GMEmoteZone.
func NewGMEmoteZone_List(s *capnp.Segment, sz int32) (GMEmoteZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GMEmoteZone](l), err
}

// GMEmoteZone_Future is a wrapper for a GMEmoteZone promised by a client call.
type GMEmoteZone_Future struct{ *capnp.Future }

func (f GMEmoteZone_Future) Struct() (GMEmoteZone, error) {
	p, err := f.Future.Ptr()
	return GMEmoteZone(p.Struct()), err
}

type BookText capnp.Struct

// BookText_TypeID is the unique identifier for the type BookText.
const BookText_TypeID = 0xb854b850a845d36e

func NewBookText(s *capnp.Segment) (BookText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookText(st), err
}

func NewRootBookText(s *capnp.Segment) (BookText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookText(st), err
}

func ReadRootBookText(msg *capnp.Message) (BookText, error) {
	root, err := msg.Root()
	return BookText(root.Struct()), err
}

func (s BookText) String() string {
	str, _ := text.Marshal(0xb854b850a845d36e, capnp.Struct(s))
	return str
}

func (s BookText) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BookText) DecodeFromPtr(p capnp.Ptr) BookText {
	return BookText(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BookText) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BookText) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BookText) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BookText) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BookText) Window() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BookText) SetWindow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BookText) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BookText) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BookText) Booktext() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BookText) HasBooktext() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BookText) BooktextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BookText) SetBooktext(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BookText_List is a list of BookText.
type BookText_List = capnp.StructList[BookText]

// NewBookText creates a new list of BookText.
func NewBookText_List(s *capnp.Segment, sz int32) (BookText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BookText](l), err
}

// BookText_Future is a wrapper for a BookText promised by a client call.
type BookText_Future struct{ *capnp.Future }

func (f BookText_Future) Struct() (BookText, error) {
	p, err := f.Future.Ptr()
	return BookText(p.Struct()), err
}

type BookRequest capnp.Struct

// BookRequest_TypeID is the unique identifier for the type BookRequest.
const BookRequest_TypeID = 0x82c483a4cf75cbe3

func NewBookRequest(s *capnp.Segment) (BookRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookRequest(st), err
}

func NewRootBookRequest(s *capnp.Segment) (BookRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BookRequest(st), err
}

func ReadRootBookRequest(msg *capnp.Message) (BookRequest, error) {
	root, err := msg.Root()
	return BookRequest(root.Struct()), err
}

func (s BookRequest) String() string {
	str, _ := text.Marshal(0x82c483a4cf75cbe3, capnp.Struct(s))
	return str
}

func (s BookRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BookRequest) DecodeFromPtr(p capnp.Ptr) BookRequest {
	return BookRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BookRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BookRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BookRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BookRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BookRequest) Window() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BookRequest) SetWindow(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BookRequest) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BookRequest) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BookRequest) Txtfile() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BookRequest) HasTxtfile() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BookRequest) TxtfileBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BookRequest) SetTxtfile(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BookRequest_List is a list of BookRequest.
type BookRequest_List = capnp.StructList[BookRequest]

// NewBookRequest creates a new list of BookRequest.
func NewBookRequest_List(s *capnp.Segment, sz int32) (BookRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BookRequest](l), err
}

// BookRequest_Future is a wrapper for a BookRequest promised by a client call.
type BookRequest_Future struct{ *capnp.Future }

func (f BookRequest_Future) Struct() (BookRequest, error) {
	p, err := f.Future.Ptr()
	return BookRequest(p.Struct()), err
}

type Object capnp.Struct

// Object_TypeID is the unique identifier for the type Object.
const Object_TypeID = 0x9c833cee78c1a396

func NewObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return Object(st), err
}

func NewRootObject(s *capnp.Segment) (Object, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return Object(st), err
}

func ReadRootObject(msg *capnp.Message) (Object, error) {
	root, err := msg.Root()
	return Object(root.Struct()), err
}

func (s Object) String() string {
	str, _ := text.Marshal(0x9c833cee78c1a396, capnp.Struct(s))
	return str
}

func (s Object) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Object) DecodeFromPtr(p capnp.Ptr) Object {
	return Object(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Object) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Object) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Object) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Object) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Object) LinkedListAddr() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Object) HasLinkedListAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Object) SetLinkedListAddr(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLinkedListAddr sets the linkedListAddr field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Object) NewLinkedListAddr(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Object) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Object) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Object) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Object) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Object) ZoneInstance() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Object) SetZoneInstance(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Object) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Object) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Object) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Object) SetZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Object) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Object) SetX(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Object) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Object) SetY(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Object) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Object) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Object) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Object) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Object) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Object) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Object) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Object) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// Object_List is a list of Object.
type Object_List = capnp.StructList[Object]

// NewObject creates a new list of Object.
func NewObject_List(s *capnp.Segment, sz int32) (Object_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[Object](l), err
}

// Object_Future is a wrapper for a Object promised by a client call.
type Object_Future struct{ *capnp.Future }

func (f Object_Future) Struct() (Object, error) {
	p, err := f.Future.Ptr()
	return Object(p.Struct()), err
}

type ClickObject capnp.Struct

// ClickObject_TypeID is the unique identifier for the type ClickObject.
const ClickObject_TypeID = 0xf7af0983a9ca61c5

func NewClickObject(s *capnp.Segment) (ClickObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClickObject(st), err
}

func NewRootClickObject(s *capnp.Segment) (ClickObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ClickObject(st), err
}

func ReadRootClickObject(msg *capnp.Message) (ClickObject, error) {
	root, err := msg.Root()
	return ClickObject(root.Struct()), err
}

func (s ClickObject) String() string {
	str, _ := text.Marshal(0xf7af0983a9ca61c5, capnp.Struct(s))
	return str
}

func (s ClickObject) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObject) DecodeFromPtr(p capnp.Ptr) ClickObject {
	return ClickObject(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObject) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObject) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObject) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObject) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObject) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObject) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObject) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObject) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ClickObject_List is a list of ClickObject.
type ClickObject_List = capnp.StructList[ClickObject]

// NewClickObject creates a new list of ClickObject.
func NewClickObject_List(s *capnp.Segment, sz int32) (ClickObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ClickObject](l), err
}

// ClickObject_Future is a wrapper for a ClickObject promised by a client call.
type ClickObject_Future struct{ *capnp.Future }

func (f ClickObject_Future) Struct() (ClickObject, error) {
	p, err := f.Future.Ptr()
	return ClickObject(p.Struct()), err
}

type ClickObjectAction capnp.Struct

// ClickObjectAction_TypeID is the unique identifier for the type ClickObjectAction.
const ClickObjectAction_TypeID = 0x998ca559e52e226b

func NewClickObjectAction(s *capnp.Segment) (ClickObjectAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAction(st), err
}

func NewRootClickObjectAction(s *capnp.Segment) (ClickObjectAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAction(st), err
}

func ReadRootClickObjectAction(msg *capnp.Message) (ClickObjectAction, error) {
	root, err := msg.Root()
	return ClickObjectAction(root.Struct()), err
}

func (s ClickObjectAction) String() string {
	str, _ := text.Marshal(0x998ca559e52e226b, capnp.Struct(s))
	return str
}

func (s ClickObjectAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObjectAction) DecodeFromPtr(p capnp.Ptr) ClickObjectAction {
	return ClickObjectAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObjectAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObjectAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObjectAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObjectAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObjectAction) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObjectAction) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObjectAction) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObjectAction) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickObjectAction) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickObjectAction) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickObjectAction) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickObjectAction) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ClickObjectAction) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ClickObjectAction) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ClickObjectAction) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClickObjectAction) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickObjectAction) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClickObjectAction) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClickObjectAction_List is a list of ClickObjectAction.
type ClickObjectAction_List = capnp.StructList[ClickObjectAction]

// NewClickObjectAction creates a new list of ClickObjectAction.
func NewClickObjectAction_List(s *capnp.Segment, sz int32) (ClickObjectAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ClickObjectAction](l), err
}

// ClickObjectAction_Future is a wrapper for a ClickObjectAction promised by a client call.
type ClickObjectAction_Future struct{ *capnp.Future }

func (f ClickObjectAction_Future) Struct() (ClickObjectAction, error) {
	p, err := f.Future.Ptr()
	return ClickObjectAction(p.Struct()), err
}

type Shielding capnp.Struct

// Shielding_TypeID is the unique identifier for the type Shielding.
const Shielding_TypeID = 0xa916afef9cb49a54

func NewShielding(s *capnp.Segment) (Shielding, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Shielding(st), err
}

func NewRootShielding(s *capnp.Segment) (Shielding, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Shielding(st), err
}

func ReadRootShielding(msg *capnp.Message) (Shielding, error) {
	root, err := msg.Root()
	return Shielding(root.Struct()), err
}

func (s Shielding) String() string {
	str, _ := text.Marshal(0xa916afef9cb49a54, capnp.Struct(s))
	return str
}

func (s Shielding) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Shielding) DecodeFromPtr(p capnp.Ptr) Shielding {
	return Shielding(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Shielding) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Shielding) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Shielding) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Shielding) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Shielding) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Shielding) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Shielding_List is a list of Shielding.
type Shielding_List = capnp.StructList[Shielding]

// NewShielding creates a new list of Shielding.
func NewShielding_List(s *capnp.Segment, sz int32) (Shielding_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Shielding](l), err
}

// Shielding_Future is a wrapper for a Shielding promised by a client call.
type Shielding_Future struct{ *capnp.Future }

func (f Shielding_Future) Struct() (Shielding, error) {
	p, err := f.Future.Ptr()
	return Shielding(p.Struct()), err
}

type ClickObjectAck capnp.Struct

// ClickObjectAck_TypeID is the unique identifier for the type ClickObjectAck.
const ClickObjectAck_TypeID = 0x93de0fbdc8643390

func NewClickObjectAck(s *capnp.Segment) (ClickObjectAck, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAck(st), err
}

func NewRootClickObjectAck(s *capnp.Segment) (ClickObjectAck, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ClickObjectAck(st), err
}

func ReadRootClickObjectAck(msg *capnp.Message) (ClickObjectAck, error) {
	root, err := msg.Root()
	return ClickObjectAck(root.Struct()), err
}

func (s ClickObjectAck) String() string {
	str, _ := text.Marshal(0x93de0fbdc8643390, capnp.Struct(s))
	return str
}

func (s ClickObjectAck) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickObjectAck) DecodeFromPtr(p capnp.Ptr) ClickObjectAck {
	return ClickObjectAck(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickObjectAck) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickObjectAck) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickObjectAck) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickObjectAck) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickObjectAck) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickObjectAck) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickObjectAck) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickObjectAck) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickObjectAck) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickObjectAck) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickObjectAck) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickObjectAck) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ClickObjectAck) Icon() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ClickObjectAck) SetIcon(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ClickObjectAck) ObjectName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClickObjectAck) HasObjectName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickObjectAck) ObjectNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClickObjectAck) SetObjectName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ClickObjectAck_List is a list of ClickObjectAck.
type ClickObjectAck_List = capnp.StructList[ClickObjectAck]

// NewClickObjectAck creates a new list of ClickObjectAck.
func NewClickObjectAck_List(s *capnp.Segment, sz int32) (ClickObjectAck_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ClickObjectAck](l), err
}

// ClickObjectAck_Future is a wrapper for a ClickObjectAck promised by a client call.
type ClickObjectAck_Future struct{ *capnp.Future }

func (f ClickObjectAck_Future) Struct() (ClickObjectAck, error) {
	p, err := f.Future.Ptr()
	return ClickObjectAck(p.Struct()), err
}

type CloseContainer capnp.Struct

// CloseContainer_TypeID is the unique identifier for the type CloseContainer.
const CloseContainer_TypeID = 0xfd58a2914a0296e2

func NewCloseContainer(s *capnp.Segment) (CloseContainer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CloseContainer(st), err
}

func NewRootCloseContainer(s *capnp.Segment) (CloseContainer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CloseContainer(st), err
}

func ReadRootCloseContainer(msg *capnp.Message) (CloseContainer, error) {
	root, err := msg.Root()
	return CloseContainer(root.Struct()), err
}

func (s CloseContainer) String() string {
	str, _ := text.Marshal(0xfd58a2914a0296e2, capnp.Struct(s))
	return str
}

func (s CloseContainer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CloseContainer) DecodeFromPtr(p capnp.Ptr) CloseContainer {
	return CloseContainer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CloseContainer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CloseContainer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CloseContainer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CloseContainer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CloseContainer) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CloseContainer) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CloseContainer) DropId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CloseContainer) SetDropId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CloseContainer) Open() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s CloseContainer) SetOpen(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// CloseContainer_List is a list of CloseContainer.
type CloseContainer_List = capnp.StructList[CloseContainer]

// NewCloseContainer creates a new list of CloseContainer.
func NewCloseContainer_List(s *capnp.Segment, sz int32) (CloseContainer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CloseContainer](l), err
}

// CloseContainer_Future is a wrapper for a CloseContainer promised by a client call.
type CloseContainer_Future struct{ *capnp.Future }

func (f CloseContainer_Future) Struct() (CloseContainer, error) {
	p, err := f.Future.Ptr()
	return CloseContainer(p.Struct()), err
}

type Door capnp.Struct

// Door_TypeID is the unique identifier for the type Door.
const Door_TypeID = 0xf9454e8612b10b69

func NewDoor(s *capnp.Segment) (Door, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Door(st), err
}

func NewRootDoor(s *capnp.Segment) (Door, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Door(st), err
}

func ReadRootDoor(msg *capnp.Message) (Door, error) {
	root, err := msg.Root()
	return Door(root.Struct()), err
}

func (s Door) String() string {
	str, _ := text.Marshal(0xf9454e8612b10b69, capnp.Struct(s))
	return str
}

func (s Door) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Door) DecodeFromPtr(p capnp.Ptr) Door {
	return Door(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Door) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Door) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Door) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Door) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Door) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Door) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Door) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Door) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Door) YPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Door) SetYPos(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Door) XPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Door) SetXPos(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Door) ZPos() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Door) SetZPos(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Door) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Door) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Door) Incline() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s Door) SetIncline(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s Door) Size() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Door) SetSize(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Door) DoorId() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Door) SetDoorId(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s Door) Opentype() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s Door) SetOpentype(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s Door) StateAtSpawn() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Door) SetStateAtSpawn(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Door) InvertState() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Door) SetInvertState(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Door) DoorParam() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Door) SetDoorParam(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

// Door_List is a list of Door.
type Door_List = capnp.StructList[Door]

// NewDoor creates a new list of Door.
func NewDoor_List(s *capnp.Segment, sz int32) (Door_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Door](l), err
}

// Door_Future is a wrapper for a Door promised by a client call.
type Door_Future struct{ *capnp.Future }

func (f Door_Future) Struct() (Door, error) {
	p, err := f.Future.Ptr()
	return Door(p.Struct()), err
}

type DoorSpawns capnp.Struct

// DoorSpawns_TypeID is the unique identifier for the type DoorSpawns.
const DoorSpawns_TypeID = 0xf304800fc3af267f

func NewDoorSpawns(s *capnp.Segment) (DoorSpawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DoorSpawns(st), err
}

func NewRootDoorSpawns(s *capnp.Segment) (DoorSpawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DoorSpawns(st), err
}

func ReadRootDoorSpawns(msg *capnp.Message) (DoorSpawns, error) {
	root, err := msg.Root()
	return DoorSpawns(root.Struct()), err
}

func (s DoorSpawns) String() string {
	str, _ := text.Marshal(0xf304800fc3af267f, capnp.Struct(s))
	return str
}

func (s DoorSpawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DoorSpawns) DecodeFromPtr(p capnp.Ptr) DoorSpawns {
	return DoorSpawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DoorSpawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DoorSpawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DoorSpawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DoorSpawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DoorSpawns) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DoorSpawns) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DoorSpawns) Doors() (Door_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Door_List(p.List()), err
}

func (s DoorSpawns) HasDoors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DoorSpawns) SetDoors(v Door_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDoors sets the doors field to a newly
// allocated Door_List, preferring placement in s's segment.
func (s DoorSpawns) NewDoors(n int32) (Door_List, error) {
	l, err := NewDoor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Door_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DoorSpawns_List is a list of DoorSpawns.
type DoorSpawns_List = capnp.StructList[DoorSpawns]

// NewDoorSpawns creates a new list of DoorSpawns.
func NewDoorSpawns_List(s *capnp.Segment, sz int32) (DoorSpawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DoorSpawns](l), err
}

// DoorSpawns_Future is a wrapper for a DoorSpawns promised by a client call.
type DoorSpawns_Future struct{ *capnp.Future }

func (f DoorSpawns_Future) Struct() (DoorSpawns, error) {
	p, err := f.Future.Ptr()
	return DoorSpawns(p.Struct()), err
}

type ClickDoor capnp.Struct

// ClickDoor_TypeID is the unique identifier for the type ClickDoor.
const ClickDoor_TypeID = 0xa012f4912c4151f9

func NewClickDoor(s *capnp.Segment) (ClickDoor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ClickDoor(st), err
}

func NewRootClickDoor(s *capnp.Segment) (ClickDoor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ClickDoor(st), err
}

func ReadRootClickDoor(msg *capnp.Message) (ClickDoor, error) {
	root, err := msg.Root()
	return ClickDoor(root.Struct()), err
}

func (s ClickDoor) String() string {
	str, _ := text.Marshal(0xa012f4912c4151f9, capnp.Struct(s))
	return str
}

func (s ClickDoor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickDoor) DecodeFromPtr(p capnp.Ptr) ClickDoor {
	return ClickDoor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickDoor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickDoor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickDoor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickDoor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickDoor) Doorid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickDoor) SetDoorid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickDoor) Picklockskill() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ClickDoor) SetPicklockskill(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ClickDoor) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ClickDoor) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ClickDoor) PlayerId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ClickDoor) SetPlayerId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ClickDoor_List is a list of ClickDoor.
type ClickDoor_List = capnp.StructList[ClickDoor]

// NewClickDoor creates a new list of ClickDoor.
func NewClickDoor_List(s *capnp.Segment, sz int32) (ClickDoor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ClickDoor](l), err
}

// ClickDoor_Future is a wrapper for a ClickDoor promised by a client call.
type ClickDoor_Future struct{ *capnp.Future }

func (f ClickDoor_Future) Struct() (ClickDoor, error) {
	p, err := f.Future.Ptr()
	return ClickDoor(p.Struct()), err
}

type MoveDoor capnp.Struct

// MoveDoor_TypeID is the unique identifier for the type MoveDoor.
const MoveDoor_TypeID = 0x844fdb5787f2eb73

func NewMoveDoor(s *capnp.Segment) (MoveDoor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MoveDoor(st), err
}

func NewRootMoveDoor(s *capnp.Segment) (MoveDoor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MoveDoor(st), err
}

func ReadRootMoveDoor(msg *capnp.Message) (MoveDoor, error) {
	root, err := msg.Root()
	return MoveDoor(root.Struct()), err
}

func (s MoveDoor) String() string {
	str, _ := text.Marshal(0x844fdb5787f2eb73, capnp.Struct(s))
	return str
}

func (s MoveDoor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoveDoor) DecodeFromPtr(p capnp.Ptr) MoveDoor {
	return MoveDoor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoveDoor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoveDoor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoveDoor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoveDoor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoveDoor) Doorid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoveDoor) SetDoorid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoveDoor) Action() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoveDoor) SetAction(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// MoveDoor_List is a list of MoveDoor.
type MoveDoor_List = capnp.StructList[MoveDoor]

// NewMoveDoor creates a new list of MoveDoor.
func NewMoveDoor_List(s *capnp.Segment, sz int32) (MoveDoor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MoveDoor](l), err
}

// MoveDoor_Future is a wrapper for a MoveDoor promised by a client call.
type MoveDoor_Future struct{ *capnp.Future }

func (f MoveDoor_Future) Struct() (MoveDoor, error) {
	p, err := f.Future.Ptr()
	return MoveDoor(p.Struct()), err
}

type BecomeNPC capnp.Struct

// BecomeNPC_TypeID is the unique identifier for the type BecomeNPC.
const BecomeNPC_TypeID = 0xb4452aee08031161

func NewBecomeNPC(s *capnp.Segment) (BecomeNPC, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeNPC(st), err
}

func NewRootBecomeNPC(s *capnp.Segment) (BecomeNPC, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeNPC(st), err
}

func ReadRootBecomeNPC(msg *capnp.Message) (BecomeNPC, error) {
	root, err := msg.Root()
	return BecomeNPC(root.Struct()), err
}

func (s BecomeNPC) String() string {
	str, _ := text.Marshal(0xb4452aee08031161, capnp.Struct(s))
	return str
}

func (s BecomeNPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeNPC) DecodeFromPtr(p capnp.Ptr) BecomeNPC {
	return BecomeNPC(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeNPC) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeNPC) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeNPC) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeNPC) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeNPC) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeNPC) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeNPC) Maxlevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BecomeNPC) SetMaxlevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BecomeNPC_List is a list of BecomeNPC.
type BecomeNPC_List = capnp.StructList[BecomeNPC]

// NewBecomeNPC creates a new list of BecomeNPC.
func NewBecomeNPC_List(s *capnp.Segment, sz int32) (BecomeNPC_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BecomeNPC](l), err
}

// BecomeNPC_Future is a wrapper for a BecomeNPC promised by a client call.
type BecomeNPC_Future struct{ *capnp.Future }

func (f BecomeNPC_Future) Struct() (BecomeNPC, error) {
	p, err := f.Future.Ptr()
	return BecomeNPC(p.Struct()), err
}

type Underworld capnp.Struct

// Underworld_TypeID is the unique identifier for the type Underworld.
const Underworld_TypeID = 0xf90c9c3f6c27a1c2

func NewUnderworld(s *capnp.Segment) (Underworld, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Underworld(st), err
}

func NewRootUnderworld(s *capnp.Segment) (Underworld, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Underworld(st), err
}

func ReadRootUnderworld(msg *capnp.Message) (Underworld, error) {
	root, err := msg.Root()
	return Underworld(root.Struct()), err
}

func (s Underworld) String() string {
	str, _ := text.Marshal(0xf90c9c3f6c27a1c2, capnp.Struct(s))
	return str
}

func (s Underworld) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Underworld) DecodeFromPtr(p capnp.Ptr) Underworld {
	return Underworld(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Underworld) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Underworld) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Underworld) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Underworld) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Underworld) Speed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Underworld) SetSpeed(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Underworld) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Underworld) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Underworld) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Underworld) SetX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Underworld) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Underworld) SetZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// Underworld_List is a list of Underworld.
type Underworld_List = capnp.StructList[Underworld]

// NewUnderworld creates a new list of Underworld.
func NewUnderworld_List(s *capnp.Segment, sz int32) (Underworld_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Underworld](l), err
}

// Underworld_Future is a wrapper for a Underworld promised by a client call.
type Underworld_Future struct{ *capnp.Future }

func (f Underworld_Future) Struct() (Underworld, error) {
	p, err := f.Future.Ptr()
	return Underworld(p.Struct()), err
}

type Resurrect capnp.Struct

// Resurrect_TypeID is the unique identifier for the type Resurrect.
const Resurrect_TypeID = 0xd68209c5c40dc249

func NewResurrect(s *capnp.Segment) (Resurrect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return Resurrect(st), err
}

func NewRootResurrect(s *capnp.Segment) (Resurrect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return Resurrect(st), err
}

func ReadRootResurrect(msg *capnp.Message) (Resurrect, error) {
	root, err := msg.Root()
	return Resurrect(root.Struct()), err
}

func (s Resurrect) String() string {
	str, _ := text.Marshal(0xd68209c5c40dc249, capnp.Struct(s))
	return str
}

func (s Resurrect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Resurrect) DecodeFromPtr(p capnp.Ptr) Resurrect {
	return Resurrect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Resurrect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Resurrect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Resurrect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Resurrect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Resurrect) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Resurrect) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Resurrect) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Resurrect) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Resurrect) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Resurrect) SetY(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Resurrect) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Resurrect) SetX(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Resurrect) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Resurrect) SetZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Resurrect) YourName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Resurrect) HasYourName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Resurrect) YourNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Resurrect) SetYourName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Resurrect) RezzerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Resurrect) HasRezzerName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Resurrect) RezzerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Resurrect) SetRezzerName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Resurrect) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s Resurrect) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s Resurrect) CorpseName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Resurrect) HasCorpseName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Resurrect) CorpseNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Resurrect) SetCorpseName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Resurrect) Action() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s Resurrect) SetAction(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// Resurrect_List is a list of Resurrect.
type Resurrect_List = capnp.StructList[Resurrect]

// NewResurrect creates a new list of Resurrect.
func NewResurrect_List(s *capnp.Segment, sz int32) (Resurrect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[Resurrect](l), err
}

// Resurrect_Future is a wrapper for a Resurrect promised by a client call.
type Resurrect_Future struct{ *capnp.Future }

func (f Resurrect_Future) Struct() (Resurrect, error) {
	p, err := f.Future.Ptr()
	return Resurrect(p.Struct()), err
}

type SetRunMode capnp.Struct

// SetRunMode_TypeID is the unique identifier for the type SetRunMode.
const SetRunMode_TypeID = 0xc1409e4be6401554

func NewSetRunMode(s *capnp.Segment) (SetRunMode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetRunMode(st), err
}

func NewRootSetRunMode(s *capnp.Segment) (SetRunMode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetRunMode(st), err
}

func ReadRootSetRunMode(msg *capnp.Message) (SetRunMode, error) {
	root, err := msg.Root()
	return SetRunMode(root.Struct()), err
}

func (s SetRunMode) String() string {
	str, _ := text.Marshal(0xc1409e4be6401554, capnp.Struct(s))
	return str
}

func (s SetRunMode) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetRunMode) DecodeFromPtr(p capnp.Ptr) SetRunMode {
	return SetRunMode(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetRunMode) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetRunMode) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetRunMode) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetRunMode) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetRunMode) Mode() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetRunMode) SetMode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// SetRunMode_List is a list of SetRunMode.
type SetRunMode_List = capnp.StructList[SetRunMode]

// NewSetRunMode creates a new list of SetRunMode.
func NewSetRunMode_List(s *capnp.Segment, sz int32) (SetRunMode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetRunMode](l), err
}

// SetRunMode_Future is a wrapper for a SetRunMode promised by a client call.
type SetRunMode_Future struct{ *capnp.Future }

func (f SetRunMode_Future) Struct() (SetRunMode, error) {
	p, err := f.Future.Ptr()
	return SetRunMode(p.Struct()), err
}

type EnvDamage2 capnp.Struct

// EnvDamage2_TypeID is the unique identifier for the type EnvDamage2.
const EnvDamage2_TypeID = 0xec5c7b07d1717d84

func NewEnvDamage2(s *capnp.Segment) (EnvDamage2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvDamage2(st), err
}

func NewRootEnvDamage2(s *capnp.Segment) (EnvDamage2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvDamage2(st), err
}

func ReadRootEnvDamage2(msg *capnp.Message) (EnvDamage2, error) {
	root, err := msg.Root()
	return EnvDamage2(root.Struct()), err
}

func (s EnvDamage2) String() string {
	str, _ := text.Marshal(0xec5c7b07d1717d84, capnp.Struct(s))
	return str
}

func (s EnvDamage2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvDamage2) DecodeFromPtr(p capnp.Ptr) EnvDamage2 {
	return EnvDamage2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvDamage2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvDamage2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvDamage2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvDamage2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvDamage2) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EnvDamage2) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EnvDamage2) Damage() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s EnvDamage2) SetDamage(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s EnvDamage2) Dmgtype() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s EnvDamage2) SetDmgtype(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s EnvDamage2) Constant() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s EnvDamage2) SetConstant(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// EnvDamage2_List is a list of EnvDamage2.
type EnvDamage2_List = capnp.StructList[EnvDamage2]

// NewEnvDamage2 creates a new list of EnvDamage2.
func NewEnvDamage2_List(s *capnp.Segment, sz int32) (EnvDamage2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[EnvDamage2](l), err
}

// EnvDamage2_Future is a wrapper for a EnvDamage2 promised by a client call.
type EnvDamage2_Future struct{ *capnp.Future }

func (f EnvDamage2_Future) Struct() (EnvDamage2, error) {
	p, err := f.Future.Ptr()
	return EnvDamage2(p.Struct()), err
}

type BazaarWindowStart capnp.Struct

// BazaarWindowStart_TypeID is the unique identifier for the type BazaarWindowStart.
const BazaarWindowStart_TypeID = 0x86f0f1c44a113f21

func NewBazaarWindowStart(s *capnp.Segment) (BazaarWindowStart, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarWindowStart(st), err
}

func NewRootBazaarWindowStart(s *capnp.Segment) (BazaarWindowStart, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarWindowStart(st), err
}

func ReadRootBazaarWindowStart(msg *capnp.Message) (BazaarWindowStart, error) {
	root, err := msg.Root()
	return BazaarWindowStart(root.Struct()), err
}

func (s BazaarWindowStart) String() string {
	str, _ := text.Marshal(0x86f0f1c44a113f21, capnp.Struct(s))
	return str
}

func (s BazaarWindowStart) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarWindowStart) DecodeFromPtr(p capnp.Ptr) BazaarWindowStart {
	return BazaarWindowStart(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarWindowStart) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarWindowStart) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarWindowStart) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarWindowStart) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarWindowStart) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarWindowStart) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// BazaarWindowStart_List is a list of BazaarWindowStart.
type BazaarWindowStart_List = capnp.StructList[BazaarWindowStart]

// NewBazaarWindowStart creates a new list of BazaarWindowStart.
func NewBazaarWindowStart_List(s *capnp.Segment, sz int32) (BazaarWindowStart_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BazaarWindowStart](l), err
}

// BazaarWindowStart_Future is a wrapper for a BazaarWindowStart promised by a client call.
type BazaarWindowStart_Future struct{ *capnp.Future }

func (f BazaarWindowStart_Future) Struct() (BazaarWindowStart, error) {
	p, err := f.Future.Ptr()
	return BazaarWindowStart(p.Struct()), err
}

type BazaarWelcome capnp.Struct

// BazaarWelcome_TypeID is the unique identifier for the type BazaarWelcome.
const BazaarWelcome_TypeID = 0x9c85c1e6d68aa499

func NewBazaarWelcome(s *capnp.Segment) (BazaarWelcome, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarWelcome(st), err
}

func NewRootBazaarWelcome(s *capnp.Segment) (BazaarWelcome, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarWelcome(st), err
}

func ReadRootBazaarWelcome(msg *capnp.Message) (BazaarWelcome, error) {
	root, err := msg.Root()
	return BazaarWelcome(root.Struct()), err
}

func (s BazaarWelcome) String() string {
	str, _ := text.Marshal(0x9c85c1e6d68aa499, capnp.Struct(s))
	return str
}

func (s BazaarWelcome) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarWelcome) DecodeFromPtr(p capnp.Ptr) BazaarWelcome {
	return BazaarWelcome(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarWelcome) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarWelcome) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarWelcome) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarWelcome) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarWelcome) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarWelcome) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarWelcome) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarWelcome) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarWelcome) Traders() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarWelcome) SetTraders(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarWelcome) Items() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarWelcome) SetItems(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BazaarWelcome_List is a list of BazaarWelcome.
type BazaarWelcome_List = capnp.StructList[BazaarWelcome]

// NewBazaarWelcome creates a new list of BazaarWelcome.
func NewBazaarWelcome_List(s *capnp.Segment, sz int32) (BazaarWelcome_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BazaarWelcome](l), err
}

// BazaarWelcome_Future is a wrapper for a BazaarWelcome promised by a client call.
type BazaarWelcome_Future struct{ *capnp.Future }

func (f BazaarWelcome_Future) Struct() (BazaarWelcome, error) {
	p, err := f.Future.Ptr()
	return BazaarWelcome(p.Struct()), err
}
func (p BazaarWelcome_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type BazaarSearch capnp.Struct

// BazaarSearch_TypeID is the unique identifier for the type BazaarSearch.
const BazaarSearch_TypeID = 0x9292e90285848d8e

func NewBazaarSearch(s *capnp.Segment) (BazaarSearch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return BazaarSearch(st), err
}

func NewRootBazaarSearch(s *capnp.Segment) (BazaarSearch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return BazaarSearch(st), err
}

func ReadRootBazaarSearch(msg *capnp.Message) (BazaarSearch, error) {
	root, err := msg.Root()
	return BazaarSearch(root.Struct()), err
}

func (s BazaarSearch) String() string {
	str, _ := text.Marshal(0x9292e90285848d8e, capnp.Struct(s))
	return str
}

func (s BazaarSearch) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarSearch) DecodeFromPtr(p capnp.Ptr) BazaarSearch {
	return BazaarSearch(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarSearch) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarSearch) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarSearch) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarSearch) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarSearch) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarSearch) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarSearch) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarSearch) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarSearch) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarSearch) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarSearch) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarSearch) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BazaarSearch) Race() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BazaarSearch) SetRace(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BazaarSearch) Stat() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BazaarSearch) SetStat(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BazaarSearch) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BazaarSearch) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s BazaarSearch) Type() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s BazaarSearch) SetType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s BazaarSearch) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BazaarSearch) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BazaarSearch) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BazaarSearch) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BazaarSearch) Minprice() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s BazaarSearch) SetMinprice(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s BazaarSearch) Maxprice() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s BazaarSearch) SetMaxprice(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s BazaarSearch) Minlevel() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s BazaarSearch) SetMinlevel(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s BazaarSearch) Maxlevel() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s BazaarSearch) SetMaxlevel(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

// BazaarSearch_List is a list of BazaarSearch.
type BazaarSearch_List = capnp.StructList[BazaarSearch]

// NewBazaarSearch creates a new list of BazaarSearch.
func NewBazaarSearch_List(s *capnp.Segment, sz int32) (BazaarSearch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[BazaarSearch](l), err
}

// BazaarSearch_Future is a wrapper for a BazaarSearch promised by a client call.
type BazaarSearch_Future struct{ *capnp.Future }

func (f BazaarSearch_Future) Struct() (BazaarSearch, error) {
	p, err := f.Future.Ptr()
	return BazaarSearch(p.Struct()), err
}
func (p BazaarSearch_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type BazaarInspect capnp.Struct

// BazaarInspect_TypeID is the unique identifier for the type BazaarInspect.
const BazaarInspect_TypeID = 0x940ac0b117677519

func NewBazaarInspect(s *capnp.Segment) (BazaarInspect, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarInspect(st), err
}

func NewRootBazaarInspect(s *capnp.Segment) (BazaarInspect, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BazaarInspect(st), err
}

func ReadRootBazaarInspect(msg *capnp.Message) (BazaarInspect, error) {
	root, err := msg.Root()
	return BazaarInspect(root.Struct()), err
}

func (s BazaarInspect) String() string {
	str, _ := text.Marshal(0x940ac0b117677519, capnp.Struct(s))
	return str
}

func (s BazaarInspect) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarInspect) DecodeFromPtr(p capnp.Ptr) BazaarInspect {
	return BazaarInspect(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarInspect) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarInspect) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarInspect) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarInspect) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarInspect) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarInspect) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarInspect) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BazaarInspect) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarInspect) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BazaarInspect) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BazaarInspect_List is a list of BazaarInspect.
type BazaarInspect_List = capnp.StructList[BazaarInspect]

// NewBazaarInspect creates a new list of BazaarInspect.
func NewBazaarInspect_List(s *capnp.Segment, sz int32) (BazaarInspect_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BazaarInspect](l), err
}

// BazaarInspect_Future is a wrapper for a BazaarInspect promised by a client call.
type BazaarInspect_Future struct{ *capnp.Future }

func (f BazaarInspect_Future) Struct() (BazaarInspect, error) {
	p, err := f.Future.Ptr()
	return BazaarInspect(p.Struct()), err
}

type BazaarReturnDone capnp.Struct

// BazaarReturnDone_TypeID is the unique identifier for the type BazaarReturnDone.
const BazaarReturnDone_TypeID = 0xbde69a9238be5e37

func NewBazaarReturnDone(s *capnp.Segment) (BazaarReturnDone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarReturnDone(st), err
}

func NewRootBazaarReturnDone(s *capnp.Segment) (BazaarReturnDone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BazaarReturnDone(st), err
}

func ReadRootBazaarReturnDone(msg *capnp.Message) (BazaarReturnDone, error) {
	root, err := msg.Root()
	return BazaarReturnDone(root.Struct()), err
}

func (s BazaarReturnDone) String() string {
	str, _ := text.Marshal(0xbde69a9238be5e37, capnp.Struct(s))
	return str
}

func (s BazaarReturnDone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarReturnDone) DecodeFromPtr(p capnp.Ptr) BazaarReturnDone {
	return BazaarReturnDone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarReturnDone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarReturnDone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarReturnDone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarReturnDone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarReturnDone) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarReturnDone) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarReturnDone) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarReturnDone) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BazaarReturnDone_List is a list of BazaarReturnDone.
type BazaarReturnDone_List = capnp.StructList[BazaarReturnDone]

// NewBazaarReturnDone creates a new list of BazaarReturnDone.
func NewBazaarReturnDone_List(s *capnp.Segment, sz int32) (BazaarReturnDone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BazaarReturnDone](l), err
}

// BazaarReturnDone_Future is a wrapper for a BazaarReturnDone promised by a client call.
type BazaarReturnDone_Future struct{ *capnp.Future }

func (f BazaarReturnDone_Future) Struct() (BazaarReturnDone, error) {
	p, err := f.Future.Ptr()
	return BazaarReturnDone(p.Struct()), err
}

type BazaarSearchResults capnp.Struct

// BazaarSearchResults_TypeID is the unique identifier for the type BazaarSearchResults.
const BazaarSearchResults_TypeID = 0xcd102105578e2465

func NewBazaarSearchResults(s *capnp.Segment) (BazaarSearchResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BazaarSearchResults(st), err
}

func NewRootBazaarSearchResults(s *capnp.Segment) (BazaarSearchResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return BazaarSearchResults(st), err
}

func ReadRootBazaarSearchResults(msg *capnp.Message) (BazaarSearchResults, error) {
	root, err := msg.Root()
	return BazaarSearchResults(root.Struct()), err
}

func (s BazaarSearchResults) String() string {
	str, _ := text.Marshal(0xcd102105578e2465, capnp.Struct(s))
	return str
}

func (s BazaarSearchResults) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BazaarSearchResults) DecodeFromPtr(p capnp.Ptr) BazaarSearchResults {
	return BazaarSearchResults(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BazaarSearchResults) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BazaarSearchResults) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BazaarSearchResults) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BazaarSearchResults) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BazaarSearchResults) Beginning() (BazaarWindowStart, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return BazaarWindowStart(p.Struct()), err
}

func (s BazaarSearchResults) HasBeginning() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BazaarSearchResults) SetBeginning(v BazaarWindowStart) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBeginning sets the beginning field to a newly
// allocated BazaarWindowStart struct, preferring placement in s's segment.
func (s BazaarSearchResults) NewBeginning() (BazaarWindowStart, error) {
	ss, err := NewBazaarWindowStart(capnp.Struct(s).Segment())
	if err != nil {
		return BazaarWindowStart{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s BazaarSearchResults) SellerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BazaarSearchResults) SetSellerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BazaarSearchResults) NumItems() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BazaarSearchResults) SetNumItems(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BazaarSearchResults) SerialNumber() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BazaarSearchResults) SetSerialNumber(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BazaarSearchResults) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s BazaarSearchResults) HasItemName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s BazaarSearchResults) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s BazaarSearchResults) SetItemName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s BazaarSearchResults) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BazaarSearchResults) SetCost(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BazaarSearchResults) ItemStat() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BazaarSearchResults) SetItemStat(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// BazaarSearchResults_List is a list of BazaarSearchResults.
type BazaarSearchResults_List = capnp.StructList[BazaarSearchResults]

// NewBazaarSearchResults creates a new list of BazaarSearchResults.
func NewBazaarSearchResults_List(s *capnp.Segment, sz int32) (BazaarSearchResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[BazaarSearchResults](l), err
}

// BazaarSearchResults_Future is a wrapper for a BazaarSearchResults promised by a client call.
type BazaarSearchResults_Future struct{ *capnp.Future }

func (f BazaarSearchResults_Future) Struct() (BazaarSearchResults, error) {
	p, err := f.Future.Ptr()
	return BazaarSearchResults(p.Struct()), err
}
func (p BazaarSearchResults_Future) Beginning() BazaarWindowStart_Future {
	return BazaarWindowStart_Future{Future: p.Future.Field(0, nil)}
}

type ServerSideFilters capnp.Struct

// ServerSideFilters_TypeID is the unique identifier for the type ServerSideFilters.
const ServerSideFilters_TypeID = 0xc54135596f07c87b

func NewServerSideFilters(s *capnp.Segment) (ServerSideFilters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ServerSideFilters(st), err
}

func NewRootServerSideFilters(s *capnp.Segment) (ServerSideFilters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ServerSideFilters(st), err
}

func ReadRootServerSideFilters(msg *capnp.Message) (ServerSideFilters, error) {
	root, err := msg.Root()
	return ServerSideFilters(root.Struct()), err
}

func (s ServerSideFilters) String() string {
	str, _ := text.Marshal(0xc54135596f07c87b, capnp.Struct(s))
	return str
}

func (s ServerSideFilters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServerSideFilters) DecodeFromPtr(p capnp.Ptr) ServerSideFilters {
	return ServerSideFilters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServerSideFilters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServerSideFilters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServerSideFilters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServerSideFilters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServerSideFilters) Clientattackfilters() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ServerSideFilters) SetClientattackfilters(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ServerSideFilters) Npcattackfilters() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ServerSideFilters) SetNpcattackfilters(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ServerSideFilters) Clientcastfilters() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ServerSideFilters) SetClientcastfilters(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ServerSideFilters) Npccastfilters() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ServerSideFilters) SetNpccastfilters(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ServerSideFilters_List is a list of ServerSideFilters.
type ServerSideFilters_List = capnp.StructList[ServerSideFilters]

// NewServerSideFilters creates a new list of ServerSideFilters.
func NewServerSideFilters_List(s *capnp.Segment, sz int32) (ServerSideFilters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ServerSideFilters](l), err
}

// ServerSideFilters_Future is a wrapper for a ServerSideFilters promised by a client call.
type ServerSideFilters_Future struct{ *capnp.Future }

func (f ServerSideFilters_Future) Struct() (ServerSideFilters, error) {
	p, err := f.Future.Ptr()
	return ServerSideFilters(p.Struct()), err
}

type ItemViewRequest capnp.Struct

// ItemViewRequest_TypeID is the unique identifier for the type ItemViewRequest.
const ItemViewRequest_TypeID = 0xc2c16fce3e3aa7eb

func NewItemViewRequest(s *capnp.Segment) (ItemViewRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemViewRequest(st), err
}

func NewRootItemViewRequest(s *capnp.Segment) (ItemViewRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ItemViewRequest(st), err
}

func ReadRootItemViewRequest(msg *capnp.Message) (ItemViewRequest, error) {
	root, err := msg.Root()
	return ItemViewRequest(root.Struct()), err
}

func (s ItemViewRequest) String() string {
	str, _ := text.Marshal(0xc2c16fce3e3aa7eb, capnp.Struct(s))
	return str
}

func (s ItemViewRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ItemViewRequest) DecodeFromPtr(p capnp.Ptr) ItemViewRequest {
	return ItemViewRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ItemViewRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ItemViewRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ItemViewRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ItemViewRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ItemViewRequest) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ItemViewRequest) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ItemViewRequest) Augments() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ItemViewRequest) HasAugments() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ItemViewRequest) SetAugments(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAugments sets the augments field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ItemViewRequest) NewAugments(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ItemViewRequest) LinkHash() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ItemViewRequest) SetLinkHash(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ItemViewRequest_List is a list of ItemViewRequest.
type ItemViewRequest_List = capnp.StructList[ItemViewRequest]

// NewItemViewRequest creates a new list of ItemViewRequest.
func NewItemViewRequest_List(s *capnp.Segment, sz int32) (ItemViewRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ItemViewRequest](l), err
}

// ItemViewRequest_Future is a wrapper for a ItemViewRequest promised by a client call.
type ItemViewRequest_Future struct{ *capnp.Future }

func (f ItemViewRequest_Future) Struct() (ItemViewRequest, error) {
	p, err := f.Future.Ptr()
	return ItemViewRequest(p.Struct()), err
}

type PickPocket capnp.Struct

// PickPocket_TypeID is the unique identifier for the type PickPocket.
const PickPocket_TypeID = 0xc4aef0c4dc45bc83

func NewPickPocket(s *capnp.Segment) (PickPocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PickPocket(st), err
}

func NewRootPickPocket(s *capnp.Segment) (PickPocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PickPocket(st), err
}

func ReadRootPickPocket(msg *capnp.Message) (PickPocket, error) {
	root, err := msg.Root()
	return PickPocket(root.Struct()), err
}

func (s PickPocket) String() string {
	str, _ := text.Marshal(0xc4aef0c4dc45bc83, capnp.Struct(s))
	return str
}

func (s PickPocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PickPocket) DecodeFromPtr(p capnp.Ptr) PickPocket {
	return PickPocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PickPocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PickPocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PickPocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PickPocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PickPocket) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s PickPocket) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s PickPocket) From() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s PickPocket) SetFrom(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s PickPocket) Myskill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s PickPocket) SetMyskill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s PickPocket) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s PickPocket) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s PickPocket) Coin() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s PickPocket) SetCoin(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s PickPocket) Lastsix() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s PickPocket) HasLastsix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PickPocket) SetLastsix(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLastsix sets the lastsix field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s PickPocket) NewLastsix(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PickPocket_List is a list of PickPocket.
type PickPocket_List = capnp.StructList[PickPocket]

// NewPickPocket creates a new list of PickPocket.
func NewPickPocket_List(s *capnp.Segment, sz int32) (PickPocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[PickPocket](l), err
}

// PickPocket_Future is a wrapper for a PickPocket promised by a client call.
type PickPocket_Future struct{ *capnp.Future }

func (f PickPocket_Future) Struct() (PickPocket, error) {
	p, err := f.Future.Ptr()
	return PickPocket(p.Struct()), err
}

type ActionPickPocket capnp.Struct

// ActionPickPocket_TypeID is the unique identifier for the type ActionPickPocket.
const ActionPickPocket_TypeID = 0xbe54ea0b18470782

func NewActionPickPocket(s *capnp.Segment) (ActionPickPocket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ActionPickPocket(st), err
}

func NewRootActionPickPocket(s *capnp.Segment) (ActionPickPocket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return ActionPickPocket(st), err
}

func ReadRootActionPickPocket(msg *capnp.Message) (ActionPickPocket, error) {
	root, err := msg.Root()
	return ActionPickPocket(root.Struct()), err
}

func (s ActionPickPocket) String() string {
	str, _ := text.Marshal(0xbe54ea0b18470782, capnp.Struct(s))
	return str
}

func (s ActionPickPocket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ActionPickPocket) DecodeFromPtr(p capnp.Ptr) ActionPickPocket {
	return ActionPickPocket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ActionPickPocket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ActionPickPocket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ActionPickPocket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ActionPickPocket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ActionPickPocket) To() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ActionPickPocket) SetTo(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ActionPickPocket) From() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ActionPickPocket) SetFrom(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ActionPickPocket) Myskill() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ActionPickPocket) SetMyskill(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ActionPickPocket) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ActionPickPocket) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ActionPickPocket) Coin() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s ActionPickPocket) SetCoin(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s ActionPickPocket) Itemname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ActionPickPocket) HasItemname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ActionPickPocket) ItemnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ActionPickPocket) SetItemname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ActionPickPocket_List is a list of ActionPickPocket.
type ActionPickPocket_List = capnp.StructList[ActionPickPocket]

// NewActionPickPocket creates a new list of ActionPickPocket.
func NewActionPickPocket_List(s *capnp.Segment, sz int32) (ActionPickPocket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[ActionPickPocket](l), err
}

// ActionPickPocket_Future is a wrapper for a ActionPickPocket promised by a client call.
type ActionPickPocket_Future struct{ *capnp.Future }

func (f ActionPickPocket_Future) Struct() (ActionPickPocket, error) {
	p, err := f.Future.Ptr()
	return ActionPickPocket(p.Struct()), err
}

type LogServer capnp.Struct

// LogServer_TypeID is the unique identifier for the type LogServer.
const LogServer_TypeID = 0xb74f1e7519f6fd40

func NewLogServer(s *capnp.Segment) (LogServer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LogServer(st), err
}

func NewRootLogServer(s *capnp.Segment) (LogServer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LogServer(st), err
}

func ReadRootLogServer(msg *capnp.Message) (LogServer, error) {
	root, err := msg.Root()
	return LogServer(root.Struct()), err
}

func (s LogServer) String() string {
	str, _ := text.Marshal(0xb74f1e7519f6fd40, capnp.Struct(s))
	return str
}

func (s LogServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LogServer) DecodeFromPtr(p capnp.Ptr) LogServer {
	return LogServer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LogServer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LogServer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LogServer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LogServer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LogServer) Worldshortname() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LogServer) HasWorldshortname() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LogServer) WorldshortnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LogServer) SetWorldshortname(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// LogServer_List is a list of LogServer.
type LogServer_List = capnp.StructList[LogServer]

// NewLogServer creates a new list of LogServer.
func NewLogServer_List(s *capnp.Segment, sz int32) (LogServer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LogServer](l), err
}

// LogServer_Future is a wrapper for a LogServer promised by a client call.
type LogServer_Future struct{ *capnp.Future }

func (f LogServer_Future) Struct() (LogServer, error) {
	p, err := f.Future.Ptr()
	return LogServer(p.Struct()), err
}

type ClientError capnp.Struct

// ClientError_TypeID is the unique identifier for the type ClientError.
const ClientError_TypeID = 0xcf7084fe71119d92

func NewClientError(s *capnp.Segment) (ClientError, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientError(st), err
}

func NewRootClientError(s *capnp.Segment) (ClientError, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ClientError(st), err
}

func ReadRootClientError(msg *capnp.Message) (ClientError, error) {
	root, err := msg.Root()
	return ClientError(root.Struct()), err
}

func (s ClientError) String() string {
	str, _ := text.Marshal(0xcf7084fe71119d92, capnp.Struct(s))
	return str
}

func (s ClientError) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClientError) DecodeFromPtr(p capnp.Ptr) ClientError {
	return ClientError(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClientError) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClientError) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClientError) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClientError) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClientError) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ClientError) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClientError) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ClientError) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ClientError) CharacterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ClientError) HasCharacterName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ClientError) CharacterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ClientError) SetCharacterName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ClientError) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ClientError) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ClientError) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ClientError) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ClientError_List is a list of ClientError.
type ClientError_List = capnp.StructList[ClientError]

// NewClientError creates a new list of ClientError.
func NewClientError_List(s *capnp.Segment, sz int32) (ClientError_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ClientError](l), err
}

// ClientError_Future is a wrapper for a ClientError promised by a client call.
type ClientError_Future struct{ *capnp.Future }

func (f ClientError_Future) Struct() (ClientError, error) {
	p, err := f.Future.Ptr()
	return ClientError(p.Struct()), err
}

type MobHealth capnp.Struct

// MobHealth_TypeID is the unique identifier for the type MobHealth.
const MobHealth_TypeID = 0xb915e75dd5f36b13

func NewMobHealth(s *capnp.Segment) (MobHealth, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MobHealth(st), err
}

func NewRootMobHealth(s *capnp.Segment) (MobHealth, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MobHealth(st), err
}

func ReadRootMobHealth(msg *capnp.Message) (MobHealth, error) {
	root, err := msg.Root()
	return MobHealth(root.Struct()), err
}

func (s MobHealth) String() string {
	str, _ := text.Marshal(0xb915e75dd5f36b13, capnp.Struct(s))
	return str
}

func (s MobHealth) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MobHealth) DecodeFromPtr(p capnp.Ptr) MobHealth {
	return MobHealth(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MobHealth) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MobHealth) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MobHealth) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MobHealth) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MobHealth) Hp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MobHealth) SetHp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MobHealth) Id() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MobHealth) SetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// MobHealth_List is a list of MobHealth.
type MobHealth_List = capnp.StructList[MobHealth]

// NewMobHealth creates a new list of MobHealth.
func NewMobHealth_List(s *capnp.Segment, sz int32) (MobHealth_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MobHealth](l), err
}

// MobHealth_Future is a wrapper for a MobHealth promised by a client call.
type MobHealth_Future struct{ *capnp.Future }

func (f MobHealth_Future) Struct() (MobHealth, error) {
	p, err := f.Future.Ptr()
	return MobHealth(p.Struct()), err
}

type Track capnp.Struct

// Track_TypeID is the unique identifier for the type Track.
const Track_TypeID = 0x8f371262d861f7d1

func NewTrack(s *capnp.Segment) (Track, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Track(st), err
}

func NewRootTrack(s *capnp.Segment) (Track, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Track(st), err
}

func ReadRootTrack(msg *capnp.Message) (Track, error) {
	root, err := msg.Root()
	return Track(root.Struct()), err
}

func (s Track) String() string {
	str, _ := text.Marshal(0x8f371262d861f7d1, capnp.Struct(s))
	return str
}

func (s Track) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Track) DecodeFromPtr(p capnp.Ptr) Track {
	return Track(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Track) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Track) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Track) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Track) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Track) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Track) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Track) Distance() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Track) SetDistance(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// Track_List is a list of Track.
type Track_List = capnp.StructList[Track]

// NewTrack creates a new list of Track.
func NewTrack_List(s *capnp.Segment, sz int32) (Track_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Track](l), err
}

// Track_Future is a wrapper for a Track promised by a client call.
type Track_Future struct{ *capnp.Future }

func (f Track_Future) Struct() (Track, error) {
	p, err := f.Future.Ptr()
	return Track(p.Struct()), err
}

type TrackTarget capnp.Struct

// TrackTarget_TypeID is the unique identifier for the type TrackTarget.
const TrackTarget_TypeID = 0x881a3fa8b6a21e65

func NewTrackTarget(s *capnp.Segment) (TrackTarget, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TrackTarget(st), err
}

func NewRootTrackTarget(s *capnp.Segment) (TrackTarget, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TrackTarget(st), err
}

func ReadRootTrackTarget(msg *capnp.Message) (TrackTarget, error) {
	root, err := msg.Root()
	return TrackTarget(root.Struct()), err
}

func (s TrackTarget) String() string {
	str, _ := text.Marshal(0x881a3fa8b6a21e65, capnp.Struct(s))
	return str
}

func (s TrackTarget) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrackTarget) DecodeFromPtr(p capnp.Ptr) TrackTarget {
	return TrackTarget(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrackTarget) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrackTarget) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrackTarget) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrackTarget) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrackTarget) Entityid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TrackTarget) SetEntityid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// TrackTarget_List is a list of TrackTarget.
type TrackTarget_List = capnp.StructList[TrackTarget]

// NewTrackTarget creates a new list of TrackTarget.
func NewTrackTarget_List(s *capnp.Segment, sz int32) (TrackTarget_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TrackTarget](l), err
}

// TrackTarget_Future is a wrapper for a TrackTarget promised by a client call.
type TrackTarget_Future struct{ *capnp.Future }

func (f TrackTarget_Future) Struct() (TrackTarget, error) {
	p, err := f.Future.Ptr()
	return TrackTarget(p.Struct()), err
}

type Tracking capnp.Struct

// Tracking_TypeID is the unique identifier for the type Tracking.
const Tracking_TypeID = 0x8929937be8c9e001

func NewTracking(s *capnp.Segment) (Tracking, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tracking(st), err
}

func NewRootTracking(s *capnp.Segment) (Tracking, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Tracking(st), err
}

func ReadRootTracking(msg *capnp.Message) (Tracking, error) {
	root, err := msg.Root()
	return Tracking(root.Struct()), err
}

func (s Tracking) String() string {
	str, _ := text.Marshal(0x8929937be8c9e001, capnp.Struct(s))
	return str
}

func (s Tracking) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tracking) DecodeFromPtr(p capnp.Ptr) Tracking {
	return Tracking(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tracking) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tracking) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tracking) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tracking) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tracking) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Tracking) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Tracking) Entries() (Track_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Track_List(p.List()), err
}

func (s Tracking) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tracking) SetEntries(v Track_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Track_List, preferring placement in s's segment.
func (s Tracking) NewEntries(n int32) (Track_List, error) {
	l, err := NewTrack_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Track_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Tracking_List is a list of Tracking.
type Tracking_List = capnp.StructList[Tracking]

// NewTracking creates a new list of Tracking.
func NewTracking_List(s *capnp.Segment, sz int32) (Tracking_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Tracking](l), err
}

// Tracking_Future is a wrapper for a Tracking promised by a client call.
type Tracking_Future struct{ *capnp.Future }

func (f Tracking_Future) Struct() (Tracking, error) {
	p, err := f.Future.Ptr()
	return Tracking(p.Struct()), err
}

type ZoneServerInfo capnp.Struct

// ZoneServerInfo_TypeID is the unique identifier for the type ZoneServerInfo.
const ZoneServerInfo_TypeID = 0x94d039e60a812076

func NewZoneServerInfo(s *capnp.Segment) (ZoneServerInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZoneServerInfo(st), err
}

func NewRootZoneServerInfo(s *capnp.Segment) (ZoneServerInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZoneServerInfo(st), err
}

func ReadRootZoneServerInfo(msg *capnp.Message) (ZoneServerInfo, error) {
	root, err := msg.Root()
	return ZoneServerInfo(root.Struct()), err
}

func (s ZoneServerInfo) String() string {
	str, _ := text.Marshal(0x94d039e60a812076, capnp.Struct(s))
	return str
}

func (s ZoneServerInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneServerInfo) DecodeFromPtr(p capnp.Ptr) ZoneServerInfo {
	return ZoneServerInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneServerInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneServerInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneServerInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneServerInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneServerInfo) Ip() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneServerInfo) HasIp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneServerInfo) IpBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneServerInfo) SetIp(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ZoneServerInfo) Port() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ZoneServerInfo) SetPort(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ZoneServerInfo_List is a list of ZoneServerInfo.
type ZoneServerInfo_List = capnp.StructList[ZoneServerInfo]

// NewZoneServerInfo creates a new list of ZoneServerInfo.
func NewZoneServerInfo_List(s *capnp.Segment, sz int32) (ZoneServerInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ZoneServerInfo](l), err
}

// ZoneServerInfo_Future is a wrapper for a ZoneServerInfo promised by a client call.
type ZoneServerInfo_Future struct{ *capnp.Future }

func (f ZoneServerInfo_Future) Struct() (ZoneServerInfo, error) {
	p, err := f.Future.Ptr()
	return ZoneServerInfo(p.Struct()), err
}

type WhoAllPlayer capnp.Struct

// WhoAllPlayer_TypeID is the unique identifier for the type WhoAllPlayer.
const WhoAllPlayer_TypeID = 0xc20152b889987299

func NewWhoAllPlayer(s *capnp.Segment) (WhoAllPlayer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return WhoAllPlayer(st), err
}

func NewRootWhoAllPlayer(s *capnp.Segment) (WhoAllPlayer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return WhoAllPlayer(st), err
}

func ReadRootWhoAllPlayer(msg *capnp.Message) (WhoAllPlayer, error) {
	root, err := msg.Root()
	return WhoAllPlayer(root.Struct()), err
}

func (s WhoAllPlayer) String() string {
	str, _ := text.Marshal(0xc20152b889987299, capnp.Struct(s))
	return str
}

func (s WhoAllPlayer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAllPlayer) DecodeFromPtr(p capnp.Ptr) WhoAllPlayer {
	return WhoAllPlayer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAllPlayer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAllPlayer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAllPlayer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAllPlayer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAllPlayer) Formatstring() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAllPlayer) SetFormatstring(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAllPlayer) Pidstring() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAllPlayer) SetPidstring(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAllPlayer) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAllPlayer) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAllPlayer) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAllPlayer) Rankstring() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAllPlayer) SetRankstring(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAllPlayer) Guild() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WhoAllPlayer) HasGuild() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WhoAllPlayer) GuildBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetGuild(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WhoAllPlayer) Zonestring() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAllPlayer) SetZonestring(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAllPlayer) Zone() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s WhoAllPlayer) SetZone(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s WhoAllPlayer) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s WhoAllPlayer) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s WhoAllPlayer) Level() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s WhoAllPlayer) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s WhoAllPlayer) Race() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s WhoAllPlayer) SetRace(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s WhoAllPlayer) Account() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WhoAllPlayer) HasAccount() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WhoAllPlayer) AccountBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WhoAllPlayer) SetAccount(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// WhoAllPlayer_List is a list of WhoAllPlayer.
type WhoAllPlayer_List = capnp.StructList[WhoAllPlayer]

// NewWhoAllPlayer creates a new list of WhoAllPlayer.
func NewWhoAllPlayer_List(s *capnp.Segment, sz int32) (WhoAllPlayer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[WhoAllPlayer](l), err
}

// WhoAllPlayer_Future is a wrapper for a WhoAllPlayer promised by a client call.
type WhoAllPlayer_Future struct{ *capnp.Future }

func (f WhoAllPlayer_Future) Struct() (WhoAllPlayer, error) {
	p, err := f.Future.Ptr()
	return WhoAllPlayer(p.Struct()), err
}

type WhoAllReturn capnp.Struct

// WhoAllReturn_TypeID is the unique identifier for the type WhoAllReturn.
const WhoAllReturn_TypeID = 0xa58428b610ebb10c

func NewWhoAllReturn(s *capnp.Segment) (WhoAllReturn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return WhoAllReturn(st), err
}

func NewRootWhoAllReturn(s *capnp.Segment) (WhoAllReturn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return WhoAllReturn(st), err
}

func ReadRootWhoAllReturn(msg *capnp.Message) (WhoAllReturn, error) {
	root, err := msg.Root()
	return WhoAllReturn(root.Struct()), err
}

func (s WhoAllReturn) String() string {
	str, _ := text.Marshal(0xa58428b610ebb10c, capnp.Struct(s))
	return str
}

func (s WhoAllReturn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WhoAllReturn) DecodeFromPtr(p capnp.Ptr) WhoAllReturn {
	return WhoAllReturn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WhoAllReturn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WhoAllReturn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WhoAllReturn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WhoAllReturn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WhoAllReturn) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WhoAllReturn) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WhoAllReturn) Playerineqstring() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WhoAllReturn) SetPlayerineqstring(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WhoAllReturn) Line() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WhoAllReturn) HasLine() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WhoAllReturn) LineBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WhoAllReturn) SetLine(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WhoAllReturn) Playersinzonestring() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WhoAllReturn) SetPlayersinzonestring(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WhoAllReturn) Count() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WhoAllReturn) SetCount(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s WhoAllReturn) Player() (WhoAllPlayer_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return WhoAllPlayer_List(p.List()), err
}

func (s WhoAllReturn) HasPlayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WhoAllReturn) SetPlayer(v WhoAllPlayer_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPlayer sets the player field to a newly
// allocated WhoAllPlayer_List, preferring placement in s's segment.
func (s WhoAllReturn) NewPlayer(n int32) (WhoAllPlayer_List, error) {
	l, err := NewWhoAllPlayer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WhoAllPlayer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// WhoAllReturn_List is a list of WhoAllReturn.
type WhoAllReturn_List = capnp.StructList[WhoAllReturn]

// NewWhoAllReturn creates a new list of WhoAllReturn.
func NewWhoAllReturn_List(s *capnp.Segment, sz int32) (WhoAllReturn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[WhoAllReturn](l), err
}

// WhoAllReturn_Future is a wrapper for a WhoAllReturn promised by a client call.
type WhoAllReturn_Future struct{ *capnp.Future }

func (f WhoAllReturn_Future) Struct() (WhoAllReturn, error) {
	p, err := f.Future.Ptr()
	return WhoAllReturn(p.Struct()), err
}

type Trader capnp.Struct

// Trader_TypeID is the unique identifier for the type Trader.
const Trader_TypeID = 0xd351f43ee97d7196

func NewTrader(s *capnp.Segment) (Trader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Trader(st), err
}

func NewRootTrader(s *capnp.Segment) (Trader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Trader(st), err
}

func ReadRootTrader(msg *capnp.Message) (Trader, error) {
	root, err := msg.Root()
	return Trader(root.Struct()), err
}

func (s Trader) String() string {
	str, _ := text.Marshal(0xd351f43ee97d7196, capnp.Struct(s))
	return str
}

func (s Trader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Trader) DecodeFromPtr(p capnp.Ptr) Trader {
	return Trader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Trader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Trader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Trader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Trader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Trader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Trader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Trader) Itemid() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s Trader) HasItemid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Trader) SetItemid(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemid sets the itemid field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Trader) NewItemid(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Trader) Itemcost() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s Trader) HasItemcost() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Trader) SetItemcost(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewItemcost sets the itemcost field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Trader) NewItemcost(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Trader_List is a list of Trader.
type Trader_List = capnp.StructList[Trader]

// NewTrader creates a new list of Trader.
func NewTrader_List(s *capnp.Segment, sz int32) (Trader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Trader](l), err
}

// Trader_Future is a wrapper for a Trader promised by a client call.
type Trader_Future struct{ *capnp.Future }

func (f Trader_Future) Struct() (Trader, error) {
	p, err := f.Future.Ptr()
	return Trader(p.Struct()), err
}

type ClickTrader capnp.Struct

// ClickTrader_TypeID is the unique identifier for the type ClickTrader.
const ClickTrader_TypeID = 0xf640e180eb6f7e34

func NewClickTrader(s *capnp.Segment) (ClickTrader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ClickTrader(st), err
}

func NewRootClickTrader(s *capnp.Segment) (ClickTrader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ClickTrader(st), err
}

func ReadRootClickTrader(msg *capnp.Message) (ClickTrader, error) {
	root, err := msg.Root()
	return ClickTrader(root.Struct()), err
}

func (s ClickTrader) String() string {
	str, _ := text.Marshal(0xf640e180eb6f7e34, capnp.Struct(s))
	return str
}

func (s ClickTrader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClickTrader) DecodeFromPtr(p capnp.Ptr) ClickTrader {
	return ClickTrader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClickTrader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClickTrader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClickTrader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClickTrader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClickTrader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ClickTrader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ClickTrader) Itemcost() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s ClickTrader) HasItemcost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClickTrader) SetItemcost(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItemcost sets the itemcost field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ClickTrader) NewItemcost(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ClickTrader_List is a list of ClickTrader.
type ClickTrader_List = capnp.StructList[ClickTrader]

// NewClickTrader creates a new list of ClickTrader.
func NewClickTrader_List(s *capnp.Segment, sz int32) (ClickTrader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ClickTrader](l), err
}

// ClickTrader_Future is a wrapper for a ClickTrader promised by a client call.
type ClickTrader_Future struct{ *capnp.Future }

func (f ClickTrader_Future) Struct() (ClickTrader, error) {
	p, err := f.Future.Ptr()
	return ClickTrader(p.Struct()), err
}

type GetItems capnp.Struct

// GetItems_TypeID is the unique identifier for the type GetItems.
const GetItems_TypeID = 0xa796a4d827fc48b4

func NewGetItems(s *capnp.Segment) (GetItems, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetItems(st), err
}

func NewRootGetItems(s *capnp.Segment) (GetItems, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetItems(st), err
}

func ReadRootGetItems(msg *capnp.Message) (GetItems, error) {
	root, err := msg.Root()
	return GetItems(root.Struct()), err
}

func (s GetItems) String() string {
	str, _ := text.Marshal(0xa796a4d827fc48b4, capnp.Struct(s))
	return str
}

func (s GetItems) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GetItems) DecodeFromPtr(p capnp.Ptr) GetItems {
	return GetItems(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GetItems) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GetItems) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GetItems) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GetItems) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GetItems) Items() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s GetItems) HasItems() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GetItems) SetItems(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewItems sets the items field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s GetItems) NewItems(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GetItems_List is a list of GetItems.
type GetItems_List = capnp.StructList[GetItems]

// NewGetItems creates a new list of GetItems.
func NewGetItems_List(s *capnp.Segment, sz int32) (GetItems_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GetItems](l), err
}

// GetItems_Future is a wrapper for a GetItems promised by a client call.
type GetItems_Future struct{ *capnp.Future }

func (f GetItems_Future) Struct() (GetItems, error) {
	p, err := f.Future.Ptr()
	return GetItems(p.Struct()), err
}

type BecomeTrader capnp.Struct

// BecomeTrader_TypeID is the unique identifier for the type BecomeTrader.
const BecomeTrader_TypeID = 0x9e7c63f7db1235ba

func NewBecomeTrader(s *capnp.Segment) (BecomeTrader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeTrader(st), err
}

func NewRootBecomeTrader(s *capnp.Segment) (BecomeTrader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BecomeTrader(st), err
}

func ReadRootBecomeTrader(msg *capnp.Message) (BecomeTrader, error) {
	root, err := msg.Root()
	return BecomeTrader(root.Struct()), err
}

func (s BecomeTrader) String() string {
	str, _ := text.Marshal(0x9e7c63f7db1235ba, capnp.Struct(s))
	return str
}

func (s BecomeTrader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BecomeTrader) DecodeFromPtr(p capnp.Ptr) BecomeTrader {
	return BecomeTrader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BecomeTrader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BecomeTrader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BecomeTrader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BecomeTrader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BecomeTrader) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BecomeTrader) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BecomeTrader) Code() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BecomeTrader) SetCode(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BecomeTrader_List is a list of BecomeTrader.
type BecomeTrader_List = capnp.StructList[BecomeTrader]

// NewBecomeTrader creates a new list of BecomeTrader.
func NewBecomeTrader_List(s *capnp.Segment, sz int32) (BecomeTrader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BecomeTrader](l), err
}

// BecomeTrader_Future is a wrapper for a BecomeTrader promised by a client call.
type BecomeTrader_Future struct{ *capnp.Future }

func (f BecomeTrader_Future) Struct() (BecomeTrader, error) {
	p, err := f.Future.Ptr()
	return BecomeTrader(p.Struct()), err
}

type TraderShowItems capnp.Struct

// TraderShowItems_TypeID is the unique identifier for the type TraderShowItems.
const TraderShowItems_TypeID = 0xc008c1d71bacfa15

func NewTraderShowItems(s *capnp.Segment) (TraderShowItems, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderShowItems(st), err
}

func NewRootTraderShowItems(s *capnp.Segment) (TraderShowItems, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderShowItems(st), err
}

func ReadRootTraderShowItems(msg *capnp.Message) (TraderShowItems, error) {
	root, err := msg.Root()
	return TraderShowItems(root.Struct()), err
}

func (s TraderShowItems) String() string {
	str, _ := text.Marshal(0xc008c1d71bacfa15, capnp.Struct(s))
	return str
}

func (s TraderShowItems) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderShowItems) DecodeFromPtr(p capnp.Ptr) TraderShowItems {
	return TraderShowItems(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderShowItems) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderShowItems) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderShowItems) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderShowItems) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderShowItems) Code() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderShowItems) SetCode(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderShowItems) TraderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderShowItems) SetTraderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderShowItems_List is a list of TraderShowItems.
type TraderShowItems_List = capnp.StructList[TraderShowItems]

// NewTraderShowItems creates a new list of TraderShowItems.
func NewTraderShowItems_List(s *capnp.Segment, sz int32) (TraderShowItems_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderShowItems](l), err
}

// TraderShowItems_Future is a wrapper for a TraderShowItems promised by a client call.
type TraderShowItems_Future struct{ *capnp.Future }

func (f TraderShowItems_Future) Struct() (TraderShowItems, error) {
	p, err := f.Future.Ptr()
	return TraderShowItems(p.Struct()), err
}

type TraderBuy capnp.Struct

// TraderBuy_TypeID is the unique identifier for the type TraderBuy.
const TraderBuy_TypeID = 0x838b6e674280f93f

func NewTraderBuy(s *capnp.Segment) (TraderBuy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return TraderBuy(st), err
}

func NewRootTraderBuy(s *capnp.Segment) (TraderBuy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return TraderBuy(st), err
}

func ReadRootTraderBuy(msg *capnp.Message) (TraderBuy, error) {
	root, err := msg.Root()
	return TraderBuy(root.Struct()), err
}

func (s TraderBuy) String() string {
	str, _ := text.Marshal(0x838b6e674280f93f, capnp.Struct(s))
	return str
}

func (s TraderBuy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderBuy) DecodeFromPtr(p capnp.Ptr) TraderBuy {
	return TraderBuy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderBuy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderBuy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderBuy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderBuy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderBuy) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderBuy) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderBuy) Price() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderBuy) SetPrice(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TraderBuy) TraderId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TraderBuy) SetTraderId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TraderBuy) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TraderBuy) HasItemName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TraderBuy) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TraderBuy) SetItemName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TraderBuy) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TraderBuy) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TraderBuy) AlreadySold() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TraderBuy) SetAlreadySold(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TraderBuy) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TraderBuy) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// TraderBuy_List is a list of TraderBuy.
type TraderBuy_List = capnp.StructList[TraderBuy]

// NewTraderBuy creates a new list of TraderBuy.
func NewTraderBuy_List(s *capnp.Segment, sz int32) (TraderBuy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[TraderBuy](l), err
}

// TraderBuy_Future is a wrapper for a TraderBuy promised by a client call.
type TraderBuy_Future struct{ *capnp.Future }

func (f TraderBuy_Future) Struct() (TraderBuy, error) {
	p, err := f.Future.Ptr()
	return TraderBuy(p.Struct()), err
}

type TraderItemUpdate capnp.Struct

// TraderItemUpdate_TypeID is the unique identifier for the type TraderItemUpdate.
const TraderItemUpdate_TypeID = 0xc998874f2bcc5999

func NewTraderItemUpdate(s *capnp.Segment) (TraderItemUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TraderItemUpdate(st), err
}

func NewRootTraderItemUpdate(s *capnp.Segment) (TraderItemUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TraderItemUpdate(st), err
}

func ReadRootTraderItemUpdate(msg *capnp.Message) (TraderItemUpdate, error) {
	root, err := msg.Root()
	return TraderItemUpdate(root.Struct()), err
}

func (s TraderItemUpdate) String() string {
	str, _ := text.Marshal(0xc998874f2bcc5999, capnp.Struct(s))
	return str
}

func (s TraderItemUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderItemUpdate) DecodeFromPtr(p capnp.Ptr) TraderItemUpdate {
	return TraderItemUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderItemUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderItemUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderItemUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderItemUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderItemUpdate) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderItemUpdate) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderItemUpdate) Fromslot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderItemUpdate) SetFromslot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TraderItemUpdate) Toslot() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TraderItemUpdate) SetToslot(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TraderItemUpdate) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TraderItemUpdate) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// TraderItemUpdate_List is a list of TraderItemUpdate.
type TraderItemUpdate_List = capnp.StructList[TraderItemUpdate]

// NewTraderItemUpdate creates a new list of TraderItemUpdate.
func NewTraderItemUpdate_List(s *capnp.Segment, sz int32) (TraderItemUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TraderItemUpdate](l), err
}

// TraderItemUpdate_Future is a wrapper for a TraderItemUpdate promised by a client call.
type TraderItemUpdate_Future struct{ *capnp.Future }

func (f TraderItemUpdate_Future) Struct() (TraderItemUpdate, error) {
	p, err := f.Future.Ptr()
	return TraderItemUpdate(p.Struct()), err
}

type MoneyUpdate capnp.Struct

// MoneyUpdate_TypeID is the unique identifier for the type MoneyUpdate.
const MoneyUpdate_TypeID = 0xb26bddc14e66729a

func NewMoneyUpdate(s *capnp.Segment) (MoneyUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoneyUpdate(st), err
}

func NewRootMoneyUpdate(s *capnp.Segment) (MoneyUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MoneyUpdate(st), err
}

func ReadRootMoneyUpdate(msg *capnp.Message) (MoneyUpdate, error) {
	root, err := msg.Root()
	return MoneyUpdate(root.Struct()), err
}

func (s MoneyUpdate) String() string {
	str, _ := text.Marshal(0xb26bddc14e66729a, capnp.Struct(s))
	return str
}

func (s MoneyUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MoneyUpdate) DecodeFromPtr(p capnp.Ptr) MoneyUpdate {
	return MoneyUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MoneyUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MoneyUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MoneyUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MoneyUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MoneyUpdate) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MoneyUpdate) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MoneyUpdate) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MoneyUpdate) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MoneyUpdate) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MoneyUpdate) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MoneyUpdate) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MoneyUpdate) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// MoneyUpdate_List is a list of MoneyUpdate.
type MoneyUpdate_List = capnp.StructList[MoneyUpdate]

// NewMoneyUpdate creates a new list of MoneyUpdate.
func NewMoneyUpdate_List(s *capnp.Segment, sz int32) (MoneyUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MoneyUpdate](l), err
}

// MoneyUpdate_Future is a wrapper for a MoneyUpdate promised by a client call.
type MoneyUpdate_Future struct{ *capnp.Future }

func (f MoneyUpdate_Future) Struct() (MoneyUpdate, error) {
	p, err := f.Future.Ptr()
	return MoneyUpdate(p.Struct()), err
}

type TraderDelItem capnp.Struct

// TraderDelItem_TypeID is the unique identifier for the type TraderDelItem.
const TraderDelItem_TypeID = 0xc73e9eb76d70ee0a

func NewTraderDelItem(s *capnp.Segment) (TraderDelItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderDelItem(st), err
}

func NewRootTraderDelItem(s *capnp.Segment) (TraderDelItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderDelItem(st), err
}

func ReadRootTraderDelItem(msg *capnp.Message) (TraderDelItem, error) {
	root, err := msg.Root()
	return TraderDelItem(root.Struct()), err
}

func (s TraderDelItem) String() string {
	str, _ := text.Marshal(0xc73e9eb76d70ee0a, capnp.Struct(s))
	return str
}

func (s TraderDelItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderDelItem) DecodeFromPtr(p capnp.Ptr) TraderDelItem {
	return TraderDelItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderDelItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderDelItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderDelItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderDelItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderDelItem) Slotid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderDelItem) SetSlotid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderDelItem) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderDelItem) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderDelItem_List is a list of TraderDelItem.
type TraderDelItem_List = capnp.StructList[TraderDelItem]

// NewTraderDelItem creates a new list of TraderDelItem.
func NewTraderDelItem_List(s *capnp.Segment, sz int32) (TraderDelItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderDelItem](l), err
}

// TraderDelItem_Future is a wrapper for a TraderDelItem promised by a client call.
type TraderDelItem_Future struct{ *capnp.Future }

func (f TraderDelItem_Future) Struct() (TraderDelItem, error) {
	p, err := f.Future.Ptr()
	return TraderDelItem(p.Struct()), err
}

type TraderClick capnp.Struct

// TraderClick_TypeID is the unique identifier for the type TraderClick.
const TraderClick_TypeID = 0xcac443c397628440

func NewTraderClick(s *capnp.Segment) (TraderClick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderClick(st), err
}

func NewRootTraderClick(s *capnp.Segment) (TraderClick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TraderClick(st), err
}

func ReadRootTraderClick(msg *capnp.Message) (TraderClick, error) {
	root, err := msg.Root()
	return TraderClick(root.Struct()), err
}

func (s TraderClick) String() string {
	str, _ := text.Marshal(0xcac443c397628440, capnp.Struct(s))
	return str
}

func (s TraderClick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TraderClick) DecodeFromPtr(p capnp.Ptr) TraderClick {
	return TraderClick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TraderClick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TraderClick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TraderClick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TraderClick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TraderClick) Traderid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TraderClick) SetTraderid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TraderClick) Approval() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TraderClick) SetApproval(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TraderClick_List is a list of TraderClick.
type TraderClick_List = capnp.StructList[TraderClick]

// NewTraderClick creates a new list of TraderClick.
func NewTraderClick_List(s *capnp.Segment, sz int32) (TraderClick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TraderClick](l), err
}

// TraderClick_Future is a wrapper for a TraderClick promised by a client call.
type TraderClick_Future struct{ *capnp.Future }

func (f TraderClick_Future) Struct() (TraderClick, error) {
	p, err := f.Future.Ptr()
	return TraderClick(p.Struct()), err
}

type FormattedMessage capnp.Struct

// FormattedMessage_TypeID is the unique identifier for the type FormattedMessage.
const FormattedMessage_TypeID = 0xfb596df65e062edf

func NewFormattedMessage(s *capnp.Segment) (FormattedMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FormattedMessage(st), err
}

func NewRootFormattedMessage(s *capnp.Segment) (FormattedMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FormattedMessage(st), err
}

func ReadRootFormattedMessage(msg *capnp.Message) (FormattedMessage, error) {
	root, err := msg.Root()
	return FormattedMessage(root.Struct()), err
}

func (s FormattedMessage) String() string {
	str, _ := text.Marshal(0xfb596df65e062edf, capnp.Struct(s))
	return str
}

func (s FormattedMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FormattedMessage) DecodeFromPtr(p capnp.Ptr) FormattedMessage {
	return FormattedMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FormattedMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FormattedMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FormattedMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FormattedMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FormattedMessage) StringId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FormattedMessage) SetStringId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FormattedMessage) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FormattedMessage) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s FormattedMessage) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s FormattedMessage) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FormattedMessage) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s FormattedMessage) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// FormattedMessage_List is a list of FormattedMessage.
type FormattedMessage_List = capnp.StructList[FormattedMessage]

// NewFormattedMessage creates a new list of FormattedMessage.
func NewFormattedMessage_List(s *capnp.Segment, sz int32) (FormattedMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[FormattedMessage](l), err
}

// FormattedMessage_Future is a wrapper for a FormattedMessage promised by a client call.
type FormattedMessage_Future struct{ *capnp.Future }

func (f FormattedMessage_Future) Struct() (FormattedMessage, error) {
	p, err := f.Future.Ptr()
	return FormattedMessage(p.Struct()), err
}

type SimpleMessage capnp.Struct

// SimpleMessage_TypeID is the unique identifier for the type SimpleMessage.
const SimpleMessage_TypeID = 0x8552adf123d9b564

func NewSimpleMessage(s *capnp.Segment) (SimpleMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SimpleMessage(st), err
}

func NewRootSimpleMessage(s *capnp.Segment) (SimpleMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SimpleMessage(st), err
}

func ReadRootSimpleMessage(msg *capnp.Message) (SimpleMessage, error) {
	root, err := msg.Root()
	return SimpleMessage(root.Struct()), err
}

func (s SimpleMessage) String() string {
	str, _ := text.Marshal(0x8552adf123d9b564, capnp.Struct(s))
	return str
}

func (s SimpleMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimpleMessage) DecodeFromPtr(p capnp.Ptr) SimpleMessage {
	return SimpleMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimpleMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimpleMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimpleMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimpleMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimpleMessage) StringId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SimpleMessage) SetStringId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SimpleMessage) Color() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SimpleMessage) SetColor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SimpleMessage_List is a list of SimpleMessage.
type SimpleMessage_List = capnp.StructList[SimpleMessage]

// NewSimpleMessage creates a new list of SimpleMessage.
func NewSimpleMessage_List(s *capnp.Segment, sz int32) (SimpleMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SimpleMessage](l), err
}

// SimpleMessage_Future is a wrapper for a SimpleMessage promised by a client call.
type SimpleMessage_Future struct{ *capnp.Future }

func (f SimpleMessage_Future) Struct() (SimpleMessage, error) {
	p, err := f.Future.Ptr()
	return SimpleMessage(p.Struct()), err
}

type GuildMemberEntry capnp.Struct

// GuildMemberEntry_TypeID is the unique identifier for the type GuildMemberEntry.
const GuildMemberEntry_TypeID = 0x820db271715b4199

func NewGuildMemberEntry(s *capnp.Segment) (GuildMemberEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return GuildMemberEntry(st), err
}

func NewRootGuildMemberEntry(s *capnp.Segment) (GuildMemberEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2})
	return GuildMemberEntry(st), err
}

func ReadRootGuildMemberEntry(msg *capnp.Message) (GuildMemberEntry, error) {
	root, err := msg.Root()
	return GuildMemberEntry(root.Struct()), err
}

func (s GuildMemberEntry) String() string {
	str, _ := text.Marshal(0x820db271715b4199, capnp.Struct(s))
	return str
}

func (s GuildMemberEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMemberEntry) DecodeFromPtr(p capnp.Ptr) GuildMemberEntry {
	return GuildMemberEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMemberEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMemberEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMemberEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMemberEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMemberEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMemberEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMemberEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMemberEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMemberEntry) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMemberEntry) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMemberEntry) Banker() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildMemberEntry) SetBanker(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildMemberEntry) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildMemberEntry) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s GuildMemberEntry) Rank() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s GuildMemberEntry) SetRank(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s GuildMemberEntry) TimeLastOn() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s GuildMemberEntry) SetTimeLastOn(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s GuildMemberEntry) TributeEnable() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s GuildMemberEntry) SetTributeEnable(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s GuildMemberEntry) TotalTribute() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GuildMemberEntry) SetTotalTribute(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GuildMemberEntry) LastTribute() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GuildMemberEntry) SetLastTribute(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GuildMemberEntry) PublicNote() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMemberEntry) HasPublicNote() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMemberEntry) PublicNoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMemberEntry) SetPublicNote(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildMemberEntry) Zoneinstance() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GuildMemberEntry) SetZoneinstance(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s GuildMemberEntry) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s GuildMemberEntry) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

// GuildMemberEntry_List is a list of GuildMemberEntry.
type GuildMemberEntry_List = capnp.StructList[GuildMemberEntry]

// NewGuildMemberEntry creates a new list of GuildMemberEntry.
func NewGuildMemberEntry_List(s *capnp.Segment, sz int32) (GuildMemberEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 2}, sz)
	return capnp.StructList[GuildMemberEntry](l), err
}

// GuildMemberEntry_Future is a wrapper for a GuildMemberEntry promised by a client call.
type GuildMemberEntry_Future struct{ *capnp.Future }

func (f GuildMemberEntry_Future) Struct() (GuildMemberEntry, error) {
	p, err := f.Future.Ptr()
	return GuildMemberEntry(p.Struct()), err
}

type GuildMembers capnp.Struct

// GuildMembers_TypeID is the unique identifier for the type GuildMembers.
const GuildMembers_TypeID = 0xca9a2c906b36a12e

func NewGuildMembers(s *capnp.Segment) (GuildMembers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildMembers(st), err
}

func NewRootGuildMembers(s *capnp.Segment) (GuildMembers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildMembers(st), err
}

func ReadRootGuildMembers(msg *capnp.Message) (GuildMembers, error) {
	root, err := msg.Root()
	return GuildMembers(root.Struct()), err
}

func (s GuildMembers) String() string {
	str, _ := text.Marshal(0xca9a2c906b36a12e, capnp.Struct(s))
	return str
}

func (s GuildMembers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMembers) DecodeFromPtr(p capnp.Ptr) GuildMembers {
	return GuildMembers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMembers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMembers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMembers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMembers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMembers) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMembers) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMembers) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMembers) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMembers) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMembers) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMembers) Member() (GuildMemberEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return GuildMemberEntry_List(p.List()), err
}

func (s GuildMembers) HasMember() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMembers) SetMember(v GuildMemberEntry_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMember sets the member field to a newly
// allocated GuildMemberEntry_List, preferring placement in s's segment.
func (s GuildMembers) NewMember(n int32) (GuildMemberEntry_List, error) {
	l, err := NewGuildMemberEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GuildMemberEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// GuildMembers_List is a list of GuildMembers.
type GuildMembers_List = capnp.StructList[GuildMembers]

// NewGuildMembers creates a new list of GuildMembers.
func NewGuildMembers_List(s *capnp.Segment, sz int32) (GuildMembers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildMembers](l), err
}

// GuildMembers_Future is a wrapper for a GuildMembers promised by a client call.
type GuildMembers_Future struct{ *capnp.Future }

func (f GuildMembers_Future) Struct() (GuildMembers, error) {
	p, err := f.Future.Ptr()
	return GuildMembers(p.Struct()), err
}

type GuildMOTD capnp.Struct

// GuildMOTD_TypeID is the unique identifier for the type GuildMOTD.
const GuildMOTD_TypeID = 0x9400994ae28f2ed6

func NewGuildMOTD(s *capnp.Segment) (GuildMOTD, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildMOTD(st), err
}

func NewRootGuildMOTD(s *capnp.Segment) (GuildMOTD, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildMOTD(st), err
}

func ReadRootGuildMOTD(msg *capnp.Message) (GuildMOTD, error) {
	root, err := msg.Root()
	return GuildMOTD(root.Struct()), err
}

func (s GuildMOTD) String() string {
	str, _ := text.Marshal(0x9400994ae28f2ed6, capnp.Struct(s))
	return str
}

func (s GuildMOTD) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMOTD) DecodeFromPtr(p capnp.Ptr) GuildMOTD {
	return GuildMOTD(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMOTD) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMOTD) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMOTD) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMOTD) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMOTD) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMOTD) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMOTD) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMOTD) SetbyName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMOTD) HasSetbyName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMOTD) SetbyNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetSetbyName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildMOTD) Motd() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GuildMOTD) HasMotd() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GuildMOTD) MotdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GuildMOTD) SetMotd(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GuildMOTD_List is a list of GuildMOTD.
type GuildMOTD_List = capnp.StructList[GuildMOTD]

// NewGuildMOTD creates a new list of GuildMOTD.
func NewGuildMOTD_List(s *capnp.Segment, sz int32) (GuildMOTD_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GuildMOTD](l), err
}

// GuildMOTD_Future is a wrapper for a GuildMOTD promised by a client call.
type GuildMOTD_Future struct{ *capnp.Future }

func (f GuildMOTD_Future) Struct() (GuildMOTD, error) {
	p, err := f.Future.Ptr()
	return GuildMOTD(p.Struct()), err
}

type GuildUpdatePublicNote capnp.Struct

// GuildUpdatePublicNote_TypeID is the unique identifier for the type GuildUpdatePublicNote.
const GuildUpdatePublicNote_TypeID = 0xa2fef4c64b89cc83

func NewGuildUpdatePublicNote(s *capnp.Segment) (GuildUpdatePublicNote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildUpdatePublicNote(st), err
}

func NewRootGuildUpdatePublicNote(s *capnp.Segment) (GuildUpdatePublicNote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return GuildUpdatePublicNote(st), err
}

func ReadRootGuildUpdatePublicNote(msg *capnp.Message) (GuildUpdatePublicNote, error) {
	root, err := msg.Root()
	return GuildUpdatePublicNote(root.Struct()), err
}

func (s GuildUpdatePublicNote) String() string {
	str, _ := text.Marshal(0xa2fef4c64b89cc83, capnp.Struct(s))
	return str
}

func (s GuildUpdatePublicNote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildUpdatePublicNote) DecodeFromPtr(p capnp.Ptr) GuildUpdatePublicNote {
	return GuildUpdatePublicNote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildUpdatePublicNote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildUpdatePublicNote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildUpdatePublicNote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildUpdatePublicNote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildUpdatePublicNote) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildUpdatePublicNote) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildUpdatePublicNote) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildUpdatePublicNote) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildUpdatePublicNote) Note() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GuildUpdatePublicNote) HasNote() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GuildUpdatePublicNote) NoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GuildUpdatePublicNote) SetNote(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// GuildUpdatePublicNote_List is a list of GuildUpdatePublicNote.
type GuildUpdatePublicNote_List = capnp.StructList[GuildUpdatePublicNote]

// NewGuildUpdatePublicNote creates a new list of GuildUpdatePublicNote.
func NewGuildUpdatePublicNote_List(s *capnp.Segment, sz int32) (GuildUpdatePublicNote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[GuildUpdatePublicNote](l), err
}

// GuildUpdatePublicNote_Future is a wrapper for a GuildUpdatePublicNote promised by a client call.
type GuildUpdatePublicNote_Future struct{ *capnp.Future }

func (f GuildUpdatePublicNote_Future) Struct() (GuildUpdatePublicNote, error) {
	p, err := f.Future.Ptr()
	return GuildUpdatePublicNote(p.Struct()), err
}

type GuildDemote capnp.Struct

// GuildDemote_TypeID is the unique identifier for the type GuildDemote.
const GuildDemote_TypeID = 0xa0ec151dfc4791ad

func NewGuildDemote(s *capnp.Segment) (GuildDemote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildDemote(st), err
}

func NewRootGuildDemote(s *capnp.Segment) (GuildDemote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildDemote(st), err
}

func ReadRootGuildDemote(msg *capnp.Message) (GuildDemote, error) {
	root, err := msg.Root()
	return GuildDemote(root.Struct()), err
}

func (s GuildDemote) String() string {
	str, _ := text.Marshal(0xa0ec151dfc4791ad, capnp.Struct(s))
	return str
}

func (s GuildDemote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildDemote) DecodeFromPtr(p capnp.Ptr) GuildDemote {
	return GuildDemote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildDemote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildDemote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildDemote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildDemote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildDemote) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildDemote) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildDemote) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildDemote) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildDemote) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildDemote) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildDemote) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildDemote) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GuildDemote_List is a list of GuildDemote.
type GuildDemote_List = capnp.StructList[GuildDemote]

// NewGuildDemote creates a new list of GuildDemote.
func NewGuildDemote_List(s *capnp.Segment, sz int32) (GuildDemote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GuildDemote](l), err
}

// GuildDemote_Future is a wrapper for a GuildDemote promised by a client call.
type GuildDemote_Future struct{ *capnp.Future }

func (f GuildDemote_Future) Struct() (GuildDemote, error) {
	p, err := f.Future.Ptr()
	return GuildDemote(p.Struct()), err
}

type GuildRemove capnp.Struct

// GuildRemove_TypeID is the unique identifier for the type GuildRemove.
const GuildRemove_TypeID = 0xd769b0a839cd2c2e

func NewGuildRemove(s *capnp.Segment) (GuildRemove, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildRemove(st), err
}

func NewRootGuildRemove(s *capnp.Segment) (GuildRemove, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return GuildRemove(st), err
}

func ReadRootGuildRemove(msg *capnp.Message) (GuildRemove, error) {
	root, err := msg.Root()
	return GuildRemove(root.Struct()), err
}

func (s GuildRemove) String() string {
	str, _ := text.Marshal(0xd769b0a839cd2c2e, capnp.Struct(s))
	return str
}

func (s GuildRemove) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildRemove) DecodeFromPtr(p capnp.Ptr) GuildRemove {
	return GuildRemove(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildRemove) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildRemove) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildRemove) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildRemove) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildRemove) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildRemove) HasTarget() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildRemove) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildRemove) SetTarget(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildRemove) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildRemove) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildRemove) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildRemove) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GuildRemove) Leaderstatus() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildRemove) SetLeaderstatus(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GuildRemove_List is a list of GuildRemove.
type GuildRemove_List = capnp.StructList[GuildRemove]

// NewGuildRemove creates a new list of GuildRemove.
func NewGuildRemove_List(s *capnp.Segment, sz int32) (GuildRemove_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[GuildRemove](l), err
}

// GuildRemove_Future is a wrapper for a GuildRemove promised by a client call.
type GuildRemove_Future struct{ *capnp.Future }

func (f GuildRemove_Future) Struct() (GuildRemove, error) {
	p, err := f.Future.Ptr()
	return GuildRemove(p.Struct()), err
}

type GuildMakeLeader capnp.Struct

// GuildMakeLeader_TypeID is the unique identifier for the type GuildMakeLeader.
const GuildMakeLeader_TypeID = 0xdb92e7fa759f1894

func NewGuildMakeLeader(s *capnp.Segment) (GuildMakeLeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildMakeLeader(st), err
}

func NewRootGuildMakeLeader(s *capnp.Segment) (GuildMakeLeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GuildMakeLeader(st), err
}

func ReadRootGuildMakeLeader(msg *capnp.Message) (GuildMakeLeader, error) {
	root, err := msg.Root()
	return GuildMakeLeader(root.Struct()), err
}

func (s GuildMakeLeader) String() string {
	str, _ := text.Marshal(0xdb92e7fa759f1894, capnp.Struct(s))
	return str
}

func (s GuildMakeLeader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMakeLeader) DecodeFromPtr(p capnp.Ptr) GuildMakeLeader {
	return GuildMakeLeader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMakeLeader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMakeLeader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMakeLeader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMakeLeader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMakeLeader) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMakeLeader) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMakeLeader) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMakeLeader) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMakeLeader) Target() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GuildMakeLeader) HasTarget() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GuildMakeLeader) TargetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GuildMakeLeader) SetTarget(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GuildMakeLeader_List is a list of GuildMakeLeader.
type GuildMakeLeader_List = capnp.StructList[GuildMakeLeader]

// NewGuildMakeLeader creates a new list of GuildMakeLeader.
func NewGuildMakeLeader_List(s *capnp.Segment, sz int32) (GuildMakeLeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GuildMakeLeader](l), err
}

// GuildMakeLeader_Future is a wrapper for a GuildMakeLeader promised by a client call.
type GuildMakeLeader_Future struct{ *capnp.Future }

func (f GuildMakeLeader_Future) Struct() (GuildMakeLeader, error) {
	p, err := f.Future.Ptr()
	return GuildMakeLeader(p.Struct()), err
}

type MakePet capnp.Struct

// MakePet_TypeID is the unique identifier for the type MakePet.
const MakePet_TypeID = 0x919eb8a95b9f8a07

func NewMakePet(s *capnp.Segment) (MakePet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return MakePet(st), err
}

func NewRootMakePet(s *capnp.Segment) (MakePet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return MakePet(st), err
}

func ReadRootMakePet(msg *capnp.Message) (MakePet, error) {
	root, err := msg.Root()
	return MakePet(root.Struct()), err
}

func (s MakePet) String() string {
	str, _ := text.Marshal(0x919eb8a95b9f8a07, capnp.Struct(s))
	return str
}

func (s MakePet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MakePet) DecodeFromPtr(p capnp.Ptr) MakePet {
	return MakePet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MakePet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MakePet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MakePet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MakePet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MakePet) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MakePet) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MakePet) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MakePet) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MakePet) Race() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MakePet) SetRace(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s MakePet) Texture() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s MakePet) SetTexture(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s MakePet) Pettype() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s MakePet) SetPettype(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s MakePet) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s MakePet) SetSize(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s MakePet) Type() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s MakePet) SetType(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s MakePet) MinDmg() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s MakePet) SetMinDmg(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s MakePet) MaxDmg() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s MakePet) SetMaxDmg(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// MakePet_List is a list of MakePet.
type MakePet_List = capnp.StructList[MakePet]

// NewMakePet creates a new list of MakePet.
func NewMakePet_List(s *capnp.Segment, sz int32) (MakePet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[MakePet](l), err
}

// MakePet_Future is a wrapper for a MakePet promised by a client call.
type MakePet_Future struct{ *capnp.Future }

func (f MakePet_Future) Struct() (MakePet, error) {
	p, err := f.Future.Ptr()
	return MakePet(p.Struct()), err
}

type GroundSpawn capnp.Struct

// GroundSpawn_TypeID is the unique identifier for the type GroundSpawn.
const GroundSpawn_TypeID = 0x88b187d6e94820bd

func NewGroundSpawn(s *capnp.Segment) (GroundSpawn, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return GroundSpawn(st), err
}

func NewRootGroundSpawn(s *capnp.Segment) (GroundSpawn, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return GroundSpawn(st), err
}

func ReadRootGroundSpawn(msg *capnp.Message) (GroundSpawn, error) {
	root, err := msg.Root()
	return GroundSpawn(root.Struct()), err
}

func (s GroundSpawn) String() string {
	str, _ := text.Marshal(0x88b187d6e94820bd, capnp.Struct(s))
	return str
}

func (s GroundSpawn) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroundSpawn) DecodeFromPtr(p capnp.Ptr) GroundSpawn {
	return GroundSpawn(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroundSpawn) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroundSpawn) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroundSpawn) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroundSpawn) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroundSpawn) MaxX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s GroundSpawn) SetMaxX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s GroundSpawn) MaxY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GroundSpawn) SetMaxY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GroundSpawn) MinX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s GroundSpawn) SetMinX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s GroundSpawn) MinY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s GroundSpawn) SetMinY(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s GroundSpawn) MaxZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s GroundSpawn) SetMaxZ(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s GroundSpawn) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s GroundSpawn) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s GroundSpawn) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroundSpawn) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroundSpawn) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroundSpawn) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroundSpawn) Item() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s GroundSpawn) SetItem(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s GroundSpawn) MaxAllowed() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s GroundSpawn) SetMaxAllowed(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s GroundSpawn) Respawntimer() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s GroundSpawn) SetRespawntimer(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// GroundSpawn_List is a list of GroundSpawn.
type GroundSpawn_List = capnp.StructList[GroundSpawn]

// NewGroundSpawn creates a new list of GroundSpawn.
func NewGroundSpawn_List(s *capnp.Segment, sz int32) (GroundSpawn_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[GroundSpawn](l), err
}

// GroundSpawn_Future is a wrapper for a GroundSpawn promised by a client call.
type GroundSpawn_Future struct{ *capnp.Future }

func (f GroundSpawn_Future) Struct() (GroundSpawn, error) {
	p, err := f.Future.Ptr()
	return GroundSpawn(p.Struct()), err
}

type GroundSpawns capnp.Struct

// GroundSpawns_TypeID is the unique identifier for the type GroundSpawns.
const GroundSpawns_TypeID = 0xdf6b29c6f745a197

func NewGroundSpawns(s *capnp.Segment) (GroundSpawns, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GroundSpawns(st), err
}

func NewRootGroundSpawns(s *capnp.Segment) (GroundSpawns, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GroundSpawns(st), err
}

func ReadRootGroundSpawns(msg *capnp.Message) (GroundSpawns, error) {
	root, err := msg.Root()
	return GroundSpawns(root.Struct()), err
}

func (s GroundSpawns) String() string {
	str, _ := text.Marshal(0xdf6b29c6f745a197, capnp.Struct(s))
	return str
}

func (s GroundSpawns) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroundSpawns) DecodeFromPtr(p capnp.Ptr) GroundSpawns {
	return GroundSpawns(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroundSpawns) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroundSpawns) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroundSpawns) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroundSpawns) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroundSpawns) Spawn() (GroundSpawn_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GroundSpawn_List(p.List()), err
}

func (s GroundSpawns) HasSpawn() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroundSpawns) SetSpawn(v GroundSpawn_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpawn sets the spawn field to a newly
// allocated GroundSpawn_List, preferring placement in s's segment.
func (s GroundSpawns) NewSpawn(n int32) (GroundSpawn_List, error) {
	l, err := NewGroundSpawn_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GroundSpawn_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// GroundSpawns_List is a list of GroundSpawns.
type GroundSpawns_List = capnp.StructList[GroundSpawns]

// NewGroundSpawns creates a new list of GroundSpawns.
func NewGroundSpawns_List(s *capnp.Segment, sz int32) (GroundSpawns_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[GroundSpawns](l), err
}

// GroundSpawns_Future is a wrapper for a GroundSpawns promised by a client call.
type GroundSpawns_Future struct{ *capnp.Future }

func (f GroundSpawns_Future) Struct() (GroundSpawns, error) {
	p, err := f.Future.Ptr()
	return GroundSpawns(p.Struct()), err
}

type ApproveZone capnp.Struct

// ApproveZone_TypeID is the unique identifier for the type ApproveZone.
const ApproveZone_TypeID = 0xb6c8b8141b0acfa3

func NewApproveZone(s *capnp.Segment) (ApproveZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ApproveZone(st), err
}

func NewRootApproveZone(s *capnp.Segment) (ApproveZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ApproveZone(st), err
}

func ReadRootApproveZone(msg *capnp.Message) (ApproveZone, error) {
	root, err := msg.Root()
	return ApproveZone(root.Struct()), err
}

func (s ApproveZone) String() string {
	str, _ := text.Marshal(0xb6c8b8141b0acfa3, capnp.Struct(s))
	return str
}

func (s ApproveZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApproveZone) DecodeFromPtr(p capnp.Ptr) ApproveZone {
	return ApproveZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApproveZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApproveZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApproveZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApproveZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApproveZone) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ApproveZone) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ApproveZone) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ApproveZone) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ApproveZone) Zoneid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ApproveZone) SetZoneid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ApproveZone) Approve() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ApproveZone) SetApprove(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ApproveZone_List is a list of ApproveZone.
type ApproveZone_List = capnp.StructList[ApproveZone]

// NewApproveZone creates a new list of ApproveZone.
func NewApproveZone_List(s *capnp.Segment, sz int32) (ApproveZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ApproveZone](l), err
}

// ApproveZone_Future is a wrapper for a ApproveZone promised by a client call.
type ApproveZone_Future struct{ *capnp.Future }

func (f ApproveZone_Future) Struct() (ApproveZone, error) {
	p, err := f.Future.Ptr()
	return ApproveZone(p.Struct()), err
}

type ZoneInSendName capnp.Struct

// ZoneInSendName_TypeID is the unique identifier for the type ZoneInSendName.
const ZoneInSendName_TypeID = 0xd75aa49a213b1c70

func NewZoneInSendName(s *capnp.Segment) (ZoneInSendName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZoneInSendName(st), err
}

func NewRootZoneInSendName(s *capnp.Segment) (ZoneInSendName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZoneInSendName(st), err
}

func ReadRootZoneInSendName(msg *capnp.Message) (ZoneInSendName, error) {
	root, err := msg.Root()
	return ZoneInSendName(root.Struct()), err
}

func (s ZoneInSendName) String() string {
	str, _ := text.Marshal(0xd75aa49a213b1c70, capnp.Struct(s))
	return str
}

func (s ZoneInSendName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneInSendName) DecodeFromPtr(p capnp.Ptr) ZoneInSendName {
	return ZoneInSendName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneInSendName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneInSendName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneInSendName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneInSendName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneInSendName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneInSendName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneInSendName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneInSendName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ZoneInSendName) Name2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ZoneInSendName) HasName2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ZoneInSendName) Name2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneInSendName) SetName2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ZoneInSendName_List is a list of ZoneInSendName.
type ZoneInSendName_List = capnp.StructList[ZoneInSendName]

// NewZoneInSendName creates a new list of ZoneInSendName.
func NewZoneInSendName_List(s *capnp.Segment, sz int32) (ZoneInSendName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ZoneInSendName](l), err
}

// ZoneInSendName_Future is a wrapper for a ZoneInSendName promised by a client call.
type ZoneInSendName_Future struct{ *capnp.Future }

func (f ZoneInSendName_Future) Struct() (ZoneInSendName, error) {
	p, err := f.Future.Ptr()
	return ZoneInSendName(p.Struct()), err
}

type ZoneInSendName2 capnp.Struct

// ZoneInSendName2_TypeID is the unique identifier for the type ZoneInSendName2.
const ZoneInSendName2_TypeID = 0xfb0629d3fd4188b0

func NewZoneInSendName2(s *capnp.Segment) (ZoneInSendName2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneInSendName2(st), err
}

func NewRootZoneInSendName2(s *capnp.Segment) (ZoneInSendName2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZoneInSendName2(st), err
}

func ReadRootZoneInSendName2(msg *capnp.Message) (ZoneInSendName2, error) {
	root, err := msg.Root()
	return ZoneInSendName2(root.Struct()), err
}

func (s ZoneInSendName2) String() string {
	str, _ := text.Marshal(0xfb0629d3fd4188b0, capnp.Struct(s))
	return str
}

func (s ZoneInSendName2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ZoneInSendName2) DecodeFromPtr(p capnp.Ptr) ZoneInSendName2 {
	return ZoneInSendName2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ZoneInSendName2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ZoneInSendName2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ZoneInSendName2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ZoneInSendName2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ZoneInSendName2) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ZoneInSendName2) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ZoneInSendName2) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ZoneInSendName2) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ZoneInSendName2_List is a list of ZoneInSendName2.
type ZoneInSendName2_List = capnp.StructList[ZoneInSendName2]

// NewZoneInSendName2 creates a new list of ZoneInSendName2.
func NewZoneInSendName2_List(s *capnp.Segment, sz int32) (ZoneInSendName2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ZoneInSendName2](l), err
}

// ZoneInSendName2_Future is a wrapper for a ZoneInSendName2 promised by a client call.
type ZoneInSendName2_Future struct{ *capnp.Future }

func (f ZoneInSendName2_Future) Struct() (ZoneInSendName2, error) {
	p, err := f.Future.Ptr()
	return ZoneInSendName2(p.Struct()), err
}

type StartTribute capnp.Struct

// StartTribute_TypeID is the unique identifier for the type StartTribute.
const StartTribute_TypeID = 0xeabe3c2d8178a916

func NewStartTribute(s *capnp.Segment) (StartTribute, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return StartTribute(st), err
}

func NewRootStartTribute(s *capnp.Segment) (StartTribute, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return StartTribute(st), err
}

func ReadRootStartTribute(msg *capnp.Message) (StartTribute, error) {
	root, err := msg.Root()
	return StartTribute(root.Struct()), err
}

func (s StartTribute) String() string {
	str, _ := text.Marshal(0xeabe3c2d8178a916, capnp.Struct(s))
	return str
}

func (s StartTribute) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StartTribute) DecodeFromPtr(p capnp.Ptr) StartTribute {
	return StartTribute(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StartTribute) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StartTribute) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StartTribute) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StartTribute) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StartTribute) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s StartTribute) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s StartTribute) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s StartTribute) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s StartTribute) Response() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s StartTribute) SetResponse(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// StartTribute_List is a list of StartTribute.
type StartTribute_List = capnp.StructList[StartTribute]

// NewStartTribute creates a new list of StartTribute.
func NewStartTribute_List(s *capnp.Segment, sz int32) (StartTribute_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[StartTribute](l), err
}

// StartTribute_Future is a wrapper for a StartTribute promised by a client call.
type StartTribute_Future struct{ *capnp.Future }

func (f StartTribute_Future) Struct() (StartTribute, error) {
	p, err := f.Future.Ptr()
	return StartTribute(p.Struct()), err
}

type TributeLevel capnp.Struct

// TributeLevel_TypeID is the unique identifier for the type TributeLevel.
const TributeLevel_TypeID = 0xcab56e851899421c

func NewTributeLevel(s *capnp.Segment) (TributeLevel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeLevel(st), err
}

func NewRootTributeLevel(s *capnp.Segment) (TributeLevel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeLevel(st), err
}

func ReadRootTributeLevel(msg *capnp.Message) (TributeLevel, error) {
	root, err := msg.Root()
	return TributeLevel(root.Struct()), err
}

func (s TributeLevel) String() string {
	str, _ := text.Marshal(0xcab56e851899421c, capnp.Struct(s))
	return str
}

func (s TributeLevel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeLevel) DecodeFromPtr(p capnp.Ptr) TributeLevel {
	return TributeLevel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeLevel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeLevel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeLevel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeLevel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeLevel) Level() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeLevel) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeLevel) TributeItemId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeLevel) SetTributeItemId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeLevel) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeLevel) SetCost(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TributeLevel_List is a list of TributeLevel.
type TributeLevel_List = capnp.StructList[TributeLevel]

// NewTributeLevel creates a new list of TributeLevel.
func NewTributeLevel_List(s *capnp.Segment, sz int32) (TributeLevel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeLevel](l), err
}

// TributeLevel_Future is a wrapper for a TributeLevel promised by a client call.
type TributeLevel_Future struct{ *capnp.Future }

func (f TributeLevel_Future) Struct() (TributeLevel, error) {
	p, err := f.Future.Ptr()
	return TributeLevel(p.Struct()), err
}

type TributeAbility capnp.Struct

// TributeAbility_TypeID is the unique identifier for the type TributeAbility.
const TributeAbility_TypeID = 0x9f29336af3ac4f9f

func NewTributeAbility(s *capnp.Segment) (TributeAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeAbility(st), err
}

func NewRootTributeAbility(s *capnp.Segment) (TributeAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeAbility(st), err
}

func ReadRootTributeAbility(msg *capnp.Message) (TributeAbility, error) {
	root, err := msg.Root()
	return TributeAbility(root.Struct()), err
}

func (s TributeAbility) String() string {
	str, _ := text.Marshal(0x9f29336af3ac4f9f, capnp.Struct(s))
	return str
}

func (s TributeAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeAbility) DecodeFromPtr(p capnp.Ptr) TributeAbility {
	return TributeAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeAbility) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeAbility) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeAbility) TierCount() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeAbility) SetTierCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeAbility) Tiers() (TributeLevel_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TributeLevel_List(p.List()), err
}

func (s TributeAbility) HasTiers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TributeAbility) SetTiers(v TributeLevel_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTiers sets the tiers field to a newly
// allocated TributeLevel_List, preferring placement in s's segment.
func (s TributeAbility) NewTiers(n int32) (TributeLevel_List, error) {
	l, err := NewTributeLevel_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TributeLevel_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TributeAbility) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TributeAbility) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TributeAbility) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TributeAbility) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// TributeAbility_List is a list of TributeAbility.
type TributeAbility_List = capnp.StructList[TributeAbility]

// NewTributeAbility creates a new list of TributeAbility.
func NewTributeAbility_List(s *capnp.Segment, sz int32) (TributeAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[TributeAbility](l), err
}

// TributeAbility_Future is a wrapper for a TributeAbility promised by a client call.
type TributeAbility_Future struct{ *capnp.Future }

func (f TributeAbility_Future) Struct() (TributeAbility, error) {
	p, err := f.Future.Ptr()
	return TributeAbility(p.Struct()), err
}

type GuildTributeAbility capnp.Struct

// GuildTributeAbility_TypeID is the unique identifier for the type GuildTributeAbility.
const GuildTributeAbility_TypeID = 0xf6ebf8b8d23d794f

func NewGuildTributeAbility(s *capnp.Segment) (GuildTributeAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildTributeAbility(st), err
}

func NewRootGuildTributeAbility(s *capnp.Segment) (GuildTributeAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GuildTributeAbility(st), err
}

func ReadRootGuildTributeAbility(msg *capnp.Message) (GuildTributeAbility, error) {
	root, err := msg.Root()
	return GuildTributeAbility(root.Struct()), err
}

func (s GuildTributeAbility) String() string {
	str, _ := text.Marshal(0xf6ebf8b8d23d794f, capnp.Struct(s))
	return str
}

func (s GuildTributeAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildTributeAbility) DecodeFromPtr(p capnp.Ptr) GuildTributeAbility {
	return GuildTributeAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildTributeAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildTributeAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildTributeAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildTributeAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildTributeAbility) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildTributeAbility) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildTributeAbility) Ability() (TributeAbility, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TributeAbility(p.Struct()), err
}

func (s GuildTributeAbility) HasAbility() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildTributeAbility) SetAbility(v TributeAbility) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAbility sets the ability field to a newly
// allocated TributeAbility struct, preferring placement in s's segment.
func (s GuildTributeAbility) NewAbility() (TributeAbility, error) {
	ss, err := NewTributeAbility(capnp.Struct(s).Segment())
	if err != nil {
		return TributeAbility{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GuildTributeAbility_List is a list of GuildTributeAbility.
type GuildTributeAbility_List = capnp.StructList[GuildTributeAbility]

// NewGuildTributeAbility creates a new list of GuildTributeAbility.
func NewGuildTributeAbility_List(s *capnp.Segment, sz int32) (GuildTributeAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[GuildTributeAbility](l), err
}

// GuildTributeAbility_Future is a wrapper for a GuildTributeAbility promised by a client call.
type GuildTributeAbility_Future struct{ *capnp.Future }

func (f GuildTributeAbility_Future) Struct() (GuildTributeAbility, error) {
	p, err := f.Future.Ptr()
	return GuildTributeAbility(p.Struct()), err
}
func (p GuildTributeAbility_Future) Ability() TributeAbility_Future {
	return TributeAbility_Future{Future: p.Future.Field(0, nil)}
}

type SelectTributeReq capnp.Struct

// SelectTributeReq_TypeID is the unique identifier for the type SelectTributeReq.
const SelectTributeReq_TypeID = 0xb3f8feecbb635492

func NewSelectTributeReq(s *capnp.Segment) (SelectTributeReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SelectTributeReq(st), err
}

func NewRootSelectTributeReq(s *capnp.Segment) (SelectTributeReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SelectTributeReq(st), err
}

func ReadRootSelectTributeReq(msg *capnp.Message) (SelectTributeReq, error) {
	root, err := msg.Root()
	return SelectTributeReq(root.Struct()), err
}

func (s SelectTributeReq) String() string {
	str, _ := text.Marshal(0xb3f8feecbb635492, capnp.Struct(s))
	return str
}

func (s SelectTributeReq) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SelectTributeReq) DecodeFromPtr(p capnp.Ptr) SelectTributeReq {
	return SelectTributeReq(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SelectTributeReq) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SelectTributeReq) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SelectTributeReq) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SelectTributeReq) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SelectTributeReq) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SelectTributeReq) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SelectTributeReq) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SelectTributeReq) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SelectTributeReq_List is a list of SelectTributeReq.
type SelectTributeReq_List = capnp.StructList[SelectTributeReq]

// NewSelectTributeReq creates a new list of SelectTributeReq.
func NewSelectTributeReq_List(s *capnp.Segment, sz int32) (SelectTributeReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SelectTributeReq](l), err
}

// SelectTributeReq_Future is a wrapper for a SelectTributeReq promised by a client call.
type SelectTributeReq_Future struct{ *capnp.Future }

func (f SelectTributeReq_Future) Struct() (SelectTributeReq, error) {
	p, err := f.Future.Ptr()
	return SelectTributeReq(p.Struct()), err
}

type SelectTributeReply capnp.Struct

// SelectTributeReply_TypeID is the unique identifier for the type SelectTributeReply.
const SelectTributeReply_TypeID = 0xb176d4b98cf5afa6

func NewSelectTributeReply(s *capnp.Segment) (SelectTributeReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SelectTributeReply(st), err
}

func NewRootSelectTributeReply(s *capnp.Segment) (SelectTributeReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SelectTributeReply(st), err
}

func ReadRootSelectTributeReply(msg *capnp.Message) (SelectTributeReply, error) {
	root, err := msg.Root()
	return SelectTributeReply(root.Struct()), err
}

func (s SelectTributeReply) String() string {
	str, _ := text.Marshal(0xb176d4b98cf5afa6, capnp.Struct(s))
	return str
}

func (s SelectTributeReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SelectTributeReply) DecodeFromPtr(p capnp.Ptr) SelectTributeReply {
	return SelectTributeReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SelectTributeReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SelectTributeReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SelectTributeReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SelectTributeReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SelectTributeReply) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SelectTributeReply) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SelectTributeReply) TributeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SelectTributeReply) SetTributeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SelectTributeReply) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SelectTributeReply) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SelectTributeReply) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SelectTributeReply) SetDesc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// SelectTributeReply_List is a list of SelectTributeReply.
type SelectTributeReply_List = capnp.StructList[SelectTributeReply]

// NewSelectTributeReply creates a new list of SelectTributeReply.
func NewSelectTributeReply_List(s *capnp.Segment, sz int32) (SelectTributeReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SelectTributeReply](l), err
}

// SelectTributeReply_Future is a wrapper for a SelectTributeReply promised by a client call.
type SelectTributeReply_Future struct{ *capnp.Future }

func (f SelectTributeReply_Future) Struct() (SelectTributeReply, error) {
	p, err := f.Future.Ptr()
	return SelectTributeReply(p.Struct()), err
}

type TributeInfo capnp.Struct

// TributeInfo_TypeID is the unique identifier for the type TributeInfo.
const TributeInfo_TypeID = 0xd5db12ce6b4738ee

func NewTributeInfo(s *capnp.Segment) (TributeInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeInfo(st), err
}

func NewRootTributeInfo(s *capnp.Segment) (TributeInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return TributeInfo(st), err
}

func ReadRootTributeInfo(msg *capnp.Message) (TributeInfo, error) {
	root, err := msg.Root()
	return TributeInfo(root.Struct()), err
}

func (s TributeInfo) String() string {
	str, _ := text.Marshal(0xd5db12ce6b4738ee, capnp.Struct(s))
	return str
}

func (s TributeInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeInfo) DecodeFromPtr(p capnp.Ptr) TributeInfo {
	return TributeInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeInfo) Active() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeInfo) SetActive(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeInfo) Tributes() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s TributeInfo) HasTributes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TributeInfo) SetTributes(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTributes sets the tributes field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TributeInfo) NewTributes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TributeInfo) Tiers() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s TributeInfo) HasTiers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TributeInfo) SetTiers(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewTiers sets the tiers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TributeInfo) NewTiers(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s TributeInfo) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeInfo) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TributeInfo_List is a list of TributeInfo.
type TributeInfo_List = capnp.StructList[TributeInfo]

// NewTributeInfo creates a new list of TributeInfo.
func NewTributeInfo_List(s *capnp.Segment, sz int32) (TributeInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[TributeInfo](l), err
}

// TributeInfo_Future is a wrapper for a TributeInfo promised by a client call.
type TributeInfo_Future struct{ *capnp.Future }

func (f TributeInfo_Future) Struct() (TributeInfo, error) {
	p, err := f.Future.Ptr()
	return TributeInfo(p.Struct()), err
}

type TributeItem capnp.Struct

// TributeItem_TypeID is the unique identifier for the type TributeItem.
const TributeItem_TypeID = 0xb6db3a4bd35d7d66

func NewTributeItem(s *capnp.Segment) (TributeItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeItem(st), err
}

func NewRootTributeItem(s *capnp.Segment) (TributeItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeItem(st), err
}

func ReadRootTributeItem(msg *capnp.Message) (TributeItem, error) {
	root, err := msg.Root()
	return TributeItem(root.Struct()), err
}

func (s TributeItem) String() string {
	str, _ := text.Marshal(0xb6db3a4bd35d7d66, capnp.Struct(s))
	return str
}

func (s TributeItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeItem) DecodeFromPtr(p capnp.Ptr) TributeItem {
	return TributeItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeItem) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeItem) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeItem) Quantity() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeItem) SetQuantity(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeItem) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeItem) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TributeItem) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TributeItem) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// TributeItem_List is a list of TributeItem.
type TributeItem_List = capnp.StructList[TributeItem]

// NewTributeItem creates a new list of TributeItem.
func NewTributeItem_List(s *capnp.Segment, sz int32) (TributeItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeItem](l), err
}

// TributeItem_Future is a wrapper for a TributeItem promised by a client call.
type TributeItem_Future struct{ *capnp.Future }

func (f TributeItem_Future) Struct() (TributeItem, error) {
	p, err := f.Future.Ptr()
	return TributeItem(p.Struct()), err
}

type TributePoint capnp.Struct

// TributePoint_TypeID is the unique identifier for the type TributePoint.
const TributePoint_TypeID = 0xf1f7baa2935a0cd7

func NewTributePoint(s *capnp.Segment) (TributePoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TributePoint(st), err
}

func NewRootTributePoint(s *capnp.Segment) (TributePoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TributePoint(st), err
}

func ReadRootTributePoint(msg *capnp.Message) (TributePoint, error) {
	root, err := msg.Root()
	return TributePoint(root.Struct()), err
}

func (s TributePoint) String() string {
	str, _ := text.Marshal(0xf1f7baa2935a0cd7, capnp.Struct(s))
	return str
}

func (s TributePoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributePoint) DecodeFromPtr(p capnp.Ptr) TributePoint {
	return TributePoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributePoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributePoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributePoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributePoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributePoint) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributePoint) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributePoint) CareerTributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributePoint) SetCareerTributePoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TributePoint_List is a list of TributePoint.
type TributePoint_List = capnp.StructList[TributePoint]

// NewTributePoint creates a new list of TributePoint.
func NewTributePoint_List(s *capnp.Segment, sz int32) (TributePoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TributePoint](l), err
}

// TributePoint_Future is a wrapper for a TributePoint promised by a client call.
type TributePoint_Future struct{ *capnp.Future }

func (f TributePoint_Future) Struct() (TributePoint, error) {
	p, err := f.Future.Ptr()
	return TributePoint(p.Struct()), err
}

type TributeMoney capnp.Struct

// TributeMoney_TypeID is the unique identifier for the type TributeMoney.
const TributeMoney_TypeID = 0xb66a9193d2300649

func NewTributeMoney(s *capnp.Segment) (TributeMoney, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeMoney(st), err
}

func NewRootTributeMoney(s *capnp.Segment) (TributeMoney, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TributeMoney(st), err
}

func ReadRootTributeMoney(msg *capnp.Message) (TributeMoney, error) {
	root, err := msg.Root()
	return TributeMoney(root.Struct()), err
}

func (s TributeMoney) String() string {
	str, _ := text.Marshal(0xb66a9193d2300649, capnp.Struct(s))
	return str
}

func (s TributeMoney) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TributeMoney) DecodeFromPtr(p capnp.Ptr) TributeMoney {
	return TributeMoney(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TributeMoney) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TributeMoney) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TributeMoney) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TributeMoney) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TributeMoney) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TributeMoney) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TributeMoney) TributeMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TributeMoney) SetTributeMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TributeMoney) TributePoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TributeMoney) SetTributePoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// TributeMoney_List is a list of TributeMoney.
type TributeMoney_List = capnp.StructList[TributeMoney]

// NewTributeMoney creates a new list of TributeMoney.
func NewTributeMoney_List(s *capnp.Segment, sz int32) (TributeMoney_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TributeMoney](l), err
}

// TributeMoney_Future is a wrapper for a TributeMoney promised by a client call.
type TributeMoney_Future struct{ *capnp.Future }

func (f TributeMoney_Future) Struct() (TributeMoney, error) {
	p, err := f.Future.Ptr()
	return TributeMoney(p.Struct()), err
}

type Split capnp.Struct

// Split_TypeID is the unique identifier for the type Split.
const Split_TypeID = 0xc2f958e3df4726c9

func NewSplit(s *capnp.Segment) (Split, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Split(st), err
}

func NewRootSplit(s *capnp.Segment) (Split, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Split(st), err
}

func ReadRootSplit(msg *capnp.Message) (Split, error) {
	root, err := msg.Root()
	return Split(root.Struct()), err
}

func (s Split) String() string {
	str, _ := text.Marshal(0xc2f958e3df4726c9, capnp.Struct(s))
	return str
}

func (s Split) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Split) DecodeFromPtr(p capnp.Ptr) Split {
	return Split(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Split) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Split) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Split) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Split) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Split) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Split) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Split) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Split) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Split) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Split) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s Split) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s Split) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// Split_List is a list of Split.
type Split_List = capnp.StructList[Split]

// NewSplit creates a new list of Split.
func NewSplit_List(s *capnp.Segment, sz int32) (Split_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Split](l), err
}

// Split_Future is a wrapper for a Split promised by a client call.
type Split_Future struct{ *capnp.Future }

func (f Split_Future) Struct() (Split, error) {
	p, err := f.Future.Ptr()
	return Split(p.Struct()), err
}

type NewCombine capnp.Struct

// NewCombine_TypeID is the unique identifier for the type NewCombine.
const NewCombine_TypeID = 0xf8dcc5cd22965ff5

func NewNewCombine(s *capnp.Segment) (NewCombine, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NewCombine(st), err
}

func NewRootNewCombine(s *capnp.Segment) (NewCombine, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NewCombine(st), err
}

func ReadRootNewCombine(msg *capnp.Message) (NewCombine, error) {
	root, err := msg.Root()
	return NewCombine(root.Struct()), err
}

func (s NewCombine) String() string {
	str, _ := text.Marshal(0xf8dcc5cd22965ff5, capnp.Struct(s))
	return str
}

func (s NewCombine) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NewCombine) DecodeFromPtr(p capnp.Ptr) NewCombine {
	return NewCombine(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NewCombine) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NewCombine) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NewCombine) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NewCombine) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NewCombine) ContainerSlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NewCombine) SetContainerSlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NewCombine) GuildtributeSlot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NewCombine) SetGuildtributeSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// NewCombine_List is a list of NewCombine.
type NewCombine_List = capnp.StructList[NewCombine]

// NewNewCombine creates a new list of NewCombine.
func NewNewCombine_List(s *capnp.Segment, sz int32) (NewCombine_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[NewCombine](l), err
}

// NewCombine_Future is a wrapper for a NewCombine promised by a client call.
type NewCombine_Future struct{ *capnp.Future }

func (f NewCombine_Future) Struct() (NewCombine, error) {
	p, err := f.Future.Ptr()
	return NewCombine(p.Struct()), err
}

type TradeskillFavorites capnp.Struct

// TradeskillFavorites_TypeID is the unique identifier for the type TradeskillFavorites.
const TradeskillFavorites_TypeID = 0xf42a44d24baf1780

func NewTradeskillFavorites(s *capnp.Segment) (TradeskillFavorites, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TradeskillFavorites(st), err
}

func NewRootTradeskillFavorites(s *capnp.Segment) (TradeskillFavorites, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TradeskillFavorites(st), err
}

func ReadRootTradeskillFavorites(msg *capnp.Message) (TradeskillFavorites, error) {
	root, err := msg.Root()
	return TradeskillFavorites(root.Struct()), err
}

func (s TradeskillFavorites) String() string {
	str, _ := text.Marshal(0xf42a44d24baf1780, capnp.Struct(s))
	return str
}

func (s TradeskillFavorites) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TradeskillFavorites) DecodeFromPtr(p capnp.Ptr) TradeskillFavorites {
	return TradeskillFavorites(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TradeskillFavorites) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TradeskillFavorites) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TradeskillFavorites) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TradeskillFavorites) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TradeskillFavorites) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TradeskillFavorites) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TradeskillFavorites) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TradeskillFavorites) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TradeskillFavorites) FavoriteRecipes() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s TradeskillFavorites) HasFavoriteRecipes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TradeskillFavorites) SetFavoriteRecipes(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFavoriteRecipes sets the favoriteRecipes field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s TradeskillFavorites) NewFavoriteRecipes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TradeskillFavorites_List is a list of TradeskillFavorites.
type TradeskillFavorites_List = capnp.StructList[TradeskillFavorites]

// NewTradeskillFavorites creates a new list of TradeskillFavorites.
func NewTradeskillFavorites_List(s *capnp.Segment, sz int32) (TradeskillFavorites_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TradeskillFavorites](l), err
}

// TradeskillFavorites_Future is a wrapper for a TradeskillFavorites promised by a client call.
type TradeskillFavorites_Future struct{ *capnp.Future }

func (f TradeskillFavorites_Future) Struct() (TradeskillFavorites, error) {
	p, err := f.Future.Ptr()
	return TradeskillFavorites(p.Struct()), err
}

type RecipesSearch capnp.Struct

// RecipesSearch_TypeID is the unique identifier for the type RecipesSearch.
const RecipesSearch_TypeID = 0xe10a56be889c8d63

func NewRecipesSearch(s *capnp.Segment) (RecipesSearch, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RecipesSearch(st), err
}

func NewRootRecipesSearch(s *capnp.Segment) (RecipesSearch, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RecipesSearch(st), err
}

func ReadRootRecipesSearch(msg *capnp.Message) (RecipesSearch, error) {
	root, err := msg.Root()
	return RecipesSearch(root.Struct()), err
}

func (s RecipesSearch) String() string {
	str, _ := text.Marshal(0xe10a56be889c8d63, capnp.Struct(s))
	return str
}

func (s RecipesSearch) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipesSearch) DecodeFromPtr(p capnp.Ptr) RecipesSearch {
	return RecipesSearch(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipesSearch) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipesSearch) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipesSearch) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipesSearch) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipesSearch) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipesSearch) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipesSearch) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipesSearch) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipesSearch) Mintrivial() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipesSearch) SetMintrivial(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipesSearch) Maxtrivial() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipesSearch) SetMaxtrivial(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RecipesSearch) Query() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RecipesSearch) HasQuery() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RecipesSearch) QueryBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RecipesSearch) SetQuery(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RecipesSearch_List is a list of RecipesSearch.
type RecipesSearch_List = capnp.StructList[RecipesSearch]

// NewRecipesSearch creates a new list of RecipesSearch.
func NewRecipesSearch_List(s *capnp.Segment, sz int32) (RecipesSearch_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RecipesSearch](l), err
}

// RecipesSearch_Future is a wrapper for a RecipesSearch promised by a client call.
type RecipesSearch_Future struct{ *capnp.Future }

func (f RecipesSearch_Future) Struct() (RecipesSearch, error) {
	p, err := f.Future.Ptr()
	return RecipesSearch(p.Struct()), err
}

type RecipeReply capnp.Struct

// RecipeReply_TypeID is the unique identifier for the type RecipeReply.
const RecipeReply_TypeID = 0xdd1f5357c25cc3b7

func NewRecipeReply(s *capnp.Segment) (RecipeReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RecipeReply(st), err
}

func NewRootRecipeReply(s *capnp.Segment) (RecipeReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RecipeReply(st), err
}

func ReadRootRecipeReply(msg *capnp.Message) (RecipeReply, error) {
	root, err := msg.Root()
	return RecipeReply(root.Struct()), err
}

func (s RecipeReply) String() string {
	str, _ := text.Marshal(0xdd1f5357c25cc3b7, capnp.Struct(s))
	return str
}

func (s RecipeReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipeReply) DecodeFromPtr(p capnp.Ptr) RecipeReply {
	return RecipeReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipeReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipeReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipeReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipeReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipeReply) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipeReply) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipeReply) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipeReply) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipeReply) ComponentCount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipeReply) SetComponentCount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipeReply) RecipeId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipeReply) SetRecipeId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RecipeReply) Trivial() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RecipeReply) SetTrivial(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RecipeReply) RecipeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RecipeReply) HasRecipeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RecipeReply) RecipeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RecipeReply) SetRecipeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// RecipeReply_List is a list of RecipeReply.
type RecipeReply_List = capnp.StructList[RecipeReply]

// NewRecipeReply creates a new list of RecipeReply.
func NewRecipeReply_List(s *capnp.Segment, sz int32) (RecipeReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RecipeReply](l), err
}

// RecipeReply_Future is a wrapper for a RecipeReply promised by a client call.
type RecipeReply_Future struct{ *capnp.Future }

func (f RecipeReply_Future) Struct() (RecipeReply, error) {
	p, err := f.Future.Ptr()
	return RecipeReply(p.Struct()), err
}

type RecipeAutoCombine capnp.Struct

// RecipeAutoCombine_TypeID is the unique identifier for the type RecipeAutoCombine.
const RecipeAutoCombine_TypeID = 0xc49c789ac9b97fbe

func NewRecipeAutoCombine(s *capnp.Segment) (RecipeAutoCombine, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RecipeAutoCombine(st), err
}

func NewRootRecipeAutoCombine(s *capnp.Segment) (RecipeAutoCombine, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RecipeAutoCombine(st), err
}

func ReadRootRecipeAutoCombine(msg *capnp.Message) (RecipeAutoCombine, error) {
	root, err := msg.Root()
	return RecipeAutoCombine(root.Struct()), err
}

func (s RecipeAutoCombine) String() string {
	str, _ := text.Marshal(0xc49c789ac9b97fbe, capnp.Struct(s))
	return str
}

func (s RecipeAutoCombine) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RecipeAutoCombine) DecodeFromPtr(p capnp.Ptr) RecipeAutoCombine {
	return RecipeAutoCombine(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RecipeAutoCombine) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RecipeAutoCombine) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RecipeAutoCombine) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RecipeAutoCombine) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RecipeAutoCombine) ObjectType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RecipeAutoCombine) SetObjectType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RecipeAutoCombine) SomeId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RecipeAutoCombine) SetSomeId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RecipeAutoCombine) RecipeId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RecipeAutoCombine) SetRecipeId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RecipeAutoCombine) ReplyCode() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RecipeAutoCombine) SetReplyCode(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// RecipeAutoCombine_List is a list of RecipeAutoCombine.
type RecipeAutoCombine_List = capnp.StructList[RecipeAutoCombine]

// NewRecipeAutoCombine creates a new list of RecipeAutoCombine.
func NewRecipeAutoCombine_List(s *capnp.Segment, sz int32) (RecipeAutoCombine_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[RecipeAutoCombine](l), err
}

// RecipeAutoCombine_Future is a wrapper for a RecipeAutoCombine promised by a client call.
type RecipeAutoCombine_Future struct{ *capnp.Future }

func (f RecipeAutoCombine_Future) Struct() (RecipeAutoCombine, error) {
	p, err := f.Future.Ptr()
	return RecipeAutoCombine(p.Struct()), err
}

type LevelAppearance capnp.Struct

// LevelAppearance_TypeID is the unique identifier for the type LevelAppearance.
const LevelAppearance_TypeID = 0xd74a1be2552282a4

func NewLevelAppearance(s *capnp.Segment) (LevelAppearance, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return LevelAppearance(st), err
}

func NewRootLevelAppearance(s *capnp.Segment) (LevelAppearance, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return LevelAppearance(st), err
}

func ReadRootLevelAppearance(msg *capnp.Message) (LevelAppearance, error) {
	root, err := msg.Root()
	return LevelAppearance(root.Struct()), err
}

func (s LevelAppearance) String() string {
	str, _ := text.Marshal(0xd74a1be2552282a4, capnp.Struct(s))
	return str
}

func (s LevelAppearance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LevelAppearance) DecodeFromPtr(p capnp.Ptr) LevelAppearance {
	return LevelAppearance(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LevelAppearance) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LevelAppearance) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LevelAppearance) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LevelAppearance) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LevelAppearance) SpawnId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LevelAppearance) SetSpawnId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LevelAppearance) Parm1() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LevelAppearance) SetParm1(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LevelAppearance) Value1a() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LevelAppearance) SetValue1a(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LevelAppearance) Value1b() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LevelAppearance) SetValue1b(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LevelAppearance) Parm2() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LevelAppearance) SetParm2(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LevelAppearance) Value2a() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LevelAppearance) SetValue2a(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s LevelAppearance) Value2b() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s LevelAppearance) SetValue2b(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s LevelAppearance) Parm3() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s LevelAppearance) SetParm3(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s LevelAppearance) Value3a() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s LevelAppearance) SetValue3a(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s LevelAppearance) Value3b() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s LevelAppearance) SetValue3b(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s LevelAppearance) Parm4() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s LevelAppearance) SetParm4(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s LevelAppearance) Value4a() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s LevelAppearance) SetValue4a(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s LevelAppearance) Value4b() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s LevelAppearance) SetValue4b(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s LevelAppearance) Parm5() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s LevelAppearance) SetParm5(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s LevelAppearance) Value5a() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s LevelAppearance) SetValue5a(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s LevelAppearance) Value5b() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s LevelAppearance) SetValue5b(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// LevelAppearance_List is a list of LevelAppearance.
type LevelAppearance_List = capnp.StructList[LevelAppearance]

// NewLevelAppearance creates a new list of LevelAppearance.
func NewLevelAppearance_List(s *capnp.Segment, sz int32) (LevelAppearance_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[LevelAppearance](l), err
}

// LevelAppearance_Future is a wrapper for a LevelAppearance promised by a client call.
type LevelAppearance_Future struct{ *capnp.Future }

func (f LevelAppearance_Future) Struct() (LevelAppearance, error) {
	p, err := f.Future.Ptr()
	return LevelAppearance(p.Struct()), err
}

type MerchantList capnp.Struct

// MerchantList_TypeID is the unique identifier for the type MerchantList.
const MerchantList_TypeID = 0xd9cddf13c207ce2d

func NewMerchantList(s *capnp.Segment) (MerchantList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantList(st), err
}

func NewRootMerchantList(s *capnp.Segment) (MerchantList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MerchantList(st), err
}

func ReadRootMerchantList(msg *capnp.Message) (MerchantList, error) {
	root, err := msg.Root()
	return MerchantList(root.Struct()), err
}

func (s MerchantList) String() string {
	str, _ := text.Marshal(0xd9cddf13c207ce2d, capnp.Struct(s))
	return str
}

func (s MerchantList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MerchantList) DecodeFromPtr(p capnp.Ptr) MerchantList {
	return MerchantList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MerchantList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MerchantList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MerchantList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MerchantList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MerchantList) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MerchantList) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MerchantList) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s MerchantList) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s MerchantList) Item() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s MerchantList) SetItem(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// MerchantList_List is a list of MerchantList.
type MerchantList_List = capnp.StructList[MerchantList]

// NewMerchantList creates a new list of MerchantList.
func NewMerchantList_List(s *capnp.Segment, sz int32) (MerchantList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MerchantList](l), err
}

// MerchantList_Future is a wrapper for a MerchantList promised by a client call.
type MerchantList_Future struct{ *capnp.Future }

func (f MerchantList_Future) Struct() (MerchantList, error) {
	p, err := f.Future.Ptr()
	return MerchantList(p.Struct()), err
}

type TempMerchantList capnp.Struct

// TempMerchantList_TypeID is the unique identifier for the type TempMerchantList.
const TempMerchantList_TypeID = 0xd6aded5b005488d5

func NewTempMerchantList(s *capnp.Segment) (TempMerchantList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TempMerchantList(st), err
}

func NewRootTempMerchantList(s *capnp.Segment) (TempMerchantList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return TempMerchantList(st), err
}

func ReadRootTempMerchantList(msg *capnp.Message) (TempMerchantList, error) {
	root, err := msg.Root()
	return TempMerchantList(root.Struct()), err
}

func (s TempMerchantList) String() string {
	str, _ := text.Marshal(0xd6aded5b005488d5, capnp.Struct(s))
	return str
}

func (s TempMerchantList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TempMerchantList) DecodeFromPtr(p capnp.Ptr) TempMerchantList {
	return TempMerchantList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TempMerchantList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TempMerchantList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TempMerchantList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TempMerchantList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TempMerchantList) Npcid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TempMerchantList) SetNpcid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TempMerchantList) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TempMerchantList) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TempMerchantList) Item() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TempMerchantList) SetItem(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TempMerchantList) Charges() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TempMerchantList) SetCharges(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TempMerchantList) Origslot() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TempMerchantList) SetOrigslot(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// TempMerchantList_List is a list of TempMerchantList.
type TempMerchantList_List = capnp.StructList[TempMerchantList]

// NewTempMerchantList creates a new list of TempMerchantList.
func NewTempMerchantList_List(s *capnp.Segment, sz int32) (TempMerchantList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[TempMerchantList](l), err
}

// TempMerchantList_Future is a wrapper for a TempMerchantList promised by a client call.
type TempMerchantList_Future struct{ *capnp.Future }

func (f TempMerchantList_Future) Struct() (TempMerchantList, error) {
	p, err := f.Future.Ptr()
	return TempMerchantList(p.Struct()), err
}

type FindPersonPoint capnp.Struct

// FindPersonPoint_TypeID is the unique identifier for the type FindPersonPoint.
const FindPersonPoint_TypeID = 0xcddf6dbc366deb3e

func NewFindPersonPoint(s *capnp.Segment) (FindPersonPoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return FindPersonPoint(st), err
}

func NewRootFindPersonPoint(s *capnp.Segment) (FindPersonPoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return FindPersonPoint(st), err
}

func ReadRootFindPersonPoint(msg *capnp.Message) (FindPersonPoint, error) {
	root, err := msg.Root()
	return FindPersonPoint(root.Struct()), err
}

func (s FindPersonPoint) String() string {
	str, _ := text.Marshal(0xcddf6dbc366deb3e, capnp.Struct(s))
	return str
}

func (s FindPersonPoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonPoint) DecodeFromPtr(p capnp.Ptr) FindPersonPoint {
	return FindPersonPoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonPoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonPoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonPoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonPoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonPoint) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s FindPersonPoint) SetY(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s FindPersonPoint) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s FindPersonPoint) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s FindPersonPoint) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s FindPersonPoint) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// FindPersonPoint_List is a list of FindPersonPoint.
type FindPersonPoint_List = capnp.StructList[FindPersonPoint]

// NewFindPersonPoint creates a new list of FindPersonPoint.
func NewFindPersonPoint_List(s *capnp.Segment, sz int32) (FindPersonPoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[FindPersonPoint](l), err
}

// FindPersonPoint_Future is a wrapper for a FindPersonPoint promised by a client call.
type FindPersonPoint_Future struct{ *capnp.Future }

func (f FindPersonPoint_Future) Struct() (FindPersonPoint, error) {
	p, err := f.Future.Ptr()
	return FindPersonPoint(p.Struct()), err
}

type FindPersonRequest capnp.Struct

// FindPersonRequest_TypeID is the unique identifier for the type FindPersonRequest.
const FindPersonRequest_TypeID = 0xb976985727e64f4f

func NewFindPersonRequest(s *capnp.Segment) (FindPersonRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FindPersonRequest(st), err
}

func NewRootFindPersonRequest(s *capnp.Segment) (FindPersonRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FindPersonRequest(st), err
}

func ReadRootFindPersonRequest(msg *capnp.Message) (FindPersonRequest, error) {
	root, err := msg.Root()
	return FindPersonRequest(root.Struct()), err
}

func (s FindPersonRequest) String() string {
	str, _ := text.Marshal(0xb976985727e64f4f, capnp.Struct(s))
	return str
}

func (s FindPersonRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonRequest) DecodeFromPtr(p capnp.Ptr) FindPersonRequest {
	return FindPersonRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonRequest) NpcId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FindPersonRequest) SetNpcId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FindPersonRequest) ClientPos() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s FindPersonRequest) SetClientPos(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// FindPersonRequest_List is a list of FindPersonRequest.
type FindPersonRequest_List = capnp.StructList[FindPersonRequest]

// NewFindPersonRequest creates a new list of FindPersonRequest.
func NewFindPersonRequest_List(s *capnp.Segment, sz int32) (FindPersonRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[FindPersonRequest](l), err
}

// FindPersonRequest_Future is a wrapper for a FindPersonRequest promised by a client call.
type FindPersonRequest_Future struct{ *capnp.Future }

func (f FindPersonRequest_Future) Struct() (FindPersonRequest, error) {
	p, err := f.Future.Ptr()
	return FindPersonRequest(p.Struct()), err
}

type FindPersonResult capnp.Struct

// FindPersonResult_TypeID is the unique identifier for the type FindPersonResult.
const FindPersonResult_TypeID = 0xe89b2535f3e88eb7

func NewFindPersonResult(s *capnp.Segment) (FindPersonResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FindPersonResult(st), err
}

func NewRootFindPersonResult(s *capnp.Segment) (FindPersonResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FindPersonResult(st), err
}

func ReadRootFindPersonResult(msg *capnp.Message) (FindPersonResult, error) {
	root, err := msg.Root()
	return FindPersonResult(root.Struct()), err
}

func (s FindPersonResult) String() string {
	str, _ := text.Marshal(0xe89b2535f3e88eb7, capnp.Struct(s))
	return str
}

func (s FindPersonResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FindPersonResult) DecodeFromPtr(p capnp.Ptr) FindPersonResult {
	return FindPersonResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FindPersonResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FindPersonResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FindPersonResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FindPersonResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FindPersonResult) Dest() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FindPersonResult) SetDest(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FindPersonResult) Path() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s FindPersonResult) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FindPersonResult) SetPath(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPath sets the path field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s FindPersonResult) NewPath(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// FindPersonResult_List is a list of FindPersonResult.
type FindPersonResult_List = capnp.StructList[FindPersonResult]

// NewFindPersonResult creates a new list of FindPersonResult.
func NewFindPersonResult_List(s *capnp.Segment, sz int32) (FindPersonResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[FindPersonResult](l), err
}

// FindPersonResult_Future is a wrapper for a FindPersonResult promised by a client call.
type FindPersonResult_Future struct{ *capnp.Future }

func (f FindPersonResult_Future) Struct() (FindPersonResult, error) {
	p, err := f.Future.Ptr()
	return FindPersonResult(p.Struct()), err
}

type MobRename capnp.Struct

// MobRename_TypeID is the unique identifier for the type MobRename.
const MobRename_TypeID = 0xb5a6abce79a6f063

func NewMobRename(s *capnp.Segment) (MobRename, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MobRename(st), err
}

func NewRootMobRename(s *capnp.Segment) (MobRename, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return MobRename(st), err
}

func ReadRootMobRename(msg *capnp.Message) (MobRename, error) {
	root, err := msg.Root()
	return MobRename(root.Struct()), err
}

func (s MobRename) String() string {
	str, _ := text.Marshal(0xb5a6abce79a6f063, capnp.Struct(s))
	return str
}

func (s MobRename) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MobRename) DecodeFromPtr(p capnp.Ptr) MobRename {
	return MobRename(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MobRename) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MobRename) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MobRename) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MobRename) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MobRename) OldName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s MobRename) HasOldName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MobRename) OldNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s MobRename) SetOldName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s MobRename) OldNameAgain() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s MobRename) HasOldNameAgain() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MobRename) OldNameAgainBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s MobRename) SetOldNameAgain(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s MobRename) NewName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s MobRename) HasNewName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MobRename) NewNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s MobRename) SetNewName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// MobRename_List is a list of MobRename.
type MobRename_List = capnp.StructList[MobRename]

// NewMobRename creates a new list of MobRename.
func NewMobRename_List(s *capnp.Segment, sz int32) (MobRename_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[MobRename](l), err
}

// MobRename_Future is a wrapper for a MobRename promised by a client call.
type MobRename_Future struct{ *capnp.Future }

func (f MobRename_Future) Struct() (MobRename, error) {
	p, err := f.Future.Ptr()
	return MobRename(p.Struct()), err
}

type PlayMP3 capnp.Struct

// PlayMP3_TypeID is the unique identifier for the type PlayMP3.
const PlayMP3_TypeID = 0xde51be80c580aa82

func NewPlayMP3(s *capnp.Segment) (PlayMP3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayMP3(st), err
}

func NewRootPlayMP3(s *capnp.Segment) (PlayMP3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayMP3(st), err
}

func ReadRootPlayMP3(msg *capnp.Message) (PlayMP3, error) {
	root, err := msg.Root()
	return PlayMP3(root.Struct()), err
}

func (s PlayMP3) String() string {
	str, _ := text.Marshal(0xde51be80c580aa82, capnp.Struct(s))
	return str
}

func (s PlayMP3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayMP3) DecodeFromPtr(p capnp.Ptr) PlayMP3 {
	return PlayMP3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayMP3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayMP3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayMP3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayMP3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayMP3) Filename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s PlayMP3) HasFilename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayMP3) FilenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s PlayMP3) SetFilename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// PlayMP3_List is a list of PlayMP3.
type PlayMP3_List = capnp.StructList[PlayMP3]

// NewPlayMP3 creates a new list of PlayMP3.
func NewPlayMP3_List(s *capnp.Segment, sz int32) (PlayMP3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PlayMP3](l), err
}

// PlayMP3_Future is a wrapper for a PlayMP3 promised by a client call.
type PlayMP3_Future struct{ *capnp.Future }

func (f PlayMP3_Future) Struct() (PlayMP3, error) {
	p, err := f.Future.Ptr()
	return PlayMP3(p.Struct()), err
}

type TitleEntry capnp.Struct

// TitleEntry_TypeID is the unique identifier for the type TitleEntry.
const TitleEntry_TypeID = 0x9e2a00f7ceea75bb

func NewTitleEntry(s *capnp.Segment) (TitleEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleEntry(st), err
}

func NewRootTitleEntry(s *capnp.Segment) (TitleEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleEntry(st), err
}

func ReadRootTitleEntry(msg *capnp.Message) (TitleEntry, error) {
	root, err := msg.Root()
	return TitleEntry(root.Struct()), err
}

func (s TitleEntry) String() string {
	str, _ := text.Marshal(0x9e2a00f7ceea75bb, capnp.Struct(s))
	return str
}

func (s TitleEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleEntry) DecodeFromPtr(p capnp.Ptr) TitleEntry {
	return TitleEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleEntry) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TitleEntry) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TitleEntry) SkillValue() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TitleEntry) SetSkillValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TitleEntry) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TitleEntry) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleEntry) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TitleEntry) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// TitleEntry_List is a list of TitleEntry.
type TitleEntry_List = capnp.StructList[TitleEntry]

// NewTitleEntry creates a new list of TitleEntry.
func NewTitleEntry_List(s *capnp.Segment, sz int32) (TitleEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TitleEntry](l), err
}

// TitleEntry_Future is a wrapper for a TitleEntry promised by a client call.
type TitleEntry_Future struct{ *capnp.Future }

func (f TitleEntry_Future) Struct() (TitleEntry, error) {
	p, err := f.Future.Ptr()
	return TitleEntry(p.Struct()), err
}

type Titles capnp.Struct

// Titles_TypeID is the unique identifier for the type Titles.
const Titles_TypeID = 0xa88d7dcd40961f55

func NewTitles(s *capnp.Segment) (Titles, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Titles(st), err
}

func NewRootTitles(s *capnp.Segment) (Titles, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Titles(st), err
}

func ReadRootTitles(msg *capnp.Message) (Titles, error) {
	root, err := msg.Root()
	return Titles(root.Struct()), err
}

func (s Titles) String() string {
	str, _ := text.Marshal(0xa88d7dcd40961f55, capnp.Struct(s))
	return str
}

func (s Titles) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Titles) DecodeFromPtr(p capnp.Ptr) Titles {
	return Titles(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Titles) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Titles) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Titles) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Titles) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Titles) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Titles) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Titles) Titles() (TitleEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TitleEntry_List(p.List()), err
}

func (s Titles) HasTitles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Titles) SetTitles(v TitleEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTitles sets the titles field to a newly
// allocated TitleEntry_List, preferring placement in s's segment.
func (s Titles) NewTitles(n int32) (TitleEntry_List, error) {
	l, err := NewTitleEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TitleEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Titles_List is a list of Titles.
type Titles_List = capnp.StructList[Titles]

// NewTitles creates a new list of Titles.
func NewTitles_List(s *capnp.Segment, sz int32) (Titles_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Titles](l), err
}

// Titles_Future is a wrapper for a Titles promised by a client call.
type Titles_Future struct{ *capnp.Future }

func (f Titles_Future) Struct() (Titles, error) {
	p, err := f.Future.Ptr()
	return Titles(p.Struct()), err
}

type TitleListEntry capnp.Struct

// TitleListEntry_TypeID is the unique identifier for the type TitleListEntry.
const TitleListEntry_TypeID = 0x9ce5c88efd68b310

func NewTitleListEntry(s *capnp.Segment) (TitleListEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TitleListEntry(st), err
}

func NewRootTitleListEntry(s *capnp.Segment) (TitleListEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TitleListEntry(st), err
}

func ReadRootTitleListEntry(msg *capnp.Message) (TitleListEntry, error) {
	root, err := msg.Root()
	return TitleListEntry(root.Struct()), err
}

func (s TitleListEntry) String() string {
	str, _ := text.Marshal(0x9ce5c88efd68b310, capnp.Struct(s))
	return str
}

func (s TitleListEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleListEntry) DecodeFromPtr(p capnp.Ptr) TitleListEntry {
	return TitleListEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleListEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleListEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleListEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleListEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleListEntry) Prefix() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TitleListEntry) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleListEntry) PrefixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TitleListEntry) SetPrefix(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TitleListEntry) Postfix() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TitleListEntry) HasPostfix() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TitleListEntry) PostfixBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TitleListEntry) SetPostfix(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// TitleListEntry_List is a list of TitleListEntry.
type TitleListEntry_List = capnp.StructList[TitleListEntry]

// NewTitleListEntry creates a new list of TitleListEntry.
func NewTitleListEntry_List(s *capnp.Segment, sz int32) (TitleListEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TitleListEntry](l), err
}

// TitleListEntry_Future is a wrapper for a TitleListEntry promised by a client call.
type TitleListEntry_Future struct{ *capnp.Future }

func (f TitleListEntry_Future) Struct() (TitleListEntry, error) {
	p, err := f.Future.Ptr()
	return TitleListEntry(p.Struct()), err
}

type TitleList capnp.Struct

// TitleList_TypeID is the unique identifier for the type TitleList.
const TitleList_TypeID = 0x80b7b9a2597c4eed

func NewTitleList(s *capnp.Segment) (TitleList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleList(st), err
}

func NewRootTitleList(s *capnp.Segment) (TitleList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TitleList(st), err
}

func ReadRootTitleList(msg *capnp.Message) (TitleList, error) {
	root, err := msg.Root()
	return TitleList(root.Struct()), err
}

func (s TitleList) String() string {
	str, _ := text.Marshal(0x80b7b9a2597c4eed, capnp.Struct(s))
	return str
}

func (s TitleList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TitleList) DecodeFromPtr(p capnp.Ptr) TitleList {
	return TitleList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TitleList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TitleList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TitleList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TitleList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TitleList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TitleList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TitleList) Titles() (TitleListEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TitleListEntry_List(p.List()), err
}

func (s TitleList) HasTitles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TitleList) SetTitles(v TitleListEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTitles sets the titles field to a newly
// allocated TitleListEntry_List, preferring placement in s's segment.
func (s TitleList) NewTitles(n int32) (TitleListEntry_List, error) {
	l, err := NewTitleListEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TitleListEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TitleList_List is a list of TitleList.
type TitleList_List = capnp.StructList[TitleList]

// NewTitleList creates a new list of TitleList.
func NewTitleList_List(s *capnp.Segment, sz int32) (TitleList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TitleList](l), err
}

// TitleList_Future is a wrapper for a TitleList promised by a client call.
type TitleList_Future struct{ *capnp.Future }

func (f TitleList_Future) Struct() (TitleList, error) {
	p, err := f.Future.Ptr()
	return TitleList(p.Struct()), err
}

type SetTitle capnp.Struct

// SetTitle_TypeID is the unique identifier for the type SetTitle.
const SetTitle_TypeID = 0x9217151fa71ac827

func NewSetTitle(s *capnp.Segment) (SetTitle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetTitle(st), err
}

func NewRootSetTitle(s *capnp.Segment) (SetTitle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SetTitle(st), err
}

func ReadRootSetTitle(msg *capnp.Message) (SetTitle, error) {
	root, err := msg.Root()
	return SetTitle(root.Struct()), err
}

func (s SetTitle) String() string {
	str, _ := text.Marshal(0x9217151fa71ac827, capnp.Struct(s))
	return str
}

func (s SetTitle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetTitle) DecodeFromPtr(p capnp.Ptr) SetTitle {
	return SetTitle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetTitle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetTitle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetTitle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetTitle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetTitle) IsSuffix() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetTitle) SetIsSuffix(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SetTitle) TitleId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SetTitle) SetTitleId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SetTitle_List is a list of SetTitle.
type SetTitle_List = capnp.StructList[SetTitle]

// NewSetTitle creates a new list of SetTitle.
func NewSetTitle_List(s *capnp.Segment, sz int32) (SetTitle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[SetTitle](l), err
}

// SetTitle_Future is a wrapper for a SetTitle promised by a client call.
type SetTitle_Future struct{ *capnp.Future }

func (f SetTitle_Future) Struct() (SetTitle, error) {
	p, err := f.Future.Ptr()
	return SetTitle(p.Struct()), err
}

type SetTitleReply capnp.Struct

// SetTitleReply_TypeID is the unique identifier for the type SetTitleReply.
const SetTitleReply_TypeID = 0xbae3c3ae8a00e8a6

func NewSetTitleReply(s *capnp.Segment) (SetTitleReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetTitleReply(st), err
}

func NewRootSetTitleReply(s *capnp.Segment) (SetTitleReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetTitleReply(st), err
}

func ReadRootSetTitleReply(msg *capnp.Message) (SetTitleReply, error) {
	root, err := msg.Root()
	return SetTitleReply(root.Struct()), err
}

func (s SetTitleReply) String() string {
	str, _ := text.Marshal(0xbae3c3ae8a00e8a6, capnp.Struct(s))
	return str
}

func (s SetTitleReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SetTitleReply) DecodeFromPtr(p capnp.Ptr) SetTitleReply {
	return SetTitleReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SetTitleReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SetTitleReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SetTitleReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SetTitleReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SetTitleReply) IsSuffix() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SetTitleReply) SetIsSuffix(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SetTitleReply) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SetTitleReply) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SetTitleReply) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SetTitleReply) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SetTitleReply) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SetTitleReply) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// SetTitleReply_List is a list of SetTitleReply.
type SetTitleReply_List = capnp.StructList[SetTitleReply]

// NewSetTitleReply creates a new list of SetTitleReply.
func NewSetTitleReply_List(s *capnp.Segment, sz int32) (SetTitleReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SetTitleReply](l), err
}

// SetTitleReply_Future is a wrapper for a SetTitleReply promised by a client call.
type SetTitleReply_Future struct{ *capnp.Future }

func (f SetTitleReply_Future) Struct() (SetTitleReply, error) {
	p, err := f.Future.Ptr()
	return SetTitleReply(p.Struct()), err
}

type TaskDescription capnp.Struct

// TaskDescription_TypeID is the unique identifier for the type TaskDescription.
const TaskDescription_TypeID = 0xa77cd936c64d6ed7

func NewTaskDescription(s *capnp.Segment) (TaskDescription, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return TaskDescription(st), err
}

func NewRootTaskDescription(s *capnp.Segment) (TaskDescription, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return TaskDescription(st), err
}

func ReadRootTaskDescription(msg *capnp.Message) (TaskDescription, error) {
	root, err := msg.Root()
	return TaskDescription(root.Struct()), err
}

func (s TaskDescription) String() string {
	str, _ := text.Marshal(0xa77cd936c64d6ed7, capnp.Struct(s))
	return str
}

func (s TaskDescription) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskDescription) DecodeFromPtr(p capnp.Ptr) TaskDescription {
	return TaskDescription(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskDescription) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskDescription) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskDescription) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskDescription) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskDescription) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskDescription) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskDescription) Taskid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskDescription) SetTaskid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskDescription) Unk() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TaskDescription) SetUnk(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TaskDescription) Id() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TaskDescription) SetId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TaskDescription) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskDescription) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskDescription) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskDescription) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskDescription) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TaskDescription) HasDesc() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TaskDescription) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TaskDescription) SetDesc(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s TaskDescription) RewardCount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TaskDescription) SetRewardCount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TaskDescription) RewardLink() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s TaskDescription) HasRewardLink() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TaskDescription) RewardLinkBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s TaskDescription) SetRewardLink(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// TaskDescription_List is a list of TaskDescription.
type TaskDescription_List = capnp.StructList[TaskDescription]

// NewTaskDescription creates a new list of TaskDescription.
func NewTaskDescription_List(s *capnp.Segment, sz int32) (TaskDescription_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[TaskDescription](l), err
}

// TaskDescription_Future is a wrapper for a TaskDescription promised by a client call.
type TaskDescription_Future struct{ *capnp.Future }

func (f TaskDescription_Future) Struct() (TaskDescription, error) {
	p, err := f.Future.Ptr()
	return TaskDescription(p.Struct()), err
}

type TaskMemberList capnp.Struct

// TaskMemberList_TypeID is the unique identifier for the type TaskMemberList.
const TaskMemberList_TypeID = 0x9910215bbf6992b3

func NewTaskMemberList(s *capnp.Segment) (TaskMemberList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskMemberList(st), err
}

func NewRootTaskMemberList(s *capnp.Segment) (TaskMemberList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskMemberList(st), err
}

func ReadRootTaskMemberList(msg *capnp.Message) (TaskMemberList, error) {
	root, err := msg.Root()
	return TaskMemberList(root.Struct()), err
}

func (s TaskMemberList) String() string {
	str, _ := text.Marshal(0x9910215bbf6992b3, capnp.Struct(s))
	return str
}

func (s TaskMemberList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskMemberList) DecodeFromPtr(p capnp.Ptr) TaskMemberList {
	return TaskMemberList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskMemberList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskMemberList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskMemberList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskMemberList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskMemberList) GopherId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskMemberList) SetGopherId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskMemberList) MemberCount() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskMemberList) SetMemberCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskMemberList) ListPointer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskMemberList) HasListPointer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskMemberList) ListPointerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskMemberList) SetListPointer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// TaskMemberList_List is a list of TaskMemberList.
type TaskMemberList_List = capnp.StructList[TaskMemberList]

// NewTaskMemberList creates a new list of TaskMemberList.
func NewTaskMemberList_List(s *capnp.Segment, sz int32) (TaskMemberList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskMemberList](l), err
}

// TaskMemberList_Future is a wrapper for a TaskMemberList promised by a client call.
type TaskMemberList_Future struct{ *capnp.Future }

func (f TaskMemberList_Future) Struct() (TaskMemberList, error) {
	p, err := f.Future.Ptr()
	return TaskMemberList(p.Struct()), err
}

type TaskActivity capnp.Struct

// TaskActivity_TypeID is the unique identifier for the type TaskActivity.
const TaskActivity_TypeID = 0xbdf104dd14c6c05e

func NewTaskActivity(s *capnp.Segment) (TaskActivity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return TaskActivity(st), err
}

func NewRootTaskActivity(s *capnp.Segment) (TaskActivity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return TaskActivity(st), err
}

func ReadRootTaskActivity(msg *capnp.Message) (TaskActivity, error) {
	root, err := msg.Root()
	return TaskActivity(root.Struct()), err
}

func (s TaskActivity) String() string {
	str, _ := text.Marshal(0xbdf104dd14c6c05e, capnp.Struct(s))
	return str
}

func (s TaskActivity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskActivity) DecodeFromPtr(p capnp.Ptr) TaskActivity {
	return TaskActivity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskActivity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskActivity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskActivity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskActivity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskActivity) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskActivity) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskActivity) Id() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskActivity) SetId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s TaskActivity) Taskid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s TaskActivity) SetTaskid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s TaskActivity) ActivityId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s TaskActivity) SetActivityId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s TaskActivity) ActivityType() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s TaskActivity) SetActivityType(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s TaskActivity) MobName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskActivity) HasMobName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskActivity) MobNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskActivity) SetMobName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskActivity) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s TaskActivity) HasItemName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TaskActivity) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s TaskActivity) SetItemName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s TaskActivity) GoalCount() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s TaskActivity) SetGoalCount(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s TaskActivity) ActivityName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s TaskActivity) HasActivityName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TaskActivity) ActivityNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s TaskActivity) SetActivityName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s TaskActivity) DoneCount() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s TaskActivity) SetDoneCount(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

// TaskActivity_List is a list of TaskActivity.
type TaskActivity_List = capnp.StructList[TaskActivity]

// NewTaskActivity creates a new list of TaskActivity.
func NewTaskActivity_List(s *capnp.Segment, sz int32) (TaskActivity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return capnp.StructList[TaskActivity](l), err
}

// TaskActivity_Future is a wrapper for a TaskActivity promised by a client call.
type TaskActivity_Future struct{ *capnp.Future }

func (f TaskActivity_Future) Struct() (TaskActivity, error) {
	p, err := f.Future.Ptr()
	return TaskActivity(p.Struct()), err
}

type TaskHistoryEntry capnp.Struct

// TaskHistoryEntry_TypeID is the unique identifier for the type TaskHistoryEntry.
const TaskHistoryEntry_TypeID = 0xf7b756860a5b5804

func NewTaskHistoryEntry(s *capnp.Segment) (TaskHistoryEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistoryEntry(st), err
}

func NewRootTaskHistoryEntry(s *capnp.Segment) (TaskHistoryEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistoryEntry(st), err
}

func ReadRootTaskHistoryEntry(msg *capnp.Message) (TaskHistoryEntry, error) {
	root, err := msg.Root()
	return TaskHistoryEntry(root.Struct()), err
}

func (s TaskHistoryEntry) String() string {
	str, _ := text.Marshal(0xf7b756860a5b5804, capnp.Struct(s))
	return str
}

func (s TaskHistoryEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskHistoryEntry) DecodeFromPtr(p capnp.Ptr) TaskHistoryEntry {
	return TaskHistoryEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskHistoryEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskHistoryEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskHistoryEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskHistoryEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskHistoryEntry) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskHistoryEntry) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskHistoryEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s TaskHistoryEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskHistoryEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s TaskHistoryEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s TaskHistoryEntry) CompletedTime() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s TaskHistoryEntry) SetCompletedTime(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// TaskHistoryEntry_List is a list of TaskHistoryEntry.
type TaskHistoryEntry_List = capnp.StructList[TaskHistoryEntry]

// NewTaskHistoryEntry creates a new list of TaskHistoryEntry.
func NewTaskHistoryEntry_List(s *capnp.Segment, sz int32) (TaskHistoryEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskHistoryEntry](l), err
}

// TaskHistoryEntry_Future is a wrapper for a TaskHistoryEntry promised by a client call.
type TaskHistoryEntry_Future struct{ *capnp.Future }

func (f TaskHistoryEntry_Future) Struct() (TaskHistoryEntry, error) {
	p, err := f.Future.Ptr()
	return TaskHistoryEntry(p.Struct()), err
}

type TaskHistory capnp.Struct

// TaskHistory_TypeID is the unique identifier for the type TaskHistory.
const TaskHistory_TypeID = 0xd35ac5679adaf993

func NewTaskHistory(s *capnp.Segment) (TaskHistory, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistory(st), err
}

func NewRootTaskHistory(s *capnp.Segment) (TaskHistory, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TaskHistory(st), err
}

func ReadRootTaskHistory(msg *capnp.Message) (TaskHistory, error) {
	root, err := msg.Root()
	return TaskHistory(root.Struct()), err
}

func (s TaskHistory) String() string {
	str, _ := text.Marshal(0xd35ac5679adaf993, capnp.Struct(s))
	return str
}

func (s TaskHistory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskHistory) DecodeFromPtr(p capnp.Ptr) TaskHistory {
	return TaskHistory(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskHistory) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskHistory) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskHistory) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskHistory) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskHistory) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s TaskHistory) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s TaskHistory) Entries() (TaskHistoryEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TaskHistoryEntry_List(p.List()), err
}

func (s TaskHistory) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TaskHistory) SetEntries(v TaskHistoryEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated TaskHistoryEntry_List, preferring placement in s's segment.
func (s TaskHistory) NewEntries(n int32) (TaskHistoryEntry_List, error) {
	l, err := NewTaskHistoryEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TaskHistoryEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TaskHistory_List is a list of TaskHistory.
type TaskHistory_List = capnp.StructList[TaskHistory]

// NewTaskHistory creates a new list of TaskHistory.
func NewTaskHistory_List(s *capnp.Segment, sz int32) (TaskHistory_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TaskHistory](l), err
}

// TaskHistory_Future is a wrapper for a TaskHistory promised by a client call.
type TaskHistory_Future struct{ *capnp.Future }

func (f TaskHistory_Future) Struct() (TaskHistory, error) {
	p, err := f.Future.Ptr()
	return TaskHistory(p.Struct()), err
}

type AcceptNewTask capnp.Struct

// AcceptNewTask_TypeID is the unique identifier for the type AcceptNewTask.
const AcceptNewTask_TypeID = 0xbe5555051342f44e

func NewAcceptNewTask(s *capnp.Segment) (AcceptNewTask, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AcceptNewTask(st), err
}

func NewRootAcceptNewTask(s *capnp.Segment) (AcceptNewTask, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AcceptNewTask(st), err
}

func ReadRootAcceptNewTask(msg *capnp.Message) (AcceptNewTask, error) {
	root, err := msg.Root()
	return AcceptNewTask(root.Struct()), err
}

func (s AcceptNewTask) String() string {
	str, _ := text.Marshal(0xbe5555051342f44e, capnp.Struct(s))
	return str
}

func (s AcceptNewTask) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AcceptNewTask) DecodeFromPtr(p capnp.Ptr) AcceptNewTask {
	return AcceptNewTask(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AcceptNewTask) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AcceptNewTask) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AcceptNewTask) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AcceptNewTask) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AcceptNewTask) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AcceptNewTask) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AcceptNewTask) TaskMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AcceptNewTask) SetTaskMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AcceptNewTask_List is a list of AcceptNewTask.
type AcceptNewTask_List = capnp.StructList[AcceptNewTask]

// NewAcceptNewTask creates a new list of AcceptNewTask.
func NewAcceptNewTask_List(s *capnp.Segment, sz int32) (AcceptNewTask_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AcceptNewTask](l), err
}

// AcceptNewTask_Future is a wrapper for a AcceptNewTask promised by a client call.
type AcceptNewTask_Future struct{ *capnp.Future }

func (f AcceptNewTask_Future) Struct() (AcceptNewTask, error) {
	p, err := f.Future.Ptr()
	return AcceptNewTask(p.Struct()), err
}

type AvaliableTask capnp.Struct

// AvaliableTask_TypeID is the unique identifier for the type AvaliableTask.
const AvaliableTask_TypeID = 0xa86e0a28ffc1ad93

func NewAvaliableTask(s *capnp.Segment) (AvaliableTask, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return AvaliableTask(st), err
}

func NewRootAvaliableTask(s *capnp.Segment) (AvaliableTask, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return AvaliableTask(st), err
}

func ReadRootAvaliableTask(msg *capnp.Message) (AvaliableTask, error) {
	root, err := msg.Root()
	return AvaliableTask(root.Struct()), err
}

func (s AvaliableTask) String() string {
	str, _ := text.Marshal(0xa86e0a28ffc1ad93, capnp.Struct(s))
	return str
}

func (s AvaliableTask) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AvaliableTask) DecodeFromPtr(p capnp.Ptr) AvaliableTask {
	return AvaliableTask(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AvaliableTask) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AvaliableTask) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AvaliableTask) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AvaliableTask) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AvaliableTask) TaskIndex() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AvaliableTask) SetTaskIndex(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AvaliableTask) TaskMasterId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AvaliableTask) SetTaskMasterId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AvaliableTask) TaskId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AvaliableTask) SetTaskId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AvaliableTask) ActivityCount() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AvaliableTask) SetActivityCount(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AvaliableTask) Desc() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AvaliableTask) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AvaliableTask) DescBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AvaliableTask) SetDesc(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AvaliableTask) RewardPlatinum() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AvaliableTask) SetRewardPlatinum(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AvaliableTask) RewardGold() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AvaliableTask) SetRewardGold(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s AvaliableTask) RewardSilver() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AvaliableTask) SetRewardSilver(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s AvaliableTask) RewardCopper() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s AvaliableTask) SetRewardCopper(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s AvaliableTask) SomeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AvaliableTask) HasSomeName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AvaliableTask) SomeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AvaliableTask) SetSomeName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// AvaliableTask_List is a list of AvaliableTask.
type AvaliableTask_List = capnp.StructList[AvaliableTask]

// NewAvaliableTask creates a new list of AvaliableTask.
func NewAvaliableTask_List(s *capnp.Segment, sz int32) (AvaliableTask_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[AvaliableTask](l), err
}

// AvaliableTask_Future is a wrapper for a AvaliableTask promised by a client call.
type AvaliableTask_Future struct{ *capnp.Future }

func (f AvaliableTask_Future) Struct() (AvaliableTask, error) {
	p, err := f.Future.Ptr()
	return AvaliableTask(p.Struct()), err
}

type BankerChange capnp.Struct

// BankerChange_TypeID is the unique identifier for the type BankerChange.
const BankerChange_TypeID = 0xa4fef5cca0eb8eaa

func NewBankerChange(s *capnp.Segment) (BankerChange, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return BankerChange(st), err
}

func NewRootBankerChange(s *capnp.Segment) (BankerChange, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return BankerChange(st), err
}

func ReadRootBankerChange(msg *capnp.Message) (BankerChange, error) {
	root, err := msg.Root()
	return BankerChange(root.Struct()), err
}

func (s BankerChange) String() string {
	str, _ := text.Marshal(0xa4fef5cca0eb8eaa, capnp.Struct(s))
	return str
}

func (s BankerChange) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BankerChange) DecodeFromPtr(p capnp.Ptr) BankerChange {
	return BankerChange(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BankerChange) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BankerChange) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BankerChange) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BankerChange) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BankerChange) Platinum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BankerChange) SetPlatinum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BankerChange) Gold() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BankerChange) SetGold(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BankerChange) Silver() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s BankerChange) SetSilver(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s BankerChange) Copper() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s BankerChange) SetCopper(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s BankerChange) PlatinumBank() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s BankerChange) SetPlatinumBank(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s BankerChange) GoldBank() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s BankerChange) SetGoldBank(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s BankerChange) SilverBank() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s BankerChange) SetSilverBank(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s BankerChange) CopperBank() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s BankerChange) SetCopperBank(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

// BankerChange_List is a list of BankerChange.
type BankerChange_List = capnp.StructList[BankerChange]

// NewBankerChange creates a new list of BankerChange.
func NewBankerChange_List(s *capnp.Segment, sz int32) (BankerChange_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[BankerChange](l), err
}

// BankerChange_Future is a wrapper for a BankerChange promised by a client call.
type BankerChange_Future struct{ *capnp.Future }

func (f BankerChange_Future) Struct() (BankerChange, error) {
	p, err := f.Future.Ptr()
	return BankerChange(p.Struct()), err
}

type LeadershipExpUpdate capnp.Struct

// LeadershipExpUpdate_TypeID is the unique identifier for the type LeadershipExpUpdate.
const LeadershipExpUpdate_TypeID = 0x8534668f6850d8ba

func NewLeadershipExpUpdate(s *capnp.Segment) (LeadershipExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LeadershipExpUpdate(st), err
}

func NewRootLeadershipExpUpdate(s *capnp.Segment) (LeadershipExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LeadershipExpUpdate(st), err
}

func ReadRootLeadershipExpUpdate(msg *capnp.Message) (LeadershipExpUpdate, error) {
	root, err := msg.Root()
	return LeadershipExpUpdate(root.Struct()), err
}

func (s LeadershipExpUpdate) String() string {
	str, _ := text.Marshal(0x8534668f6850d8ba, capnp.Struct(s))
	return str
}

func (s LeadershipExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadershipExpUpdate) DecodeFromPtr(p capnp.Ptr) LeadershipExpUpdate {
	return LeadershipExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadershipExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadershipExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadershipExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadershipExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadershipExpUpdate) GroupLeadershipExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s LeadershipExpUpdate) SetGroupLeadershipExp(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s LeadershipExpUpdate) GroupLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LeadershipExpUpdate) SetGroupLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LeadershipExpUpdate) RaidLeadershipExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s LeadershipExpUpdate) SetRaidLeadershipExp(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s LeadershipExpUpdate) RaidLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LeadershipExpUpdate) SetRaidLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LeadershipExpUpdate_List is a list of LeadershipExpUpdate.
type LeadershipExpUpdate_List = capnp.StructList[LeadershipExpUpdate]

// NewLeadershipExpUpdate creates a new list of LeadershipExpUpdate.
func NewLeadershipExpUpdate_List(s *capnp.Segment, sz int32) (LeadershipExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LeadershipExpUpdate](l), err
}

// LeadershipExpUpdate_Future is a wrapper for a LeadershipExpUpdate promised by a client call.
type LeadershipExpUpdate_Future struct{ *capnp.Future }

func (f LeadershipExpUpdate_Future) Struct() (LeadershipExpUpdate, error) {
	p, err := f.Future.Ptr()
	return LeadershipExpUpdate(p.Struct()), err
}

type UpdateLeadershipAA capnp.Struct

// UpdateLeadershipAA_TypeID is the unique identifier for the type UpdateLeadershipAA.
const UpdateLeadershipAA_TypeID = 0x9726e35ff31ca532

func NewUpdateLeadershipAA(s *capnp.Segment) (UpdateLeadershipAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UpdateLeadershipAA(st), err
}

func NewRootUpdateLeadershipAA(s *capnp.Segment) (UpdateLeadershipAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UpdateLeadershipAA(st), err
}

func ReadRootUpdateLeadershipAA(msg *capnp.Message) (UpdateLeadershipAA, error) {
	root, err := msg.Root()
	return UpdateLeadershipAA(root.Struct()), err
}

func (s UpdateLeadershipAA) String() string {
	str, _ := text.Marshal(0x9726e35ff31ca532, capnp.Struct(s))
	return str
}

func (s UpdateLeadershipAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateLeadershipAA) DecodeFromPtr(p capnp.Ptr) UpdateLeadershipAA {
	return UpdateLeadershipAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateLeadershipAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateLeadershipAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateLeadershipAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateLeadershipAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateLeadershipAA) AbilityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s UpdateLeadershipAA) SetAbilityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s UpdateLeadershipAA) NewRank() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s UpdateLeadershipAA) SetNewRank(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s UpdateLeadershipAA) Pointsleft() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s UpdateLeadershipAA) SetPointsleft(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// UpdateLeadershipAA_List is a list of UpdateLeadershipAA.
type UpdateLeadershipAA_List = capnp.StructList[UpdateLeadershipAA]

// NewUpdateLeadershipAA creates a new list of UpdateLeadershipAA.
func NewUpdateLeadershipAA_List(s *capnp.Segment, sz int32) (UpdateLeadershipAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[UpdateLeadershipAA](l), err
}

// UpdateLeadershipAA_Future is a wrapper for a UpdateLeadershipAA promised by a client call.
type UpdateLeadershipAA_Future struct{ *capnp.Future }

func (f UpdateLeadershipAA_Future) Struct() (UpdateLeadershipAA, error) {
	p, err := f.Future.Ptr()
	return UpdateLeadershipAA(p.Struct()), err
}

type LeadExpUpdate capnp.Struct

// LeadExpUpdate_TypeID is the unique identifier for the type LeadExpUpdate.
const LeadExpUpdate_TypeID = 0xdea4ce0866a280a7

func NewLeadExpUpdate(s *capnp.Segment) (LeadExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LeadExpUpdate(st), err
}

func NewRootLeadExpUpdate(s *capnp.Segment) (LeadExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LeadExpUpdate(st), err
}

func ReadRootLeadExpUpdate(msg *capnp.Message) (LeadExpUpdate, error) {
	root, err := msg.Root()
	return LeadExpUpdate(root.Struct()), err
}

func (s LeadExpUpdate) String() string {
	str, _ := text.Marshal(0xdea4ce0866a280a7, capnp.Struct(s))
	return str
}

func (s LeadExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LeadExpUpdate) DecodeFromPtr(p capnp.Ptr) LeadExpUpdate {
	return LeadExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LeadExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LeadExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LeadExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LeadExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LeadExpUpdate) GroupLeadershipExp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LeadExpUpdate) SetGroupLeadershipExp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LeadExpUpdate) GroupLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LeadExpUpdate) SetGroupLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LeadExpUpdate) RaidLeadershipExp() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LeadExpUpdate) SetRaidLeadershipExp(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LeadExpUpdate) RaidLeadershipPoints() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LeadExpUpdate) SetRaidLeadershipPoints(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LeadExpUpdate_List is a list of LeadExpUpdate.
type LeadExpUpdate_List = capnp.StructList[LeadExpUpdate]

// NewLeadExpUpdate creates a new list of LeadExpUpdate.
func NewLeadExpUpdate_List(s *capnp.Segment, sz int32) (LeadExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[LeadExpUpdate](l), err
}

// LeadExpUpdate_Future is a wrapper for a LeadExpUpdate promised by a client call.
type LeadExpUpdate_Future struct{ *capnp.Future }

func (f LeadExpUpdate_Future) Struct() (LeadExpUpdate, error) {
	p, err := f.Future.Ptr()
	return LeadExpUpdate(p.Struct()), err
}

type RaidGeneral capnp.Struct

// RaidGeneral_TypeID is the unique identifier for the type RaidGeneral.
const RaidGeneral_TypeID = 0xaba4e5389c6116b1

func NewRaidGeneral(s *capnp.Segment) (RaidGeneral, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidGeneral(st), err
}

func NewRootRaidGeneral(s *capnp.Segment) (RaidGeneral, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidGeneral(st), err
}

func ReadRootRaidGeneral(msg *capnp.Message) (RaidGeneral, error) {
	root, err := msg.Root()
	return RaidGeneral(root.Struct()), err
}

func (s RaidGeneral) String() string {
	str, _ := text.Marshal(0xaba4e5389c6116b1, capnp.Struct(s))
	return str
}

func (s RaidGeneral) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidGeneral) DecodeFromPtr(p capnp.Ptr) RaidGeneral {
	return RaidGeneral(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidGeneral) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidGeneral) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidGeneral) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidGeneral) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidGeneral) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidGeneral) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidGeneral) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidGeneral) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidGeneral) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidGeneral) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidGeneral) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidGeneral) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidGeneral) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidGeneral) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RaidGeneral) Parameter() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidGeneral) SetParameter(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidGeneral_List is a list of RaidGeneral.
type RaidGeneral_List = capnp.StructList[RaidGeneral]

// NewRaidGeneral creates a new list of RaidGeneral.
func NewRaidGeneral_List(s *capnp.Segment, sz int32) (RaidGeneral_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RaidGeneral](l), err
}

// RaidGeneral_Future is a wrapper for a RaidGeneral promised by a client call.
type RaidGeneral_Future struct{ *capnp.Future }

func (f RaidGeneral_Future) Struct() (RaidGeneral, error) {
	p, err := f.Future.Ptr()
	return RaidGeneral(p.Struct()), err
}

type RaidAddMember capnp.Struct

// RaidAddMember_TypeID is the unique identifier for the type RaidAddMember.
const RaidAddMember_TypeID = 0xdc9cd82121d86b8e

func NewRaidAddMember(s *capnp.Segment) (RaidAddMember, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaidAddMember(st), err
}

func NewRootRaidAddMember(s *capnp.Segment) (RaidAddMember, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return RaidAddMember(st), err
}

func ReadRootRaidAddMember(msg *capnp.Message) (RaidAddMember, error) {
	root, err := msg.Root()
	return RaidAddMember(root.Struct()), err
}

func (s RaidAddMember) String() string {
	str, _ := text.Marshal(0xdc9cd82121d86b8e, capnp.Struct(s))
	return str
}

func (s RaidAddMember) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidAddMember) DecodeFromPtr(p capnp.Ptr) RaidAddMember {
	return RaidAddMember(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidAddMember) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidAddMember) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidAddMember) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidAddMember) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidAddMember) RaidGen() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidAddMember) HasRaidGen() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidAddMember) SetRaidGen(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRaidGen sets the raidGen field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidAddMember) NewRaidGen() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidAddMember) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidAddMember) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidAddMember) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidAddMember) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidAddMember) IsGroupLeader() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidAddMember) SetIsGroupLeader(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// RaidAddMember_List is a list of RaidAddMember.
type RaidAddMember_List = capnp.StructList[RaidAddMember]

// NewRaidAddMember creates a new list of RaidAddMember.
func NewRaidAddMember_List(s *capnp.Segment, sz int32) (RaidAddMember_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[RaidAddMember](l), err
}

// RaidAddMember_Future is a wrapper for a RaidAddMember promised by a client call.
type RaidAddMember_Future struct{ *capnp.Future }

func (f RaidAddMember_Future) Struct() (RaidAddMember, error) {
	p, err := f.Future.Ptr()
	return RaidAddMember(p.Struct()), err
}
func (p RaidAddMember_Future) RaidGen() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidNote capnp.Struct

// RaidNote_TypeID is the unique identifier for the type RaidNote.
const RaidNote_TypeID = 0xcc521ab8cc5e91c0

func NewRaidNote(s *capnp.Segment) (RaidNote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidNote(st), err
}

func NewRootRaidNote(s *capnp.Segment) (RaidNote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidNote(st), err
}

func ReadRootRaidNote(msg *capnp.Message) (RaidNote, error) {
	root, err := msg.Root()
	return RaidNote(root.Struct()), err
}

func (s RaidNote) String() string {
	str, _ := text.Marshal(0xcc521ab8cc5e91c0, capnp.Struct(s))
	return str
}

func (s RaidNote) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidNote) DecodeFromPtr(p capnp.Ptr) RaidNote {
	return RaidNote(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidNote) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidNote) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidNote) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidNote) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidNote) General() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidNote) HasGeneral() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidNote) SetGeneral(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGeneral sets the general field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidNote) NewGeneral() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidNote) Note() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidNote) HasNote() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidNote) NoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidNote) SetNote(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// RaidNote_List is a list of RaidNote.
type RaidNote_List = capnp.StructList[RaidNote]

// NewRaidNote creates a new list of RaidNote.
func NewRaidNote_List(s *capnp.Segment, sz int32) (RaidNote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[RaidNote](l), err
}

// RaidNote_Future is a wrapper for a RaidNote promised by a client call.
type RaidNote_Future struct{ *capnp.Future }

func (f RaidNote_Future) Struct() (RaidNote, error) {
	p, err := f.Future.Ptr()
	return RaidNote(p.Struct()), err
}
func (p RaidNote_Future) General() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidMOTD capnp.Struct

// RaidMOTD_TypeID is the unique identifier for the type RaidMOTD.
const RaidMOTD_TypeID = 0xbad2f81cd78e053a

func NewRaidMOTD(s *capnp.Segment) (RaidMOTD, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidMOTD(st), err
}

func NewRootRaidMOTD(s *capnp.Segment) (RaidMOTD, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RaidMOTD(st), err
}

func ReadRootRaidMOTD(msg *capnp.Message) (RaidMOTD, error) {
	root, err := msg.Root()
	return RaidMOTD(root.Struct()), err
}

func (s RaidMOTD) String() string {
	str, _ := text.Marshal(0xbad2f81cd78e053a, capnp.Struct(s))
	return str
}

func (s RaidMOTD) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMOTD) DecodeFromPtr(p capnp.Ptr) RaidMOTD {
	return RaidMOTD(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMOTD) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMOTD) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMOTD) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMOTD) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMOTD) General() (RaidGeneral, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidGeneral(p.Struct()), err
}

func (s RaidMOTD) HasGeneral() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMOTD) SetGeneral(v RaidGeneral) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGeneral sets the general field to a newly
// allocated RaidGeneral struct, preferring placement in s's segment.
func (s RaidMOTD) NewGeneral() (RaidGeneral, error) {
	ss, err := NewRaidGeneral(capnp.Struct(s).Segment())
	if err != nil {
		return RaidGeneral{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidMOTD) Motd() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidMOTD) HasMotd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidMOTD) MotdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidMOTD) SetMotd(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// RaidMOTD_List is a list of RaidMOTD.
type RaidMOTD_List = capnp.StructList[RaidMOTD]

// NewRaidMOTD creates a new list of RaidMOTD.
func NewRaidMOTD_List(s *capnp.Segment, sz int32) (RaidMOTD_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[RaidMOTD](l), err
}

// RaidMOTD_Future is a wrapper for a RaidMOTD promised by a client call.
type RaidMOTD_Future struct{ *capnp.Future }

func (f RaidMOTD_Future) Struct() (RaidMOTD, error) {
	p, err := f.Future.Ptr()
	return RaidMOTD(p.Struct()), err
}
func (p RaidMOTD_Future) General() RaidGeneral_Future {
	return RaidGeneral_Future{Future: p.Future.Field(0, nil)}
}

type RaidLeadershipUpdate capnp.Struct

// RaidLeadershipUpdate_TypeID is the unique identifier for the type RaidLeadershipUpdate.
const RaidLeadershipUpdate_TypeID = 0x9078ec69fd7d9560

func NewRaidLeadershipUpdate(s *capnp.Segment) (RaidLeadershipUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RaidLeadershipUpdate(st), err
}

func NewRootRaidLeadershipUpdate(s *capnp.Segment) (RaidLeadershipUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return RaidLeadershipUpdate(st), err
}

func ReadRootRaidLeadershipUpdate(msg *capnp.Message) (RaidLeadershipUpdate, error) {
	root, err := msg.Root()
	return RaidLeadershipUpdate(root.Struct()), err
}

func (s RaidLeadershipUpdate) String() string {
	str, _ := text.Marshal(0x9078ec69fd7d9560, capnp.Struct(s))
	return str
}

func (s RaidLeadershipUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidLeadershipUpdate) DecodeFromPtr(p capnp.Ptr) RaidLeadershipUpdate {
	return RaidLeadershipUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidLeadershipUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidLeadershipUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidLeadershipUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidLeadershipUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidLeadershipUpdate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidLeadershipUpdate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidLeadershipUpdate) PlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidLeadershipUpdate) HasPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidLeadershipUpdate) PlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidLeadershipUpdate) SetPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidLeadershipUpdate) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s RaidLeadershipUpdate) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidLeadershipUpdate) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s RaidLeadershipUpdate) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s RaidLeadershipUpdate) Group() (GroupLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return GroupLeadershipAA(p.Struct()), err
}

func (s RaidLeadershipUpdate) HasGroup() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaidLeadershipUpdate) SetGroup(v GroupLeadershipAA) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewGroup sets the group field to a newly
// allocated GroupLeadershipAA struct, preferring placement in s's segment.
func (s RaidLeadershipUpdate) NewGroup() (GroupLeadershipAA, error) {
	ss, err := NewGroupLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return GroupLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidLeadershipUpdate) Raid() (RaidLeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return RaidLeadershipAA(p.Struct()), err
}

func (s RaidLeadershipUpdate) HasRaid() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RaidLeadershipUpdate) SetRaid(v RaidLeadershipAA) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewRaid sets the raid field to a newly
// allocated RaidLeadershipAA struct, preferring placement in s's segment.
func (s RaidLeadershipUpdate) NewRaid() (RaidLeadershipAA, error) {
	ss, err := NewRaidLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return RaidLeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaidLeadershipUpdate_List is a list of RaidLeadershipUpdate.
type RaidLeadershipUpdate_List = capnp.StructList[RaidLeadershipUpdate]

// NewRaidLeadershipUpdate creates a new list of RaidLeadershipUpdate.
func NewRaidLeadershipUpdate_List(s *capnp.Segment, sz int32) (RaidLeadershipUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[RaidLeadershipUpdate](l), err
}

// RaidLeadershipUpdate_Future is a wrapper for a RaidLeadershipUpdate promised by a client call.
type RaidLeadershipUpdate_Future struct{ *capnp.Future }

func (f RaidLeadershipUpdate_Future) Struct() (RaidLeadershipUpdate, error) {
	p, err := f.Future.Ptr()
	return RaidLeadershipUpdate(p.Struct()), err
}
func (p RaidLeadershipUpdate_Future) Group() GroupLeadershipAA_Future {
	return GroupLeadershipAA_Future{Future: p.Future.Field(2, nil)}
}
func (p RaidLeadershipUpdate_Future) Raid() RaidLeadershipAA_Future {
	return RaidLeadershipAA_Future{Future: p.Future.Field(3, nil)}
}

type RaidCreate capnp.Struct

// RaidCreate_TypeID is the unique identifier for the type RaidCreate.
const RaidCreate_TypeID = 0xfa80583ce360de61

func NewRaidCreate(s *capnp.Segment) (RaidCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RaidCreate(st), err
}

func NewRootRaidCreate(s *capnp.Segment) (RaidCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RaidCreate(st), err
}

func ReadRootRaidCreate(msg *capnp.Message) (RaidCreate, error) {
	root, err := msg.Root()
	return RaidCreate(root.Struct()), err
}

func (s RaidCreate) String() string {
	str, _ := text.Marshal(0xfa80583ce360de61, capnp.Struct(s))
	return str
}

func (s RaidCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidCreate) DecodeFromPtr(p capnp.Ptr) RaidCreate {
	return RaidCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidCreate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidCreate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidCreate) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidCreate) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidCreate) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidCreate) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidCreate) LeaderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidCreate) SetLeaderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidCreate_List is a list of RaidCreate.
type RaidCreate_List = capnp.StructList[RaidCreate]

// NewRaidCreate creates a new list of RaidCreate.
func NewRaidCreate_List(s *capnp.Segment, sz int32) (RaidCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[RaidCreate](l), err
}

// RaidCreate_Future is a wrapper for a RaidCreate promised by a client call.
type RaidCreate_Future struct{ *capnp.Future }

func (f RaidCreate_Future) Struct() (RaidCreate, error) {
	p, err := f.Future.Ptr()
	return RaidCreate(p.Struct()), err
}

type RaidMemberInfo capnp.Struct

// RaidMemberInfo_TypeID is the unique identifier for the type RaidMemberInfo.
const RaidMemberInfo_TypeID = 0xf32339f8d6ffe524

func NewRaidMemberInfo(s *capnp.Segment) (RaidMemberInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaidMemberInfo(st), err
}

func NewRootRaidMemberInfo(s *capnp.Segment) (RaidMemberInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return RaidMemberInfo(st), err
}

func ReadRootRaidMemberInfo(msg *capnp.Message) (RaidMemberInfo, error) {
	root, err := msg.Root()
	return RaidMemberInfo(root.Struct()), err
}

func (s RaidMemberInfo) String() string {
	str, _ := text.Marshal(0xf32339f8d6ffe524, capnp.Struct(s))
	return str
}

func (s RaidMemberInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMemberInfo) DecodeFromPtr(p capnp.Ptr) RaidMemberInfo {
	return RaidMemberInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMemberInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMemberInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMemberInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMemberInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMemberInfo) GroupNumber() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidMemberInfo) SetGroupNumber(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidMemberInfo) MemberName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidMemberInfo) HasMemberName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMemberInfo) MemberNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidMemberInfo) SetMemberName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidMemberInfo) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidMemberInfo) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s RaidMemberInfo) Level() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s RaidMemberInfo) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s RaidMemberInfo) IsRaidLeader() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RaidMemberInfo) SetIsRaidLeader(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RaidMemberInfo) IsGroupLeader() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s RaidMemberInfo) SetIsGroupLeader(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s RaidMemberInfo) MainTank() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s RaidMemberInfo) SetMainTank(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// RaidMemberInfo_List is a list of RaidMemberInfo.
type RaidMemberInfo_List = capnp.StructList[RaidMemberInfo]

// NewRaidMemberInfo creates a new list of RaidMemberInfo.
func NewRaidMemberInfo_List(s *capnp.Segment, sz int32) (RaidMemberInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[RaidMemberInfo](l), err
}

// RaidMemberInfo_Future is a wrapper for a RaidMemberInfo promised by a client call.
type RaidMemberInfo_Future struct{ *capnp.Future }

func (f RaidMemberInfo_Future) Struct() (RaidMemberInfo, error) {
	p, err := f.Future.Ptr()
	return RaidMemberInfo(p.Struct()), err
}

type RaidDetails capnp.Struct

// RaidDetails_TypeID is the unique identifier for the type RaidDetails.
const RaidDetails_TypeID = 0xf87e75def99cdba4

func NewRaidDetails(s *capnp.Segment) (RaidDetails, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidDetails(st), err
}

func NewRootRaidDetails(s *capnp.Segment) (RaidDetails, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RaidDetails(st), err
}

func ReadRootRaidDetails(msg *capnp.Message) (RaidDetails, error) {
	root, err := msg.Root()
	return RaidDetails(root.Struct()), err
}

func (s RaidDetails) String() string {
	str, _ := text.Marshal(0xf87e75def99cdba4, capnp.Struct(s))
	return str
}

func (s RaidDetails) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidDetails) DecodeFromPtr(p capnp.Ptr) RaidDetails {
	return RaidDetails(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidDetails) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidDetails) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidDetails) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidDetails) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidDetails) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidDetails) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidDetails) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RaidDetails) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidDetails) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RaidDetails) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RaidDetails) Abilities() (LeadershipAA, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return LeadershipAA(p.Struct()), err
}

func (s RaidDetails) HasAbilities() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidDetails) SetAbilities(v LeadershipAA) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewAbilities sets the abilities field to a newly
// allocated LeadershipAA struct, preferring placement in s's segment.
func (s RaidDetails) NewAbilities() (LeadershipAA, error) {
	ss, err := NewLeadershipAA(capnp.Struct(s).Segment())
	if err != nil {
		return LeadershipAA{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidDetails) LeaderId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s RaidDetails) SetLeaderId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// RaidDetails_List is a list of RaidDetails.
type RaidDetails_List = capnp.StructList[RaidDetails]

// NewRaidDetails creates a new list of RaidDetails.
func NewRaidDetails_List(s *capnp.Segment, sz int32) (RaidDetails_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RaidDetails](l), err
}

// RaidDetails_Future is a wrapper for a RaidDetails promised by a client call.
type RaidDetails_Future struct{ *capnp.Future }

func (f RaidDetails_Future) Struct() (RaidDetails, error) {
	p, err := f.Future.Ptr()
	return RaidDetails(p.Struct()), err
}
func (p RaidDetails_Future) Abilities() LeadershipAA_Future {
	return LeadershipAA_Future{Future: p.Future.Field(1, nil)}
}

type RaidMembers capnp.Struct

// RaidMembers_TypeID is the unique identifier for the type RaidMembers.
const RaidMembers_TypeID = 0xa5a8b25550e0240d

func NewRaidMembers(s *capnp.Segment) (RaidMembers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RaidMembers(st), err
}

func NewRootRaidMembers(s *capnp.Segment) (RaidMembers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return RaidMembers(st), err
}

func ReadRootRaidMembers(msg *capnp.Message) (RaidMembers, error) {
	root, err := msg.Root()
	return RaidMembers(root.Struct()), err
}

func (s RaidMembers) String() string {
	str, _ := text.Marshal(0xa5a8b25550e0240d, capnp.Struct(s))
	return str
}

func (s RaidMembers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RaidMembers) DecodeFromPtr(p capnp.Ptr) RaidMembers {
	return RaidMembers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RaidMembers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RaidMembers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RaidMembers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RaidMembers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RaidMembers) Details() (RaidDetails, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RaidDetails(p.Struct()), err
}

func (s RaidMembers) HasDetails() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RaidMembers) SetDetails(v RaidDetails) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDetails sets the details field to a newly
// allocated RaidDetails struct, preferring placement in s's segment.
func (s RaidMembers) NewDetails() (RaidDetails, error) {
	ss, err := NewRaidDetails(capnp.Struct(s).Segment())
	if err != nil {
		return RaidDetails{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RaidMembers) MemberCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s RaidMembers) SetMemberCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s RaidMembers) Members() (RaidMemberInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RaidMemberInfo_List(p.List()), err
}

func (s RaidMembers) HasMembers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RaidMembers) SetMembers(v RaidMemberInfo_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated RaidMemberInfo_List, preferring placement in s's segment.
func (s RaidMembers) NewMembers(n int32) (RaidMemberInfo_List, error) {
	l, err := NewRaidMemberInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RaidMemberInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s RaidMembers) Empty() (RaidMemberInfo, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return RaidMemberInfo(p.Struct()), err
}

func (s RaidMembers) HasEmpty() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RaidMembers) SetEmpty(v RaidMemberInfo) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEmpty sets the empty field to a newly
// allocated RaidMemberInfo struct, preferring placement in s's segment.
func (s RaidMembers) NewEmpty() (RaidMemberInfo, error) {
	ss, err := NewRaidMemberInfo(capnp.Struct(s).Segment())
	if err != nil {
		return RaidMemberInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RaidMembers_List is a list of RaidMembers.
type RaidMembers_List = capnp.StructList[RaidMembers]

// NewRaidMembers creates a new list of RaidMembers.
func NewRaidMembers_List(s *capnp.Segment, sz int32) (RaidMembers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[RaidMembers](l), err
}

// RaidMembers_Future is a wrapper for a RaidMembers promised by a client call.
type RaidMembers_Future struct{ *capnp.Future }

func (f RaidMembers_Future) Struct() (RaidMembers, error) {
	p, err := f.Future.Ptr()
	return RaidMembers(p.Struct()), err
}
func (p RaidMembers_Future) Details() RaidDetails_Future {
	return RaidDetails_Future{Future: p.Future.Field(0, nil)}
}
func (p RaidMembers_Future) Empty() RaidMemberInfo_Future {
	return RaidMemberInfo_Future{Future: p.Future.Field(2, nil)}
}

type DynamicWall capnp.Struct

// DynamicWall_TypeID is the unique identifier for the type DynamicWall.
const DynamicWall_TypeID = 0xaf898798e12e23da

func NewDynamicWall(s *capnp.Segment) (DynamicWall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DynamicWall(st), err
}

func NewRootDynamicWall(s *capnp.Segment) (DynamicWall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return DynamicWall(st), err
}

func ReadRootDynamicWall(msg *capnp.Message) (DynamicWall, error) {
	root, err := msg.Root()
	return DynamicWall(root.Struct()), err
}

func (s DynamicWall) String() string {
	str, _ := text.Marshal(0xaf898798e12e23da, capnp.Struct(s))
	return str
}

func (s DynamicWall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicWall) DecodeFromPtr(p capnp.Ptr) DynamicWall {
	return DynamicWall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicWall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicWall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicWall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicWall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicWall) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicWall) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicWall) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicWall) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicWall) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s DynamicWall) SetY(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s DynamicWall) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s DynamicWall) SetX(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s DynamicWall) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s DynamicWall) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s DynamicWall) OneHundred() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s DynamicWall) SetOneHundred(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// DynamicWall_List is a list of DynamicWall.
type DynamicWall_List = capnp.StructList[DynamicWall]

// NewDynamicWall creates a new list of DynamicWall.
func NewDynamicWall_List(s *capnp.Segment, sz int32) (DynamicWall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[DynamicWall](l), err
}

// DynamicWall_Future is a wrapper for a DynamicWall promised by a client call.
type DynamicWall_Future struct{ *capnp.Future }

func (f DynamicWall_Future) Struct() (DynamicWall, error) {
	p, err := f.Future.Ptr()
	return DynamicWall(p.Struct()), err
}

type BandolierCreate capnp.Struct

// BandolierCreate_TypeID is the unique identifier for the type BandolierCreate.
const BandolierCreate_TypeID = 0xedada67c810ba36d

func NewBandolierCreate(s *capnp.Segment) (BandolierCreate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierCreate(st), err
}

func NewRootBandolierCreate(s *capnp.Segment) (BandolierCreate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BandolierCreate(st), err
}

func ReadRootBandolierCreate(msg *capnp.Message) (BandolierCreate, error) {
	root, err := msg.Root()
	return BandolierCreate(root.Struct()), err
}

func (s BandolierCreate) String() string {
	str, _ := text.Marshal(0xedada67c810ba36d, capnp.Struct(s))
	return str
}

func (s BandolierCreate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierCreate) DecodeFromPtr(p capnp.Ptr) BandolierCreate {
	return BandolierCreate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierCreate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierCreate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierCreate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierCreate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierCreate) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierCreate) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierCreate) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierCreate) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s BandolierCreate) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s BandolierCreate) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BandolierCreate) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s BandolierCreate) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// BandolierCreate_List is a list of BandolierCreate.
type BandolierCreate_List = capnp.StructList[BandolierCreate]

// NewBandolierCreate creates a new list of BandolierCreate.
func NewBandolierCreate_List(s *capnp.Segment, sz int32) (BandolierCreate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[BandolierCreate](l), err
}

// BandolierCreate_Future is a wrapper for a BandolierCreate promised by a client call.
type BandolierCreate_Future struct{ *capnp.Future }

func (f BandolierCreate_Future) Struct() (BandolierCreate, error) {
	p, err := f.Future.Ptr()
	return BandolierCreate(p.Struct()), err
}

type BandolierDelete capnp.Struct

// BandolierDelete_TypeID is the unique identifier for the type BandolierDelete.
const BandolierDelete_TypeID = 0xa304ad602f730110

func NewBandolierDelete(s *capnp.Segment) (BandolierDelete, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierDelete(st), err
}

func NewRootBandolierDelete(s *capnp.Segment) (BandolierDelete, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierDelete(st), err
}

func ReadRootBandolierDelete(msg *capnp.Message) (BandolierDelete, error) {
	root, err := msg.Root()
	return BandolierDelete(root.Struct()), err
}

func (s BandolierDelete) String() string {
	str, _ := text.Marshal(0xa304ad602f730110, capnp.Struct(s))
	return str
}

func (s BandolierDelete) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierDelete) DecodeFromPtr(p capnp.Ptr) BandolierDelete {
	return BandolierDelete(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierDelete) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierDelete) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierDelete) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierDelete) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierDelete) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierDelete) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierDelete) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierDelete) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BandolierDelete_List is a list of BandolierDelete.
type BandolierDelete_List = capnp.StructList[BandolierDelete]

// NewBandolierDelete creates a new list of BandolierDelete.
func NewBandolierDelete_List(s *capnp.Segment, sz int32) (BandolierDelete_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BandolierDelete](l), err
}

// BandolierDelete_Future is a wrapper for a BandolierDelete promised by a client call.
type BandolierDelete_Future struct{ *capnp.Future }

func (f BandolierDelete_Future) Struct() (BandolierDelete, error) {
	p, err := f.Future.Ptr()
	return BandolierDelete(p.Struct()), err
}

type BandolierSet capnp.Struct

// BandolierSet_TypeID is the unique identifier for the type BandolierSet.
const BandolierSet_TypeID = 0xae87b106322248a8

func NewBandolierSet(s *capnp.Segment) (BandolierSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierSet(st), err
}

func NewRootBandolierSet(s *capnp.Segment) (BandolierSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BandolierSet(st), err
}

func ReadRootBandolierSet(msg *capnp.Message) (BandolierSet, error) {
	root, err := msg.Root()
	return BandolierSet(root.Struct()), err
}

func (s BandolierSet) String() string {
	str, _ := text.Marshal(0xae87b106322248a8, capnp.Struct(s))
	return str
}

func (s BandolierSet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BandolierSet) DecodeFromPtr(p capnp.Ptr) BandolierSet {
	return BandolierSet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BandolierSet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BandolierSet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BandolierSet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BandolierSet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BandolierSet) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s BandolierSet) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s BandolierSet) Number() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s BandolierSet) SetNumber(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// BandolierSet_List is a list of BandolierSet.
type BandolierSet_List = capnp.StructList[BandolierSet]

// NewBandolierSet creates a new list of BandolierSet.
func NewBandolierSet_List(s *capnp.Segment, sz int32) (BandolierSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BandolierSet](l), err
}

// BandolierSet_Future is a wrapper for a BandolierSet promised by a client call.
type BandolierSet_Future struct{ *capnp.Future }

func (f BandolierSet_Future) Struct() (BandolierSet, error) {
	p, err := f.Future.Ptr()
	return BandolierSet(p.Struct()), err
}

type Arrow capnp.Struct

// Arrow_TypeID is the unique identifier for the type Arrow.
const Arrow_TypeID = 0x8f80c9fc8ead22c9

func NewArrow(s *capnp.Segment) (Arrow, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Arrow(st), err
}

func NewRootArrow(s *capnp.Segment) (Arrow, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return Arrow(st), err
}

func ReadRootArrow(msg *capnp.Message) (Arrow, error) {
	root, err := msg.Root()
	return Arrow(root.Struct()), err
}

func (s Arrow) String() string {
	str, _ := text.Marshal(0x8f80c9fc8ead22c9, capnp.Struct(s))
	return str
}

func (s Arrow) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Arrow) DecodeFromPtr(p capnp.Ptr) Arrow {
	return Arrow(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Arrow) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Arrow) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Arrow) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Arrow) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Arrow) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Arrow) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Arrow) SrcY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Arrow) SetSrcY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Arrow) SrcX() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Arrow) SetSrcX(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s Arrow) SrcZ() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Arrow) SetSrcZ(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Arrow) Velocity() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s Arrow) SetVelocity(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s Arrow) LaunchAngle() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s Arrow) SetLaunchAngle(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s Arrow) Tilt() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s Arrow) SetTilt(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s Arrow) Arc() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s Arrow) SetArc(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s Arrow) SourceId() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s Arrow) SetSourceId(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s Arrow) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s Arrow) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s Arrow) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Arrow) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s Arrow) ModelName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Arrow) HasModelName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Arrow) ModelNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Arrow) SetModelName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Arrow_List is a list of Arrow.
type Arrow_List = capnp.StructList[Arrow]

// NewArrow creates a new list of Arrow.
func NewArrow_List(s *capnp.Segment, sz int32) (Arrow_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[Arrow](l), err
}

// Arrow_Future is a wrapper for a Arrow promised by a client call.
type Arrow_Future struct{ *capnp.Future }

func (f Arrow_Future) Struct() (Arrow, error) {
	p, err := f.Future.Ptr()
	return Arrow(p.Struct()), err
}

type Consent capnp.Struct

// Consent_TypeID is the unique identifier for the type Consent.
const Consent_TypeID = 0xa66384177fb99486

func NewConsent(s *capnp.Segment) (Consent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Consent(st), err
}

func NewRootConsent(s *capnp.Segment) (Consent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Consent(st), err
}

func ReadRootConsent(msg *capnp.Message) (Consent, error) {
	root, err := msg.Root()
	return Consent(root.Struct()), err
}

func (s Consent) String() string {
	str, _ := text.Marshal(0xa66384177fb99486, capnp.Struct(s))
	return str
}

func (s Consent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Consent) DecodeFromPtr(p capnp.Ptr) Consent {
	return Consent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Consent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Consent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Consent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Consent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Consent) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Consent) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Consent) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Consent) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Consent_List is a list of Consent.
type Consent_List = capnp.StructList[Consent]

// NewConsent creates a new list of Consent.
func NewConsent_List(s *capnp.Segment, sz int32) (Consent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Consent](l), err
}

// Consent_Future is a wrapper for a Consent promised by a client call.
type Consent_Future struct{ *capnp.Future }

func (f Consent_Future) Struct() (Consent, error) {
	p, err := f.Future.Ptr()
	return Consent(p.Struct()), err
}

type AdventureMerchant capnp.Struct

// AdventureMerchant_TypeID is the unique identifier for the type AdventureMerchant.
const AdventureMerchant_TypeID = 0xf89cd60c9713ce58

func NewAdventureMerchant(s *capnp.Segment) (AdventureMerchant, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureMerchant(st), err
}

func NewRootAdventureMerchant(s *capnp.Segment) (AdventureMerchant, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AdventureMerchant(st), err
}

func ReadRootAdventureMerchant(msg *capnp.Message) (AdventureMerchant, error) {
	root, err := msg.Root()
	return AdventureMerchant(root.Struct()), err
}

func (s AdventureMerchant) String() string {
	str, _ := text.Marshal(0xf89cd60c9713ce58, capnp.Struct(s))
	return str
}

func (s AdventureMerchant) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AdventureMerchant) DecodeFromPtr(p capnp.Ptr) AdventureMerchant {
	return AdventureMerchant(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AdventureMerchant) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AdventureMerchant) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AdventureMerchant) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AdventureMerchant) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AdventureMerchant) EntityId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AdventureMerchant) SetEntityId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// AdventureMerchant_List is a list of AdventureMerchant.
type AdventureMerchant_List = capnp.StructList[AdventureMerchant]

// NewAdventureMerchant creates a new list of AdventureMerchant.
func NewAdventureMerchant_List(s *capnp.Segment, sz int32) (AdventureMerchant_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AdventureMerchant](l), err
}

// AdventureMerchant_Future is a wrapper for a AdventureMerchant promised by a client call.
type AdventureMerchant_Future struct{ *capnp.Future }

func (f AdventureMerchant_Future) Struct() (AdventureMerchant, error) {
	p, err := f.Future.Ptr()
	return AdventureMerchant(p.Struct()), err
}

type GMtoggle capnp.Struct

// GMtoggle_TypeID is the unique identifier for the type GMtoggle.
const GMtoggle_TypeID = 0x82a7789fb5b3a028

func NewGMtoggle(s *capnp.Segment) (GMtoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMtoggle(st), err
}

func NewRootGMtoggle(s *capnp.Segment) (GMtoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GMtoggle(st), err
}

func ReadRootGMtoggle(msg *capnp.Message) (GMtoggle, error) {
	root, err := msg.Root()
	return GMtoggle(root.Struct()), err
}

func (s GMtoggle) String() string {
	str, _ := text.Marshal(0x82a7789fb5b3a028, capnp.Struct(s))
	return str
}

func (s GMtoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GMtoggle) DecodeFromPtr(p capnp.Ptr) GMtoggle {
	return GMtoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GMtoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GMtoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GMtoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GMtoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GMtoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GMtoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// GMtoggle_List is a list of GMtoggle.
type GMtoggle_List = capnp.StructList[GMtoggle]

// NewGMtoggle creates a new list of GMtoggle.
func NewGMtoggle_List(s *capnp.Segment, sz int32) (GMtoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GMtoggle](l), err
}

// GMtoggle_Future is a wrapper for a GMtoggle promised by a client call.
type GMtoggle_Future struct{ *capnp.Future }

func (f GMtoggle_Future) Struct() (GMtoggle, error) {
	p, err := f.Future.Ptr()
	return GMtoggle(p.Struct()), err
}

type GroupInvite capnp.Struct

// GroupInvite_TypeID is the unique identifier for the type GroupInvite.
const GroupInvite_TypeID = 0x9b932a4905396044

func NewGroupInvite(s *capnp.Segment) (GroupInvite, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupInvite(st), err
}

func NewRootGroupInvite(s *capnp.Segment) (GroupInvite, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GroupInvite(st), err
}

func ReadRootGroupInvite(msg *capnp.Message) (GroupInvite, error) {
	root, err := msg.Root()
	return GroupInvite(root.Struct()), err
}

func (s GroupInvite) String() string {
	str, _ := text.Marshal(0x9b932a4905396044, capnp.Struct(s))
	return str
}

func (s GroupInvite) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GroupInvite) DecodeFromPtr(p capnp.Ptr) GroupInvite {
	return GroupInvite(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GroupInvite) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GroupInvite) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GroupInvite) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GroupInvite) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GroupInvite) InviteeName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GroupInvite) HasInviteeName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GroupInvite) InviteeNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GroupInvite) SetInviteeName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GroupInvite) InviterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GroupInvite) HasInviterName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GroupInvite) InviterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GroupInvite) SetInviterName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// GroupInvite_List is a list of GroupInvite.
type GroupInvite_List = capnp.StructList[GroupInvite]

// NewGroupInvite creates a new list of GroupInvite.
func NewGroupInvite_List(s *capnp.Segment, sz int32) (GroupInvite_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[GroupInvite](l), err
}

// GroupInvite_Future is a wrapper for a GroupInvite promised by a client call.
type GroupInvite_Future struct{ *capnp.Future }

func (f GroupInvite_Future) Struct() (GroupInvite, error) {
	p, err := f.Future.Ptr()
	return GroupInvite(p.Struct()), err
}

type ColoredText capnp.Struct

// ColoredText_TypeID is the unique identifier for the type ColoredText.
const ColoredText_TypeID = 0xf55818d39f2c0c72

func NewColoredText(s *capnp.Segment) (ColoredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColoredText(st), err
}

func NewRootColoredText(s *capnp.Segment) (ColoredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ColoredText(st), err
}

func ReadRootColoredText(msg *capnp.Message) (ColoredText, error) {
	root, err := msg.Root()
	return ColoredText(root.Struct()), err
}

func (s ColoredText) String() string {
	str, _ := text.Marshal(0xf55818d39f2c0c72, capnp.Struct(s))
	return str
}

func (s ColoredText) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ColoredText) DecodeFromPtr(p capnp.Ptr) ColoredText {
	return ColoredText(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ColoredText) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ColoredText) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ColoredText) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ColoredText) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ColoredText) Color() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ColoredText) SetColor(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ColoredText) Msg() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ColoredText) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ColoredText) MsgBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ColoredText) SetMsg(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ColoredText_List is a list of ColoredText.
type ColoredText_List = capnp.StructList[ColoredText]

// NewColoredText creates a new list of ColoredText.
func NewColoredText_List(s *capnp.Segment, sz int32) (ColoredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ColoredText](l), err
}

// ColoredText_Future is a wrapper for a ColoredText promised by a client call.
type ColoredText_Future struct{ *capnp.Future }

func (f ColoredText_Future) Struct() (ColoredText, error) {
	p, err := f.Future.Ptr()
	return ColoredText(p.Struct()), err
}

type UseAA capnp.Struct

// UseAA_TypeID is the unique identifier for the type UseAA.
const UseAA_TypeID = 0xa377d9a07bd4d6d6

func NewUseAA(s *capnp.Segment) (UseAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UseAA(st), err
}

func NewRootUseAA(s *capnp.Segment) (UseAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UseAA(st), err
}

func ReadRootUseAA(msg *capnp.Message) (UseAA, error) {
	root, err := msg.Root()
	return UseAA(root.Struct()), err
}

func (s UseAA) String() string {
	str, _ := text.Marshal(0xa377d9a07bd4d6d6, capnp.Struct(s))
	return str
}

func (s UseAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UseAA) DecodeFromPtr(p capnp.Ptr) UseAA {
	return UseAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UseAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UseAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UseAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UseAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UseAA) Begin() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s UseAA) SetBegin(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s UseAA) Ability() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s UseAA) SetAbility(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s UseAA) End() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s UseAA) SetEnd(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// UseAA_List is a list of UseAA.
type UseAA_List = capnp.StructList[UseAA]

// NewUseAA creates a new list of UseAA.
func NewUseAA_List(s *capnp.Segment, sz int32) (UseAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[UseAA](l), err
}

// UseAA_Future is a wrapper for a UseAA promised by a client call.
type UseAA_Future struct{ *capnp.Future }

func (f UseAA_Future) Struct() (UseAA, error) {
	p, err := f.Future.Ptr()
	return UseAA(p.Struct()), err
}

type AAAbility capnp.Struct

// AAAbility_TypeID is the unique identifier for the type AAAbility.
const AAAbility_TypeID = 0x9598dccef1d83c38

func NewAAAbility(s *capnp.Segment) (AAAbility, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAbility(st), err
}

func NewRootAAAbility(s *capnp.Segment) (AAAbility, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAbility(st), err
}

func ReadRootAAAbility(msg *capnp.Message) (AAAbility, error) {
	root, err := msg.Root()
	return AAAbility(root.Struct()), err
}

func (s AAAbility) String() string {
	str, _ := text.Marshal(0x9598dccef1d83c38, capnp.Struct(s))
	return str
}

func (s AAAbility) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAAbility) DecodeFromPtr(p capnp.Ptr) AAAbility {
	return AAAbility(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAAbility) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAAbility) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAAbility) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAAbility) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAAbility) SkillId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAAbility) SetSkillId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAAbility) BaseValue() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAAbility) SetBaseValue(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AAAbility) LimitValue() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AAAbility) SetLimitValue(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AAAbility) Slot() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AAAbility) SetSlot(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AAAbility_List is a list of AAAbility.
type AAAbility_List = capnp.StructList[AAAbility]

// NewAAAbility creates a new list of AAAbility.
func NewAAAbility_List(s *capnp.Segment, sz int32) (AAAbility_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AAAbility](l), err
}

// AAAbility_Future is a wrapper for a AAAbility promised by a client call.
type AAAbility_Future struct{ *capnp.Future }

func (f AAAbility_Future) Struct() (AAAbility, error) {
	p, err := f.Future.Ptr()
	return AAAbility(p.Struct()), err
}

type SendAA capnp.Struct

// SendAA_TypeID is the unique identifier for the type SendAA.
const SendAA_TypeID = 0xdacdaa0d69c497ba

func NewSendAA(s *capnp.Segment) (SendAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1})
	return SendAA(st), err
}

func NewRootSendAA(s *capnp.Segment) (SendAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1})
	return SendAA(st), err
}

func ReadRootSendAA(msg *capnp.Message) (SendAA, error) {
	root, err := msg.Root()
	return SendAA(root.Struct()), err
}

func (s SendAA) String() string {
	str, _ := text.Marshal(0xdacdaa0d69c497ba, capnp.Struct(s))
	return str
}

func (s SendAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SendAA) DecodeFromPtr(p capnp.Ptr) SendAA {
	return SendAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SendAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SendAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SendAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SendAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SendAA) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SendAA) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SendAA) HotkeySid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SendAA) SetHotkeySid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SendAA) HotkeySid2() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SendAA) SetHotkeySid2(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s SendAA) TitleSid() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s SendAA) SetTitleSid(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s SendAA) DescSid() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s SendAA) SetDescSid(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s SendAA) ClassType() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s SendAA) SetClassType(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s SendAA) Cost() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s SendAA) SetCost(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s SendAA) Seq() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s SendAA) SetSeq(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s SendAA) CurrentLevel() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s SendAA) SetCurrentLevel(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

func (s SendAA) PrereqSkill() int32 {
	return int32(capnp.Struct(s).Uint32(36))
}

func (s SendAA) SetPrereqSkill(v int32) {
	capnp.Struct(s).SetUint32(36, uint32(v))
}

func (s SendAA) PrereqMinpoints() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s SendAA) SetPrereqMinpoints(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s SendAA) Type() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s SendAA) SetType(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s SendAA) Spellid() int32 {
	return int32(capnp.Struct(s).Uint32(48))
}

func (s SendAA) SetSpellid(v int32) {
	capnp.Struct(s).SetUint32(48, uint32(v))
}

func (s SendAA) SpellType() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s SendAA) SetSpellType(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s SendAA) SpellRefresh() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s SendAA) SetSpellRefresh(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s SendAA) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s SendAA) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

func (s SendAA) MaxLevel() int32 {
	return int32(capnp.Struct(s).Uint32(64))
}

func (s SendAA) SetMaxLevel(v int32) {
	capnp.Struct(s).SetUint32(64, uint32(v))
}

func (s SendAA) LastId() int32 {
	return int32(capnp.Struct(s).Uint32(68))
}

func (s SendAA) SetLastId(v int32) {
	capnp.Struct(s).SetUint32(68, uint32(v))
}

func (s SendAA) NextId() int32 {
	return int32(capnp.Struct(s).Uint32(72))
}

func (s SendAA) SetNextId(v int32) {
	capnp.Struct(s).SetUint32(72, uint32(v))
}

func (s SendAA) Cost2() int32 {
	return int32(capnp.Struct(s).Uint32(76))
}

func (s SendAA) SetCost2(v int32) {
	capnp.Struct(s).SetUint32(76, uint32(v))
}

func (s SendAA) Count() int32 {
	return int32(capnp.Struct(s).Uint32(80))
}

func (s SendAA) SetCount(v int32) {
	capnp.Struct(s).SetUint32(80, uint32(v))
}

func (s SendAA) Abilities() (AAAbility_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAAbility_List(p.List()), err
}

func (s SendAA) HasAbilities() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SendAA) SetAbilities(v AAAbility_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAbilities sets the abilities field to a newly
// allocated AAAbility_List, preferring placement in s's segment.
func (s SendAA) NewAbilities(n int32) (AAAbility_List, error) {
	l, err := NewAAAbility_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAAbility_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SendAA_List is a list of SendAA.
type SendAA_List = capnp.StructList[SendAA]

// NewSendAA creates a new list of SendAA.
func NewSendAA_List(s *capnp.Segment, sz int32) (SendAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 1}, sz)
	return capnp.StructList[SendAA](l), err
}

// SendAA_Future is a wrapper for a SendAA promised by a client call.
type SendAA_Future struct{ *capnp.Future }

func (f SendAA_Future) Struct() (SendAA, error) {
	p, err := f.Future.Ptr()
	return SendAA(p.Struct()), err
}

type AAList capnp.Struct

// AAList_TypeID is the unique identifier for the type AAList.
const AAList_TypeID = 0xec5aa6bcd4fca2e4

func NewAAList(s *capnp.Segment) (AAList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AAList(st), err
}

func NewRootAAList(s *capnp.Segment) (AAList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AAList(st), err
}

func ReadRootAAList(msg *capnp.Message) (AAList, error) {
	root, err := msg.Root()
	return AAList(root.Struct()), err
}

func (s AAList) String() string {
	str, _ := text.Marshal(0xec5aa6bcd4fca2e4, capnp.Struct(s))
	return str
}

func (s AAList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAList) DecodeFromPtr(p capnp.Ptr) AAList {
	return AAList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAList) Aa() (SendAA_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SendAA_List(p.List()), err
}

func (s AAList) HasAa() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AAList) SetAa(v SendAA_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAa sets the aa field to a newly
// allocated SendAA_List, preferring placement in s's segment.
func (s AAList) NewAa(n int32) (SendAA_List, error) {
	l, err := NewSendAA_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SendAA_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AAList_List is a list of AAList.
type AAList_List = capnp.StructList[AAList]

// NewAAList creates a new list of AAList.
func NewAAList_List(s *capnp.Segment, sz int32) (AAList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AAList](l), err
}

// AAList_Future is a wrapper for a AAList promised by a client call.
type AAList_Future struct{ *capnp.Future }

func (f AAList_Future) Struct() (AAList, error) {
	p, err := f.Future.Ptr()
	return AAList(p.Struct()), err
}

type AAAction capnp.Struct

// AAAction_TypeID is the unique identifier for the type AAAction.
const AAAction_TypeID = 0xbb2eb4d03dfe2a7d

func NewAAAction(s *capnp.Segment) (AAAction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAction(st), err
}

func NewRootAAAction(s *capnp.Segment) (AAAction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AAAction(st), err
}

func ReadRootAAAction(msg *capnp.Message) (AAAction, error) {
	root, err := msg.Root()
	return AAAction(root.Struct()), err
}

func (s AAAction) String() string {
	str, _ := text.Marshal(0xbb2eb4d03dfe2a7d, capnp.Struct(s))
	return str
}

func (s AAAction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAAction) DecodeFromPtr(p capnp.Ptr) AAAction {
	return AAAction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAAction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAAction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAAction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAAction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAAction) Action() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAAction) SetAction(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAAction) Ability() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAAction) SetAbility(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AAAction) TargetId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AAAction) SetTargetId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AAAction) ExpValue() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AAAction) SetExpValue(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// AAAction_List is a list of AAAction.
type AAAction_List = capnp.StructList[AAAction]

// NewAAAction creates a new list of AAAction.
func NewAAAction_List(s *capnp.Segment, sz int32) (AAAction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AAAction](l), err
}

// AAAction_Future is a wrapper for a AAAction promised by a client call.
type AAAction_Future struct{ *capnp.Future }

func (f AAAction_Future) Struct() (AAAction, error) {
	p, err := f.Future.Ptr()
	return AAAction(p.Struct()), err
}

type AAExpUpdate capnp.Struct

// AAExpUpdate_TypeID is the unique identifier for the type AAExpUpdate.
const AAExpUpdate_TypeID = 0xb861bce5eec387bd

func NewAAExpUpdate(s *capnp.Segment) (AAExpUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAExpUpdate(st), err
}

func NewRootAAExpUpdate(s *capnp.Segment) (AAExpUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AAExpUpdate(st), err
}

func ReadRootAAExpUpdate(msg *capnp.Message) (AAExpUpdate, error) {
	root, err := msg.Root()
	return AAExpUpdate(root.Struct()), err
}

func (s AAExpUpdate) String() string {
	str, _ := text.Marshal(0xb861bce5eec387bd, capnp.Struct(s))
	return str
}

func (s AAExpUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AAExpUpdate) DecodeFromPtr(p capnp.Ptr) AAExpUpdate {
	return AAExpUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AAExpUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AAExpUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AAExpUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AAExpUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AAExpUpdate) AapointsUnspent() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AAExpUpdate) SetAapointsUnspent(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AAExpUpdate) AaxpPercent() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AAExpUpdate) SetAaxpPercent(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// AAExpUpdate_List is a list of AAExpUpdate.
type AAExpUpdate_List = capnp.StructList[AAExpUpdate]

// NewAAExpUpdate creates a new list of AAExpUpdate.
func NewAAExpUpdate_List(s *capnp.Segment, sz int32) (AAExpUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AAExpUpdate](l), err
}

// AAExpUpdate_Future is a wrapper for a AAExpUpdate promised by a client call.
type AAExpUpdate_Future struct{ *capnp.Future }

func (f AAExpUpdate_Future) Struct() (AAExpUpdate, error) {
	p, err := f.Future.Ptr()
	return AAExpUpdate(p.Struct()), err
}

type AltAdvStats capnp.Struct

// AltAdvStats_TypeID is the unique identifier for the type AltAdvStats.
const AltAdvStats_TypeID = 0xb8ef2f123b9801df

func NewAltAdvStats(s *capnp.Segment) (AltAdvStats, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AltAdvStats(st), err
}

func NewRootAltAdvStats(s *capnp.Segment) (AltAdvStats, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return AltAdvStats(st), err
}

func ReadRootAltAdvStats(msg *capnp.Message) (AltAdvStats, error) {
	root, err := msg.Root()
	return AltAdvStats(root.Struct()), err
}

func (s AltAdvStats) String() string {
	str, _ := text.Marshal(0xb8ef2f123b9801df, capnp.Struct(s))
	return str
}

func (s AltAdvStats) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AltAdvStats) DecodeFromPtr(p capnp.Ptr) AltAdvStats {
	return AltAdvStats(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AltAdvStats) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AltAdvStats) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AltAdvStats) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AltAdvStats) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AltAdvStats) Experience() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AltAdvStats) SetExperience(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AltAdvStats) Unspent() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AltAdvStats) SetUnspent(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AltAdvStats) Percentage() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AltAdvStats) SetPercentage(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// AltAdvStats_List is a list of AltAdvStats.
type AltAdvStats_List = capnp.StructList[AltAdvStats]

// NewAltAdvStats creates a new list of AltAdvStats.
func NewAltAdvStats_List(s *capnp.Segment, sz int32) (AltAdvStats_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[AltAdvStats](l), err
}

// AltAdvStats_Future is a wrapper for a AltAdvStats promised by a client call.
type AltAdvStats_Future struct{ *capnp.Future }

func (f AltAdvStats_Future) Struct() (AltAdvStats, error) {
	p, err := f.Future.Ptr()
	return AltAdvStats(p.Struct()), err
}

type PlayerAA capnp.Struct

// PlayerAA_TypeID is the unique identifier for the type PlayerAA.
const PlayerAA_TypeID = 0x8cf4d94985ccea99

func NewPlayerAA(s *capnp.Segment) (PlayerAA, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayerAA(st), err
}

func NewRootPlayerAA(s *capnp.Segment) (PlayerAA, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PlayerAA(st), err
}

func ReadRootPlayerAA(msg *capnp.Message) (PlayerAA, error) {
	root, err := msg.Root()
	return PlayerAA(root.Struct()), err
}

func (s PlayerAA) String() string {
	str, _ := text.Marshal(0x8cf4d94985ccea99, capnp.Struct(s))
	return str
}

func (s PlayerAA) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PlayerAA) DecodeFromPtr(p capnp.Ptr) PlayerAA {
	return PlayerAA(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PlayerAA) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PlayerAA) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PlayerAA) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PlayerAA) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PlayerAA) AaList() (AAArray_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAArray_List(p.List()), err
}

func (s PlayerAA) HasAaList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PlayerAA) SetAaList(v AAArray_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAaList sets the aaList field to a newly
// allocated AAArray_List, preferring placement in s's segment.
func (s PlayerAA) NewAaList(n int32) (AAArray_List, error) {
	l, err := NewAAArray_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAArray_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PlayerAA_List is a list of PlayerAA.
type PlayerAA_List = capnp.StructList[PlayerAA]

// NewPlayerAA creates a new list of PlayerAA.
func NewPlayerAA_List(s *capnp.Segment, sz int32) (PlayerAA_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PlayerAA](l), err
}

// PlayerAA_Future is a wrapper for a PlayerAA promised by a client call.
type PlayerAA_Future struct{ *capnp.Future }

func (f PlayerAA_Future) Struct() (PlayerAA, error) {
	p, err := f.Future.Ptr()
	return PlayerAA(p.Struct()), err
}

type AATable capnp.Struct

// AATable_TypeID is the unique identifier for the type AATable.
const AATable_TypeID = 0xd09020015ade2993

func NewAATable(s *capnp.Segment) (AATable, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AATable(st), err
}

func NewRootAATable(s *capnp.Segment) (AATable, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AATable(st), err
}

func ReadRootAATable(msg *capnp.Message) (AATable, error) {
	root, err := msg.Root()
	return AATable(root.Struct()), err
}

func (s AATable) String() string {
	str, _ := text.Marshal(0xd09020015ade2993, capnp.Struct(s))
	return str
}

func (s AATable) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AATable) DecodeFromPtr(p capnp.Ptr) AATable {
	return AATable(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AATable) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AATable) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AATable) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AATable) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AATable) AaList() (AAArray_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AAArray_List(p.List()), err
}

func (s AATable) HasAaList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AATable) SetAaList(v AAArray_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAaList sets the aaList field to a newly
// allocated AAArray_List, preferring placement in s's segment.
func (s AATable) NewAaList(n int32) (AAArray_List, error) {
	l, err := NewAAArray_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AAArray_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AATable_List is a list of AATable.
type AATable_List = capnp.StructList[AATable]

// NewAATable creates a new list of AATable.
func NewAATable_List(s *capnp.Segment, sz int32) (AATable_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AATable](l), err
}

// AATable_Future is a wrapper for a AATable promised by a client call.
type AATable_Future struct{ *capnp.Future }

func (f AATable_Future) Struct() (AATable, error) {
	p, err := f.Future.Ptr()
	return AATable(p.Struct()), err
}

type Weather capnp.Struct

// Weather_TypeID is the unique identifier for the type Weather.
const Weather_TypeID = 0xe930a7e80f737844

func NewWeather(s *capnp.Segment) (Weather, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Weather(st), err
}

func NewRootWeather(s *capnp.Segment) (Weather, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Weather(st), err
}

func ReadRootWeather(msg *capnp.Message) (Weather, error) {
	root, err := msg.Root()
	return Weather(root.Struct()), err
}

func (s Weather) String() string {
	str, _ := text.Marshal(0xe930a7e80f737844, capnp.Struct(s))
	return str
}

func (s Weather) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Weather) DecodeFromPtr(p capnp.Ptr) Weather {
	return Weather(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Weather) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Weather) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Weather) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Weather) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Weather) Val() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Weather) SetVal(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Weather) Type() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Weather) SetType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s Weather) Mode() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s Weather) SetMode(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// Weather_List is a list of Weather.
type Weather_List = capnp.StructList[Weather]

// NewWeather creates a new list of Weather.
func NewWeather_List(s *capnp.Segment, sz int32) (Weather_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Weather](l), err
}

// Weather_Future is a wrapper for a Weather promised by a client call.
type Weather_Future struct{ *capnp.Future }

func (f Weather_Future) Struct() (Weather, error) {
	p, err := f.Future.Ptr()
	return Weather(p.Struct()), err
}

type LoadSpellSet capnp.Struct

// LoadSpellSet_TypeID is the unique identifier for the type LoadSpellSet.
const LoadSpellSet_TypeID = 0xc854a2272dea6789

func NewLoadSpellSet(s *capnp.Segment) (LoadSpellSet, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LoadSpellSet(st), err
}

func NewRootLoadSpellSet(s *capnp.Segment) (LoadSpellSet, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LoadSpellSet(st), err
}

func ReadRootLoadSpellSet(msg *capnp.Message) (LoadSpellSet, error) {
	root, err := msg.Root()
	return LoadSpellSet(root.Struct()), err
}

func (s LoadSpellSet) String() string {
	str, _ := text.Marshal(0xc854a2272dea6789, capnp.Struct(s))
	return str
}

func (s LoadSpellSet) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LoadSpellSet) DecodeFromPtr(p capnp.Ptr) LoadSpellSet {
	return LoadSpellSet(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LoadSpellSet) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LoadSpellSet) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LoadSpellSet) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LoadSpellSet) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LoadSpellSet) Spell() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s LoadSpellSet) HasSpell() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LoadSpellSet) SetSpell(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpell sets the spell field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s LoadSpellSet) NewSpell(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// LoadSpellSet_List is a list of LoadSpellSet.
type LoadSpellSet_List = capnp.StructList[LoadSpellSet]

// NewLoadSpellSet creates a new list of LoadSpellSet.
func NewLoadSpellSet_List(s *capnp.Segment, sz int32) (LoadSpellSet_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LoadSpellSet](l), err
}

// LoadSpellSet_Future is a wrapper for a LoadSpellSet promised by a client call.
type LoadSpellSet_Future struct{ *capnp.Future }

func (f LoadSpellSet_Future) Struct() (LoadSpellSet, error) {
	p, err := f.Future.Ptr()
	return LoadSpellSet(p.Struct()), err
}

type ApplyPoison capnp.Struct

// ApplyPoison_TypeID is the unique identifier for the type ApplyPoison.
const ApplyPoison_TypeID = 0xdbae5e634d8e9ecd

func NewApplyPoison(s *capnp.Segment) (ApplyPoison, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ApplyPoison(st), err
}

func NewRootApplyPoison(s *capnp.Segment) (ApplyPoison, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ApplyPoison(st), err
}

func ReadRootApplyPoison(msg *capnp.Message) (ApplyPoison, error) {
	root, err := msg.Root()
	return ApplyPoison(root.Struct()), err
}

func (s ApplyPoison) String() string {
	str, _ := text.Marshal(0xdbae5e634d8e9ecd, capnp.Struct(s))
	return str
}

func (s ApplyPoison) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ApplyPoison) DecodeFromPtr(p capnp.Ptr) ApplyPoison {
	return ApplyPoison(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ApplyPoison) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ApplyPoison) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ApplyPoison) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ApplyPoison) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ApplyPoison) InventorySlot() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ApplyPoison) SetInventorySlot(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ApplyPoison) Success() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ApplyPoison) SetSuccess(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ApplyPoison_List is a list of ApplyPoison.
type ApplyPoison_List = capnp.StructList[ApplyPoison]

// NewApplyPoison creates a new list of ApplyPoison.
func NewApplyPoison_List(s *capnp.Segment, sz int32) (ApplyPoison_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ApplyPoison](l), err
}

// ApplyPoison_Future is a wrapper for a ApplyPoison promised by a client call.
type ApplyPoison_Future struct{ *capnp.Future }

func (f ApplyPoison_Future) Struct() (ApplyPoison, error) {
	p, err := f.Future.Ptr()
	return ApplyPoison(p.Struct()), err
}

type GuildMemberUpdate capnp.Struct

// GuildMemberUpdate_TypeID is the unique identifier for the type GuildMemberUpdate.
const GuildMemberUpdate_TypeID = 0x917f02f6029babd0

func NewGuildMemberUpdate(s *capnp.Segment) (GuildMemberUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildMemberUpdate(st), err
}

func NewRootGuildMemberUpdate(s *capnp.Segment) (GuildMemberUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GuildMemberUpdate(st), err
}

func ReadRootGuildMemberUpdate(msg *capnp.Message) (GuildMemberUpdate, error) {
	root, err := msg.Root()
	return GuildMemberUpdate(root.Struct()), err
}

func (s GuildMemberUpdate) String() string {
	str, _ := text.Marshal(0x917f02f6029babd0, capnp.Struct(s))
	return str
}

func (s GuildMemberUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GuildMemberUpdate) DecodeFromPtr(p capnp.Ptr) GuildMemberUpdate {
	return GuildMemberUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GuildMemberUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GuildMemberUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GuildMemberUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GuildMemberUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GuildMemberUpdate) GuildId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s GuildMemberUpdate) SetGuildId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s GuildMemberUpdate) MemberName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GuildMemberUpdate) HasMemberName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GuildMemberUpdate) MemberNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GuildMemberUpdate) SetMemberName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s GuildMemberUpdate) ZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GuildMemberUpdate) SetZoneId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s GuildMemberUpdate) InstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s GuildMemberUpdate) SetInstanceId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// GuildMemberUpdate_List is a list of GuildMemberUpdate.
type GuildMemberUpdate_List = capnp.StructList[GuildMemberUpdate]

// NewGuildMemberUpdate creates a new list of GuildMemberUpdate.
func NewGuildMemberUpdate_List(s *capnp.Segment, sz int32) (GuildMemberUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[GuildMemberUpdate](l), err
}

// GuildMemberUpdate_Future is a wrapper for a GuildMemberUpdate promised by a client call.
type GuildMemberUpdate_Future struct{ *capnp.Future }

func (f GuildMemberUpdate_Future) Struct() (GuildMemberUpdate, error) {
	p, err := f.Future.Ptr()
	return GuildMemberUpdate(p.Struct()), err
}

type VeteranRewardItem capnp.Struct

// VeteranRewardItem_TypeID is the unique identifier for the type VeteranRewardItem.
const VeteranRewardItem_TypeID = 0xc5c8431019d453a8

func NewVeteranRewardItem(s *capnp.Segment) (VeteranRewardItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranRewardItem(st), err
}

func NewRootVeteranRewardItem(s *capnp.Segment) (VeteranRewardItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranRewardItem(st), err
}

func ReadRootVeteranRewardItem(msg *capnp.Message) (VeteranRewardItem, error) {
	root, err := msg.Root()
	return VeteranRewardItem(root.Struct()), err
}

func (s VeteranRewardItem) String() string {
	str, _ := text.Marshal(0xc5c8431019d453a8, capnp.Struct(s))
	return str
}

func (s VeteranRewardItem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VeteranRewardItem) DecodeFromPtr(p capnp.Ptr) VeteranRewardItem {
	return VeteranRewardItem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VeteranRewardItem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VeteranRewardItem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VeteranRewardItem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VeteranRewardItem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VeteranRewardItem) ItemId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s VeteranRewardItem) SetItemId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s VeteranRewardItem) ItemName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s VeteranRewardItem) HasItemName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s VeteranRewardItem) ItemNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s VeteranRewardItem) SetItemName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// VeteranRewardItem_List is a list of VeteranRewardItem.
type VeteranRewardItem_List = capnp.StructList[VeteranRewardItem]

// NewVeteranRewardItem creates a new list of VeteranRewardItem.
func NewVeteranRewardItem_List(s *capnp.Segment, sz int32) (VeteranRewardItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[VeteranRewardItem](l), err
}

// VeteranRewardItem_Future is a wrapper for a VeteranRewardItem promised by a client call.
type VeteranRewardItem_Future struct{ *capnp.Future }

func (f VeteranRewardItem_Future) Struct() (VeteranRewardItem, error) {
	p, err := f.Future.Ptr()
	return VeteranRewardItem(p.Struct()), err
}

type VeteranReward capnp.Struct

// VeteranReward_TypeID is the unique identifier for the type VeteranReward.
const VeteranReward_TypeID = 0xa0a594ed993e78ca

func NewVeteranReward(s *capnp.Segment) (VeteranReward, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranReward(st), err
}

func NewRootVeteranReward(s *capnp.Segment) (VeteranReward, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return VeteranReward(st), err
}

func ReadRootVeteranReward(msg *capnp.Message) (VeteranReward, error) {
	root, err := msg.Root()
	return VeteranReward(root.Struct()), err
}

func (s VeteranReward) String() string {
	str, _ := text.Marshal(0xa0a594ed993e78ca, capnp.Struct(s))
	return str
}

func (s VeteranReward) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VeteranReward) DecodeFromPtr(p capnp.Ptr) VeteranReward {
	return VeteranReward(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VeteranReward) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VeteranReward) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VeteranReward) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VeteranReward) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VeteranReward) ClaimId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s VeteranReward) SetClaimId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s VeteranReward) Item() (VeteranRewardItem, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return VeteranRewardItem(p.Struct()), err
}

func (s VeteranReward) HasItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s VeteranReward) SetItem(v VeteranRewardItem) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewItem sets the item field to a newly
// allocated VeteranRewardItem struct, preferring placement in s's segment.
func (s VeteranReward) NewItem() (VeteranRewardItem, error) {
	ss, err := NewVeteranRewardItem(capnp.Struct(s).Segment())
	if err != nil {
		return VeteranRewardItem{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// VeteranReward_List is a list of VeteranReward.
type VeteranReward_List = capnp.StructList[VeteranReward]

// NewVeteranReward creates a new list of VeteranReward.
func NewVeteranReward_List(s *capnp.Segment, sz int32) (VeteranReward_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[VeteranReward](l), err
}

// VeteranReward_Future is a wrapper for a VeteranReward promised by a client call.
type VeteranReward_Future struct{ *capnp.Future }

func (f VeteranReward_Future) Struct() (VeteranReward, error) {
	p, err := f.Future.Ptr()
	return VeteranReward(p.Struct()), err
}
func (p VeteranReward_Future) Item() VeteranRewardItem_Future {
	return VeteranRewardItem_Future{Future: p.Future.Field(0, nil)}
}

type ExpeditionInvite capnp.Struct

// ExpeditionInvite_TypeID is the unique identifier for the type ExpeditionInvite.
const ExpeditionInvite_TypeID = 0xe79b0d006ef1331d

func NewExpeditionInvite(s *capnp.Segment) (ExpeditionInvite, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return ExpeditionInvite(st), err
}

func NewRootExpeditionInvite(s *capnp.Segment) (ExpeditionInvite, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return ExpeditionInvite(st), err
}

func ReadRootExpeditionInvite(msg *capnp.Message) (ExpeditionInvite, error) {
	root, err := msg.Root()
	return ExpeditionInvite(root.Struct()), err
}

func (s ExpeditionInvite) String() string {
	str, _ := text.Marshal(0xe79b0d006ef1331d, capnp.Struct(s))
	return str
}

func (s ExpeditionInvite) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionInvite) DecodeFromPtr(p capnp.Ptr) ExpeditionInvite {
	return ExpeditionInvite(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionInvite) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionInvite) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionInvite) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionInvite) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionInvite) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionInvite) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionInvite) InviterName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionInvite) HasInviterName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionInvite) InviterNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetInviterName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionInvite) ExpeditionName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionInvite) HasExpeditionName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionInvite) ExpeditionNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetExpeditionName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ExpeditionInvite) Swapping() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionInvite) SetSwapping(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionInvite) SwapName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ExpeditionInvite) HasSwapName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ExpeditionInvite) SwapNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ExpeditionInvite) SetSwapName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ExpeditionInvite) Padding() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Int32List(p.List()), err
}

func (s ExpeditionInvite) HasPadding() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ExpeditionInvite) SetPadding(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPadding sets the padding field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s ExpeditionInvite) NewPadding(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s ExpeditionInvite) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ExpeditionInvite) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ExpeditionInvite) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ExpeditionInvite) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// ExpeditionInvite_List is a list of ExpeditionInvite.
type ExpeditionInvite_List = capnp.StructList[ExpeditionInvite]

// NewExpeditionInvite creates a new list of ExpeditionInvite.
func NewExpeditionInvite_List(s *capnp.Segment, sz int32) (ExpeditionInvite_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return capnp.StructList[ExpeditionInvite](l), err
}

// ExpeditionInvite_Future is a wrapper for a ExpeditionInvite promised by a client call.
type ExpeditionInvite_Future struct{ *capnp.Future }

func (f ExpeditionInvite_Future) Struct() (ExpeditionInvite, error) {
	p, err := f.Future.Ptr()
	return ExpeditionInvite(p.Struct()), err
}

type ExpeditionInviteResponse capnp.Struct

// ExpeditionInviteResponse_TypeID is the unique identifier for the type ExpeditionInviteResponse.
const ExpeditionInviteResponse_TypeID = 0xf7df715b4e24efb3

func NewExpeditionInviteResponse(s *capnp.Segment) (ExpeditionInviteResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ExpeditionInviteResponse(st), err
}

func NewRootExpeditionInviteResponse(s *capnp.Segment) (ExpeditionInviteResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ExpeditionInviteResponse(st), err
}

func ReadRootExpeditionInviteResponse(msg *capnp.Message) (ExpeditionInviteResponse, error) {
	root, err := msg.Root()
	return ExpeditionInviteResponse(root.Struct()), err
}

func (s ExpeditionInviteResponse) String() string {
	str, _ := text.Marshal(0xf7df715b4e24efb3, capnp.Struct(s))
	return str
}

func (s ExpeditionInviteResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionInviteResponse) DecodeFromPtr(p capnp.Ptr) ExpeditionInviteResponse {
	return ExpeditionInviteResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionInviteResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionInviteResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionInviteResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionInviteResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionInviteResponse) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionInviteResponse) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionInviteResponse) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionInviteResponse) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionInviteResponse) Accepted() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ExpeditionInviteResponse) SetAccepted(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ExpeditionInviteResponse) Swapping() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s ExpeditionInviteResponse) SetSwapping(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s ExpeditionInviteResponse) SwapName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionInviteResponse) HasSwapName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionInviteResponse) SwapNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionInviteResponse) SetSwapName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ExpeditionInviteResponse_List is a list of ExpeditionInviteResponse.
type ExpeditionInviteResponse_List = capnp.StructList[ExpeditionInviteResponse]

// NewExpeditionInviteResponse creates a new list of ExpeditionInviteResponse.
func NewExpeditionInviteResponse_List(s *capnp.Segment, sz int32) (ExpeditionInviteResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionInviteResponse](l), err
}

// ExpeditionInviteResponse_Future is a wrapper for a ExpeditionInviteResponse promised by a client call.
type ExpeditionInviteResponse_Future struct{ *capnp.Future }

func (f ExpeditionInviteResponse_Future) Struct() (ExpeditionInviteResponse, error) {
	p, err := f.Future.Ptr()
	return ExpeditionInviteResponse(p.Struct()), err
}

type DynamicZoneInfo capnp.Struct

// DynamicZoneInfo_TypeID is the unique identifier for the type DynamicZoneInfo.
const DynamicZoneInfo_TypeID = 0xe7469eaa174fdd9f

func NewDynamicZoneInfo(s *capnp.Segment) (DynamicZoneInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneInfo(st), err
}

func NewRootDynamicZoneInfo(s *capnp.Segment) (DynamicZoneInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneInfo(st), err
}

func ReadRootDynamicZoneInfo(msg *capnp.Message) (DynamicZoneInfo, error) {
	root, err := msg.Root()
	return DynamicZoneInfo(root.Struct()), err
}

func (s DynamicZoneInfo) String() string {
	str, _ := text.Marshal(0xe7469eaa174fdd9f, capnp.Struct(s))
	return str
}

func (s DynamicZoneInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneInfo) DecodeFromPtr(p capnp.Ptr) DynamicZoneInfo {
	return DynamicZoneInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneInfo) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneInfo) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneInfo) Assigned() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneInfo) SetAssigned(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneInfo) MaxPlayers() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneInfo) SetMaxPlayers(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneInfo) DzName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneInfo) HasDzName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneInfo) DzNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneInfo) SetDzName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneInfo) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DynamicZoneInfo) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DynamicZoneInfo) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DynamicZoneInfo) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// DynamicZoneInfo_List is a list of DynamicZoneInfo.
type DynamicZoneInfo_List = capnp.StructList[DynamicZoneInfo]

// NewDynamicZoneInfo creates a new list of DynamicZoneInfo.
func NewDynamicZoneInfo_List(s *capnp.Segment, sz int32) (DynamicZoneInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[DynamicZoneInfo](l), err
}

// DynamicZoneInfo_Future is a wrapper for a DynamicZoneInfo promised by a client call.
type DynamicZoneInfo_Future struct{ *capnp.Future }

func (f DynamicZoneInfo_Future) Struct() (DynamicZoneInfo, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneInfo(p.Struct()), err
}

type DynamicZoneMemberEntry capnp.Struct

// DynamicZoneMemberEntry_TypeID is the unique identifier for the type DynamicZoneMemberEntry.
const DynamicZoneMemberEntry_TypeID = 0xd65b5d6ec837db5d

func NewDynamicZoneMemberEntry(s *capnp.Segment) (DynamicZoneMemberEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberEntry(st), err
}

func NewRootDynamicZoneMemberEntry(s *capnp.Segment) (DynamicZoneMemberEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberEntry(st), err
}

func ReadRootDynamicZoneMemberEntry(msg *capnp.Message) (DynamicZoneMemberEntry, error) {
	root, err := msg.Root()
	return DynamicZoneMemberEntry(root.Struct()), err
}

func (s DynamicZoneMemberEntry) String() string {
	str, _ := text.Marshal(0xd65b5d6ec837db5d, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberEntry {
	return DynamicZoneMemberEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneMemberEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneMemberEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneMemberEntry) OnlineStatus() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberEntry) SetOnlineStatus(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// DynamicZoneMemberEntry_List is a list of DynamicZoneMemberEntry.
type DynamicZoneMemberEntry_List = capnp.StructList[DynamicZoneMemberEntry]

// NewDynamicZoneMemberEntry creates a new list of DynamicZoneMemberEntry.
func NewDynamicZoneMemberEntry_List(s *capnp.Segment, sz int32) (DynamicZoneMemberEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberEntry](l), err
}

// DynamicZoneMemberEntry_Future is a wrapper for a DynamicZoneMemberEntry promised by a client call.
type DynamicZoneMemberEntry_Future struct{ *capnp.Future }

func (f DynamicZoneMemberEntry_Future) Struct() (DynamicZoneMemberEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberEntry(p.Struct()), err
}

type DynamicZoneMemberList capnp.Struct

// DynamicZoneMemberList_TypeID is the unique identifier for the type DynamicZoneMemberList.
const DynamicZoneMemberList_TypeID = 0x9ed2b947650ba549

func NewDynamicZoneMemberList(s *capnp.Segment) (DynamicZoneMemberList, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberList(st), err
}

func NewRootDynamicZoneMemberList(s *capnp.Segment) (DynamicZoneMemberList, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberList(st), err
}

func ReadRootDynamicZoneMemberList(msg *capnp.Message) (DynamicZoneMemberList, error) {
	root, err := msg.Root()
	return DynamicZoneMemberList(root.Struct()), err
}

func (s DynamicZoneMemberList) String() string {
	str, _ := text.Marshal(0x9ed2b947650ba549, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberList) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberList) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberList {
	return DynamicZoneMemberList(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberList) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberList) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberList) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberList) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberList) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberList) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneMemberList) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneMemberList) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneMemberList) Members() (DynamicZoneMemberEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneMemberEntry_List(p.List()), err
}

func (s DynamicZoneMemberList) HasMembers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberList) SetMembers(v DynamicZoneMemberEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated DynamicZoneMemberEntry_List, preferring placement in s's segment.
func (s DynamicZoneMemberList) NewMembers(n int32) (DynamicZoneMemberEntry_List, error) {
	l, err := NewDynamicZoneMemberEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneMemberEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneMemberList_List is a list of DynamicZoneMemberList.
type DynamicZoneMemberList_List = capnp.StructList[DynamicZoneMemberList]

// NewDynamicZoneMemberList creates a new list of DynamicZoneMemberList.
func NewDynamicZoneMemberList_List(s *capnp.Segment, sz int32) (DynamicZoneMemberList_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberList](l), err
}

// DynamicZoneMemberList_Future is a wrapper for a DynamicZoneMemberList promised by a client call.
type DynamicZoneMemberList_Future struct{ *capnp.Future }

func (f DynamicZoneMemberList_Future) Struct() (DynamicZoneMemberList, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberList(p.Struct()), err
}

type DynamicZoneMemberListName capnp.Struct

// DynamicZoneMemberListName_TypeID is the unique identifier for the type DynamicZoneMemberListName.
const DynamicZoneMemberListName_TypeID = 0xc5955ef3c3c9e4b0

func NewDynamicZoneMemberListName(s *capnp.Segment) (DynamicZoneMemberListName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberListName(st), err
}

func NewRootDynamicZoneMemberListName(s *capnp.Segment) (DynamicZoneMemberListName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneMemberListName(st), err
}

func ReadRootDynamicZoneMemberListName(msg *capnp.Message) (DynamicZoneMemberListName, error) {
	root, err := msg.Root()
	return DynamicZoneMemberListName(root.Struct()), err
}

func (s DynamicZoneMemberListName) String() string {
	str, _ := text.Marshal(0xc5955ef3c3c9e4b0, capnp.Struct(s))
	return str
}

func (s DynamicZoneMemberListName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneMemberListName) DecodeFromPtr(p capnp.Ptr) DynamicZoneMemberListName {
	return DynamicZoneMemberListName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneMemberListName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneMemberListName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneMemberListName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneMemberListName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneMemberListName) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneMemberListName) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneMemberListName) AddName() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneMemberListName) SetAddName(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneMemberListName) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneMemberListName) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneMemberListName) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneMemberListName) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DynamicZoneMemberListName_List is a list of DynamicZoneMemberListName.
type DynamicZoneMemberListName_List = capnp.StructList[DynamicZoneMemberListName]

// NewDynamicZoneMemberListName creates a new list of DynamicZoneMemberListName.
func NewDynamicZoneMemberListName_List(s *capnp.Segment, sz int32) (DynamicZoneMemberListName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneMemberListName](l), err
}

// DynamicZoneMemberListName_Future is a wrapper for a DynamicZoneMemberListName promised by a client call.
type DynamicZoneMemberListName_Future struct{ *capnp.Future }

func (f DynamicZoneMemberListName_Future) Struct() (DynamicZoneMemberListName, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneMemberListName(p.Struct()), err
}

type ExpeditionLockoutTimerEntry capnp.Struct

// ExpeditionLockoutTimerEntry_TypeID is the unique identifier for the type ExpeditionLockoutTimerEntry.
const ExpeditionLockoutTimerEntry_TypeID = 0x82bbe68570bc51c9

func NewExpeditionLockoutTimerEntry(s *capnp.Segment) (ExpeditionLockoutTimerEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ExpeditionLockoutTimerEntry(st), err
}

func NewRootExpeditionLockoutTimerEntry(s *capnp.Segment) (ExpeditionLockoutTimerEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ExpeditionLockoutTimerEntry(st), err
}

func ReadRootExpeditionLockoutTimerEntry(msg *capnp.Message) (ExpeditionLockoutTimerEntry, error) {
	root, err := msg.Root()
	return ExpeditionLockoutTimerEntry(root.Struct()), err
}

func (s ExpeditionLockoutTimerEntry) String() string {
	str, _ := text.Marshal(0x82bbe68570bc51c9, capnp.Struct(s))
	return str
}

func (s ExpeditionLockoutTimerEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionLockoutTimerEntry) DecodeFromPtr(p capnp.Ptr) ExpeditionLockoutTimerEntry {
	return ExpeditionLockoutTimerEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionLockoutTimerEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionLockoutTimerEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionLockoutTimerEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionLockoutTimerEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionLockoutTimerEntry) ExpeditionName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionLockoutTimerEntry) HasExpeditionName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionLockoutTimerEntry) ExpeditionNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionLockoutTimerEntry) SetExpeditionName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionLockoutTimerEntry) SecondsRemaining() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionLockoutTimerEntry) SetSecondsRemaining(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionLockoutTimerEntry) EventType() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionLockoutTimerEntry) SetEventType(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionLockoutTimerEntry) EventName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionLockoutTimerEntry) HasEventName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionLockoutTimerEntry) EventNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionLockoutTimerEntry) SetEventName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExpeditionLockoutTimerEntry_List is a list of ExpeditionLockoutTimerEntry.
type ExpeditionLockoutTimerEntry_List = capnp.StructList[ExpeditionLockoutTimerEntry]

// NewExpeditionLockoutTimerEntry creates a new list of ExpeditionLockoutTimerEntry.
func NewExpeditionLockoutTimerEntry_List(s *capnp.Segment, sz int32) (ExpeditionLockoutTimerEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[ExpeditionLockoutTimerEntry](l), err
}

// ExpeditionLockoutTimerEntry_Future is a wrapper for a ExpeditionLockoutTimerEntry promised by a client call.
type ExpeditionLockoutTimerEntry_Future struct{ *capnp.Future }

func (f ExpeditionLockoutTimerEntry_Future) Struct() (ExpeditionLockoutTimerEntry, error) {
	p, err := f.Future.Ptr()
	return ExpeditionLockoutTimerEntry(p.Struct()), err
}

type ExpeditionLockoutTimers capnp.Struct

// ExpeditionLockoutTimers_TypeID is the unique identifier for the type ExpeditionLockoutTimers.
const ExpeditionLockoutTimers_TypeID = 0x944a2443abee2e54

func NewExpeditionLockoutTimers(s *capnp.Segment) (ExpeditionLockoutTimers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ExpeditionLockoutTimers(st), err
}

func NewRootExpeditionLockoutTimers(s *capnp.Segment) (ExpeditionLockoutTimers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ExpeditionLockoutTimers(st), err
}

func ReadRootExpeditionLockoutTimers(msg *capnp.Message) (ExpeditionLockoutTimers, error) {
	root, err := msg.Root()
	return ExpeditionLockoutTimers(root.Struct()), err
}

func (s ExpeditionLockoutTimers) String() string {
	str, _ := text.Marshal(0x944a2443abee2e54, capnp.Struct(s))
	return str
}

func (s ExpeditionLockoutTimers) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionLockoutTimers) DecodeFromPtr(p capnp.Ptr) ExpeditionLockoutTimers {
	return ExpeditionLockoutTimers(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionLockoutTimers) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionLockoutTimers) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionLockoutTimers) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionLockoutTimers) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionLockoutTimers) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionLockoutTimers) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionLockoutTimers) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionLockoutTimers) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s ExpeditionLockoutTimers) Timers() (ExpeditionLockoutTimerEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ExpeditionLockoutTimerEntry_List(p.List()), err
}

func (s ExpeditionLockoutTimers) HasTimers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionLockoutTimers) SetTimers(v ExpeditionLockoutTimerEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTimers sets the timers field to a newly
// allocated ExpeditionLockoutTimerEntry_List, preferring placement in s's segment.
func (s ExpeditionLockoutTimers) NewTimers(n int32) (ExpeditionLockoutTimerEntry_List, error) {
	l, err := NewExpeditionLockoutTimerEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ExpeditionLockoutTimerEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ExpeditionLockoutTimers_List is a list of ExpeditionLockoutTimers.
type ExpeditionLockoutTimers_List = capnp.StructList[ExpeditionLockoutTimers]

// NewExpeditionLockoutTimers creates a new list of ExpeditionLockoutTimers.
func NewExpeditionLockoutTimers_List(s *capnp.Segment, sz int32) (ExpeditionLockoutTimers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionLockoutTimers](l), err
}

// ExpeditionLockoutTimers_Future is a wrapper for a ExpeditionLockoutTimers promised by a client call.
type ExpeditionLockoutTimers_Future struct{ *capnp.Future }

func (f ExpeditionLockoutTimers_Future) Struct() (ExpeditionLockoutTimers, error) {
	p, err := f.Future.Ptr()
	return ExpeditionLockoutTimers(p.Struct()), err
}

type DynamicZoneLeaderName capnp.Struct

// DynamicZoneLeaderName_TypeID is the unique identifier for the type DynamicZoneLeaderName.
const DynamicZoneLeaderName_TypeID = 0xc33264acc8d4e592

func NewDynamicZoneLeaderName(s *capnp.Segment) (DynamicZoneLeaderName, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneLeaderName(st), err
}

func NewRootDynamicZoneLeaderName(s *capnp.Segment) (DynamicZoneLeaderName, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneLeaderName(st), err
}

func ReadRootDynamicZoneLeaderName(msg *capnp.Message) (DynamicZoneLeaderName, error) {
	root, err := msg.Root()
	return DynamicZoneLeaderName(root.Struct()), err
}

func (s DynamicZoneLeaderName) String() string {
	str, _ := text.Marshal(0xc33264acc8d4e592, capnp.Struct(s))
	return str
}

func (s DynamicZoneLeaderName) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneLeaderName) DecodeFromPtr(p capnp.Ptr) DynamicZoneLeaderName {
	return DynamicZoneLeaderName(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneLeaderName) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneLeaderName) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneLeaderName) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneLeaderName) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneLeaderName) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneLeaderName) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneLeaderName) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneLeaderName) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneLeaderName) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneLeaderName) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// DynamicZoneLeaderName_List is a list of DynamicZoneLeaderName.
type DynamicZoneLeaderName_List = capnp.StructList[DynamicZoneLeaderName]

// NewDynamicZoneLeaderName creates a new list of DynamicZoneLeaderName.
func NewDynamicZoneLeaderName_List(s *capnp.Segment, sz int32) (DynamicZoneLeaderName_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneLeaderName](l), err
}

// DynamicZoneLeaderName_Future is a wrapper for a DynamicZoneLeaderName promised by a client call.
type DynamicZoneLeaderName_Future struct{ *capnp.Future }

func (f DynamicZoneLeaderName_Future) Struct() (DynamicZoneLeaderName, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneLeaderName(p.Struct()), err
}

type ExpeditionCommand capnp.Struct

// ExpeditionCommand_TypeID is the unique identifier for the type ExpeditionCommand.
const ExpeditionCommand_TypeID = 0xf0eb3ae18581b267

func NewExpeditionCommand(s *capnp.Segment) (ExpeditionCommand, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExpeditionCommand(st), err
}

func NewRootExpeditionCommand(s *capnp.Segment) (ExpeditionCommand, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ExpeditionCommand(st), err
}

func ReadRootExpeditionCommand(msg *capnp.Message) (ExpeditionCommand, error) {
	root, err := msg.Root()
	return ExpeditionCommand(root.Struct()), err
}

func (s ExpeditionCommand) String() string {
	str, _ := text.Marshal(0xf0eb3ae18581b267, capnp.Struct(s))
	return str
}

func (s ExpeditionCommand) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionCommand) DecodeFromPtr(p capnp.Ptr) ExpeditionCommand {
	return ExpeditionCommand(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionCommand) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionCommand) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionCommand) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionCommand) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionCommand) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionCommand) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionCommand) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionCommand) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ExpeditionCommand_List is a list of ExpeditionCommand.
type ExpeditionCommand_List = capnp.StructList[ExpeditionCommand]

// NewExpeditionCommand creates a new list of ExpeditionCommand.
func NewExpeditionCommand_List(s *capnp.Segment, sz int32) (ExpeditionCommand_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ExpeditionCommand](l), err
}

// ExpeditionCommand_Future is a wrapper for a ExpeditionCommand promised by a client call.
type ExpeditionCommand_Future struct{ *capnp.Future }

func (f ExpeditionCommand_Future) Struct() (ExpeditionCommand, error) {
	p, err := f.Future.Ptr()
	return ExpeditionCommand(p.Struct()), err
}

type ExpeditionCommandSwap capnp.Struct

// ExpeditionCommandSwap_TypeID is the unique identifier for the type ExpeditionCommandSwap.
const ExpeditionCommandSwap_TypeID = 0xc2320321f84d3e6b

func NewExpeditionCommandSwap(s *capnp.Segment) (ExpeditionCommandSwap, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExpeditionCommandSwap(st), err
}

func NewRootExpeditionCommandSwap(s *capnp.Segment) (ExpeditionCommandSwap, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ExpeditionCommandSwap(st), err
}

func ReadRootExpeditionCommandSwap(msg *capnp.Message) (ExpeditionCommandSwap, error) {
	root, err := msg.Root()
	return ExpeditionCommandSwap(root.Struct()), err
}

func (s ExpeditionCommandSwap) String() string {
	str, _ := text.Marshal(0xc2320321f84d3e6b, capnp.Struct(s))
	return str
}

func (s ExpeditionCommandSwap) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionCommandSwap) DecodeFromPtr(p capnp.Ptr) ExpeditionCommandSwap {
	return ExpeditionCommandSwap(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionCommandSwap) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionCommandSwap) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionCommandSwap) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionCommandSwap) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionCommandSwap) AddPlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ExpeditionCommandSwap) HasAddPlayerName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ExpeditionCommandSwap) AddPlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ExpeditionCommandSwap) SetAddPlayerName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ExpeditionCommandSwap) RemPlayerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ExpeditionCommandSwap) HasRemPlayerName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ExpeditionCommandSwap) RemPlayerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ExpeditionCommandSwap) SetRemPlayerName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ExpeditionCommandSwap_List is a list of ExpeditionCommandSwap.
type ExpeditionCommandSwap_List = capnp.StructList[ExpeditionCommandSwap]

// NewExpeditionCommandSwap creates a new list of ExpeditionCommandSwap.
func NewExpeditionCommandSwap_List(s *capnp.Segment, sz int32) (ExpeditionCommandSwap_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ExpeditionCommandSwap](l), err
}

// ExpeditionCommandSwap_Future is a wrapper for a ExpeditionCommandSwap promised by a client call.
type ExpeditionCommandSwap_Future struct{ *capnp.Future }

func (f ExpeditionCommandSwap_Future) Struct() (ExpeditionCommandSwap, error) {
	p, err := f.Future.Ptr()
	return ExpeditionCommandSwap(p.Struct()), err
}

type ExpeditionExpireWarning capnp.Struct

// ExpeditionExpireWarning_TypeID is the unique identifier for the type ExpeditionExpireWarning.
const ExpeditionExpireWarning_TypeID = 0x9c02cc7a71f37f31

func NewExpeditionExpireWarning(s *capnp.Segment) (ExpeditionExpireWarning, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpeditionExpireWarning(st), err
}

func NewRootExpeditionExpireWarning(s *capnp.Segment) (ExpeditionExpireWarning, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ExpeditionExpireWarning(st), err
}

func ReadRootExpeditionExpireWarning(msg *capnp.Message) (ExpeditionExpireWarning, error) {
	root, err := msg.Root()
	return ExpeditionExpireWarning(root.Struct()), err
}

func (s ExpeditionExpireWarning) String() string {
	str, _ := text.Marshal(0x9c02cc7a71f37f31, capnp.Struct(s))
	return str
}

func (s ExpeditionExpireWarning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ExpeditionExpireWarning) DecodeFromPtr(p capnp.Ptr) ExpeditionExpireWarning {
	return ExpeditionExpireWarning(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ExpeditionExpireWarning) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ExpeditionExpireWarning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ExpeditionExpireWarning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ExpeditionExpireWarning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ExpeditionExpireWarning) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ExpeditionExpireWarning) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ExpeditionExpireWarning) MinutesRemaining() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s ExpeditionExpireWarning) SetMinutesRemaining(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// ExpeditionExpireWarning_List is a list of ExpeditionExpireWarning.
type ExpeditionExpireWarning_List = capnp.StructList[ExpeditionExpireWarning]

// NewExpeditionExpireWarning creates a new list of ExpeditionExpireWarning.
func NewExpeditionExpireWarning_List(s *capnp.Segment, sz int32) (ExpeditionExpireWarning_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ExpeditionExpireWarning](l), err
}

// ExpeditionExpireWarning_Future is a wrapper for a ExpeditionExpireWarning promised by a client call.
type ExpeditionExpireWarning_Future struct{ *capnp.Future }

func (f ExpeditionExpireWarning_Future) Struct() (ExpeditionExpireWarning, error) {
	p, err := f.Future.Ptr()
	return ExpeditionExpireWarning(p.Struct()), err
}

type DynamicZoneCompassEntry capnp.Struct

// DynamicZoneCompassEntry_TypeID is the unique identifier for the type DynamicZoneCompassEntry.
const DynamicZoneCompassEntry_TypeID = 0x837843dd5048c6d0

func NewDynamicZoneCompassEntry(s *capnp.Segment) (DynamicZoneCompassEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return DynamicZoneCompassEntry(st), err
}

func NewRootDynamicZoneCompassEntry(s *capnp.Segment) (DynamicZoneCompassEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return DynamicZoneCompassEntry(st), err
}

func ReadRootDynamicZoneCompassEntry(msg *capnp.Message) (DynamicZoneCompassEntry, error) {
	root, err := msg.Root()
	return DynamicZoneCompassEntry(root.Struct()), err
}

func (s DynamicZoneCompassEntry) String() string {
	str, _ := text.Marshal(0x837843dd5048c6d0, capnp.Struct(s))
	return str
}

func (s DynamicZoneCompassEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneCompassEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneCompassEntry {
	return DynamicZoneCompassEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneCompassEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneCompassEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneCompassEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneCompassEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneCompassEntry) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneCompassEntry) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneCompassEntry) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneCompassEntry) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneCompassEntry) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneCompassEntry) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneCompassEntry) DzSwitchId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s DynamicZoneCompassEntry) SetDzSwitchId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s DynamicZoneCompassEntry) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s DynamicZoneCompassEntry) SetY(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s DynamicZoneCompassEntry) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s DynamicZoneCompassEntry) SetX(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s DynamicZoneCompassEntry) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s DynamicZoneCompassEntry) SetZ(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

// DynamicZoneCompassEntry_List is a list of DynamicZoneCompassEntry.
type DynamicZoneCompassEntry_List = capnp.StructList[DynamicZoneCompassEntry]

// NewDynamicZoneCompassEntry creates a new list of DynamicZoneCompassEntry.
func NewDynamicZoneCompassEntry_List(s *capnp.Segment, sz int32) (DynamicZoneCompassEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[DynamicZoneCompassEntry](l), err
}

// DynamicZoneCompassEntry_Future is a wrapper for a DynamicZoneCompassEntry promised by a client call.
type DynamicZoneCompassEntry_Future struct{ *capnp.Future }

func (f DynamicZoneCompassEntry_Future) Struct() (DynamicZoneCompassEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneCompassEntry(p.Struct()), err
}

type DynamicZoneCompass capnp.Struct

// DynamicZoneCompass_TypeID is the unique identifier for the type DynamicZoneCompass.
const DynamicZoneCompass_TypeID = 0xb7b4735fc72e17de

func NewDynamicZoneCompass(s *capnp.Segment) (DynamicZoneCompass, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneCompass(st), err
}

func NewRootDynamicZoneCompass(s *capnp.Segment) (DynamicZoneCompass, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneCompass(st), err
}

func ReadRootDynamicZoneCompass(msg *capnp.Message) (DynamicZoneCompass, error) {
	root, err := msg.Root()
	return DynamicZoneCompass(root.Struct()), err
}

func (s DynamicZoneCompass) String() string {
	str, _ := text.Marshal(0xb7b4735fc72e17de, capnp.Struct(s))
	return str
}

func (s DynamicZoneCompass) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneCompass) DecodeFromPtr(p capnp.Ptr) DynamicZoneCompass {
	return DynamicZoneCompass(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneCompass) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneCompass) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneCompass) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneCompass) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneCompass) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneCompass) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneCompass) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneCompass) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneCompass) Entries() (DynamicZoneCompassEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneCompassEntry_List(p.List()), err
}

func (s DynamicZoneCompass) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneCompass) SetEntries(v DynamicZoneCompassEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated DynamicZoneCompassEntry_List, preferring placement in s's segment.
func (s DynamicZoneCompass) NewEntries(n int32) (DynamicZoneCompassEntry_List, error) {
	l, err := NewDynamicZoneCompassEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneCompassEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneCompass_List is a list of DynamicZoneCompass.
type DynamicZoneCompass_List = capnp.StructList[DynamicZoneCompass]

// NewDynamicZoneCompass creates a new list of DynamicZoneCompass.
func NewDynamicZoneCompass_List(s *capnp.Segment, sz int32) (DynamicZoneCompass_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneCompass](l), err
}

// DynamicZoneCompass_Future is a wrapper for a DynamicZoneCompass promised by a client call.
type DynamicZoneCompass_Future struct{ *capnp.Future }

func (f DynamicZoneCompass_Future) Struct() (DynamicZoneCompass, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneCompass(p.Struct()), err
}

type DynamicZoneChooseZoneEntry capnp.Struct

// DynamicZoneChooseZoneEntry_TypeID is the unique identifier for the type DynamicZoneChooseZoneEntry.
const DynamicZoneChooseZoneEntry_TypeID = 0xe8b71523b2ef78ed

func NewDynamicZoneChooseZoneEntry(s *capnp.Segment) (DynamicZoneChooseZoneEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneChooseZoneEntry(st), err
}

func NewRootDynamicZoneChooseZoneEntry(s *capnp.Segment) (DynamicZoneChooseZoneEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return DynamicZoneChooseZoneEntry(st), err
}

func ReadRootDynamicZoneChooseZoneEntry(msg *capnp.Message) (DynamicZoneChooseZoneEntry, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZoneEntry(root.Struct()), err
}

func (s DynamicZoneChooseZoneEntry) String() string {
	str, _ := text.Marshal(0xe8b71523b2ef78ed, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZoneEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZoneEntry) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZoneEntry {
	return DynamicZoneChooseZoneEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZoneEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZoneEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZoneEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZoneEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZoneEntry) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZoneEntry) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZoneEntry) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneChooseZoneEntry) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s DynamicZoneChooseZoneEntry) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DynamicZoneChooseZoneEntry) HasDescription() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneChooseZoneEntry) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DynamicZoneChooseZoneEntry) SetDescription(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DynamicZoneChooseZoneEntry) LeaderName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DynamicZoneChooseZoneEntry) HasLeaderName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DynamicZoneChooseZoneEntry) LeaderNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DynamicZoneChooseZoneEntry) SetLeaderName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// DynamicZoneChooseZoneEntry_List is a list of DynamicZoneChooseZoneEntry.
type DynamicZoneChooseZoneEntry_List = capnp.StructList[DynamicZoneChooseZoneEntry]

// NewDynamicZoneChooseZoneEntry creates a new list of DynamicZoneChooseZoneEntry.
func NewDynamicZoneChooseZoneEntry_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZoneEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[DynamicZoneChooseZoneEntry](l), err
}

// DynamicZoneChooseZoneEntry_Future is a wrapper for a DynamicZoneChooseZoneEntry promised by a client call.
type DynamicZoneChooseZoneEntry_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZoneEntry_Future) Struct() (DynamicZoneChooseZoneEntry, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZoneEntry(p.Struct()), err
}

type DynamicZoneChooseZone capnp.Struct

// DynamicZoneChooseZone_TypeID is the unique identifier for the type DynamicZoneChooseZone.
const DynamicZoneChooseZone_TypeID = 0xbe9f101bff0dabed

func NewDynamicZoneChooseZone(s *capnp.Segment) (DynamicZoneChooseZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneChooseZone(st), err
}

func NewRootDynamicZoneChooseZone(s *capnp.Segment) (DynamicZoneChooseZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DynamicZoneChooseZone(st), err
}

func ReadRootDynamicZoneChooseZone(msg *capnp.Message) (DynamicZoneChooseZone, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZone(root.Struct()), err
}

func (s DynamicZoneChooseZone) String() string {
	str, _ := text.Marshal(0xbe9f101bff0dabed, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZone) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZone {
	return DynamicZoneChooseZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZone) ClientId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZone) SetClientId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZone) Count() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZone) SetCount(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZone) Choices() (DynamicZoneChooseZoneEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return DynamicZoneChooseZoneEntry_List(p.List()), err
}

func (s DynamicZoneChooseZone) HasChoices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DynamicZoneChooseZone) SetChoices(v DynamicZoneChooseZoneEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChoices sets the choices field to a newly
// allocated DynamicZoneChooseZoneEntry_List, preferring placement in s's segment.
func (s DynamicZoneChooseZone) NewChoices(n int32) (DynamicZoneChooseZoneEntry_List, error) {
	l, err := NewDynamicZoneChooseZoneEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DynamicZoneChooseZoneEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// DynamicZoneChooseZone_List is a list of DynamicZoneChooseZone.
type DynamicZoneChooseZone_List = capnp.StructList[DynamicZoneChooseZone]

// NewDynamicZoneChooseZone creates a new list of DynamicZoneChooseZone.
func NewDynamicZoneChooseZone_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DynamicZoneChooseZone](l), err
}

// DynamicZoneChooseZone_Future is a wrapper for a DynamicZoneChooseZone promised by a client call.
type DynamicZoneChooseZone_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZone_Future) Struct() (DynamicZoneChooseZone, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZone(p.Struct()), err
}

type DynamicZoneChooseZoneReply capnp.Struct

// DynamicZoneChooseZoneReply_TypeID is the unique identifier for the type DynamicZoneChooseZoneReply.
const DynamicZoneChooseZoneReply_TypeID = 0x806a62bc2851fc01

func NewDynamicZoneChooseZoneReply(s *capnp.Segment) (DynamicZoneChooseZoneReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DynamicZoneChooseZoneReply(st), err
}

func NewRootDynamicZoneChooseZoneReply(s *capnp.Segment) (DynamicZoneChooseZoneReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DynamicZoneChooseZoneReply(st), err
}

func ReadRootDynamicZoneChooseZoneReply(msg *capnp.Message) (DynamicZoneChooseZoneReply, error) {
	root, err := msg.Root()
	return DynamicZoneChooseZoneReply(root.Struct()), err
}

func (s DynamicZoneChooseZoneReply) String() string {
	str, _ := text.Marshal(0x806a62bc2851fc01, capnp.Struct(s))
	return str
}

func (s DynamicZoneChooseZoneReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DynamicZoneChooseZoneReply) DecodeFromPtr(p capnp.Ptr) DynamicZoneChooseZoneReply {
	return DynamicZoneChooseZoneReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DynamicZoneChooseZoneReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DynamicZoneChooseZoneReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DynamicZoneChooseZoneReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DynamicZoneChooseZoneReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DynamicZoneChooseZoneReply) DzZoneId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s DynamicZoneChooseZoneReply) SetDzZoneId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s DynamicZoneChooseZoneReply) DzInstanceId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s DynamicZoneChooseZoneReply) SetDzInstanceId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s DynamicZoneChooseZoneReply) DzType() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s DynamicZoneChooseZoneReply) SetDzType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// DynamicZoneChooseZoneReply_List is a list of DynamicZoneChooseZoneReply.
type DynamicZoneChooseZoneReply_List = capnp.StructList[DynamicZoneChooseZoneReply]

// NewDynamicZoneChooseZoneReply creates a new list of DynamicZoneChooseZoneReply.
func NewDynamicZoneChooseZoneReply_List(s *capnp.Segment, sz int32) (DynamicZoneChooseZoneReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[DynamicZoneChooseZoneReply](l), err
}

// DynamicZoneChooseZoneReply_Future is a wrapper for a DynamicZoneChooseZoneReply promised by a client call.
type DynamicZoneChooseZoneReply_Future struct{ *capnp.Future }

func (f DynamicZoneChooseZoneReply_Future) Struct() (DynamicZoneChooseZoneReply, error) {
	p, err := f.Future.Ptr()
	return DynamicZoneChooseZoneReply(p.Struct()), err
}

type LFGuildSearchPlayer capnp.Struct

// LFGuildSearchPlayer_TypeID is the unique identifier for the type LFGuildSearchPlayer.
const LFGuildSearchPlayer_TypeID = 0x8a1df08ac17221fd

func NewLFGuildSearchPlayer(s *capnp.Segment) (LFGuildSearchPlayer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchPlayer(st), err
}

func NewRootLFGuildSearchPlayer(s *capnp.Segment) (LFGuildSearchPlayer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchPlayer(st), err
}

func ReadRootLFGuildSearchPlayer(msg *capnp.Message) (LFGuildSearchPlayer, error) {
	root, err := msg.Root()
	return LFGuildSearchPlayer(root.Struct()), err
}

func (s LFGuildSearchPlayer) String() string {
	str, _ := text.Marshal(0x8a1df08ac17221fd, capnp.Struct(s))
	return str
}

func (s LFGuildSearchPlayer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildSearchPlayer) DecodeFromPtr(p capnp.Ptr) LFGuildSearchPlayer {
	return LFGuildSearchPlayer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildSearchPlayer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildSearchPlayer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildSearchPlayer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildSearchPlayer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildSearchPlayer) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildSearchPlayer) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildSearchPlayer) FromLevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildSearchPlayer) SetFromLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildSearchPlayer) ToLevel() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildSearchPlayer) SetToLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildSearchPlayer) MinAa() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildSearchPlayer) SetMinAa(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildSearchPlayer) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildSearchPlayer) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LFGuildSearchPlayer) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LFGuildSearchPlayer) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

// LFGuildSearchPlayer_List is a list of LFGuildSearchPlayer.
type LFGuildSearchPlayer_List = capnp.StructList[LFGuildSearchPlayer]

// NewLFGuildSearchPlayer creates a new list of LFGuildSearchPlayer.
func NewLFGuildSearchPlayer_List(s *capnp.Segment, sz int32) (LFGuildSearchPlayer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LFGuildSearchPlayer](l), err
}

// LFGuildSearchPlayer_Future is a wrapper for a LFGuildSearchPlayer promised by a client call.
type LFGuildSearchPlayer_Future struct{ *capnp.Future }

func (f LFGuildSearchPlayer_Future) Struct() (LFGuildSearchPlayer, error) {
	p, err := f.Future.Ptr()
	return LFGuildSearchPlayer(p.Struct()), err
}

type LFGuildSearchGuild capnp.Struct

// LFGuildSearchGuild_TypeID is the unique identifier for the type LFGuildSearchGuild.
const LFGuildSearchGuild_TypeID = 0x86b68baf94f42b99

func NewLFGuildSearchGuild(s *capnp.Segment) (LFGuildSearchGuild, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchGuild(st), err
}

func NewRootLFGuildSearchGuild(s *capnp.Segment) (LFGuildSearchGuild, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return LFGuildSearchGuild(st), err
}

func ReadRootLFGuildSearchGuild(msg *capnp.Message) (LFGuildSearchGuild, error) {
	root, err := msg.Root()
	return LFGuildSearchGuild(root.Struct()), err
}

func (s LFGuildSearchGuild) String() string {
	str, _ := text.Marshal(0x86b68baf94f42b99, capnp.Struct(s))
	return str
}

func (s LFGuildSearchGuild) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildSearchGuild) DecodeFromPtr(p capnp.Ptr) LFGuildSearchGuild {
	return LFGuildSearchGuild(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildSearchGuild) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildSearchGuild) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildSearchGuild) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildSearchGuild) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildSearchGuild) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildSearchGuild) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildSearchGuild) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildSearchGuild) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildSearchGuild) AaPoints() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildSearchGuild) SetAaPoints(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildSearchGuild) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildSearchGuild) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildSearchGuild) CharClass() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildSearchGuild) SetCharClass(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

// LFGuildSearchGuild_List is a list of LFGuildSearchGuild.
type LFGuildSearchGuild_List = capnp.StructList[LFGuildSearchGuild]

// NewLFGuildSearchGuild creates a new list of LFGuildSearchGuild.
func NewLFGuildSearchGuild_List(s *capnp.Segment, sz int32) (LFGuildSearchGuild_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[LFGuildSearchGuild](l), err
}

// LFGuildSearchGuild_Future is a wrapper for a LFGuildSearchGuild promised by a client call.
type LFGuildSearchGuild_Future struct{ *capnp.Future }

func (f LFGuildSearchGuild_Future) Struct() (LFGuildSearchGuild, error) {
	p, err := f.Future.Ptr()
	return LFGuildSearchGuild(p.Struct()), err
}

type LFGuildPlayertoggle capnp.Struct

// LFGuildPlayertoggle_TypeID is the unique identifier for the type LFGuildPlayertoggle.
const LFGuildPlayertoggle_TypeID = 0xba7cb4dbd62489d5

func NewLFGuildPlayertoggle(s *capnp.Segment) (LFGuildPlayertoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return LFGuildPlayertoggle(st), err
}

func NewRootLFGuildPlayertoggle(s *capnp.Segment) (LFGuildPlayertoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return LFGuildPlayertoggle(st), err
}

func ReadRootLFGuildPlayertoggle(msg *capnp.Message) (LFGuildPlayertoggle, error) {
	root, err := msg.Root()
	return LFGuildPlayertoggle(root.Struct()), err
}

func (s LFGuildPlayertoggle) String() string {
	str, _ := text.Marshal(0xba7cb4dbd62489d5, capnp.Struct(s))
	return str
}

func (s LFGuildPlayertoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildPlayertoggle) DecodeFromPtr(p capnp.Ptr) LFGuildPlayertoggle {
	return LFGuildPlayertoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildPlayertoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildPlayertoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildPlayertoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildPlayertoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildPlayertoggle) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildPlayertoggle) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildPlayertoggle) Comment() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFGuildPlayertoggle) HasComment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFGuildPlayertoggle) CommentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFGuildPlayertoggle) SetComment(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LFGuildPlayertoggle) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildPlayertoggle) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildPlayertoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildPlayertoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildPlayertoggle) Expires() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildPlayertoggle) SetExpires(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// LFGuildPlayertoggle_List is a list of LFGuildPlayertoggle.
type LFGuildPlayertoggle_List = capnp.StructList[LFGuildPlayertoggle]

// NewLFGuildPlayertoggle creates a new list of LFGuildPlayertoggle.
func NewLFGuildPlayertoggle_List(s *capnp.Segment, sz int32) (LFGuildPlayertoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[LFGuildPlayertoggle](l), err
}

// LFGuildPlayertoggle_Future is a wrapper for a LFGuildPlayertoggle promised by a client call.
type LFGuildPlayertoggle_Future struct{ *capnp.Future }

func (f LFGuildPlayertoggle_Future) Struct() (LFGuildPlayertoggle, error) {
	p, err := f.Future.Ptr()
	return LFGuildPlayertoggle(p.Struct()), err
}

type LFGuildGuildtoggle capnp.Struct

// LFGuildGuildtoggle_TypeID is the unique identifier for the type LFGuildGuildtoggle.
const LFGuildGuildtoggle_TypeID = 0xdb56b83f3063105d

func NewLFGuildGuildtoggle(s *capnp.Segment) (LFGuildGuildtoggle, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return LFGuildGuildtoggle(st), err
}

func NewRootLFGuildGuildtoggle(s *capnp.Segment) (LFGuildGuildtoggle, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return LFGuildGuildtoggle(st), err
}

func ReadRootLFGuildGuildtoggle(msg *capnp.Message) (LFGuildGuildtoggle, error) {
	root, err := msg.Root()
	return LFGuildGuildtoggle(root.Struct()), err
}

func (s LFGuildGuildtoggle) String() string {
	str, _ := text.Marshal(0xdb56b83f3063105d, capnp.Struct(s))
	return str
}

func (s LFGuildGuildtoggle) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LFGuildGuildtoggle) DecodeFromPtr(p capnp.Ptr) LFGuildGuildtoggle {
	return LFGuildGuildtoggle(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LFGuildGuildtoggle) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LFGuildGuildtoggle) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LFGuildGuildtoggle) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LFGuildGuildtoggle) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LFGuildGuildtoggle) Command() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LFGuildGuildtoggle) SetCommand(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LFGuildGuildtoggle) Comment() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LFGuildGuildtoggle) HasComment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LFGuildGuildtoggle) CommentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LFGuildGuildtoggle) SetComment(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LFGuildGuildtoggle) FromLevel() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LFGuildGuildtoggle) SetFromLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LFGuildGuildtoggle) ToLevel() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LFGuildGuildtoggle) SetToLevel(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LFGuildGuildtoggle) Classes() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s LFGuildGuildtoggle) SetClasses(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s LFGuildGuildtoggle) AaCount() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s LFGuildGuildtoggle) SetAaCount(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s LFGuildGuildtoggle) TimeZone() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s LFGuildGuildtoggle) SetTimeZone(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s LFGuildGuildtoggle) Toggle() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s LFGuildGuildtoggle) SetToggle(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s LFGuildGuildtoggle) Expires() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s LFGuildGuildtoggle) SetExpires(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s LFGuildGuildtoggle) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s LFGuildGuildtoggle) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LFGuildGuildtoggle) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s LFGuildGuildtoggle) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// LFGuildGuildtoggle_List is a list of LFGuildGuildtoggle.
type LFGuildGuildtoggle_List = capnp.StructList[LFGuildGuildtoggle]

// NewLFGuildGuildtoggle creates a new list of LFGuildGuildtoggle.
func NewLFGuildGuildtoggle_List(s *capnp.Segment, sz int32) (LFGuildGuildtoggle_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[LFGuildGuildtoggle](l), err
}

// LFGuildGuildtoggle_Future is a wrapper for a LFGuildGuildtoggle promised by a client call.
type LFGuildGuildtoggle_Future struct{ *capnp.Future }

func (f LFGuildGuildtoggle_Future) Struct() (LFGuildGuildtoggle, error) {
	p, err := f.Future.Ptr()
	return LFGuildGuildtoggle(p.Struct()), err
}

type SayLinkBodyFrame capnp.Struct

// SayLinkBodyFrame_TypeID is the unique identifier for the type SayLinkBodyFrame.
const SayLinkBodyFrame_TypeID = 0x853ff72f8a1e3384

func NewSayLinkBodyFrame(s *capnp.Segment) (SayLinkBodyFrame, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11})
	return SayLinkBodyFrame(st), err
}

func NewRootSayLinkBodyFrame(s *capnp.Segment) (SayLinkBodyFrame, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11})
	return SayLinkBodyFrame(st), err
}

func ReadRootSayLinkBodyFrame(msg *capnp.Message) (SayLinkBodyFrame, error) {
	root, err := msg.Root()
	return SayLinkBodyFrame(root.Struct()), err
}

func (s SayLinkBodyFrame) String() string {
	str, _ := text.Marshal(0x853ff72f8a1e3384, capnp.Struct(s))
	return str
}

func (s SayLinkBodyFrame) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SayLinkBodyFrame) DecodeFromPtr(p capnp.Ptr) SayLinkBodyFrame {
	return SayLinkBodyFrame(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SayLinkBodyFrame) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SayLinkBodyFrame) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SayLinkBodyFrame) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SayLinkBodyFrame) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SayLinkBodyFrame) ActionId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasActionId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SayLinkBodyFrame) ActionIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetActionId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SayLinkBodyFrame) ItemId() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasItemId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SayLinkBodyFrame) ItemIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetItemId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SayLinkBodyFrame) Augment1() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment1() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SayLinkBodyFrame) Augment1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment1(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s SayLinkBodyFrame) Augment2() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment2() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SayLinkBodyFrame) Augment2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment2(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s SayLinkBodyFrame) Augment3() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment3() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SayLinkBodyFrame) Augment3Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment3(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s SayLinkBodyFrame) Augment4() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment4() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SayLinkBodyFrame) Augment4Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment4(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s SayLinkBodyFrame) Augment5() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasAugment5() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SayLinkBodyFrame) Augment5Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetAugment5(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

func (s SayLinkBodyFrame) IsEvolving() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasIsEvolving() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SayLinkBodyFrame) IsEvolvingBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetIsEvolving(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s SayLinkBodyFrame) EvolveGroup() (string, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasEvolveGroup() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SayLinkBodyFrame) EvolveGroupBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetEvolveGroup(v string) error {
	return capnp.Struct(s).SetText(8, v)
}

func (s SayLinkBodyFrame) EvolveLevel() (string, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasEvolveLevel() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SayLinkBodyFrame) EvolveLevelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetEvolveLevel(v string) error {
	return capnp.Struct(s).SetText(9, v)
}

func (s SayLinkBodyFrame) Hash() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s SayLinkBodyFrame) HasHash() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SayLinkBodyFrame) HashBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s SayLinkBodyFrame) SetHash(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

// SayLinkBodyFrame_List is a list of SayLinkBodyFrame.
type SayLinkBodyFrame_List = capnp.StructList[SayLinkBodyFrame]

// NewSayLinkBodyFrame creates a new list of SayLinkBodyFrame.
func NewSayLinkBodyFrame_List(s *capnp.Segment, sz int32) (SayLinkBodyFrame_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 11}, sz)
	return capnp.StructList[SayLinkBodyFrame](l), err
}

// SayLinkBodyFrame_Future is a wrapper for a SayLinkBodyFrame promised by a client call.
type SayLinkBodyFrame_Future struct{ *capnp.Future }

func (f SayLinkBodyFrame_Future) Struct() (SayLinkBodyFrame, error) {
	p, err := f.Future.Ptr()
	return SayLinkBodyFrame(p.Struct()), err
}

type WebLogin capnp.Struct

// WebLogin_TypeID is the unique identifier for the type WebLogin.
const WebLogin_TypeID = 0xb80f94bef16dea20

func NewWebLogin(s *capnp.Segment) (WebLogin, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebLogin(st), err
}

func NewRootWebLogin(s *capnp.Segment) (WebLogin, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebLogin(st), err
}

func ReadRootWebLogin(msg *capnp.Message) (WebLogin, error) {
	root, err := msg.Root()
	return WebLogin(root.Struct()), err
}

func (s WebLogin) String() string {
	str, _ := text.Marshal(0xb80f94bef16dea20, capnp.Struct(s))
	return str
}

func (s WebLogin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLogin) DecodeFromPtr(p capnp.Ptr) WebLogin {
	return WebLogin(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLogin) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLogin) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLogin) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLogin) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLogin) Username() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLogin) HasUsername() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLogin) UsernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLogin) SetUsername(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLogin) Password() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebLogin) HasPassword() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLogin) PasswordBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebLogin) SetPassword(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// WebLogin_List is a list of WebLogin.
type WebLogin_List = capnp.StructList[WebLogin]

// NewWebLogin creates a new list of WebLogin.
func NewWebLogin_List(s *capnp.Segment, sz int32) (WebLogin_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebLogin](l), err
}

// WebLogin_Future is a wrapper for a WebLogin promised by a client call.
type WebLogin_Future struct{ *capnp.Future }

func (f WebLogin_Future) Struct() (WebLogin, error) {
	p, err := f.Future.Ptr()
	return WebLogin(p.Struct()), err
}

type WebLoginServerRequest capnp.Struct

// WebLoginServerRequest_TypeID is the unique identifier for the type WebLoginServerRequest.
const WebLoginServerRequest_TypeID = 0xf08bcfb76fcf5061

func NewWebLoginServerRequest(s *capnp.Segment) (WebLoginServerRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebLoginServerRequest(st), err
}

func NewRootWebLoginServerRequest(s *capnp.Segment) (WebLoginServerRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebLoginServerRequest(st), err
}

func ReadRootWebLoginServerRequest(msg *capnp.Message) (WebLoginServerRequest, error) {
	root, err := msg.Root()
	return WebLoginServerRequest(root.Struct()), err
}

func (s WebLoginServerRequest) String() string {
	str, _ := text.Marshal(0xf08bcfb76fcf5061, capnp.Struct(s))
	return str
}

func (s WebLoginServerRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginServerRequest) DecodeFromPtr(p capnp.Ptr) WebLoginServerRequest {
	return WebLoginServerRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginServerRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginServerRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginServerRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginServerRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginServerRequest) Sequence() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginServerRequest) SetSequence(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// WebLoginServerRequest_List is a list of WebLoginServerRequest.
type WebLoginServerRequest_List = capnp.StructList[WebLoginServerRequest]

// NewWebLoginServerRequest creates a new list of WebLoginServerRequest.
func NewWebLoginServerRequest_List(s *capnp.Segment, sz int32) (WebLoginServerRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WebLoginServerRequest](l), err
}

// WebLoginServerRequest_Future is a wrapper for a WebLoginServerRequest promised by a client call.
type WebLoginServerRequest_Future struct{ *capnp.Future }

func (f WebLoginServerRequest_Future) Struct() (WebLoginServerRequest, error) {
	p, err := f.Future.Ptr()
	return WebLoginServerRequest(p.Struct()), err
}

type WebLoginReply capnp.Struct

// WebLoginReply_TypeID is the unique identifier for the type WebLoginReply.
const WebLoginReply_TypeID = 0xef71c6ada87eac4c

func NewWebLoginReply(s *capnp.Segment) (WebLoginReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebLoginReply(st), err
}

func NewRootWebLoginReply(s *capnp.Segment) (WebLoginReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return WebLoginReply(st), err
}

func ReadRootWebLoginReply(msg *capnp.Message) (WebLoginReply, error) {
	root, err := msg.Root()
	return WebLoginReply(root.Struct()), err
}

func (s WebLoginReply) String() string {
	str, _ := text.Marshal(0xef71c6ada87eac4c, capnp.Struct(s))
	return str
}

func (s WebLoginReply) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginReply) DecodeFromPtr(p capnp.Ptr) WebLoginReply {
	return WebLoginReply(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginReply) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginReply) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginReply) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginReply) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginReply) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLoginReply) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginReply) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLoginReply) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLoginReply) ErrorStrId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginReply) SetErrorStrId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginReply) FailedAttempts() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebLoginReply) SetFailedAttempts(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WebLoginReply) Lsid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WebLoginReply) SetLsid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WebLoginReply) Success() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Bool(p.Struct()), err
}

func (s WebLoginReply) HasSuccess() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLoginReply) SetSuccess(v Bool) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSuccess sets the success field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebLoginReply) NewSuccess() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebLoginReply) ShowPlayerCount() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Bool(p.Struct()), err
}

func (s WebLoginReply) HasShowPlayerCount() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebLoginReply) SetShowPlayerCount(v Bool) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewShowPlayerCount sets the showPlayerCount field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebLoginReply) NewShowPlayerCount() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// WebLoginReply_List is a list of WebLoginReply.
type WebLoginReply_List = capnp.StructList[WebLoginReply]

// NewWebLoginReply creates a new list of WebLoginReply.
func NewWebLoginReply_List(s *capnp.Segment, sz int32) (WebLoginReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[WebLoginReply](l), err
}

// WebLoginReply_Future is a wrapper for a WebLoginReply promised by a client call.
type WebLoginReply_Future struct{ *capnp.Future }

func (f WebLoginReply_Future) Struct() (WebLoginReply, error) {
	p, err := f.Future.Ptr()
	return WebLoginReply(p.Struct()), err
}
func (p WebLoginReply_Future) Success() Bool_Future {
	return Bool_Future{Future: p.Future.Field(1, nil)}
}
func (p WebLoginReply_Future) ShowPlayerCount() Bool_Future {
	return Bool_Future{Future: p.Future.Field(2, nil)}
}

type WebLoginWorldServer capnp.Struct

// WebLoginWorldServer_TypeID is the unique identifier for the type WebLoginWorldServer.
const WebLoginWorldServer_TypeID = 0xc5eb62ff00b0072f

func NewWebLoginWorldServer(s *capnp.Segment) (WebLoginWorldServer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return WebLoginWorldServer(st), err
}

func NewRootWebLoginWorldServer(s *capnp.Segment) (WebLoginWorldServer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return WebLoginWorldServer(st), err
}

func ReadRootWebLoginWorldServer(msg *capnp.Message) (WebLoginWorldServer, error) {
	root, err := msg.Root()
	return WebLoginWorldServer(root.Struct()), err
}

func (s WebLoginWorldServer) String() string {
	str, _ := text.Marshal(0xc5eb62ff00b0072f, capnp.Struct(s))
	return str
}

func (s WebLoginWorldServer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginWorldServer) DecodeFromPtr(p capnp.Ptr) WebLoginWorldServer {
	return WebLoginWorldServer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginWorldServer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginWorldServer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginWorldServer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginWorldServer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginWorldServer) Buffer() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasBuffer() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginWorldServer) BufferBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetBuffer(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebLoginWorldServer) Ip() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasIp() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebLoginWorldServer) IpBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetIp(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebLoginWorldServer) LongName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasLongName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebLoginWorldServer) LongNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetLongName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s WebLoginWorldServer) CountryCode() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasCountryCode() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WebLoginWorldServer) CountryCodeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetCountryCode(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s WebLoginWorldServer) LanguageCode() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s WebLoginWorldServer) HasLanguageCode() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s WebLoginWorldServer) LanguageCodeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s WebLoginWorldServer) SetLanguageCode(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s WebLoginWorldServer) ServerType() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginWorldServer) SetServerType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginWorldServer) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebLoginWorldServer) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WebLoginWorldServer) Status() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s WebLoginWorldServer) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s WebLoginWorldServer) PlayersOnline() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s WebLoginWorldServer) SetPlayersOnline(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

// WebLoginWorldServer_List is a list of WebLoginWorldServer.
type WebLoginWorldServer_List = capnp.StructList[WebLoginWorldServer]

// NewWebLoginWorldServer creates a new list of WebLoginWorldServer.
func NewWebLoginWorldServer_List(s *capnp.Segment, sz int32) (WebLoginWorldServer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[WebLoginWorldServer](l), err
}

// WebLoginWorldServer_Future is a wrapper for a WebLoginWorldServer promised by a client call.
type WebLoginWorldServer_Future struct{ *capnp.Future }

func (f WebLoginWorldServer_Future) Struct() (WebLoginWorldServer, error) {
	p, err := f.Future.Ptr()
	return WebLoginWorldServer(p.Struct()), err
}

type WebLoginServerResponse capnp.Struct

// WebLoginServerResponse_TypeID is the unique identifier for the type WebLoginServerResponse.
const WebLoginServerResponse_TypeID = 0xefe5002d4e5acb87

func NewWebLoginServerResponse(s *capnp.Segment) (WebLoginServerResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebLoginServerResponse(st), err
}

func NewRootWebLoginServerResponse(s *capnp.Segment) (WebLoginServerResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebLoginServerResponse(st), err
}

func ReadRootWebLoginServerResponse(msg *capnp.Message) (WebLoginServerResponse, error) {
	root, err := msg.Root()
	return WebLoginServerResponse(root.Struct()), err
}

func (s WebLoginServerResponse) String() string {
	str, _ := text.Marshal(0xefe5002d4e5acb87, capnp.Struct(s))
	return str
}

func (s WebLoginServerResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebLoginServerResponse) DecodeFromPtr(p capnp.Ptr) WebLoginServerResponse {
	return WebLoginServerResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebLoginServerResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebLoginServerResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebLoginServerResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebLoginServerResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebLoginServerResponse) ServerCount() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebLoginServerResponse) SetServerCount(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebLoginServerResponse) Servers() (WebLoginWorldServer_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return WebLoginWorldServer_List(p.List()), err
}

func (s WebLoginServerResponse) HasServers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebLoginServerResponse) SetServers(v WebLoginWorldServer_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewServers sets the servers field to a newly
// allocated WebLoginWorldServer_List, preferring placement in s's segment.
func (s WebLoginServerResponse) NewServers(n int32) (WebLoginWorldServer_List, error) {
	l, err := NewWebLoginWorldServer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WebLoginWorldServer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebLoginServerResponse_List is a list of WebLoginServerResponse.
type WebLoginServerResponse_List = capnp.StructList[WebLoginServerResponse]

// NewWebLoginServerResponse creates a new list of WebLoginServerResponse.
func NewWebLoginServerResponse_List(s *capnp.Segment, sz int32) (WebLoginServerResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebLoginServerResponse](l), err
}

// WebLoginServerResponse_Future is a wrapper for a WebLoginServerResponse promised by a client call.
type WebLoginServerResponse_Future struct{ *capnp.Future }

func (f WebLoginServerResponse_Future) Struct() (WebLoginServerResponse, error) {
	p, err := f.Future.Ptr()
	return WebLoginServerResponse(p.Struct()), err
}

type WebPlayEverquestRequest capnp.Struct

// WebPlayEverquestRequest_TypeID is the unique identifier for the type WebPlayEverquestRequest.
const WebPlayEverquestRequest_TypeID = 0x9f58a78be70b999b

func NewWebPlayEverquestRequest(s *capnp.Segment) (WebPlayEverquestRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebPlayEverquestRequest(st), err
}

func NewRootWebPlayEverquestRequest(s *capnp.Segment) (WebPlayEverquestRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return WebPlayEverquestRequest(st), err
}

func ReadRootWebPlayEverquestRequest(msg *capnp.Message) (WebPlayEverquestRequest, error) {
	root, err := msg.Root()
	return WebPlayEverquestRequest(root.Struct()), err
}

func (s WebPlayEverquestRequest) String() string {
	str, _ := text.Marshal(0x9f58a78be70b999b, capnp.Struct(s))
	return str
}

func (s WebPlayEverquestRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebPlayEverquestRequest) DecodeFromPtr(p capnp.Ptr) WebPlayEverquestRequest {
	return WebPlayEverquestRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebPlayEverquestRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebPlayEverquestRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebPlayEverquestRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebPlayEverquestRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebPlayEverquestRequest) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebPlayEverquestRequest) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// WebPlayEverquestRequest_List is a list of WebPlayEverquestRequest.
type WebPlayEverquestRequest_List = capnp.StructList[WebPlayEverquestRequest]

// NewWebPlayEverquestRequest creates a new list of WebPlayEverquestRequest.
func NewWebPlayEverquestRequest_List(s *capnp.Segment, sz int32) (WebPlayEverquestRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[WebPlayEverquestRequest](l), err
}

// WebPlayEverquestRequest_Future is a wrapper for a WebPlayEverquestRequest promised by a client call.
type WebPlayEverquestRequest_Future struct{ *capnp.Future }

func (f WebPlayEverquestRequest_Future) Struct() (WebPlayEverquestRequest, error) {
	p, err := f.Future.Ptr()
	return WebPlayEverquestRequest(p.Struct()), err
}

type WebPlayEverquestResponse capnp.Struct

// WebPlayEverquestResponse_TypeID is the unique identifier for the type WebPlayEverquestResponse.
const WebPlayEverquestResponse_TypeID = 0xfa35d04887272ed9

func NewWebPlayEverquestResponse(s *capnp.Segment) (WebPlayEverquestResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebPlayEverquestResponse(st), err
}

func NewRootWebPlayEverquestResponse(s *capnp.Segment) (WebPlayEverquestResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebPlayEverquestResponse(st), err
}

func ReadRootWebPlayEverquestResponse(msg *capnp.Message) (WebPlayEverquestResponse, error) {
	root, err := msg.Root()
	return WebPlayEverquestResponse(root.Struct()), err
}

func (s WebPlayEverquestResponse) String() string {
	str, _ := text.Marshal(0xfa35d04887272ed9, capnp.Struct(s))
	return str
}

func (s WebPlayEverquestResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebPlayEverquestResponse) DecodeFromPtr(p capnp.Ptr) WebPlayEverquestResponse {
	return WebPlayEverquestResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebPlayEverquestResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebPlayEverquestResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebPlayEverquestResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebPlayEverquestResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebPlayEverquestResponse) ServerId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebPlayEverquestResponse) SetServerId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebPlayEverquestResponse) Success() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s WebPlayEverquestResponse) HasSuccess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebPlayEverquestResponse) SetSuccess(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSuccess sets the success field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s WebPlayEverquestResponse) NewSuccess() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s WebPlayEverquestResponse) ErrorStrId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebPlayEverquestResponse) SetErrorStrId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// WebPlayEverquestResponse_List is a list of WebPlayEverquestResponse.
type WebPlayEverquestResponse_List = capnp.StructList[WebPlayEverquestResponse]

// NewWebPlayEverquestResponse creates a new list of WebPlayEverquestResponse.
func NewWebPlayEverquestResponse_List(s *capnp.Segment, sz int32) (WebPlayEverquestResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebPlayEverquestResponse](l), err
}

// WebPlayEverquestResponse_Future is a wrapper for a WebPlayEverquestResponse promised by a client call.
type WebPlayEverquestResponse_Future struct{ *capnp.Future }

func (f WebPlayEverquestResponse_Future) Struct() (WebPlayEverquestResponse, error) {
	p, err := f.Future.Ptr()
	return WebPlayEverquestResponse(p.Struct()), err
}
func (p WebPlayEverquestResponse_Future) Success() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}

type WebSession capnp.Struct

// WebSession_TypeID is the unique identifier for the type WebSession.
const WebSession_TypeID = 0xf613029b64a06aeb

func NewWebSession(s *capnp.Segment) (WebSession, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession(st), err
}

func NewRootWebSession(s *capnp.Segment) (WebSession, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return WebSession(st), err
}

func ReadRootWebSession(msg *capnp.Message) (WebSession, error) {
	root, err := msg.Root()
	return WebSession(root.Struct()), err
}

func (s WebSession) String() string {
	str, _ := text.Marshal(0xf613029b64a06aeb, capnp.Struct(s))
	return str
}

func (s WebSession) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebSession) DecodeFromPtr(p capnp.Ptr) WebSession {
	return WebSession(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebSession) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebSession) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebSession) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebSession) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebSession) RemoteAddr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebSession) HasRemoteAddr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebSession) RemoteAddrBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebSession) SetRemoteAddr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebSession) RemoteIp() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WebSession) SetRemoteIp(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WebSession) RemotePort() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WebSession) SetRemotePort(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// WebSession_List is a list of WebSession.
type WebSession_List = capnp.StructList[WebSession]

// NewWebSession creates a new list of WebSession.
func NewWebSession_List(s *capnp.Segment, sz int32) (WebSession_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[WebSession](l), err
}

// WebSession_Future is a wrapper for a WebSession promised by a client call.
type WebSession_Future struct{ *capnp.Future }

func (f WebSession_Future) Struct() (WebSession, error) {
	p, err := f.Future.Ptr()
	return WebSession(p.Struct()), err
}

type Int capnp.Struct

// Int_TypeID is the unique identifier for the type Int.
const Int_TypeID = 0xbd94d13b8b1bcadf

func NewInt(s *capnp.Segment) (Int, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Int(st), err
}

func NewRootInt(s *capnp.Segment) (Int, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Int(st), err
}

func ReadRootInt(msg *capnp.Message) (Int, error) {
	root, err := msg.Root()
	return Int(root.Struct()), err
}

func (s Int) String() string {
	str, _ := text.Marshal(0xbd94d13b8b1bcadf, capnp.Struct(s))
	return str
}

func (s Int) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Int) DecodeFromPtr(p capnp.Ptr) Int {
	return Int(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Int) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Int) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Int) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Int) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Int) Value() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Int) SetValue(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// Int_List is a list of Int.
type Int_List = capnp.StructList[Int]

// NewInt creates a new list of Int.
func NewInt_List(s *capnp.Segment, sz int32) (Int_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Int](l), err
}

// Int_Future is a wrapper for a Int promised by a client call.
type Int_Future struct{ *capnp.Future }

func (f Int_Future) Struct() (Int, error) {
	p, err := f.Future.Ptr()
	return Int(p.Struct()), err
}

type Bool capnp.Struct

// Bool_TypeID is the unique identifier for the type Bool.
const Bool_TypeID = 0xcc4575715bad9f24

func NewBool(s *capnp.Segment) (Bool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bool(st), err
}

func NewRootBool(s *capnp.Segment) (Bool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bool(st), err
}

func ReadRootBool(msg *capnp.Message) (Bool, error) {
	root, err := msg.Root()
	return Bool(root.Struct()), err
}

func (s Bool) String() string {
	str, _ := text.Marshal(0xcc4575715bad9f24, capnp.Struct(s))
	return str
}

func (s Bool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Bool) DecodeFromPtr(p capnp.Ptr) Bool {
	return Bool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Bool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Bool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Bool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Bool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Bool) Value() (Bool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Bool(p.Struct()), err
}

func (s Bool) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Bool) SetValue(v Bool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Bool struct, preferring placement in s's segment.
func (s Bool) NewValue() (Bool, error) {
	ss, err := NewBool(capnp.Struct(s).Segment())
	if err != nil {
		return Bool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Bool_List is a list of Bool.
type Bool_List = capnp.StructList[Bool]

// NewBool creates a new list of Bool.
func NewBool_List(s *capnp.Segment, sz int32) (Bool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Bool](l), err
}

// Bool_Future is a wrapper for a Bool promised by a client call.
type Bool_Future struct{ *capnp.Future }

func (f Bool_Future) Struct() (Bool, error) {
	p, err := f.Future.Ptr()
	return Bool(p.Struct()), err
}
func (p Bool_Future) Value() Bool_Future {
	return Bool_Future{Future: p.Future.Field(0, nil)}
}

type String capnp.Struct

// String_TypeID is the unique identifier for the type String.
const String_TypeID = 0xf23307bee1ce0b8d

func NewString(s *capnp.Segment) (String, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return String(st), err
}

func NewRootString(s *capnp.Segment) (String, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return String(st), err
}

func ReadRootString(msg *capnp.Message) (String, error) {
	root, err := msg.Root()
	return String(root.Struct()), err
}

func (s String) String() string {
	str, _ := text.Marshal(0xf23307bee1ce0b8d, capnp.Struct(s))
	return str
}

func (s String) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (String) DecodeFromPtr(p capnp.Ptr) String {
	return String(capnp.Struct{}.DecodeFromPtr(p))
}

func (s String) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s String) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s String) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s String) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s String) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s String) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s String) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s String) SetValue(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// String_List is a list of String.
type String_List = capnp.StructList[String]

// NewString creates a new list of String.
func NewString_List(s *capnp.Segment, sz int32) (String_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[String](l), err
}

// String_Future is a wrapper for a String promised by a client call.
type String_Future struct{ *capnp.Future }

func (f String_Future) Struct() (String, error) {
	p, err := f.Future.Ptr()
	return String(p.Struct()), err
}

const schema_cdefabcdefabcdef = "x\xda\xe4\xbd\x0bt\x14U\xf67Z\xa7;!\xbcB" +
	"'\xa9f\x02\x0aF\x10\x1fdD!\x80H\x04CB" +
	"\"$\x12H\xa7\x83@\x14\xb5\xd2]I\x8atWu" +
	"\xaa\xab\xf3@1\x80 \x0f\x89\x02\x82\x82\x82<\x04\x01" +
	"\x01%\x08\x0a*\x8e\xa88\xe2\x80#3\xa0\xa0\xa00" +
	"\xca(**\x0a\xa38b\xee\xda\xbb\xba\xbbNWN" +
	"\x92\x8e\xff\xff\xf7\xddu\xd7]\xcb\xb5\xa4\x7f\xd9Uu" +
	"\x1e\xfb\xec\xb3_g\x9f\xfe\xd5\x0f\x8c\x88\x19\x10?\xc7" +
	"\xcfY\x9c#bc\xdb5\xde\x92\xbc\xee\xe5!\x05E" +
	"\xd39\xc7\x95\x844~\x7fp3\xfe\xc7\xc5\xc4q\xdc" +
	"\xc0MC\x0b\x09\xbfgh\x1c\xc7\xf1\xbb\x87Vs\xa4" +
	"\x91\xfc\xe6\xb8\xee\xb5\x92)Hl1\x11wM\xff\x98" +
	"\xf0\x03\xd2\x81\xb8_\xfa\x0b\x1ci<;\xf6\xfeIk" +
	"w\xbfl~s,\x01\xea\x83\xe9\x85\x84?\x85\xd4'" +
	"\xd2\xe1\xd5+\xad'\x8e=s\xe9\x9e\x19fj\x0bP" +
	"\xe7\xde2\x9f\xf0\xc2-@=\xf9\x16x\xf77\x9f/" +
	"V\x1a7\xb8f\xb0Z}\xe9\x96)\x84O\x1c\x06\xc4" +
	"\xf1\xc3\xe0\xd5\xb5\xc3\x1bli\xbb%&q\xe5\xb0," +
	"\xc2\xcf@\xe2iHl\xb9~\xa9\\\x94\xf8\xeb\x0c." +
	"\xf1\xca&\xcd85\xac\x90\xf0\x17\x90\xf8\x1c\x12/\xcf" +
	"\xbc\xb3\xb2r{\xfcLxs\xac\x99z\xf2\xf0\xf9\x84" +
	"\x0f\x0c\xc7\xaf\x0c\xdf`\xe1H\xe3u\xab_\xdc\xb9\xaa" +
	"f\xc3LVC2G\xe4\x11~\xfc\x08x\xb7cD" +
	"\x06G\x1a\xf7;^\xf3\xcd\xfe\xf7\xab3\x99\x03R9" +
	"\xe2_\x84\xafG\xeay#\xbe\xe4H\xe3\xe7\x7f\x0b\xfc" +
	"}\xdd\x83o\xcfd\x0evef\x09\xe1gg\x02\xf5" +
	"\x8cL\x18\xbe\xef\x16\x1f\xe88\xed\x9d\xaff\x9a:\x89" +
	"\xc4\xdd\xb3J\x08\xdf/\x0b\x88\xfbfAC>xg" +
	"t\xc1\x89\x915\x0f\xc2\xabcL\xad\xce\xcdz\x93\xf0" +
	"B\x16v7\xebQ\xc2\x91\xc6\x8c\x8b\xd3\xb3\xca\xe4\x87" +
	"\x91\xdaj~\xf7\xb9\x91\x85\x84\x8f\xcd\x86\x7f\x92l$" +
	"\xf7\x7f\xf3\xe3\x9c\x09\x9f\x8c\x9b\xc5\x1a\x92\xe59y\x84" +
	"\xdf\x9a\x03-\xd9\x94\x03\xc3\xfd\xe3\x8f{\xbe\xfdv\xe0" +
	"\xf3f\xe2X+P\xc7\xde\x96N\xf8\xae\xb7\x01u\xe2" +
	"m0$\xbfO~\xf0\xe3Ki\x8d\xb3X\x9d<\x0d" +
	"\xc4\x17\x90\xf8\xdcm\xd0\xc9>\xa9\xf3\xbb\x08\x96\xebg" +
	"3\xc7\xaf\xd7\xa8\xde\x84\x1f0\x0aY{\x144\xe4\x95" +
	"\xa3\x05\xe5\x8f\x96\x0e\x9am\xea$\xb6z\xde\xa8\xb5\x84" +
	"_\x83\xc4+GA;f\x0d\xbcb\xfe\x8d?g\xcc" +
	"6\xb5\xa3\x13\x10/\x1a=\x9f\xf0\x9bF\xc3?\xd7\x8f" +
	"V\x80G\xdc;\x8f]unk\xe1l&\x8f\xdc\xae" +
	"\x12~\xfc\xed\xc8#\xb7C;\xae8^[r\xb9\xcd" +
	"\xf2\x10\xe7\xb8\x82\xc45\xde1h\xdc\xdd\xde\x05\xf7=" +
	"\xc9\xc5v\x01\xea\x86\xdb\xd3\x08\xbf\x17\xa8\x07\xee\xb9\xfd" +
	"\xdav\xc0\xae\x7f>\xbf\xe4\x85\x87_z\x88\xd5\xec\xee" +
	"\xce'\x09?\xc0\x09\xff\xec\xe7L\x81\xa9\xe9\x95\x91\x98" +
	"\xf7\xf6\xb9\x1f\x1eb\xb5$\xb7h1\xe1\x85\"\\\x90" +
	"E0~\xeb\x9f\xba\xf1\x8e\xc3\xd7\x0e\x9d\xc3z\xf5\xb4" +
	"\xa2B\xc2/\x02\xe2\x81\xf5E\xf8\xeai\xb9?\x0fY" +
	"\x97R>\x87\xc9\xdb+\xc7O!|\xc3xx\xf7\xd6" +
	"\xf10\x80'\xf6<\xe6>\x9f\xfa\xd1\x1c\xf3*\x8b\xc5" +
	"\xe1\xbe#\x8f\xf0+\xef@~\xb9#\xd9\xca\x91\xbf," +
	"y5\xeb\xf3\xc1Us\x19\xad>3)\x95\xf0\x17'" +
	"\xc1\x9b/L\x82V\x9f\x9c\xc8\x9f\xde\xe3\xb1\xcde\xb6" +
	"\xa3{q!\xe1\xfb\x15\xe3B(\x86U#^\xb1\xf6" +
	"\xa5\x8d\x19\x97\xcde\x0d\xc8\xfe\xe2\x12\xc2\x9f@\xe2c" +
	"\xc5\xf0\xea\xf1\xe5\x97\x9e\xe8\xf9\xc0|&\xf1% N" +
	"\xbc\x13%\xd4\x9d0\x8f{\xae\x1c}\xe6\xc39\x0ds" +
	"\xcd=D\xee\xf3\xdeYB\xf8\x19w\xe2H\xde9\x04" +
	"x$>\xfb\xc4\xa4%\xaf\xbe\xc3|\xf7\xde\xc9*\xe1" +
	"\x8fL\x86w\x1f\x9a\x8c2\xfb\xe4\xfe\xaf\xee{\xac\xef" +
	"<&g\xf7\xbb;\x8f\xf0\x99w\x03\xf5\xf0\xbb\x81z" +
	"\xc21\xf1\xf5A\x03\x9f\x9e\xc7\xdc\x0e\xee\xdeN\xf8\xbd" +
	"H\xbc\x07\x89\xdb\xd5e\xd7=Ytn\x1eKV\xf6" +
	"\xbc'\x8b\xf0\xfd\xee\xc1\xd1\xbb\x07\x88/\xf5R\xf7\xce" +
	"\xff\xa1\xe7|\xe6\x9a\xb9\x07\xd6\xcc=8\xfb\xf7L\x00" +
	"\x0e9~>\xbd\xfb\xdf\xa4\x9b\xe6\x03g\x13\x83\xb3\x91" +
	"\xfa\xdc\xbd E\x04x5\x11\xe0\xd5I\x8f\x8d\xc9;" +
	"zM\xc1|\xce\x91BHcB\x1aM,\x08\xc5\x84" +
	"\x0f q\xa5\x00\x133=eO\xb7\x19\x07\x0e\xccg" +
	"\x89\x85E\xc2L\xc2\xafG\xe25H<h\xc7\x90\xcb" +
	"\x84\xd2k\x1efmx\x87\x84<\xc2\x9fF\xe2S\x02" +
	"\xf0\xc7\xf2\xaf\x0f\xcc\xce=v~\x01\xeb\xcd3J\xf2" +
	"\x08\xbf\xb4\x04\x88\x17\x95\xc0\x9b\x0f\xfd,\x1c-I\x1a" +
	"\xf2(s\x0eK\xd2\x08\x7f\x08\x89\x0f\x96@\x07\xf7\xf7" +
	"\xde\xfa\xc8o\xfb\xa7#q;\xf3\xab\x07\xb8\xd2\x08\x9f" +
	"\xe9\x82\x7f\x0ew\xe1>\xd3c\xdf\xe7\x9f\xa5\xf4\x7f\xea" +
	"Q\xe6\x94\xc7\x96\xaa\x84\xef^\x0a/\xefZ\x0a\xcd\xbe" +
	"w\xe9\xb4K\xd2\xb75\x0b\xcd\xd4\xd8\x94\x86\xd2\xe7\x08" +
	"\xbf\x1f\xa8\x07\xee+\xc5\xb5\xfb\xc1\xe6\xa7,\xff\xb1\xd4" +
	"-2\x0d\x89\xfe\xf2\x13e\x8b\x09\x7f\xa1\x0c\xe5j\x19" +
	"\xac\xdd\xb8\xf9\xab\xee\xdc\xb4\xeb\xe9E&\xce\xc6w\x1f" +
	",\xcf\"\xfc\x89r\xf8\xe7\xb1\xf2Fx\xb7r\xf9\xf5" +
	"+\xbe\xad\xda\xbc\x885('\xa6\xcc$\xfc\xb9)\xf0" +
	"\xea\xb3S`P\xbe[\x11\xfft\xfc\x97\x7f[\xc4\x9a" +
	"\x9b\xdc\x8a\x99\x84\x9f\\\x01\xc4\x93*\xa0\x93\xd7\xbe{" +
	"\xd9\x86\x94\xae\xc9\x8bYo\xbeX\x91G\xf8x\x0f\x10" +
	"w\xf0\xc0\x9b\x1f\xa9\x9f5\xdbrf\xf1b\xe6\xb6." +
	"y\xa6\x10~\x1aP\x0f\xac\xf5\xe0p/\x1c\xe8~w" +
	"\x8f\xed\xd3\xc7\x98[^\xae2\x95\xf0\x93\x15\xf8\xe7$" +
	"\x05X\xfb/\x1f\xde\xf0\xe8\xbf\xf2\x96/\x89d\x12\xdc" +
	"\xc2\xb6\xfa\x0a\x09\xbf\xd7\x87\x0b\xcc\x07\xad\xee\x1e(K" +
	"nx\xa3\xe3\x12\xe6DN\xaaT\x09\xef\xad\x04j\xa9" +
	"\x12\x9a]t\xc3w\x9bG\xf6\xc9cS\xef\xab|\x93" +
	"\xf0'\x90\xfaX%\xbc\xbb\xea\xca\x19\x1d\xff=\xf4\x03" +
	"6\xf5lu*\xe1\x97\xab@\xbdT\x85w\xdf<\xec" +
	"\xe8\xb9\xf7\x8f/[\xca\x1a\xecs*\xacG?\xaeG" +
	"?L\xfa\xc8;\xa7\xfd\xb9\xfb\xa8\xf7\x96\x9a\xd8U\x9f" +
	"F\x7f:\xe1\xcf\xfaQ\x1c\xfbq\xc7K[\xdf\xe3\xa7" +
	"{>\xbf\xe6\x09\xd6\xab\x03UO\x12\xbe\xbe\x0a\xf5\x9c" +
	"*h\xf5\x8b\x8b\xa5\xbf\xdc\xd9+a9\xb3\xd5}\xab" +
	"\xa7\x12~x5P\x0f\xad\x06\xea\x8a\xde7\x9c\x9e\xb4" +
	"~\xc1r\xe6\xcc\x9c\xa8\x06^\xad\xc6\x1eT\xa3\xd0\xf9" +
	"o\xafo\xaf\xbe\xe3;\xcbS\\b\x0a%Ft\xea" +
	"\x9c\xda,\xc2\x8f\xaf\xc5\xbd\xb7\x16\x16p\xd7\xf3o\xc5" +
	"\xbc\\6\xea)\xb6~V\x0b\x1a\x17R\xcf\xa8\x85\x96" +
	"d\xdf;467\xf5\xb1\xa7X\xa2\xb2\xfbT\xd0\xb8" +
	"\xa6\xa2\xa8\x9c\x0a\x83=\xa0\xee\xa7\xca\xa9\x07,+X" +
	"\xccZ?\xf5M\xc2\xafG\xe25H\xfc\xf83{k" +
	"\xbe\x1b\xf6\xe0\x0a&\xb3v\xb8/\x9d\xf0\xdd\xefC\xfd" +
	"\xfc>\x1c\xed\xe5\xeb\xe6\x7f\xf8\xef\xbd\xb3W0\x07p" +
	"\xeb4\x95\xf0{\xa7!\x03N\x83f\xdf\xf2\xde\x92W" +
	"\xc7\xc6\xadZ\xc1\xd2\xfd&=PHx\xef\x03\xb8&" +
	"\x1e@e\xee\x93\x87\x17\xac\x7fz\xd6\x9a\x15\xcc\xe1\x8e" +
	"\x9d\x0erg:6e:\x92'\xbcX~\xe9\x91w" +
	"O\xaf`\x8d\xc9\x9a\x19S\x09\xbfs\x06\xb4\xa4a\x06" +
	"t\xf3\x86\xbb\xae\xbb\xfa\xc7\x0esV\xb2\xc6$~f" +
	"!\xe1{\xcd\x04\xe2\x9e3\xab9\xf2\xd9\xab\x81\xaf\xdf" +
	"\xff9\xf5iV\x17kg\x16\x13\xbe\x1ei\xe7\xcd\x84" +
	".N\xbb\xe6\xc9\xbb\x0av\xff\xf9i\xd8ibL;" +
	"\xcd\xd5\x0fn'\xfc\xf0\x07\xe1\x9fC\x1f\xc46\xbf2" +
	"8\xe9\x93\x9f]\xf7?\xcdj\xc6\xbeYS\x08\x7fl" +
	"\x16\xbc\xfa\xc8,hs\xee\xfaN\xe2\xa8\xdd\xffx\x9a" +
	"9\xd6\x03fo'|\xeel\xa0\xce\x99\x0d\x0dY5" +
	"n\xcbOS\x06\xf6]\xc5d\xa8s\xb3\xa7\x12>\xf6" +
	"!\\c\x0f\xc1\x1as\x16*q\x83&\xa4\xadb\xea" +
	"\xc2g\x1f\x9aIx2\x07u\x8d\x87Pj?\xb5\xbc" +
	"\xd3\x97\x0fo\x98\xb8\x8a\xd5\xee\xe1s\xdf$\xfc\xf8\xb9" +
	"\xc8\xdas\x81\xb5\xdf\xaf\xed\xd9a\x96s\xc5*\xe6<" +
	"\x06\xe6n'|\xfd\\\xdc\xb6\xe7\xe2\x98\xdc^\xfb\xe5" +
	"s\xf5\x1f\x1c]\xc5Z\xc0\x8e\xf9\xc5\x84\x17\xe7\xc3\xbb" +
	"\x85\xf9\xd0\xee\x8b\x8e\xcc\xeb\x17\x9dOZ\xcd\"\x1e\xfe" +
	"p!\xe1\x1d\x0f\x03q\xfe\xc3@\xfc^\xcd\xad\xcb\xcf" +
	".Y\xbf\x9a\xbd\xda\x17\xa8\x84\x1f\xbe\x00W\xfb\x02\x18" +
	"\xee\xad\x8bF\xfd\xd6\xb3\xeb\xb7\xabY\xfc\xb4tA\x09" +
	"\xe17!\xf1z$\xce\xbe\xff\x8a\x98\xf6#\x16\xada" +
	"\x0d\x08\xa9\x9fB\xf8\xae\xf5hJ\xd4\xc3\x80l{\xb8" +
	"\xf6\xf3\xf2\x05\xc3\xd6\x9a\xf7<\x1c\xec\xc1\xf5S\x09\x9f" +
	"[\x8fB\xa2\x1e\xe5\xc8\x83\x07\xe6\xdd\xfe\xce\xf9\xdf\xd7" +
	"r\x0c\x19\xbf\xf2\x91\xed\x84\xdf\xf9\x082\xf6#0\xed" +
	"\x09\xc4\x7f\xe3\xbd[c\x9ea\xaa\xd9\x8f\xc26\xf6(" +
	"nc\x8fB\xab?\xfc\xf0\xf0}\xab\x8fU?\xc3\x1a" +
	"\xbd\x9d\x8f\xa6\x11~\x1f\x12\xef}\x14\xde\x1c\xdf\xef\xf0" +
	"\x89)3/2\xdf<ia1\xe1\xbd\x0bq\xf3X" +
	"\x08o~\xb0\xac{\x17^KX\xa7\x13\x0fz3r" +
	"\xf3X8\x93\xf0\xc7\x90\xfa\x08R?\xf7\xc87\xab\x0f" +
	"\\\xf8}\x1dK.\x0c^4\x85\xf0\xb9\x8bp<\x16" +
	"\xfd\x15\xc6\xe3\xaf\xdf\xbf\xd7\xa7\xfb\x0em=\xe7\xe8\x11" +
	"\xdb\xbeq\xae\xe7\xc4\xef\x8e\x1e\xa9\x878\x8e\x0c\xec\xf9" +
	"\x98\x85\xf0}\x1f\x8b\xe38g\x9f\xc7\xac@\xdb\xb9\xe1" +
	"\x9b\x84\x97\xae\x9b\xb5\xde<\xd48\x8b]\x1f\x9b\x12$" +
	"\x1fx\xf5c8\xd4\xf1}N\x16\x8c\xdf\xbeq=s" +
	"\x19,ZRB\xf8\xf5KPV.\x01~zh\xc9" +
	"\xee\xba\xe4Y\xaegY\x1a\xda\xbc\xa5Y\x84_\xbe\x14" +
	"\xb7\xbc\xa50\xe9\x1f\xc9\xf9\xef\xdct\xec\xfe\x0d\xe6U" +
	"\x80\xaf\xde\xb9t&\xe1\xf7/\xc5\xc1Y\x8a\x9d\xdc1" +
	"\xfa\xb7k\x8f\xae{|\x03\xeb\xddK\x9f\xc8#\xfc\xa6" +
	"'\x90\xfb\x9e\x80w_u\xd5\xa0w_\xfb\xf3\xe6\x0d" +
	"L%\xea\xc8\x13\xc5\x84?\xf3\x04\xda\xa9O\xe0\xea\xdd" +
	"\xba\xac\xa2\xb7\xe4\xfb\xd7\x06\xd6\xb4wX\xae\x12\xbe\xe7" +
	"rxw\xf7\xe5\xd0\xc9\xc7\xb6\xeem\xbc\xae\xa3\xbc\xd1" +
	"47\xfa\x08^\x00\xea\x0eO\xa2@~\x12\x8d\x89\xf1" +
	")\x8f\x8f88\xad~#s\x8d\x09+\xd2\x09_\xb9" +
	"\x02^\xee]\x81:\xc6\x93;V|\xff\xc2\x9f6\xb1" +
	"x\xea\xd8\x8aB\xc2\x9fE\xe23+\xa0\x97\xf6q\x85" +
	"\xe2c_\xcc\xda\xc4|u\xfc\xca\xa9\x84\xef\xb5\x12\x85" +
	"\xf6J`\xd7\xb7F\xdf\xd3)y\xcb\x9cML\xde^" +
	"YH\xf8\xfdH\xbco%tr\xd3\xb0\xc3sn}" +
	"\xed\x8a\xcd\xccW\xafyZ%\xfc\xce\xa7q\x8d=\x0d" +
	"\xad\xb6~\xfb\xe8\xc1E\xa59\x9bYZh\xcfU\x1f" +
	"\x13~\xe8*\xe4\xdcU8\"\x0d\x7f\x12V\xdc|z" +
	"\xddf\xa6 \xae]SB\xf8\xfa5\xb8\x7f\xacA7" +
	"\xc3\xac':\x1cl\xf7\x8f\xad\xa6\xfdCo\x89\xb46" +
	"\x8f\xf0\xd3\xd6\xe2\x83k\x91M6\x8e\xee\x9d\xd6\xaea" +
	"\xce\xf3\xcc\xe5\xben\x0a\xe1'\xaf\xc3\xe5\xbe\x0e\xda\xdd" +
	"\xb3\xdf\xa8vK7\xd7?\xcfZf;\xd7\xc1r_" +
	"\x87\xf6\xc2:\x94\xc3\x97\xf7\xb9G\xbdQ|\xe9y\xd6" +
	"\x00Nz\x16\x94\xc5gq\xbd?\xfb\x02G.]\xb7" +
	"r\xf6\xac{\xc8\x0b,\xe9\xb7\xa1\x84\xf0]7\xa0\xf4" +
	"\xdb\x00\xd3\xf8\xf1U7\x9cZ6g\xde\x0bLf\x1d" +
	"\x00\xd49\x1b\xd0=\xb1\x01\x99u\xee\xae;\xbe\x1b-" +
	"h\xdbX\x0ba\xfc\xc6\x99\x84\x976\xc2\xbb\xc5\x8d\xf0" +
	"\xee\xbe]\xf3]O_\xf1\xd16V\x9b\xe7mT\x09" +
	"\xbf\x12\x89\x97o\x04\x0ey\xf6\x85\x0b\x0bv\x1f\xaej" +
	"`N\xfa\xe0MO\x12>\x7f\x13P\xe7n\x02\xea'" +
	"\xd5\xd2\xb1{OTlg\xbd\xfa\xcc\xa6\x12\xc2_B" +
	"\xe2\x8b\x9bp\xa7\x19\xbd#&\xf9\xbe\xaf\xb7\xb3\x1a}" +
	"\xe8\xb9'\x09\x7f\xe69 >\xfd\x1c4\xfa\x97\x03\xcf" +
	"<\xb9\xee\xe2\xc6\x17Y\xc4]7\x17\x13\xbe\xeff " +
	"\xbez3\x10/.r\xbd\xfa\xed\xef\xbf\xbc\xc8\x9a\xf0" +
	"\xf1\x9b\xe7\x13\xde\x8b\xc4\xd2f\x98p!\xd1\xda\xfe\xbb" +
	"\xd4\x9c\x1d,\xe2\x83\x9b\x0b\x09\x7f\x0a\x89O \xf1\xa0" +
	"g\x92\xc6\xe7W\xf1;\x99\xdb\xf4\xf0-\xe9\x84\xcf\xdf" +
	"\x82l\xb5\x05D\xe5\x7f?\xfd,\xfe\xce\xe3\xd7\xefd" +
	"\x09\xca\xe5[g\x12~\xebV\xf4\xb4m\x85\xe1p\xfd" +
	"\xf0l\xed\xfb\x9b\x9f\xdd\xc9\xda\xc1\xea\x9f/$\xfc\x9a" +
	"\xe7\xd1\xc1\xf5<\x0ctn\xbb\xfe\xffxl\xd1\x94\x97" +
	"X\x03=\xf4\x85)\x84\xcf\x7f\x01g\xe5\x05 ~\xe6" +
	"\xef\x1d/\xb7\xefz\xf7%\xe6\x1c\x9e}\xa1\x84\xf0d" +
	"\x1bP_B\xea\xd2i\x93\xffy{\xfa'\xccW/" +
	"\xdd\x06[:\x12\xaf\xdf\x06\x8d\xfe\xf2\xe7\x15\xb5\x8f\x1f" +
	"\xbc\xe1e\xd6\xe0\xcdn(&\xfc\xf2\x06\x94\xee\x0d0" +
	"x\x8b\x16\xbduf\xdas9L\xe2\x0b\x0d\xa9\x84\x8f" +
	"\xdd\x8e\xca\xd6v \x1eq\xe9?\xdd\x03W\x8c{\x99" +
	"5\xe1\xe2\xf6B\xc2\xd7\"q`;L\xf8\xa7\xc97" +
	"\xfc\xf5\x1e\xff\x8e\x97\x99=\\\xbe\xfdI\xc27 \xf5" +
	"\xd6\xed\xd0\xc3!\xde\xe7\x1e\xb9\xe5\xd1\xbf\xbe\xccRZ" +
	"&\xbd\x98Nx\xe9E\\-/B;\xce\xa8\xed\x9f" +
	"\xce\xfa\xf8\"\xb3\xd1{_,!\xfc\x11$>\x84\xc4" +
	"W~\xed=\xf7\xfa\x12\xdb.\xd6\x9b\xfb\xed\xc8#|" +
	"\xe6\x0e\xf4\xfb\xec\x00\xe2a#\xae\xad\xa8\xbbg\xc8." +
	"x\xf3 j\xfb\xef\x86\xf2t\x07\xc8\xd3\x1d\xe8\x0f\xd8" +
	"q\xcf\xe5\x1ci\x94\xff\x99\xb3\xb1`W\xd1.f\x1f" +
	"\xe7\x1d\xce#\xfc\xca\xc3\xb8n\x0fC\x1f\xf7\xccy\xeb" +
	"\xbb\xd3\xaf\x09\xbbX\xcd\x1e|\xa4\x84\xf0\xb9GP\x0d" +
	">\x02-I\xees\xfa\xd4;/\xed`\xbfz\x13P" +
	"\xefA\xea\xddG\xe0\xd5\x9f\x91e\xb7$\xdd\xf8\xfd." +
	"\xa6\xee\xf9a\x09\xe1\xc5\x0fQ\xf7\xfc\x10\x88\xf9\x8a\x9f" +
	"\x8eL\xfe\xb2\xebn\xa6\xce\xf7Q!\xe1\xbb~\x84R" +
	"\xef#h\xc7\xb8q\xff\xbev\xc2\xb2*&\xb1\xf7\xa3" +
	"\xc5\x84\x9f\x8d\xc43\x90\xf8\xc8\xbc>\x1f~\xb2\xe3\xfe" +
	"W\x98\"\xf2\xd4Gk\x09\x7f\xf1#\xe4\xac\x8fPD" +
	"\xde4\xb1\xe1\xc8\xe1]\x8f\xbe\xc2\x9a\x9a\x0e\xc7\xa6\x10" +
	"\xbe\xe71\xdc\xcf\x8f\xc1\xbb\xd3c\x1f\xf9\xa8\xc7/\xff" +
	"`\x12\x07\x8e\xe5\x11~\x1e\x12\xcfF\xe2\xca\xdf'|" +
	"\x95\xff\xfb\xc7\xaf0G\xef\xd4\xb1B\xc2_@\xeas" +
	"\xc7^\xe0\xc8\x7f\x9f\xfdj\xfe\xf3o}\xfe\x0a\x8bv" +
	"\xe5\xc7*\xe1\x1b>FF\xfd\x18\xed\xa4\xd4\xdf\x87\x7f" +
	"\xb0\xe3\x86WY#\x9d\xffI\x1e\xe1\x85O\xd0\x1d\xfc" +
	"\x09,\xc5\x82/\xde]\xb27\xe1\x95\xd7X\x1b\xd7\xd0" +
	"\xe3 \x12\x8e\xa3d:\x8e{\xe2g\xef]\xfe\xf0-" +
	"\x87\x96\xeca\x0du\xd7O{\x13\xfe\xeaO\xe1\xd5\xbd" +
	">\x85\xe55\xe4\xee\xd7o^\xfc\xe4\xbf\x99\xc4\x99\x9f" +
	"\xce'\xfc$$\x1e\xff)\x0c\xc7\xddo\xbcc?\x11" +
	"sn\x8fY\x17\xd2u\xb8O\xa7\x10~\xff\xa7\xa8\xc3" +
	"}\x8a;\xff\xc7\xff\xbd0\xf0\xf07?\xef\xe1\x12\xaf" +
	"\xb0\x18[9\xe8\xa9\xa7\xa6\x10~\xc0)\x8c\x00\x9c\x1a" +
	"\xc2\x91\xc6\x99q\xa3\xbau\xfa\xba\xe8u\xa6\xec\x1dz" +
	"j>\xe1\x1d\xa7pdN\xa1\x9a:\xf6|\x16\x1f;" +
	"~\xfc\xeb\xacF\xaf\xfc\x17\x8c\xf4\xbfp\xa4\xff\x05\x8d" +
	">\xbb9\xbe\xf1\xf2\x84U\xaf\xb3\xd5\xa6\xcf\xb7\x13\xfe" +
	"\xea\xcfq<>\x87y9\xf9\xe7\xda\xab\x12\xea6\xbd" +
	"\x0e\xca5\x89P\xae\x0f~\xde\x9b\xf0'\x80\xd4y\xf4" +
	"sT\xaeo\xf1\xees-\xdb\xfc\x8f\xd7\x99\xca\xf5\xfe" +
	"\xcf\xa7\x06\xc9\x07\x1e\xfb\x1c\xd9\xd41\xb0t\xc1\xde\xeb" +
	"\x8b\xff\x02\xe4\xedM\xad>\xfb\xc5|\xc2\xc7\x9e\xc6\xa5" +
	"sz\x8e\x95#\x8d]\x7f\xddr\xf9G{\xdb\xbf\xc1" +
	"\xb4\xd0\xcf\xcc$|\xaf3\xa8\xec\x9dA=\xb2\xeb\x88" +
	"\x7f\xdf\xfe\xf4\x88\xbd,\xe2ig\x8a\x09\xbf\x08\x89\xeb" +
	"\xcf\xc0\x94\x0f\x1c\xf3\x84\xf2\xd6\xa6\x87\xf6\xb2v\xa3\xad" +
	"@\xbc\x17\x89\xf7\x9cA/\xac\xbal\xde\xaeB\xf2&" +
	"s\xca'}=\x85\xf0\xde\xafQ5\xfb\x1a\xfd!\x15" +
	"\xb7\xe6\xff\xd2\xcb\x9a\xf6&ku]\xf8v;\xe1\xe3" +
	"\xcf\xa2c\xf0,\xb4\xfa\\\xfd\x8d\xc9I\xf7\xee~\x93" +
	";\xd4#\xf6w[\xc4`{\xcfv$\xfc4\xa0u" +
	"\xd6\x9c\xc5\xc1\xfefC\xfa\xad\xef+{\xdfdN\xa3" +
	"tvf\x90\x9c\xaf=\x0b\xcd\xde\x7f\xcd\xa8\xcf>\x9f" +
	"x\xf1M\xd6\xf2\xea\xfb]\x1a\xe1\x87~\x07\xc4\x83\xbf" +
	"\x83\xe5\xb5\xf8\xf4\xe1w\xb7\xb8\xd3\xdebs\xc8\xf7\xc0" +
	"!\xdf#\x87|\x0f\xad\xfe\xe9\x9f\xf9W\x95\xfc\xe9o" +
	"o\xb1\xdcq\xb3\xbf\xff\x98\xf0k\xbeG>\xfc\x1e\x07" +
	"\xe4\xf5\xba\xdd\xfb\x9f\xacY\xf16\xab!\xbd~\\L" +
	"\xf8\xa1?bC~\x84\x86<\xf8Z\xce\xf1\xb7\x7fx" +
	"\xfem\xe62\xe8\xfa\x13\xa8B?\xa1\xb5\xf6\x13.\x83" +
	"\x8f\xfaV\xa9\xbf\xbc\x98\xb4\x8f5\xeb3\xceO%\xfc" +
	"\xd2\xf3\xe8!?\x0f\xcd\xbe\xef\xdd8e\xd2\xe0\xcc}" +
	"\xac\x86\x9c=\xbf\x98\xf0\xb1\x17p\x87\xbe\x00\x0dI." +
	"|(\xd95\xb0\x8aI|\xeeB!\xe1c\xff\x83\xc4" +
	"\xff\x81\xb1\xbe\xfb\xb1U\x8e=\x1f\xce\xdf\x07KfP" +
	"\xc4,\xae\xf9\x8f\x85\xf0[\x81\xd4\xb9\xf1?8\x8b\xdb" +
	"\xbe\xd8\xff\xd6Ow/\xdd\xc7\xde\xcd\xff\xf3\x0f\xc2\xef" +
	"\xc477\xe0\x9b7:\x0fwO\x18\xf9.\x9b:\xff" +
	"\xe7\xc5\x84\x17\x7f\xc6\xfd\xe8g\xdc\xa1oZ?\xe8\xcd" +
	"\xeb\xff\xc9\x1c\x8e\xbd?g\x11\xfe\x10\x12\x1f\x04\xe2\x9f" +
	"o\x8c\xdb\xd6X\xf2\xcd>\xd3\xca\xc5\x18X\xdf_\xd6" +
	"\x12>\xf3\x17T\xfb~AG\xfa\xdf:\x9c8^\xbc" +
	"7\xfb\x1d\x96Sk\xfc\xafY\x84\x17\x7fE\xf3\xeeW" +
	"\x90\xbf\x97\xc6\xcf\xbe\xeb\xe8\xae\xbf\xbf\xc3\xd2\x0c\xfb\xfd" +
	"VB\xf8\xcc\xdfPQ\xf8\x0d\x06\xba\xe3w>\xef\xcb" +
	"O\xdf\xfaWV\x9b\xfb]R\x09\x9fy\x09\x89/A" +
	"\x07\xd5\xdf\xd6\xfci\xd5\xfd\x13\xff\xca\x9a\x95\x95\x97\xb2" +
	"\x08\xbf\x15\x897]\x82\xb1+\x1ak\x91\x97\xff2\x85" +
	"\xf9\xe6\x9c\xdf\x0b\x09?\xe9w\x14\xec\xbf\xc3\x9b\x9fz" +
	"\xa6f\xe8\x07\x7fI~\x97\xf5\xe6\x86\xdfg\x12~\x1f" +
	"\x12\xef\xfd\x1d\xde<\xaf\xec\xeb~\xd7\xae-z\x97\xa5" +
	"\xbeMn\x9cB\xf8\xcaF\xb4p\x1bA\xd8$\x9d," +
	"\xfc\xb6\xf6\xa1\xaaw\x9b:+V6&\x11~k#" +
	"2G#2G\xdd\xe8\x1fW\xfcE\xfa\x80\xd9\x8a\xe5" +
	"\x8d\xf3\x09\xdf\x80/\xde\xda\x08#\xb7|\xd2\x81?\x8f" +
	"\x9b\xb3l?\x83x\xf0<2\x9ft]\x03\x0d\xea\xba" +
	"\x92\x00\xf1\x9e\xdb\x0fV|\xfah\xf9{@\xdc\xd1\xd4" +
	"\xe6!\xb5\x84\x14\x93\xe4z\x82?\xe6\x11\xb2*\x86#" +
	"\x8d7\xac\xb9\xa9b\xe1\xf5O\xbe\xc7\xb2Z\x87\xd4\xb6" +
	"#SHr};x\"y^;\x02\xa32\xf1\xbd" +
	"\xe1\xbf\xe7]\xf64>\x10G\xa9|\xf8\xc0\xe08\xf2" +
	"\x1cI\xce\x8f\xc3O\xe4\xc6\x91q \xe1{d-\xef" +
	"6[\xde\xf9\x1e\xa3\x07C\x8et\x84/\x9c\xe9\x88_" +
	"8\xdd\x11\xbf0bV\xc9\x13o\x8d|\xfb=\xc6\x8c" +
	"\x0e\x99\xd1\x89\x94\x90\xe4\xa5\x9d\x90~Q'\x02\x93\xba" +
	"\xa2\xefwW\xed\xc9\xff\xef{\x8cy\x1ar\x01\xe9;" +
	"tF\xfa\xd8\xce\x04\x83\xf6\xab\xb6\xdeY\x19\xc89\xc0" +
	"\xa2\xef\xdb\x99\xa4\x92\xe4\xa1:\xfd`\x9d\xfe\x8dEw" +
	"\x1f\xd8uY\xe1\x01\x86\xac\x1f2\xbe3\xc9#\xc9\x92" +
	"N/v\xc6\xf6\x88}\x1e\x99\x10\xdb+\xe1\xa0Y\xba" +
	"\xe1\x03{;\x93\xb5$\xf9\x18>0\xe4Hg\x82&" +
	"\xf8\xad\xdfxoz\xcd\xfb\xd9A\xd6\x08\x05\xba\x90\x99" +
	"$y^\x17\xfc\xc2\xec.8B\xdb\xb6\xd8\xef\xc9|" +
	"\xf4\xe6\xf7Y\xf2sHO\x1b)$\xc9\x03l\xf8\xa3" +
	"\x9f\x8d\xa0\x08\xcd\x97\x94\x93\x1f7\x8e\x7f\x9f\xd5\xe7i" +
	"\x09\xc0\x17\x8b\x12\xf0\x0b\xf5\x09\xd8\xe7\xcf\x96v\xee\xb9" +
	"\xf7\xee\x9b\xfe\xce\xd2L\x87\xecI \x8bI\xf2\x11\xfd" +
	"\x81C\x09\xc8y\x8bW&V\xfe>\xcb\xf7w\xc6f" +
	";d}\"L\xc2\xeeD\xa4\xdf\x99\x88]\xa8\xb8U" +
	"\xdd\xfd\xdde\x9f\xff\x9d\xd5eG\x12QI\xb2\x98\x84" +
	"\xf4B\x12\xbe\xff\xdee\xc7\xfa\x1c\xdc\xf1\xc3\xdfY\x1d" +
	"\x18\xca\x934\x92\x9c\xcb#}\x0e\x8f\x1d\xe8{!;" +
	"\xad\xd2-~\x00\xa2\xcc\xd9x\xd5^Z\xf2\x0d\x11y" +
	"\xd2\x9b$\x07\xf0\x81!\x95<i\xec\xc3\x91\xc6\xc7\xfa" +
	"~ZL\xae\\\xf8\x01\xeb\x0b\xfb\x86\x91,\x92|d" +
	"\x98\xde\xe3a\xf8\x85q\xdd/\xc4|\x92x\xe1\x03\xe6" +
	"\x10\x91\xe10k]\x87\xe3\x03\x89\xc3\xb1\x0b\xf1w\xff" +
	"\xe8\x8e\xed\x17{\x88\x151\x1drv8,\x04r+" +
	">}i8AMj\xd3\xad+\x96\xc6\xcd\xa9\xfa\x07" +
	"\x93\x93\xfae\x00\xebef\xe0\x13\xc33tNz\xbc" +
	"r\xda\x99[\xcf;\xfe\xc9\\\xce\xfbG\x90t\x92|" +
	"l\x046\xea\xc8\x08\x9c\x87\xc7.~\xfcd\xd9\xbe\xe2" +
	"\x7f\xb2\xb6\x9e!\x8b2a\xe2\xd6g\xe2\x03k2\x91" +
	"\xbbwL\xdb\xf0\xd3\xfd7\xbe\xfaOF@~H|" +
	"\x16t\xa2W\x96\xce\x87Yz'\xbe\xfc\xd3\x81\xb2\xe9" +
	"3\xb6\x1ea\xcd\xf4\xd0\x91\xf0@\xfeH\xfc@\xeeH" +
	"\x1c\xa6\xefn\x1eU\xf1~\xd2'G\x98]\xe8\x99\x0d" +
	"-\x1a\x90\x8d\x0f\xf4\xcb\xc6\x07\xde\xda?H+\x1dl" +
	"\xff\x90%/\xfa\xe6\x90\xf9$93\x07\xe9\x87\xe7`" +
	"\x0f&\x7f2\xe4]y\xf2\x9d\x1f2\xbb\xbc2\x87\xbc" +
	"B\x92w\xea\x0f4\xe8\x0f\xe4\xbe\x19\xff\xf6\xbe\x0e3" +
	"?d\xe9\x86C\x12o\x83\xe5v\xf5m\xf8t\xaf\xdb" +
	"\x08X\x04?\x1f\x99[t\xe7\xd9\xad\x1f2\x86\xc8;" +
	"\x1a\x1a4{4\x92\xcf\x18\xad\x0f\xd1\xba\x99\xbd\xc7\xff" +
	"\xeb\xf2\xbc\x8f\x18\x1a\xf3\x90\xa5\xb9\xc0I\x9br\xf1\x81" +
	"\xf5\xb9\x04\x95f_\x8f[z=\xb9\xae\xf8#\x96H" +
	"\xca\xcd'SI\xf2\xe4|\xec\xc1\xa4|\xec\xc1\x0d\xd7" +
	"\x1f\x1c\xbaq\x9b\xf4\x11sLw\xe6\xc3\x98\xee\xd7\x1f" +
	"\xd8\x97\x8fl\xf1\xcb\xba\xaa\xf4n\xd7~\xfe\x11s\x8c" +
	"\x84\xb1\xb0>\x03c\xf1\x81\xca\xb1\xf8\xc0-\xc9\xfbN" +
	"\xac\x9aA\x8e\x9a\xc7\x08\x1f\xe80\x8e\xbcG\x92\xaf\x1e" +
	"\xa7\x8f\xd18\x02\xea\xc3\xef\xb5\x159W}\xe6;\xca" +
	"\x12a\xe7\x0a\xe0\x03\xb1\x0e})9t\xd6>0\xe1" +
	"\xf2Y\xdf\xd4.;\xcab\xbc\xfaBx`M\xa1>" +
	"\x85\x858\xaa\xff\xb5\x96?\xba~\xe6\x86\xa3\xa8\xcb\x18" +
	"\x02@\xef\xb2\x13D\xde~\xa7\xbe\xb8\x9d\x04\xb5\x9f\xb5" +
	"\xd7\xfd^\xd6\xf3\xe1\xddG\x19\xd6\xe7\x90\x83\xe3\xe1\x81" +
	"S\xe3\xf1\x81\x13\xe3\xf5\x16\xfd\xf5\xb6\xa5\xef\xdf\xf9\xf7" +
	"_\xf1\x81\xee&\xedjH\xed\x04\x10J\xf3&\xe0\x13" +
	"\xb3'\x10[g\x8e4\xfe\xd6~\xc0\x90\x89\x1b]\xc7" +
	"\x98\x0bz\xbd\x1b\x96\xe7N7>\xd1\xe0\xd6\xbf\xd1\xef" +
	"\xfd\xb87\xf9\xcf\x0e\x1ec\xad\x9e\xe1\xa5\xb0z\x1c\xa5" +
	"8\x0f\xf9\xa58\x0f6\xf9\x9d\x11_%]\xf61\x8b" +
	"\xfet)\xf0\xde%\x9d\xfe\xa2N\xff\xd9\x8e\x8f\x1f\x99" +
	"T\xb4\xe5c\xd6\xe2YT\x86\xcb\xbfL_\xfee\xc8" +
	"I\xaf<\xf1\xb6\x14\xff\xdcA\xa4\xefd\x9e\xb7Ke" +
	"\xd0\x83\xf8r}\xd2\xcb\xc9G\xa0aLNp\xf5\xcf" +
	"\xd8u\xc7'\xac\xc0\xc2\x10\x87\x97<I\x92%/>" +
	"!zq\xf54\xd6\x8f\xfe\xe1\\L\x8a\xf8\x09\xabM" +
	"\x9b\x14\x90\xc4\xbb\x15}/Q\xb0M\xd7\xbe\xa4\xfe\xdb" +
	"\x9d4\xe3\x13\x96\xe4N\xf4A\x1f\xae\xf6!}/\x1f" +
	"J\xee%\xddV\x05~\xfdr\xf1'\xac\xd5\xe3\xf0\xc1" +
	"r\x13uz\xc1\x87\xef?\xf8\xf4#\xf9\xae\xbb\x9fg" +
	"\xb6g\x0f\xbe\xff\x90N\x7fP\xa7?[19\xe6\x8a" +
	"\x8e{\x99\xf4\xfd*a\xce2+u\x81T\x89\xf4\x8f" +
	"T\x1c\xed\xd5\xeb\xe8\x8a\xe3\xcc\x9dde%\xb0v\x83" +
	"\xfe\xc0\xd6J\x94xw\xac\x1e4\xe6\xa1\xcd\xbf\x1dg" +
	"\xae\xcey*\xac\xff\x95*>\xb0\\\xc5Y~\xf9\xad" +
	"\xbb\xde\x9c\xe0L9\xc1T\x18\x06\xf8\xa1\x0b9~\xfc" +
	"\x91\xe9\xd7\x15\x865\xbb\xbf\x1erX]x\x82\xd5\x87" +
	"\x95\x1a\xec<\x0d\x9a\xde$\x0d\xc7t\xe6s\xd3\xf7M" +
	"\x7f\xdd\xf1)k\x0e\x0ei0g\xa7t\xfa\x13:}" +
	"\xee_\x86\xdeC\xb6\xaf\xfc\x94\xc5\xa7$\x00\x8b\xadk" +
	"@\xdf<\x03\xd8\x83\x0d\xd3\xd7\x96\xb6\x7f\x7f\x1d\x93\xbe" +
	"!\x00C\xb4O\xa7\xdf\x1b\x80!\xba\xb4\xb5\xcb\xfek" +
	"\x92:\x7f\x16\x99\xda\xa57gg\x15H\xec\xfdU\xba" +
	"\xbc\xab\xc2\xd7?\xb1&\xe7\xe7w\xfaV|\xc6j\xbe" +
	"X\x0dSV[\x8d\xf4\x81jl\xfe\xe6s3\x7f{" +
	"h\x97\xed$kx\xd6W\xc3\x04\xec\xd6\xe9w\xea\xf4" +
	"\xaf\xfdx\xf8\xaa\xef\xb5>L\xfa#\xd50<\xa7u" +
	"\xfaS\xd5\xc8\x129\x1b\x8e.\xbb0}\xd3I\xe6\x0c" +
	"\x0f\xaf\x01\xfdk|\x0d>\xe0\xa8\xc1\x07\x16\xec\xe8\x9e" +
	"\xd4\xf3\x1f\xdbN\xb2\"\x9aC\x1aj`\x86\xf7\xe1\x03" +
	"C\xf6\xd6\xe8\x9bN\xeec\x8f\xbf:u\xe1\xfb'Y" +
	"\xa1\xdb!Gja\x19\x9c\xa9\xd5\xf5\xf2Z\xfc\x84\xab" +
	"~\xc5\xdc\xd7\xef\xe8x\x8a\xc9\xa6\x93\xa6\xc2\x1cx\xa7" +
	"\xe2\x0fi\xaa\xfe\x89\x9d\xd9]\xae!/\xf5?\xd5\xc4" +
	"\xc94d\xf6}\xe42\x92\xbc\xf4> \x9f\xb0\xf0>" +
	"\x82vQ\x7f2{\xda}\xbf\xf6\xff\x82\x11o\x1b2" +
	"\xe3>\x18T\xfd\x81!\x8b\xee\xd3%\xf6/\x0d\xdf\xdc" +
	"\xb2\xfd\xbb/\xbf`\x8d\xea\xd2i0\xcb\x9b\xa6a\x0f" +
	"\xd6O\xc3\x1e|\x9a\xee~\x7f\xfc\xa4+O\xb3\xe8c" +
	"\x1f\x801\xea\xfe\x00\xd2w}\x00\xe9\xcf[\xde\x98\xd4" +
	"\xf0\xf6\xf1\xd3,AQ\xfb\x00\xdaF:\xfd<\x9d\xfe" +
	"\xdc\xee\xdfk\x8a\\\x7f\xfe7S\xf8>\x00\xfb\xc1\x05" +
	"\x9d\xfe\xdc\x03\xc8u\x97\xd4_&\xff\xba8\xeb\xdf," +
	"\xae\x9bW\x073\xb0\xb2N_\xc6u\xc8E\x1b\x17\xac" +
	"*\xee}\xcd\xb5_\xb2\xde\xbf\xbb\x0e\xda\x7fP\xa7\xdf" +
	"_\x87\xef\x9fv\xba\xf6\x90\xeb\xca\x1b\xbedd8\x0e" +
	"\x11\xa7\x83\xa96m:\xd2\xd7N\xc7\xf7\xaf:1." +
	"\xf9\xb9\xa7o\xfb\x92\xe5\xe8\x1b\xb2|:4h+>" +
	"0d\xd3t\x9c\xe1\xef{\x0e<'\xc7?\xf5\xa5\x89" +
	"\x1e?\xb0\x7f\x06\xec6\xa7f\xe8[\xe6\x0c\xdc\xf4\x1b" +
	"{w\xddv\xfc\xb5\xef\xbe\xfd\x92\xb5\x89\x1f|\x10\xc4" +
	"\xca\xa9\x07\xf5\x07\x1e\xd4Yh\x96\xf0M\xd6{\xdf\xdd" +
	"\xfa\x95\xde\xa40\x97\xe2\x03\x17g\x81\xb1\xd6a\xb6n" +
	"\xdc\xcdF\xd1\xf8\xf2#_\xfd4\xf8\xea\xa7\xbeb." +
	"\x9cc\xb3\xa1I\xe7\xf4\x07\xce\xce\xd6\x85u\xcd\xf7\xdb" +
	"\xaf\xea\xfa\xf2W\xcc>Oz\x88|L\x92\x03\x0f\xe9" +
	"\x86\xc2Cz\x93n.\xfa\xa4\xc7\xf1\xc9\xc7\xbfbn" +
	"\x99sp\xcb\x9c\xa3o\x99spT\xb3k\xfc\xb6\xaf" +
	"6\xf4?\xc3\x9a\xb5}s\xd0\xb0\xd0\xe9\x0f\xcd\xc1Y" +
	"\xebVX34~\xecj&\xbd4\x17\x96\xd9\xb4\xb9" +
	"\xfa\xac\xcdE\xfa?m\xaa\x99\xd1o\xd8\xeb_\xb3\xe8" +
	"\xbb\xce\x03.\xed;\x0f\xe9\xaf\x9e\x87\xf4;w\xbe}" +
	"|\xdf\xf9\xdf\xbffq\xf5\xfey\xd0\xfe\x13:\xfd\xb1" +
	"y8B_\xac\xfd\xed\xf0k\xcf\x16\x7f\xcb\x1c\xd2\xa1" +
	"\xf3a\xcb\xcf\x9d\xaf\xdb^\xf3\xf1\x81Y\xd3*\x0f\xc5" +
	"\xddw\xd7\xb7LY=\x1fd\xfb>\x9d~\xef|\x9c" +
	"\xb3\xeb\xa6x_>\xb8h\xcf\xb7,\xc5k\xf9\xc3\xc0" +
	"\x14[\x1f\xd6\xb9\xeea])zQ\xfb\xf1\xd0}}" +
	"\xa7\x9de\x9a\x14\xf5\xb0\xee\xf3\xebu\x93\xa2\x1e{\xec" +
	"}\xa6\xd3\x8c\xfb\x9f\xddz\x96\xd9\x83S\xf5\xc0\xd7\x17" +
	"\xf4\x07\xce\xe9\x0fTM\x9c9+}\xe5\xf3\xcc\x0f\xcc" +
	"{\x04\xa4\xef\x9aG\x90~\xe5#\xd8\x83U\xdf\xf7\xfc" +
	"\xe6\xfb\xcf\xce\x7f\xc7\xa2\xaf}\x14zP\xff\xa8.(" +
	"\x1eE\xfa1[\x1e\xd8\xb8\xf5\x9d\xca\xefY\x99AC" +
	"\xbc\x0ba\x8eg,\xd4\x8d\xf3\x85\xb8\x1f\x7f6\xe7o" +
	"\xc5c\xfb\x9d\xfe\x9e\xd5\x81#\x8b\xc0d9\xbb\x08?" +
	"pf\x11N\xc1\xf2/\xa6\xad]\x91d\xff\x81\xc5\xa3" +
	"\x93\x16\xc3\x08y\x17#\xbd\xb4\x18\xe9;\xbd\xbbf\xc0" +
	"\xdc5\xc3\x7f0\xa7\x0ac\x83\xf6/\x86\x06\x9dX\xac" +
	"\xaf\xa1\xc5\xbaW\xa7\xa7\xf6\xfe\xc8^5\xa3~`*" +
	"Q\x8f\x03S\x08\x8f\xe3\x17&?\xae\xdb\x8dB\xdfK" +
	"\x9f\xac\xba\xe3\x07\xa6\xecz\x1ce\x97N\xbf\xffq\x1c" +
	"\"\xa1\xe0\xef\xca\xcb\x7f\x7f\x98\xd9\x835O\x90\xed$" +
	"y\xf7\x13\xfa\x0e\xfb\x04\xae\xb2\xb2\xed3f\x9fJ\xff" +
	"\xe6\x07\x96,=\xf6\x04L\xd99\x9d\xfe\xacN\xff\xec" +
	"O\x93\x1e\x1d\xf3\xc3\xcas\xac\xf6\xc4/\x83\x0e\xf7Z" +
	"\x86\xf4=\x97a{\x8e\xc6\xbf\xf0\xa5\xe5o\x07\x90\xbe" +
	"\xb3\x89\xfe\xc22Xe\x1d\x96\xe3\xc7b\x97\x93Q\xb1" +
	"\x1ci\xec\xf3\xcc\xa3\x9f\xf6\xa8\xfc\xfc\x1c\xd3^y\x1a" +
	"$\xd7\xca\xa7\xf1\x81\xe5O\xebr\xe5\xa3\xce\xc5\x8f\xad" +
	"}\xe5\xe7sL\xb5w\x15|a\xcf*l\xd1\xeeU" +
	"8\xa2\xf5\x9d\xde?\xf5z\xdc\xc0\x1fY=\xee\xb5\x1a" +
	"f`\xc0j\xddN^\x8d=\xae\xbb\xe6\x85\xb7l\xd3" +
	"c~b\xae\x82\xfc\xd5\xb0.\x05\xfd\x81\xc9\xab\xf1\x03" +
	"}N7~\xf8\xcb\xd0\xab~bj\x8d\xfbW\xc3\x86" +
	"|b\xb5>\xc0\xab\xf5\x859\xec\x96\xa2\x8d\xc2\xc1n" +
	"\xe7Y\x86l\xedZ\x98\x84Ek\xf1\x81\xfa\xb5\xba!" +
	";=\xf9\x85\xdb\xff\x91\x9dz\x9e\xd9\xa6\x86g\xc9Z" +
	"\x92\xbc\xffY]Q{\x16Wf]\xed\x98\x9bn:" +
	"1\xed<\xd3U\xb6\x01\x06i\xde\x06\xddU\xb6\x01\xe9" +
	"\xaf{\"\xed\xef\xf5\x03\xdeb\x7f\xa0\xe7F\xe8\xc3\x80" +
	"\x8d\xfa(m\xc4\x07\xd4\xce\xd7\xaf\xfag\xb7\x89\x17\x98" +
	"\x0f\xec\xdb\x08\x8czL\x7f\xe0\xc8F\x1c\xa55\x1f," +
	"\x1e\xb9\xban\xe3\x05\x96\xd62`\x13\xaa\xd6\x9bt\xd5" +
	"z\x93\xae\xb5|3e\xb5\xfb)\x0b\xff\x1f\xe6\x17r" +
	"6\xc3<L\xda\x8c_\x18\xbf\x19\x9b4\xe8\x01\xe5\x9b" +
	"\xe9\xa7F\xb0\x1f\xb8\xb8\x19>\x11\xbf\x05\x1f\xe8\xb0\x05" +
	"\x9b4\xaev\xf8?v\xfd\xf2\x0d\xfb\x81\xda-0\xaa" +
	"\x8b\xf4\x07\xea\xf5\x07>:\xfe\xd4?\x16\xab5?3" +
	"\xfd\x03g\xb6\xc0\xc4\x91\xad\xf8\xc0\xa5-\xb8\x1a\xf6\x09" +
	"\xefmz\xb0\xc3\x0b?\xb3x\xf5\xc4Vh\xd19\x9d" +
	"\xfe\xecV\xfc@\xcc\xc4;;>t\xc7\xcb?\xb3y" +
	"\xefy\xd8\x96\xc5\xe7u\x9b\xeby\xec\xf3\x8b\xdf\xf7\x19" +
	"{g\xe5g?3\x95\xcdK\xcf\x93\xf7Hr\xf7\x17" +
	"\xf0G\xd7\x17\x82N\x94OV\\\xfc4\xf0\xc0/\xcc" +
	">\x0c\xdd\x06m\xca\xdf\xa6\xef\x0a\xdb\xb0\x0f\x13\xdf\xe7" +
	"\x9f\xe8\xfc\xe1\x8a_\x98~\xa3\x06\xe8sf\x83n\xa6" +
	"5\xe0\xfa\xb9p\xcf\xe3\xbd\x0f\xee;\xce\xa4\x17\x1a`" +
	"\xda\x02:}e\x03\xf6\xf9\xcd5\xd7z2Vt\xbe" +
	"\xc8b\xd5cH\x7fV\xa7?\xd3\x80\xed\x91:5$" +
	"=46\xe7\"\xeb\xb8\xc6\x90=\xdbAb\x1c\xdc\xae" +
	"\xaf\xbd\xed\x04\x8f\x10<v\xe5\x8d'\x9f\x14\x13~\x05" +
	"\xfd\xfa\xca\x08\xfd\xba~'\xac\xff\x95;Q\xbf^\xb6" +
	"S\xd7\xaf\x8f\xddp\xed\x9c\xd1\x1f\x0c\xfe\x95m6\xee" +
	"\x841]\xbfS\xd7\\v\xe2$$\xbes\xed\x96\x05" +
	"S\xf2\x7fe\xf5 \xf3%\x90\x91\xe3_\xd2\x8d\x90\x97" +
	"\x90\xfe\xf6\xc3\xc7w\xbf|\xcd\x1d\xbf\xb2F\xe8\xccK" +
	"0\x03\x97t\xfa\x8b/\xe1\x88\x0a\x9f\xde\xfb\xf9\xb0\x89" +
	"\xd3\xd9\x0d\xea\xf92\x0c\xd1\x80\x97\xf5\xc5\xf92~ " +
	"P7\xb0\xa7m\xed\xce_Y\xc9\x95C\x0e\xbe\x0c\xab" +
	"\xf9\xd4\xcb\xba\xfe\xf8\xb2\xaepn\x9b\x9by\xe9\x9f}" +
	"\xdb\xfd\x97%$w\xef\x86\x9d\xff\xe0n}\xdb\xd9\x8d" +
	"Mj\xd8}t\xa6g\xe3\xe5L\xfa3\xbb\xe1\x03\x97" +
	"t\xfa\x8b:\xfdg7\xb4\xbb\xfb?\xdeI\xffew" +
	"\xe1\x15`\xec\xc1\xaf\xe0\x03\x03^\xc1.\xfcl[R" +
	"\x9f\xed\xc9\xfe\x8d\xc9\xd8\x07_\x81A:\xa5?p\xe2" +
	"\x15d\x8b\x0b_|\xf8\xc3_\xa7T\xfd\xc6jQ\xc3" +
	"\xab\xa8M\xbd\xaakS\xafb\x8b\xfe\xf5\xb8%o\xd1" +
	"\xda\x89\x97X\x93v\xeaU\xe8\xc1\x05\x9d\xfe\xdc\xab\xd8" +
	"\xa0\x0f\xf9\x84\xea~W\xcd\xfd\x1d\x8c\x04\x8b\xd9V\xae" +
	"\x7f\x0d\x1a\xb4\xe65]\xd9y\x0d\x1b\xb4\xf1\xab\x8d\xb1" +
	"\xc9\x97?\xf6;S\x04\xef\x01\xddb\xde\x1e]\x04\xef" +
	"\xc1\x0f\xb4_\xb3j\xceN\xcfo\x8dL\xbe\xee\xf9:" +
	"hG\x03^\xd7\xa3\x15\xaf\x03_\x8fl\x94dMT" +
	"e\xc1\x13s\xa3\xe0\x93nt\x09>\xd9w\xa3K\xf1" +
	"z\x15\xf9\x06\xfc\x91\x9eS\xe3\x1b\xefs\x0b\x1a\x11\x0b" +
	"\x08q\xb4\xb7\xc6p\\\x0c\xe1\xb8\xc4\xbe\xbd9\xce\xd1" +
	"\xc7J\x1c\xfd-$\x91\x10;\x01\xb0_*\xc79\xae" +
	"\xb3\x12\xc7 \x0b\x89\x13k|$\x86\xb3\x90\x18\x8e\xd8" +
	"\x04\xc1\xf8\x11\xfef\xbb\xe6\xbe\x99]+\x0b^\xc9U" +
	"\xac\xc8\xe2\xc8rE\xf1\x8b\xf0\xafB\xd1g\xf5\xd4B" +
	"#:\x87\x1b\x91\x93\xc7q\x8el+q\x14P\x8d\xc8" +
	"\x9f\xc2q\x8e1V\xe2\x98h!\x89\x16\x8b\x9dX8" +
	".q|:\xc79\x0a\xac\xc4q\x97\x854\xba\xa7\xc2" +
	"\x0bs\xdd\x1c\xc7\x85\x1b\xe5\x9e\x9a+\xfb5A\xe6l" +
	".1\xd7\x1d\x823\xdcS\x8bj}b\x93\xa67;" +
	"\\E\x92\xe6\x11\xc7H~\xa2\x99\x86+\xcd\x18\xae\xf0" +
	"h\xa5\x07G+\xdbBR\\J@\xd6\xc2\x9f\xd5\xe0" +
	"5~\xd2\x85#\x05VB\x12\x8c\x93\x18\x1c\x010\xdc" +
	"\x8e\xd8\xe6\xda\x91\x1f\xf0hR\xbeR%\xe6j\xa2\xd7" +
	"\x19(\xe1\xb8\xe6G.<p*=p\x841p\xa5" +
	"\xaa\xe2uz\x14\x0d\x06.\xc1\xb0\x9e8B\x128\xd2" +
	"(\x07\xbc%\xa2\x9a+s)NMpU\x18\x9dQ" +
	"\xe0\x19\xc6\x03\xad\x8efv@\xf4\x14\x8a~\x9fM\x91" +
	"\xfdf\xfe\xcb3X-<\xf5\x03\x00\xeco%\x8ea" +
	"\x16\xd2\xa8\x09j\x99\xa8E\xce\xb2(k\x92V\x1b\x89" +
	"\xb5\xda\x8a\\\xd9\xef\x13]\x1a\xf7\xbf\xd1\x00\x9fG\xa8" +
	"\x15\xd566 K\x90\xdd\x8aG\x12\x89jjB*" +
	"k\x0d\xa6\x19\\e\x93\x05\xafH:s\x16\xd2\x99#" +
	")\x92&z)\x9e\x0a\x07\x1e\xa2\xe5\xa9Q\x01\xc9\xe3" +
	"\xce\x17a\x92sdM\xad\xd5y\xaa\x7f\xa89|&" +
	"I\xe58\xe70b%\xce\xd1$\xccV|\x0eI\xe3" +
	"8\xe7\x08\x80\xc7\x10\x83\xb3\xf8\\\x92\xceq\xcel\xc0" +
	"\x0b\x00\xb7Z\xec\xc4\xcaq|>)\xe48\xe7\x18\xc0" +
	"'\x02\x1ec\xb5\x93\x18\x8e\xe3\xc7\xe3\xeb\x0b\x00\xbf\x0b" +
	"\xf0\xd8\x18;\x89\xe58~\x12)\xe68\xe7D\xc0\xdd" +
	"\x80\xb7\x8b\xb5\x93v\x1c\xc7\x0bD\xe58\xe7\xbd\x80{" +
	"\x00\x8fkg'\x98\xc8K\xa6p\x9c\xb3\x1cp\x0d\xf0" +
	"\xf6qv\xd2\x9e\xe3\xf8JR\xc2qN\x1f\xe0\xf7\x03" +
	"\xde\x81\xd8I\x07\x8e\xe3k\xf1\xfd5\x80\xcf\x02\xbcc" +
	"{;\xe9\xc8q\xfc\x0c|\xcft\xc0\x17\x00\xde\xa9\x83" +
	"\x9dt\xe28~\x1e\xf6k\x16\xe0\x0b\x89y\x0e<b" +
	"\x95\xe8\x09\xaf\x8c\x12A\xae\x10\xd50#\xb8\xca\x05u" +
	"\xa4G\xf0s\xc4\x1f\x96\x9c\xaa \x87WR\xa3&y" +
	"\xc51\x82_\xe3\xac\xe3d\x03T\xa5\x92\x80&\xe6p" +
	")\xb2P\xe21d\x95\xa6h\x82\xa7H\x958\x1b\xfc" +
	"9\x0c{\x04\xbfV\xa4J%\\\x1c\x8d\xfa\x02%\x1e" +
	"\xc95V\xe1\xacZ\xb8\xb1\x8dS\x15Y\x94d\xbf\xc6" +
	"\xd9\x04\xd9\x15\xa6\xcd\x98\x8a\xc23z\xf6\x1d\x95\xaf)" +
	"ee\x1eQ\xe7\x97\x980\xfb\xc6\x83hio%\x0e" +
	"\xbb\x05\x84\x04\x90D\xbfG\xe4\xd4\xf8D\xb7\xa4I\x8a" +
	"<FqU(\x01\xadH\xf2\x02_\xc6i*n\x12" +
	"\x09\xe1\xcf\x08S9\xceq\xaf\x958<\x86\xa8\x93\xe6" +
	"s\x9c\xc3c%\x8e\x1aJ\xd4\x05\x0a9\xce\xa1Y\x89" +
	"c:p#AnL\x9c\x06\xe0\xfdV\xe2\x98k!" +
	"\x8db\xf0\xa3\\\x86\"\x8f\xa5\xa6\xb5\xd1/\xba\x14\xd9" +
	"\xed/$\xa2W\x90dI.\xa3eN\x95(kE" +
	"\xb5>\x8e\x88\x91\xd8X\xc1\x0bX\xe8\x1d\xad\x8b\x01E" +
	"\xa9(\x14+\x03q\xa2_3Is\x18\xc9\x11V\xe2" +
	"\x18C\x09\x82\xdcTJ\xc4\x07\xb7\xc1\xfc,\x8es\x8c" +
	"\xb6\x12G\x91\x85dTK\xb2[\xa9\x0es\x9aFm" +
	"tuZ\x8dV*y\xda\xd0\xb8Q\xf99^E\x13" +
	"\x8b\xe3\x14Y4Ms\xaa1\xcd6M\xac\xd1\x9a\xbc" +
	"4*E@\xf1\xfa\x04\xbf_\x17<\xf0\x81\x1e\xe1\x0f" +
	"\xec\x04\xa1\xbb\xc3J\x1coP\xbd\xdf\x03Z\xc0kV" +
	"\xe2x\x97\xd2\x02\xf6\xc18\xbda%\x8e\x030\xc3V" +
	"}\x86\xf7\x17s\x9c\xe3]+q\x1c\x06a\x13\x83\xc2" +
	"&\xf1P\x12\xc79\x0eX\x89\xe3(H\x9aX\x944" +
	"\x89G\x00\xfc\xc0J\x1c\xc7A\xcc\xb4C1\x93x\x0c" +
	"\xc0\xc3V\xe28\xf9?\xd2,\xdcS\x9d\xd5\x92\xe6*" +
	"\xe7\xac\x06\x0d\xa9%\x1d9\x0b\xe9\xc8\x11R\x13\xfe\xd7" +
	"\xd4\xd0\xbf\xa2PFT\xc1-\xaaY\x01Rk\x1a0" +
	"\x18\x86mV\xe2x\x8d\x1a\xb0\xddi\xd4(\x86\x06l" +
	"O\x9e1\x8a$8^\xfb\x00{\xdbJ\x1c\x1f\x18\xc2" +
	"9\xf1`:5\x88A\xc9\x9cx\xa8\x84\x1e\xaf\xd8\xe0" +
	"x\xc1\xe3G\xad\xc4\xf1\x85\x85d\x08.X\xc1\xa1\xfe" +
	"\xa6\xf8T\xc9E\x090l\xbei\xaf\xd4D/\xac<" +
	"\xc0\x82l\x94\x01\x18%\x8f\x04\x8f*\x0a\xeeZ'\x17" +
	"\xa7x\x0c\xb42 \xe0\xde\xdf\xa6\x8d\x17\x14\xa8lE" +
	"Q9\xf3\xde\x9f\xce\xdax\xd3\x0d\x85 \xc3\xad(\xaa" +
	"dLvd?\xc3\x1f\xb66\xf7\xe1\x8cQ\xf9\xd0K" +
	"\x93 \x83\xc5{\x97\x958\xca\xa9\xaf\x8a\xe9\x86t\x0b" +
	"O\x9b\x04\x94n+q\xf8\x8ci\xf3\x02Vn%\x0e" +
	"\xcdB\xea\x14\x8f\x9b\xde\x962\xca\xbc\xf4\xcf:Y\xac" +
	"\x8e\xf8]\"\xe8\xe4\xd1\xb7\xdf\xe9\x13\xaae\x7f3\xf2" +
	"\xbe\x8f\x85d\xf8\x91\xc0\xd0F\xc2\x11~\x936\xd2\xec" +
	"'\xe2\xc6\xdc6*\x0a\x1d\x9b\xb2HR\xaa\x04O " +
	"\xdc\x89\x88}\xb9u\xe5g\x8c\x08\xcc\xe8/\x97|\xba" +
	"E\x14'h\xe6\xe9y\xd2\x18\xf4D\x10\xb8\x00z\xb7" +
	"s\x9c\xc3g%\x8e\xfb\xa9\xe9\xa9]l\xec)a1" +
	"4\xfb9\x8es\xcc\xb5\x12\xc7\x12\x0bi,S\x95\x80" +
	"o\x8c(\x90\xd07\xad5>\xd2\x89\xb3\x90N\\\xd3" +
	"?\x16\xa4(\x92\xac\x85U\x86FU\x90\xdc\xd0\\\x12" +
	"j/1\x9e5\xfd\xad@\xb1E<\xda\xea08\x85" +
	"\xda1\x92\\\x91\xa5\xb8koSq\x1d\xc2 \\\x1f" +
	"\xd6\x01\xaf&y\x1c\xe7\xec\x03\xcaO\x7fb\xb0)\xdf" +
	"\x0f\x95\xa2\xeb\x00\x1fD\x8c\xa1\xe0\x07 }\x7f\xc0\x87" +
	"\x11c4\xf8\xa1\x88\xdf\x0cx61\xe42\x9f\x89\xb8" +
	"\xa1L\x06E3\x9f\x8b\xf8h\xc0\x8b\x88!\x9dy\x07" +
	"\xe2\x86\xd2\x18\x17\xa7+\x81f\xa5\xb1}{]\x09\x14" +
	"P\x094\x94\xc6\x0e\x1dt%PB\xdcP\x1a;v" +
	"\xd4\x95\xc0JTJ=\x80\xd7\x10\x0bi\xd4\x17\xba." +
	"\xb3L\xf2)\xc4jB\xa0\xcc+\xca\xda\x00\x8a$\x84" +
	"\xa51\xb0\x81\x0cl\x10\x03\x1bLc\x92?\xa7J\xf1" +
	"TI\x9cU.\x0b\x83\"@\xe2(\x95\x8bS\x02>" +
	"\x13:F\xe4\xe2@3\x0d\xa2\xb6r\xc1_\x1e\xfd\xe6" +
	"\xef\x94\xbc>\x8f\x98/\xa6\xf8\xfdBYT\x86\x1a," +
	"\xd5\xeb\xad\xc4q\xb3\x854\xfa5U\x92\xcb\"\xe4|" +
	"\x8aK\xf1(j\x8b\xf2\x06\xb4\xd0\xe0\xe7\xc7\x8a)\xd5" +
	"\xc5A\xbd\xc3\x17fEb\xcd\xe3\xb8B\xab\x958;" +
	"[)N\xec`\x05\xf3\xa2=\xe0v+\xc5\x89\x89@" +
	"\xeeL\x00\xbc\x875,6\xf9\xeeV\xb0^\xec\x00_" +
	"i\xa5\xac\x91\x9eV`\xe8n\x80\x0f\xb2R\xd6\xc8\x00" +
	"|M\x7f\xc0\xc7X)k$\xd7\x9a\x05\xd6\x0e\xe0\xf7" +
	"Z)kd\xb2\x15\x18\xf1.\xc0k\xac\x945\x12@" +
	"\\\x03|\xa1\x95\xb2F\xea\xf1=s\x01_\x02xG" +
	"\x8b\xce\x88\x8b\xf0\xbb\x0b\x01_\x01x\xa7\xf6\xba5\xb2" +
	"\x1c\xdf\xb3\x0c\xf0\x1d\x80w\xee`'\x9d9\x8eo\xb0" +
	"\x82\xf5\xb2\x0d\xf0\x03\x80\xc7w\xb4\x93x\x8e\xe3\xf7#" +
	"\xfd\xbb\x80\x7f\x01x\x97Nv\xd2\x85\xe3\xf8SH\x7f" +
	"\x12\xf0\xdf\x00\xb7Y\xed\xc4\xc6q\xfcEko\x8es" +
	"\x9e\xb7ZIa\x8c\x85$&\xc4\xd8I\x02\xc7\xf1\x97" +
	"\xac\x8b9\xae0\x06\x06\x1f\xe0\xc4X;I\x84\xc1\x8f" +
	"\x81\xd1\x8c\x01<\x01\xf0\xa4vv\x92\xc4q|<\xe2" +
	"\xed\x01\xb7\x03\xce\xc7\xd9\x09\x0f\x93\x82xg\xc0\xbb\x01" +
	"noo'v\x8e\xe3\xbb\xc6\xc0\xb2K\x00\xbc\x07\xe0" +
	"];\xd8IW\x98\xad\x18h}7\xc0\xfb\x00\xfe\xa7" +
	"\x8ev\xf2'\x8e\xe3{\xc5\xc0\xa8\xf5\x00\xfc:\xc0\x93" +
	";\xd9I2\x88+\xc4\xaf\x04\xfcz\xc0\xbbu\xb6\x93" +
	"n\x1c\xc7\xf7\x8d\x99\x0a\xe2\x0a\xf0A\x80w\xefl'" +
	"\xddavc`\x14\xfa\x03>\x0c\xf0\xcb\xe2\xed\xe42" +
	"\x10W\x88\xdf\x0cx6\xe0\x97\xc7\xdb\xc9\xe5 \xae\xb0" +
	"=#\x00\xbf+\xc6\xa2[x&\xf5\xa5\xd1_\xae\xa8" +
	"f[\xc0\xa3\xc8e&\xba\x94\xa9\xb4\x82\x9eQ\xaa\x94" +
	"\x15\x8a\xee\xd0\xfe\x09(\xec\x9a\xa5J\xd9(U\x14e" +
	"x.\xf2Ou\xa5JY\x16l\x7fM\x9f\xc8\x97d" +
	"\x97\x87\xb3J\xbe\xd0\xdf:R\x7f\x13j\x98\x7f\xab+" +
	"S\x85*I\x0b+\xa8h\x9a\x82BK\xebW\xaa " +
	"\xc9#\xcb\x05\x99\xb3\xba\x9a|\x17\xfe\x96\x1dP\x05\xce" +
	"\x86\x9a\x91\xe9\xaf~Y\xa9n\xeeI\xf8[\xb3O\xc6" +
	"\xf9+j\xc3\xdf\x07\x11\x91S\xe3\xcb'\x01\x8f&\xf9" +
	"\xd0\x81\x12jo\x8a_(\x15'E\xfc\x9a\x18\xf1\xab" +
	"8\xf4\xcb\xe6\x15j\xc2?\x1a\x03\xb2[T\xab\x15\x95" +
	"\xb3z\xdc!\xb0\xce\x0b\x03(\xf9\x8c\xdf0h\xc6o" +
	"l\x87\xb3\\Q\xb9\x0c\x98g1-\xc2\xc0\xceu\x8f" +
	"\x0dp6o\x09\xe5\x07@\xb8\x89\xdd\x8dp\x81\"\xc9" +
	"\x9cU\xa3\x14\xa7\xf0I\x92h\xdd8cnCG\x8e" +
	"S\x14TW\xf9\xa8\x80d\xf5\xb8Ap\xda\xc3\x12{" +
	"\x1ah\x8a5V\xe2\x98EI\xec\x19i\x94\xce\x12R" +
	"df\x83l\x9fe%\x8e\x85\x94\"S\x0f\xe0\x02+" +
	"q,\xa3\xec\xa9\xa5`F/\xb1\x12\xc7j\x0b\xa9\x83" +
	"\xe6\x08rX;\x8et\x8a4\x0aB\x01\xea34'" +
	"\x01w\x81\x84\xa71\x86\xb7\xa4\xf5\xceg\x09S\x05A" +
	"\x9d\x80\x96\xafS\x13T\xddO\xdb\x8cO\xa2\x19\xad\xbd" +
	"\x05\xe7\xafW\x1cW\x9a-\xe8\xf6\x165\xa0\xa9\xac\x01" +
	"Mg\x0dho\x8esL\xb7\x12\xc7\x02j@\xe7\xa5" +
	"Q\xa3\x1c\x1a\xd0\xfaTC]\xb4\x95+\x810\xf7d" +
	"x%\x99\xf2\xec\xc4\xb9\x85\xf0\x82H\xf1*\xb2V\x1e" +
	"V\x80kEAm\x83\x17\x07\x98\xc6\xa5xm0u" +
	"&\xcd\xb7\x90\xb2A\xc2.\x96t\xca\x06\x09v\xcf[" +
	"H\xb9]B\x1e\x96@\x96\xa1\"7*Z94\x83" +
	"\x16\x86\x19\xde\xda\x08U\xbd\x0c\x1a\"VJ\x1c\x09s" +
	"P\x9dRZ*\xb9\xc46\xf4\xa6@\xd4\xd0y\xa4\xeb" +
	"\xaf7\x87\x95\x86Zt>\x1a\xce\xbe\x90\xd60\x83\xc0" +
	"Fq?\xe0sI\xb8C\xfcl$\x0f\xfb\xfaB}" +
	"\xe2\xebQ\xdd\x9d\x0b\xf8\x12T_-\xba\xd6\xb0\x08\xd5" +
	"\xc5\x05\x80/C\xf5\xd5\xa2k\x0dKQM]\x02\xf8" +
	"jT_\xad\xba\xd6\xb0\x12\xdf\xbf\x02\xf0\x8d\xa8\xbe\xc6" +
	"\xe8Z\xc3z\xc4\xd7\x01\xbe\x0d\xd5\xd7X]k\xd8\x8a" +
	"\xef\xd9\x02\xf8.T_\xdb\xe9Z\xc3N\xa4\xdf\x01\xf8" +
	"\x1b\xa8\xbe\xc6\xe9Z\xc3\x1e\xec\xd6.\xc0\xdf&\x94\xd6" +
	"\xb0\x17\xdf\xf3\x06\xe0\x07\x00\xefl\xd5\xb5\x86\xfd\xe8\xf3" +
	"|\x17\xf0\xc3\x80\xc7\xc7\xe8Z\xc3!\xec\xef\x01\xc0\x8f" +
	"\x82\x1a\xec\x135\x8c\x06p$<'u\x01\xb5L\x94" +
	"]\x86t\x16\\\x18\xf3\xc0y\x0cM\xb5G\xf0ke" +
	"\xde\xb0\x16\x0a\x12/b\xbd\xcb\xa6\xbd\x130\x90\x1e\x1c" +
	"\xf1D\xd0\xb9Lr\x010Up\x99\xe4\x87\x88\x8eC" +
	"\x8a\xae. \x0bU\x82d\xbc\xcb/\xca\x1a\xc8\x9e\x08" +
	"\x17~\x88u\"\x9cY\x19e^\xa6o\xabY\xfb\xd5" +
	"\xe6\xd4\x02\xb2I\xf8\x80\xe4\xecl%\x8en\x16\xd2\xe8" +
	"\x0e\xa8\x82\xce\xa1mpX\x8c\x02\xd30O\x91\x88\xdc" +
	"\xbc\x830\xec\x1f\xcc3|\x81a\x1f\xa8\xa3\xd8\x08\xf7" +
	"\x98\xe5_\xad\x12h2\x01^\x0c\x07\xc8\x02g\xf5\xb6" +
	"\xc1YX\xa4\x0a\xae\x8a\"A\x8d+\x13\xb5\x16\x86@" +
	"\x8f\xd6Hm\x0b\x96d\x8b\x1eQ\x13\x9d\xbe8\xd1\xe3" +
	"1Y\"\x85,K$\x8b\xb6D|\xa2\xc7\xe3\xf4(" +
	"\x1c\x09\x87\xe2\xea\xfc\x01\x97K\xf4\xfb\xdb6\x07\xb2\xdb" +
	"\xe9\x8b\x13\xaaq\x16\xae\x0b\x0b\x97\x0e\xb8\xfac`\x95" +
	"$\xd0\xc2%\x1e\xf1\xf6\x80\xdbi\xe38\x11\xf1\xce\x80" +
	"w\xa3\x8d\xe3\xae\x88'\x00\xde\x836\x8e\xbb#n\x07" +
	"\xfcJ\xda8\xee\x89\xab\xbc\x1b\xe0}@x\x05m\xe3" +
	"^H\xde\x03\xe0\xeb\xe8\x00\xc9\xd5\x88_\x09\xf8\xf5t" +
	"\x80\xa4/\xda\xcc\x86\x0d\xdf\xa1\xbd.\\\x06\xa0P\x08" +
	"\xdb\xf0\xa00M\xa4\xb5\xa7I\xc6\x0fI\x9eH\xff\x98" +
	"\xc4T\xb2\xea\xcaE\xc1-\xc9e\xe1?\xd2\xe2\xdf\x06" +
	"\xd6tx2\xbcBM\xa6\xc7\xa3TsV\xd1p\xf5" +
	"\xa9\":\x974\xce&y\xdb\xb2'\x8c\xb9mT\xa6" +
	"\xcf'\x0a)*\xa8]&\xde\xc9by\xfcz\x1b\x0c" +
	"U\x87\xdf4\xdc\x90q\x9e\xd2\xb26h\x0e\xb0 0" +
	"l\x10\x85K+\xab\xb9\xb0q\x9d(k\xaaD\xc7\x8d" +
	"\xc3EL\xa3U\x0eA\x85\xf7\x88~\x7f\xae\\%\xca" +
	"\x9a\xa2\xa6\xd4:=\x8a\x16M\xd81\xcfXG6\xbf" +
	"G\xd1\x0c\x19\x1a(\xc9\x95\xddbM\x9bV\xb13(" +
	"j\xda\xfa\xe5\x08M\x01v\x13\xb3\xc0j\x9bz\\\xe0" +
	"\x11\xe2jE\x0c\xbbv\x0b\xb7by\x96\xa1\xcb\x86[" +
	"\xb1\x12\x84\xcb\x0a+ql\xa4\xd4\xb9\xf5@\xb9\xdaJ" +
	"\x1c[(un\x13\xcc\xe9:+ql\xa3\xd4\xb9\xad" +
	"\xd0\x89-V\xe2\xd8E\xc5\x1bvf\x19~z\xb3\xd2" +
	"\x8c\xb1\xf81\x91[_\x9d\xa6\x8c\xa1U\xe9\x14\xaf$" +
	"g\x0a-)\xd1u\xb0Q\xfa\xc5\x96\xa5\x1b\xe5i\x81" +
	"\xc7\x9d\xa2\xdf/)\xfa\x0e\xd3\x9aK\xbc\xd8\x98\x9a\xa6" +
	"aC\xbf\x06\xeb\x8c\x0ex0?_\xad\xa8\x1ew\xf0" +
	"\xfby\x13\x8a\x0aE\xbfO\x91\xad~\xb1\x05\xc5\xdd\xaf" +
	"\x09Z\xa0-^MQs\x8aj\x95\xa8\xde&y4" +
	"Q5\xc7)\xb3\x0c\xbfu])R\xf8\xcdFiT" +
	"\xa1\x84\\M\xf4\xb6\x94\x88a\xa4\xb0\xa4\xd3[s\x90" +
	"\x99\x1cj3\x99\x18\xa6<\x8bP\xaf\x9bI\xc7\x88B" +
	"7\xc6\x1c\x85\xcc\xccf\xe3\xb5}@7\x10\xc6H~" +
	"\xcd\x904\xe1R\x09\xd1\xfa\xefSP\xe6\xb55\xa7\x82" +
	"\xa5\x12\xb8\xa5 'q\\\x93\xd8X\xf3\x9f\xcfTU" +
	"\xa5\xba\xc5\x04\x86D#\x83!52\x83\xc1\x12\xca`" +
	"H\x8d\xcc`\xb0\x862\x18R#\x9c\xd1\xa1\xfd\xd9\xec" +
	"\x8c\x0e\xed\xcf\x93\xd0\xb9Le0\xb4\x0be0\xc0{" +
	"\xee\x02\xbc\x9cv^\x8b\xa4w\x84\x93:\xe4\xbc\x96\xf0" +
	"\xfd\x86\x93:\xe4\xbc\xaeD\xdc\xc8l\x089\xafkQ" +
	"k\xd7\x00\x9f\x0ezA']\xf9\x9f\x86\xc6B\xd8\xd6" +
	"\x89\x08\x0c\xdb\xfc\xaa\xcb\xd8\xb5\xfd\xaak\"\xfd\xc3\xf0" +
	"\x93T\x89\x1e\xc5\x15\x0c\xb7\x850\x8f\x10\x90]\xe5\x99" +
	"2\x17W\xe6\x11\xc3\x8fi\x92G\x0b\xfd\x88\x13TW" +
	"\x98\xdc\xaf\x04T\x97)\x96\xcaH\xa91\x87\xff\xbc\x8a" +
	"[\xf4\xb45\xb4\x9e\x0b\x04j\xc0\x97\xa2\x8d\x14\x9a\x04" +
	"\xd7\xb3X\xc1\xf5Bc\x85\x86\xac[G\x96\x91?\xa5" +
	"\xab\x03\x12\xd5,\x11}\xe3\x11Vk\x10\x8b~o*" +
	"\x0cFo\xf4\xe0\xcdx\x9f\xcd\x1d\x8cBQ\xbe\x86t" +
	"\xc3\xd7\x10v5\x14S^\x85\x90\xa6?\xaf\xd8p " +
	"\x84ro\x12\x17\xa5\xd1\xbe\x9b`lw)\xec\xba\x0b" +
	"\xad\xc4\xb1\xa2\xa9M\xa0\xe73\x8d\x8d\xd4\xff=\xd8\xc4" +
	"H0\x05\xa3V$\xc1H\\\xd7\x93\xc0l\xaa \xb9" +
	"I\x82Q\xca\xc8\x94\x1b\x16M6\x12\x95\xa0\xc8\x8e\x96" +
	"\x86\x83\xa5\xc5T\x88.4\x10\xdet#0\x1a\x1e\x88" +
	"\xcab\xc3)Q\x87\x1e\x07\x9a\xc5\xf0\xab\x91\xfd\xfb\xc3" +
	"\xdb[\xe4.!T\x88\x05\xa2\x9ej\xd6'\xdc\x95\xb3" +
	"0+_Y\x89\xe3<\xc5\x81\xe7\x80\x03\x7f\xb0\x12\xc7" +
	"o\xd4\x1eq\x11\xa6\xea\xbc\x95\x14R\xe2(\xf1\x12\x8c" +
	"\xc4/V\xe2\x8c\xa1\x85\x11\x01\xa3\xc0\xf1\x9b\x958\xdb" +
	"\xd3\xb2(\x16dN!\xac\xfd\xce\xb4(2\x9b.!" +
	"Q\x14\x8f\"\xc40]B\xa2(\x11\xf1\xb0\xe9br" +
	"\xf1\xb1\x13\x9d\\T\xfa\x89X\xa3\x05T\xe3\xb7O\xd4" +
	"\"\xa5\x904\x95\x92 \xb4_\xdc+\xc9\xd9\xde2\xe3" +
	"\xa7PC\xfdl\x9d\xab2\xdd\xa0\xf7\x06T\xf16I" +
	"\x96\xfc\xe5\\4V\x00\x15\xf7\xaf\xab\x96\xe41\x8a\xdf" +
	"h\x8eOi[|5_T]\xe5\x82\xace\x8b\x1e" +
	"\xd4\x16L\xa2(\x8d%\x8a\xf2X\xcaB\x9e\xa1,\xa4" +
	"\xc8>\x17%\x89\xf4%+5I\xab\xf0G\xaa\x13Q" +
	"\xe8\xe8\xa2\x86\xe9\xae\\T\x99\x91\xb4\x9d-\xf9\x9d\x81" +
	"\xd2R\x896\x09\xea0\xe5\xb5-kEw\xe5:E" +
	"\x1b*\xea\xa6\x8d\xbc\x90\xde\xb0C\xfb\xb89H\x1c\xca" +
	"Dt \xb9\xb1/\x872\x11'!\xd3\x17\x01~/" +
	"\x9d\x898\x19qc\xbf\x0e\xc5\xfe\xcc\xfbu(\xf6'" +
	"\"Ne\"\x92P&\"\xe0n\xc0}\xb8x\xda\xe9" +
	"\x8b\xc7\x8b\xed\x0c\x07\x95\x13;\xc4\xe9\xfbx\x00\xf1\xf0" +
	"~\x1d\xceD\x9c\x86xx\xc3\x0eg\"\xceF<\xec" +
	"\x9dl,\x11\xcb$Y\x96d\x8e\x94\x91\x04\xe3\xfa\x98" +
	"\xa0\xc4\xd5\xd3m\"\xf9\xa2\xb5\x85j\x03M\xdb\xf8A" +
	"\xa9\x9f\x91ZC\x84Y\xe6\x95dL\xf4\xa1?\xe4\x15" +
	"j\x9ab\x92\x8cb\xc3D\xd7\x04k\x95SFz$" +
	"W\xc5\xb8\x92)\x19\xa2K\xcb\xd4uN\xca\x9a\x03n" +
	"]f%\x8eu\x14\xb7\xaeIgYs\xa9,k." +
	"\x95e\xcd\x01\xb8\xd1J\x1c;,\x84\x04\x8d\xb9\x86b" +
	"\xc3\x98c\xa5\x01g\xb8U\xc5g\xf0\xbfM\xf1\x892" +
	"{0%\x17\xb5\x01+%SD\x976\xb6\x8d\x0e8" +
	"}\xf3\x1cWD\xb2M\x02&\xb5\x15]\xc7\x100\xa9" +
	"\x86\xb2\x139\xbd~Q+\xa9\x8dT\xc0l^Es" +
	"\xb7!\xd1\x11Wv\xae\x9c\x82y\xd7\xcd\xdb\x99\xac$" +
	"\x1f\x93:\xc8\xce\xf2icV\xa9?*\x9b-\x8d\xa1" +
	"\x11\xa6\x07\x07\xa9\xdcB\x1a]\x1eI\x945s\x9aC" +
	"d\xd6\xbf\x972-\x13\x8c\x1b\xc6L6U\xb3\x03\xa7" +
	"\x9b\xe7jU\x06\xd8}\xa5\x8ai\xe4.ky\xe4\xac" +
	"R8)\xc4\xe6ST-\xfa\xf5\x95\x99\x99Y\"y" +
	"$\x8d\xd4F\x93\xb0VH\xeb`\xa1\xc0P1\x1d\x18" +
	"\x0a.\xad@*\xa5\x83\xf9+$\x8f\x87\xda\x1eJ\x04" +
	"\xbfx\x87\xe0\x09\xd0Y\xb5\x1e\xc9+iw\x08\x1e\xce" +
	"J\xa5yE\xf8\xa2ZO\\\xcbD\xfd\xd6\x9c\xd4\x94" +
	"\x1e\xe1\x10\x0d\xed'}\x117\x92\x9dBva?\xcc" +
	"x7\x1c\xa5!\xbbp\x00f\xa4\x1b\xc9N!Ul" +
	"(\xd2\x0f\x02|\x04\xad\x8b\x0dG\x87\xaba\x8f\x86\x94" +
	"\xb1\x1c\x94\xeb\x86\xdd\x19R\xc6\xccvgH\x19s\xe0" +
	"\xfb\x8d\x8c\xfa\x90]8\x1e\xdfo\xeco!\xbbp2" +
	"\xe2\xe1},C\xb7\xba\xc2l\xaa\x1bf\xcdDoA" +
	"\xefU\x03^\x91K\x91\xb5|\xc5\x88\xf1\x96*\xf0L" +
	"\xc8\xb6+\x97\xb4\xd1\xa2\xe0\xd6\xf3\x93(\xb0\x00S`" +
	"\x0d\x9b1B\xf0\xa5\xa0{\xde\xf0+\xc2\xaf1b\x15" +
	"g\xa5>/\x96\x96\x8a.\xed6\x0fg\x15\xda\xa0\xf5" +
	"\xa1\x01!\x1a\x96\x9553\xd3\xb4\xe2\x0bY+>\x8b" +
	"%\x17\xa9\x00J\xa3\x80\xcb\xa26\x976\xfad\xb1\xba" +
	"\x90\xce\xe9\xd75D\x8f\xc8YK\xdb\xb0\xe4\x8a\x04\x7f" +
	"\x05\x18?\x19\xa2:Fjb\xb12\xe5S\x89!\xb0" +
	"C\xf2i<`EV\xe2\xb8\xd7B\x1a\xcb\x14_\xb9" +
	"9\xddV\xb7tF*\\\x1c%\xa7\x1a=\xf0EE" +
	"\x92\xb98MT\xa3\xb7^C\xdb0\xee\xc2Z\xc8\x85" +
	"\xf8\xff\xbf\x9d\xd8\xe4\xd0\x1c\xa3\x94I\xb2\xd9\xd5\x96f" +
	"x3S4\xa5B\x94\xdb\xb0\xb7\x83\xa1=R\x90\xe3" +
	"\\\xa2'\x1a\xf3!\x8dqL\x80\xf2?\xa6\xc0\x0e:" +
	" l\xc6\xcbt\x02Ks\xa76Zn[\xae\\\x15" +
	"'i\xe6\x00K\x09\xcbh(\xa1\\\x7f\x92\\%i" +
	"\xa28\x96\x8b\x8b\xdc\xd2\x01U\x9b\xa0Qo\xf495" +
	">I\x15'\x08*\x1e\xdb\x88\xc6\x92\x99\xcfq\x8eA" +
	"V\xe2\x18\xc1\xde\xd4\x1b\xf5\x04\x0c\xf6a\x90\xd67 " +
	"}\x81\x987\xa0\xa9\xa1\x8df\x04e\xcf\x0c\xc7\xfd\xc7" +
	"H\x92\x0d\xd93\x99\x88\x1b\xfbF\xc8\x9e\xc9\xc1@\x9d" +
	"\xb1o\x84\xec\x99|\x8c\x0f\x1a\xfbF\xc8\x9eq\x90\xa4" +
	"\x88}#d\xcf\x8cG\x9cJ\xaam\x17J\xaaM\x8a" +
	"\xd8O\xda\x13}\xff1\xed'a{FD\xdc\xb0\x7f" +
	"B\xf6\x8c\x17\xdb\x13\xf6c6z$\xb9Bt\x8f\x91" +
	"\xb8\x0c\xbf\x96\xe9v\xab&\xe7\xbbi\xbd\x9a=1\xec" +
	"l*s\x90\xd18WA\x9d\xb50\xd2\xdb\x98\x8b[" +
	"\x07\x8bj9+ur\xc6\x14\x07\x8cV\xdb\x9d \xa6" +
	"x\\\x8a\x9e\xf2\xcf\xdew\xd8\xdbN(n\x9ffH" +
	"\xf7\x96\xed\xbc:\xdd\xce\x0b\xdbs\xc1c\x81\xd1[\xfd" +
	"\xb0\xedf\x05JI\xa9\xe9PI1\xeb\x14\x0e4k" +
	"\x97\x958\xde\xa6\xa4\xf7\xde)\xacS8Y\xf4\xa9\x92" +
	"\xa0\xf4>\x98\xc7:\x85\x93g\x1c\xb8\x09\x9f\xc29\x01" +
	"\xe0q+q|e\x09)\x01\x91\xf3bRSJ\x04" +
	"\xd5\x9d\xaf\xb8%\xceV*\x191\xe2:\xd4)(_" +
	"\x09+\x09\x03uv0\x0a\xfe\xa7\xc7:\x0b\xee(p" +
	"j\x82\xe6O\xc1CM\xa6\xd1L5\xf6(\xf6\x09\x9d" +
	"\xe0\xc4\xefI\xa5F8\xe4\xbd\xdc[H\x8dp\xc8\x8d" +
	"\xbb?\x95\x1a\xe1\xd0\x11\x9d\x83\xa9\xd4\xb9\x9d\xd0\x11\x9d" +
	"C\xe9\xc6\xb0\xb7p|1\xc2\x13\xc0t\x15\xd0\xf9;" +
	"6\xb0nZ\xf3\x8b\xb5z\xae:C\x0b\x0fVk\xb1" +
	"\xc7,\xca(\xf4\xa9b\xa9T\x13>\xcf\xe2S\xfc\x1a" +
	"\xf5;\x8a5*\xc9\xee\x09J@&\xee\xe6m*\xe6" +
	")x\xab\xa60U\x87({\x9c#kV\xb56\x9a" +
	"xD1\xc3\xfaL\xa3\xe3\x11&\xfb\x09\x7f\x9bl\xa5" +
	"\x14\xf4\xc1\xb5\xa8\xd0Q\xb1\xe0B\xb12 \xfa\xb5\x91" +
	"\xb8\x03\xe2\x11\xbd\x94rA\xd6\xd3\xff[;kV\xcc" +
	"\x12\x0bI\xd4\x89\xbd\x90X\xd8\x97DsrP,\xec" +
	"O\xa299(\x16\x0ef\xd1\x9c\xdc9\xc8\xc9\xa9\x06" +
	"'G\xe3\xa1o\xf9\xc4]\x93\xc4\x14\x9cQ\x9bq+" +
	"\x05G\x88-*v\x12A\xd4\x17\xa96\x90\xc4m\xe5" +
	"(C<\xd9\\\x8a[\x8c\xde\xca\xa1NSb\xdc$" +
	"%j\xd3!\xad\x85`WT\xae\x8d:\xdd\x90\xa0|" +
	"\x1b\xe1\xd2\xc0\xd1\xfa6\x8a\xf4c\xce\x99\x19\xbaM\x15" +
	"M\x06j\xa1\x11\xd8\x095\xbb2-\xe8h\x98Ke" +
	"\xa0\xceN5\xe2c\xa1\xe3\xd4\xb4\xcd\xd6\xa8I`\x04" +
	"\x05d*/,\x050\xaa?\xe1\xd2\xebz\x7f\xdax" +
	"\xba,Xb@\xcfm\xf0\xebi/TL/\x8fJ" +
	"\x15\x0e\xf5\x8e\xce\xbd\x0e\xf5\xae\xbe0\x18\xbe\xdbH\xf5" +
	"n}a\xd0.z\xc3HD\x8d\xd86Z(T\xd0" +
	"4J\x80\xf94\x84\xeax\xb8hJh\"5\xd1\x0b" +
	"v\x11E\x14\xd4\xd3\xdax\xf8w\x82XR\xe0\x11j" +
	"s\xaaD\x15\x05MP\xdep-$\x0c\xfa1\x89\x83" +
	"\xbd\x0d\xb7\x1e\xf2\xd1\xd3\xce\xc7\xa7\xf8BQUJ\x8a" +
	"\xad5\x86+4\x01\xe1M\xf68\xb5\x1d\x1fS\x8d\xd3" +
	"\xad\xe1\xed\xf8\xd4b\x8es|a%\x8e\x1f\xa8\xed\xf8" +
	"\xecZ*~\x17\xda\x8e/\xae\xa5cr!};\x96" +
	"\xcc\xa7\x83l\x8d\x1e\xb7\"gV\x09\x12\xf1\x08%\x1e" +
	"hv\x1c\xbd\x97\x06\xe4\x0a\xa5Z\xce\xf4q$`\xce" +
	"R\x81\x07G\x05*\x0a8\xd3\x89A\xc0\xf3%5@" +
	"\xca\x04\x0f\x8e\x021\xff\xcd\xaf\x11\xaf\xa2\xa8M>\x06" +
	"\x7f-\x0cL\x11\x88Z!\x092\xeb\xafEB\x85D" +
	"\xfc\xe5\xa1\x9c\xfe\xe87\xc0\x09\xa2\xa0\x8e,\x17dk" +
	"YT\xe7`\xf3Xn\xc54:\xb4ke\x84v\xcd" +
	"\xda\xbaW\xd0DU\x12<\xcd\x9fE\xab\x16\x05\x153" +
	"o\xda\x14\xd8E\xdfG\xb6\xa2\xe8%<\xa8\xbe\xa4\xb3" +
	"\xfa\xa2\xb2\xfa\x92\xce\xeaK\x9e\xd1\x17\xd3\x99\xe3F\x9f" +
	"\xe4\xaa\xf0(\xae\x0a.\x05\xf7\xfa\xe6\xf2%\xfe\x90\xea" +
	"z\x87\xa8\x89\xaa \x17\xa6\x88\xd5\x82\xean>H\xca" +
	"\xda\xc0\xea\\\x1eA\xa2]\xf4\x98\xd1\x99`\\\xcd\x12" +
	"mu\x18\x0cbd\x8b\xde8\xa5\x893!\xb5\x958" +
	"m\x84x\x0e\xf97\xa3\xd6\x06u\x95\xa7H\xb0\xa9M" +
	"\xf3\x97\x0b)q$\x8b\xd5E\xf0jj\xdb\x88\xe2\xe5" +
	"\xe5\x82,\x8b\x9e\xfc\x0c1|\x98\x92r\x91\x15\xb7\xe2" +
	"\"\x0b\xed\x04\xeb\xf3(gXh'\xd8\x9ae8\xc3" +
	"\xc2;A\xc3LJA\x0b\x9eGH\xdc\x9de\x98\x1a" +
	"\xc1\xed!2\xc7;\xc3/\xcan\xca\xf9\xe7\x11\xe4\xb2" +
	"\x80P\x16\x99[X.\xc8c\x03\xdeH\x953W\x1e" +
	"CB\xb4\x7f<\x11\x06\xa7^\xf7\xda\x16\x04J<R" +
	"\x8akl\x90\x09Z\x8be\xa5S\xfaMhi\xe5\xa7" +
	"\x1a\xfaMK\x9ca\x93\x15\xad\x0d\x8d\x0c\x95\xedQ\xf5" +
	"\x94\xf46\xd7\x10\x88L\xb5\xc9\xd0\xf3\xf9\xa2\xf7$\xa5" +
	"\x8c\xf7\x8bM\xfc\xd8L\x0f`\x16kLzS.@" +
	"t(\x84g+\xe8\xd5\x0eg:\x8b\xb2\xbbM\x07o" +
	"F*^\xaf`\x95\xddm\xcd\xad0e\xc0\x9a\xc2\x12" +
	"\xcc\xf9\xd0\x85\x9b\xb1\xb2T\xa7\xe8\x11]ZNe@" +
	"\xf2\xb5\xe0\xebc\x1eSn~kH0j'G+" +
	"\xbb\xb2\xb0\xf2\xcf\xc8r[\xc8b\xba2\xdc\x90Cy" +
	"T\xd5\x8cPK\x8e\xa5RN\x8f\xd0\x1c\x9dH\xa7\x95" +
	"\x8d\xe0\x96p*\xdd\xf0\x84\x84-\xa6\xd3S(\x0d$" +
	"d1\x9d\x85\x0f}k%\x8e_(G\xca\x85b*" +
	"\x83(\x18XJ\xbcTL\xa9%\xb0ch\x92\x1c\xf0" +
	"R\x03a+\xa3jmd\xf8%O\x95\xc1\xa9\x19." +
	"\xc5\xe7\xa3\x187\xfc\xb8-\x8b\x8e\x83\xc0\x1b\x00\xa0\xf7" +
	"!\xfdEY\x02g\xa5\x08\xf5\xd7\x99@\xd6j(S" +
	"\x82\x83\xad\x09\xe8\xd8\x85\x95\x1b\x85\xdaQ\xaedz<" +
	"\x85\xa2M\x0b\xa8\xe6\x00\xc5e\xac\xc4\xef\xf9F,\"" +
	"$}#B\x11!-p\xebZJ\xd0\x86\xb4\xc0\x08" +
	"\x9fN,\xd1'fOzP\xdb<\x1ca\xee\x85t" +
	"r\x99\x88\x95\xfa\x99yj\x02<\x92l\x88&\x9d\xd0" +
	"/\x11\x19l^\xbf\xa6\xc6\x81\xd5\xca\x0e:\xeb\xb4\x86" +
	">\x1f\xbe\x9e/Z\xc3\xacP\x900\x0f/NT\xfd" +
	"Q\xa4\xe0\x95\xb0R\xf0B\xb5IfQ\xe3E\x9f8" +
	"\xads\x8b\x9a y\xfc$\xc1(>\x1a\\j\xcc\x10" +
	"US{3\\aW\xefV\x8a\xe8\xf5i\xb5&<" +
	"\xaa\x95;\x12\x0c4\xb9\x89\x19B\x179j\x9b\xedW" +
	"$\xf8+\xb2E\xbfK\x95|\xe8j4I\x03\x95%" +
	"\x0d\xd2Y\xd2\xa07K\x1a\\fH\x03\x12\x12\x06\xd0" +
	"\xd6\x93V\xe2\xf8\x96\xe2\xb93\xa9\x94\x84h\x17\xa3\x0b" +
	"\x83\xb3%\x94\x84\x88\xb3\xe8\xc2\x80\x96\x10X\xef\xa2J" +
	"\xd2j\xb9\x94\x91\x91\xa9\x0c\x82\xbf\xc2\xe0\xdc\xb8\x80\xb1" +
	"Ti\xffE\xc4\xc1\x1e\xb7\xe8w\x85GME\xc5\xd2" +
	"\x1cx\xd4\xd11\x12.\xfd\xe8\x03b\xa2\x96\xab\x89^" +
	"?\xd7\\\x90\xad\x8f\xc5T\x1c/\xfa\xac~A\x16(" +
	"\x1b\xa5\xb53\xd4Y\xac#\xbfY\xac#\xbf%Fr" +
	"nh\xda\x16e\x19\xc6}\x9d,V\xc3\xb7\x0d\xc7\xb5" +
	"&x%\xfa\xb7O\x8cp\xf7U\x88\xa2\xcf%\xf85" +
	"\x8e\x96\x04u>\xc1\x8d\xfe\xac6w[\xf4*\xaa4" +
	"UL\xc1`\x80i\xd1\xa7\xb2,\x9a,V\x95\xa2<" +
	"\x96EShX4\x11\xb9\x1bM\xba\x04+\xa6\x04\x85" +
	" Uq@t\x07@k\xe2H\x1b\x8emgV\x09" +
	"\x1eI(\xf1\xa4\x88\xb0\x14\xcdG\xf6\x0a#\xf2[C" +
	"\xa1\xb7D\x0c\xa5\x19G\xf0B\xa9\x1f\xdd1\xf4f\x1c" +
	"\xc1\x0b\xa5~\xf4\xc4\xd4\x8f\xf0Y\xbb\xe0\x9c69j" +
	"\x17\x8a\xbc\xf5\xc5\x80\x9f\x91A\x12\xf2\x04\x0c\xc0\x88\x99" +
	"\x91A\x12\x8a\xbc\x0d\xc5\xe6\x18\x91\xc0\xd0\x91\xbdL\xc4" +
	"\x8d\x93\x0b\xa1*\"\xa6L\xc8FX\xae\xb9\xb2[\xe4" +
	"H\x0d\x95k\xef\xaf\xc8\x07\x96\xb1\x81y\x18\xb1\xb2\xe9" +
	"j[l\x01\xc0Z\xcd\x05\x1e.C\xdf\xfaM\x0bz" +
	"\x94\x82\xe5\x14\"A\xa7\xc4\xd9h5\xc2\x10\x09\xb6\x08" +
	"u\xc2\xafx\xc5\xb1\xcd\x1c\xf2j>\xca\x8a\xdeu\xff" +
	"\xfff\x8d\xd6\xcf^\x0d|\xfd\xfe\xcf\xa9OG\xbbm" +
	":\xcb%\xd1\xe3\x96dR\xd6\x82C\x8b\xe5\x99k\xf5" +
	"\xcd0\x1a\xa3DY\xcc\xd0cWm\xb4\x8a\x08\xcb(" +
	"\xa2#=\x19e\xba\xe9\xd7b\x86]\xf3\xdb\xa7\xe0\xd7" +
	"@j\x90?.6\xd4V\x1c!-\x8b\x0d)x\xb2" +
	"\x91K\xa9\x8dH\x0d\xfbCC\x1d*\xb3\x9b\x82g\xbb" +
	"\xa2`\xa7\xb4\xe6\xd8)\xc5\xabT\xd1'7WZO" +
	"\x1c{\xe6\xd2=3\xccjX\xbb\x96Om\x15(~" +
	"\xccj\xd0mc\xa7\xa8VY\xf5\x08\x03-\xd2\xb2\x9a" +
	"9\x85<%\xe2\xb4qH\xa4\x99O\x1b\x87D\x9a\xf9" +
	"\xb4q(\x9b\xad'\x8aL\xe3Xq(\x9b\xcd,\xeb" +
	"B\xd9l\xe6,\xbaP6\x9b\xb9dX(\x9bm\x00" +
	"\xb6\xffz\xc0o\xa6\xb3\xd9\x06#}X66q\xed" +
	"\xb9E\x8f&\x8c\x16\x05\xce\xe6\xa6\xf6@[M\x81b" +
	"\x04,k\xa9\x1f\x8d\x82,y\x85\xc8\xcd\xc46\x95\"" +
	"\xc8\xc07N\x8a\xfc9\xb1I\x82A\xc4\x9f\x8b\xa3\xe7" +
	"-\xd0\xaba\x19\xc7\xa9\x82\xa7y\xa7a\xcbG[\x8a" +
	"Y\xf56\xa82\xa7\x7f\xf88O\xa3OP\x05\xaf\xa8" +
	"\xd1\x15\x1e\xa29<:\x12C\x84\x1c\xd7\xbc\xc9\xcb\xd6" +
	"q\x83\x1d:QL\x19\xb7!C\xe1t\x12\xa5\xcf\x86" +
	"\x0c\xab3I\xb4\xc5\x1bt\xaf\x9fM\xa2\x0e\xd2\x84\xa2" +
	"\xdd\xe7\x8a)G|pCM\xbc\x98E)\xb9\x8c\xaa" +
	"M\xff\xf3`\"\xe6\xa5\x14\x8a\x82\x9f\xb3\x1a\x13\xd0\xf6" +
	"j\x03!'\x93Mu\x8a\xda\xffm\x0fS\xb6(h" +
	"\xe5\xa6HI\x16+\xde\x9b\xc7\x8a\xf7\xe6\xb1\xd2@J" +
	"X\xc5X\xb3Xi \xc5\xac4\x10\xca#\xd2D\x00" +
	"TH\x1e\x8f\xd9\xd3\xedRT\x9f_\x8c\x0cs\x09\x9a" +
	"&\xb8*\x9c\x15\\\x1c\xe56o\xb2\x8f\x94H\xb2\x1b" +
	"\xa6\x90\xa3\x0c\x9a\x0c\xb7\xe0\x15\xca\xda\x10\xe4\x1f\xa9x" +
	"K\x04-\xb3$%\x1c\xd3l-\xce\x9f\xca\xf2\xd5Q" +
	"\xe9zu\xde\xa2\x08\xb7\x98\xcd\x9b\xa9\x19\xa5\xd8\xbdN" +
	":\x14\xd0\x86b\x1a\xc1Z\x16\x8cC\xd1v\xcb\x1f\xc8" +
	"y\x0a\x86\xa2'\xc4\x09\xba\xf9\xc0\xae\x95\x14\xb6\x9b\x92" +
	"h\xbb)(\x0af'\xd1vSP\x14\xccK\xa2K" +
	"%\x05EA}\xb1q\xa81B[ie\x81*\xb2" +
	"8: \xbb\xd5\x88\xe2\x12\xd1d\xb9\x06\xf3!\x8cZ" +
	"\xc5\xcdhw\xacjpQ\x14Z\xc69\xa4\x92-Z" +
	"s\xef2\x8foPgUM\xe7\xc3\xd0M_\"\xc8" +
	"\x1c\xa90\x98\xdf\x94=\x12\xc5\x89z\x8f\xe8\xd2\x821" +
	"\xfb\xe8\xafn(d\xe4(\xa7R\x09\xd5\xactKF" +
	"\xc0>\xd2\xfa\x88\xe2l\xbe,\xd6\xb2k\xba\xe6\xb1\xf2" +
	"\x0aR\xa3\x0e\xcf\xa5\x1b\xfb\xef\xff\xd4m\xda\xd6\"\x06" +
	"\x99V\xfd\xa4S3\xfe\x8e\x12\x8f W\xb4\xd9\xf0\xc7" +
	"\xb8\x8b\x7f\x8cd\xf5k-\xd4\x06\xc0\xf3\xb2-\xa5\x08" +
	"\xb4\x91{*\xa3;aXH%\x0bG\xc9(\xd1\xa6" +
	"\xea\x8c- #\xa3\xc9\xd3\xa1J\x91\xd0\x8e\xdb\x96N" +
	"\xad5o\xa3\xea\x9eh\x93\x0b:\xd5pA\x87=\xd0" +
	"iTP0$\x1e#\xf2\xe6C\xe2q}:\x957" +
	"\x1f\x12\x8f\x9b\xb2(guHS\xa2\xeb\x91\xd8\xaa\xcb" +
	"\x95pM\xae\x94\xea\x08[\xb0\x1a\x0b\x88\x84\x7fz\xaa" +
	"<\x1e\xa3\xa4|\x9d\xa7\xcaS.\x95\x95\x1b>~\xaf" +
	"GQ*\x02\xbe6\xe5g\x04\x1d\xae\x11\xb91\x7f$" +
	"\xf3\x87\x0a\xfb\x87\x07\xa46\xcf\xd8m\x1a\xcbTA\xd6" +
	"\"k\xcf5*\xd5\xb2\xb9\x1e]\xa3OT\xbd\x92\xdf" +
	"/\xd1\x8a\x1bjsr[ey\xbeRR\x08O\x11" +
	"1\x9a\xad\x7fJ+r\xbcN\xf1\xb8#n%\x08\xfe" +
	"\xce\xe4le\x82$\xd3\xd5\xbd\xc7\x0am+\xd7\x85\x0b" +
	"'\xdf\x06r2\x1a1>\x93u\x03\x8fJ\x9d5a" +
	"\xc8\xc2\xd0\xf2\xcc'\x82_C5\xcd\xfc\x97&i+" +
	"\xad{\xf6|>U\xa92.%`\xbbA\xd8\xb1a" +
	"\xd2\xf4\xc6\x84\xc8\xd80\xde\x8ea\x9c\xeb\x11\xf4o\xb5" +
	"\xa5\xe6\x93.\x8e\xe2\x82\x9e\x83\xd6|!\xcc\x04\x97\x99" +
	"\xacss\xaaa\xe0E\x1e\x7fc\x15\xc1\xff?0\xec" +
	"\xa3\xf2\x8bTA\x92s\x9a\xc6x\xd3Z\x11\x9a\xd1\x1c" +
	"Uo\xb5\xb0^v@4W~SY\xfbE1\xb5" +
	"_\xb8\x03\xa2'W\x964.E\x124*\xdb\x07p" +
	"P\xa89\xab\xd8\x86\x1c\x8e1J\x19n\xc5z\xb6\x0f" +
	"\xb5KN\xa5\xb4?<\x06\xe4/W\xb8\x0cUk[" +
	"\xc4\xc8|-\x86\xd5\xef\xff\xbf\x93\xc5\xd9\xa4\xbe\xd8\x07" +
	"\xef\x8c.81\xb2\xe6\xc1\xa8\xab\xfed\x8c\xca\xbf]" +
	"jR\xf6\xa7m\xe9:\x91\x97\x15D\xe3r\x94]\xa2" +
	"\xa7H\x8d\x13\xdcb[-\xe4RU\xf1\xb6~\x8fC" +
	"\x0b9l%\xfa\xf1\xae6_\x1e\x15\xf0\x8bM\x8a-" +
	"\xfa\x04\xbf\xbfZQ\xdd\xad\xed1\x11Y\x0fA\xbf\xa0" +
	"\x9a\xa2\x94J\x1e\xe8\xbf\xf3<\x09\xfb\x02W\x82=\xe2" +
	"\\\x11o%\xce\x8d\xf1\x94/p=\xe8s\xce\xd5\x80" +
	"o\x89\xa7|\x81\x9b\xe2S9\xce\xb9\x0e\xf0m\xf1\x94" +
	"/pk|!\xc79\xb7\x00\xbe+\x9e\xf2\x05\xee\x04" +
	"\x9d\xd3\xb9\x0d\xf0\xd7\xe2)_\xe0n|\xff\x0e\xc0\xdf" +
	"\x887*\x12\xeeA\xf2]\x00\x1f\x8e\xa7\xc2\x1b\x87\x10" +
	"?\x00\xf8\xd1x*\xbcq$~\x0a\xc79\x0f\x03~" +
	"2\x9e\x0ao\x9c\x88\x9f\xcfq\xce\x93\x80\xff\x16O\x1d" +
	",\xba\x18\xff$\xc79\x7f\x03\xbc}\x17\xaaPBl" +
	"\x17h~L\x17+q&\x00\xde\xb9\xa3^\xee4\xbe" +
	"K1\xc79;\x03\xde\x0d\xf0\xf8Nz\xb9\xd3\xaeH" +
	"o\x07\xfcJ\xc0\xbbt\xd6\x8b\xa4\xf7D\xbc\x07\xe0\xd7" +
	"\x01n\x8b\xd7\x8b\xa4_\x8dx\x1f\xc0\xfb\x03\x9e\xd0E" +
	"\xaf\x92\xde\xaf\x0b\x1e\x14\x06|\x10\xe0\x89\x16\xbdL\xfa" +
	"\x80.XQ\x11\xf0a\x80'\xd9\xf42\xe9C\xbb\xe0" +
	"\xad\x08\x80g\x03\xce[\xf52\xe9\x99]\xb28\xce9" +
	"\x0c\xf0\x89\x80\xdb\x13\xf42\xe9\xe3\xbb\xc00\x17\x00~" +
	"\x17\xe0]\x13\xf52\xe9\x93\xba`a\x0b\xc0\xef\x05\xfc" +
	"OIz\x99\xf4\xc9\xd8\x9e\x89\x80\xbb\x01O\xe6\xf52" +
	"\xe9B\x97\xde\x1c\xe7\xbc\x0b\xf0r\xc0\xbb\xd9\xf52\xe9" +
	"\"\xe2\xf7\x02\xee\x01\xbc{W\xbdL\xba\x84\xb8\x1bp" +
	"\x1f\xe0\x97\xfdI/\x93\xeeE\xbc\x1cp\x0d\xf0\xcb\x93" +
	"\xf52\xe9\x95\xf8]\x0f\xe05\x80\xf7\xe8f'=8" +
	"\x8e\x0f \xbd\x0f\xf0\xfb\x01\xef\xd9\xddNzr\x1c_" +
	"\x8b\xb8\x06\xf8t\xc0\xaf\xb8\xccN\xae\xe08~\x1a\xf6" +
	"\xab\x06\xf0Y\x80\xa7\xc4\xd8I\x0a\xc7\xf13p\xfc\xa7" +
	"\x03\xbe\x02\xf0+c\xed\xe4J\x8e\xe3\x97#\xbe\x0c\xf0" +
	"\x1d\x80\xf7\xba\xdcNzq\x1c\xdf\x80\xe3\xbc\x0d\xf0\xd7" +
	"\x00\xef\xdd\xc3Nz\x03\xdb\xe2\xfbw\x00\xfe\x06\xe0W" +
	"\xf5\xb4\x93\xab\x80oq\x9cw\x01\xfe6\xe0}\xae\xb0" +
	"\x93>\x1c\xc7\xefE\xfc5\xc0\xdf\x05\xfc\xea\x14;\xb9" +
	"\x9a\xe3\xf8}]\xa6r\x9c\xf3m\xc0?\x00\xfc\x9a+" +
	"\xed\xe4\x1a\x8e\xe3\x0f\"\xbf\x1d\x00\xfc(\xe0\xd7\xf6\xb2" +
	"\x93k\x81\xcf\x91\x1f\x0e\x03~\x12\xf0\xebz\xdb\xc9u" +
	"\xc0\xe7\x88\x1f\x07\xfc+\xc0\xfb\xb6\xb3\x93\xbe\x1c\xc7\x9f" +
	"\xc6\xef\x9e\x04\xfc7\xc0S\xe3\xec$\x15\xf8\x1f\xe9\x7f" +
	"\x01\xdcn\xb3\x90\xc4?_e'\x7f\xe68>\xd1\x86" +
	"w\x1f\xd8\xac\xc4\xd9\x03\xf0\xeb\xfb\xd8\xc9\xf5\x1c\xc7w" +
	"\xb7\x95p\x9c\xb3\x1b\xe0}\x00\xefw\xb5\x9d\xf4\xe38" +
	"\xbe\x17\xe2W\x02~=\xe07\xb4\xb7\x93\x1b8\x8e\xef" +
	"k\x83y\xec\x03\xf8\x08\xc0o\xec`'7r\x1c?" +
	"\x1c\xe9\x87\x01>\x1a\xf0\xfe\x1d\xed\xa4?\xc7\xf196" +
	"<\x90\x08\xf8\xbd\x80\x0f\xb8\xc6N\x06\x00\x1f\xda`^" +
	"\xee\x02\xbc\x1c\xf0\xb4k\xed$\x0d\xf8\xcd\xa6\x02_\x01" +
	"\xee\x03|\xe0uv2\x10\xf8\x0a\xdb\xef\x01\xbc\x06\xf0" +
	"A\x9d\xecd\x10\xf0\x8f\x0d/Q\x00|!\xe0\x83;" +
	"\xdb\xc9`\x8e\xe3\xeb\x11_\x00\xf82\xc0o\xeak'" +
	"7q\x1c\xbf\xd4\x06\xf3\xb2\x04\xf0\xd5\x80\x0f\x89\xb7\x93" +
	"! &m0\xef\xcb\x00_\x07\xf8\xcd]\xec\xe4f" +
	"\x8e\xe3\xd7\xe0wW\x03\xbe\x05\xf0\xa1\xa9v2\x14\xc4" +
	"\xa4\x0d\xd6\xe3:\xc0\xb7\x01\x9e\xfeg;I\x071\x89" +
	"\xf4[\x00\xdf\x05\xf8-\xd7\xdb\xc9- &\xb1\xbf;" +
	"\x00\x7f\x03\xf0a\xfd\xecd\x18\xf0\x15\xf6\xf75\xc0\xdf" +
	"\x05|\xf8\x0dv2\x1c\xf8\xc7\x06\xfc\xff\x06\xe0\x07\x00" +
	"\xbf\xf5F;\xb9\x95\xe3\xf8\xfd\xd8\xce\xb7\x01\xff\x00\xf0" +
	"\x8c\xfev\x92\x01|e\xbb\x8c\xe3\x9c\xef\x02~\x18\xf0" +
	"\x11\x03\xecd\x04\xc8U\xfc\xee\x07\x80\x1f\x07<3\xcd" +
	"N29\x8e?\x86\xf3u\x14\xf0/\x00\xcf\x1ah'" +
	"Y\x1c\xc7\x9f\xc2\xef\x1e\x07\xfc+\xc0G\x0e\xb2\x93\x91" +
	"\xc0o\xb6\xed\x1c\xe7\xfc\x0a\xf0\xf3\x80g\xdb\xec$\x9b" +
	"\xe3\xf8s\xf8\xfe\x1f\x00\xef\x9c`!\x899\x83\xed$" +
	"\x87\xe3\xf8\x0e\x09I o\x13@\xde\x02~\xdbMv" +
	"r\x1b\xc8[\xc4\xdb\x03n\x07|\xd4\x10;\x19\x05\xfc" +
	"\x89xg\xc0\xbb\x01>\xfaf;\x19\x0dr8\x01\xc6" +
	"9\x01\xf0\x1e\x80\xe7\x0e\xb5\x93\\\xe0\xdb\x04\xe0\xabn" +
	"\x80\xf7\x01</\xddN\xf2\x80o\x13`\xfc\xaf\x04\xfc" +
	"z\xc0o\xbf\xc5Nn\x07\xbeM\xc0\xca\xb6\x80\x0f\x02" +
	"|\xcc0;\x19\x03r\x18\xf1\xfe\x80\x0f\x03<\x7f\xb8" +
	"\x9d\xe4\x83\x1cN\x00>\xb9\x19\xf0l\xc0\xc7\xdej'" +
	"cA\x0e#\xfd\x08\xc0\xc7\x00>.\xc3N\xc6q\x1c" +
	"\x9f\x9b\x00\xe30\x1a\xf0\"\xc0\x0bF\xd8I\x01\xc7\xf1" +
	"\x8e\x04X\xa7c\x00\x9f\x08\xb8#\xd3N\x1c \xb7\xb1" +
	"\xfdE\x80\xdf\x0bxa\x82\x9d\x14\xc2\xba@\xfc.\xc0" +
	"k\x00w&\xda\x89\x13\xf8<\x01\xe6K\x03|:\xe0" +
	"EYvR\x04\xf2\x10\xfb{?\xe0s\x01\x1f?\xd2" +
	"N\xc6s\x1c?\x1b\xdf3\x0b\xf0\x85\x80\xdf\x91m'" +
	"w\xc0\xbaH\x00~[\x00\xf82\xc0'\xe4\xd8\xc9\x04" +
	"X\x17\x88/\x01|5\xe0\x13o\xb3\x93\x89\xb0.\x10" +
	"_\x01\xf8F\xc0'\x8d\xb2\x93I\xa0> \xbe\x0e\xf0" +
	"m\x80\x17\x8f\xb6\x93b\xe0\x7f\xc4\xb7\x00\xbe\x0b\xf0;" +
	"s\xed\xe4N\xe0\xff\x84\xb5 ?\x01\x7f\x1b\xf0\xbb\xf2" +
	"\xec\xe4.\x90\x9f\x09\xcf\x01?\x03\xfe\x01\xe0\x93o\xb7" +
	"\x93\xc9\xc0\xcfH\xff\x01\xe0\xc7\x01\xbf{\x8c\x9d\xdc\x0d" +
	"|\x8b\xef?\x0a\xf8\x17\x80\xdf\x93o'\xf7\x00\xdf\"" +
	"~\x12\xf0o\x01\xbf7\xc9N\xee\xe58\xfe\x0c\x8e\xcf" +
	"W\x80\xc7$ZH\xa2p\xad\x9d\x08\x1c\xc7\x93D\xd0" +
	"\x13b\x12\x81?\x01/\xb9\xceNJ\x80?\x13\x17\x03" +
	"\xbf\x01\xde\x03pW\xa1\x9d\xb8\x80\xdf\x12\x81\xff{\x00" +
	"~\x1d\xe0n\xa7\x9d\xb8a\xdfO\x84\xf6_\x07\xf8 " +
	"\xc0E\xdeND\xe0\xab\xc4\x99\xc0W\x80\x0f\x03\xbc\xb4" +
	"\xc8NJ\x81\xaf\x121\x8d\x03\xf0l\xc0\xcb\xc6\xdbI" +
	"\x19\xf0U\"\xdez\x04\xf8\x18\xc0\xcb\xef\xb0\x93r\xe0" +
	"\xabD\xe4+\xc0\x8b\x00\x97&\xd8\x89\x04|\x95\x08\xfa" +
	"O\x11\xe0\xf7\x02>e\xa2\x9dL\x01\xfe\xc1\xef\xde\x05" +
	"x9\xe0\x15\x93\xec\xa4\x02\xe4*\xf6\xab\x1cp\x0dp" +
	"O\xb1\x9dx`_N\x84q\xd6\x00\x9f\x0e\xb8\xf7N" +
	";\xf1\x02_a\xbf\xa6\x03\xbe\x00p\xd9n'2\xc7" +
	"\xf1\xf3\x12\x81\x0f\xe7\x02\xbe\x04p\xa5\xab\x9d(\x1c\xc7" +
	"/\xc2~-\x04|\x05\xe0\xbe\xbb\xec\xc4\x07\xfbo\xe2" +
	"\xbf@~\x02\xbe\x05\xf0\xca?\xd9I%\xc8\xcfDX" +
	"_\x1b\x01\x7f\x1bpu\xb2\x9d\xa8\xc0\x0f\x89\xb0\xbf\xbc" +
	"\x06\xf8\xbb\x80\xfb\xef\xb6\x13?\xc8C\x9c\xafw\x01?" +
	"\x0c\xb8v\x8f\x9dh \xdf\xb0_\x87\x01?\x09x\xe0" +
	"^;\x09\xc0\xbe\x89\xfd:\x09\xf8\xb7\x80W\x09vR" +
	"\x05\xfc\x80\xef\xf9\x16\xf0_\x00\xaf.\xb1\x93j\x8e\xe3" +
	"/\xe0x\xfe\x02xL\x92\x85$\xd6\xb8\xec\xa4\x06\xf8" +
	"$i&\xc7\x15&\x81x\x03\xb8\xd6m'\xb5 \xde" +
	"\x92\x80\xbc3\xe0\xdd\x00\x9f*\xda\xc9T\x10WI\xb0" +
	"\xdc\x13\x00\xef\x01\xf8}\xa5vr\x1f\xb0O\x12Lo" +
	"7\xc0\xfb\x00~\x7f\xb2\x9d\xdc\x0f\xe2*\x09\x86\xe1J" +
	"\xc0\x87%Y\x82\x15\xeb\xfd\x11^\x13s2FkG" +
	"rM\x17\x90\xe2\xaf\x01\xe1?\x96H2\xed\xb7\xed\xf3" +
	"\xcc\xa3\x9f\xf6\xa8\xfc\xfc\\(g\xd2-Ri\xdf`" +
	"y(5\x92+t\x0fKDY\x16\xa7G!Z\xa1" +
	"X\xaa\x8a\xfe\xf2&W\xd1\x84\xca\xa28\x89G\xd1\x89" +
	"\xac~\xc3GX.H\xaaK\xf1(t`\xb9D\x14" +
	"T\xb7K\xf1pV\xca4\x17kEL\xbf\xe6\xc8\x00" +
	"\x06\x96\x16\xf1B\xbfV\xeb\xa1*\x05\xa5\xe0\x0b#\xce" +
	"\xb5\xe5\x0b\x9a\xc8\xd9TI\xf0\x90\x84\xc6\xfed\xf6\xb4" +
	"\xfb~\xed\xffE8)T\x13\xbdE\x92L\x97\xc7\xab" +
	"\x13\x84LU\x15j\x9b\xad\x80k:\xe2l\xf3R\xe9" +
	"z)\xae\x80::|!v\x9c_S\xa9\x7f\x87\xa9" +
	"\xe2\\\xe5\xc6\xbf\xddb\x8dqb_\xd6\x8c9\x8c\x13" +
	"\xca\xa4\xf0\xbf\xab%\xe3\x83\xa54+\xe0\xacd)\x0a" +
	"G\x9a8\xfd\xbd\xa2\x17\xd3\xf8\x9a\x1e\xd8\xfb_\xcb\xf4" +
	"\xce\x18\x19P\xfd\xd4\xd4\xc1;\x00\x8a\x98O\xfd]#" +
	"\x03\x9c-\x82V\x7f\xa7\x19\xce\xc0\x88\x14#aS\x16" +
	"4\xd1Y\xc1\xd9X\x7fE~5\xbb\xbf\xca\x81;B" +
	"\xd7\x9f\x85y& \x97\x89\xaa\x09M)\x09\x94\x96R" +
	"\xcb\xe3\x96\xf7\x96\xbc:6nU\xf8Rn\xb7\xe4w" +
	"I>\x8f\xc4\xc5\xc9\xa2\x9f$4^\xfb\x92\xfaow" +
	"\xd2\x8cOB\\\xa4\x8a.\xc1\xaf\x15I\x9c\xcd\xcb\xa8" +
	" -\xca\xee\x80*\xc8.\xba\xa0\x95 \xe8L\xc4\xa5" +
	"8}\"\x95\x07\x1b\xc6\xa9\x8e\x94\x04\x13\x018+\x9d" +
	"\xf6l\xb9~\xa9\\\x94\xf8k8\x8d\xc8\xa7\xc0b-" +
	"\x119\xabG#\x09\x8d\xf9\x92r\xf2\xe3\xc6\xf1\xef\x87" +
	"\x9a\x88\xb7_\x08%\x1e.Ctz\x14\x8a{\x9b\xd4" +
	"U7\xc5-\x9b\xd4H-\x91T\xad\xdc-D\x8c5" +
	"<\xe7Q\xca$:;S\x93\xbcb\x81G\xa8\xe5R" +
	"Dw\xbeq\xc8$\xceWE\xdd\x1e/\x1b\xf2\xc5Z" +
	"fd\x0f\xe27\xd5\x88H\xa5\x8e\x95\x082\x17G\xdd" +
	"\xacL\xdfE\x8f_\x14eM\"\x9aGt+\xb2\xe0" +
	"\x8atr\x19G\x99\x9a\xac\x07Ve\x90\xe6O\x87\xff" +
	"\x9f9\xe8`\xac)g\xb9\xa0R\x81i\xb1\xc6'\xc8" +
	"~I\xe1\xac2\x95\xc2\x14\xd0\x14?\xb0\xa4q\x02-" +
	"\xba\xf2(\xfa%\x93\xf9\xa2\x97\xb3E\xe6\xd1\x9bcy" +
	"\xa1\xcb(\xb98\xfa8\x18\xabL\xb7G\x14\xdc\x99B" +
	"\xa6\x0b\xf6\x0b\xcaO\xeeq+2\x16\x93J\xd1\xfc\xa3" +
	"\x02\x15L<_R\xd9\xb8\xd7\xc5\xc4\x0b\x03S\x98x" +
	"\x91\xd0\xf4\xfdD\xf3g\"\xd7\xc7E\\\x9e\xad\xfb\xbe" +
	"\x8b\x88\xe4\x15\x0bE\xaf \xd9d*\x97\xab\xd1%\xa8" +
	"\xa2\xa8\x16\xa9D\xf7\x90\x9b\x8e\xbd6\xe78\x0f\xe2\x99" +
	"\\\x8a+b\x08\x82\xb8\x9f\xba\xb5-\xa1\xf1\xb5\x1f\x0f" +
	"_\xf5\xbd\xd6\xe7\xa4y\xa0\x99W\x82\xb6t\xe5g\x1b" +
	"\xaf\x0b5_\x09\xaag\x7fe\x96\x10\xd8\xb3%\xd1\xcf" +
	"\x91\x84\xc6\xf3\x967&5\xbc}\xfctXlH*" +
	"\x0e\x12\x179J\xbe*\xdf\xed \x87#\xce\x95W\xf9" +
	"0k\x88\xbe\x9d\xc7W\xe5\x1b\x19PU\x91\xc8Z\x93" +
	"c\xc2\xf07\x18l\xa2\x06\xffD\xff%K\xf4k\xb7" +
	"\x13\xc9\xe3qj\xaa(PR\xc0W\xe5\x9b\xa0\xa8~" +
	"\x8d\xe0\xb7\x9c\x9a\x1a'\x0a\x15\xac\xef\xdd\x8e\x0f\xdbT" +
	"\xd3\x9f\xc7\x08~\xedv=\xff'\xa1\xf1\x93\x87\x17\xac" +
	"\x7fz\xd6\x9a\x15\xa1\xde\x06\xff\x9e\xcd\xd9\xe0\xe5l\x82" +
	"\xb1\x01o\x89hQ\xc7\x95\xe2\x00\xe4\xca\xf0\xc0h%" +
	".\xa0F\xf4\xbaPt\x892\x97\x81\xad\xa0\xd6\x18\xfd" +
	"><\xabR\xe3\xa3\xaeqpA\xd3e\xad\x90\x08\xee" +
	"\x91j\xad_\x13\xac\x1e\xbf\x891\x0b\x05\x12\xfc\x9b\x87" +
	"\xbe\x04I\x7f0\x87\x94(2\xfe5Nh\xf2dN" +
	"\x09\x09\xfe1\xe2\xb5\xc8C\x99\x01\x8d(\xae\xe0\xf1\x97" +
	"\x88[\xfe\xdc\x99\x01M!\xa1?E\xcab\xf6S\xba" +
	"\xe69\xd0\x10\x80\xe5Ju\xb9\xe8\xf1FFz\x82\x99" +
	"\xba\x19\xb5\xb9\xf4\xe9\x8c\x84\xffZ\xcb\x1f]?s\xc3" +
	"\xd1hS\xad\xb3\x14\xa5\xa2H\xac\xd1\x9a\xdc\xbd\x10\xf5" +
	"\xb5\xe9yF@\xb3\xa5k\xd3\x1bK\x14\xa5B\xc3/" +
	"\xb5!\x0a\x9c\x99\x19y\xa50\x15&\x98\xd9ZQ\xb4" +
	"\x90&@\xc6\xcb~_\xc4\xe0\x0bB\x8d\xaf@T]" +
	"\\\x1c\xad9D\x95<\x9e\xe9\xf3\xa9qJU4!" +
	"\xd3TV\xc84\xbd\x99\x90iKi\xe4Q\x0c\x93G" +
	"\xcbtW9\xb58A3\x87\xbb\x8a\xffPuF\xb1" +
	"\xc6'\xaa\x92\xa8_2i\xdc\x00\xe6\x8fP\xb5|\xa2" +
	"\xea\x12eM\xe0\xacm\xc9\xeb\xcbWJF\x8b\x82G" +
	"#\xe5\xd1d\x8d\\FUw)\xf71\x0eJ\xb5\x1e" +
	"\x12\xbcM\x92\xdd\x05\xa2\xeaWd\xbdL\x06\xd1\xa2\x89" +
	"\xbc\x16FF^)\xad@\x8f\x05\x16(m\xba\\1" +
	"xu\x8e\x1eq\xd2\x94\xb2\xb82O\x0b\xc7\xa2\xd8\xa7" +
	"\xa2\x08\xebf\xc9`\xb6F}:ueA(}%" +
	"|,jY\xd3#\xc2\xf8\x1bf3\xb4\x16\x19W\xe0" +
	"\x98j\x18\xd6\x89X\x0f\xb0\x8d\xf7}\xf9F\x89\xb2M" +
	"T%W4\xa3\x9eF]I\xdeBq\xc5(O^" +
	"\x8e+\xca\xe6\xa2*SO\x97`(\x13eQES" +
	"\xb7\xe1O\xc2\x8a\x9bO\xaf\xdb\x1c\xba\x8e\xa1m\x95\x9a" +
	"\x83\x91~\x91\x88m,T\xcf\xaa\x90\xdcz\xf0\xbfY" +
	"\xab/\xcaJ\xf5)\x85\xa2\xaf\xa5DDV\xa8\xdc(" +
	"\xb1G\x95\xd4gU\xb07U\xcf\xd2U\xe06\x9e'" +
	"\xc9\xcc\xd4\xeb\x0fs\\4eB\xa2?TG\x97\x09" +
	"\x89\x8ca\x9bO\xf33\xcf\xc1\x885\xbe;\x04O@" +
	"l[\xd5u\xccm\xce\x16l^\xa1\xc9\x11w\xaa\xc0" +
	"\\\xb8;G\xd2\xa9\x93\xae\xa1\xeeD\x9c{\x0fu\xe7" +
	"D\x16u\xd25\x94$\x1eq\xee=\x94$~:\x8d" +
	":\x1a\x10J\x12?SL\x9d\x02\x08\x1dq?\x97g" +
	"\x9c\x02h\xb9\xe0q\xc4\x8eo\xae\x18h\xca\x00\xff\x83" +
	"e\x8f[\xcf\xa3\x88\xcb\x95\xb5\x16J\xc6V\xc1l\xb5" +
	"\xf5V\xdcBQ\x0b\xa8r6\x8a\xc7\xb6\xde\xbb\x16\xa1" +
	"\x05\xb1n\x12\x88\xaa\xa210\xbf\xad*\x98\x09O\x9f" +
	"XR\x9b9\x84yY3'\x96\xd2\x9b9\xb1TL" +
	"\xdf\x83\x18\xceR\xe8\x85'\x9f\xc2'\x93\x82u\x82\xf9" +
	"\xbex\xd0\xc88\x98\xd4\x8e\xe8Y\x0a\xfd\xf0\xf0\xa4q" +
	"\x00).V\xcfR\x18\x8c\x07\x9f\x8c2\xde\xed-z" +
	"\x96\xc2p|\xbdQ\x8e5t)k\x0e\xd2\x87\xcb\xb1" +
	"6w\x94\x92>_\x10y\xac\xdax\xc2\xca:\x91i" +
	"+\xa2\x19\xd5\xab\x94Df\xfdi\xa2\xd7\x9c|^\xa6" +
	"\x08\x1eS\x9d3\xeau\x11\x8f\xbb1\xf9(\x924\xea" +
	"\xf3?\xd82d1\\\xe4\x89\x85\xb0\xfb`n<^" +
	"l6AQ=\x1cq\xe3\xbf\x83\xbbu\x14e\xbc\xf4" +
	"\xc2\xed\x92\xab\xa2@qU\x88Ae\xbf\xb5\xe2\x0d\xa9" +
	"t\xealP\xe6\xac\xc9\xa2Sg\x832'\xa2\xe4t" +
	"H\xe6\xd0u\x1eB\xd5\xa5\xe9\xccY\xba\xfa#t\xc6" +
	"\x98\x8c\xda\x88\x9aL\x91U\xa5]\x8a$7\xad\xb9\xd6" +
	"&\x8b\xc2\xe5\x12}\xdaX1\xa5:t\xa2\xb9\xb5\x9c" +
	"\xa7)\xd4E}\xa6\x13\xbe\xecs\xc0m\xcbR+W" +
	"\x14\x7f\x0aj^\xffw\x12\xd5\\\xe5\x8a\xe4\xa2\x13\xd5" +
	"\xce\xd6|\xbf\xfd\xaa\xae/\x7f\xd5R\xa2Z\xb8^\x88" +
	"OpU\xc4\xe9\x9bVt5C\xc6\xc9x\xef\"]" +
	"\xb3\x89\xd2y\xd3X\xa5\x00R\x0d\xa5\x970+\x01\x04" +
	"O\xeb\xcd\xcb\xa3u^KS\x9d7R\xed\x88\xa8\xb1" +
	"WW\x12\xd04\x85r\x072\xca\xd9\xd6\xf9\x14_\xc0" +
	"\xd7\x96y\x8d\xbc\x84,tM\xe0\x88\xb0\xb4n@i" +
	"\xbd\x0d\xc4\xdak\xb4\xb4\xdeMfF\xdc5\x1d\x92\xd6" +
	"{\xc9{\x11wJ\x87\xa4\xf5!\xb2\x9d\xe3\x9c\x87\x01" +
	"?IK\xeb\x13(\x96\x8f\x02\xfe\x05}\xbe\xf4\x14\xe2" +
	"\xc7\x01\xff\x8a>_z\x1a\xf1\x93\x80\x7fK\x9f/=" +
	"C\x9e\xe38\xe7\xb7\x80\xffB\x9f/\xbd\x80\xed\xf9\x0d" +
	"\xf0\xf6\x16\xea|i\xac\x05\xda\xd3\xde\x02\xbb\x90\x85\xba" +
	"-!\xd1\xf2&\xc79\xed\x80_\x09x\xa7\xe05z" +
	"=-\xf0\x9e>\x80\xf7\x07\xbcsg=\xa9\xac\x9f\xe5" +
	"I\x8es\xf6\x07|\x18\xe0\xf1\xf1zR\xd9P\xcb\xbf" +
	"8\xce9\x02\xf01\x80w\xe9\xa2'\x95\xe5Z\xf0\xac" +
	">\xe0E\x80\xdblzR\x99\x03\xf1\x02\xc0\xef\xb2X" +
	"\x82~\x18!_\xe0R\xd4\x8a\xb1>W\xa4\x7fF\x90" +
	"}\xc4\x85&i\xb9\xc9s#d\x8b\x16\x8fX&h" +
	"b\xbe \xc9\x99~\xbf\xe4o\xe2\xdd\x11\xb2E\x12\xa2" +
	"\x89|{\x9d\xfe\xf7A\xa6\xdf\x83M\xbfo2\xbd\xcf" +
	"\xe9#\xa2\xc7\x93Y-\xa8\xa2M\xa6\xcf;\xea\x7f\x1e" +
	"Wj)\x15e\xbf\x98#\x97\x0b\xb2K\xf42\x1cN" +
	"B\xbe@dA'HA\x0a\xd3\xdfG\x8b\x16\xe8-" +
	"\xfd\x0a6E\xa1\xa8[C\xfa\xc20\xd1\xdc&\x11\xd9" +
	"] h\xe5E\x8a\xb5\xc0\xc5~\xc1\xb8R\xfd\xc8\x9d" +
	"?x\xa3\xb5\x89j\xc0 \xae\xc9k\x07\x0cn\xd3\x11" +
	"\x88\"T\xa8\x9c\xe5J\xb5^\xc8\xa4\xad\xdaYD\x9d" +
	"X];k\xa3a\xe2\x14\xb5\xc2\x80\x9c\xafX\xddb" +
	"\x0b\x85o\xbc\xacz\xb4-\x18\x8fc0\x90d\xf5\xfe" +
	"\xf1\xcamy\xcd\xdcBdN\x12n\xe9*\xe0VJ" +
	"A\x15xlB\xf0\x0e`\xba\"\xff\x94\x08\xdd0$" +
	"\xe4\xfa\xa1N\x17\xd6\x0d\x83\xa2\x9d\x1f\x8cg\xdf\x8d\xba" +
	"\x1d\xa1\x8a\xfcCQ#5\xeav\xc4\x10]\xc6e\xe2" +
	"\x8d-\x86\xca\x18k\xd5e\\\x0e\xd2\x1b\x15\xfc\x83\x85" +
	"z\x9a\xdc\xfc\x12RI\xcd7\x9b\x85n\x18\x9b\x84\xef" +
	"7*\xf5\x87*\xf2\x9bo6\xebh\xd1e\x9c\x802" +
	"4\\\xc1\xbf\xb1TQ\xbd\x82\x06:\x81\x1a\xe1\xf0\x97" +
	"\xdcX\x98\x8a#e\xec\xc8\xa1*\xc8\x15@\x81\x06P" +
	"h\xebF7q\x98$X\xb1*\x82$\xa2\x90x\xeb" +
	"i\x0d\x91w\x09\x0a.]7\x88:\xbd\xde\xb8\x1b\x02" +
	"+\xd5\xc9)ng\xb5\xe0\x8b\xe6D\x81J{f\xdd" +
	"\xba#\x8cKQ#\x14gU\xf42\xf1\x165\x12\x9d" +
	"u\xcd\xfaH\xf3\xe5\x845\xd1{\x87$V\xd3%s" +
	"\xd9n\xef&\xbe\x197\xe5\xf1\xa0O?\x9a\xcb\x86\x0a" +
	"\x812\x90\xa9t\xcc*\\eV\x92+F\x0b\xfe\xf2" +
	"6\x9d\xdaHq\xfa<\x92\xf6\xff\xdd\xd3\x97\x94\xb6\x8b" +
	"\xca\x91>\xbbQ\x94\x18,n\xe5\xd4\"\xb3\xfa\xc2\x1f" +
	"\xaa\x062\xd2#\x89V\xb9\xc9\xd5\"Y\xcd\xdcm\x95" +
	"\x17Q}#\xa4\xad\x0d@\x09a\x18\xbf!m\xcdT" +
	"}\x83\xba\xdb*\xbd\x99\xbb\xad\"\xef.\x09ik\xa6" +
	"\xab\x1b\xc3\xdaZ.\x0a\\\xd6\xddV\xa9\xcd\xdcm\x95" +
	"\x1a!\xf9B\xda\xda$\xecoX\xf259\xba\xee\x87" +
	"%#G\\D\xa8W\x05\x09\xbafBe<\"~" +
	"N\x8c\xfc\x19\xbe \x99UB\xa4\xc5:$\xa1\xc2\xf2" +
	"S\xa9\x1f\xe6B\"Qh\xe8\xa2K\xf2\x89\x99\x01M" +
	"\x19\xa9xK$\xb9\xc9\xd5\xb8\xc5\xacu\x95\xceZW" +
	"y\xac\xf3eT\x01\x11\xe6\x1d(\x19~\xc5K\xa7\x18" +
	"\xa8\xd8\x9eH\xb6VE\x9f\xa7v\xa4\xe2\xa6\xd3]Z" +
	"/\x1e\x1a\xb4\xee\xadz\xa9\x8b\xff\x17\x8c\xfbP\x05\xdd" +
	"\xb7\xff7\x8c\xfb:\xd0J\xfcRM\xdb\xfd\xd9\xc0\xb4" +
	"\xa3\x0b\xc6g\xe0\xbaN\x8b\xc6\xfbO\xc5\x98\xcc<O" +
	"\xc5\x9c\xa29\x9a\xadV\x89\xaaSr\x8b\xfa1sb" +
	"\xae\xf9\xb8\x96b\xa3\xd0\xd7\xbd\xf3\xa9\xb3\xb7\xa1\x99\xa8" +
	"]L\xc5}B31{\xaa\x11\xf7\x09\x8aCA#" +
	"\x9a\xe0\xaa(\x95<Z\x1cuoM\xa3\xecsa\xa5" +
	"\x0eR\x11\xbc\x93\x9f.\xeb\x81O\xba\x04\xe2\xd7J\x83" +
	"\xcd\xa4\x9fs\x09~\xad\x94\xcb\x08^\xe5\xdf\x86\xb3\xe0" +
	"e\x92<R\x08\x06\xd7Z\xf3bd\xb5r-o\xa3" +
	"+t\xe2\x92\xb2\xc6\xcdUF\xf4\x8c1\xaf\xd8\xda^" +
	"\x1a\xd6\x14\xdc\x8a\xab\x89\x9e\xd0.\xda\x1b!\xf0B\x88" +
	"\xb1\x8c\xf3\xc8\xadu\x900n\x05e\xedfu\x82[" +
	"?\xa2\xdcb\xf1\xb0\xd8\xd6\xca\x8ec%\xb8\\M$" +
	"\xde(.\x07\xa5\x0c!\xb3\x12\xc3\xf2\x81F\x13\xa3Q" +
	"U\xa1\x96\x8b&\xb2K\x85\xfa\xac\x82\x91\xfe\xd9F\xf7" +
	"|\xe8\x14\xe1\x04E\xf5\xb8\x9d\xa2\x1aW\xa5\x9b#\xd4" +
	"\x0d\xe1\xe9\xac\x1b\xc2/\xa3\xaaw\x868\xf0B\x1e\xeb" +
	"\x86\xf0\x12\xfa\xda\x81\xd0\xd6\x1d\x8b[n\xb8PX\xc8" +
	"-\x1e\x8f6\x88\xe1u\x0f\xb9\xc5\xbb\xa2\xc6`\xd4\x03" +
	"\x0b\xd6\x0b\xe5{\xe2Nox\xdd\xdb[\xf5\x9d\xbb\x17" +
	"\xfa\x89\xc2\x9aGFI\xa0\xb4\xd4H!\xa3n#m" +
	"\xf4(r\x99y\x9aP\xa7WkGrq`s6" +
	")Cn\x1bI\xc3\xfa\xbd\x10\x91\x9b\x14\xeb\xb2\x88\x0c" +
	"\xbf&h\x01\xbf)\x04\xe9\x1f\xc7\xa5\xc8X_\xb7\x0d" +
	"\x8en\xccV\xe2\xa2\xa9\xec\x9c\xc4\xaa\xe5\x9a\xc4\xaa\xe5" +
	"\x9a\xc4\xaa\xec\x9cE\x17s\x0dnSg\xd2\xe9b\xae" +
	"\xc1\xb0\xd7\xd9)t1\xd7`\xd8\xebB\xba\x11\xf6\x82" +
	"\xe5\xa0\x0a\x9a\xa2R#\xd2\xb6\x0bq\xa2\xcb-l\xae" +
	"\xceT\xcb\x11vv}\x16V%\xb4\xbc\x96*\xa1\xcd" +
	"\xa5\xf2\x09f\x97\x18\x9b\x8d\xf9ho\xad\x12hr\xfe" +
	"V/*\x1c,\x84\xdflF\xa4\xae\xb0\xfbe\xf6\x8d" +
	"\x841-\xfbx\xb2\xc5\x14\x0f\xa3\x94`z+\x1e\x9e" +
	"\x0c\xbfG\xd1\xa8\xc0\x10\xeb\xa0\x7fT\x95\x8d\x03^\x91" +
	"\x8b\xc6\x193\xa5\xb5+\xa1#\xea\x0e\x08\xa8\x8a\xca~" +
	"\xce\x16\xf0\x1a)\xabm\xbc\x10\xabP\x90\xdd\x8a\xb7P" +
	"$\x95\xa6\xc1\xe9\xddJ\xb6C\x1cU\x92\xc4\x16Q\x8f" +
	"\xa4um\x074\xa5L\x9fO\x14T\xac\xee\xf6\x87+" +
	"t\x15\xd2WqE\xaa_\x91\xc3\x10m]=S\xbd" +
	"\x01\xc1\xed\xf4\x89\x1e\x9b\xc7)j-\x14\xfd\xd1/\xd0" +
	"mF\xdbd;\x1e\x14M\xc0\x0a\xa5\x9c\xb5\xf5\xd1\xca" +
	"\x17UW\xb9 k\x05\x01\xf8\xbf_l\x92\xc5\x90\x16" +
	"u]\x0b\xa6\xdd\x91fh\x91\xa6\\\x11\xac\xde\xecQ" +
	"\xe8\x03\x1a\xac5\x90\x82w\xcc\xb7\xd5\xef\x0a\xebQ\xb7" +
	"\xa0\x9bt\x88\xe9\xa0\xa030B\x1d\xa2}\x11F\x87" +
	"\xb2\x8c\x0e1\x83\xe6`V\x98\xba\x95\xa1)\x11\xe5M" +
	"]\xe5\x82Z\xd6\x96t\xa5\x91\xe5\x82:R\x15\x05\xab" +
	".K\x8b\xc2\x9e\x80\xe1\x16\xb0\xbc\x87Y\xac\xc49\xda" +
	"By\x02r\x10\xcf\x06\xbc\xc0By\x02\xf2-\xa0\x07" +
	"\x8c\x01|\xa2\x85\xf2\x04\x8c\xb7\xa4\xd1q\x89\xb0:1" +
	"\xc9\x02z@\x11\xe0\xf7Z(O\xc0d\x0b\xfa\x1c\x01" +
	"w[(O\x80\x80\xdf\xbd\x17p\x8f\x85\xf2\x04H\x88" +
	"\x97\x03\xaeY(O@%~\xd7\x03x\x0d\x1d\xb7\x09" +
	"X\xf0\x109\xe0\xf7\xd3q\x9bZ\xc45\xc0\xa7\xd3q" +
	"\x9bi\x88\xd7\x00>\x8b\x8e\xdb\xcc@\xfc~\xc0\xe7\xd2" +
	"q\x9b\xd9\x88O\x07|\x01\x1d\xb7\x99\x87\xed\x99\x05\xf8" +
	"B:nS\x8f\xf4s\x01_\x02xB\x82^\x0c`" +
	"\x11\x8e\xc3\x02\xc0\x97\x01\x9e\x98\xa8\x17\x03X\x8a\xfd]" +
	"\x02\xf8j\xc0\x93\x92\xf4b\x00+\x11_\x01\xf8F\xc0" +
	"y^/\x06\xb0\x1e\xe3B\xeb\x00\xdff\xb1\x10b\xd7" +
	"k\x01l\xc5\xd7o\x04x\x87\xc5\xc2\xf4\xa2F}\xf6" +
	"*\xf2\xfcT\x8bg\xd0\xfc\x9a\xa0j\xc5\x8aL\xdb\xf9" +
	"\xac\x13Y\x11g\xcb\x9a=\x11E\x9fu\xa2ND\xd1" +
	"\xe7\x9eL\xa7\xa3\xa83T\x91'\xa2\xa2=>\xa6\x05" +
	"4\xc5t\xedG\x1bK\x1ecRd\xbe\xe8\xc5\x93\x14" +
	"\xcdg\xae\xb6\x9c|F\xe5\xc91\xab\xb4\x9a\x8aS\xeb" +
	"\xaa\x0au\xabC\xe6\x9d\x95\x95\xdb\xe3g\xb6T\x82\xad" +
	"\xc9e)\x82K\x13C7\xa6\xd8B\xd7n\x0e\x0b\x0b" +
	"\x8c\xa5\xe8b[\x08\x0a\xfc\x0a\xeaV\xe2\xe5\xe8\xc1[" +
	"\x06\xf0:\xfaV\xe25H\xbe\x02\xf0\x8dt\x0cd=" +
	"\xc6\"V\x03\xbe\x85\xbe\x95x\x13\xd2\xaf\x03|\x1b]" +
	"\x1b}+\xda\x19[\x00\xdfE\xd7F\xdf\x89v\x86\x11" +
	"w\x0e\x15\x0f\xd9\x8d\xef\xd9\x01\xf8\x1b\xf4\xad\xc4{\xf0" +
	"\xbb\xbb\xc2q\xe7P\x0c\xe4\x10\xe2\x07\x00?J\xdfJ" +
	"|\x04\xed\x15#\x1e\x1d*\x1er\x02\xe3\xdaF\xdc9" +
	"T<\xe44\xb6\xc7\x88;\x87\x8a\x87\x9cA\x0f\xe4\x17" +
	"\x80\xff@\xa8\xe2!gq\xdc\xc2\xf1\xe8H&c\xdd" +
	"\xaeJ\xaf3S\x00$\"^\x12\xaeM\xdb\xfc\xb1Q" +
	"zeD^\x85`J\xb67\x9d\x01\xf5\xa9\x92WP" +
	"ks\xb9\x14\xf7m\x92\x87\xb6\xad\\\x8a\xec\x16TR" +
	"\x9b\x8b\x7f\xa0>\xac\x8cV\xbcT\xb6\xad,\x94x\xa8" +
	"SL\x1e\xc1\xaf\x8d1\x1d\x11\x8b\xb6\x92\xd6\x18\x1b\x8c" +
	"A4\x89\xa8j+\xda\xab\xe9\xb2\xe0p\xe1\xc0\x94\x08" +
	"\xf7\x81\xcd\xa5\xf8\xdbre?n\xf0#=qM\xeb" +
	"\x1f\xb5Z\x0d\x88\xa5\x1c\xe8\x05\xc7\x04O\x9bt|0" +
	"M\xc7\xcbBU\x9c yZ\xa8L\xdaR5\xbb\xe6" +
	"\x0boe)\x8a\xa7\xd5\xa4\xc4\x84\xc6>\xab\xb6\xdeY" +
	"\x19\xc89\x10\xf5\x95+\x85\x82\xe4\x1e\xabh\xe2\xfff" +
	"\x9es[\xaf\xf2\x9a*\x08\xaaS\x14TWy\xa1\xe8" +
	"\x0f\xc4y\xf43\x08T\xdd\xe3B\xe3\"\x9f\xf0\xed\xd7" +
	"y\xd4\x8d\xb6!I\xbe/\x8f\xba\xbc6d\x89\x1e\x9c" +
	"B%\xc4\x06\x83\xc0\x91\x17]\x07#\xc0\x89'R)" +
	"\xcf@\xe8\x9e\x96Sy\x86\x13\xa0\xe5\xdb\xbf\x1b\xfdb" +
	"\xd3\"\xc8r\xc0\x1b\xbc \x85\xa3\xbd#\x92\xe0\x19\x1b" +
	"\xe0l\x91\xb6zS\x8f\x99i\x19h\xa2\xd7\xa9\x09Z" +
	"\x9b\xf2\x1b\x8c\xd3\x0b\x86\xdb\x84Z\xc3I\xac5\x9c\xc4" +
	"2\xb3\x92(\x97d\xcb\xc5}\xa3\xdb\xb5\xf3\x14\x89\x98" +
	"/\x81\xcab\x85\x1a\xd2X\xa1\x86B*\xaa\x10\xd2\xf9" +
	"#\xae\x86\x0a9q\xb6\xa6\x1b\x17\xf3\x85B\x0d\x0d\xa9" +
	"F\x1e\xa1~\xba\xd6\xb0wL\xf2\x89\xbd9\x18\x87F" +
	"M\xa5\x0a\xdb\xa8\xbe\x14\xe0\x91\xe1,\xd1\xea\xd1\xa2\xbd" +
	"?'\xa1\xf1\x8e\xd5\x83\xc6<\xb4\xf9\xb7\xe3Q\x97|" +
	"\xd5\x95$A\x16\xcaD`\x9f\x00\xf1Gs\xe9'3" +
	"\x03>\xcb0(Ip\xd4\xff\x1f\xf6\xde7F\x8e\xea" +
	"\xdc\xf3\xaf\xea\xb6\xbbM\x80\xb4=\xeeq\x0c\x97\xa4m" +
	"\xc7$xb\x12<\x1e'01\xb7=\xe31x&" +
	"30\x9e\x1e\x07{b\xeeuu\xd7\xe9\x99b\xaa\xab" +
	"\xdaU\xd5\xf3\xef:\x19 &1\x09$vb'&" +
	"1\x89M\xcc\xbd\xe4\xca\x91\xe0\x0a\xf4\x83+\xa3\x9f\x91" +
	"l-D\xf6]\xb3\x82\x95Y\x19\x09$\x90`\x97H" +
	"\xa0%\xba\xb0\";\xab\xe79]u\x9e\xaa\xae\x9e\xae" +
	"v\xb2\x9b\x17\xbboF\xea\xcfTWWW\x9f:\xe7" +
	"9\xe7|\x9f\xefSj\x13s\xb2\xe0\xcd\x9c51\x89" +
	"X\x98\x1d\x1bl\x92\xben\xb6\xc0\x05\xaezo\xb1\x92" +
	"\x96iEYI\xb1\x1a\xb8z\xf2\xe5\x01\x1a\x07@X" +
	"\x16P\x0f\xd4\xad\xa0\xb8\xa0Q\xd5\xdb\x0c\xcb\xd5\x96\xf0" +
	"\x09\x9d\xa7\xb75\xb8\xd7^\x13/\x0d\x89\xb9\xae\x7f\x9e" +
	"\x9e\x9aw\xea\x0a]\xd3\xa0\xa5\x15\xc2\xb6\x04\xeb\xeb\x06" +
	"\xb6\x94\xaa\x95\x1f\xebx\x93\xd7\xbb3\xf4\x8c\xd0x=" +
	"\xe9D\x92\x95\xa0\xed\xc1\x0c\xca\x8dtK-\xd7\xc2\x94" +
	"\xb3\x05\xa6\x9c-dj\xbc\xa7\x05B\xb62\xf0\xbd-" +
	"B\xed3\xdd\x02\x11\xa7\x03\xf8\xde\x16\x12\xe9~\x1b\xf9" +
	"\x14\xf0}-$\xd2\xbd\x0fO\xbf\x17\xf8\xfe\x16\x12\xe9" +
	">\x80\xbe \xfb\x80\x1fh!\x91\xee\xc3x\x9e\xfd\xc0" +
	"\x0f\xb5\x90H\xf7 \xf2\x87\x80\x1fi!6y\x87\x91" +
	"\x1f\x00~\x14\xf8\x15\x8bx\xa4\xfbH\xcb=\x10\xa9\x03" +
	"?\x01\xfcSW\xf0H\xf78\x1e\x7f\x14\xf8\x13\xc0\xaf" +
	"\xfc\x14\x8ft\x1fG~\x0c\xf8I\xe0W]\xc9#\xdd" +
	"\xdf\xa2\xaf\xc9\x09\xe0O\x02\xbf\xfa*\x1e\xe9\xfe\xae%" +
	"\x0f\x91:\xf0g\x81\x7f\xfaj\x1e\xe9>\x83\x9f\xfb4" +
	"\xf0\xd3\xc0S\x9f\xe63\xe3\xe7[ \x92>\x05\xfcE" +
	"\xe0\x8bS|f|\x16\x8f?\x03\xfc\x02\xf0%\x8b\xf9" +
	"\xcc\xf8<\x1e\x7f\x0e\xf8E\xe0-K\xf8\xcc\xf8U<" +
	"\xfe\x15\xe0o\x00_\xda\xc2g\xc6\xaf\xe3\xf1\x97\x80\xbf" +
	"\x03<\xbd\x94O\x8d\xdf\xc6\xe3\xdf\x02\xfe>\xf0\xd64" +
	"\xb7\xc9\xfb\x03\x1e\xff\x1e\xf0\x8f\x80/k\xe56y\x7f" +
	"\xc4\xe3?l\x89\xcbCKc\xf2\x92\xcf,\xe3.y" +
	"\x7f\xc2\xc3?\x81\xc3\x17\x01_\xfe\x19\xee\x92\xb7p)" +
	"\xee\xa3,\x8d\xcb\xb9\xc5\xc0\xafY\xce]\xf2\xae^\x0a" +
	"\xc7_\x05|9\xf0k\xaf\xe1.y\xadK\xd1\xd5\x0a" +
	"\xf8u\xc0\xff\xe6Z\xee\x92w\xcdRhm\xcb\x81\xaf" +
	"\x06~\xdd\xdfp\x97\xbc\x95K\xe1g\xb9\x0e\xf8\x0d\xc0" +
	"?{\x1dw\xc9\xbb\x1e\xcf\xb3\x02\xf8Z\xe0\x9f\xfb," +
	"w\xc9[\xb3\x14\xa5\x1d\xc0;\x80g>\xc7]\xf2\xd6" +
	"\xe1\xf1k\x81\xdf\x0c|E\x86\xbb\xe4mX\x0a\x13\xa2" +
	"\x9b\x80o\x04\xber\x05w\xc9\xbbe)\x8a\xd7\x80\xf7" +
	"\x00_\xb5\x92\xbb\xe4u-\x9d\x91\xa4\xdc&\xe0\xfd\xc0" +
	"?\xbf\x8a\xbb\xe4\xf5.\x85\xe6\xb0\x15\xf80\xf0\xd5\x9f" +
	"\xe7.y\xdb\x90\x0f\x02\xdf\x05\xfc\xfa\xd5\xdc%o'" +
	"^\xe7\x0e\xe0*\xf0/\\\xcf]\xf2\x14\xbc\x0f\xbb\x81" +
	"\xeb\xc0\xbf\xf8\x05\xee\x92\xa7\xe1}P\x81\x97\x81\xdf\xf0" +
	"E\xee\x92W\xc2\xf3\xe8\xc0\xa7\x80\xaf\xb9\x81\xbb\xe4U" +
	"\xf0<\x0e\xf0{\x81\xb7\xad\xe1.y\xdf\xc6\xfb0\x05" +
	"|\x1f\xf0/\xb5q\x97\xbc\xfb\xf0>\xec\x05\xbe\x1f\xf8" +
	"Z\x99\xbb\xe4=\xb0\x14&\x86\xfb\x80\x1f\x00~\xe3\x97" +
	"\xb8K\xde\xc3\xc8\x1f\x02~\x04\xf8\x97\xd7r\x97\xbc\xc3" +
	"\xf8}\x0f\x01?\x06\xfc+7r\x97\xbcG\xf1\xfcG" +
	"\x80\x9f\x00~\xd3\x97\xb9K\xde\xf1\xa5\xd0=\x1c\x05\xfe" +
	"\x04\xf0u_\xe1.y\x8f/E\x93N\xe0'\x81\xb7" +
	"\xdf\xc4]\xf2~\x8b\xed\xed\x09\xe0O\x03_\xbf\x8e\xbb" +
	"\xe4=\x85\xe7?\x09\xfcY\xe0\x1d\xed\xdc%\xef\x19\xe4" +
	"O\x02?\x05|\xc3z\xee\x92\xf7\x1c\x9e\xe7Y\xe0g" +
	"\x80\x7f\xb5\x83\xbb\xe4\xbd\x80\xfc4\xf0s\xc0\xbf\xb6\x81" +
	"\xbb\xe4\xbd\x84\xd7y\x06\xf8\x05\xe07\x7f\x95\xbb\xe4\x9d" +
	"\xc7\xfb|\x0e\xf8E\xe0\xb7|\x8d\xbb\xe4\xbd\x8a\xf7\xe1" +
	"\x15\xe0o\x00\xef\xbc\x99\xbb\xe4\xbd\x8e\xfc\x12\xf0w\x80" +
	"\x7f\xfd\x16\xee\x92\xf76\xb6\xb7\xb7\x80\xbf\x0f|c'" +
	"w\xc9\xfb\x03^\xff;\xc0?\x04~\xeb\xd7\xb9K\xde" +
	"\x07x\x9e\xf7\x81\x7f\x02\xfco7r\x97\xbc\x8f\x91\x7f" +
	"\x04|A:&/\xc9\xde\xca]\xf2\xe4t^\x92\x86" +
	"\xd2q9w\x15\xe0M\x7f\xcbM\xf2\xae\x00\x9c[\x04" +
	"<\x0d\xbc+\xcbM\xf2\x96 _\x0c\xfc:\xe0\xdd\x9b" +
	"\xb8I\xde5\xc8\x97\x03_\x0d|s\x177\xc9[\x89" +
	"|\x05\xf0\xb5\xc0{\xba\xb9I\xde\x1a\xe47\x00\xef\x00" +
	"\xbee37\xc9[\x87\xfc&\xe0\x1b\x81\xdf\xd6\xc3M" +
	"\xf2nI\xc3m\xee\x00\xbe\x09\xf8\xed[\xb8I\xde\xad" +
	"ih\xe6\x1b\x81o\x05\xbe\xf56n\x92\xb7%\x0d\xb7" +
	"g\x13\xf0~\xe0\xbd\xb7s\x93\xbc\xde4\xdc\xce\xad\xc0" +
	"\x87\x81\xf7m\xe5&y\xdb\xf0\xfc\xfd\xc0w\x00\xffF" +
	"/7\xc9\xdb\x8e\xe7\x19\x04\xbe\x0bx\x7f\x1f7\xc9\xdb" +
	"\x99F3Q\xe0\xbb\x81\x0f\xc4\xb8I\xde\xddih\x9e" +
	";\x80\xab\xc0\xef\xf8\x067\xc9S\xd2\xf8\xf8\x02\xd7\x81" +
	"\xdf\xd9\xcfM\xf24\xbc\xfe1\xe0\x0e\xf0\xc1\x01n\x92" +
	"\xb7\x07?W\x07>\x05|[\x9c\x9b\xe4U\xf0s\xcb" +
	"\xc0\xf7\x02\x1f\xba\x83\x9b\xe4M\xe3\xf9\xa7\x80\xef\x03\x9e" +
	"\xbb\x93\x9b\xe4\xdd\x87\xe7\xd9\x0b|?\xf0\xe1An\x92" +
	"\xf7\x00\x9e\xe7^\xe0\x0f\x01\xdf\xbe\x8d\x9b\xe4=\x88\xe7" +
	"\xd9\x0f\xfc\x10\xf0o\x0eq\x93\xbc\x83i\xe8\xde\x0e\x00" +
	"?\x0a\xfc\xae\x1c7\xc9{\x04\xaf\xff\x08\xf0\x13\xc0w" +
	"\x0cs\x93\xbc\xe3i\xe8\xe6\x8f\x01?\x09|\xe7vn" +
	"\x92\xf7[\xbc\xffO\x00\x7f\x1a\xf8\xc87\xb9I\xdeS" +
	"x\xffO\x02\x7f\x16\xf8\xb7\xee\xaa\x9a\xe4\xe1\xfd|\x12" +
	"\xf8)\xe0\xbbvp\x93\xbc\xe7\x90?\x0d\xfc4\xf0\xbb" +
	"wr\x93\xbc\xe7\xf1sO\x01\x7f\x11\xf8\xdf\x8dp\x93" +
	"\xbc\xb3x\xfe\xd3\xc0\xcf\x01\xff\xfboq\x93\xbc\x97\xf0" +
	"\xfa_\x04\xfe\x0a\xf0\xdd\xbb\xb8I\xde\xcbx\xdf\xce\x01" +
	"\xbf\x08\\\xb9\x9b\x9b\xe4\xbd\x8a\xfc\x02\xf0K\xc0\xf3\x7f" +
	"\xc7M\xf2^\xc3\xf3\\\x04\xfe\x16\xf0\xc2\xdfs\x93\xbc" +
	"7\x91\xbf\x01\xfc=\xe0\xeann\x92\xf7.\xf2w\x80" +
	"\x7f\x08\x9c\xad\xe3&y\x1f \x7f\x1f\xf8'\xc0\x8b\x0a" +
	"7\xc9\xfb\x18\x7f\x97\x8f\x80/h\x8d\xc9KFUn" +
	"\x92'\xb7\xc2\xef\xf8\x09\xf0E\xc0\xc7\x187\xc9[\xd8" +
	"\x8a\xc3o+\x0c\xbf\xc0\xb5\"7\xc9\xbb\xba\x15\xba\xe7" +
	"\xab\x80/\x07~\xcf(7\xc9km\x85\xef\xb5\x18\xf8" +
	"u\xc0\xc7\xc7\xb8I\xde5\xad\xf8\\\x03_\x0d\\\xd7" +
	"\xb8I\xdeJ\xe4+\x80\xaf\x05^\xba\x87\x9b\xe4\xad\xc1" +
	"\xf3\xdf\x00\xbc\x03\xb81\xceM\xf2\xd6\xb5\xa2\xa9$\xf0" +
	"\x8d\xc0M\x9d\x9b\xe4\xdd\x82\xd7y3\xf0\x1e\xe0\xe5\x12" +
	"7\xc9\xeb\xc2\xf3o\x02\xde\x0f|\x8f\xc1M\xf2z\xf1" +
	":{\x80\x0f\x02\xb7Ln\x927\xd0\x0a\xeda+\xf0" +
	"a\xe0v\x99\x9b\xe4m\xc3\xf3\x0c\x02\xdf\x05\xdc\xd9\xc3" +
	"M\xf2v\xb6\xe20\x0b\\\x05^\xb1\xb8I\x9e\x82\xc7" +
	"\xef\x06\xae\x03\x9f\xb0\xb9I\x9e\x86\xd7?\x06\xdc\x01>" +
	"\xe9p\x93\xbc=\xc8\xcb\xc0\xf7\x02\x9f\xaap\x93\xbci" +
	"\xe4S\xc0\xf7\x01\x9f\x9e\xe0.y\xf7\xe1\xf5\xef\x05\xbe" +
	"\x1f\xf8\xcc\x02\xee\x92\xf7@+\x0c\xbf\xf7\x02\x7f\x08\xf8" +
	"?Lr\x97\xbc\x07[\xf1y\x04~\x08\xf8\xde)\xee" +
	"\x92w\x10\xcf\x7f\x00\xf8Q\xe0\xdf\x9eN\xcb\xdf\x86\xe7" +
	"\xb1\x15\xda\xff\x11\xe0'\x80\x7fg&-\x7f\x07\x9eG" +
	"<\xcf1\xe0'\x81\xcf\xfeCZ\x9e\x85\xe7\x11\xcf\xf3" +
	"\x04\xf0\xa7\x81\xdf\xbb7-\xdf\x0b\xcf#\x1e\xff$\xf0" +
	"S\xc0\xef\xfbvZ\xbe\x0f\x9e;<\xfeY\xe0g\x80" +
	"\xdf\xff\x9d\xb4|?\x0c\x8fx?O\x03?\x07\xfc\xbb" +
	"\xb3i\xf9\xbb\xf0|\xe1\xf1/\x02\x7f\x05\xf8\xbe{\xd3" +
	"\xf2>x\xbe\xf0\xfc\x17\x80_\x02\xfe\xc0}i\xf9\x01" +
	"x\x8e\xf0\xf8\x8b\xc0\xdf\x02\xfe\xbd\xfb\xd3\xf2\xf7\xe09" +
	"\xc2\xf3\xbf\x01\xfc=\xe0\xdf\xffnZ\xfe><Gx" +
	"\xfc;\xc0?\x04\xbe\x7f_Z\xde\x0f\xcf\x11\x9e\xff}" +
	"\xe0\x9f\x00\x7f\xf0\x81\xb4\xfc <G\xc8?\x02\xbe`" +
	"YL^\xf2\x83\xef\xa5\xe5\x1f\xc0s\xb4\x0c\x86\xc1e" +
	"0\x0c\x02\xfe\xe1\xf7\xd3\xf2\x0fa\x18\\\x06\xa7_\x04" +
	"<\x0d\xfc\xa1\xfdi\xf9!\x18\x06\x97a%T\xe0\xd7" +
	"\x01\x7f\xf8\xc1\xb4\xfc0<.x\xfcr\xe0\xab\x81\xff" +
	"\xe8\x07i\xf9G\xf0\xb8\xe0\xf1+\x80\xaf\x05\xfe\xe3\x1f" +
	"\xa6\xe5\x1f\xc3\xe3\xb2\x0c\x87A\xe0\x1d\xc0\x0f<\x94\x96" +
	"\x0f\xc0\xe3\x82\xc7\xdf\x04|#\xf0\x83\x0f\xa7\xe5\x83\xf0" +
	"\xb8\xe0\xf17\x03\xef\x01\xfe\x93\x1f\xa5\xe5\x9f\xc0\xe3\xb2" +
	"\x0c\x1e\xbbM\xc0\xfb\x81\xff\xf4\xc7i\xf9\xa7\xf0\xb8," +
	"\x83\xc7\xa2\x07\xf8 \xf0C\x07\xd2\xf2!x\\\x96A" +
	"s\xdb\x0a|\x18\xf8\xe1\x83i\xf90<.\xcb\xa0y" +
	"\xf6\x03\xdf\x01\xfcg?I\xcb?\x83a\x10\xcf?\x0c" +
	"|7\xf0\x9f\xff4-\xff\x1c\x86;<\xff\x0e\xe0*" +
	"\xf0#\x87\xd2\xf2\x11x\x8c\xf0\xfaw\x03\xd7\x81?r" +
	"8-?\x02\x8f\x11~\xae\x0a\xbc\x0c\xfc\x17?K\xcb" +
	"\xbf\x80hu\x19F\xab\xc0\xa7\x80\xff\xf2\xe7i\xf9\x97" +
	"0\xdc\xe1y\x1c\xe0\xf7\x02?z$-\x1f\x85h\x15" +
	"\xef\xc3^\xe0\xfb\x81?\xfaHZ~\x14\x1e#\xbc\xce" +
	"}\xc0\x0f\x00\xff\xd5/\xd2\xf2\xaf *\xc5\xf3<\x04" +
	"\xfc\x08\xf0_\xff2-\xff\x1a\xa2\xd2e\xf0\xb8\x1c\x02" +
	"~\x0c\xf8\xb1\xa3i\xf9\x18D\xa5\xcb\x1e\x83\xc7\x05\xf8" +
	"I\xe0\xc7\x1fM\xcb\xc7\xe1q\xc1\xdf\xf7\x09\xe0O\x03" +
	"\x7f\xecWi\xf91x\\\x96\xc1\xf0\xf8$\xf0S\xc0" +
	"\x7f\xf3\xeb\xb4\xfc\x1bx\\\xf0\xf8g\x81\x9f\x01~\xe2" +
	"XZ>\x01\x8f\xcb2h\x86\xa7\x81\x9f\x03\xfe\xf8\xf1" +
	"\xb4\xfc8<.x\x7f\xce\x00\xbf\x00\xfc\x1f\x1fK\xcb" +
	"\xff\x08\xd1$\xde\x9fs\xc0/\x02\xff\xa7\xdf\xa4\xe5\x7f" +
	"\x82\xe1\x08\xcf\xf3\x0a\xf07\x80?q\"-?\x01\xd1" +
	"$\x1e\x7f\x09\xf8;\xcb\x02eypg\xc4\xa9\xd0u" +
	"3\x9f_\x8dB\xf6\x1b\xe3J\x81\xe4D\x17*\x96R" +
	"\xa0\xd2\x82\x94Bw\x1a\x15\xb29\x99R4j\xddg" +
	"9ZQ)8R\xaa\xa8+\xa3\xf2\")&/\x82" +
	"c\xc8.'\xbc\x10\x89\x08\xbc\x1a\x1d\xcd\xbb\xb0\x98\xed" +
	"XRR+P\x81\xcd\xa8\xad\x9b\xce:\xc9/&q" +
	"\xb1<\xa1\xd9Z\x9el\xc3\xb8\xffi\x0f\x7fC{\xdd" +
	"7\xac\x0f\x7f\xc3\xfa\xbao\xe8\x08\x7fCG\xdd7l" +
	"\x08\x7f\xc3\x86\xbao\xf8j\xf8\x1b\xbeZ\xf3\x86Y\xa5" +
	"2\xea?r\xc2\xd4T\xbf\xe5bJ![\xc9\xb3y" +
	"e\xd4\xd6f\x88\xbd\x93\x82\xa7\xa6\x0b\xe5p\x0c=i" +
	"&\xaf\x8cNZ\xd4\x95\x91\xa9\xa5QE\x8a\x97\x9c " +
	"\xb4\xa4\xacR`J\xed?\xf2R\xd2T\xa7k\x0fO" +
	"\xd2\xfd\xeb\xbcb\xa9\xf0\xc1~\x0fHK\x9dP\xf4\x0a" +
	"\xfdBy\xd3\x1c\xf7\xc9\x89\x9d\x80\x9c\xd8cb\xd3{" +
	"\x16\xab:\x89\xa5\xb9\x0c\xee\x8a\xbb\x8du\xae\x80\xce\x1e" +
	"\xac(e\x8a\xac\xe0\xd8\xc2\xf2d\xca\xb1\x14\xb54*" +
	"e|\x02x\xc1\x93\xe4\xcb\xfa\xb58\xf1\x82U\xaf\x88" +
	"\"\x7fi\x8fI)\x8d\x89|\x1d\xffFdFe\xba" +
	"2M\x9b\x80\xaa\xd9\x8e&\xa5t\x9d\x89\xebVM\xc7" +
	"\x1e\xd3\x98\xee\xcf\xbc\x88\xab\x16\xd5\x8d\x17\xc6\x9d\xe92" +
	"]\x82D\xa6\xb3\x09)\xc9t!\x0b`:+\xa9\xa5" +
	"QGJ\xd2\x16U\xa5\xbe\x9f;\x83\xce\x9eB\xd3\xc3" +
	"\x85\x86\x8a\x94,9\xebBi{(]\x1fJ;\x82" +
	"\xb4\x04mg](m\x0f\xa5\xebC)9\xafY\xa8" +
	"\xd8\xacX\x94\x92Lt8\xf1\"\xf9B\x13\x86\xa9Z" +
	"&-\xea\x95\x19Sl'\xe4\x0e\xc6\xc5\xa6\x05I:" +
	"\xc8Xl\x94\x89\x12\xbbZ\x81\x94$\xd5\xd4\xa2\xa6\xfb" +
	"M+\x0a\x01\xd1\x0a\xb0\xc0\x83\x90\xd1\xb5\xd11Q\x02" +
	"S7-\"\x116-6j\x99\x15I\x16\x17PR" +
	"F\xb5B\xa8S\xef\x1c\xbc\x80\xeb\xa3\x1b\xd2\x9eUk" +
	"\x96\xf9.}\xae\xa48,\xa0\x15\x99\x1bc\x96i\x17" +
	"MK\x1ee%Se\xbaD\xab\xc2\xe1\x12\xb8\x14\x17" +
	"OZ\xbc$\x9e\x03~[\xc9K\xcboLf@+" +
	"\xd6e\xd3b0\x94Hn3\x8f\x97\x89\x03\xafe\x16" +
	",\x14\xae\x89{c)\x05\xf2d[\x8aA\x9e5\x8b" +
	"\x15j\x0a\xd5Y\xac\x80\x8f\xb3\x9f\xed\xa99\xcef\xba" +
	"\xee~\x96\xeb=iW\x8b\x9c\xd3\x84P_\x8f\x8ag" +
	".\x99j\xa0\x0f\xf7\xb0_*\x9f\xb1\xa9)-oW" +
	"\xc1\xa6\xc9\xad\x8e\xed1\x0d\x9eW\x92\xd7\xe5X\xda8" +
	"s\xc6\xa4\x8ceV\x88\x04\xd4v*\x86\xc5lM\x8a" +
	"\x93ML\xbbR*\x99\x06S\xfd\x834\xdf\x85\xb7\xc7" +
	"5)\xa9\x0bo\xc4LQ\x99 \xbe\xc4\x93\x8c6\xbd" +
	"\xb9<3XQs\x8aR\x12N\xe4\xb3\x09\x0c\xf4\xdd" +
	"\xdc\x1dXep\xe4t\x80:~\xe5:n`\x15\x95" +
	"\x09\x9f}\xb2\xe28\x15\x83)y).t\x18\x19\xc3" +
	",\x8b|\xf4\xd9\x0a\x8a\x18E\xaa-Z\x07\x06z;" +
	"\x9fAp\x10\xca\xba\xc3\xc7?*\xef*\x8c\xdb\xda\x0c" +
	"=\x85a:\x96b\xd8E)N\xcb\xf4\xc3\x81J^" +
	"\xf7}\x96e\x16X\xb1\xc8\xa48\xf9\xf9\x00\x06\xef\x0d" +
	"0hoR\x9c\xf4\xc0\x1e\x94\xc5H3iZF\xcd" +
	"\x19\x01\x06\xcf\x08\xac\xe6\x8c\x1e$g\xc4\xee/p\x8f" +
	"\x90\xd5\x8c\x08\x1e%\xbd\xdc\x9c]\xb0L]gE)" +
	"U\xf4\xb5Q\xc4\x81\x9f\x95C\x9dI\xa9\x09z^\x0f" +
	"\xfb\x1c\xaa\xed\x89\x82iY\x95r\xd0}\xdd}p\x92" +
	"%e\x8aHa\x99\xedh\x0e\x932\xa5\"i\x87\xd9" +
	"r\xc5\"\x83\xe8,\x9b0\xa13\x15\x03\x17\xc4G\xa2" +
	"\xd7\x9b0\xf5\x09\xcd\x18\x95\x02\x1e\xf2l\xc2\xa4\x9f\xa5" +
	"\xda%\xcd\xd1F\x03\xb6\xf0\xb3cL\xd1i\xa8\x83O" +
	")\xc4\x04\xbe\xac-E\xb3&\xcc\xe9\x80\x15q\x1e\x9a" +
	"\x98\xa3\xe4\xa5\xa4Z\x1a%C-\\\xab\xe2H\x19\xec" +
	"r\xe9\xed\xd2\xcaN\x11\xc6~\xa6\xf9\xec\x91\x99\xa1*" +
	"yYg\x8ae\x99\x93\xa4q\x99\x93\xcc\xb2\xcd\x8al" +
	"\x15XA)+\x85$U8AHU\xd3\xa2<\x98" +
	"-8~\xffO\xc5Rk\x9a\x95\x07eRM\xba\x92" +
	"\xf7\xbdq\x8ci\x96n\x9a>\xff\xd3\xb2\x0e\xe1\xa1\xff" +
	"\x91ae\xad\x00\xdf\xbbIW\xb9a\x05\x02\xe1yJ" +
	"\xb6*J\xbff;u\xcd\xec\xa3(\xe5\x99\xaewW" +
	"\x8a\xc5A\x05\xdd\x97\xea\x0b\xa5\xc3\x13\xb9\xe5\xb0D\xee" +
	"X\xad}]\x98\xb5t*_)\x16\x03\x86\xec\x8b\xa5" +
	"\x9a\xa4\x088\xaa\xa8\xa8\xcd\xb9\xd8\xb9\xb9')7\xd1" +
	"\x92\x18\xfbt\x86\x98Y\xf6\x11\x0f\x1f\xf7K=8R" +
	"\xf5\xf09A\xbe\xd4\xf1|X-\xd6!!\x04\xf9\xdf" +
	"\x9d\x91R5vV \x96Z<\xb7\xf1\xeb\xc3O(" +
	"\xe7\x97\x7f\x18Y\x94u\xfb@\x0eGI.\xca\"B" +
	"\xa8>!\x84\xf2\xc4\x03\xcfw\x8a\x02\xf0n\xae\xe0\x0b" +
	"\xddD\x1d\xe5\xda\x1d\x9d\xed$E\xe1]\xbb\xa3\x97Z" +
	"\x88d\xca\x15B\x9do!\x95\xe2]!\xd4\xcb-B" +
	"G\x85Z\x89\xc0\x0d\x0b\xd8\x82\x04\xcb\xed\x07\xf2\x97d" +
	"\xaf\x1b\x90\xbd\xfeM\x9ei\xa2\x82/\x97\xfc5Qy" +
	"t7i5w\xf7UU\x18S\x01\x07\x17\xccb\xd4" +
	"\xd4\x9a<\x0e\x88\x8dM\xdb\x09qd\x88d\xbe\xb7U" +
	"\xb3\x9d\xa4\xc9E\xbe\xe1\x16\xa6\x9e\xc4\xae\xbb*\xb1\xeb" +
	"\x895\xac\x10\xb9`\xc7\xb7>\xf5\xbdo\xfe\x7f\xff." +
	"E5kv\x93HR\xae.\xa5\x91\x93\x96\xef\x89\xab" +
	"\xb6-\x9fk\x96\xabK9\x08\xf0@\\\xdev\x94H" +
	"\xaf\x1ei\x17r\xae(\xd5G\xff\xacD\x93\x06U\xa6" +
	"7\x9b)\xabl\xb3(\xc2\xa7\x9601NK\x98\x18" +
	"\xa7\x85(\x9f\x02\x99G\x7f\xaeD\xce\xab`k\x14\xcd" +
	"&\xf2\xf2\xee%\x8d\xdc\xfbI\x0f\x91N\xe0\xe0\xfd\xe2" +
	"\x87\xc2^p~\xaf\xfcj+\xcf8ZHY\x8d\xfa" +
	"\xe5m\x1b;\x0aV%R\xcc\xb5Qi\xdaw\xc9\xd2" +
	"\xecq2k\xaco\x08\xbb0j\x86v\xd6\xda\xe2\x0a" +
	"\xf1\xc3/$\xcc\xd1\xcf\xaf`31\x975\xe7H)" +
	"_\xaekc\x15.\xb3+\x96\xc5\x0a<\xfb\x9d\xbas" +
	"v\xd24aO\x1c\x15\xcc\x13\x16\xee\x9c-u\xdc9" +
	"[|\xf9\xc3n\xde\xd0g\x91{\xf9\xc3n\x1a\xf2J" +
	"L\x03\x10\xc6%n\x1a\xf2\x1a\xfcXa\\\xe2Z!" +
	"\xadC\xd9\xbd0.q\xdd97\xe0\xf1\xc2\xa0\xc4u" +
	"\xe7\x0c\x18\x94\x04S[=Q}<\xf2\xf3\x04\x03x" +
	"0\x8d\xd9b33\xc1T\x8e\xa0\xa7\xec\\\xc1\x84n" +
	"\xc1\x7fP\xbdR\xb4\xf5s\xd9X\xa9\xec\xf6\xad\xfd\x9a" +
	"\xdb\x9a\x9b\xb0)\xf4\xfa\x99\x07\xda\xa8Oa\xb5\x9fy" +
	"\xb0\x9b\x18v\xbb\x9d\xeb\xc3}\xc4\xa7\xb0\xbe\x120E" +
	"g\x1d5\xb2@\xd3\xd2F\x83]nc+r\x98\xa2" +
	"\x04\x127\xa9Ea\xb7/\x85\xc4m\xb2\xcf`\xea\x87" +
	"H!q\x9b\xecsx\xbcH!q\x9b\xec\xf3\xc8\x85" +
	"\xa5\xa1\xdbd_\xc0\xf3\x9c\x02\xfe\"5\xbd9\x8b\xc7" +
	"\x9f\x06~\x8e\x9a\xde\xbc\x84\xfc\x0c\xf0\x0b\xd4\xf4\xe6<" +
	"\x9eGX#\xba\xa9n/\xe3\xf1\"E\xc5Mu{" +
	"\x15\xf9\x05\xe0\x97\xa8\xe9\xcdkx\x1e\x92\xbar\xa5\x9b" +
	"\xba\xe2\xb7RtS\xdd\x82V\x8an\xaa\xdb\xdbx\x1e" +
	"\x91\xd2\xe2\xa6\xba\x05SZ\xdcT\xb7? \x7f\x07\xf8" +
	"\x87!f;\x99\xb2b\x95\xbc\xb5\xcaY\\\xeaY\xa7" +
	"\x04^\xe7}G\xb7\xfb\xff\xdb\x1e8\xba\xdd\x7f\xf4z" +
	"\xff\x7f\xd7\x07\x8e^\xef?\xba\xc3\xff\xdf\x8e\xc0\xd1\x1d" +
	"\xfe\xa37\xf8\xff\xbb!p\xf4\x86|sI\x19\xbdF" +
	"\x8ee\x0d5\xc44\xaa\xad\x81\xb1\x84\xafwo\xd6B" +
	"\x1ee\xd7C\xac\x14R\xee!rq\x8c{Hq\x8c" +
	"\xaas\xb6\xbb\x81f\xd4N8\xec\xa6\x07\x9e\xeeje" +
	"\xab\x8c\xe5f\xc6\x93\xab\xbc6\xeaU\xb6\x09\x9d5\xd9" +
	"\x03\xf4\xad6\x87+\xbd\x13Q\xe3\x83!f\x97M\xc3" +
	"M{&\xb6\x0fmbR\xe2\x99\x9d\xe7\xa9\xebC5" +
	"\x18z\xbd\x8f\x18<\xb8\xf3\xc4\xb7\xdb\x88\xc1\x83;O" +
	"|\xb7\x85\x18<T\xe5\xc2K\xfe\xd0BL@\xaaZ" +
	"\xe1%\x1f\xb4P\xd7\x87D\xd5\xf5!/L@|\x8e" +
	"\xb1X \xc11\x99!%\x1d\xb2x\x07TgE\xda" +
	"\x05\xfbb\x9b\xf9\x0bcaq\x97\x82Y*KI\xc5" +
	"n\xa6\xb0\xc2\x00<\x18C,\x83w\xb7\xfe,3l" +
	"\x92\xe9\xdd\xd3\x17Z\xe8,\xb3zO\xcf\xb6\xd0Yf" +
	"<l\x96Y\xbd\xa7\xe7\xbb\xe9,\xb3zO_\xeen" +
	"0\xcb\x0cL#\x9b*\x1b\x16\x9c\x93F)6b\xb0" +
	"\xe9;\x8d\xcd\x19\xd3\x9d=\x90Q\xbd\x8f\x0c\xe0\xee\x8d" +
	"\xf2\x15\xd7pG\xf5\x87\xdb\xc2\xa6L\x9db\x00\xf7F" +
	"\xf5\xc3\x9d\"<\x9f\xb3\xbcF/\xd5\xd6(\xfb\xf3\xbc" +
	"\xf6\x16\xd4S\xe8\xb3R/F_\xf1\x02\x0b\xd8\xe0\\" +
	"\x1bf\x83\xd3)\x9e\x00\xb77\xf8c\x9b\xb0=\xf1Z" +
	"\xc5\xc7\xdd\xc4\x1a\xc7m\x15\x7f\xea\xa3\xd68\xae2\x7f" +
	"!\x0clC0\xae]ESP\xaf\xc0\x14NaT" +
	"\xef\x0a\xf3\x97`\x0a\xaa\x08\x85\xdd\x14\xd4V\xe4^(" +
	"L\x9d\xde\xfdNE\xa9\x92\xa9z\xfb\xac^\x84\xe4\xee" +
	"K\xd0\x09h\x95\xcd\x9a\x93\x06\xdau\xbb\xc7\xe0\xeba" +
	"\xdf:vH\x0c\xb6xn\xcd\x1f{\xda\xf7\xa8\xecB" +
	"\xe4u\xa0\xdb\x94\x02\xba\xba\xc7\xb9\xefuxF\x9cX" +
	"\x08\x1a\xa1)q\xd5_\xe3\xec\x10M\x89\xab6\xbd\xf3" +
	"C4%\xae\xda\xf4^\x1d\xa2)q\xd5L\xa9\xd7\xdb" +
	"iJ\\\xd5\xed\xe6\xcd6\xd1\x97\xfe\x15j\x8a\xfas" +
	"\xcd\xa3\xb8_*\x93\x98hv\xc9\x0bR\xff\xb8\xf0Z" +
	"I\xca\xbd\xbf0.\xe7>YH\x82\xd4\x8f\x17\xc2\xc4" +
	"\xe4\xc3\x85qy(Ab\xd4?-\x84\xb6\xf4\x11\x1c" +
	"\xbe AbT9\x81\xb2H\xe0\x8b\x121Yv\xcd" +
	"\x9d\x00\x0f%\xa0\x05'H\xc3\xbe\"\x01\x11\xde\x02\xe0" +
	"\x8b\x13\xa4e_\x8dgY\x04<\x9d\xa0-;\xb1\x0a" +
	"Z6\xf0\xe5\x09\x92r\xd2\x8a\xe7Y\x0c\xfc\xba\x04I" +
	"9\xb9&\x819\x0c\xc0W'H\xca\xc9J<\xfe:" +
	"\xe07$H\xca\xc9\xf5\xc8W\x00_\x9b )'k" +
	"\x12\x98\xc3\x00\xbc#ARN\xd6%P-\x06|c" +
	"\x82\xa4\x9c\xdc\x92\x80Id\x07\xf0M\x09\x92rr+" +
	"\xf2\x9b\x81\xf7$H\xcaI\x17^\xe7&\xe0\xfd\x09\x92" +
	"r\xd2\x8b\xc7\xf7\x00\x1fL\x90\x94\x93\x81\x04\x8a.\x81" +
	"\x0f'H\xca\xc96\xe4\xfd\xc0w$H\xca\xc9\xf6\x04" +
	"D\xc6\x83\xc0w%H\xca\xc9N<~\x18\xf8\xee\x04" +
	"I9\xb9\x1b\xafg\x17\xf0\xb1\x04\xc99ax\x1fT" +
	"\xe0\xe5\x04\xc99)\xe1}\x1b\x03\xee$H\xce\xc9\x1e" +
	"<O\x19\xf8\xde\x04\xc99\x99N\xa0H\x13\xf8\xbe\x04" +
	"\xc99\xb9\x0f\xcf\xb3\x17\xf8\xfe\x04\xc99y \x91\x97" +
	"\xa4\xdc>\xe0\x07\x12$\xe7\xe4a<~?\xf0C\xc0" +
	"?'\xf3\x9c\x93\x83\xf8\xbd\x1e\x02~\x04x\xe6\xb3<" +
	"\xe7\xe40~\xee!\xe0\xc7\x80\xaf\xf8\x1c\xcf9y\x14" +
	"\xaf\xf3(\xf0'\x80\xaf\x8c\xf1\x9c\x93\xc7\x91\x9f\x00\xfe" +
	"$\xf0U\x19\x9es\xf2;\xbc\x0f'\x81?\x0b\xfc\xf3" +
	"+x\xce\xc93\xd8>\x9f\x04~\x0a\xf8\xea\x95<\xe7" +
	"\xe49\xbc\xffO\x03?\x0d\xfc\xfa8\xcf9y\x1e\xaf" +
	"\xffY\xe0g\x80\x7fa\x15\xcf9y\x01\xdb\xff)\xe0" +
	"/\x02\xff\xe2\xe7y\xce\xc9Y\xe4\xa7\x81\x9f\x03~\xc3" +
	"\x02\x9es\xf2\x12^\xcf\x8b\xc0_\x01\xbef5\xcf9" +
	"y\x19\xaf\xff\x02\xf0K\xc0\xdb\xae\xe79'\xaf\xe1\xe7" +
	"\xbe\x02\xfc\x0d\xe0_\xfa\x02\xcf9y\x1d\xf9E\xe0o" +
	"\x01_\xfbE\x9es\xf2&\x9e\xe7\x0d\xe0\xef\x01\xbf\xf1" +
	"\x06\x9es\xf2.\xf2w\x80\x7f\x08\xfc\xcbkx\xce\xc9" +
	"\x07\xf8}\xdf\x03\xfe\x11\xf0\xaf\xb4\xf1\x9c\x93?\xe2\xef" +
	"\xf2>\xf0O\x80\xdf\xf4%\x9es\xf21^\xffG\xc0" +
	"\x17$c\xf2\x92uky\xce\x89\x9c\x1c\x91\xa4\xa1$" +
	"t\x1b\x80\xdbo\xe4)'W$Q\x1c\x0a<\x0d|" +
	"\xfd\x97y\xca\xc9\x92$|\xecU\xc0\x97\x03\xef\xf8\x0a" +
	"O9iM\xceHR.\x0d|\x05\xf0\x0d7\xf1\x94" +
	"\x93\xcf&-\xe8\x06\x80\xdf\x00\xfc\xab\xebx\xca\xc9\xf5" +
	"I\xf8\x19W\x00_\x9b\x8c\xd1\"\xb0YE\xc1\xfa\x07" +
	"a\xb5b}\x9d\xb0\x7f\x9a\xe4S\x0fqIB5\xfe" +
	"J\x1a\xc2\xdd>\xa3\x19\x13\xda\xbc\xf6(\xfeJ\xce\x99" +
	"\x922%^\xcd\x155C\xc5\x8d7\x12\x1b\x85\xbb\xbf" +
	"\x92\xfd\x05\xa2b\xaa5\x8f\x15\xbb\x0f\xae\xd3\xac\xef\xe5" +
	"\x0e\xba\xddJ\xcf\xef\xba\xd6\xce7\xce\x85\x94`\xcch" +
	"6\xad$\x102\xea\x85\xdb\xc3\xf8\xd3\x93\xf9:z\xce" +
	"\x91\x92\x8aSg\xb8\xcc\xdaXMK(\x13\x98s'" +
	"\x04,\xbe\xc26a\xe5~\xd9\x9e\x8aV.1,C" +
	"S[\xb7\xdb\xc2j~L%\xa5\x95\x92JQd\xfa" +
	"\x06\x8a\x16\x07Ji\xc0\xcd\x087\xb5\x09)\x80<7" +
	"\xa9\xe8\xe3\xf0a\x92\xac\xba\x9f\x95\xd1\xecA!\xbf\xf0" +
	"\x8b\x92B\xfdwBB\x8d\xd9\xa2>Mm\xf5\x83e" +
	"\x13\xf3\xa6:\x1d\x147\xe0M\xd9<\xc6|\x9a\x96\x92" +
	"Y1\x9c\xcd\xfe\x1f\xaa\xc6\xfd8oVPU$e" +
	"\x87\x14U\xabx\x1e\xc4\xe2>g\x9ca\"gM\xea" +
	"\xc5\xd1&\xf6\xc3n\x1f\xb8\xddt\xcc\xff\xdb\xf7\x0b\x1b" +
	"o}\xf5k\xb6\xd3\xe4:\x87\xf0@\xa8\xb3\xd0Qw" +
	"\xc15\xa2\x0d\x1a\xce2\xa9\x0dZ\x13KE\xe2\xe2H" +
	"i\xd0,75\x09\xb5\xc1\xcb*%_M\xee\xc6\x8e" +
	"\xc8\xe3\x9a\xae\x87\xd7P\xedn\xb0~6\x8b\x9a\x19\xd2" +
	"\x0b\x84\xbb\xb3\xd6o\xd59f\xa8]]\xf0\xa9;\xbc" +
	"\xe0}g\xecZ\x9f\xd9\x99\x1b\xbc\xdf\x8d\xa6]\xbb\x80" +
	"\x8fQ35\x86fj*\xf025S+\xa1\x99\x97" +
	"05sW\x98+\xb1n\x9f\xa9\x99\xbb\xc2<\x8d\xe7" +
	"\x17\xe6e\xee\x0a\xf3}\xe8\xfe%\xcc\xcb\xdc\x15\xe6\xa0" +
	"y\x99\xbb\xc2\xfc`\xec\x1e\x9fI\x99\xbb\xc2|0\x06" +
	"q\xdf\x01\xe0G\xa9\x99\xda#1L\xb6\x01~\x82\x9a" +
	"\xa9\x1d\xc7\xcf\x15&e\xee\x0a\xf3\xe3x\xfd\xc7\x80\x9f" +
	"\xa4fj\xbf\xc5\xeb\xf7\\\xca\xbc\x15\xe6\xa7\xf0z\x9e" +
	"\x04~\x8a\x9a\xa9=\x87\xe7y\x1a\xf8ij\xa6\xf6<" +
	"\xde\xb7S\xc0_\xa4fjg\xd1\x84\xee4\xf0s\xd4" +
	"L\xed%\xe4g\x80_\xa0fj\xe7\xd1\xc4\xedE\xe0" +
	"\xaf\x00OW\xdd\xd4^F~\x0e\xf8\xc5XL\x96[" +
	"y\xf8\xfe*^\xfe+\x80\xdf\x8f\xf9\x93\x0d\xc6Lg" +
	"\x9cM\xe74\x18\x1fjX\x9c\x88sq\x10\xca\xf9\xb6" +
	"\x9dgUf\x17rtGHWl;0\x9b\xa76" +
	",I\x9b\xed\x09\xd6}\xee\x97R\xfea\xd9b\x16\xdb" +
	"\x93\x1b\xe7e\xae\xfdt@\x93\x8d\xb2\xbf\xde\xf6\xbce" +
	"\x0f\xb9\x9c\xcb\x7fA\x9c\x0d\xb1\xa2\x94\xb2\x98=VO" +
	"[>WR\xa6\xfa\x03Z\xd2,\x0c\xb0\xe2\x89\xcc\x1a" +
	"l\x8a\xbc\xcc\xc07m\x0f\xaf\xfc5\xc7\xcbYj\xb4" +
	"z\xff\xe2\xb9\x9b7^\xfc\xe0\xdf.\x1d9\x1cY\xcd" +
	"T\xadd\x8b\x7f\x1cst4\xce\x0b\xd9\xd2M\xcfn" +
	"\x9f7\xb2\xb7\xe7\xd9\xed[\x00r\xbd\xcf\x96\xe0\xc2\x10" +
	"\xd9\xf3\x8c\xb9{\x9e\xdd\xfe=\xcf\xb8\xbb\xe7\xd9\xed\xf3" +
	"Lv\xa7\xe7+\x91_\x07\xfc\x06\xba\xf0t=n\x86" +
	"\x8ar4\xee\xf4\xfcF\xdc\xc4\x14\x9b\xa1\xee\xf4<\xb8" +
	"\x19z\x85\xcc\x1f\xef@\x9d\x9a\x86\xf5t\x8b\x96Y\xea" +
	"\x0fH\xdb\x1c\xb3\x9f\xb6\xb3\xe0\xef=\xab(\xbe\xf2\x86" +
	"\x97Q\x93\xb7IG\x96\x9c\xa3\x944C\x91\x9a\xddW" +
	")\x9a\xa6hs\x93\x8a\xd3\x8ceq\x8ff\x17\xb4\xb2" +
	"\xae%\x0df\xcf#\xbb\xc3\xa1\xa6n=\xdbFf9" +
	"\xe3\xbc\xd4\x88\x15\xe9\x9bu\xd6\xd91\x0al\xd9DP" +
	"\x13\x96\xcb\xfa\xf4\xa0\xa9%m\xd3\x88R\x14\xa7[\x08" +
	"\x11DI\xf7\xcct\x8eZ\xc14\xbd\xe6\x8d!\xc9\x10" +
	"\xdb\x93r\xb7\x06\x1a\x0d\xf8\xa4\xd4\xf5\xacc\x0e\x98y" +
	"\x12\xf5B+\x06B\xbb\xe6H\xa6d]\xaa:\x90A" +
	"\x09^}\xcd\x8e'\x7f\x19\x0a\x93;\xb6\x87\xc9\x1d-" +
	"!w\xc4\xfai\xb73\xa3\xd6\xc1\xacq\x19\xa49\xcd" +
	"F\xf5b\xbf\x94aJS\xa5\xd6]\xcb\xa7\xac\xee\xfc" +
	"U\xb6\xdc\x16\xcc_\xd9d\x88%\xabe\x9c\x89-\xd7" +
	"\x08q\xe0r\xaf\xeax')\xf6\xe1\xc6\xa0\x8f\xcf\x10" +
	"\x07.w\xb5\x99V\xed\xf4V\x9b\x9f\x81\x9f\xf1\xc9\xb8" +
	"\xbc\xed\x94\xb0\xe5znD\xccL\"\x15?)\x98\xa5" +
	"\xb2i0C\xca:\xfe~/\xa4*\xca\xacci\x13" +
	"T\xcc\xcc\x8f\xa9S\xfc\xa7\xee]\xda\xe2)\x8d\xe6\xb1" +
	"\xf8\xbb\xac\xfa\xd4\x83\xba2=0\xb8~\xbe\xf3\x165" +
	"\x9d5]i\xad\x87\xe9\xcca\xbdN\xbc\xa6\xb1\x85V" +
	"\x9e\xe8\x0c\xf3\xcc\xb2Hi\x0dx\xa2s5\xc6\xc9\xb4" +
	"\xcb\x99\xe3&\xf4\xbd\x86\x94\xc9\xf9\x12,\x1b\x9bm3" +
	"E\xdd2U\xde\x9e\xc1\xb9P\xe0\xc1\xffEX\xf5\x93" +
	"\x7f\x89\\\xfd\xe4\x9f\xc5\x1e\xdc\xdc(>\xbbL\x91\xab" +
	"\x956\xb7\xc4\xa7\xc4\xd2R\xf0\x9f\x83\x19\x8c\xd6|e" +
	"\x06\xe1B\xe5\xea{\xa7D\xb6S\xf0\x7f\x83f\xca\xf7" +
	"\xd6\xb0\x1b0iZ\xba*Z\x17\xb3\xee2-]V" +
	"#([\xfb\xc2\xcclG\xc4O\xe5\xef\x00B\xccv" +
	"\xe7,,K\xbd\xd5\xc4g\xa0)\xdd\xb6\xa1\xe6\xca)" +
	"e\xd2\xb0\xe7\xb5DW&\x0d\x11)>\xbfb\xeb\xbb" +
	"\xff\xf9\xfbO\xed\x8f,W\xc5\xfe\xd12\xcbYf9" +
	"Z\xcdXO\x8d\xc8\x9av\xea\xae\xca+\x9b6\xbd\xac" +
	"J\x1eE\xe0\xae5S\xc8\x8c\x18\xf1\x0d\xb1\x929!" +
	"\x07\xe7\xd3C!E\xcc:\xc9\x18\x8f\x8bjl\x0f\x9d" +
	"\xe8\xb8v\xc4\xd1C\xb62+h\x8a>\x90d\xf6h" +
	"\x04\xd1}7U\xa9U\x1b\xd9\x03\x16\xd9\xe4v\x97\x8b" +
	"\x1enoPM7;\xc6\x87J\xcfW\xcf\x1e\x1d\xf6" +
	"\x956\xc7`)W\x962~%\x93\xadL\xd3w\xd5" +
	"\xf1\x9c\x8b\xea\xb6\x1c\xfc\xc9g\xe6\xa9\x1b\xd7\x1f#\xae" +
	"\x80Y\xcb?\xc6x\xff\x88[d:\xb4\xe3\xf7\xb7\xfe" +
	"\xcf\xbek\x7f\xf5\xfb\xc8\x8d\x9c\x0f\xbbv.\x83\x06\xa8" +
	"\x81\x1fd$La\xd0\x19&\xca\x1e\x09S\x18\x8c\x08" +
	"1\x81\x1c\xa2\xc9\x8e4\xc6\x964\x03GN)N\xc6" +
	"\xce\x922U\x033{*\xcc\x9a\x8eVsQ+\x95" +
	"\xcd\xb8\xe5D.\x02=\xcc\xa6\x9c\x8a\xc5\x06\xb3\x96\x09" +
	"c`@\x99\xd0\x16\xa6Lh\x0f+\xd0\xe3\x93&T" +
	"\xef\xd2\xc7\xedT\x9aP\xbdM\x7f\x02\xf8Q\\\xce-" +
	"\xa0\x1aC\x19\xa6pB\xb1\xe0.\x00-\x04,\x14\x0b" +
	"\xee\xfaO`\x1e\xeb\xad\xff\\\x8d\x13VO\xb1\x90\x82" +
	"\xc7B\xcc\xb8\xc7\x98XjH)VI\x04\xa0\x93\x96" +
	"&\xfe\x95\x19S\x0cU\xcc\xdat6*^\x14\x19I" +
	"L\xac\xdaH\xd7\xd8GKd7\xa4q\x9f1\xa9\x94" +
	"se\xa6\xcbz\x14we\xdacE\x88\x16\x1a\xcf\x8a" +
	"x=\xcc\xdedm\xf1\x96\xd0YQ\x9e\x96}4\x0d" +
	"G\xd1\x0c&e\xac\x9c\xbfl\x0a\x9e3'%\x9b\xba" +
	"\x14\xb78wJ+\xf3e\xc9\xf0l\x8e\xd0\xc1#\x83" +
	"\x81Em>P\x0a\x82\x06y\xf1\xdc\xb6\xf5\xc5\x87^" +
	"X;\xf2\xff\x07\xe5!\xf5\x95\x0d\xd0\xb5\x95\xa2\xd4M" +
	"i\x0f[/&5\xc6<I\x8b\xa7\xc2ddQ(" +
	"\xb8T\x11\xb5\x92\xdd\x88i0\x94\xd4\xd7\xcb\x8eK\xc7" +
	"\xe4,\xef\xab\xe5\xc5s\xff\xe1\xb6\xc3\xff\xf6\xad\xff\xf8" +
	"?.FV\xc7\xe0R\x08Y\x97n\xe4L\xde\x17\x16" +
	"\xd9\xae\xaa\xebL\x8e\xaf\xee\xd4i\x10\x9fdS\xf3\x97" +
	"\xf3\xa3\xb1\xdc],\xdfkh\x8e\xa68l\xb3i\x18" +
	"\xac\x80I\x9b\xf3xx\xeb\xe6\xa8f\xc8\xb2\x14\x93\xe5" +
	"&\xd3\x17z\x8d\xa2)]\xb68mD\x0c\xd1\xae\xa7" +
	"/\x95\xa1y\x9e\xd9t\x1a\x18ZNU\xb1mm\xd4" +
	"`>VR\xa6xI\xde\xb8\xa8\x06\x98Ug\xee\xa8" +
	"\x15\xaf\xd6\x99\x89E(%\xdckLhN\xad4\x94" +
	"T\x04\xf3\x0a\x82\xe5\x89\x9c\xc9\x8df\xde\x9c!*P" +
	"7\x9ay\xb7\x8f\x0c*n4\xf3A\x1f\x19?\xdc\xcd" +
	"/W\xda\xc6;\xf9D\xac*\xea\xc1UC!KK" +
	"\xc6\xf9\xa0\xd0\x8a\x85\xdf\xbcU\xc9\xd0\xfb\xa8\xe1\xf7\xb1" +
	"\xee\xf0\xe7\x14\xb2\xea\xf7\x95\xb2\xa6\xe1\xbb}\xf6\xa4R" +
	".k\x86/\xdd\x17X`\x17u\xb6\xac\xa8\xb8o\x1d" +
	"X\x11Sg\xb0\x09\xf9\xae@\x9d\xe1*@)U\xf0" +
	"'f4\x94KN\xb0\xcd\xa6fH\x91Zch " +
	"3\x14\x16\xc8\x0c\x85e\x97u\x92H&\xc20S\x80" +
	"Y\xdct\x99\xd1}y\xc1\xda\x1bm\x8f\xc5\xeb\xc5\x97" +
	"\xa9a\xcd\x08\x16Wn\x0b\xcb+k\x0f\xcb+[\x15" +
	"\x96W\xd6-V\xaeRy\xea\xd10j1a\x89\x91" +
	"\xb4Dq\x87\xd9\x8a\xcd\xe8\xe6q3\xbe\xf0C\xcc\xae" +
	"\xe8\xf3f`\xd5\x8cf=19\xa5\xd2@\xa5\xac8" +
	"c\xf5\x96Z\xa3\x94\xc8\xdc<f\x9a6\xab\x0e\x18q" +
	"\x9e\x84\xd5\xa8\xf9\xdc\x13\xd6\x99u\x8a\xe6\xe3vf\x07" +
	"\xf3\x8d:\xb3\xe8\x8f@V\x9d\xf1\xcdYT\xc6s\xe2" +
	"\xa5\xa4f\x1a\xd1:\xb4\xfaA\x16sz\x14G\x19r" +
	"\xc732L\xe4\xc9\"\x90\xc1&U\xc5Q,.\xf9" +
	"\x88\x9cPx\x17S\x9c\xb1\xeaz6\x19)W]\xce" +
	"\xdewrB\xa9S\x82\x97\xca)\"L\xf0\xabK\xd6" +
	"|\xc5:\x8a\xa3{\xe8\x95\xf5\x05\x1d\xdd\xc3\xf6\xe5\xe7" +
	"\xecJ\xbe\xd7P\xd9TS\x8br9G\xb1\x9caK" +
	"K\xc1\xac?\xca\xf2\xd9\xfd\xe2Z\xbc\x0b\xdc\x0eG\x0e" +
	"\xf3\x14\xe4\xd0\x0e\xbf~\"e\x98\x04<\x82\xb8\xbf\x87" +
	"\xe9\x9bM+Y\x95\xac\x93\x87z\xa4Q\xbc\xce\xf3\xe1" +
	"\x0c\x7f>\x9c_\xa9\x11a\xdb\xbe\xab\xcb\x95Y4\xc8" +
	"v\xbe\xb6^\xb6s\\Q\xc4\xa4\xfa_\x7f~F\xbb" +
	"\xfa\x9f\xcf\xff\x97\xc8\x93\xea-\xc6D\x8fRRF\xe3" +
	"\xdcW\x80\xf4\xcc\xd7\x86\xf5\xcc\x9d\x91\xed\xf7I\xed<" +
	"\xaa(\xf7\xdbj\xcd\xaa%\xbf\x19Z\xc1\xc4\xae\xc4i" +
	"\xbad\xa4\xa62+\x9a\x09@_\x98\xf6\xbb\x9b\x08x" +
	"\xdc\xaf\xf0R;\x11\xf0\xb8c\xe9\xf9v\"\xe0q\xb5" +
	"\xdf/\xb7\x13\x95\xb8\xab\xfd~\xb5SDU\xa1Y\xdc" +
	"|\x15\xc7\xbf\xc5^\xf4'T\xfa\x03\xed\xf9d~\xd9" +
	"\xf2D\xb9`\x1aM\xee]mv+\x8b\xfc\xa5e4" +
	"\xb4?\xa9\x17',l\x94j\x85\x15\x02\x1d\x16I\xe7" +
	"\xd39\xff\xceO Q5P\xfc\xb5\xc9\x02\xd0^\xca" +
	"U\xb5\xc4dMe\xfb\xd0\x82\x8c\xeda\x15&}F" +
	"#\xf1\x10\xa3\x11\xdb,\xb1\xdbt\x85\x86\xac\xfe\x1cV" +
	"\xd7\x87\xc1\xbd\xbb\x13\x8a\xa5\x05\xe5\x9e\x8d\xfbAm\x82" +
	"\xf5\xa2\xa1K\x94o\x92\x0f+-9B\xb6\x17\xdco" +
	"2m\x89e\xd29\xc7\xdcRS\x0d\xd61\xb7\xec\xa9" +
	"h\xe5\xc0\xda\x02\x84\xa8p\xac\x14'\x168\x08\xf7T" +
	"4)SnnM\xc4\xad[\x9d\x19b\xb5\xfbu\xab" +
	"Dd\xecU\xd1\x19\xa1\xdbur\xd8v]u\x8b\xf4" +
	"wm\xc2'\xc5\x0b\x97\x9e\xea&{x\x0bc\xbc\x83" +
	"x\xe6~\xd1\x13%\xc7\x99X\xfbc\x96eZ9\xc7" +
	"/1-*\x9a\xce\xd4.G\xca:\xacTv\xc8\xda" +
	"\x95M\x0a\xc6\xb8\xbb\xd5\xb5\xa5\xac\xec1s\x12\xa6\x92" +
	"2\xe3\x0b\xb1\xd2<\xe5\xae\x1a\x96\xfb\xe6\x0b\x14C," +
	"\xcb\x87\xd7\xc0H\x95\x0fY\x13v\xb7\xda\xb7\xc6\xdc\xf2" +
	"\xd6\x9bM)I\xfd98\x15k\xc1\xff\xfe\x95\xe4\x93" +
	"s\xf9\xffv6\xea\xa0\x85}Ww\xc5\x96\xa7\xff*" +
	"\x9b\xee\xa2jMo\xd5s\x82\x96#\xec\xa6\xe5\x08\x97" +
	"\x88z\x84\xed\x92\x94;\x04\xfc\x98,\x8a\xb4<\x8aX" +
	"\x94)t%9\xc7Q2#\xca\x14V[\xd7\xd2\xc7" +
	"\xe5\xbc\xbf\x1ca\xbcN9\xc2\x05n9B\xcb\x973" +
	"\xee\x96C\x7f\x1e%6\"g|\xd1B\xbe\xe2\xfa\x02" +
	"r\x913\xee\xfa\x10\x04s\xc6?\x95\xe4\x8a\xbb\x97\xf0" +
	":E\xce\xf8\x95\x8b\xb8\xe2\xee<\xda%\x88\x9c\xf1\xab" +
	"\xae\xe0\x8a\xbb\x97\x91\x8b\x9c\xf1\xab?\xc5\x15w\xaf\xe2" +
	"yD\xce\xf8\xa7\xaf\xe4\x8a\xbb\xd7\xf0\xfa\xbd\xdc\xf0Y" +
	"L\xc2$\xaboF\xb9@^i\xc6v;\xa4\xb6[" +
	"\xb0\xa0:<\x1f\x9b\xbdL\xd0\xdag\xc3\xcc\xdf\xc3\x1c" +
	"m\xc2\xd7\x85z,\xf3M*\xcc\xf4\xe5\xad\xfa\xc5i" +
	"%\xcd\xa88b\xa7-[\xf6\xed\x8d\x86\xa5c\x06*" +
	"da\xfd;\xb5b\x8cJ\x19f\x1a\x9a\xda\x94\xc4\xf9" +
	"\x1b\x9a\xae\xffY\x82\x9c:\x91\xec<\xd5\x9fMG3" +
	"F\xbd\xa5\xe7p\x1b\x96\x06\x91dg\x83H2\xab\x9b" +
	"\xa6\xc3\xc4\x0e\x0c\xbe\x14)\x9c\x10u\x90\x87[\xa98" +
	"&\\VS\x9e\x0d\xc1~O\xe4\xfd\xd6\x91\x1a\xd8l" +
	"O\x85\xf9\x0b[6\xb3$\xb7\x19W\x8c\xf9.6\xf9" +
	"\x846\xb1\xdc\xd9\xa4:\xc5\xd5og6\xeb\xd5\x1a\x8f" +
	"\x97U\xfb\xba;,2i\xabWS+,\xc0\x0d." +
	"\x86\xa7\xac\xa6\xa6\xe1\xbdF\xc1b\x8a\xcdR9G\xc1" +
	"\xfb\xbf\xdb\xebd\x0f\xa2^X\x14)v;\xd9\xc3\xc8" +
	"\x85.\xd8\xd55?\x82\\\x14/vu\xcd\x8f\"\x17" +
	"zaW\xd7|\x1c\xb9\xd0\x0b\xbb\xbbZ\x8f#\x17z" +
	"aw[\xeb\xb7\xc8\xbdb\xc7\xde\xbeV\xa0\xda\xb1\xb7" +
	"\xaf\xf5\x14\xf2\x93\xc0\x9f\xa5\xba\xe6gP\xcf+\xf4\xc5" +
	"\xae\xae\xf99\xd4\x05\x0b}\xb1\xabk~\x1eu\xc7\xcf" +
	"\x02?Cu\xcd/\xe0\xf9\x85\xee\xd8\xd55\x9fE." +
	"t\xc7\xae\xae\xf9%\xe4Bw\xec\xea\x9a\xcf#\x17\xba" +
	"cW\xd7\xfc2rOw\xec\xe9\x9a_E~\x01\xf8" +
	"%\xaak~\x0d9\x0a\x92\xdf\xa0\xba\xe6\xd7\xf1\xfb^" +
	"\x04\xfe\x16\xd55\xbf\x89\xfc\x12\xf0w\x80\xb7V\x85\xcd" +
	"o\xe3}x\x03\xf8{\xc0\x97-\xe3y\x89\xef\xe2}" +
	"x\xcb\x15</\xf9\xccgx^\xe2\x1fP\x7f\xfd\x1e" +
	"\xf0\x8fb\xb1\xe6\x0b:\xd3\x1c\x13\xe2\xc8\xed/\xe7\xac" +
	"YT\xfdL\xbc\xa1}~\xbe\xd0\xfd\xdb\xc4\x89R\xd5" +
	"lh\xdcb\xc2\xe4X\xed\xe4\x85\"^(\xa3\x9ax" +
	"\xa1\xb2)\xf1B3\x84\x0095\xa9\xd9\xe2EaL" +
	"\x9c \x03WH\x85\xca\xba\x90yg\xf1\x1aE\x9a\x0f" +
	"\xbfH\xa1\x02\xaf^e{X\xdf6O\x05V\xcdP" +
	"\xeb\xeb%\x84\xadOK\x98\xadOK\x98\xadOK\x98" +
	"\xadO\xb7X\xc0\xfc\xb3\xbc\x0e\"k`\x06Sfu" +
	"\x01\xbb\xd1\xbe\xeac\x92\xb4\xad#.o\xdb\x14\xf3\x96" +
	"\xac\x06\xa5\x808\xaa\xa0X\x8cY\xc3\x96\xcc\xffmj" +
	"\xc90\xfd\xd3<\x09\x1f\x8e\xa5\x19\xa3\x0d+\xddFW" +
	"\xbf\x99\xa6\x95++\x93q\xaeTj\xb0\x1c\xd5^o" +
	"9*\xa3\x9a&\x95yhW>\xd5\xf2\xbd;\xb6|" +
	"\x1c]\xe6\xa1h\xea\x00+\xe5\xb3\xccr\xc3k\xb2\xa4" +
	"\x93\x0fq\xdc\x18\x09+p;\x14V\xe0\x96.\xde\xb8" +
	"\xde\x0a/\xdf#\xd6i<\xc7\x8d\xd7,\x9a\xcd\xbf0" +
	"\xa4\xc0-nQ\xdfQ)IIZ\x99\x96K\x8c\x02" +
	"\xeb\xd9Q4\xb2C(\x87\x93R~\x89l\x1d\xe9l" +
	"I\xd1\x8ca\xc5\x18o*\xe4\xb8\xbd*\xd6\xabj\xf5" +
	"\xba\xe4\xae\xa0\x1d\xd5\x8c\xcfv\xca\x1dT\x9f\x93\x7f\xe0" +
	"\x9b\x12\xb8\x83\xeaY\xf9?\xf9BywP}U\xfe" +
	"W\x9f\x9d\x93;\xa8\xbe\x89S\x14a\xdb\xe4\x0e\xaa\xef" +
	"\"\xf7\xec\x99\xbcA\xf5\x03\xf91I\xca}(\xc7\xe5" +
	"!:\xa6\xfe\x09\x0f\xff\x04\x0e_D\xc7\xd4\x85\xb1\x7f" +
	"\x91\xa4\xdc\"\xe8\xeb\xd3tL]\x12\x83\xcb\\\x0e|" +
	"5\x1dSW\xc6\xe02W\x03\xbf\x89\x8e\xa97\xc6~" +
	"/I\xb9\x0e\xe0\x9b\xe8\x98z+\x9e\xa7\x07\xf8 \x1d" +
	"S\x07bp\x99\x83\xc0w\xd11ug\xec\xbfJR" +
	"n7p\x9d\x8e\xa9\x1a&\xe7\x8c\x01wbn;\xea" +
	"R\x06\xa4\xacb\x8d\xd3<\xd7\xea?\x0c\xb9\\\xd8\xca" +
	"\x14\xdd\x19#?v\xf5\x7f=1\xa6\xb3Q\xc5a\x03" +
	"\x8aft\xd9\xb6f\xcbN\xcd1\xb2{L\x9d\x0f\xe8" +
	"\x90jO\xbc!\x84\xf5\xca\x86]f\x05\xa7\xbb\x92," +
	"\x16\xed\xe0\x7f\xbf\x16\xf2\x8e\x9c\\f\xba\xde5\xa9X" +
	"\x19fPa}\xf5\xffw\xc6\x8aEf\xd8l\x8b1" +
	"\xa6\x18\x05VbF\xed\xe5\x0f\xc8\x8a\xa1\xe0\x01Y<" +
	"\xa2\xe6\x80\xad1\xbc9\xe2\x1cN\xed\x85T\x8f\x19b" +
	"\xbc\x12\xb7\xa3\x99\xc4G\xbfz\xccm2\x8cZ\x8a3" +
	"6\x9c4\x07\x0bu\xcepgq\x18\x17m\xeda%" +
	"\x85\xf9\x0a\x81\xc3\xd6I\xf2\x86&3\x1a1\xef\xef6" +
	"e\xc2\xb4\xb4\xa4\xc3\xa5\x9bd\xads\xa4\x81\xf0\xd8]" +
	"\xeb\xdcv\x7fU\xcc\xaaG\x14\xab\xa1_\xbc\xe60\xb9" +
	"\xaa\xaak\xde\xad\xb5\xd7\xb0\x1dM\xd7{Rf%\xef" +
	"\\\xf6^Y;\xd9+\xd3\x88\xd5\x8c\xd6\xe5\x8c\x8by" +
	"\xbdo'1\x92\x1a\xf6\x0e\xa5\xc4\xb2\xdc\x05\xfa/\xb1" +
	"|\xec7\xc2\xc9V\x8cqs\xf2r\xd3\x076\x9b\xba" +
	"i1u8\xc9\xa6\xa2l\xfc\xac\"\xba(^\x01\xc5" +
	"\x0dCK\xf6h\xf4O\xc5\xbdw\xcb,&\xff\x9f*" +
	"\xf0\xff\xbc*\xf0.\x96\xcf1\xdb\xd6\xe2\xa6Q\xff\x01" +
	"\xf7\x9e\xef>\xba3Z\x8dg\xb6\x8f\x90\x9dQ\x8b\x95" +
	"L\x87u\xa9R\\\xb5\x88\x89'\xc0\xde\xb2_\xb5\x8e" +
	"u\xa9M)n5\xb1b\x8e\x0b\x07\xc3\x96\x92\xac\xda" +
	"F7\x90:\xf4\x89\xf5^\x9fCt\x14/\xe8\xf9\x05" +
	"\xe0\xd5\xb8\xbb+\xaf\xe9I\xcd\x99g\xb1\xb7\xc6\x13\xba" +
	"#V\xe3\xab0\xcb\x932\xa7\xe5\xc5s\xbf\xbe\xf3\xe4" +
	"\x7f\xbfg\xfd\x9a_G^\x0c\xc7\xab\xe1\xe2\xa9\xaeB" +
	"\x81\x95e'\x8a=2\xc9\xb5r;\x15\xba\x98\xe5)" +
	"\xa8*p\xa0\xc3=\x89g\xab\x92&\xefg5\xd8$" +
	"\x06\x95\x92L\x7f\xea\xda\xbd\xee\x10\xc1{\xc4_\xfa\xce" +
	"\xfc=IV\x08vE\x9d\x0dl\x85\xb3\xaae\x96{" +
	"\x83\x0b@M\x1a\x0b\xbb\x8e\xdf\xa65\xcd\xe5\x8f\xf3\xec" +
	"\xf5\x85\x8f#\xd5\xc7c\xc0\xf2\xd9?\xda\xe3d(\xf1" +
	"\xf5\xce\x05\xb3T\xd6\x99\xc3\xa4\x8c:\xac\x85\xa4r$" +
	"\xa2\x8a\xe8\xfc>\x8b\x97\xa5\xc0!\xbe\xb4^oz\xb8" +
	"\x8f\xecHU;\xd3G\xfb\xc4\x8eT3\"4\x05\x9a" +
	"\xaa\xe3W\x19F\x94\xc0E\x9b\xa6\xf50GIj\xba" +
	"\x1d\xc1v{$,\xefp(\xeca\xe8\x13\x0fC\xd0" +
	"^8T-Ds\xad\x17\xcf}\x18;\xbd\xf3\xa93" +
	"\x97\xdev\x1fm\xfe\x96&\x9b\xa5\xb7\xc1[]K\x95" +
	"\x9d\xbft\x0a\xdb\x1dlr\xb3Y\xcakq\x83EY" +
	"O\xf8\x01YO\xa8\xa7\xd3\xc6\x0e\xc0\xb14\x19\xbaL" +
	"\xae\xf0\x8b~=\xdb\x0d\x95Y\x93\xa6\x15\xd7\xd5(+" +
	"\xc6\x97e\xfc\x9eA\x17\x9c\x90\x95\x99\xf9l\xdf\xeb\xaf" +
	"2\xf5\x98&\x8eN7y3\xd8.\xdc\xbc\xda\x08\x81" +
	"\xc1V\x92\x0e\xbf\x05\xf1&\xc0\xfd4\x1d\xbe\x17y\x0f" +
	"\xf0A\xba\xf76\x80|+\xf0a\x9a\x0e\xbf\x0d\xe3\x91" +
	"~\xe0;h:\xfcv\xe4\x83\xc0w\xd1t\xf8\x9dx" +
	"\x9ea\xe0\xbbi:\xfc\xdd\xb8\xd7\xb5\x03\xb8J\xd3\xe1" +
	"\x15\x9c\xd9\xee\x06\xae\xcb\xc4\xadNC!\xec\x18pG" +
	"&nu{p/\xb0\x0c|\xafL\xdc\xea\xa61>" +
	"\x9a\x02\xbeO\x0el\x1f\xa4\xa6\x07M\xcfO'5E" +
	"_\xcc\x90\x175v\xa0\x9aQ\xd05\x83\x85\x96\xcf\xca" +
	"\xaa\xa6I\x14\xf1sf\x99\xd5T:\xb2\x1d\xc5a]" +
	"NNJa\xa6\x1b\xd1\xef2\xcb\x09\x982\xcd\xc1\xf9" +
	"\x06\x15K\x91\xe4\xd2\xbc\xeba^\x92L\xa1b;Y" +
	"\x13\xeb\xaf\x05\x13e\x12\xf3\x84d\x83\xba2\xbde\x82" +
	"Y!\xbe\xb9\xe1\xe25/B\xebn\x90OX\xdd\xf7" +
	"\xf6\xa7\xd5\xd6\xdf\xb0\x0fU\x01DHOS&\x8d\xad" +
	"\x83$\x05\xb4\x91\xae\xbfQr\xc3|\x02\xa3\x1a\x97\xa6" +
	"h\xbb\xf4]\x85B\x92\x95\x83\xfd\xe7\x10M\xd5\xbd\xdc" +
	"\xbc\xf7\xcd\x16S\xe2\x0e\x8b\x101\x8c\x84\xfd\\}\xe2" +
	"\xe7\x8a4\xce\xcc7\x92\xd4OUf\x0e\xc6\x0c\xd9\xed" +
	"\xde\x8fDt\xf7Cd\xe5\xd1\x13\xde\xb7SO\xe6\xea" +
	"\x8f\xf4z'Y\x8et\xfbV\xba\x1c\xe9\x86\x0a\xef\x0e" +
	"\x91\xb9\xdcB\x99/f~0D\xa6m\xae\xe9\xd4\xc7" +
	"}t\x86\xe6\xea\x02d\xe8\x83\xbc\xa9\xd8\\\x999\xa8" +
	"\x94\xf2y\xcd\xd19h\xcd\xd6:3jJ{*\x05" +
	"\\ \xc6\xc8\xd4\xbd\x99\xa3%<\xd2\x94d\xd3c{" +
	"*\xcc1\x1d\x7f\xdam\x88\x1bV\xe3\xe1\xdbu2\xe7" +
	"F\xe6\xed\xd2_lk\xb5\xbb\xa2\x8f\xf7:\xacD\x16" +
	"\x16\xc8yg|\x9b\xc2\x96\xa6\xe8\xda\x8c\x94e*\xbc" +
	"#\xfa\xc5\xdffZ%\xc5q\x98:\xc0\xd37\xe7\xeb" +
	"\x8f\xc4\x92P[\xc8\x92P\xb7\x08\x89\xb1\xf0\xa01\xea" +
	"k\xbc\x01\xb5B\x9dd\xd1y\x9e@C5K\xc2\x04" +
	"\x81\x84\x0c\xab\xc2B\x86\xb6\x06\xfb\xfd\xae\x06\xbd\xd4&" +
	"\"\x86\xa4nNz\x97;\xa6\x89\x82\x89Y\x0b\x95\xf8" +
	"\x97m\xc5\x027\xa3_\x8b\xd7\xec\xeb\xaf\x12M\x037" +
	"\x0b\xa3\xaf\xe9\xe8\xa6\xcd6\x9bF\x16C3\xeb\xb2\xed" +
	"\x03\xda\xc8o\x162\xa3\x0aL\xbaR0\xd4FN\x99" +
	"\x87\x87\xa1\xab\\\xb6\xcc\xe4\x84\xa2\xd7O\xc3\x08\xff\xc5" +
	"\xaa\xbd\xa66\x14f\x15\xd2.\xe2x\x7f\xb4\xe1\xf3+" +
	"\x0c\xdb\x06\xf19`FP^U\xcd(kD\xab\xd1" +
	"s\xf9\xc8m\xe7C\x9aF\xf2\xa71@\xf5d\xab\xe1" +
	"\xb5M\xea/;\xeaz\xc5\xd6\xdcZd4,\xed\x0e" +
	"\x0fK\xfb|\xe1\xa7\x1b\x96\x06\xc3O7,\xdd\x86a" +
	"\xa3\x08?\xdd\xb04\x18~\xbaa\xe9N\x0c\x0fE\x98" +
	"\xe9\x86\xa5\x0a\x9e\x7f\x17\xf01\x1a\x962\x0c\x1bU\xe0" +
	"e\x1a\x96\x96\x90\xeb\xc0\xa7hXZA\xe9\x9a\x08?" +
	"\xdd\xb0t\x1aK\xd9x\xe1\xa7\x17\x96\xde\x87\x9f\xbb\x17" +
	"\xf8~\xb9\xf6\xe6\x87u\xf5\xbe\xf6\x13\xf0\x9c\x9cux" +
	"\xa63)^\xa8\x97\x80IIB\xfd\x0e\xd8a\xd6\xa1" +
	"av\xaa>W\xd0PsQ\x9fY\xeb\xff\x0a\x00\x00" +
	"\xff\xff7Dq\xcb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_cdefabcdefabcdef,
		Nodes: []uint64{
			0x80545037b7a4173b,
			0x806a62bc2851fc01,
			0x80b7b9a2597c4eed,
			0x815ffda3d9dd039d,
			0x8163a7ff6f92e3eb,
			0x8169b9320fb13d79,
			0x81fa11546e952c02,
			0x820db271715b4199,
			0x82a7789fb5b3a028,
			0x82bbe68570bc51c9,
			0x82c483a4cf75cbe3,
			0x82e8c67d0acc92ee,
			0x837843dd5048c6d0,
			0x838b6e674280f93f,
			0x844fdb5787f2eb73,
			0x84ae33ececbdf2f2,
			0x84ff32fdda835dfe,
			0x852c02610e8a2a24,
			0x8534668f6850d8ba,
			0x853ff72f8a1e3384,
			0x8552adf123d9b564,
			0x86020f1b6279dc1e,
			0x86b68baf94f42b99,
			0x86f0f1c44a113f21,
			0x873927d4562f9ba5,
			0x87681fa437f7497d,
			0x87d72af46493bddd,
			0x88007635e342bb94,
			0x880f6cbde51358e0,
			0x881a3fa8b6a21e65,
			0x888a7e1d97fd6855,
			0x88b187d6e94820bd,
			0x88c6bb9459dd440d,
			0x8929937be8c9e001,
			0x899e3334be65d957,
			0x89f1549a7f447f06,
			0x8a1df08ac17221fd,
			0x8a3669cb193af4dc,
			0x8a5026d84a4c9312,
			0x8acccc8118bd1f80,
			0x8b2666611a37b434,
			0x8cf4d94985ccea99,
			0x8f371262d861f7d1,
			0x8f80c9fc8ead22c9,
			0x8f9b301fdfe3c51c,
			0x9078ec69fd7d9560,
			0x917f02f6029babd0,
			0x919eb8a95b9f8a07,
			0x91ab76ec9c2c1b6f,
			0x91cbe70d9e0d9cee,
			0x9217151fa71ac827,
			0x9292e90285848d8e,
			0x93de0fbdc8643390,
			0x9400994ae28f2ed6,
			0x940ac0b117677519,
			0x944a2443abee2e54,
			0x94d039e60a812076,
			0x9598dccef1d83c38,
			0x95ca47192b7d5b43,
			0x9726e35ff31ca532,
			0x9910215bbf6992b3,
			0x998ca559e52e226b,
			0x9b02ee5625ec21fb,
			0x9b4767b704c3f415,
			0x9b932a4905396044,
			0x9c02cc7a71f37f31,
			0x9c833cee78c1a396,
			0x9c85c1e6d68aa499,
			0x9c9f074ebb94ca3b,
			0x9ca1849ea58c8bdb,
			0x9ce5c88efd68b310,
			0x9d8709f225285c2e,
			0x9e2a00f7ceea75bb,
			0x9e2bb9505c9a267d,
			0x9e7c63f7db1235ba,
			0x9ed2b947650ba549,
			0x9f29336af3ac4f9f,
			0x9f325734076f5253,
			0x9f58a78be70b999b,
			0x9f9c5384091d79ce,
			0x9fd8d08daae7794b,
			0xa012f4912c4151f9,
			0xa0a594ed993e78ca,
			0xa0ec151dfc4791ad,
			0xa1914008041e7c44,
			0xa23c8c68e3798bb0,
			0xa2fef4c64b89cc83,
			0xa304ad602f730110,
			0xa377d9a07bd4d6d6,
			0xa3f9826addd42d0d,
			0xa41074130e196783,
			0xa4fef5cca0eb8eaa,
			0xa574b41924caefc7,
			0xa58428b610ebb10c,
			0xa5a8b25550e0240d,
			0xa66384177fb99486,
			0xa77cd936c64d6ed7,
			0xa796a4d827fc48b4,
			0xa7ab2bbcc8342323,
			0xa7e27069226b98ad,
			0xa86e0a28ffc1ad93,
			0xa88d7dcd40961f55,
			0xa916afef9cb49a54,
			0xa984e49365524f14,
			0xa987ac170b5f48c3,
			0xab1ebc3e87d43ca9,
			0xab456691cd8fec03,
			0xaba4e5389c6116b1,
			0xadd206cd099784fe,
			0xae87b106322248a8,
			0xae8dab9506472d1d,
			0xaeb6652f725f241b,
			0xaf015f84859d0028,
			0xaf898798e12e23da,
			0xb0746148ee56b888,
			0xb0d71e9e634d1529,
			0xb176d4b98cf5afa6,
			0xb26bddc14e66729a,
			0xb2ea7b1704b448ca,
			0xb3a8f9a49aa3ccf8,
			0xb3f8feecbb635492,
			0xb4452aee08031161,
			0xb513764d5512a334,
			0xb52cdc5b0d00dfde,
			0xb5a6abce79a6f063,
			0xb66a9193d2300649,
			0xb6c8b8141b0acfa3,
			0xb6db3a4bd35d7d66,
			0xb72ecd96799cf7e7,
			0xb745aa7de9c39191,
			0xb74f1e7519f6fd40,
			0xb7b4735fc72e17de,
			0xb7c78f3b8eaa6d37,
			0xb7f9da429e0872e9,
			0xb80f94bef16dea20,
			0xb8375f7f6b27403c,
			0xb854b850a845d36e,
			0xb861bce5eec387bd,
			0xb8b4b6c6e1e52417,
			0xb8ef2f123b9801df,
			0xb915e75dd5f36b13,
			0xb976985727e64f4f,
			0xba7cb4dbd62489d5,
			0xba8fb8d4d5b15836,
			0xbad2f81cd78e053a,
			0xbadafe4de857fe71,
			0xbae3c3ae8a00e8a6,
			0xbb2eb4d03dfe2a7d,
			0xbcba10c194c8e450,
			0xbd94d13b8b1bcadf,
			0xbde69a9238be5e37,
			0xbdf104dd14c6c05e,
			0xbdf7ebd433f5fbda,
			0xbe54ea0b18470782,
			0xbe5555051342f44e,
			0xbe9f101bff0dabed,
			0xbea97f1023792be0,
			0xbed2ab9863c56d3b,
			0xbf5a2cc18c663351,
			0xc008c1d71bacfa15,
			0xc1409e4be6401554,
			0xc186a9c36f974c33,
			0xc20152b889987299,
			0xc2320321f84d3e6b,
			0xc2b96012172f8df1,
			0xc2c16fce3e3aa7eb,
			0xc2f958e3df4726c9,
			0xc33264acc8d4e592,
			0xc3cb1662234dd3f3,
			0xc49c789ac9b97fbe,
			0xc4aef0c4dc45bc83,
			0xc512b3f8727629d7,
			0xc54135596f07c87b,
			0xc576336317865217,
			0xc58ad6bd519f935e,
			0xc5955ef3c3c9e4b0,
			0xc5c8431019d453a8,
			0xc5d32cc234a53620,
			0xc5eb62ff00b0072f,
			0xc644c15adcdd09cb,
			0xc6cfb8d85c850055,
			0xc73e9eb76d70ee0a,
			0xc7587c9f16a1fc72,
			0xc76af8996e024e54,
			0xc817bfd03978a39b,
			0xc854a2272dea6789,
			0xc8768679ec52e012,
			0xc8d069bf9cf2487f,
			0xc998874f2bcc5999,
			0xca688fde6bcd4bbd,
			0xca9a2c906b36a12e,
			0xca9e1a4afe3dca58,
			0xcab56e851899421c,
			0xcac443c397628440,
			0xcafb4dbd23ee299c,
			0xcc4575715bad9f24,
			0xcc521ab8cc5e91c0,
			0xcd102105578e2465,
			0xcddf6dbc366deb3e,
			0xce388f415f14acb0,
			0xce55ffdae06f694d,
			0xcf365ec11d0c95df,
			0xcf7084fe71119d92,
			0xcfe31aeeb9723e6b,
			0xcff0b4cd24d99860,
			0xd06564713244f529,
			0xd09020015ade2993,
			0xd0f511db04f5194f,
			0xd1052d0564f25e0d,
			0xd2768707959c3ea9,
			0xd351f43ee97d7196,
			0xd35ac5679adaf993,
			0xd3bb2f7cf3a77db4,
			0xd5ad818067cc16e7,
			0xd5db12ce6b4738ee,
			0xd61435667434c9c3,
			0xd65b5d6ec837db5d,
			0xd68209c5c40dc249,
			0xd6aded5b005488d5,
			0xd74a1be2552282a4,
			0xd75aa49a213b1c70,
			0xd769b0a839cd2c2e,
			0xd7e327183a76a4f8,
			0xd801819fddc5173b,
			0xd870df23456b7900,
			0xd89879eb841b57cc,
			0xd8a782a58f006803,
			0xd8b98b1d67fe28a2,
			0xd8facf5bce9546c7,
			0xd963a858373108fc,
			0xd9cddf13c207ce2d,
			0xda1a12e840c66e0f,
			0xdaac54598edab4df,
			0xdacdaa0d69c497ba,
			0xdb56b83f3063105d,
			0xdb651f04f1f0488d,
			0xdb811264e672b627,
			0xdb92e7fa759f1894,
			0xdbae5e634d8e9ecd,
			0xdbc10a1e045d6bed,
			0xdc9cd82121d86b8e,
			0xdcfcab864c34a056,
			0xdd1f5357c25cc3b7,
			0xdd9072d437eab9a1,
			0xde51be80c580aa82,
			0xde9db2015f39bf49,
			0xdea4ce0866a280a7,
			0xdf0c1226c90e00ad,
			0xdf6b29c6f745a197,
			0xe00fb886fc82f1ab,
			0xe02474ef23d4f2bc,
			0xe0a980f598d8a745,
			0xe0b0d21d1219b48c,
			0xe0ce907abb969349,
			0xe10a56be889c8d63,
			0xe130b601260e44b5,
			0xe430fa7b7d850130,
			0xe4e7eeb23bebb1f8,
			0xe5205955ce643ade,
			0xe5dcc4b159c002f4,
			0xe62b635478feb9f1,
			0xe64292fa5df872fd,
			0xe72726225a9f8ca8,
			0xe72e2063d179e57d,
			0xe7469eaa174fdd9f,
			0xe79b0d006ef1331d,
			0xe7eceebcdcb01522,
			0xe83eeeca42eb6184,
			0xe89b2535f3e88eb7,
			0xe8b71523b2ef78ed,
			0xe8dc5ddc1cdb5438,
			0xe930a7e80f737844,
			0xe9a04e0d39785218,
			0xeabe3c2d8178a916,
			0xeafef4c5dcc4b5b5,
			0xec5aa6bcd4fca2e4,
			0xec5c7b07d1717d84,
			0xecbd91cdb76d6a28,
			0xed7d297bd1f274b3,
			0xedada67c810ba36d,
			0xedae9d3a84825876,
			0xeef4dfefeb1def9f,
			0xef71c6ada87eac4c,
			0xefe5002d4e5acb87,
			0xf014129ca27de499,
			0xf03da18831a1c80b,
			0xf047782143ce741d,
			0xf0569fdbfd2961b4,
			0xf08bcfb76fcf5061,
			0xf0eb3ae18581b267,
			0xf19df04c8f59f3a6,
			0xf1cccb02e7af0dd8,
			0xf1e3711cde8fa324,
			0xf1f7baa2935a0cd7,
			0xf23307bee1ce0b8d,
			0xf304800fc3af267f,
			0xf32339f8d6ffe524,
			0xf418cd61a8543b3c,
			0xf42a44d24baf1780,
			0xf47ddd36364c797f,
			0xf4c3318dcf329728,
			0xf55818d39f2c0c72,
			0xf5a87fa04392d0a1,
			0xf613029b64a06aeb,
			0xf640e180eb6f7e34,
			0xf6ebf8b8d23d794f,
			0xf7787292d29bdcd7,
			0xf7af0983a9ca61c5,
			0xf7b756860a5b5804,
			0xf7df715b4e24efb3,
			0xf87e75def99cdba4,
			0xf89cd60c9713ce58,
			0xf8dcc5cd22965ff5,
			0xf90c9c3f6c27a1c2,
			0xf9454e8612b10b69,
			0xfa10659ae02f2093,
			0xfa35d04887272ed9,
			0xfa4d6a8cac27c611,
			0xfa5626b7b9dcd44b,
			0xfa80583ce360de61,
			0xfab5a20f1d337f75,
			0xfb0629d3fd4188b0,
			0xfb1ba86c82d8b9b1,
			0xfb596df65e062edf,
			0xfc446c448d940ff7,
			0xfc766ac7f0d6e4f5,
			0xfd58a2914a0296e2,
			0xfe88232d771013d6,
			0xfe931b1705a8e8a8,
			0xfffc6cb5879fa108,
		},
		Compressed: true,
	})
}
