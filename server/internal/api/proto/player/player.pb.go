// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: player/player.proto

package player

import (
	common "github.com/knervous/eqgo/internal/api/proto/common"
	item "github.com/knervous/eqgo/internal/api/proto/item"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Tint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Blue          int32                  `protobuf:"varint,1,opt,name=blue,proto3" json:"blue,omitempty"`
	Green         int32                  `protobuf:"varint,2,opt,name=green,proto3" json:"green,omitempty"`
	Red           int32                  `protobuf:"varint,3,opt,name=red,proto3" json:"red,omitempty"`
	UseTint       int32                  `protobuf:"varint,4,opt,name=use_tint,json=useTint,proto3" json:"use_tint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tint) Reset() {
	*x = Tint{}
	mi := &file_player_player_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tint) ProtoMessage() {}

func (x *Tint) ProtoReflect() protoreflect.Message {
	mi := &file_player_player_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tint.ProtoReflect.Descriptor instead.
func (*Tint) Descriptor() ([]byte, []int) {
	return file_player_player_proto_rawDescGZIP(), []int{0}
}

func (x *Tint) GetBlue() int32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *Tint) GetGreen() int32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *Tint) GetRed() int32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *Tint) GetUseTint() int32 {
	if x != nil {
		return x.UseTint
	}
	return 0
}

type CharSelectEquip struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Material      int32                  `protobuf:"varint,1,opt,name=material,proto3" json:"material,omitempty"`
	Color         *Tint                  `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CharSelectEquip) Reset() {
	*x = CharSelectEquip{}
	mi := &file_player_player_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharSelectEquip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharSelectEquip) ProtoMessage() {}

func (x *CharSelectEquip) ProtoReflect() protoreflect.Message {
	mi := &file_player_player_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharSelectEquip.ProtoReflect.Descriptor instead.
func (*CharSelectEquip) Descriptor() ([]byte, []int) {
	return file_player_player_proto_rawDescGZIP(), []int{1}
}

func (x *CharSelectEquip) GetMaterial() int32 {
	if x != nil {
		return x.Material
	}
	return 0
}

func (x *CharSelectEquip) GetColor() *Tint {
	if x != nil {
		return x.Color
	}
	return nil
}

type CharacterSelectEntry struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CharClass       int32                  `protobuf:"varint,2,opt,name=char_class,json=charClass,proto3" json:"char_class,omitempty"`
	Race            int32                  `protobuf:"varint,3,opt,name=race,proto3" json:"race,omitempty"`
	Level           int32                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Zone            int32                  `protobuf:"varint,5,opt,name=zone,proto3" json:"zone,omitempty"`
	Instance        int32                  `protobuf:"varint,6,opt,name=instance,proto3" json:"instance,omitempty"`
	Gender          int32                  `protobuf:"varint,7,opt,name=gender,proto3" json:"gender,omitempty"`
	Face            int32                  `protobuf:"varint,8,opt,name=face,proto3" json:"face,omitempty"`
	Items           []*item.ItemInstance   `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`
	Deity           int32                  `protobuf:"varint,10,opt,name=deity,proto3" json:"deity,omitempty"`
	PrimaryIdFile   int32                  `protobuf:"varint,11,opt,name=primary_id_file,json=primaryIdFile,proto3" json:"primary_id_file,omitempty"`
	SecondaryIdFile int32                  `protobuf:"varint,12,opt,name=secondary_id_file,json=secondaryIdFile,proto3" json:"secondary_id_file,omitempty"`
	GoHome          int32                  `protobuf:"varint,13,opt,name=go_home,json=goHome,proto3" json:"go_home,omitempty"`
	Enabled         int32                  `protobuf:"varint,14,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LastLogin       int32                  `protobuf:"varint,15,opt,name=last_login,json=lastLogin,proto3" json:"last_login,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CharacterSelectEntry) Reset() {
	*x = CharacterSelectEntry{}
	mi := &file_player_player_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterSelectEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterSelectEntry) ProtoMessage() {}

func (x *CharacterSelectEntry) ProtoReflect() protoreflect.Message {
	mi := &file_player_player_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterSelectEntry.ProtoReflect.Descriptor instead.
func (*CharacterSelectEntry) Descriptor() ([]byte, []int) {
	return file_player_player_proto_rawDescGZIP(), []int{2}
}

func (x *CharacterSelectEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharacterSelectEntry) GetCharClass() int32 {
	if x != nil {
		return x.CharClass
	}
	return 0
}

func (x *CharacterSelectEntry) GetRace() int32 {
	if x != nil {
		return x.Race
	}
	return 0
}

func (x *CharacterSelectEntry) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CharacterSelectEntry) GetZone() int32 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *CharacterSelectEntry) GetInstance() int32 {
	if x != nil {
		return x.Instance
	}
	return 0
}

func (x *CharacterSelectEntry) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CharacterSelectEntry) GetFace() int32 {
	if x != nil {
		return x.Face
	}
	return 0
}

func (x *CharacterSelectEntry) GetItems() []*item.ItemInstance {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CharacterSelectEntry) GetDeity() int32 {
	if x != nil {
		return x.Deity
	}
	return 0
}

func (x *CharacterSelectEntry) GetPrimaryIdFile() int32 {
	if x != nil {
		return x.PrimaryIdFile
	}
	return 0
}

func (x *CharacterSelectEntry) GetSecondaryIdFile() int32 {
	if x != nil {
		return x.SecondaryIdFile
	}
	return 0
}

func (x *CharacterSelectEntry) GetGoHome() int32 {
	if x != nil {
		return x.GoHome
	}
	return 0
}

func (x *CharacterSelectEntry) GetEnabled() int32 {
	if x != nil {
		return x.Enabled
	}
	return 0
}

func (x *CharacterSelectEntry) GetLastLogin() int32 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

type CharacterSelect struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	CharacterCount int32                   `protobuf:"varint,1,opt,name=character_count,json=characterCount,proto3" json:"character_count,omitempty"`
	Characters     []*CharacterSelectEntry `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CharacterSelect) Reset() {
	*x = CharacterSelect{}
	mi := &file_player_player_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharacterSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterSelect) ProtoMessage() {}

func (x *CharacterSelect) ProtoReflect() protoreflect.Message {
	mi := &file_player_player_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterSelect.ProtoReflect.Descriptor instead.
func (*CharacterSelect) Descriptor() ([]byte, []int) {
	return file_player_player_proto_rawDescGZIP(), []int{3}
}

func (x *CharacterSelect) GetCharacterCount() int32 {
	if x != nil {
		return x.CharacterCount
	}
	return 0
}

func (x *CharacterSelect) GetCharacters() []*CharacterSelectEntry {
	if x != nil {
		return x.Characters
	}
	return nil
}

type PlayerProfile struct {
	state                        protoimpl.MessageState  `protogen:"open.v1"`
	Checksum                     int32                   `protobuf:"varint,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Gender                       int32                   `protobuf:"varint,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Race                         int32                   `protobuf:"varint,3,opt,name=race,proto3" json:"race,omitempty"`
	CharClass                    int32                   `protobuf:"varint,4,opt,name=char_class,json=charClass,proto3" json:"char_class,omitempty"`
	Level                        int32                   `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Level1                       int32                   `protobuf:"varint,6,opt,name=level1,proto3" json:"level1,omitempty"`
	Binds                        []*common.Bind          `protobuf:"bytes,7,rep,name=binds,proto3" json:"binds,omitempty"`
	Deity                        int32                   `protobuf:"varint,8,opt,name=deity,proto3" json:"deity,omitempty"`
	Intoxication                 int32                   `protobuf:"varint,9,opt,name=intoxication,proto3" json:"intoxication,omitempty"`
	SpellSlotRefresh             []int32                 `protobuf:"varint,10,rep,packed,name=spell_slot_refresh,json=spellSlotRefresh,proto3" json:"spell_slot_refresh,omitempty"`
	AbilitySlotRefresh           int32                   `protobuf:"varint,11,opt,name=ability_slot_refresh,json=abilitySlotRefresh,proto3" json:"ability_slot_refresh,omitempty"`
	Haircolor                    int32                   `protobuf:"varint,12,opt,name=haircolor,proto3" json:"haircolor,omitempty"`
	Beardcolor                   int32                   `protobuf:"varint,13,opt,name=beardcolor,proto3" json:"beardcolor,omitempty"`
	Eyecolor1                    int32                   `protobuf:"varint,14,opt,name=eyecolor1,proto3" json:"eyecolor1,omitempty"`
	Eyecolor2                    int32                   `protobuf:"varint,15,opt,name=eyecolor2,proto3" json:"eyecolor2,omitempty"`
	Hairstyle                    int32                   `protobuf:"varint,16,opt,name=hairstyle,proto3" json:"hairstyle,omitempty"`
	Beard                        int32                   `protobuf:"varint,17,opt,name=beard,proto3" json:"beard,omitempty"`
	ItemMaterial                 *common.TextureProfile  `protobuf:"bytes,18,opt,name=item_material,json=itemMaterial,proto3" json:"item_material,omitempty"`
	ItemTint                     int32                   `protobuf:"varint,19,opt,name=item_tint,json=itemTint,proto3" json:"item_tint,omitempty"`
	AaArray                      []*common.AA_Array      `protobuf:"bytes,20,rep,name=aa_array,json=aaArray,proto3" json:"aa_array,omitempty"`
	Points                       int32                   `protobuf:"varint,21,opt,name=points,proto3" json:"points,omitempty"`
	Mana                         int32                   `protobuf:"varint,22,opt,name=mana,proto3" json:"mana,omitempty"`
	CurHp                        int32                   `protobuf:"varint,23,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	Str                          int32                   `protobuf:"varint,24,opt,name=str,proto3" json:"str,omitempty"`
	Sta                          int32                   `protobuf:"varint,25,opt,name=sta,proto3" json:"sta,omitempty"`
	Cha                          int32                   `protobuf:"varint,26,opt,name=cha,proto3" json:"cha,omitempty"`
	Dex                          int32                   `protobuf:"varint,27,opt,name=dex,proto3" json:"dex,omitempty"`
	Intel                        int32                   `protobuf:"varint,28,opt,name=intel,proto3" json:"intel,omitempty"`
	Agi                          int32                   `protobuf:"varint,29,opt,name=agi,proto3" json:"agi,omitempty"`
	Wis                          int32                   `protobuf:"varint,30,opt,name=wis,proto3" json:"wis,omitempty"`
	Face                         int32                   `protobuf:"varint,31,opt,name=face,proto3" json:"face,omitempty"`
	SpellBook                    []int32                 `protobuf:"varint,32,rep,packed,name=spell_book,json=spellBook,proto3" json:"spell_book,omitempty"`
	MemSpells                    []int32                 `protobuf:"varint,33,rep,packed,name=mem_spells,json=memSpells,proto3" json:"mem_spells,omitempty"`
	Platinum                     int32                   `protobuf:"varint,34,opt,name=platinum,proto3" json:"platinum,omitempty"`
	Gold                         int32                   `protobuf:"varint,35,opt,name=gold,proto3" json:"gold,omitempty"`
	Silver                       int32                   `protobuf:"varint,36,opt,name=silver,proto3" json:"silver,omitempty"`
	Copper                       int32                   `protobuf:"varint,37,opt,name=copper,proto3" json:"copper,omitempty"`
	PlatinumCursor               int32                   `protobuf:"varint,38,opt,name=platinum_cursor,json=platinumCursor,proto3" json:"platinum_cursor,omitempty"`
	GoldCursor                   int32                   `protobuf:"varint,39,opt,name=gold_cursor,json=goldCursor,proto3" json:"gold_cursor,omitempty"`
	SilverCursor                 int32                   `protobuf:"varint,40,opt,name=silver_cursor,json=silverCursor,proto3" json:"silver_cursor,omitempty"`
	CopperCursor                 int32                   `protobuf:"varint,41,opt,name=copper_cursor,json=copperCursor,proto3" json:"copper_cursor,omitempty"`
	Skills                       []int32                 `protobuf:"varint,42,rep,packed,name=skills,proto3" json:"skills,omitempty"`
	InnateSkills                 []int32                 `protobuf:"varint,43,rep,packed,name=innate_skills,json=innateSkills,proto3" json:"innate_skills,omitempty"`
	Toxicity                     int32                   `protobuf:"varint,44,opt,name=toxicity,proto3" json:"toxicity,omitempty"`
	ThirstLevel                  int32                   `protobuf:"varint,45,opt,name=thirst_level,json=thirstLevel,proto3" json:"thirst_level,omitempty"`
	HungerLevel                  int32                   `protobuf:"varint,46,opt,name=hunger_level,json=hungerLevel,proto3" json:"hunger_level,omitempty"`
	Buffs                        []*common.SpellBuff     `protobuf:"bytes,47,rep,name=buffs,proto3" json:"buffs,omitempty"`
	Disciplines                  *common.Disciplines     `protobuf:"bytes,48,opt,name=disciplines,proto3" json:"disciplines,omitempty"`
	RecastTimers                 []int32                 `protobuf:"varint,49,rep,packed,name=recast_timers,json=recastTimers,proto3" json:"recast_timers,omitempty"`
	Endurance                    int32                   `protobuf:"varint,50,opt,name=endurance,proto3" json:"endurance,omitempty"`
	AapointsSpent                int32                   `protobuf:"varint,51,opt,name=aapoints_spent,json=aapointsSpent,proto3" json:"aapoints_spent,omitempty"`
	Aapoints                     int32                   `protobuf:"varint,52,opt,name=aapoints,proto3" json:"aapoints,omitempty"`
	Bandoliers                   []*common.Bandolier     `protobuf:"bytes,53,rep,name=bandoliers,proto3" json:"bandoliers,omitempty"`
	Potionbelt                   *common.PotionBelt      `protobuf:"bytes,54,opt,name=potionbelt,proto3" json:"potionbelt,omitempty"`
	AvailableSlots               int32                   `protobuf:"varint,55,opt,name=available_slots,json=availableSlots,proto3" json:"available_slots,omitempty"`
	Name                         string                  `protobuf:"bytes,56,opt,name=name,proto3" json:"name,omitempty"`
	LastName                     string                  `protobuf:"bytes,57,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	GuildId                      int32                   `protobuf:"varint,58,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Birthday                     int32                   `protobuf:"varint,59,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Lastlogin                    int32                   `protobuf:"varint,60,opt,name=lastlogin,proto3" json:"lastlogin,omitempty"`
	TimePlayedMin                int32                   `protobuf:"varint,61,opt,name=time_played_min,json=timePlayedMin,proto3" json:"time_played_min,omitempty"`
	Pvp                          int32                   `protobuf:"varint,62,opt,name=pvp,proto3" json:"pvp,omitempty"`
	Anon                         int32                   `protobuf:"varint,63,opt,name=anon,proto3" json:"anon,omitempty"`
	Gm                           int32                   `protobuf:"varint,64,opt,name=gm,proto3" json:"gm,omitempty"`
	Guildrank                    int32                   `protobuf:"varint,65,opt,name=guildrank,proto3" json:"guildrank,omitempty"`
	Guildbanker                  int32                   `protobuf:"varint,66,opt,name=guildbanker,proto3" json:"guildbanker,omitempty"`
	Exp                          int32                   `protobuf:"varint,67,opt,name=exp,proto3" json:"exp,omitempty"`
	Timeentitledonaccount        int32                   `protobuf:"varint,68,opt,name=timeentitledonaccount,proto3" json:"timeentitledonaccount,omitempty"`
	Languages                    []int32                 `protobuf:"varint,69,rep,packed,name=languages,proto3" json:"languages,omitempty"`
	X                            float32                 `protobuf:"fixed32,70,opt,name=x,proto3" json:"x,omitempty"`
	Y                            float32                 `protobuf:"fixed32,71,opt,name=y,proto3" json:"y,omitempty"`
	Z                            float32                 `protobuf:"fixed32,72,opt,name=z,proto3" json:"z,omitempty"`
	Heading                      float32                 `protobuf:"fixed32,73,opt,name=heading,proto3" json:"heading,omitempty"`
	PlatinumBank                 int32                   `protobuf:"varint,74,opt,name=platinum_bank,json=platinumBank,proto3" json:"platinum_bank,omitempty"`
	GoldBank                     int32                   `protobuf:"varint,75,opt,name=gold_bank,json=goldBank,proto3" json:"gold_bank,omitempty"`
	SilverBank                   int32                   `protobuf:"varint,76,opt,name=silver_bank,json=silverBank,proto3" json:"silver_bank,omitempty"`
	CopperBank                   int32                   `protobuf:"varint,77,opt,name=copper_bank,json=copperBank,proto3" json:"copper_bank,omitempty"`
	PlatinumShared               int32                   `protobuf:"varint,78,opt,name=platinum_shared,json=platinumShared,proto3" json:"platinum_shared,omitempty"`
	Expansions                   int32                   `protobuf:"varint,79,opt,name=expansions,proto3" json:"expansions,omitempty"`
	Autosplit                    int32                   `protobuf:"varint,80,opt,name=autosplit,proto3" json:"autosplit,omitempty"`
	ZoneId                       int32                   `protobuf:"varint,81,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	ZoneInstance                 int32                   `protobuf:"varint,82,opt,name=zone_instance,json=zoneInstance,proto3" json:"zone_instance,omitempty"`
	GroupMembers                 []*common.StringList    `protobuf:"bytes,83,rep,name=group_members,json=groupMembers,proto3" json:"group_members,omitempty"`
	GroupLeader                  string                  `protobuf:"bytes,84,opt,name=group_leader,json=groupLeader,proto3" json:"group_leader,omitempty"`
	Entityid                     int32                   `protobuf:"varint,85,opt,name=entityid,proto3" json:"entityid,omitempty"`
	LeadAaActive                 int32                   `protobuf:"varint,86,opt,name=lead_aa_active,json=leadAaActive,proto3" json:"lead_aa_active,omitempty"`
	LdonPointsGuk                int32                   `protobuf:"varint,87,opt,name=ldon_points_guk,json=ldonPointsGuk,proto3" json:"ldon_points_guk,omitempty"`
	LdonPointsMir                int32                   `protobuf:"varint,88,opt,name=ldon_points_mir,json=ldonPointsMir,proto3" json:"ldon_points_mir,omitempty"`
	LdonPointsMmc                int32                   `protobuf:"varint,89,opt,name=ldon_points_mmc,json=ldonPointsMmc,proto3" json:"ldon_points_mmc,omitempty"`
	LdonPointsRuj                int32                   `protobuf:"varint,90,opt,name=ldon_points_ruj,json=ldonPointsRuj,proto3" json:"ldon_points_ruj,omitempty"`
	LdonPointsTak                int32                   `protobuf:"varint,91,opt,name=ldon_points_tak,json=ldonPointsTak,proto3" json:"ldon_points_tak,omitempty"`
	LdonPointsAvailable          int32                   `protobuf:"varint,92,opt,name=ldon_points_available,json=ldonPointsAvailable,proto3" json:"ldon_points_available,omitempty"`
	TributeTimeRemaining         int32                   `protobuf:"varint,93,opt,name=tribute_time_remaining,json=tributeTimeRemaining,proto3" json:"tribute_time_remaining,omitempty"`
	CareerTributePoints          int32                   `protobuf:"varint,94,opt,name=career_tribute_points,json=careerTributePoints,proto3" json:"career_tribute_points,omitempty"`
	TributePoints                int32                   `protobuf:"varint,95,opt,name=tribute_points,json=tributePoints,proto3" json:"tribute_points,omitempty"`
	TributeActive                int32                   `protobuf:"varint,96,opt,name=tribute_active,json=tributeActive,proto3" json:"tribute_active,omitempty"`
	Tributes                     []*common.Tribute       `protobuf:"bytes,97,rep,name=tributes,proto3" json:"tributes,omitempty"`
	GroupLeadershipExp           float64                 `protobuf:"fixed64,98,opt,name=group_leadership_exp,json=groupLeadershipExp,proto3" json:"group_leadership_exp,omitempty"`
	RaidLeadershipExp            float64                 `protobuf:"fixed64,99,opt,name=raid_leadership_exp,json=raidLeadershipExp,proto3" json:"raid_leadership_exp,omitempty"`
	GroupLeadershipPoints        int32                   `protobuf:"varint,100,opt,name=group_leadership_points,json=groupLeadershipPoints,proto3" json:"group_leadership_points,omitempty"`
	RaidLeadershipPoints         int32                   `protobuf:"varint,101,opt,name=raid_leadership_points,json=raidLeadershipPoints,proto3" json:"raid_leadership_points,omitempty"`
	LeaderAbilities              *common.LeadershipAA    `protobuf:"bytes,102,opt,name=leader_abilities,json=leaderAbilities,proto3" json:"leader_abilities,omitempty"`
	AirRemaining                 int32                   `protobuf:"varint,103,opt,name=air_remaining,json=airRemaining,proto3" json:"air_remaining,omitempty"`
	PvpKills                     int32                   `protobuf:"varint,104,opt,name=pvp_kills,json=pvpKills,proto3" json:"pvp_kills,omitempty"`
	PvpDeaths                    int32                   `protobuf:"varint,105,opt,name=pvp_deaths,json=pvpDeaths,proto3" json:"pvp_deaths,omitempty"`
	PvpCurrentPoints             int32                   `protobuf:"varint,106,opt,name=pvp_current_points,json=pvpCurrentPoints,proto3" json:"pvp_current_points,omitempty"`
	PvpCareerPoints              int32                   `protobuf:"varint,107,opt,name=pvp_career_points,json=pvpCareerPoints,proto3" json:"pvp_career_points,omitempty"`
	PvpBestKillStreak            int32                   `protobuf:"varint,108,opt,name=pvp_best_kill_streak,json=pvpBestKillStreak,proto3" json:"pvp_best_kill_streak,omitempty"`
	PvpWorstDeathStreak          int32                   `protobuf:"varint,109,opt,name=pvp_worst_death_streak,json=pvpWorstDeathStreak,proto3" json:"pvp_worst_death_streak,omitempty"`
	PvpCurrentKillStreak         int32                   `protobuf:"varint,110,opt,name=pvp_current_kill_streak,json=pvpCurrentKillStreak,proto3" json:"pvp_current_kill_streak,omitempty"`
	PvpLastKill                  *common.PVPStatsEntry   `protobuf:"bytes,111,opt,name=pvp_last_kill,json=pvpLastKill,proto3" json:"pvp_last_kill,omitempty"`
	PvpLastDeath                 *common.PVPStatsEntry   `protobuf:"bytes,112,opt,name=pvp_last_death,json=pvpLastDeath,proto3" json:"pvp_last_death,omitempty"`
	PvpNumberOfKillsInLast_Hours int32                   `protobuf:"varint,113,opt,name=pvp_number_of_kills_in_last__hours,json=pvpNumberOfKillsInLastHours,proto3" json:"pvp_number_of_kills_in_last__hours,omitempty"`
	PvpRecentKills               []*common.PVPStatsEntry `protobuf:"bytes,114,rep,name=pvp_recent_kills,json=pvpRecentKills,proto3" json:"pvp_recent_kills,omitempty"`
	ExpAa                        int32                   `protobuf:"varint,115,opt,name=exp_aa,json=expAa,proto3" json:"exp_aa,omitempty"`
	CurrentRadCrystals           int32                   `protobuf:"varint,116,opt,name=current_rad_crystals,json=currentRadCrystals,proto3" json:"current_rad_crystals,omitempty"`
	CareerRadCrystals            int32                   `protobuf:"varint,117,opt,name=career_rad_crystals,json=careerRadCrystals,proto3" json:"career_rad_crystals,omitempty"`
	CurrentEbonCrystals          int32                   `protobuf:"varint,118,opt,name=current_ebon_crystals,json=currentEbonCrystals,proto3" json:"current_ebon_crystals,omitempty"`
	CareerEbonCrystals           int32                   `protobuf:"varint,119,opt,name=career_ebon_crystals,json=careerEbonCrystals,proto3" json:"career_ebon_crystals,omitempty"`
	GroupAutoconsent             int32                   `protobuf:"varint,120,opt,name=group_autoconsent,json=groupAutoconsent,proto3" json:"group_autoconsent,omitempty"`
	RaidAutoconsent              int32                   `protobuf:"varint,121,opt,name=raid_autoconsent,json=raidAutoconsent,proto3" json:"raid_autoconsent,omitempty"`
	GuildAutoconsent             int32                   `protobuf:"varint,122,opt,name=guild_autoconsent,json=guildAutoconsent,proto3" json:"guild_autoconsent,omitempty"`
	Level3                       int32                   `protobuf:"varint,123,opt,name=level3,proto3" json:"level3,omitempty"`
	Showhelm                     int32                   `protobuf:"varint,124,opt,name=showhelm,proto3" json:"showhelm,omitempty"`
	InventoryItems               []*item.ItemInstance    `protobuf:"bytes,126,rep,name=inventory_items,json=inventoryItems,proto3" json:"inventory_items,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *PlayerProfile) Reset() {
	*x = PlayerProfile{}
	mi := &file_player_player_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerProfile) ProtoMessage() {}

func (x *PlayerProfile) ProtoReflect() protoreflect.Message {
	mi := &file_player_player_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerProfile.ProtoReflect.Descriptor instead.
func (*PlayerProfile) Descriptor() ([]byte, []int) {
	return file_player_player_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerProfile) GetChecksum() int32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *PlayerProfile) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *PlayerProfile) GetRace() int32 {
	if x != nil {
		return x.Race
	}
	return 0
}

func (x *PlayerProfile) GetCharClass() int32 {
	if x != nil {
		return x.CharClass
	}
	return 0
}

func (x *PlayerProfile) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PlayerProfile) GetLevel1() int32 {
	if x != nil {
		return x.Level1
	}
	return 0
}

func (x *PlayerProfile) GetBinds() []*common.Bind {
	if x != nil {
		return x.Binds
	}
	return nil
}

func (x *PlayerProfile) GetDeity() int32 {
	if x != nil {
		return x.Deity
	}
	return 0
}

func (x *PlayerProfile) GetIntoxication() int32 {
	if x != nil {
		return x.Intoxication
	}
	return 0
}

func (x *PlayerProfile) GetSpellSlotRefresh() []int32 {
	if x != nil {
		return x.SpellSlotRefresh
	}
	return nil
}

func (x *PlayerProfile) GetAbilitySlotRefresh() int32 {
	if x != nil {
		return x.AbilitySlotRefresh
	}
	return 0
}

func (x *PlayerProfile) GetHaircolor() int32 {
	if x != nil {
		return x.Haircolor
	}
	return 0
}

func (x *PlayerProfile) GetBeardcolor() int32 {
	if x != nil {
		return x.Beardcolor
	}
	return 0
}

func (x *PlayerProfile) GetEyecolor1() int32 {
	if x != nil {
		return x.Eyecolor1
	}
	return 0
}

func (x *PlayerProfile) GetEyecolor2() int32 {
	if x != nil {
		return x.Eyecolor2
	}
	return 0
}

func (x *PlayerProfile) GetHairstyle() int32 {
	if x != nil {
		return x.Hairstyle
	}
	return 0
}

func (x *PlayerProfile) GetBeard() int32 {
	if x != nil {
		return x.Beard
	}
	return 0
}

func (x *PlayerProfile) GetItemMaterial() *common.TextureProfile {
	if x != nil {
		return x.ItemMaterial
	}
	return nil
}

func (x *PlayerProfile) GetItemTint() int32 {
	if x != nil {
		return x.ItemTint
	}
	return 0
}

func (x *PlayerProfile) GetAaArray() []*common.AA_Array {
	if x != nil {
		return x.AaArray
	}
	return nil
}

func (x *PlayerProfile) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *PlayerProfile) GetMana() int32 {
	if x != nil {
		return x.Mana
	}
	return 0
}

func (x *PlayerProfile) GetCurHp() int32 {
	if x != nil {
		return x.CurHp
	}
	return 0
}

func (x *PlayerProfile) GetStr() int32 {
	if x != nil {
		return x.Str
	}
	return 0
}

func (x *PlayerProfile) GetSta() int32 {
	if x != nil {
		return x.Sta
	}
	return 0
}

func (x *PlayerProfile) GetCha() int32 {
	if x != nil {
		return x.Cha
	}
	return 0
}

func (x *PlayerProfile) GetDex() int32 {
	if x != nil {
		return x.Dex
	}
	return 0
}

func (x *PlayerProfile) GetIntel() int32 {
	if x != nil {
		return x.Intel
	}
	return 0
}

func (x *PlayerProfile) GetAgi() int32 {
	if x != nil {
		return x.Agi
	}
	return 0
}

func (x *PlayerProfile) GetWis() int32 {
	if x != nil {
		return x.Wis
	}
	return 0
}

func (x *PlayerProfile) GetFace() int32 {
	if x != nil {
		return x.Face
	}
	return 0
}

func (x *PlayerProfile) GetSpellBook() []int32 {
	if x != nil {
		return x.SpellBook
	}
	return nil
}

func (x *PlayerProfile) GetMemSpells() []int32 {
	if x != nil {
		return x.MemSpells
	}
	return nil
}

func (x *PlayerProfile) GetPlatinum() int32 {
	if x != nil {
		return x.Platinum
	}
	return 0
}

func (x *PlayerProfile) GetGold() int32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *PlayerProfile) GetSilver() int32 {
	if x != nil {
		return x.Silver
	}
	return 0
}

func (x *PlayerProfile) GetCopper() int32 {
	if x != nil {
		return x.Copper
	}
	return 0
}

func (x *PlayerProfile) GetPlatinumCursor() int32 {
	if x != nil {
		return x.PlatinumCursor
	}
	return 0
}

func (x *PlayerProfile) GetGoldCursor() int32 {
	if x != nil {
		return x.GoldCursor
	}
	return 0
}

func (x *PlayerProfile) GetSilverCursor() int32 {
	if x != nil {
		return x.SilverCursor
	}
	return 0
}

func (x *PlayerProfile) GetCopperCursor() int32 {
	if x != nil {
		return x.CopperCursor
	}
	return 0
}

func (x *PlayerProfile) GetSkills() []int32 {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *PlayerProfile) GetInnateSkills() []int32 {
	if x != nil {
		return x.InnateSkills
	}
	return nil
}

func (x *PlayerProfile) GetToxicity() int32 {
	if x != nil {
		return x.Toxicity
	}
	return 0
}

func (x *PlayerProfile) GetThirstLevel() int32 {
	if x != nil {
		return x.ThirstLevel
	}
	return 0
}

func (x *PlayerProfile) GetHungerLevel() int32 {
	if x != nil {
		return x.HungerLevel
	}
	return 0
}

func (x *PlayerProfile) GetBuffs() []*common.SpellBuff {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *PlayerProfile) GetDisciplines() *common.Disciplines {
	if x != nil {
		return x.Disciplines
	}
	return nil
}

func (x *PlayerProfile) GetRecastTimers() []int32 {
	if x != nil {
		return x.RecastTimers
	}
	return nil
}

func (x *PlayerProfile) GetEndurance() int32 {
	if x != nil {
		return x.Endurance
	}
	return 0
}

func (x *PlayerProfile) GetAapointsSpent() int32 {
	if x != nil {
		return x.AapointsSpent
	}
	return 0
}

func (x *PlayerProfile) GetAapoints() int32 {
	if x != nil {
		return x.Aapoints
	}
	return 0
}

func (x *PlayerProfile) GetBandoliers() []*common.Bandolier {
	if x != nil {
		return x.Bandoliers
	}
	return nil
}

func (x *PlayerProfile) GetPotionbelt() *common.PotionBelt {
	if x != nil {
		return x.Potionbelt
	}
	return nil
}

func (x *PlayerProfile) GetAvailableSlots() int32 {
	if x != nil {
		return x.AvailableSlots
	}
	return 0
}

func (x *PlayerProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerProfile) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *PlayerProfile) GetGuildId() int32 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *PlayerProfile) GetBirthday() int32 {
	if x != nil {
		return x.Birthday
	}
	return 0
}

func (x *PlayerProfile) GetLastlogin() int32 {
	if x != nil {
		return x.Lastlogin
	}
	return 0
}

func (x *PlayerProfile) GetTimePlayedMin() int32 {
	if x != nil {
		return x.TimePlayedMin
	}
	return 0
}

func (x *PlayerProfile) GetPvp() int32 {
	if x != nil {
		return x.Pvp
	}
	return 0
}

func (x *PlayerProfile) GetAnon() int32 {
	if x != nil {
		return x.Anon
	}
	return 0
}

func (x *PlayerProfile) GetGm() int32 {
	if x != nil {
		return x.Gm
	}
	return 0
}

func (x *PlayerProfile) GetGuildrank() int32 {
	if x != nil {
		return x.Guildrank
	}
	return 0
}

func (x *PlayerProfile) GetGuildbanker() int32 {
	if x != nil {
		return x.Guildbanker
	}
	return 0
}

func (x *PlayerProfile) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PlayerProfile) GetTimeentitledonaccount() int32 {
	if x != nil {
		return x.Timeentitledonaccount
	}
	return 0
}

func (x *PlayerProfile) GetLanguages() []int32 {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *PlayerProfile) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PlayerProfile) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PlayerProfile) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *PlayerProfile) GetHeading() float32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *PlayerProfile) GetPlatinumBank() int32 {
	if x != nil {
		return x.PlatinumBank
	}
	return 0
}

func (x *PlayerProfile) GetGoldBank() int32 {
	if x != nil {
		return x.GoldBank
	}
	return 0
}

func (x *PlayerProfile) GetSilverBank() int32 {
	if x != nil {
		return x.SilverBank
	}
	return 0
}

func (x *PlayerProfile) GetCopperBank() int32 {
	if x != nil {
		return x.CopperBank
	}
	return 0
}

func (x *PlayerProfile) GetPlatinumShared() int32 {
	if x != nil {
		return x.PlatinumShared
	}
	return 0
}

func (x *PlayerProfile) GetExpansions() int32 {
	if x != nil {
		return x.Expansions
	}
	return 0
}

func (x *PlayerProfile) GetAutosplit() int32 {
	if x != nil {
		return x.Autosplit
	}
	return 0
}

func (x *PlayerProfile) GetZoneId() int32 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *PlayerProfile) GetZoneInstance() int32 {
	if x != nil {
		return x.ZoneInstance
	}
	return 0
}

func (x *PlayerProfile) GetGroupMembers() []*common.StringList {
	if x != nil {
		return x.GroupMembers
	}
	return nil
}

func (x *PlayerProfile) GetGroupLeader() string {
	if x != nil {
		return x.GroupLeader
	}
	return ""
}

func (x *PlayerProfile) GetEntityid() int32 {
	if x != nil {
		return x.Entityid
	}
	return 0
}

func (x *PlayerProfile) GetLeadAaActive() int32 {
	if x != nil {
		return x.LeadAaActive
	}
	return 0
}

func (x *PlayerProfile) GetLdonPointsGuk() int32 {
	if x != nil {
		return x.LdonPointsGuk
	}
	return 0
}

func (x *PlayerProfile) GetLdonPointsMir() int32 {
	if x != nil {
		return x.LdonPointsMir
	}
	return 0
}

func (x *PlayerProfile) GetLdonPointsMmc() int32 {
	if x != nil {
		return x.LdonPointsMmc
	}
	return 0
}

func (x *PlayerProfile) GetLdonPointsRuj() int32 {
	if x != nil {
		return x.LdonPointsRuj
	}
	return 0
}

func (x *PlayerProfile) GetLdonPointsTak() int32 {
	if x != nil {
		return x.LdonPointsTak
	}
	return 0
}

func (x *PlayerProfile) GetLdonPointsAvailable() int32 {
	if x != nil {
		return x.LdonPointsAvailable
	}
	return 0
}

func (x *PlayerProfile) GetTributeTimeRemaining() int32 {
	if x != nil {
		return x.TributeTimeRemaining
	}
	return 0
}

func (x *PlayerProfile) GetCareerTributePoints() int32 {
	if x != nil {
		return x.CareerTributePoints
	}
	return 0
}

func (x *PlayerProfile) GetTributePoints() int32 {
	if x != nil {
		return x.TributePoints
	}
	return 0
}

func (x *PlayerProfile) GetTributeActive() int32 {
	if x != nil {
		return x.TributeActive
	}
	return 0
}

func (x *PlayerProfile) GetTributes() []*common.Tribute {
	if x != nil {
		return x.Tributes
	}
	return nil
}

func (x *PlayerProfile) GetGroupLeadershipExp() float64 {
	if x != nil {
		return x.GroupLeadershipExp
	}
	return 0
}

func (x *PlayerProfile) GetRaidLeadershipExp() float64 {
	if x != nil {
		return x.RaidLeadershipExp
	}
	return 0
}

func (x *PlayerProfile) GetGroupLeadershipPoints() int32 {
	if x != nil {
		return x.GroupLeadershipPoints
	}
	return 0
}

func (x *PlayerProfile) GetRaidLeadershipPoints() int32 {
	if x != nil {
		return x.RaidLeadershipPoints
	}
	return 0
}

func (x *PlayerProfile) GetLeaderAbilities() *common.LeadershipAA {
	if x != nil {
		return x.LeaderAbilities
	}
	return nil
}

func (x *PlayerProfile) GetAirRemaining() int32 {
	if x != nil {
		return x.AirRemaining
	}
	return 0
}

func (x *PlayerProfile) GetPvpKills() int32 {
	if x != nil {
		return x.PvpKills
	}
	return 0
}

func (x *PlayerProfile) GetPvpDeaths() int32 {
	if x != nil {
		return x.PvpDeaths
	}
	return 0
}

func (x *PlayerProfile) GetPvpCurrentPoints() int32 {
	if x != nil {
		return x.PvpCurrentPoints
	}
	return 0
}

func (x *PlayerProfile) GetPvpCareerPoints() int32 {
	if x != nil {
		return x.PvpCareerPoints
	}
	return 0
}

func (x *PlayerProfile) GetPvpBestKillStreak() int32 {
	if x != nil {
		return x.PvpBestKillStreak
	}
	return 0
}

func (x *PlayerProfile) GetPvpWorstDeathStreak() int32 {
	if x != nil {
		return x.PvpWorstDeathStreak
	}
	return 0
}

func (x *PlayerProfile) GetPvpCurrentKillStreak() int32 {
	if x != nil {
		return x.PvpCurrentKillStreak
	}
	return 0
}

func (x *PlayerProfile) GetPvpLastKill() *common.PVPStatsEntry {
	if x != nil {
		return x.PvpLastKill
	}
	return nil
}

func (x *PlayerProfile) GetPvpLastDeath() *common.PVPStatsEntry {
	if x != nil {
		return x.PvpLastDeath
	}
	return nil
}

func (x *PlayerProfile) GetPvpNumberOfKillsInLast_Hours() int32 {
	if x != nil {
		return x.PvpNumberOfKillsInLast_Hours
	}
	return 0
}

func (x *PlayerProfile) GetPvpRecentKills() []*common.PVPStatsEntry {
	if x != nil {
		return x.PvpRecentKills
	}
	return nil
}

func (x *PlayerProfile) GetExpAa() int32 {
	if x != nil {
		return x.ExpAa
	}
	return 0
}

func (x *PlayerProfile) GetCurrentRadCrystals() int32 {
	if x != nil {
		return x.CurrentRadCrystals
	}
	return 0
}

func (x *PlayerProfile) GetCareerRadCrystals() int32 {
	if x != nil {
		return x.CareerRadCrystals
	}
	return 0
}

func (x *PlayerProfile) GetCurrentEbonCrystals() int32 {
	if x != nil {
		return x.CurrentEbonCrystals
	}
	return 0
}

func (x *PlayerProfile) GetCareerEbonCrystals() int32 {
	if x != nil {
		return x.CareerEbonCrystals
	}
	return 0
}

func (x *PlayerProfile) GetGroupAutoconsent() int32 {
	if x != nil {
		return x.GroupAutoconsent
	}
	return 0
}

func (x *PlayerProfile) GetRaidAutoconsent() int32 {
	if x != nil {
		return x.RaidAutoconsent
	}
	return 0
}

func (x *PlayerProfile) GetGuildAutoconsent() int32 {
	if x != nil {
		return x.GuildAutoconsent
	}
	return 0
}

func (x *PlayerProfile) GetLevel3() int32 {
	if x != nil {
		return x.Level3
	}
	return 0
}

func (x *PlayerProfile) GetShowhelm() int32 {
	if x != nil {
		return x.Showhelm
	}
	return 0
}

func (x *PlayerProfile) GetInventoryItems() []*item.ItemInstance {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

var File_player_player_proto protoreflect.FileDescriptor

const file_player_player_proto_rawDesc = "" +
	"\n" +
	"\x13player/player.proto\x12\teq.player\x1a\x0fitem/item.proto\x1a\x13common/common.proto\"]\n" +
	"\x04Tint\x12\x12\n" +
	"\x04blue\x18\x01 \x01(\x05R\x04blue\x12\x14\n" +
	"\x05green\x18\x02 \x01(\x05R\x05green\x12\x10\n" +
	"\x03red\x18\x03 \x01(\x05R\x03red\x12\x19\n" +
	"\buse_tint\x18\x04 \x01(\x05R\auseTint\"T\n" +
	"\x0fCharSelectEquip\x12\x1a\n" +
	"\bmaterial\x18\x01 \x01(\x05R\bmaterial\x12%\n" +
	"\x05color\x18\x02 \x01(\v2\x0f.eq.player.TintR\x05color\"\xb8\x03\n" +
	"\x14CharacterSelectEntry\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"char_class\x18\x02 \x01(\x05R\tcharClass\x12\x12\n" +
	"\x04race\x18\x03 \x01(\x05R\x04race\x12\x14\n" +
	"\x05level\x18\x04 \x01(\x05R\x05level\x12\x12\n" +
	"\x04zone\x18\x05 \x01(\x05R\x04zone\x12\x1a\n" +
	"\binstance\x18\x06 \x01(\x05R\binstance\x12\x16\n" +
	"\x06gender\x18\a \x01(\x05R\x06gender\x12\x12\n" +
	"\x04face\x18\b \x01(\x05R\x04face\x12+\n" +
	"\x05items\x18\t \x03(\v2\x15.eq.item.ItemInstanceR\x05items\x12\x14\n" +
	"\x05deity\x18\n" +
	" \x01(\x05R\x05deity\x12&\n" +
	"\x0fprimary_id_file\x18\v \x01(\x05R\rprimaryIdFile\x12*\n" +
	"\x11secondary_id_file\x18\f \x01(\x05R\x0fsecondaryIdFile\x12\x17\n" +
	"\ago_home\x18\r \x01(\x05R\x06goHome\x12\x18\n" +
	"\aenabled\x18\x0e \x01(\x05R\aenabled\x12\x1d\n" +
	"\n" +
	"last_login\x18\x0f \x01(\x05R\tlastLogin\"{\n" +
	"\x0fCharacterSelect\x12'\n" +
	"\x0fcharacter_count\x18\x01 \x01(\x05R\x0echaracterCount\x12?\n" +
	"\n" +
	"characters\x18\x02 \x03(\v2\x1f.eq.player.CharacterSelectEntryR\n" +
	"characters\"\x97#\n" +
	"\rPlayerProfile\x12\x1a\n" +
	"\bchecksum\x18\x01 \x01(\x05R\bchecksum\x12\x16\n" +
	"\x06gender\x18\x02 \x01(\x05R\x06gender\x12\x12\n" +
	"\x04race\x18\x03 \x01(\x05R\x04race\x12\x1d\n" +
	"\n" +
	"char_class\x18\x04 \x01(\x05R\tcharClass\x12\x14\n" +
	"\x05level\x18\x05 \x01(\x05R\x05level\x12\x16\n" +
	"\x06level1\x18\x06 \x01(\x05R\x06level1\x12%\n" +
	"\x05binds\x18\a \x03(\v2\x0f.eq.common.BindR\x05binds\x12\x14\n" +
	"\x05deity\x18\b \x01(\x05R\x05deity\x12\"\n" +
	"\fintoxication\x18\t \x01(\x05R\fintoxication\x12,\n" +
	"\x12spell_slot_refresh\x18\n" +
	" \x03(\x05R\x10spellSlotRefresh\x120\n" +
	"\x14ability_slot_refresh\x18\v \x01(\x05R\x12abilitySlotRefresh\x12\x1c\n" +
	"\thaircolor\x18\f \x01(\x05R\thaircolor\x12\x1e\n" +
	"\n" +
	"beardcolor\x18\r \x01(\x05R\n" +
	"beardcolor\x12\x1c\n" +
	"\teyecolor1\x18\x0e \x01(\x05R\teyecolor1\x12\x1c\n" +
	"\teyecolor2\x18\x0f \x01(\x05R\teyecolor2\x12\x1c\n" +
	"\thairstyle\x18\x10 \x01(\x05R\thairstyle\x12\x14\n" +
	"\x05beard\x18\x11 \x01(\x05R\x05beard\x12>\n" +
	"\ritem_material\x18\x12 \x01(\v2\x19.eq.common.TextureProfileR\fitemMaterial\x12\x1b\n" +
	"\titem_tint\x18\x13 \x01(\x05R\bitemTint\x12.\n" +
	"\baa_array\x18\x14 \x03(\v2\x13.eq.common.AA_ArrayR\aaaArray\x12\x16\n" +
	"\x06points\x18\x15 \x01(\x05R\x06points\x12\x12\n" +
	"\x04mana\x18\x16 \x01(\x05R\x04mana\x12\x15\n" +
	"\x06cur_hp\x18\x17 \x01(\x05R\x05curHp\x12\x10\n" +
	"\x03str\x18\x18 \x01(\x05R\x03str\x12\x10\n" +
	"\x03sta\x18\x19 \x01(\x05R\x03sta\x12\x10\n" +
	"\x03cha\x18\x1a \x01(\x05R\x03cha\x12\x10\n" +
	"\x03dex\x18\x1b \x01(\x05R\x03dex\x12\x14\n" +
	"\x05intel\x18\x1c \x01(\x05R\x05intel\x12\x10\n" +
	"\x03agi\x18\x1d \x01(\x05R\x03agi\x12\x10\n" +
	"\x03wis\x18\x1e \x01(\x05R\x03wis\x12\x12\n" +
	"\x04face\x18\x1f \x01(\x05R\x04face\x12\x1d\n" +
	"\n" +
	"spell_book\x18  \x03(\x05R\tspellBook\x12\x1d\n" +
	"\n" +
	"mem_spells\x18! \x03(\x05R\tmemSpells\x12\x1a\n" +
	"\bplatinum\x18\" \x01(\x05R\bplatinum\x12\x12\n" +
	"\x04gold\x18# \x01(\x05R\x04gold\x12\x16\n" +
	"\x06silver\x18$ \x01(\x05R\x06silver\x12\x16\n" +
	"\x06copper\x18% \x01(\x05R\x06copper\x12'\n" +
	"\x0fplatinum_cursor\x18& \x01(\x05R\x0eplatinumCursor\x12\x1f\n" +
	"\vgold_cursor\x18' \x01(\x05R\n" +
	"goldCursor\x12#\n" +
	"\rsilver_cursor\x18( \x01(\x05R\fsilverCursor\x12#\n" +
	"\rcopper_cursor\x18) \x01(\x05R\fcopperCursor\x12\x16\n" +
	"\x06skills\x18* \x03(\x05R\x06skills\x12#\n" +
	"\rinnate_skills\x18+ \x03(\x05R\finnateSkills\x12\x1a\n" +
	"\btoxicity\x18, \x01(\x05R\btoxicity\x12!\n" +
	"\fthirst_level\x18- \x01(\x05R\vthirstLevel\x12!\n" +
	"\fhunger_level\x18. \x01(\x05R\vhungerLevel\x12*\n" +
	"\x05buffs\x18/ \x03(\v2\x14.eq.common.SpellBuffR\x05buffs\x128\n" +
	"\vdisciplines\x180 \x01(\v2\x16.eq.common.DisciplinesR\vdisciplines\x12#\n" +
	"\rrecast_timers\x181 \x03(\x05R\frecastTimers\x12\x1c\n" +
	"\tendurance\x182 \x01(\x05R\tendurance\x12%\n" +
	"\x0eaapoints_spent\x183 \x01(\x05R\raapointsSpent\x12\x1a\n" +
	"\baapoints\x184 \x01(\x05R\baapoints\x124\n" +
	"\n" +
	"bandoliers\x185 \x03(\v2\x14.eq.common.BandolierR\n" +
	"bandoliers\x125\n" +
	"\n" +
	"potionbelt\x186 \x01(\v2\x15.eq.common.PotionBeltR\n" +
	"potionbelt\x12'\n" +
	"\x0favailable_slots\x187 \x01(\x05R\x0eavailableSlots\x12\x12\n" +
	"\x04name\x188 \x01(\tR\x04name\x12\x1b\n" +
	"\tlast_name\x189 \x01(\tR\blastName\x12\x19\n" +
	"\bguild_id\x18: \x01(\x05R\aguildId\x12\x1a\n" +
	"\bbirthday\x18; \x01(\x05R\bbirthday\x12\x1c\n" +
	"\tlastlogin\x18< \x01(\x05R\tlastlogin\x12&\n" +
	"\x0ftime_played_min\x18= \x01(\x05R\rtimePlayedMin\x12\x10\n" +
	"\x03pvp\x18> \x01(\x05R\x03pvp\x12\x12\n" +
	"\x04anon\x18? \x01(\x05R\x04anon\x12\x0e\n" +
	"\x02gm\x18@ \x01(\x05R\x02gm\x12\x1c\n" +
	"\tguildrank\x18A \x01(\x05R\tguildrank\x12 \n" +
	"\vguildbanker\x18B \x01(\x05R\vguildbanker\x12\x10\n" +
	"\x03exp\x18C \x01(\x05R\x03exp\x124\n" +
	"\x15timeentitledonaccount\x18D \x01(\x05R\x15timeentitledonaccount\x12\x1c\n" +
	"\tlanguages\x18E \x03(\x05R\tlanguages\x12\f\n" +
	"\x01x\x18F \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18G \x01(\x02R\x01y\x12\f\n" +
	"\x01z\x18H \x01(\x02R\x01z\x12\x18\n" +
	"\aheading\x18I \x01(\x02R\aheading\x12#\n" +
	"\rplatinum_bank\x18J \x01(\x05R\fplatinumBank\x12\x1b\n" +
	"\tgold_bank\x18K \x01(\x05R\bgoldBank\x12\x1f\n" +
	"\vsilver_bank\x18L \x01(\x05R\n" +
	"silverBank\x12\x1f\n" +
	"\vcopper_bank\x18M \x01(\x05R\n" +
	"copperBank\x12'\n" +
	"\x0fplatinum_shared\x18N \x01(\x05R\x0eplatinumShared\x12\x1e\n" +
	"\n" +
	"expansions\x18O \x01(\x05R\n" +
	"expansions\x12\x1c\n" +
	"\tautosplit\x18P \x01(\x05R\tautosplit\x12\x17\n" +
	"\azone_id\x18Q \x01(\x05R\x06zoneId\x12#\n" +
	"\rzone_instance\x18R \x01(\x05R\fzoneInstance\x12:\n" +
	"\rgroup_members\x18S \x03(\v2\x15.eq.common.StringListR\fgroupMembers\x12!\n" +
	"\fgroup_leader\x18T \x01(\tR\vgroupLeader\x12\x1a\n" +
	"\bentityid\x18U \x01(\x05R\bentityid\x12$\n" +
	"\x0elead_aa_active\x18V \x01(\x05R\fleadAaActive\x12&\n" +
	"\x0fldon_points_guk\x18W \x01(\x05R\rldonPointsGuk\x12&\n" +
	"\x0fldon_points_mir\x18X \x01(\x05R\rldonPointsMir\x12&\n" +
	"\x0fldon_points_mmc\x18Y \x01(\x05R\rldonPointsMmc\x12&\n" +
	"\x0fldon_points_ruj\x18Z \x01(\x05R\rldonPointsRuj\x12&\n" +
	"\x0fldon_points_tak\x18[ \x01(\x05R\rldonPointsTak\x122\n" +
	"\x15ldon_points_available\x18\\ \x01(\x05R\x13ldonPointsAvailable\x124\n" +
	"\x16tribute_time_remaining\x18] \x01(\x05R\x14tributeTimeRemaining\x122\n" +
	"\x15career_tribute_points\x18^ \x01(\x05R\x13careerTributePoints\x12%\n" +
	"\x0etribute_points\x18_ \x01(\x05R\rtributePoints\x12%\n" +
	"\x0etribute_active\x18` \x01(\x05R\rtributeActive\x12.\n" +
	"\btributes\x18a \x03(\v2\x12.eq.common.TributeR\btributes\x120\n" +
	"\x14group_leadership_exp\x18b \x01(\x01R\x12groupLeadershipExp\x12.\n" +
	"\x13raid_leadership_exp\x18c \x01(\x01R\x11raidLeadershipExp\x126\n" +
	"\x17group_leadership_points\x18d \x01(\x05R\x15groupLeadershipPoints\x124\n" +
	"\x16raid_leadership_points\x18e \x01(\x05R\x14raidLeadershipPoints\x12B\n" +
	"\x10leader_abilities\x18f \x01(\v2\x17.eq.common.LeadershipAAR\x0fleaderAbilities\x12#\n" +
	"\rair_remaining\x18g \x01(\x05R\fairRemaining\x12\x1b\n" +
	"\tpvp_kills\x18h \x01(\x05R\bpvpKills\x12\x1d\n" +
	"\n" +
	"pvp_deaths\x18i \x01(\x05R\tpvpDeaths\x12,\n" +
	"\x12pvp_current_points\x18j \x01(\x05R\x10pvpCurrentPoints\x12*\n" +
	"\x11pvp_career_points\x18k \x01(\x05R\x0fpvpCareerPoints\x12/\n" +
	"\x14pvp_best_kill_streak\x18l \x01(\x05R\x11pvpBestKillStreak\x123\n" +
	"\x16pvp_worst_death_streak\x18m \x01(\x05R\x13pvpWorstDeathStreak\x125\n" +
	"\x17pvp_current_kill_streak\x18n \x01(\x05R\x14pvpCurrentKillStreak\x12<\n" +
	"\rpvp_last_kill\x18o \x01(\v2\x18.eq.common.PVPStatsEntryR\vpvpLastKill\x12>\n" +
	"\x0epvp_last_death\x18p \x01(\v2\x18.eq.common.PVPStatsEntryR\fpvpLastDeath\x12G\n" +
	"\"pvp_number_of_kills_in_last__hours\x18q \x01(\x05R\x1bpvpNumberOfKillsInLastHours\x12B\n" +
	"\x10pvp_recent_kills\x18r \x03(\v2\x18.eq.common.PVPStatsEntryR\x0epvpRecentKills\x12\x15\n" +
	"\x06exp_aa\x18s \x01(\x05R\x05expAa\x120\n" +
	"\x14current_rad_crystals\x18t \x01(\x05R\x12currentRadCrystals\x12.\n" +
	"\x13career_rad_crystals\x18u \x01(\x05R\x11careerRadCrystals\x122\n" +
	"\x15current_ebon_crystals\x18v \x01(\x05R\x13currentEbonCrystals\x120\n" +
	"\x14career_ebon_crystals\x18w \x01(\x05R\x12careerEbonCrystals\x12+\n" +
	"\x11group_autoconsent\x18x \x01(\x05R\x10groupAutoconsent\x12)\n" +
	"\x10raid_autoconsent\x18y \x01(\x05R\x0fraidAutoconsent\x12+\n" +
	"\x11guild_autoconsent\x18z \x01(\x05R\x10guildAutoconsent\x12\x16\n" +
	"\x06level3\x18{ \x01(\x05R\x06level3\x12\x1a\n" +
	"\bshowhelm\x18| \x01(\x05R\bshowhelm\x12>\n" +
	"\x0finventory_items\x18~ \x03(\v2\x15.eq.item.ItemInstanceR\x0einventoryItemsB4Z2github.com/knervous/eqgo/internal/api/proto/playerb\x06proto3"

var (
	file_player_player_proto_rawDescOnce sync.Once
	file_player_player_proto_rawDescData []byte
)

func file_player_player_proto_rawDescGZIP() []byte {
	file_player_player_proto_rawDescOnce.Do(func() {
		file_player_player_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_player_player_proto_rawDesc), len(file_player_player_proto_rawDesc)))
	})
	return file_player_player_proto_rawDescData
}

var file_player_player_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_player_player_proto_goTypes = []any{
	(*Tint)(nil),                  // 0: eq.player.Tint
	(*CharSelectEquip)(nil),       // 1: eq.player.CharSelectEquip
	(*CharacterSelectEntry)(nil),  // 2: eq.player.CharacterSelectEntry
	(*CharacterSelect)(nil),       // 3: eq.player.CharacterSelect
	(*PlayerProfile)(nil),         // 4: eq.player.PlayerProfile
	(*item.ItemInstance)(nil),     // 5: eq.item.ItemInstance
	(*common.Bind)(nil),           // 6: eq.common.Bind
	(*common.TextureProfile)(nil), // 7: eq.common.TextureProfile
	(*common.AA_Array)(nil),       // 8: eq.common.AA_Array
	(*common.SpellBuff)(nil),      // 9: eq.common.SpellBuff
	(*common.Disciplines)(nil),    // 10: eq.common.Disciplines
	(*common.Bandolier)(nil),      // 11: eq.common.Bandolier
	(*common.PotionBelt)(nil),     // 12: eq.common.PotionBelt
	(*common.StringList)(nil),     // 13: eq.common.StringList
	(*common.Tribute)(nil),        // 14: eq.common.Tribute
	(*common.LeadershipAA)(nil),   // 15: eq.common.LeadershipAA
	(*common.PVPStatsEntry)(nil),  // 16: eq.common.PVPStatsEntry
}
var file_player_player_proto_depIdxs = []int32{
	0,  // 0: eq.player.CharSelectEquip.color:type_name -> eq.player.Tint
	5,  // 1: eq.player.CharacterSelectEntry.items:type_name -> eq.item.ItemInstance
	2,  // 2: eq.player.CharacterSelect.characters:type_name -> eq.player.CharacterSelectEntry
	6,  // 3: eq.player.PlayerProfile.binds:type_name -> eq.common.Bind
	7,  // 4: eq.player.PlayerProfile.item_material:type_name -> eq.common.TextureProfile
	8,  // 5: eq.player.PlayerProfile.aa_array:type_name -> eq.common.AA_Array
	9,  // 6: eq.player.PlayerProfile.buffs:type_name -> eq.common.SpellBuff
	10, // 7: eq.player.PlayerProfile.disciplines:type_name -> eq.common.Disciplines
	11, // 8: eq.player.PlayerProfile.bandoliers:type_name -> eq.common.Bandolier
	12, // 9: eq.player.PlayerProfile.potionbelt:type_name -> eq.common.PotionBelt
	13, // 10: eq.player.PlayerProfile.group_members:type_name -> eq.common.StringList
	14, // 11: eq.player.PlayerProfile.tributes:type_name -> eq.common.Tribute
	15, // 12: eq.player.PlayerProfile.leader_abilities:type_name -> eq.common.LeadershipAA
	16, // 13: eq.player.PlayerProfile.pvp_last_kill:type_name -> eq.common.PVPStatsEntry
	16, // 14: eq.player.PlayerProfile.pvp_last_death:type_name -> eq.common.PVPStatsEntry
	16, // 15: eq.player.PlayerProfile.pvp_recent_kills:type_name -> eq.common.PVPStatsEntry
	5,  // 16: eq.player.PlayerProfile.inventory_items:type_name -> eq.item.ItemInstance
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_player_player_proto_init() }
func file_player_player_proto_init() {
	if File_player_player_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_player_player_proto_rawDesc), len(file_player_player_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_player_player_proto_goTypes,
		DependencyIndexes: file_player_player_proto_depIdxs,
		MessageInfos:      file_player_player_proto_msgTypes,
	}.Build()
	File_player_player_proto = out.File
	file_player_player_proto_goTypes = nil
	file_player_player_proto_depIdxs = nil
}
